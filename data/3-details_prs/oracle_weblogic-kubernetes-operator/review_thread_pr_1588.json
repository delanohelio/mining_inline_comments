{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjI4OTYz", "number": 1588, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozOTo1MFrOD1Tvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzo1NTozNlrOD5g_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI0NTcxOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDozOTo1MFrOGKrpiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1OToxNlrOGKstUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1NDA4OA==", "bodyText": "Let's not have a default, but have a required argument for the location of the model file.  I'll look at stage-model-image.sh, but it's unclear why I should need to stage the model file.  At this point, this seems unnecessary.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413854088", "createdAt": "2020-04-23T14:39:50Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTQ0Mw==", "bodyText": "Staging them gives the opportunity to customize the source image on a per image basis. The demo is intended to help show the development of different images.   Different images will commonly want to different model files/archives.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413871443", "createdAt": "2020-04-23T14:59:16Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1NDA4OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI3NDMxOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NDo0OVrOGKr63w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjoyOToxMFrOGKxLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODUyNw==", "bodyText": "Image tool has the concept of a cache directory, which you then reference.  It feels like we are just adding a bunch of machinery on top of the image tool.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413858527", "createdAt": "2020-04-23T14:44:49Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2ODM3MQ==", "bodyText": "What machinery is redundant?  This particular script expects some staged files.   The image tool requires them.  The staged files are setup with two small scripts - stage-tooling, which gets the source tooling, and stage-model-image, which sets up the source model.  Are you saying that's too much?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413868371", "createdAt": "2020-04-23T14:55:52Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODUyNw=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0NDY3Mw==", "bodyText": "Note that I'm under the impression image tool 'cache' concept is mainly intended for caching installers, and that's how it's being used in the sample.  This is the first I've  heard of it being used for caching model files.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413944673", "createdAt": "2020-04-23T16:29:10Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODUyNw=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI3NzIxOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NToyMFrOGKr8sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjoyNjo0MlrOGKxELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODk5NQ==", "bodyText": "Replace with arguments with defaults where the argument isn't required", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413858995", "createdAt": "2020-04-23T14:45:20Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NDM0Nw==", "bodyText": "The comment here documents the default, and it is being honored.\nAll of the scripts replace arguments with defaults.\nThis script loads them up via 'env-init.sh'.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413864347", "createdAt": "2020-04-23T14:51:10Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODk5NQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0MjgzMA==", "bodyText": "Are you saying that the WORKDIR env-var/argument isn't required?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413942830", "createdAt": "2020-04-23T16:26:42Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODk5NQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjI4ODUzOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo0NzoxNlrOGKsDjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1MjozN1rOGKsWWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDc0OA==", "bodyText": "This doesn't belong in this tool, but outside of it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413860748", "createdAt": "2020-04-23T14:47:16Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NDYxNw==", "bodyText": "What doesn't?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413864617", "createdAt": "2020-04-23T14:51:29Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDc0OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NTMxMw==", "bodyText": "The default behavior to skip rebuild when image already exists was insisted on by Mark.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413865313", "createdAt": "2020-04-23T14:52:20Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDc0OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NTU2Mw==", "bodyText": "And I agree that it's helpful...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413865563", "createdAt": "2020-04-23T14:52:37Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2MDc0OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjMxMTQ4OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1MTowOVrOGKsRfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1MzoxNVrOGKsYig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NDMxNg==", "bodyText": "Should just be a single argument.  Also, call to WIT below uses variable MODEL_IMAGE, which is not created from these variables in this script.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413864316", "createdAt": "2020-04-23T14:51:09Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NjEyMg==", "bodyText": "This can change - I agree it's confusing, but I'm following the tradition of the other samples.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413866122", "createdAt": "2020-04-23T14:53:15Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NDMxNg=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjM1ODYwOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDo1OTozNVrOGKsuRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozMjozMVrOGKub4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTY4Nw==", "bodyText": "This feature just doesn't make sense.  If I call a script called build-model-image.sh, then it should build the image.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413871687", "createdAt": "2020-04-23T14:59:35Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:\n+#      Defaults to 'model-in-image' and 'v1'.\n+#\n+\n+set -eu\n+set -o pipefail\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+source $SCRIPTDIR/env-init.sh\n+\n+cd ${WORKDIR}\n+\n+echo @@ Info: WDT_DOMAIN_TYPE=${WDT_DOMAIN_TYPE}\n+echo @@ Info: MODEL_DIR=${MODEL_DIR}\n+echo @@ Info: BASE_IMAGE_NAME=${BASE_IMAGE_NAME}\n+echo @@ Info: BASE_IMAGE_TAG=${BASE_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_NAME=${MODEL_IMAGE_NAME}\n+echo @@ Info: MODEL_IMAGE_TAG=${MODEL_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_BUILD=${MODEL_IMAGE_BUILD}\n+\n+if [ ! \"$MODEL_IMAGE_BUILD\" = \"always\" ] \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5OTc0Nw==", "bodyText": "This was requested by Mark.  This script is intended to be closer to 'production' than 'sample' - so it has 'optimizations' like this.  One side effect is that it forces the user to think once they see the message, to see if there intent was to obliterate an existing image.  For example, maybe they need to change the image name/tag.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413899747", "createdAt": "2020-04-23T15:32:31Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:\n+#      Defaults to 'model-in-image' and 'v1'.\n+#\n+\n+set -eu\n+set -o pipefail\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+source $SCRIPTDIR/env-init.sh\n+\n+cd ${WORKDIR}\n+\n+echo @@ Info: WDT_DOMAIN_TYPE=${WDT_DOMAIN_TYPE}\n+echo @@ Info: MODEL_DIR=${MODEL_DIR}\n+echo @@ Info: BASE_IMAGE_NAME=${BASE_IMAGE_NAME}\n+echo @@ Info: BASE_IMAGE_TAG=${BASE_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_NAME=${MODEL_IMAGE_NAME}\n+echo @@ Info: MODEL_IMAGE_TAG=${MODEL_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_BUILD=${MODEL_IMAGE_BUILD}\n+\n+if [ ! \"$MODEL_IMAGE_BUILD\" = \"always\" ] \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3MTY4Nw=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjQ0OTY4OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxNTozOVrOGKtk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxMjowNFrOGPMYIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTY3OA==", "bodyText": "On our \"stagging\" discussion, it seems down here when we call WIT that you can just list the models, properties files, and archives. This script could just take the same variables and be a lot simpler.  Then the doc. can show how to call it for the sample models and archives.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413885678", "createdAt": "2020-04-23T15:15:39Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:\n+#      Defaults to 'model-in-image' and 'v1'.\n+#\n+\n+set -eu\n+set -o pipefail\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+source $SCRIPTDIR/env-init.sh\n+\n+cd ${WORKDIR}\n+\n+echo @@ Info: WDT_DOMAIN_TYPE=${WDT_DOMAIN_TYPE}\n+echo @@ Info: MODEL_DIR=${MODEL_DIR}\n+echo @@ Info: BASE_IMAGE_NAME=${BASE_IMAGE_NAME}\n+echo @@ Info: BASE_IMAGE_TAG=${BASE_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_NAME=${MODEL_IMAGE_NAME}\n+echo @@ Info: MODEL_IMAGE_TAG=${MODEL_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_BUILD=${MODEL_IMAGE_BUILD}\n+\n+if [ ! \"$MODEL_IMAGE_BUILD\" = \"always\" ] \\\n+   && [ ! -z \"$(docker images -q $MODEL_IMAGE)\" ]; then\n+  echo \"@@\"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@ Info: NOTE!!!                                                                     \"\n+  echo \"@@ Info:   Skipping model image build because '$MODEL_IMAGE' found in docker images. \"\n+  echo \"@@ Info:   To always build the model image, 'export MODEL_IMAGE_BUILD=always'.       \"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@\"\n+  exit 0\n+fi\n+\n+if [ ! -d \"$MODEL_DIR\" ]; then\n+  echo \"@@ Error: MODEL_DIR directory not found. Did you remember to stage it first?\"\n+  exit 1\n+fi\n+\n+MODEL_YAML_FILES=\"$(ls $MODEL_DIR/*.yaml | xargs | sed 's/ /,/g')\"\n+MODEL_ARCHIVE_FILES=\"$(ls $MODEL_DIR/*.zip | xargs | sed 's/ /,/g')\"\n+MODEL_VARIABLE_FILES=\"$(ls $MODEL_DIR/*.properties | xargs | sed 's/ /,/g')\"\n+\n+echo @@ Info: MODEL_YAML_FILES=${MODEL_YAML_FILES}\n+echo @@ Info: MODEL_ARCHIVE_FILES=${MODEL_ARCHIVE_FILES}\n+echo @@ Info: MODEL_VARIABLE_FILES=${MODEL_VARIABLE_FILES}\n+\n+echo @@\n+echo @@ Info: Setting up imagetool and populating its cache with the WDT installer\n+echo @@\n+\n+mkdir -p imagetool/cache\n+mkdir -p imagetool/bld\n+unzip -o weblogic-image-tool.zip\n+\n+IMGTOOL=${WORKDIR}/imagetool/bin/imagetool.sh\n+\n+# The image tool uses the WLSIMG_CACHEDIR and WLSIMG_BLDIR env vars:\n+export WLSIMG_CACHEDIR=${WORKDIR}/imagetool/cache\n+export WLSIMG_BLDDIR=${WORKDIR}/imagetool/bld\n+\n+set -x\n+\n+${IMGTOOL} cache deleteEntry --key wdt_myversion\n+${IMGTOOL} cache addInstaller \\\n+  --type wdt --version myversion --path ${WORKDIR}/weblogic-deploy-tooling.zip\n+\n+set +x\n+\n+echo \"@@\"\n+echo \"@@ Info: Starting model image build for '$MODEL_IMAGE'\"\n+echo \"@@\"\n+\n+#\n+# Run the image tool to create the model image. It will use the WDT binaries\n+# in the local image tool cache marked with key 'myversion' (see 'cache' commands above).\n+# Note: The \"${macro:+text}\" syntax expands to \"\" if 'macro' is empty, and to 'text' if it isn't\n+#\n+\n+# TBD test empty cases, even all three empty\n+\n+set -x\n+\n+${IMGTOOL} update \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MzMyMQ==", "bodyText": "The script lets you specify a directory that contains the the models/props/archives.   How could it be simpler than that?  As for the staging, I realize it's a level of indirection, but staging gives the user a chance to customize same without obliterating their work on a different image.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413893321", "createdAt": "2020-04-23T15:24:44Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:\n+#      Defaults to 'model-in-image' and 'v1'.\n+#\n+\n+set -eu\n+set -o pipefail\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+source $SCRIPTDIR/env-init.sh\n+\n+cd ${WORKDIR}\n+\n+echo @@ Info: WDT_DOMAIN_TYPE=${WDT_DOMAIN_TYPE}\n+echo @@ Info: MODEL_DIR=${MODEL_DIR}\n+echo @@ Info: BASE_IMAGE_NAME=${BASE_IMAGE_NAME}\n+echo @@ Info: BASE_IMAGE_TAG=${BASE_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_NAME=${MODEL_IMAGE_NAME}\n+echo @@ Info: MODEL_IMAGE_TAG=${MODEL_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_BUILD=${MODEL_IMAGE_BUILD}\n+\n+if [ ! \"$MODEL_IMAGE_BUILD\" = \"always\" ] \\\n+   && [ ! -z \"$(docker images -q $MODEL_IMAGE)\" ]; then\n+  echo \"@@\"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@ Info: NOTE!!!                                                                     \"\n+  echo \"@@ Info:   Skipping model image build because '$MODEL_IMAGE' found in docker images. \"\n+  echo \"@@ Info:   To always build the model image, 'export MODEL_IMAGE_BUILD=always'.       \"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@\"\n+  exit 0\n+fi\n+\n+if [ ! -d \"$MODEL_DIR\" ]; then\n+  echo \"@@ Error: MODEL_DIR directory not found. Did you remember to stage it first?\"\n+  exit 1\n+fi\n+\n+MODEL_YAML_FILES=\"$(ls $MODEL_DIR/*.yaml | xargs | sed 's/ /,/g')\"\n+MODEL_ARCHIVE_FILES=\"$(ls $MODEL_DIR/*.zip | xargs | sed 's/ /,/g')\"\n+MODEL_VARIABLE_FILES=\"$(ls $MODEL_DIR/*.properties | xargs | sed 's/ /,/g')\"\n+\n+echo @@ Info: MODEL_YAML_FILES=${MODEL_YAML_FILES}\n+echo @@ Info: MODEL_ARCHIVE_FILES=${MODEL_ARCHIVE_FILES}\n+echo @@ Info: MODEL_VARIABLE_FILES=${MODEL_VARIABLE_FILES}\n+\n+echo @@\n+echo @@ Info: Setting up imagetool and populating its cache with the WDT installer\n+echo @@\n+\n+mkdir -p imagetool/cache\n+mkdir -p imagetool/bld\n+unzip -o weblogic-image-tool.zip\n+\n+IMGTOOL=${WORKDIR}/imagetool/bin/imagetool.sh\n+\n+# The image tool uses the WLSIMG_CACHEDIR and WLSIMG_BLDIR env vars:\n+export WLSIMG_CACHEDIR=${WORKDIR}/imagetool/cache\n+export WLSIMG_BLDDIR=${WORKDIR}/imagetool/bld\n+\n+set -x\n+\n+${IMGTOOL} cache deleteEntry --key wdt_myversion\n+${IMGTOOL} cache addInstaller \\\n+  --type wdt --version myversion --path ${WORKDIR}/weblogic-deploy-tooling.zip\n+\n+set +x\n+\n+echo \"@@\"\n+echo \"@@ Info: Starting model image build for '$MODEL_IMAGE'\"\n+echo \"@@\"\n+\n+#\n+# Run the image tool to create the model image. It will use the WDT binaries\n+# in the local image tool cache marked with key 'myversion' (see 'cache' commands above).\n+# Note: The \"${macro:+text}\" syntax expands to \"\" if 'macro' is empty, and to 'text' if it isn't\n+#\n+\n+# TBD test empty cases, even all three empty\n+\n+set -x\n+\n+${IMGTOOL} update \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTY3OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5NTUzMw==", "bodyText": "Are you saying you want the option to specify specific files for each? I had that option for at one point during development, and I can add that back in, but note that that turned out to have it's own confusion in practice.  It added more 'options' which had a side effect of obscuring the overall intent of the sample.  It also discouraged a best practice of having all files needed for an image gathered in one place...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413895533", "createdAt": "2020-04-23T15:27:23Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:\n+#      Defaults to 'model-in-image' and 'v1'.\n+#\n+\n+set -eu\n+set -o pipefail\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+source $SCRIPTDIR/env-init.sh\n+\n+cd ${WORKDIR}\n+\n+echo @@ Info: WDT_DOMAIN_TYPE=${WDT_DOMAIN_TYPE}\n+echo @@ Info: MODEL_DIR=${MODEL_DIR}\n+echo @@ Info: BASE_IMAGE_NAME=${BASE_IMAGE_NAME}\n+echo @@ Info: BASE_IMAGE_TAG=${BASE_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_NAME=${MODEL_IMAGE_NAME}\n+echo @@ Info: MODEL_IMAGE_TAG=${MODEL_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_BUILD=${MODEL_IMAGE_BUILD}\n+\n+if [ ! \"$MODEL_IMAGE_BUILD\" = \"always\" ] \\\n+   && [ ! -z \"$(docker images -q $MODEL_IMAGE)\" ]; then\n+  echo \"@@\"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@ Info: NOTE!!!                                                                     \"\n+  echo \"@@ Info:   Skipping model image build because '$MODEL_IMAGE' found in docker images. \"\n+  echo \"@@ Info:   To always build the model image, 'export MODEL_IMAGE_BUILD=always'.       \"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@\"\n+  exit 0\n+fi\n+\n+if [ ! -d \"$MODEL_DIR\" ]; then\n+  echo \"@@ Error: MODEL_DIR directory not found. Did you remember to stage it first?\"\n+  exit 1\n+fi\n+\n+MODEL_YAML_FILES=\"$(ls $MODEL_DIR/*.yaml | xargs | sed 's/ /,/g')\"\n+MODEL_ARCHIVE_FILES=\"$(ls $MODEL_DIR/*.zip | xargs | sed 's/ /,/g')\"\n+MODEL_VARIABLE_FILES=\"$(ls $MODEL_DIR/*.properties | xargs | sed 's/ /,/g')\"\n+\n+echo @@ Info: MODEL_YAML_FILES=${MODEL_YAML_FILES}\n+echo @@ Info: MODEL_ARCHIVE_FILES=${MODEL_ARCHIVE_FILES}\n+echo @@ Info: MODEL_VARIABLE_FILES=${MODEL_VARIABLE_FILES}\n+\n+echo @@\n+echo @@ Info: Setting up imagetool and populating its cache with the WDT installer\n+echo @@\n+\n+mkdir -p imagetool/cache\n+mkdir -p imagetool/bld\n+unzip -o weblogic-image-tool.zip\n+\n+IMGTOOL=${WORKDIR}/imagetool/bin/imagetool.sh\n+\n+# The image tool uses the WLSIMG_CACHEDIR and WLSIMG_BLDIR env vars:\n+export WLSIMG_CACHEDIR=${WORKDIR}/imagetool/cache\n+export WLSIMG_BLDDIR=${WORKDIR}/imagetool/bld\n+\n+set -x\n+\n+${IMGTOOL} cache deleteEntry --key wdt_myversion\n+${IMGTOOL} cache addInstaller \\\n+  --type wdt --version myversion --path ${WORKDIR}/weblogic-deploy-tooling.zip\n+\n+set +x\n+\n+echo \"@@\"\n+echo \"@@ Info: Starting model image build for '$MODEL_IMAGE'\"\n+echo \"@@\"\n+\n+#\n+# Run the image tool to create the model image. It will use the WDT binaries\n+# in the local image tool cache marked with key 'myversion' (see 'cache' commands above).\n+# Note: The \"${macro:+text}\" syntax expands to \"\" if 'macro' is empty, and to 'text' if it isn't\n+#\n+\n+# TBD test empty cases, even all three empty\n+\n+set -x\n+\n+${IMGTOOL} update \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTY3OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NDYxMA==", "bodyText": "Are this and your other comments resolved now?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r418584610", "createdAt": "2020-05-01T15:12:04Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/build-model-image.sh", "diffHunk": "@@ -0,0 +1,144 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+# \n+#  Summary:\n+#\n+#    This script builds a model image using the WebLogic Image Tool. The\n+#    tool pulls a base image if there isn't already a local base image.\n+#    This script, by default, builds the model image with model files from\n+#    './stage-model-image.sh' plus tooling downloaded by './stage-tooling.sh.'.\n+#\n+#  Assumptions:\n+#\n+#    - The WebLogic Image Tool zip is 'WORKDIR/weblogic-image-tool.zip' and\n+#      the WebLogic Deploy Tool zip is 'WORKDIR/weblogic-deploy-tooling.zip'\n+#      (see './stage-tooling.sh').\n+#\n+#    - Model files have been staged in the MODEL_DIR directory\n+#      (by './stage-model-image.sh' or some custom process).\n+#\n+#  Optional environment variables:\n+#\n+#    WORKDIR\n+#      Working directory for the sample with at least 10GB of space.\n+#      Defaults to '/tmp/$USER/model-in-image-sample-work-dir'.\n+#\n+#    MODEL_DIR:\n+#      Location of the model .zip, .properties, and .yaml files\n+#      that will be copied to the model image.  Default is:\n+#        'WORKDIR/model/image--$(basename $MODEL_IMAGE_NAME):$MODEL_IMAGE_TAG'\n+#      which is usually populated by the './stage-model-image.sh' script.\n+#\n+#    MODEL_IMAGE_BUILD:\n+#      Set to 'when-changed' (default) or 'always'. Default behavior is to\n+#      exit without building if the docker image BASE_IMAGE_NAME:BASE_IMAGE_TAG\n+#      is found in the local docker image cache.\n+#\n+#    WDT_DOMAIN_TYPE\n+#      'WLS' (default), 'RestrictedJRF', or 'JRF'.\n+#\n+#    BASE_IMAGE_NAME, BASE_IMAGE_TAG:\n+#      The base image name defaults to \n+#         'container-registry.oracle.com/middleware/weblogic'\n+#      for the 'WLS' domain type, and otherwise defaults to \n+#         'container-registry.oracle.com/middleware/fmw-infrastructure'. \n+#      The tag defaults to '12.2.1.4'.\n+#\n+#    MODEL_IMAGE_NAME, MODEL_IMAGE_TAG:\n+#      Defaults to 'model-in-image' and 'v1'.\n+#\n+\n+set -eu\n+set -o pipefail\n+\n+SCRIPTDIR=\"$( cd \"$(dirname \"$0\")\" > /dev/null 2>&1 ; pwd -P )\"\n+source $SCRIPTDIR/env-init.sh\n+\n+cd ${WORKDIR}\n+\n+echo @@ Info: WDT_DOMAIN_TYPE=${WDT_DOMAIN_TYPE}\n+echo @@ Info: MODEL_DIR=${MODEL_DIR}\n+echo @@ Info: BASE_IMAGE_NAME=${BASE_IMAGE_NAME}\n+echo @@ Info: BASE_IMAGE_TAG=${BASE_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_NAME=${MODEL_IMAGE_NAME}\n+echo @@ Info: MODEL_IMAGE_TAG=${MODEL_IMAGE_TAG}\n+echo @@ Info: MODEL_IMAGE_BUILD=${MODEL_IMAGE_BUILD}\n+\n+if [ ! \"$MODEL_IMAGE_BUILD\" = \"always\" ] \\\n+   && [ ! -z \"$(docker images -q $MODEL_IMAGE)\" ]; then\n+  echo \"@@\"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@ Info: NOTE!!!                                                                     \"\n+  echo \"@@ Info:   Skipping model image build because '$MODEL_IMAGE' found in docker images. \"\n+  echo \"@@ Info:   To always build the model image, 'export MODEL_IMAGE_BUILD=always'.       \"\n+  echo \"@@ Info: ----------------------------------------------------------------------------\"\n+  echo \"@@\"\n+  exit 0\n+fi\n+\n+if [ ! -d \"$MODEL_DIR\" ]; then\n+  echo \"@@ Error: MODEL_DIR directory not found. Did you remember to stage it first?\"\n+  exit 1\n+fi\n+\n+MODEL_YAML_FILES=\"$(ls $MODEL_DIR/*.yaml | xargs | sed 's/ /,/g')\"\n+MODEL_ARCHIVE_FILES=\"$(ls $MODEL_DIR/*.zip | xargs | sed 's/ /,/g')\"\n+MODEL_VARIABLE_FILES=\"$(ls $MODEL_DIR/*.properties | xargs | sed 's/ /,/g')\"\n+\n+echo @@ Info: MODEL_YAML_FILES=${MODEL_YAML_FILES}\n+echo @@ Info: MODEL_ARCHIVE_FILES=${MODEL_ARCHIVE_FILES}\n+echo @@ Info: MODEL_VARIABLE_FILES=${MODEL_VARIABLE_FILES}\n+\n+echo @@\n+echo @@ Info: Setting up imagetool and populating its cache with the WDT installer\n+echo @@\n+\n+mkdir -p imagetool/cache\n+mkdir -p imagetool/bld\n+unzip -o weblogic-image-tool.zip\n+\n+IMGTOOL=${WORKDIR}/imagetool/bin/imagetool.sh\n+\n+# The image tool uses the WLSIMG_CACHEDIR and WLSIMG_BLDIR env vars:\n+export WLSIMG_CACHEDIR=${WORKDIR}/imagetool/cache\n+export WLSIMG_BLDDIR=${WORKDIR}/imagetool/bld\n+\n+set -x\n+\n+${IMGTOOL} cache deleteEntry --key wdt_myversion\n+${IMGTOOL} cache addInstaller \\\n+  --type wdt --version myversion --path ${WORKDIR}/weblogic-deploy-tooling.zip\n+\n+set +x\n+\n+echo \"@@\"\n+echo \"@@ Info: Starting model image build for '$MODEL_IMAGE'\"\n+echo \"@@\"\n+\n+#\n+# Run the image tool to create the model image. It will use the WDT binaries\n+# in the local image tool cache marked with key 'myversion' (see 'cache' commands above).\n+# Note: The \"${macro:+text}\" syntax expands to \"\" if 'macro' is empty, and to 'text' if it isn't\n+#\n+\n+# TBD test empty cases, even all three empty\n+\n+set -x\n+\n+${IMGTOOL} update \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTY3OA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjQ1NzY1OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/create-domain-resource.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxNzowOFrOGKtp-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozMDoyNVrOGKuVFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4Njk3MA==", "bodyText": "Oh, this script deploys the domain resource... I was thinking that this script creates the domain resource yaml based on the model.  I don't really need a script for the customer to kubectl apply -f domain.yaml.  Let me see what else is here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413886970", "createdAt": "2020-04-23T15:17:08Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/create-domain-resource.sh", "diffHunk": "@@ -0,0 +1,146 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+#\n+# This script deploys the domain resoure in WORKDIR/mii-DOMAIN_UID.yaml.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5ODAwNg==", "bodyText": "The sample doc that walks through the sample will clearly include the exact apply command and won't emphasize this script.  In fact, the sample doc will do pretty much the same for all of the scripts. This script is mainly intended for automation/testing of the sample  - which are core requirements that aren't directly related to using this branch as a sample.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413898006", "createdAt": "2020-04-23T15:30:25Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/create-domain-resource.sh", "diffHunk": "@@ -0,0 +1,146 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+#\n+# This script deploys the domain resoure in WORKDIR/mii-DOMAIN_UID.yaml.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4Njk3MA=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjU5ODg3OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerSpecCommonImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0MzoxNVrOGKu-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1NTozMVrOGR_wCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODQ4NQ==", "bodyText": "Need to see if you did it, but if we normalize missing labels on existing pods before creating the hash, then we won't roll existing pods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413908485", "createdAt": "2020-04-23T15:43:15Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerSpecCommonImpl.java", "diffHunk": "@@ -228,17 +228,20 @@ public V1SecurityContext getContainerSecurityContext() {\n \n   @Override\n   public String getDomainRestartVersion() {\n-    return domainSpec.getRestartVersion();\n+    // treat null, unset, and \"\" as the same restartVersion \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMTM2OQ==", "bodyText": "Isn't the hash generated using the above?   This change is for 3.0, so there won't be existing pods that aren't normalized.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r413911369", "createdAt": "2020-04-23T15:46:54Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerSpecCommonImpl.java", "diffHunk": "@@ -228,17 +228,20 @@ public V1SecurityContext getContainerSecurityContext() {\n \n   @Override\n   public String getDomainRestartVersion() {\n-    return domainSpec.getRestartVersion();\n+    // treat null, unset, and \"\" as the same restartVersion \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODQ4NQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NDg5Mg==", "bodyText": "Do we still need these changes?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r421484892", "createdAt": "2020-05-07T13:01:18Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerSpecCommonImpl.java", "diffHunk": "@@ -228,17 +228,20 @@ public V1SecurityContext getContainerSecurityContext() {\n \n   @Override\n   public String getDomainRestartVersion() {\n-    return domainSpec.getRestartVersion();\n+    // treat null, unset, and \"\" as the same restartVersion \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODQ4NQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMzQ2Ng==", "bodyText": "The changes were never absolutely needed.  They're a \"nice to have\".\nThe issue is that the average user plus at least one public Kubernetes API view 0-length and null strings as the same, but the operator treats them differently.  This makes the attribute a little confusing at its \"edges\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r421523466", "createdAt": "2020-05-07T13:55:31Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerSpecCommonImpl.java", "diffHunk": "@@ -228,17 +228,20 @@ public V1SecurityContext getContainerSecurityContext() {\n \n   @Override\n   public String getDomainRestartVersion() {\n-    return domainSpec.getRestartVersion();\n+    // treat null, unset, and \"\" as the same restartVersion \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODQ4NQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzI4MDY2OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-archive/wlsdeploy/applications/myapp/sample_war/index.jsp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODowODoxOFrOGK1ZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoyODo1NlrOGL-h1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMzc4MQ==", "bodyText": "This won't show in the browser but goes to the stdout of the server", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414013781", "createdAt": "2020-04-23T18:08:18Z", "author": {"login": "jshum2479"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-archive/wlsdeploy/applications/myapp/sample_war/index.jsp", "diffHunk": "@@ -0,0 +1,44 @@\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    String srName=System.getProperty(\"weblogic.Name\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"**************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! Welcome to WebLogic server '\" + srName + \"'!\");\n+\n+    ic = new InitialContext();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    ObjectName jvmRuntime  = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JVMRuntime\");\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+\n+    out.println();\n+    out.println(\"Free JVM Heap \" + mbs.getAttribute(jvmRuntime, \"HeapFreePercent\") + \"%.\");\n+    out.println();\n+    out.println(\"Found \" + dataSources.length + \" data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+\n+    out.println();\n+    out.println(\"**************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMTk5MQ==", "bodyText": "I think it does show in the browser - I've tested it.   Note that it's not going to 'stdout' but to 'response.getOutputStream()'.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r415211991", "createdAt": "2020-04-26T04:28:56Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-archive/wlsdeploy/applications/myapp/sample_war/index.jsp", "diffHunk": "@@ -0,0 +1,44 @@\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    String srName=System.getProperty(\"weblogic.Name\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"**************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! Welcome to WebLogic server '\" + srName + \"'!\");\n+\n+    ic = new InitialContext();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    ObjectName jvmRuntime  = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JVMRuntime\");\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+\n+    out.println();\n+    out.println(\"Free JVM Heap \" + mbs.getAttribute(jvmRuntime, \"HeapFreePercent\") + \"%.\");\n+    out.println();\n+    out.println(\"Found \" + dataSources.length + \" data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+\n+    out.println();\n+    out.println(\"**************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMzc4MQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzI5MjExOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-model/JRF/model.10.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMTowM1rOGK1gNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxMjozN1rOGPMZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNTU0Mg==", "bodyText": "Are we packaging as exploded format or ear format?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414015542", "createdAt": "2020-04-23T18:11:03Z", "author": {"login": "jshum2479"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-model/JRF/model.10.yaml", "diffHunk": "@@ -0,0 +1,39 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server2':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server3':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server4':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+           \n+appDeployments:\n+    Application:\n+        myear:\n+            SourcePath: 'wlsdeploy/applications/myapp'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NjQyMQ==", "bodyText": "Exploded.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414066421", "createdAt": "2020-04-23T19:30:25Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-model/JRF/model.10.yaml", "diffHunk": "@@ -0,0 +1,39 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server2':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server3':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server4':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+           \n+appDeployments:\n+    Application:\n+        myear:\n+            SourcePath: 'wlsdeploy/applications/myapp'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNTU0Mg=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NDg0NQ==", "bodyText": "Please resolve this and your other comments if your fine with them now.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r418584845", "createdAt": "2020-05-01T15:12:37Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/model-in-image/sample-model/JRF/model.10.yaml", "diffHunk": "@@ -0,0 +1,39 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server2':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server3':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+         'managed-server4':\n+            Cluster: 'cluster-1'\n+            ListenPort: '@@PROP:MANSVR_PORT@@'\n+           \n+appDeployments:\n+    Application:\n+        myear:\n+            SourcePath: 'wlsdeploy/applications/myapp'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNTU0Mg=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzUxMDY3OnYy", "diffSide": "RIGHT", "path": "src/integration-tests/model-in-image/README", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTowMjozMVrOGK3j5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozMjozN1rOGK4sWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0OTI1Mw==", "bodyText": "What's the meaning of multi-minute update?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414049253", "createdAt": "2020-04-23T19:02:31Z", "author": {"login": "jshum2479"}, "path": "src/integration-tests/model-in-image/README", "diffHunk": "@@ -0,0 +1,120 @@\n+Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+SUMMARY:\n+\n+  This is a stand alone test for running the mii-sample in\n+  'kubernetes/samples/scripts/create-weblogic-domain/model-in-image'.\n+\n+IMPORTANT NOTES:\n+\n+  (1) This test isn't currently integrated with the test\n+      suite framework. Instructions for doing so are below.\n+\n+  (2) This test assumes Kubernetes is running locally \n+      on a single machine. (It builds/uses local images\n+      without pushing them.)\n+\n+-------------------\n+To run stand alone:\n+-------------------\n+\n+  1) Optionally customize the following:\n+\n+     export WORKDIR=/tmp/$USER/model-in-image-sample-work-dir\n+     export MODEL_IMAGE_NAME=model-in-image\n+     export MODEL_IMAGE_TAG=v1\n+     export DOMAIN_NAMESPACE=sample-domain1-ns\n+     export DOMAIN_UID=sample-domain1\n+\n+     Defaults are as shown.\n+\n+     See the sample's 'custom-env.sh' file and this\n+     test's 'env.sh' for additional customizable env vars.\n+\n+  2) If running JRF:\n+\n+     export DB_NAMESPACE=\n+\n+     This defaults to 'default'.\n+\n+  3) Run the test.\n+\n+     For WLS: ./run.sh -clean [-noupdate]\n+     For JRF: ./run.sh -clean [-noupdate] -jrf -db\n+\n+     WARNINGS AND NOTES:\n+\n+       - The '-clean' option:\n+\n+         - Calls 'cleanup.sh' before doing anything else, \n+           which deletes almost everything in your k8s cluster.\n+\n+         - Deletes the current WORKDIR before proceeding.\n+\n+         - Implicitly cause the test to build/deploy the operator,\n+           and to deploy traefik on node port 303035.\n+\n+       - The '-db' option will cause the test to deploy Oracle DB.\n+\n+       - Pass '-noupdate' to skip the multi-minute 'update' portion of the test.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NzgwMw==", "bodyText": "Note that this directory is for test purposes, it's not part of the sample.\nThe reason for the comment is that it takes several minutes to do a roll.  So the option is there to skip that part.  When testing, or giving a 'simplified' form of the demo, it's often sufficient to skip the roll demo...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414067803", "createdAt": "2020-04-23T19:32:37Z", "author": {"login": "tbarnes-us"}, "path": "src/integration-tests/model-in-image/README", "diffHunk": "@@ -0,0 +1,120 @@\n+Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+SUMMARY:\n+\n+  This is a stand alone test for running the mii-sample in\n+  'kubernetes/samples/scripts/create-weblogic-domain/model-in-image'.\n+\n+IMPORTANT NOTES:\n+\n+  (1) This test isn't currently integrated with the test\n+      suite framework. Instructions for doing so are below.\n+\n+  (2) This test assumes Kubernetes is running locally \n+      on a single machine. (It builds/uses local images\n+      without pushing them.)\n+\n+-------------------\n+To run stand alone:\n+-------------------\n+\n+  1) Optionally customize the following:\n+\n+     export WORKDIR=/tmp/$USER/model-in-image-sample-work-dir\n+     export MODEL_IMAGE_NAME=model-in-image\n+     export MODEL_IMAGE_TAG=v1\n+     export DOMAIN_NAMESPACE=sample-domain1-ns\n+     export DOMAIN_UID=sample-domain1\n+\n+     Defaults are as shown.\n+\n+     See the sample's 'custom-env.sh' file and this\n+     test's 'env.sh' for additional customizable env vars.\n+\n+  2) If running JRF:\n+\n+     export DB_NAMESPACE=\n+\n+     This defaults to 'default'.\n+\n+  3) Run the test.\n+\n+     For WLS: ./run.sh -clean [-noupdate]\n+     For JRF: ./run.sh -clean [-noupdate] -jrf -db\n+\n+     WARNINGS AND NOTES:\n+\n+       - The '-clean' option:\n+\n+         - Calls 'cleanup.sh' before doing anything else, \n+           which deletes almost everything in your k8s cluster.\n+\n+         - Deletes the current WORKDIR before proceeding.\n+\n+         - Implicitly cause the test to build/deploy the operator,\n+           and to deploy traefik on node port 303035.\n+\n+       - The '-db' option will cause the test to deploy Oracle DB.\n+\n+       - Pass '-noupdate' to skip the multi-minute 'update' portion of the test.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0OTI1Mw=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzU4ODE5OnYy", "diffSide": "RIGHT", "path": "src/integration-tests/model-in-image/README", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToyMToyM1rOGK4RbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozMzoyNlrOGK4uGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MDkwOQ==", "bodyText": "Is this the first file user will look at (or the landing page is at the documentation)?  I am just wondering how the user knows where things occured", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414060909", "createdAt": "2020-04-23T19:21:23Z", "author": {"login": "jshum2479"}, "path": "src/integration-tests/model-in-image/README", "diffHunk": "@@ -0,0 +1,120 @@\n+Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+SUMMARY:\n+\n+  This is a stand alone test for running the mii-sample in\n+  'kubernetes/samples/scripts/create-weblogic-domain/model-in-image'.\n+\n+IMPORTANT NOTES:\n+\n+  (1) This test isn't currently integrated with the test\n+      suite framework. Instructions for doing so are below.\n+\n+  (2) This test assumes Kubernetes is running locally \n+      on a single machine. (It builds/uses local images\n+      without pushing them.)\n+\n+-------------------\n+To run stand alone:\n+-------------------\n+\n+  1) Optionally customize the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2ODI0OA==", "bodyText": "No. This is a test. It's not meant for users.    See the files in the sample directory for the sample.\nRead the pull summary for details.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r414068248", "createdAt": "2020-04-23T19:33:26Z", "author": {"login": "tbarnes-us"}, "path": "src/integration-tests/model-in-image/README", "diffHunk": "@@ -0,0 +1,120 @@\n+Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+SUMMARY:\n+\n+  This is a stand alone test for running the mii-sample in\n+  'kubernetes/samples/scripts/create-weblogic-domain/model-in-image'.\n+\n+IMPORTANT NOTES:\n+\n+  (1) This test isn't currently integrated with the test\n+      suite framework. Instructions for doing so are below.\n+\n+  (2) This test assumes Kubernetes is running locally \n+      on a single machine. (It builds/uses local images\n+      without pushing them.)\n+\n+-------------------\n+To run stand alone:\n+-------------------\n+\n+  1) Optionally customize the following:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MDkwOQ=="}, "originalCommit": {"oid": "462f4dfad9e17c9ad82be8d103645d91317e0c1a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc2MDk3OnYy", "diffSide": "RIGHT", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo1NjowM1rOGQJREA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOToyMjo0NlrOGQ4KBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4MjIyNA==", "bodyText": "i found line 40 confusing - it implied to me that i do not have to put the archive in the image, that i can put it somewhere else - maybe in the configmap, like this section goes on to describe for the model and properties.  but i think it actually means to say that is is optional because i might not have one at all? is that right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419582224", "createdAt": "2020-05-04T16:56:03Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -48,11 +48,11 @@ There are two methods for layering Model in Image artifacts on top of a base ima\n \n For more information about model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n \n-#### 3. Optional WDT model config map\n+#### 3. Optional WDT model configmap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f9d6d769487084283f7bfc10cdbf251b587d13"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MDQ3MQ==", "bodyText": "good catch - i've updated this and the related mention in the sample doc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420350471", "createdAt": "2020-05-05T19:22:46Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -48,11 +48,11 @@ There are two methods for layering Model in Image artifacts on top of a base ima\n \n For more information about model file syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}).\n \n-#### 3. Optional WDT model config map\n+#### 3. Optional WDT model configmap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4MjIyNA=="}, "originalCommit": {"oid": "a3f9d6d769487084283f7bfc10cdbf251b587d13"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc4MTcwOnYy", "diffSide": "RIGHT", "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMTowN1rOGQJd1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMTowN1rOGQJd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NTQ5NA==", "bodyText": "for line 154 (not sure why it won't let me add a comment there)\ni don't think this warning is quite accurate - they can always ask the dba to reset the password", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419585494", "createdAt": "2020-05-04T17:01:07Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/userguide/managing-domains/model-in-image/usage.md", "diffHunk": "@@ -105,8 +105,8 @@ The following domain resource attributes are specific to Model in Image domains.\n | -------------------------                    |  ------------------ |\n | `domainHomeSourceType`                       |  Required. Set to `FromModel`. |\n | `domainHome`                                 |  Must reference an empty or non-existent directory within your image. Do not include the mount path of any persistent volume. Note that Model in Image recreates the domain home for a WebLogic pod every time the pod restarts.|\n-| `configuration.model.configMap`             | Optional. Set if you have stored additional models in a config map as per [Optional WDT model config map](#3-optional-wdt-model-config-map). |\n-| `configuration.secrets`                      | Optional. Set this array if your image or config map models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret`, then set to `[my-secret, my-other-secret]`.|\n+| `configuration.model.configMap`             | Optional. Set if you have stored additional models in a configmap as per [Optional WDT model configmap](#3-optional-wdt-model-config-map). |\n+| `configuration.secrets`                      | Optional. Set this array if your image or configmap models contain macros that reference custom Kubernetes secrets. For example, if your macros depend on secrets `my-secret` and `my-other-secret`, then set to `[my-secret, my-other-secret]`.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTg3NzUxOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyNToxN1rOGQKY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyNToxN1rOGQKY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMDYwMQ==", "bodyText": "i found this a bit magical... i think it needs to be explained more.  maybe move the note from 270 up to above this and expand it a little bit?   so i know before i get to this step what i am about to do, otherwise i am left wondering for a little while and might go off on a tangent trying to work it out only to come back later and find the answer on the next line :(", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419600601", "createdAt": "2020-05-04T17:25:17Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -2,142 +2,366 @@\n title: \"Model in image\"\n date: 2019-02-23T17:32:31-05:00\n weight: 4\n-description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator expands into a full domain home during runtime.\"\n+description: \"Sample for supplying a WebLogic Deploy Tooling (WDT) model that the operator expands into a full domain home during runtime.\"\n ---\n \n-#### Contents\n-\n-  - [Introduction](#introduction)\n-  - [References](#references)\n-  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n-  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n-    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n-    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n-    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n-    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n-  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n-  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n-  - [Optionally test the sample application](#optionally-test-the-sample-application)\n-  - [Optionally access the WebLogic Server Administration Console](#optionally-access-the-weblogic-server-administration-console)\n-  - [Cleanup](#cleanup)\n-\n-#### Introduction\n-\n-This sample demonstrates deploying a Model in Image domain home source type. Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, a Model in Image deployment uses a WebLogic Deploy Tool (WDT) model to specify your WebLogic configuration.\n-\n-WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+### Contents\n \n-For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n+   - [Introduction](#introduction)\n+     - [Model in Image domain types (WLS, JRF, and Restricted JRF)](#model-in-image-domain-types-wls-jrf-and-restricted-jrf)\n+     - [Use cases](#use-cases)\n+     - [Sample directory structure](#sample-directory-structure)\n+   - [References](#references)\n+   - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+   - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+   - [Initial use case](#initial-use-case): An initial WebLogic domain\n+   - [Update1 use case](#update1-use-case): Dynamically adding a data source using a model configmap\n+   - [Accessing the WebLogic Server Administration Console](#accessing-the-weblogic-server-administration-console)\n+   - [Cleanup](#cleanup)\n \n-In detail, this sample demonstrates Model in Image:\n \n-  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and the model for a WebLogic domain configuration defined using a WDT model file.\n-  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n-  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n-  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n-  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+### Introduction\n \n-__Note about Model in Image domain types:__\n \n-There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+This sample demonstrates deploying a Model in Image [domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}). Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, Model in Image uses a WebLogic Deploy Tooling (WDT) model to specify your WebLogic configuration.\n \n-The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling) GitHub project, and the required directory structure for a WDT archive is specifically discussed [here](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md).\n \n-#### References\n+For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n \n-To reference the relevant user documentation, see:\n+#### Model in Image domain types (WLS, JRF, and Restricted JRF)\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain. This sample demonstrates the `WLS` and `JRF` types.\n+\n+The `JRF` domain path through the sample includes additional steps required for JRF: deploying an infrastructure database, initializing the database using the Repository Creation Utility (RCU) tool, referencing the infrastructure database from the WebLogic configuration, setting an `OPSS` wallet password, and exporting/importing an `OPSS` wallet file. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server, such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products, such as Oracle Communications products.\n+\n+#### Use cases\n+\n+This sample demonstrates two Model in Image use cases:\n+\n+- [Initial](#initial-use-case): An initial WebLogic domain\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1` with:\n+  - A WebLogic installation\n+  - A WebLogic Deploy Tooling (WDT) installation\n+  - A WDT archive with version `v1` of an exploded Java EE web application\n+  - A WDT model with:\n+    - A WebLogic Administration Server\n+    - A WebLogic cluster\n+    - A reference to the web application\n+- Kubernetes secrets:\n+  - WebLogic credentials\n+  - Required WDT runtime password\n+- A domain resource with:\n+  - `spec.domainHomeSourceType: FromModel`.\n+  - `spec.image: model-in-image:WLS-v1`\n+  - References to the secrets\n+{{% /expand%}}\n+\n+- [Update1](#update1-use-case): Dynamically adding a data source using a model configmap\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1`:\n+  - Same image as Initial use case\n+- Kubernetes secrets:\n+  - Same as Initial use case  plus secrets for data source credentials and URL\n+- Kubernetes configmap with:\n+  - A WDT model for a data source targeted to the cluster\n+- A domain resource with:\n+  - Same as Initial use case plus:\n+     - `spec.model.configMap` referencing the configmap\n+     - References to data source secrets\n+{{% /expand%}}\n+\n+#### Sample directory structure\n+\n+Take a moment to familiarize yourself with the sample's directory structure. Don't worry if you don't understand the meaning of all of the terms; the sample will describe them as it steps you through each use case.\n+\n+Location | Description |\n+------------- | ----------- |\n+`domain-resources` | JRF and WLS domain resources |\n+`archives` | Source code location for WebLogic Deploy Tooling application ZIP archives |\n+`model-images` | Staging for each model image's WDT YAML, WDT properties, and WDT archive ZIP files. The directories in `model images` are named for their respective images|\n+`model-configmaps` | Staging files for a model configmap that configures a data source |\n+`ingresses` | Load balancer Ingresses |\n+`utils/wl-pod-wait.sh` | Utility for watching the pods in a domain reach their expected `restartVersion`, image name, and ready state |\n+`utils/patch-restart-version.sh` | Utility for updating a running domain `spec.restartVersion` field (which causes it to 're-instrospect' and 'roll') |\n+`utils/opss-wallet.sh` | Utility for exporting or importing a JRF domain OPSS wallet file |\n+\n+### References\n+\n+For references to the relevant user documentation, see:\n  - [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n  - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n  - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n \n+### Prerequisites for all domain types\n \n+1. _Choose the type of domain you're going to use throughout the sample, `WLS` or `JRF`._\n \n-#### Prerequisites for all domain types\n+   {{%expand \"Click here for details.\" %}}\n+   - The first time you try this sample, we recommend that you choose `WLS` even if you're familiar with `JRF`.\n+   - This is because `WLS` is simpler and will more easily familiarize you with Model in Image concepts.\n+   - We recommend choosing `JRF` only if: you are already familiar with `JRF`, you have already tried the `WLS` path through this sample, and you have a definite use case where you need to use `JRF`.\n+   {{% /expand%}}\n \n-1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+1. _The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (The `JAVA_HOME` will be used by the WebLogic Image Tool.)_\n \n-2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+1. _Get the operator source and put it in `/tmp/operator-source`._\n \n+   {{%expand \"Click here for details.\" %}}\n    ```\n-   mkdir ~/wlopsrc\n-   cd ~/wlopsrc\n+   mkdir /tmp/operator-source\n+   cd /tmp/operator-source\n    git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n-   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+\n+   # TBD remove the following steps once 3.0 is released on master:\n+   cd weblogic-kubernetes-operator\n+   git checkout develop\n    ```\n \n+   > **Note:** We will refer to the top directory of the operator source tree as `/tmp/operator-source`; however, you can use a different location.\n+\n    For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+   {{% /expand%}}\n+\n+1. _Copy the sample to an empty working directory; for example, use directory `/tmp/mii-sample`._\n \n-3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+   {{%expand \"Click here for details.\" %}}\n \n    ```\n-   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   mkdir /tmp/mii-sample\n+   cp -r /tmp/operator-source/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/* /tmp/mii-sample\n    ```\n \n-4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+   > **Note**: If the working directory already exists, then you should delete or rename the old directory prior to copying over the sample files. It is important to start with a directory that contains only this sample's original source files.\n+\n+   > **Note**: We will refer to this working copy of the sample as `/tmp/mii-sample`; however, you can use a different location.\n+   {{% /expand%}}\n+\n+1. _Make sure an operator is set up to manage namespace `sample-domain1-ns`. Also, make sure a Traefik load balancer is managing the same namespace and listening on port 30305._\n+\n+   {{%expand \"Click here for details.\" %}}\n+   For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/) guide up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   > **Note:** Skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+   {{% /expand%}}\n+\n+1. _Make sure there are no conflicting WebLogic related domains, Ingresses, secrets, or config maps that are already deployed to namespace `sample-domain1-ns`._\n+\n+   {{%expand \"Click here for details.\" %}}\n+\n+   If any of the following commands reveal WebLogic related resources, then the simplest way to avoid conflicts is to delete them using the corresponding `kubectl delete TYPE NAME` verb:\n \n    ```\n-   cd <location of empty temporary directory with 10g of space>\n-   export WORKDIR=$(pwd)\n+   kubectl get domains    -n sample-domain1-ns\n+   kubectl get pods       -n sample-domain1-ns\n+   kubectl get configmaps -n sample-domain1-ns\n+   kubectl get secrets    -n sample-domain1-ns\n+   kubectl get ingresses  -n sample-domain1-ns\n    ```\n \n-    If you do not set this environment variable, then the sample scripts will default to `/tmp/$USER/model-in-image-sample-work-dir` where `$USER` is your user name.\n+   For example, if the `get domains` command reveals domain `mydomain`, then call `kubectl delete domain mydomain -n sample-domain1-ns` to shut it down.\n+\n+   > **WARNING:** If you delete an existing domain, then wait for its pods to shut down. To monitor the sample domain namespace as pods shut down, use `kubectl get pods -n sample-domain1-ns -w` and type `ctrl-c` to exit.\n+   {{% /expand%}}\n+\n+\n+1. _Set up Ingresses that will redirect HTTP from Traefik port 30305 to the clusters in this sample's WebLogic domains._\n \n-5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+    Run one of the following commands:\n \n-   Note that:\n-   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n-   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+    - To deploy the Ingresses, one option is to use your favorite editor to cut and paste the following YAML to a file called `/tmp/mii-sample/ingresses/myingresses.yaml` and then call `kubectl apply -f /tmp/mii-sample/ingresses/myingresses.yaml`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTg4OTQwOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyODoxMVrOGQKgHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTowNzo0MVrOGQ3pWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMjQ2MQ==", "bodyText": "nitpick: that's annoying that i have to rename it. can't we just use the actual name?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419602461", "createdAt": "2020-05-04T17:28:11Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -2,142 +2,366 @@\n title: \"Model in image\"\n date: 2019-02-23T17:32:31-05:00\n weight: 4\n-description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator expands into a full domain home during runtime.\"\n+description: \"Sample for supplying a WebLogic Deploy Tooling (WDT) model that the operator expands into a full domain home during runtime.\"\n ---\n \n-#### Contents\n-\n-  - [Introduction](#introduction)\n-  - [References](#references)\n-  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n-  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n-    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n-    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n-    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n-    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n-  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n-  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n-  - [Optionally test the sample application](#optionally-test-the-sample-application)\n-  - [Optionally access the WebLogic Server Administration Console](#optionally-access-the-weblogic-server-administration-console)\n-  - [Cleanup](#cleanup)\n-\n-#### Introduction\n-\n-This sample demonstrates deploying a Model in Image domain home source type. Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, a Model in Image deployment uses a WebLogic Deploy Tool (WDT) model to specify your WebLogic configuration.\n-\n-WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+### Contents\n \n-For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n+   - [Introduction](#introduction)\n+     - [Model in Image domain types (WLS, JRF, and Restricted JRF)](#model-in-image-domain-types-wls-jrf-and-restricted-jrf)\n+     - [Use cases](#use-cases)\n+     - [Sample directory structure](#sample-directory-structure)\n+   - [References](#references)\n+   - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+   - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+   - [Initial use case](#initial-use-case): An initial WebLogic domain\n+   - [Update1 use case](#update1-use-case): Dynamically adding a data source using a model configmap\n+   - [Accessing the WebLogic Server Administration Console](#accessing-the-weblogic-server-administration-console)\n+   - [Cleanup](#cleanup)\n \n-In detail, this sample demonstrates Model in Image:\n \n-  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and the model for a WebLogic domain configuration defined using a WDT model file.\n-  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n-  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n-  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n-  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+### Introduction\n \n-__Note about Model in Image domain types:__\n \n-There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+This sample demonstrates deploying a Model in Image [domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}). Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, Model in Image uses a WebLogic Deploy Tooling (WDT) model to specify your WebLogic configuration.\n \n-The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling) GitHub project, and the required directory structure for a WDT archive is specifically discussed [here](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md).\n \n-#### References\n+For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n \n-To reference the relevant user documentation, see:\n+#### Model in Image domain types (WLS, JRF, and Restricted JRF)\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain. This sample demonstrates the `WLS` and `JRF` types.\n+\n+The `JRF` domain path through the sample includes additional steps required for JRF: deploying an infrastructure database, initializing the database using the Repository Creation Utility (RCU) tool, referencing the infrastructure database from the WebLogic configuration, setting an `OPSS` wallet password, and exporting/importing an `OPSS` wallet file. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server, such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products, such as Oracle Communications products.\n+\n+#### Use cases\n+\n+This sample demonstrates two Model in Image use cases:\n+\n+- [Initial](#initial-use-case): An initial WebLogic domain\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1` with:\n+  - A WebLogic installation\n+  - A WebLogic Deploy Tooling (WDT) installation\n+  - A WDT archive with version `v1` of an exploded Java EE web application\n+  - A WDT model with:\n+    - A WebLogic Administration Server\n+    - A WebLogic cluster\n+    - A reference to the web application\n+- Kubernetes secrets:\n+  - WebLogic credentials\n+  - Required WDT runtime password\n+- A domain resource with:\n+  - `spec.domainHomeSourceType: FromModel`.\n+  - `spec.image: model-in-image:WLS-v1`\n+  - References to the secrets\n+{{% /expand%}}\n+\n+- [Update1](#update1-use-case): Dynamically adding a data source using a model configmap\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1`:\n+  - Same image as Initial use case\n+- Kubernetes secrets:\n+  - Same as Initial use case  plus secrets for data source credentials and URL\n+- Kubernetes configmap with:\n+  - A WDT model for a data source targeted to the cluster\n+- A domain resource with:\n+  - Same as Initial use case plus:\n+     - `spec.model.configMap` referencing the configmap\n+     - References to data source secrets\n+{{% /expand%}}\n+\n+#### Sample directory structure\n+\n+Take a moment to familiarize yourself with the sample's directory structure. Don't worry if you don't understand the meaning of all of the terms; the sample will describe them as it steps you through each use case.\n+\n+Location | Description |\n+------------- | ----------- |\n+`domain-resources` | JRF and WLS domain resources |\n+`archives` | Source code location for WebLogic Deploy Tooling application ZIP archives |\n+`model-images` | Staging for each model image's WDT YAML, WDT properties, and WDT archive ZIP files. The directories in `model images` are named for their respective images|\n+`model-configmaps` | Staging files for a model configmap that configures a data source |\n+`ingresses` | Load balancer Ingresses |\n+`utils/wl-pod-wait.sh` | Utility for watching the pods in a domain reach their expected `restartVersion`, image name, and ready state |\n+`utils/patch-restart-version.sh` | Utility for updating a running domain `spec.restartVersion` field (which causes it to 're-instrospect' and 'roll') |\n+`utils/opss-wallet.sh` | Utility for exporting or importing a JRF domain OPSS wallet file |\n+\n+### References\n+\n+For references to the relevant user documentation, see:\n  - [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n  - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n  - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n \n+### Prerequisites for all domain types\n \n+1. _Choose the type of domain you're going to use throughout the sample, `WLS` or `JRF`._\n \n-#### Prerequisites for all domain types\n+   {{%expand \"Click here for details.\" %}}\n+   - The first time you try this sample, we recommend that you choose `WLS` even if you're familiar with `JRF`.\n+   - This is because `WLS` is simpler and will more easily familiarize you with Model in Image concepts.\n+   - We recommend choosing `JRF` only if: you are already familiar with `JRF`, you have already tried the `WLS` path through this sample, and you have a definite use case where you need to use `JRF`.\n+   {{% /expand%}}\n \n-1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+1. _The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (The `JAVA_HOME` will be used by the WebLogic Image Tool.)_\n \n-2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+1. _Get the operator source and put it in `/tmp/operator-source`._\n \n+   {{%expand \"Click here for details.\" %}}\n    ```\n-   mkdir ~/wlopsrc\n-   cd ~/wlopsrc\n+   mkdir /tmp/operator-source\n+   cd /tmp/operator-source\n    git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n-   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+\n+   # TBD remove the following steps once 3.0 is released on master:\n+   cd weblogic-kubernetes-operator\n+   git checkout develop\n    ```\n \n+   > **Note:** We will refer to the top directory of the operator source tree as `/tmp/operator-source`; however, you can use a different location.\n+\n    For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+   {{% /expand%}}\n+\n+1. _Copy the sample to an empty working directory; for example, use directory `/tmp/mii-sample`._\n \n-3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+   {{%expand \"Click here for details.\" %}}\n \n    ```\n-   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   mkdir /tmp/mii-sample\n+   cp -r /tmp/operator-source/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/* /tmp/mii-sample\n    ```\n \n-4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+   > **Note**: If the working directory already exists, then you should delete or rename the old directory prior to copying over the sample files. It is important to start with a directory that contains only this sample's original source files.\n+\n+   > **Note**: We will refer to this working copy of the sample as `/tmp/mii-sample`; however, you can use a different location.\n+   {{% /expand%}}\n+\n+1. _Make sure an operator is set up to manage namespace `sample-domain1-ns`. Also, make sure a Traefik load balancer is managing the same namespace and listening on port 30305._\n+\n+   {{%expand \"Click here for details.\" %}}\n+   For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/) guide up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   > **Note:** Skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+   {{% /expand%}}\n+\n+1. _Make sure there are no conflicting WebLogic related domains, Ingresses, secrets, or config maps that are already deployed to namespace `sample-domain1-ns`._\n+\n+   {{%expand \"Click here for details.\" %}}\n+\n+   If any of the following commands reveal WebLogic related resources, then the simplest way to avoid conflicts is to delete them using the corresponding `kubectl delete TYPE NAME` verb:\n \n    ```\n-   cd <location of empty temporary directory with 10g of space>\n-   export WORKDIR=$(pwd)\n+   kubectl get domains    -n sample-domain1-ns\n+   kubectl get pods       -n sample-domain1-ns\n+   kubectl get configmaps -n sample-domain1-ns\n+   kubectl get secrets    -n sample-domain1-ns\n+   kubectl get ingresses  -n sample-domain1-ns\n    ```\n \n-    If you do not set this environment variable, then the sample scripts will default to `/tmp/$USER/model-in-image-sample-work-dir` where `$USER` is your user name.\n+   For example, if the `get domains` command reveals domain `mydomain`, then call `kubectl delete domain mydomain -n sample-domain1-ns` to shut it down.\n+\n+   > **WARNING:** If you delete an existing domain, then wait for its pods to shut down. To monitor the sample domain namespace as pods shut down, use `kubectl get pods -n sample-domain1-ns -w` and type `ctrl-c` to exit.\n+   {{% /expand%}}\n+\n+\n+1. _Set up Ingresses that will redirect HTTP from Traefik port 30305 to the clusters in this sample's WebLogic domains._\n \n-5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+    Run one of the following commands:\n \n-   Note that:\n-   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n-   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+    - To deploy the Ingresses, one option is to use your favorite editor to cut and paste the following YAML to a file called `/tmp/mii-sample/ingresses/myingresses.yaml` and then call `kubectl apply -f /tmp/mii-sample/ingresses/myingresses.yaml`:\n \n+      {{%expand \"Click here for details.\" %}}\n+   ```\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-admin-server\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host:\n+       http:\n+         paths:\n+         - path: /console\n+           backend:\n+             serviceName: sample-domain1-admin-server\n+             servicePort: 7001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-cluster-cluster-1\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain1-cluster-cluster-1.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain1-cluster-cluster-1\n+             servicePort: 8001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-cluster-cluster-2\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain1-cluster-cluster-2.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain1-cluster-cluster-2\n+             servicePort: 8001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain2-cluster-cluster-1\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain2\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain2-cluster-cluster-1.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain2-cluster-cluster-1\n+             servicePort: 8001\n+   ```\n+      {{% /expand%}}\n \n-6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+   - Another option for deploying this sample's Ingresses is to run `kubectl apply -f` on each of the Ingress YAML files that are already included in the sample source `/tmp/mii-sample/ingresses` directory:\n \n+      {{%expand \"Click here for details.\" %}}\n    ```\n-   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   cd /tmp/mii-sample/ingresses\n+   kubectl apply -f traefik-ingress-sample-domain1-admin-server.yaml\n+   kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-1.yaml\n+   kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-2.yaml\n+   kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-1.yaml\n+   kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-2.yaml\n    ```\n+      {{% /expand%}}\n \n-7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+   > Note: If you're interested in the details of the `curl` commands we use to access each cluster through its Ingress, see the comments embedded within the `/tmp/mii-sample/ingresses` YAML files.\n \n-   - __Option 1, download an existing WebLogic image.__\n+   > Note: We give each cluster Ingress a different host name that is decorated using both its operator domain UID and its cluster name. This makes each cluster uniquely addressable even when cluster names are the same across different clusters. For more on information Ingresses and load balancers, see TBD.\n \n-     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+1. _Set up access to a base WebLogic 12.2.1.4 image for this sample that will be used for creating the sample's model images._\n \n-     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+   Do one of the following:\n \n-     b. Choose an image location:\n-       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n-       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+   - Option 1 (recommended), set up access to an existing WebLogic image in the [Oracle Container Registry](http://container-registry.oracle.com):\n \n-     c. Select Sign In and accept the license agreement.\n+     {{%expand \"Click here for details.\" %}}\n \n-     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+   a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n \n-     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n-       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n-       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+   b. Choose an image location: for `JRF` domains, select `Middleware`, then `fmw-infrastructure`; for `WLS` domains, select `Middleware`, then `weblogic`.\n \n-   - __Option 2, create your own WebLogic base image.__\n+   c. Select Sign In and accept the license agreement.\n \n-     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+   d. Use your terminal to log in to Docker locally: `docker login container-registry.oracle.com`.\n \n-8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains).\n+   e. Later in this sample, when you run WebLogic Image Tool commands, the tool will use the image as a base image for creating model images. Specifically, the tool will implicitly call `docker pull` for one of the above licensed images as specified in the tool's command line using the `--fromImage` parameter. For `JRF`, this sample specifies `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`, and for `WLS`, the sample specifies `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n \n-> __NOTE__: Skip to section [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if you're **not** using a `JRF` domain type.\n+   {{% /expand%}}\n \n-#### Prerequisites for JRF domains\n+   - Option 2 (advanced users only), create your own WebLogic base image:\n \n-> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+     {{%expand \"Click here for details.\" %}}\n+   This alternative is recommended only for advanced users that are already familiar with the WebLogic Image Tool. You can create your own base image and then substitute this image name in the WebLogic Image Tool `--fromImage` parameter throughout this sample. See [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+     {{% /expand%}}\n \n-A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+1. _Download the latest WebLogic Deploying Tooling and WebLogic Image Tool installer ZIP files to your `/tmp/mii-sample/model-images` directory._\n \n-Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+   {{%expand \"Click here for details.\" %}}\n+\n+   Both WDT and WIT are required to create your own Model in Image Docker images. Download the latest version of each tool's installer ZIP file to the `/tmp/mii-sample/model-images` directory. Make sure that the files are named `weblogic-deploy-tooling.zip` and `weblogic-image-tool.zip`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjEwNg==", "bodyText": "Where's the rename?  Do you mean you have your own versions of these zip already and your own versions have different names? The curl commands use the same names as above. And the image tool command's cache is using the name\nspecified here too.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420342106", "createdAt": "2020-05-05T19:07:41Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -2,142 +2,366 @@\n title: \"Model in image\"\n date: 2019-02-23T17:32:31-05:00\n weight: 4\n-description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator expands into a full domain home during runtime.\"\n+description: \"Sample for supplying a WebLogic Deploy Tooling (WDT) model that the operator expands into a full domain home during runtime.\"\n ---\n \n-#### Contents\n-\n-  - [Introduction](#introduction)\n-  - [References](#references)\n-  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n-  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n-    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n-    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n-    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n-    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n-  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n-  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n-  - [Optionally test the sample application](#optionally-test-the-sample-application)\n-  - [Optionally access the WebLogic Server Administration Console](#optionally-access-the-weblogic-server-administration-console)\n-  - [Cleanup](#cleanup)\n-\n-#### Introduction\n-\n-This sample demonstrates deploying a Model in Image domain home source type. Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, a Model in Image deployment uses a WebLogic Deploy Tool (WDT) model to specify your WebLogic configuration.\n-\n-WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+### Contents\n \n-For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n+   - [Introduction](#introduction)\n+     - [Model in Image domain types (WLS, JRF, and Restricted JRF)](#model-in-image-domain-types-wls-jrf-and-restricted-jrf)\n+     - [Use cases](#use-cases)\n+     - [Sample directory structure](#sample-directory-structure)\n+   - [References](#references)\n+   - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+   - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+   - [Initial use case](#initial-use-case): An initial WebLogic domain\n+   - [Update1 use case](#update1-use-case): Dynamically adding a data source using a model configmap\n+   - [Accessing the WebLogic Server Administration Console](#accessing-the-weblogic-server-administration-console)\n+   - [Cleanup](#cleanup)\n \n-In detail, this sample demonstrates Model in Image:\n \n-  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and the model for a WebLogic domain configuration defined using a WDT model file.\n-  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n-  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n-  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n-  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+### Introduction\n \n-__Note about Model in Image domain types:__\n \n-There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+This sample demonstrates deploying a Model in Image [domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}). Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, Model in Image uses a WebLogic Deploy Tooling (WDT) model to specify your WebLogic configuration.\n \n-The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling) GitHub project, and the required directory structure for a WDT archive is specifically discussed [here](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md).\n \n-#### References\n+For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n \n-To reference the relevant user documentation, see:\n+#### Model in Image domain types (WLS, JRF, and Restricted JRF)\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain. This sample demonstrates the `WLS` and `JRF` types.\n+\n+The `JRF` domain path through the sample includes additional steps required for JRF: deploying an infrastructure database, initializing the database using the Repository Creation Utility (RCU) tool, referencing the infrastructure database from the WebLogic configuration, setting an `OPSS` wallet password, and exporting/importing an `OPSS` wallet file. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server, such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products, such as Oracle Communications products.\n+\n+#### Use cases\n+\n+This sample demonstrates two Model in Image use cases:\n+\n+- [Initial](#initial-use-case): An initial WebLogic domain\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1` with:\n+  - A WebLogic installation\n+  - A WebLogic Deploy Tooling (WDT) installation\n+  - A WDT archive with version `v1` of an exploded Java EE web application\n+  - A WDT model with:\n+    - A WebLogic Administration Server\n+    - A WebLogic cluster\n+    - A reference to the web application\n+- Kubernetes secrets:\n+  - WebLogic credentials\n+  - Required WDT runtime password\n+- A domain resource with:\n+  - `spec.domainHomeSourceType: FromModel`.\n+  - `spec.image: model-in-image:WLS-v1`\n+  - References to the secrets\n+{{% /expand%}}\n+\n+- [Update1](#update1-use-case): Dynamically adding a data source using a model configmap\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1`:\n+  - Same image as Initial use case\n+- Kubernetes secrets:\n+  - Same as Initial use case  plus secrets for data source credentials and URL\n+- Kubernetes configmap with:\n+  - A WDT model for a data source targeted to the cluster\n+- A domain resource with:\n+  - Same as Initial use case plus:\n+     - `spec.model.configMap` referencing the configmap\n+     - References to data source secrets\n+{{% /expand%}}\n+\n+#### Sample directory structure\n+\n+Take a moment to familiarize yourself with the sample's directory structure. Don't worry if you don't understand the meaning of all of the terms; the sample will describe them as it steps you through each use case.\n+\n+Location | Description |\n+------------- | ----------- |\n+`domain-resources` | JRF and WLS domain resources |\n+`archives` | Source code location for WebLogic Deploy Tooling application ZIP archives |\n+`model-images` | Staging for each model image's WDT YAML, WDT properties, and WDT archive ZIP files. The directories in `model images` are named for their respective images|\n+`model-configmaps` | Staging files for a model configmap that configures a data source |\n+`ingresses` | Load balancer Ingresses |\n+`utils/wl-pod-wait.sh` | Utility for watching the pods in a domain reach their expected `restartVersion`, image name, and ready state |\n+`utils/patch-restart-version.sh` | Utility for updating a running domain `spec.restartVersion` field (which causes it to 're-instrospect' and 'roll') |\n+`utils/opss-wallet.sh` | Utility for exporting or importing a JRF domain OPSS wallet file |\n+\n+### References\n+\n+For references to the relevant user documentation, see:\n  - [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n  - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n  - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n \n+### Prerequisites for all domain types\n \n+1. _Choose the type of domain you're going to use throughout the sample, `WLS` or `JRF`._\n \n-#### Prerequisites for all domain types\n+   {{%expand \"Click here for details.\" %}}\n+   - The first time you try this sample, we recommend that you choose `WLS` even if you're familiar with `JRF`.\n+   - This is because `WLS` is simpler and will more easily familiarize you with Model in Image concepts.\n+   - We recommend choosing `JRF` only if: you are already familiar with `JRF`, you have already tried the `WLS` path through this sample, and you have a definite use case where you need to use `JRF`.\n+   {{% /expand%}}\n \n-1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+1. _The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (The `JAVA_HOME` will be used by the WebLogic Image Tool.)_\n \n-2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+1. _Get the operator source and put it in `/tmp/operator-source`._\n \n+   {{%expand \"Click here for details.\" %}}\n    ```\n-   mkdir ~/wlopsrc\n-   cd ~/wlopsrc\n+   mkdir /tmp/operator-source\n+   cd /tmp/operator-source\n    git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n-   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+\n+   # TBD remove the following steps once 3.0 is released on master:\n+   cd weblogic-kubernetes-operator\n+   git checkout develop\n    ```\n \n+   > **Note:** We will refer to the top directory of the operator source tree as `/tmp/operator-source`; however, you can use a different location.\n+\n    For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+   {{% /expand%}}\n+\n+1. _Copy the sample to an empty working directory; for example, use directory `/tmp/mii-sample`._\n \n-3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+   {{%expand \"Click here for details.\" %}}\n \n    ```\n-   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   mkdir /tmp/mii-sample\n+   cp -r /tmp/operator-source/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/* /tmp/mii-sample\n    ```\n \n-4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+   > **Note**: If the working directory already exists, then you should delete or rename the old directory prior to copying over the sample files. It is important to start with a directory that contains only this sample's original source files.\n+\n+   > **Note**: We will refer to this working copy of the sample as `/tmp/mii-sample`; however, you can use a different location.\n+   {{% /expand%}}\n+\n+1. _Make sure an operator is set up to manage namespace `sample-domain1-ns`. Also, make sure a Traefik load balancer is managing the same namespace and listening on port 30305._\n+\n+   {{%expand \"Click here for details.\" %}}\n+   For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/) guide up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   > **Note:** Skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+   {{% /expand%}}\n+\n+1. _Make sure there are no conflicting WebLogic related domains, Ingresses, secrets, or config maps that are already deployed to namespace `sample-domain1-ns`._\n+\n+   {{%expand \"Click here for details.\" %}}\n+\n+   If any of the following commands reveal WebLogic related resources, then the simplest way to avoid conflicts is to delete them using the corresponding `kubectl delete TYPE NAME` verb:\n \n    ```\n-   cd <location of empty temporary directory with 10g of space>\n-   export WORKDIR=$(pwd)\n+   kubectl get domains    -n sample-domain1-ns\n+   kubectl get pods       -n sample-domain1-ns\n+   kubectl get configmaps -n sample-domain1-ns\n+   kubectl get secrets    -n sample-domain1-ns\n+   kubectl get ingresses  -n sample-domain1-ns\n    ```\n \n-    If you do not set this environment variable, then the sample scripts will default to `/tmp/$USER/model-in-image-sample-work-dir` where `$USER` is your user name.\n+   For example, if the `get domains` command reveals domain `mydomain`, then call `kubectl delete domain mydomain -n sample-domain1-ns` to shut it down.\n+\n+   > **WARNING:** If you delete an existing domain, then wait for its pods to shut down. To monitor the sample domain namespace as pods shut down, use `kubectl get pods -n sample-domain1-ns -w` and type `ctrl-c` to exit.\n+   {{% /expand%}}\n+\n+\n+1. _Set up Ingresses that will redirect HTTP from Traefik port 30305 to the clusters in this sample's WebLogic domains._\n \n-5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+    Run one of the following commands:\n \n-   Note that:\n-   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n-   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+    - To deploy the Ingresses, one option is to use your favorite editor to cut and paste the following YAML to a file called `/tmp/mii-sample/ingresses/myingresses.yaml` and then call `kubectl apply -f /tmp/mii-sample/ingresses/myingresses.yaml`:\n \n+      {{%expand \"Click here for details.\" %}}\n+   ```\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-admin-server\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host:\n+       http:\n+         paths:\n+         - path: /console\n+           backend:\n+             serviceName: sample-domain1-admin-server\n+             servicePort: 7001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-cluster-cluster-1\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain1-cluster-cluster-1.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain1-cluster-cluster-1\n+             servicePort: 8001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-cluster-cluster-2\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain1-cluster-cluster-2.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain1-cluster-cluster-2\n+             servicePort: 8001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain2-cluster-cluster-1\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain2\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain2-cluster-cluster-1.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain2-cluster-cluster-1\n+             servicePort: 8001\n+   ```\n+      {{% /expand%}}\n \n-6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+   - Another option for deploying this sample's Ingresses is to run `kubectl apply -f` on each of the Ingress YAML files that are already included in the sample source `/tmp/mii-sample/ingresses` directory:\n \n+      {{%expand \"Click here for details.\" %}}\n    ```\n-   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   cd /tmp/mii-sample/ingresses\n+   kubectl apply -f traefik-ingress-sample-domain1-admin-server.yaml\n+   kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-1.yaml\n+   kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-2.yaml\n+   kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-1.yaml\n+   kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-2.yaml\n    ```\n+      {{% /expand%}}\n \n-7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+   > Note: If you're interested in the details of the `curl` commands we use to access each cluster through its Ingress, see the comments embedded within the `/tmp/mii-sample/ingresses` YAML files.\n \n-   - __Option 1, download an existing WebLogic image.__\n+   > Note: We give each cluster Ingress a different host name that is decorated using both its operator domain UID and its cluster name. This makes each cluster uniquely addressable even when cluster names are the same across different clusters. For more on information Ingresses and load balancers, see TBD.\n \n-     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+1. _Set up access to a base WebLogic 12.2.1.4 image for this sample that will be used for creating the sample's model images._\n \n-     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+   Do one of the following:\n \n-     b. Choose an image location:\n-       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n-       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+   - Option 1 (recommended), set up access to an existing WebLogic image in the [Oracle Container Registry](http://container-registry.oracle.com):\n \n-     c. Select Sign In and accept the license agreement.\n+     {{%expand \"Click here for details.\" %}}\n \n-     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+   a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n \n-     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n-       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n-       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+   b. Choose an image location: for `JRF` domains, select `Middleware`, then `fmw-infrastructure`; for `WLS` domains, select `Middleware`, then `weblogic`.\n \n-   - __Option 2, create your own WebLogic base image.__\n+   c. Select Sign In and accept the license agreement.\n \n-     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+   d. Use your terminal to log in to Docker locally: `docker login container-registry.oracle.com`.\n \n-8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains).\n+   e. Later in this sample, when you run WebLogic Image Tool commands, the tool will use the image as a base image for creating model images. Specifically, the tool will implicitly call `docker pull` for one of the above licensed images as specified in the tool's command line using the `--fromImage` parameter. For `JRF`, this sample specifies `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`, and for `WLS`, the sample specifies `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n \n-> __NOTE__: Skip to section [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if you're **not** using a `JRF` domain type.\n+   {{% /expand%}}\n \n-#### Prerequisites for JRF domains\n+   - Option 2 (advanced users only), create your own WebLogic base image:\n \n-> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+     {{%expand \"Click here for details.\" %}}\n+   This alternative is recommended only for advanced users that are already familiar with the WebLogic Image Tool. You can create your own base image and then substitute this image name in the WebLogic Image Tool `--fromImage` parameter throughout this sample. See [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+     {{% /expand%}}\n \n-A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+1. _Download the latest WebLogic Deploying Tooling and WebLogic Image Tool installer ZIP files to your `/tmp/mii-sample/model-images` directory._\n \n-Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+   {{%expand \"Click here for details.\" %}}\n+\n+   Both WDT and WIT are required to create your own Model in Image Docker images. Download the latest version of each tool's installer ZIP file to the `/tmp/mii-sample/model-images` directory. Make sure that the files are named `weblogic-deploy-tooling.zip` and `weblogic-image-tool.zip`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMjQ2MQ=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTkwMjI1OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMTowOVrOGQKn0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMTowOVrOGQKn0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNDQzNQ==", "bodyText": "add a link here so i don't have to work out where i am supposed to go by trying to compare heading levels, etc.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419604435", "createdAt": "2020-05-04T17:31:09Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -2,142 +2,366 @@\n title: \"Model in image\"\n date: 2019-02-23T17:32:31-05:00\n weight: 4\n-description: \"Sample for supplying a WebLogic Deploy Tool (WDT) model that the operator expands into a full domain home during runtime.\"\n+description: \"Sample for supplying a WebLogic Deploy Tooling (WDT) model that the operator expands into a full domain home during runtime.\"\n ---\n \n-#### Contents\n-\n-  - [Introduction](#introduction)\n-  - [References](#references)\n-  - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n-  - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n-    - [Set Up and Initialize an RCU Database](#set-up-and-initialize-an-rcu-database)\n-    - [Increase introspection job timeout](#increase-introspection-job-timeout)\n-    - [Set up RCU model attributes, domain resource attributes, and secrets](#set-up-rcu-model-attributes-domain-resource-attributes-and-secrets)\n-    - [Reusing or sharing RCU tables](#reusing-or-sharing-rcu-tables)\n-  - [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image)\n-  - [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources)\n-  - [Optionally test the sample application](#optionally-test-the-sample-application)\n-  - [Optionally access the WebLogic Server Administration Console](#optionally-access-the-weblogic-server-administration-console)\n-  - [Cleanup](#cleanup)\n-\n-#### Introduction\n-\n-This sample demonstrates deploying a Model in Image domain home source type. Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, a Model in Image deployment uses a WebLogic Deploy Tool (WDT) model to specify your WebLogic configuration.\n-\n-WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tool](https://github.com/oracle/weblogic-deploy-tooling) GitHub project.\n+### Contents\n \n-For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n+   - [Introduction](#introduction)\n+     - [Model in Image domain types (WLS, JRF, and Restricted JRF)](#model-in-image-domain-types-wls-jrf-and-restricted-jrf)\n+     - [Use cases](#use-cases)\n+     - [Sample directory structure](#sample-directory-structure)\n+   - [References](#references)\n+   - [Prerequisites for all domain types](#prerequisites-for-all-domain-types)\n+   - [Prerequisites for JRF domains](#prerequisites-for-jrf-domains)\n+   - [Initial use case](#initial-use-case): An initial WebLogic domain\n+   - [Update1 use case](#update1-use-case): Dynamically adding a data source using a model configmap\n+   - [Accessing the WebLogic Server Administration Console](#accessing-the-weblogic-server-administration-console)\n+   - [Cleanup](#cleanup)\n \n-In detail, this sample demonstrates Model in Image:\n \n-  - Using the WebLogic Image Tool to create a Docker image that contains a WebLogic install, a WebLogic Deploy Tool (WDT) install, a Java EE servlet application contained within a WDT archive, and the model for a WebLogic domain configuration defined using a WDT model file.\n-  - Modifying the WDT model that's embedded within the Docker image using a WDT model file that's supplied using a Kubernetes config map.\n-  - Defining a `domainHomeSourceType: FromModel` domain resource that references the WDT model image and the WDT config map.\n-  - Deploying the model image, domain resource, model config map, and associated secrets that define user names, passwords, and URL values for the model and its domain resource.\n-  - Deploying and accessing a Traefik load balancer that redirects HTTP protocol calls to its Java EE servlet application.\n+### Introduction\n \n-__Note about Model in Image domain types:__\n \n-There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain.\n+This sample demonstrates deploying a Model in Image [domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}). Unlike Domain in PV and Domain in Image, Model in Image eliminates the need to pre-create your WebLogic domain home prior to deploying your domain resource. Instead, Model in Image uses a WebLogic Deploy Tooling (WDT) model to specify your WebLogic configuration.\n \n-The `JRF` domain path through the sample includes additional steps for deploying an infrastructure database and initializing the database using the Repository Creation Utility (RCU) tool. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products such as Oracle Communications products.\n+WDT models are a convenient and simple alternative to WebLogic WLST configuration scripts and templates. They compactly define a WebLogic domain using YAML files and support including application archives in a ZIP file. The WDT model format is described in the open source [WebLogic Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling) GitHub project, and the required directory structure for a WDT archive is specifically discussed [here](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md).\n \n-#### References\n+For more information on Model in Image, see the [Model in Image user guide]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}). For a comparison of Model in Image to other domain home source types, see [Choose a domain home source type]({{< relref \"/userguide/managing-domains/choosing-a-model/_index.md\" >}}).\n \n-To reference the relevant user documentation, see:\n+#### Model in Image domain types (WLS, JRF, and Restricted JRF)\n+\n+There are three types of domains supported by Model in Image: a standard `WLS` domain, an Oracle Fusion Middleware Infrastructure Java Required Files (`JRF`) domain, or a `RestrictedJRF` domain. This sample demonstrates the `WLS` and `JRF` types.\n+\n+The `JRF` domain path through the sample includes additional steps required for JRF: deploying an infrastructure database, initializing the database using the Repository Creation Utility (RCU) tool, referencing the infrastructure database from the WebLogic configuration, setting an `OPSS` wallet password, and exporting/importing an `OPSS` wallet file. `JRF` domains may be used by Oracle products that layer on top of WebLogic Server, such as SOA and OSB. Similarly, `RestrictedJRF` domains may be used by Oracle layered products, such as Oracle Communications products.\n+\n+#### Use cases\n+\n+This sample demonstrates two Model in Image use cases:\n+\n+- [Initial](#initial-use-case): An initial WebLogic domain\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1` with:\n+  - A WebLogic installation\n+  - A WebLogic Deploy Tooling (WDT) installation\n+  - A WDT archive with version `v1` of an exploded Java EE web application\n+  - A WDT model with:\n+    - A WebLogic Administration Server\n+    - A WebLogic cluster\n+    - A reference to the web application\n+- Kubernetes secrets:\n+  - WebLogic credentials\n+  - Required WDT runtime password\n+- A domain resource with:\n+  - `spec.domainHomeSourceType: FromModel`.\n+  - `spec.image: model-in-image:WLS-v1`\n+  - References to the secrets\n+{{% /expand%}}\n+\n+- [Update1](#update1-use-case): Dynamically adding a data source using a model configmap\n+{{%expand \"Use case details\" %}}\n+- Image `model-in-image:WLS-v1`:\n+  - Same image as Initial use case\n+- Kubernetes secrets:\n+  - Same as Initial use case  plus secrets for data source credentials and URL\n+- Kubernetes configmap with:\n+  - A WDT model for a data source targeted to the cluster\n+- A domain resource with:\n+  - Same as Initial use case plus:\n+     - `spec.model.configMap` referencing the configmap\n+     - References to data source secrets\n+{{% /expand%}}\n+\n+#### Sample directory structure\n+\n+Take a moment to familiarize yourself with the sample's directory structure. Don't worry if you don't understand the meaning of all of the terms; the sample will describe them as it steps you through each use case.\n+\n+Location | Description |\n+------------- | ----------- |\n+`domain-resources` | JRF and WLS domain resources |\n+`archives` | Source code location for WebLogic Deploy Tooling application ZIP archives |\n+`model-images` | Staging for each model image's WDT YAML, WDT properties, and WDT archive ZIP files. The directories in `model images` are named for their respective images|\n+`model-configmaps` | Staging files for a model configmap that configures a data source |\n+`ingresses` | Load balancer Ingresses |\n+`utils/wl-pod-wait.sh` | Utility for watching the pods in a domain reach their expected `restartVersion`, image name, and ready state |\n+`utils/patch-restart-version.sh` | Utility for updating a running domain `spec.restartVersion` field (which causes it to 're-instrospect' and 'roll') |\n+`utils/opss-wallet.sh` | Utility for exporting or importing a JRF domain OPSS wallet file |\n+\n+### References\n+\n+For references to the relevant user documentation, see:\n  - [Model in Image]({{< relref \"/userguide/managing-domains/model-in-image/_index.md\" >}}) user documentation\n  - [Oracle WebLogic Server Deploy Tooling](https://github.com/oracle/weblogic-deploy-tooling)\n  - [Oracle WebLogic Image Tool](https://github.com/oracle/weblogic-image-tool)\n \n+### Prerequisites for all domain types\n \n+1. _Choose the type of domain you're going to use throughout the sample, `WLS` or `JRF`._\n \n-#### Prerequisites for all domain types\n+   {{%expand \"Click here for details.\" %}}\n+   - The first time you try this sample, we recommend that you choose `WLS` even if you're familiar with `JRF`.\n+   - This is because `WLS` is simpler and will more easily familiarize you with Model in Image concepts.\n+   - We recommend choosing `JRF` only if: you are already familiar with `JRF`, you have already tried the `WLS` path through this sample, and you have a definite use case where you need to use `JRF`.\n+   {{% /expand%}}\n \n-1. The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (`JAVA_HOME` is used by the WebLogic Image Tool.)\n+1. _The `JAVA_HOME` environment variable must be set and must reference a valid JDK 8 installation. (The `JAVA_HOME` will be used by the WebLogic Image Tool.)_\n \n-2. Set a source directory environment variable `SRCDIR` that references the parent of the operator source tree. For example:\n+1. _Get the operator source and put it in `/tmp/operator-source`._\n \n+   {{%expand \"Click here for details.\" %}}\n    ```\n-   mkdir ~/wlopsrc\n-   cd ~/wlopsrc\n+   mkdir /tmp/operator-source\n+   cd /tmp/operator-source\n    git clone https://github.com/oracle/weblogic-kubernetes-operator.git\n-   export SRCDIR=$(pwd)/weblogic-kubernetes-operator\n+\n+   # TBD remove the following steps once 3.0 is released on master:\n+   cd weblogic-kubernetes-operator\n+   git checkout develop\n    ```\n \n+   > **Note:** We will refer to the top directory of the operator source tree as `/tmp/operator-source`; however, you can use a different location.\n+\n    For additional information about obtaining the operator source, see the [Developer Guide Requirements](https://oracle.github.io/weblogic-kubernetes-operator/developerguide/requirements/).\n+   {{% /expand%}}\n+\n+1. _Copy the sample to an empty working directory; for example, use directory `/tmp/mii-sample`._\n \n-3. Create a sample directory environment variable `SAMPLEDIR` that references this sample's directory:\n+   {{%expand \"Click here for details.\" %}}\n \n    ```\n-   export SAMPLEDIR=${SRCDIR}/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/\n+   mkdir /tmp/mii-sample\n+   cp -r /tmp/operator-source/kubernetes/samples/scripts/create-weblogic-domain/model-in-image/* /tmp/mii-sample\n    ```\n \n-4. Create an empty, temporary working directory with 10g of space, and store its location in the `WORKDIR` environment variable. For example:\n+   > **Note**: If the working directory already exists, then you should delete or rename the old directory prior to copying over the sample files. It is important to start with a directory that contains only this sample's original source files.\n+\n+   > **Note**: We will refer to this working copy of the sample as `/tmp/mii-sample`; however, you can use a different location.\n+   {{% /expand%}}\n+\n+1. _Make sure an operator is set up to manage namespace `sample-domain1-ns`. Also, make sure a Traefik load balancer is managing the same namespace and listening on port 30305._\n+\n+   {{%expand \"Click here for details.\" %}}\n+   For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/) guide up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+\n+   > **Note:** Skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+   {{% /expand%}}\n+\n+1. _Make sure there are no conflicting WebLogic related domains, Ingresses, secrets, or config maps that are already deployed to namespace `sample-domain1-ns`._\n+\n+   {{%expand \"Click here for details.\" %}}\n+\n+   If any of the following commands reveal WebLogic related resources, then the simplest way to avoid conflicts is to delete them using the corresponding `kubectl delete TYPE NAME` verb:\n \n    ```\n-   cd <location of empty temporary directory with 10g of space>\n-   export WORKDIR=$(pwd)\n+   kubectl get domains    -n sample-domain1-ns\n+   kubectl get pods       -n sample-domain1-ns\n+   kubectl get configmaps -n sample-domain1-ns\n+   kubectl get secrets    -n sample-domain1-ns\n+   kubectl get ingresses  -n sample-domain1-ns\n    ```\n \n-    If you do not set this environment variable, then the sample scripts will default to `/tmp/$USER/model-in-image-sample-work-dir` where `$USER` is your user name.\n+   For example, if the `get domains` command reveals domain `mydomain`, then call `kubectl delete domain mydomain -n sample-domain1-ns` to shut it down.\n+\n+   > **WARNING:** If you delete an existing domain, then wait for its pods to shut down. To monitor the sample domain namespace as pods shut down, use `kubectl get pods -n sample-domain1-ns -w` and type `ctrl-c` to exit.\n+   {{% /expand%}}\n+\n+\n+1. _Set up Ingresses that will redirect HTTP from Traefik port 30305 to the clusters in this sample's WebLogic domains._\n \n-5. Deploy the operator and set up the operator to manage the namespace, `sample-domain1-ns`. Optionally, deploy a Traefik load balancer that manages the same namespace. For example, follow the same steps as the [Quick Start](https://oracle.github.io/weblogic-kubernetes-operator/quickstart/), up through the [Prepare for a domain]({{< relref \"/quickstart/prepare.md\" >}}) step.\n+    Run one of the following commands:\n \n-   Note that:\n-   - Deploying the Traefik load balancer is optional, but is a prerequisite for testing the web application that's deployed to WebLogic as part of this sample.\n-   - You can skip the Quick Start steps for obtaining a WebLogic image because you will be creating your own Docker image.\n+    - To deploy the Ingresses, one option is to use your favorite editor to cut and paste the following YAML to a file called `/tmp/mii-sample/ingresses/myingresses.yaml` and then call `kubectl apply -f /tmp/mii-sample/ingresses/myingresses.yaml`:\n \n+      {{%expand \"Click here for details.\" %}}\n+   ```\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-admin-server\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host:\n+       http:\n+         paths:\n+         - path: /console\n+           backend:\n+             serviceName: sample-domain1-admin-server\n+             servicePort: 7001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-cluster-cluster-1\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain1-cluster-cluster-1.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain1-cluster-cluster-1\n+             servicePort: 8001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain1-cluster-cluster-2\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain1\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain1-cluster-cluster-2.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain1-cluster-cluster-2\n+             servicePort: 8001\n+   ---\n+   apiVersion: extensions/v1beta1\n+   kind: Ingress\n+   metadata:\n+     name: traefik-ingress-sample-domain2-cluster-cluster-1\n+     namespace: sample-domain1-ns\n+     labels:\n+       weblogic.domainUID: sample-domain2\n+     annotations:\n+       kubernetes.io/ingress.class: traefik\n+   spec:\n+     rules:\n+     - host: sample-domain2-cluster-cluster-1.mii-sample.org\n+       http:\n+         paths:\n+         - path:\n+           backend:\n+             serviceName: sample-domain2-cluster-cluster-1\n+             servicePort: 8001\n+   ```\n+      {{% /expand%}}\n \n-6. Choose the type of domain you're going to create: `WLS`, `JRF`, or `RestrictedJRF`, and set the environment variable, `WDT_DOMAIN_TYPE`, accordingly. The default is `WLS`.\n+   - Another option for deploying this sample's Ingresses is to run `kubectl apply -f` on each of the Ingress YAML files that are already included in the sample source `/tmp/mii-sample/ingresses` directory:\n \n+      {{%expand \"Click here for details.\" %}}\n    ```\n-   export WDT_DOMAIN_TYPE=<one of WLS, JRF, or RestrictedJRF>\n+   cd /tmp/mii-sample/ingresses\n+   kubectl apply -f traefik-ingress-sample-domain1-admin-server.yaml\n+   kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-1.yaml\n+   kubectl apply -f traefik-ingress-sample-domain1-cluster-cluster-2.yaml\n+   kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-1.yaml\n+   kubectl apply -f traefik-ingress-sample-domain2-cluster-cluster-2.yaml\n    ```\n+      {{% /expand%}}\n \n-7. Set up access to a base image for this sample that will be used as the base image for creating the final image. Do one of the following:\n+   > Note: If you're interested in the details of the `curl` commands we use to access each cluster through its Ingress, see the comments embedded within the `/tmp/mii-sample/ingresses` YAML files.\n \n-   - __Option 1, download an existing WebLogic image.__\n+   > Note: We give each cluster Ingress a different host name that is decorated using both its operator domain UID and its cluster name. This makes each cluster uniquely addressable even when cluster names are the same across different clusters. For more on information Ingresses and load balancers, see TBD.\n \n-     Set up access to this sample's base WebLogic image at the [Oracle Container Registry](http://container-registry.oracle.com):\n+1. _Set up access to a base WebLogic 12.2.1.4 image for this sample that will be used for creating the sample's model images._\n \n-     a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n+   Do one of the following:\n \n-     b. Choose an image location:\n-       - For `JRF` and `RestrictedJRF` domains, select `Middleware`, then `fmw-infrastructure`.\n-       - For `WLS` domains, select `Middleware`, then `weblogic`.\n+   - Option 1 (recommended), set up access to an existing WebLogic image in the [Oracle Container Registry](http://container-registry.oracle.com):\n \n-     c. Select Sign In and accept the license agreement.\n+     {{%expand \"Click here for details.\" %}}\n \n-     d. Use your terminal to locally log in to Docker: `docker login container-registry.oracle.com`.\n+   a. Use a browser to access [Oracle Container Registry](http://container-registry.oracle.com).\n \n-     e. Later, when you run the sample, it will call `docker pull` for your base image based on the domain type.\n-       - For `JRF` and `RestrictedJRF`, it will pull `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`.\n-       - For `WLS`, it will pull `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n+   b. Choose an image location: for `JRF` domains, select `Middleware`, then `fmw-infrastructure`; for `WLS` domains, select `Middleware`, then `weblogic`.\n \n-   - __Option 2, create your own WebLogic base image.__\n+   c. Select Sign In and accept the license agreement.\n \n-     Alternatively, you can create your own base image and override the sample's default base image name and tag by exporting the `BASE_IMAGE_NAME` and `BASE_IMAGE_TAG` environment variables prior to running the sample scripts. If you want to create your own base image, see [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+   d. Use your terminal to log in to Docker locally: `docker login container-registry.oracle.com`.\n \n-8. If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains).\n+   e. Later in this sample, when you run WebLogic Image Tool commands, the tool will use the image as a base image for creating model images. Specifically, the tool will implicitly call `docker pull` for one of the above licensed images as specified in the tool's command line using the `--fromImage` parameter. For `JRF`, this sample specifies `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4`, and for `WLS`, the sample specifies `container-registry.oracle.com/middleware/weblogic:12.2.1.4`.\n \n-> __NOTE__: Skip to section [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if you're **not** using a `JRF` domain type.\n+   {{% /expand%}}\n \n-#### Prerequisites for JRF domains\n+   - Option 2 (advanced users only), create your own WebLogic base image:\n \n-> __NOTE__: This section is only required for demonstrating a `JRF` domain type. Skip this section and proceed to [Use the WebLogic Image Tool to create an image](#use-the-weblogic-image-tool-to-create-an-image) if your domain type is `WLS` or `RestrictedJRF`.\n+     {{%expand \"Click here for details.\" %}}\n+   This alternative is recommended only for advanced users that are already familiar with the WebLogic Image Tool. You can create your own base image and then substitute this image name in the WebLogic Image Tool `--fromImage` parameter throughout this sample. See [Preparing a Base Image]({{< relref \"/userguide/managing-domains/domain-in-image/base-images/_index.md\" >}}).\n+     {{% /expand%}}\n \n-A JRF domain requires an infrastructure database called an RCU database, requires initializing this database, and requires configuring your domain to access this database. All of these steps must occur before you first deploy your domain.\n+1. _Download the latest WebLogic Deploying Tooling and WebLogic Image Tool installer ZIP files to your `/tmp/mii-sample/model-images` directory._\n \n-Furthermore, if you want to have a restarted JRF domain access updates to the infrastructure database that the domain made at an earlier time, the restarted domain must be supplied a wallet file that was obtained from a previous run of the domain.\n+   {{%expand \"Click here for details.\" %}}\n+\n+   Both WDT and WIT are required to create your own Model in Image Docker images. Download the latest version of each tool's installer ZIP file to the `/tmp/mii-sample/model-images` directory. Make sure that the files are named `weblogic-deploy-tooling.zip` and `weblogic-image-tool.zip`.\n+\n+   For example, visit the GitHub [WebLogic Deploy Tooling Releses](https://github.com/oracle/weblogic-deploy-tooling/releases) and [WebLogic Image Tool Releases](https://github.com/oracle/weblogic-image-tool/releases) web pages to determine the latest release version for each, and then, assuming the version numbers are `1.8.0` and `1.8.4` respectively, call:\n+\n+   ```\n+   curl -m 30 -fL https://github.com/oracle/weblogic-deploy-tooling/releases/download/weblogic-deploy-tooling-1.8.0/weblogic-deploy.zip \\\n+     -o /tmp/mii-sample/model-images/weblogic-deploy-tooling.zip\n+   curl -m 30 -fL https://github.com/oracle/weblogic-image-tool/releases/download/release-1.8.4/imagetool.zip \\\n+     -o /tmp/mii-sample/model-images/weblogic-image-tool.zip\n+   ```\n+   {{% /expand%}}\n+\n+1. _Set up the WebLogic Image Tool._\n+\n+   {{%expand \"Click here for details.\" %}}\n+\n+   To set up the WebLogic Image Tool, run the following commands:\n+\n+   ```\n+   cd /tmp/mii-sample/model-images\n+\n+   unzip weblogic-image-tool.zip\n+\n+   # it's OK if this delete fails\n+   ./imagetool/bin/imagetool.sh cache deleteEntry \\\n+     --key wdt_latest\n+\n+   ./imagetool/bin/imagetool.sh cache addInstaller \\\n+     --type wdt \\\n+     --version latest \\\n+     --path /tmp/mii-sample/model-images/weblogic-deploy-tooling.zip\n+   ```\n+\n+   These steps will install WIT to the `/tmp/mii-sample/model-images/imagetool` directory, plus put a `wdt_latest` entry in the tool's cache which points to the WDT ZIP installer. We will use WIT later in the sample for creating model images. If you want, take a moment to peruse the tool help: `/tmp/mii-sample/model-images/imagetool/bin/imagetool.sh -h`.\n+\n+   {{% /expand%}}\n+\n+1. _If you are using a `JRF` domain type, then it requires an RCU infrastructure database. See [Prerequisites for JRF Domains](#prerequisites-for-jrf-domains)._\n \n-The following steps demonstrate how to set up an infrastructure database that will work with this sample:\n+   > __NOTE__: Skip the JRF section if you're **not** using a `JRF` domain type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 413}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTkyNDY0OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozNzowNVrOGQK17w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOToyMjowNVrOGQ4IlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwODA0Nw==", "bodyText": "in the ref doc it said these were optional, but here it says they are required", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419608047", "createdAt": "2020-05-04T17:37:05Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 657}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MDEwMQ==", "bodyText": "good catch - i've updated this and the related user doc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420350101", "createdAt": "2020-05-05T19:22:05Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwODA0Nw=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 657}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTkyNzk3OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozODowMlrOGQK4Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOToyNjo1NlrOGQ4TPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwODU5MQ==", "bodyText": "this path is incorrect - should be /tmp/mii-sample/archives shouldn't it?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419608591", "createdAt": "2020-05-04T17:38:02Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 670}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MjgzMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420352831", "createdAt": "2020-05-05T19:26:56Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwODU5MQ=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 670}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk0MjM1OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0MTo0NVrOGQLAsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTozNTo1MVrOGQ4mDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDgwMA==", "bodyText": "i would remove the -q so you can see what is happening", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419610800", "createdAt": "2020-05-04T17:41:45Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.\n+\n+The archive top directory, named `wlsdeploy`, contains a directory named `applications`, which includes an 'exploded' sample JSP web application in the directory, `myapp-v1`. Three useful aspects to remember about WDT archives are:\n+  - A model image can contain multiple WDT archives.\n+  - WDT archives themselves can contain multiple applications, libraries, and other components.\n+  - WDT archives have a [well defined directory structure](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md) which always has `wlsdeploy` as the top directory.\n+\n+{{%expand \"Let's take a moment to look at the web application source. Click here to see the JSP code in the archive.\" %}}\n \n ```\n-docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    ic = new InitialContext();\n+\n+    String srName=System.getProperty(\"weblogic.Name\");\n+    String domainUID=System.getenv(\"DOMAIN_UID\");\n+    String domainName=System.getenv(\"CUSTOM_DOMAIN_NAME\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"*****************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");\n+    out.println();\n+    out.println(\"Welcome to WebLogic server '\" + srName + \"'!\");\n+    out.println();\n+    out.println(\" domain UID  = '\" + domainUID +\"'\");\n+    out.println(\" domain name = '\" + domainName +\"'\");\n+    out.println();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    // display the current server's cluster name\n+    Set<ObjectInstance> clusterRuntimes = mbs.queryMBeans(new ObjectName(\"*:Type=ClusterRuntime,*\"), null);\n+    out.println(\"Found \" + clusterRuntimes.size() + \" local cluster runtime\" + (String)((clusterRuntimes.size()!=1)?\"s:\":\":\"));\n+    for (ObjectInstance clusterRuntime : clusterRuntimes) {\n+       String cName = (String)mbs.getAttribute(clusterRuntime.getObjectName(), \"Name\");\n+       out.println(\"  Cluster '\" + cName + \"'\");\n+    }\n+    out.println();\n+\n+\n+    // display local data sources\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+    out.println(\"Found \" + dataSources.length + \" local data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+    out.println();\n+\n+    out.println(\"*****************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));\n+  } finally {\n+    out.println(\"</pre></body></html>\");\n+    if (ic != null) ic.close();\n+  }\n+%>\n ```\n+{{% /expand%}}\n+\n+If you expand the application, you can see that it reveals important details about the WebLogic Server that it's running on: namely its domain name, cluster name, and server name, as well as the names of any data sources that are targeted to the server. You can also see that application output reports that it's at version 'v1'; we will update this to 'v2' in a future use case to demonstrate upgrading the application.\n+\n+Next, we'll move on to creating a ZIP file of this archive in our image's staging directory.\n \n-2.  Push the image to the remote Docker registry, for example:\n+#### Staging a ZIP file of the archive\n+\n+When we create our image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v1`. In preparation, we need it to contain a ZIP file of the WDT application archive.\n+\n+Run the following commands to create your application archive ZIP file and put it in the expected directory:\n \n ```\n-docker push my.remote.registry.com/model-in-image:v1\n+# Delete existing archive.zip in case we have an old leftover version\n+rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip\n+\n+# Move to the directory which contains the source files for our archive\n+cd /tmp/mii-sample/archives/archive-v1\n+\n+# Zip the archive to the location will later use when we run the WebLogic Image Tool\n+zip -q -r /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip wlsdeploy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 761}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1NzY0Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420357646", "createdAt": "2020-05-05T19:35:51Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.\n+\n+The archive top directory, named `wlsdeploy`, contains a directory named `applications`, which includes an 'exploded' sample JSP web application in the directory, `myapp-v1`. Three useful aspects to remember about WDT archives are:\n+  - A model image can contain multiple WDT archives.\n+  - WDT archives themselves can contain multiple applications, libraries, and other components.\n+  - WDT archives have a [well defined directory structure](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md) which always has `wlsdeploy` as the top directory.\n+\n+{{%expand \"Let's take a moment to look at the web application source. Click here to see the JSP code in the archive.\" %}}\n \n ```\n-docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    ic = new InitialContext();\n+\n+    String srName=System.getProperty(\"weblogic.Name\");\n+    String domainUID=System.getenv(\"DOMAIN_UID\");\n+    String domainName=System.getenv(\"CUSTOM_DOMAIN_NAME\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"*****************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");\n+    out.println();\n+    out.println(\"Welcome to WebLogic server '\" + srName + \"'!\");\n+    out.println();\n+    out.println(\" domain UID  = '\" + domainUID +\"'\");\n+    out.println(\" domain name = '\" + domainName +\"'\");\n+    out.println();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    // display the current server's cluster name\n+    Set<ObjectInstance> clusterRuntimes = mbs.queryMBeans(new ObjectName(\"*:Type=ClusterRuntime,*\"), null);\n+    out.println(\"Found \" + clusterRuntimes.size() + \" local cluster runtime\" + (String)((clusterRuntimes.size()!=1)?\"s:\":\":\"));\n+    for (ObjectInstance clusterRuntime : clusterRuntimes) {\n+       String cName = (String)mbs.getAttribute(clusterRuntime.getObjectName(), \"Name\");\n+       out.println(\"  Cluster '\" + cName + \"'\");\n+    }\n+    out.println();\n+\n+\n+    // display local data sources\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+    out.println(\"Found \" + dataSources.length + \" local data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+    out.println();\n+\n+    out.println(\"*****************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));\n+  } finally {\n+    out.println(\"</pre></body></html>\");\n+    if (ic != null) ic.close();\n+  }\n+%>\n ```\n+{{% /expand%}}\n+\n+If you expand the application, you can see that it reveals important details about the WebLogic Server that it's running on: namely its domain name, cluster name, and server name, as well as the names of any data sources that are targeted to the server. You can also see that application output reports that it's at version 'v1'; we will update this to 'v2' in a future use case to demonstrate upgrading the application.\n+\n+Next, we'll move on to creating a ZIP file of this archive in our image's staging directory.\n \n-2.  Push the image to the remote Docker registry, for example:\n+#### Staging a ZIP file of the archive\n+\n+When we create our image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v1`. In preparation, we need it to contain a ZIP file of the WDT application archive.\n+\n+Run the following commands to create your application archive ZIP file and put it in the expected directory:\n \n ```\n-docker push my.remote.registry.com/model-in-image:v1\n+# Delete existing archive.zip in case we have an old leftover version\n+rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip\n+\n+# Move to the directory which contains the source files for our archive\n+cd /tmp/mii-sample/archives/archive-v1\n+\n+# Zip the archive to the location will later use when we run the WebLogic Image Tool\n+zip -q -r /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip wlsdeploy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMDgwMA=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 761}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk1MTAwOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0NDoxMlrOGQLGag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTozNjowMVrOGQ4mbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMjI2Ng==", "bodyText": "i would make these relative paths, since you know what directory we are in.\nas -is, i cannot copy/run", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419612266", "createdAt": "2020-05-04T17:44:12Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.\n+\n+The archive top directory, named `wlsdeploy`, contains a directory named `applications`, which includes an 'exploded' sample JSP web application in the directory, `myapp-v1`. Three useful aspects to remember about WDT archives are:\n+  - A model image can contain multiple WDT archives.\n+  - WDT archives themselves can contain multiple applications, libraries, and other components.\n+  - WDT archives have a [well defined directory structure](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md) which always has `wlsdeploy` as the top directory.\n+\n+{{%expand \"Let's take a moment to look at the web application source. Click here to see the JSP code in the archive.\" %}}\n \n ```\n-docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    ic = new InitialContext();\n+\n+    String srName=System.getProperty(\"weblogic.Name\");\n+    String domainUID=System.getenv(\"DOMAIN_UID\");\n+    String domainName=System.getenv(\"CUSTOM_DOMAIN_NAME\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"*****************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");\n+    out.println();\n+    out.println(\"Welcome to WebLogic server '\" + srName + \"'!\");\n+    out.println();\n+    out.println(\" domain UID  = '\" + domainUID +\"'\");\n+    out.println(\" domain name = '\" + domainName +\"'\");\n+    out.println();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    // display the current server's cluster name\n+    Set<ObjectInstance> clusterRuntimes = mbs.queryMBeans(new ObjectName(\"*:Type=ClusterRuntime,*\"), null);\n+    out.println(\"Found \" + clusterRuntimes.size() + \" local cluster runtime\" + (String)((clusterRuntimes.size()!=1)?\"s:\":\":\"));\n+    for (ObjectInstance clusterRuntime : clusterRuntimes) {\n+       String cName = (String)mbs.getAttribute(clusterRuntime.getObjectName(), \"Name\");\n+       out.println(\"  Cluster '\" + cName + \"'\");\n+    }\n+    out.println();\n+\n+\n+    // display local data sources\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+    out.println(\"Found \" + dataSources.length + \" local data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+    out.println();\n+\n+    out.println(\"*****************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));\n+  } finally {\n+    out.println(\"</pre></body></html>\");\n+    if (ic != null) ic.close();\n+  }\n+%>\n ```\n+{{% /expand%}}\n+\n+If you expand the application, you can see that it reveals important details about the WebLogic Server that it's running on: namely its domain name, cluster name, and server name, as well as the names of any data sources that are targeted to the server. You can also see that application output reports that it's at version 'v1'; we will update this to 'v2' in a future use case to demonstrate upgrading the application.\n+\n+Next, we'll move on to creating a ZIP file of this archive in our image's staging directory.\n \n-2.  Push the image to the remote Docker registry, for example:\n+#### Staging a ZIP file of the archive\n+\n+When we create our image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v1`. In preparation, we need it to contain a ZIP file of the WDT application archive.\n+\n+Run the following commands to create your application archive ZIP file and put it in the expected directory:\n \n ```\n-docker push my.remote.registry.com/model-in-image:v1\n+# Delete existing archive.zip in case we have an old leftover version\n+rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip\n+\n+# Move to the directory which contains the source files for our archive\n+cd /tmp/mii-sample/archives/archive-v1\n+\n+# Zip the archive to the location will later use when we run the WebLogic Image Tool\n+zip -q -r /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip wlsdeploy\n ```\n \n-3. Create the pull secret for the remote Docker registry:\n+#### Staging model files\n+\n+In this step, we explore the staged WDT model YAML file and properties in directory `/tmp/mii-sample/model-in-image__WLS-v1`. The model in this directory references the web application in our archive, configures a WebLogic Administration Server, and configures a WebLogic cluster. It consists of only two files, `model.10.properties`, a file with a single property, and, `model.10.yaml`, a YAML file with our WebLogic configuration `model.10.yaml`.\n+\n+{{%expand \"Click here to expand `model.10.properties`.\" %}}\n \n ```\n- kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n-     --docker-server=my.remote.registry.com \\\n-     --docker-username=your.email@some.com \\\n-     --docker-password=your-password \\\n-     --docker-email=your.email@some.com\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n+CLUSTER_SIZE=5\n ```\n \n-4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+{{% /expand%}}\n+\n+{{%expand \"Click here to expand the WLS `model.10.yaml`.\" %}}\n \n-```\n-  imagePullSecrets:\n-  - name: <secret name>\n \n+```\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    AdminServerName: 'admin-server'\n+    Cluster:\n+        'cluster-1':\n+            DynamicServers:\n+                ServerTemplate:  'cluster-1-template'\n+                ServerNamePrefix: 'managed-server'\n+                DynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MaxDynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MinDynamicClusterSize: '0'\n+                CalculatedListenPorts: false\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+    ServerTemplate:\n+        'cluster-1-template':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n \n-  This domain template file will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+{{% /expand%}}\n \n-5. Export the environment variables for the image name and tag using the same values in step 1:\n+{{%expand \"Click here to expand the JRF `model.10.yaml`, and note the RCUDbInfo stanza and its references to a DOMAIN_UID-rcu-access secret.\" %}}\n \n ```\n-export MODEL_IMAGE_NAME=\"my.remote.registry.com/model-in-image\"\n-export MODEL_IMAGE_TAG=\"v1\"\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server2-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server3-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server4-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n+{{% /expand%}}\n+\n+{{%expand \"And click here for some observations about `model.10.yaml` and `model.10.properties`.\" %}}\n+\n+The model files:\n+\n+- Define a WebLogic domain with:\n+  - Cluster `cluster-1`\n+  - Administration Server `admin-server`\n+  - A `cluster-1` targeted `ear` application that's located in the WDT archive ZIP file at `wlsdeploy/applications/myapp-v1`\n+\n+- Leverage macros to inject external values:\n+  - The property file `CLUSTER_SIZE` property is referenced in the model YAML `DynamicClusterSize` and `MaxDynamicClusterSize` fields using a PROP macro.\n+  - The model file domain name is injected using a custom environment variable named `CUSTOM_DOMAIN_NAME` using an ENV macro.\n+    - We set this environment variable later on in this sample using an `env` field in its domain resource.\n+    - _This conveniently provides a simple way to deploy multiple differently named domains using the same model image._\n+  - The model file administrator user name and password are set using a `weblogic-credentials` secret macro reference to the WebLogic credential secret.\n+    - This secret is in turn referenced using the `weblogicCredentialsSecret` field in the domain resource.\n+    - The `weblogic-credentials` is a reserved name that always dereferences to the owning domain resource actual WebLogic credentials secret name.\n+\n+A Model in Image image can contain multiple properties files, archive ZIP files, and YAML files, but in this sample we use just one of each. For a full discussion of Model in Images model file naming conventions, file loading order, and macro syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) in the Model in Image user documentation.\n+\n+{{% /expand%}}\n \n-These environment variables will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+#### Creating the image with WIT\n \n-#### Create and deploy your Kubernetes resources\n+> **JRF Note:** If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n \n-To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+At this point, we have staged all of the files needed for image `model-in-image:WLS-v1`, they include:\n \n-  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n-  - Creates a secret containing your WebLogic administrator user name and password.\n-  - Creates a secret containing your Model in Image runtime encryption password:\n+  - `/tmp/mii-sample/model-images/weblogic-deploy-tooling.zip`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.yaml`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.properties`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip`\n+\n+If you don't see the `weblogic-deploy-tooling.zip` file, then it means that you missed a step in the prerequisites.\n+\n+Now let's use the Image Tool to create an image named `model-in-image:WLS-v1` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+Run the following commands to create the model image and verify that it worked:\n+\n+{{%expand \"Click here to expand.\" %}}\n+\n+  ```\n+  cd /tmp/mii-sample/model-images\n+  ./imagetool/bin/imagetool.sh update \\\n+    --tag model-in-image:WLS-v1 \\\n+    --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+    --wdtModel /tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.yaml \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 932}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1Nzc0MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420357740", "createdAt": "2020-05-05T19:36:01Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.\n+\n+The archive top directory, named `wlsdeploy`, contains a directory named `applications`, which includes an 'exploded' sample JSP web application in the directory, `myapp-v1`. Three useful aspects to remember about WDT archives are:\n+  - A model image can contain multiple WDT archives.\n+  - WDT archives themselves can contain multiple applications, libraries, and other components.\n+  - WDT archives have a [well defined directory structure](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md) which always has `wlsdeploy` as the top directory.\n+\n+{{%expand \"Let's take a moment to look at the web application source. Click here to see the JSP code in the archive.\" %}}\n \n ```\n-docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    ic = new InitialContext();\n+\n+    String srName=System.getProperty(\"weblogic.Name\");\n+    String domainUID=System.getenv(\"DOMAIN_UID\");\n+    String domainName=System.getenv(\"CUSTOM_DOMAIN_NAME\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"*****************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");\n+    out.println();\n+    out.println(\"Welcome to WebLogic server '\" + srName + \"'!\");\n+    out.println();\n+    out.println(\" domain UID  = '\" + domainUID +\"'\");\n+    out.println(\" domain name = '\" + domainName +\"'\");\n+    out.println();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    // display the current server's cluster name\n+    Set<ObjectInstance> clusterRuntimes = mbs.queryMBeans(new ObjectName(\"*:Type=ClusterRuntime,*\"), null);\n+    out.println(\"Found \" + clusterRuntimes.size() + \" local cluster runtime\" + (String)((clusterRuntimes.size()!=1)?\"s:\":\":\"));\n+    for (ObjectInstance clusterRuntime : clusterRuntimes) {\n+       String cName = (String)mbs.getAttribute(clusterRuntime.getObjectName(), \"Name\");\n+       out.println(\"  Cluster '\" + cName + \"'\");\n+    }\n+    out.println();\n+\n+\n+    // display local data sources\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+    out.println(\"Found \" + dataSources.length + \" local data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+    out.println();\n+\n+    out.println(\"*****************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));\n+  } finally {\n+    out.println(\"</pre></body></html>\");\n+    if (ic != null) ic.close();\n+  }\n+%>\n ```\n+{{% /expand%}}\n+\n+If you expand the application, you can see that it reveals important details about the WebLogic Server that it's running on: namely its domain name, cluster name, and server name, as well as the names of any data sources that are targeted to the server. You can also see that application output reports that it's at version 'v1'; we will update this to 'v2' in a future use case to demonstrate upgrading the application.\n+\n+Next, we'll move on to creating a ZIP file of this archive in our image's staging directory.\n \n-2.  Push the image to the remote Docker registry, for example:\n+#### Staging a ZIP file of the archive\n+\n+When we create our image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v1`. In preparation, we need it to contain a ZIP file of the WDT application archive.\n+\n+Run the following commands to create your application archive ZIP file and put it in the expected directory:\n \n ```\n-docker push my.remote.registry.com/model-in-image:v1\n+# Delete existing archive.zip in case we have an old leftover version\n+rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip\n+\n+# Move to the directory which contains the source files for our archive\n+cd /tmp/mii-sample/archives/archive-v1\n+\n+# Zip the archive to the location will later use when we run the WebLogic Image Tool\n+zip -q -r /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip wlsdeploy\n ```\n \n-3. Create the pull secret for the remote Docker registry:\n+#### Staging model files\n+\n+In this step, we explore the staged WDT model YAML file and properties in directory `/tmp/mii-sample/model-in-image__WLS-v1`. The model in this directory references the web application in our archive, configures a WebLogic Administration Server, and configures a WebLogic cluster. It consists of only two files, `model.10.properties`, a file with a single property, and, `model.10.yaml`, a YAML file with our WebLogic configuration `model.10.yaml`.\n+\n+{{%expand \"Click here to expand `model.10.properties`.\" %}}\n \n ```\n- kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n-     --docker-server=my.remote.registry.com \\\n-     --docker-username=your.email@some.com \\\n-     --docker-password=your-password \\\n-     --docker-email=your.email@some.com\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n+CLUSTER_SIZE=5\n ```\n \n-4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+{{% /expand%}}\n+\n+{{%expand \"Click here to expand the WLS `model.10.yaml`.\" %}}\n \n-```\n-  imagePullSecrets:\n-  - name: <secret name>\n \n+```\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    AdminServerName: 'admin-server'\n+    Cluster:\n+        'cluster-1':\n+            DynamicServers:\n+                ServerTemplate:  'cluster-1-template'\n+                ServerNamePrefix: 'managed-server'\n+                DynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MaxDynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MinDynamicClusterSize: '0'\n+                CalculatedListenPorts: false\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+    ServerTemplate:\n+        'cluster-1-template':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n \n-  This domain template file will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+{{% /expand%}}\n \n-5. Export the environment variables for the image name and tag using the same values in step 1:\n+{{%expand \"Click here to expand the JRF `model.10.yaml`, and note the RCUDbInfo stanza and its references to a DOMAIN_UID-rcu-access secret.\" %}}\n \n ```\n-export MODEL_IMAGE_NAME=\"my.remote.registry.com/model-in-image\"\n-export MODEL_IMAGE_TAG=\"v1\"\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server2-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server3-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server4-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n+{{% /expand%}}\n+\n+{{%expand \"And click here for some observations about `model.10.yaml` and `model.10.properties`.\" %}}\n+\n+The model files:\n+\n+- Define a WebLogic domain with:\n+  - Cluster `cluster-1`\n+  - Administration Server `admin-server`\n+  - A `cluster-1` targeted `ear` application that's located in the WDT archive ZIP file at `wlsdeploy/applications/myapp-v1`\n+\n+- Leverage macros to inject external values:\n+  - The property file `CLUSTER_SIZE` property is referenced in the model YAML `DynamicClusterSize` and `MaxDynamicClusterSize` fields using a PROP macro.\n+  - The model file domain name is injected using a custom environment variable named `CUSTOM_DOMAIN_NAME` using an ENV macro.\n+    - We set this environment variable later on in this sample using an `env` field in its domain resource.\n+    - _This conveniently provides a simple way to deploy multiple differently named domains using the same model image._\n+  - The model file administrator user name and password are set using a `weblogic-credentials` secret macro reference to the WebLogic credential secret.\n+    - This secret is in turn referenced using the `weblogicCredentialsSecret` field in the domain resource.\n+    - The `weblogic-credentials` is a reserved name that always dereferences to the owning domain resource actual WebLogic credentials secret name.\n+\n+A Model in Image image can contain multiple properties files, archive ZIP files, and YAML files, but in this sample we use just one of each. For a full discussion of Model in Images model file naming conventions, file loading order, and macro syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) in the Model in Image user documentation.\n+\n+{{% /expand%}}\n \n-These environment variables will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+#### Creating the image with WIT\n \n-#### Create and deploy your Kubernetes resources\n+> **JRF Note:** If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n \n-To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+At this point, we have staged all of the files needed for image `model-in-image:WLS-v1`, they include:\n \n-  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n-  - Creates a secret containing your WebLogic administrator user name and password.\n-  - Creates a secret containing your Model in Image runtime encryption password:\n+  - `/tmp/mii-sample/model-images/weblogic-deploy-tooling.zip`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.yaml`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.properties`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip`\n+\n+If you don't see the `weblogic-deploy-tooling.zip` file, then it means that you missed a step in the prerequisites.\n+\n+Now let's use the Image Tool to create an image named `model-in-image:WLS-v1` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+Run the following commands to create the model image and verify that it worked:\n+\n+{{%expand \"Click here to expand.\" %}}\n+\n+  ```\n+  cd /tmp/mii-sample/model-images\n+  ./imagetool/bin/imagetool.sh update \\\n+    --tag model-in-image:WLS-v1 \\\n+    --fromImage container-registry.oracle.com/middleware/weblogic:12.2.1.4 \\\n+    --wdtModel /tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.yaml \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMjI2Ng=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 932}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk2NjgxOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0ODozNVrOGQLQrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0ODozNVrOGQLQrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxNDg5Mg==", "bodyText": "i feel like you should have a note to point out that they may need to use the fully qualified image name, with the registry address in it, especially if using a remote or multi-node cluster", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419614892", "createdAt": "2020-05-04T17:48:35Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.\n+\n+The archive top directory, named `wlsdeploy`, contains a directory named `applications`, which includes an 'exploded' sample JSP web application in the directory, `myapp-v1`. Three useful aspects to remember about WDT archives are:\n+  - A model image can contain multiple WDT archives.\n+  - WDT archives themselves can contain multiple applications, libraries, and other components.\n+  - WDT archives have a [well defined directory structure](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md) which always has `wlsdeploy` as the top directory.\n+\n+{{%expand \"Let's take a moment to look at the web application source. Click here to see the JSP code in the archive.\" %}}\n \n ```\n-docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    ic = new InitialContext();\n+\n+    String srName=System.getProperty(\"weblogic.Name\");\n+    String domainUID=System.getenv(\"DOMAIN_UID\");\n+    String domainName=System.getenv(\"CUSTOM_DOMAIN_NAME\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"*****************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");\n+    out.println();\n+    out.println(\"Welcome to WebLogic server '\" + srName + \"'!\");\n+    out.println();\n+    out.println(\" domain UID  = '\" + domainUID +\"'\");\n+    out.println(\" domain name = '\" + domainName +\"'\");\n+    out.println();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    // display the current server's cluster name\n+    Set<ObjectInstance> clusterRuntimes = mbs.queryMBeans(new ObjectName(\"*:Type=ClusterRuntime,*\"), null);\n+    out.println(\"Found \" + clusterRuntimes.size() + \" local cluster runtime\" + (String)((clusterRuntimes.size()!=1)?\"s:\":\":\"));\n+    for (ObjectInstance clusterRuntime : clusterRuntimes) {\n+       String cName = (String)mbs.getAttribute(clusterRuntime.getObjectName(), \"Name\");\n+       out.println(\"  Cluster '\" + cName + \"'\");\n+    }\n+    out.println();\n+\n+\n+    // display local data sources\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+    out.println(\"Found \" + dataSources.length + \" local data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+    out.println();\n+\n+    out.println(\"*****************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));\n+  } finally {\n+    out.println(\"</pre></body></html>\");\n+    if (ic != null) ic.close();\n+  }\n+%>\n ```\n+{{% /expand%}}\n+\n+If you expand the application, you can see that it reveals important details about the WebLogic Server that it's running on: namely its domain name, cluster name, and server name, as well as the names of any data sources that are targeted to the server. You can also see that application output reports that it's at version 'v1'; we will update this to 'v2' in a future use case to demonstrate upgrading the application.\n+\n+Next, we'll move on to creating a ZIP file of this archive in our image's staging directory.\n \n-2.  Push the image to the remote Docker registry, for example:\n+#### Staging a ZIP file of the archive\n+\n+When we create our image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v1`. In preparation, we need it to contain a ZIP file of the WDT application archive.\n+\n+Run the following commands to create your application archive ZIP file and put it in the expected directory:\n \n ```\n-docker push my.remote.registry.com/model-in-image:v1\n+# Delete existing archive.zip in case we have an old leftover version\n+rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip\n+\n+# Move to the directory which contains the source files for our archive\n+cd /tmp/mii-sample/archives/archive-v1\n+\n+# Zip the archive to the location will later use when we run the WebLogic Image Tool\n+zip -q -r /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip wlsdeploy\n ```\n \n-3. Create the pull secret for the remote Docker registry:\n+#### Staging model files\n+\n+In this step, we explore the staged WDT model YAML file and properties in directory `/tmp/mii-sample/model-in-image__WLS-v1`. The model in this directory references the web application in our archive, configures a WebLogic Administration Server, and configures a WebLogic cluster. It consists of only two files, `model.10.properties`, a file with a single property, and, `model.10.yaml`, a YAML file with our WebLogic configuration `model.10.yaml`.\n+\n+{{%expand \"Click here to expand `model.10.properties`.\" %}}\n \n ```\n- kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n-     --docker-server=my.remote.registry.com \\\n-     --docker-username=your.email@some.com \\\n-     --docker-password=your-password \\\n-     --docker-email=your.email@some.com\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n+CLUSTER_SIZE=5\n ```\n \n-4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+{{% /expand%}}\n+\n+{{%expand \"Click here to expand the WLS `model.10.yaml`.\" %}}\n \n-```\n-  imagePullSecrets:\n-  - name: <secret name>\n \n+```\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    AdminServerName: 'admin-server'\n+    Cluster:\n+        'cluster-1':\n+            DynamicServers:\n+                ServerTemplate:  'cluster-1-template'\n+                ServerNamePrefix: 'managed-server'\n+                DynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MaxDynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MinDynamicClusterSize: '0'\n+                CalculatedListenPorts: false\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+    ServerTemplate:\n+        'cluster-1-template':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n \n-  This domain template file will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+{{% /expand%}}\n \n-5. Export the environment variables for the image name and tag using the same values in step 1:\n+{{%expand \"Click here to expand the JRF `model.10.yaml`, and note the RCUDbInfo stanza and its references to a DOMAIN_UID-rcu-access secret.\" %}}\n \n ```\n-export MODEL_IMAGE_NAME=\"my.remote.registry.com/model-in-image\"\n-export MODEL_IMAGE_TAG=\"v1\"\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server2-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server3-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server4-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n+{{% /expand%}}\n+\n+{{%expand \"And click here for some observations about `model.10.yaml` and `model.10.properties`.\" %}}\n+\n+The model files:\n+\n+- Define a WebLogic domain with:\n+  - Cluster `cluster-1`\n+  - Administration Server `admin-server`\n+  - A `cluster-1` targeted `ear` application that's located in the WDT archive ZIP file at `wlsdeploy/applications/myapp-v1`\n+\n+- Leverage macros to inject external values:\n+  - The property file `CLUSTER_SIZE` property is referenced in the model YAML `DynamicClusterSize` and `MaxDynamicClusterSize` fields using a PROP macro.\n+  - The model file domain name is injected using a custom environment variable named `CUSTOM_DOMAIN_NAME` using an ENV macro.\n+    - We set this environment variable later on in this sample using an `env` field in its domain resource.\n+    - _This conveniently provides a simple way to deploy multiple differently named domains using the same model image._\n+  - The model file administrator user name and password are set using a `weblogic-credentials` secret macro reference to the WebLogic credential secret.\n+    - This secret is in turn referenced using the `weblogicCredentialsSecret` field in the domain resource.\n+    - The `weblogic-credentials` is a reserved name that always dereferences to the owning domain resource actual WebLogic credentials secret name.\n+\n+A Model in Image image can contain multiple properties files, archive ZIP files, and YAML files, but in this sample we use just one of each. For a full discussion of Model in Images model file naming conventions, file loading order, and macro syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) in the Model in Image user documentation.\n+\n+{{% /expand%}}\n \n-These environment variables will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+#### Creating the image with WIT\n \n-#### Create and deploy your Kubernetes resources\n+> **JRF Note:** If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n \n-To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+At this point, we have staged all of the files needed for image `model-in-image:WLS-v1`, they include:\n \n-  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n-  - Creates a secret containing your WebLogic administrator user name and password.\n-  - Creates a secret containing your Model in Image runtime encryption password:\n+  - `/tmp/mii-sample/model-images/weblogic-deploy-tooling.zip`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.yaml`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.properties`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip`\n+\n+If you don't see the `weblogic-deploy-tooling.zip` file, then it means that you missed a step in the prerequisites.\n+\n+Now let's use the Image Tool to create an image named `model-in-image:WLS-v1` that's layered on a base WebLogic image. We've already set up this tool during the prerequisite steps at the beginning of this sample.\n+\n+Run the following commands to create the model image and verify that it worked:\n+\n+{{%expand \"Click here to expand.\" %}}\n+\n+  ```\n+  cd /tmp/mii-sample/model-images\n+  ./imagetool/bin/imagetool.sh update \\\n+    --tag model-in-image:WLS-v1 \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 930}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk3NDEzOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1MDoyMlrOGQLVJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1MDoyMlrOGQLVJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxNjAzOA==", "bodyText": "nit pick: why are these called \"10\" ? what does 10 mean? i stopped and wondered for a while", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419616038", "createdAt": "2020-05-04T17:50:22Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -260,113 +485,718 @@ To reuse the wallet for subsequent redeployments or share the RCU tables between\n       walletPasswordSecret: sample-domain1-opss-wallet-password-secret      \n       # Name of secret with walletFile containing base64 encoded opss wallet\n       walletFileSecret: sample-domain1-opss-walletfile-secret\n-\n ```\n+> **Note:** The sample JRF domain resource files included in `/tmp/mii-sample/domain-resources` already have the above YAML stanza.\n \n See [Reusing an RCU database]({{< relref \"/userguide/managing-domains/model-in-image/reusing-rcu.md\" >}}) for instructions.\n \n-#### Use the WebLogic Image Tool to create an image\n+{{% /expand%}}\n \n-A Model in Image image must contain a WebLogic install, a WebLogic Deploy Tool install, and your WDT model files. You can use the sample `./build.sh` script to build this image, which will perform the following steps for you:\n+### Initial use case\n \n-  - Uses `docker pull` to obtain a base image which already contains a WebLogic install. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types) to set up access to the base image.)\n-  - Downloads the latest WebLogic Image Tool and WebLogic Deploy Tool to `WORKDIR`.\n-  - Creates and populates a staging directory `$WORKDIR/models` that contains your WDT model files and WDT application archive.\n-    - Builds  a simple servlet application in `$SAMPLEDIR/sample_app` into a WDT model application archive `$WORKDIR/models/archive1.zip`.\n-    - Copies sample model files from `$SAMPLEDIR/model-in-image` to `$WORKDIR/models`. This uses a model file that is appropriate to the domain type (for example, the `JRF` domain model includes database access configuration).\n-  - Uses the WebLogic Image Tool and the `$WORKDIR/models` staging directory to create a final image named `model-in-image:v1` that layers on the base image. Specifically, it runs the WebLogic Image Tool with its `update` option, which:\n-    - Builds the final image as a layer on the base image.\n-    - Puts a WDT install in image location, `/u01/wdt/weblogic-deploy`.\n-    - Copies the WDT model, properties, and application archive from `$WORDKIR/models` to image location, `/u01/wdt/models`.\n+#### Contents\n \n-The script expects `JAVA_HOME`, `WDT_DOMAIN_TYPE`, and `WORKDIR` to already be initialized. (See [Prerequisites for all domain types](#prerequisites-for-all-domain-types).)\n+ - [Overview](#overview)\n+ - Image creation\n+    - [Image creation - Introduction](#image-creation---introduction)\n+    - [Understanding our first archive](#understanding-our-first-archive)\n+    - [Staging a ZIP file of the archive](#staging-a-zip-file-of-the-archive)\n+    - [Staging model files](#staging-model-files)\n+    - [Creating the image with WIT](#creating-the-image-with-wit)\n+ - Deploy resources\n+    - [Deploy resources - Introduction](#deploy-resources---introduction)\n+    - [Secrets](#secrets)\n+    - [Domain resource](#domain-resource)\n \n-Run the script:\n+#### Overview\n \n-  ```\n-  $SAMPLEDIR/build.sh\n-  ```\n+In this use case, we set up an initial WebLogic domain. This involves:\n+\n+  - A WDT archive ZIP file that contains your applications.\n+  - A WDT model that describes your WebLogic configuration.\n+  - A Docker image that contains your WDT model files and archive.\n+  - Creating secrets for the domain.\n+  - Creating a domain resource for the domain that references your secrets and image.\n+\n+After the domain resource is deployed, the WebLogic operator will start an 'introspector job' that converts your models into a WebLogic configuration, and then the operator will pass this configuration to each WebLogic Server in the domain.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice note %}}\n+If you are taking the `JRF` path through the sample, then substitute `JRF` for `WLS` in your image names and directory paths. Also note that the JRF-v1 model YAML differs from the WLS-v1 YAML file (it contains an additional `domainInfo -> RCUDbInfo` stanza).\n+{{% /notice %}}\n+\n+#### Image creation - Introduction\n+\n+The goal of the initial use case 'image creation' is to demonstrate using the WebLogic Image Tool to create an image named `model-in-image:WLS-v1` from files that we will stage to `/tmp/mii-sample/model-images/model-in-image:WLS-v1/`. The staged files will contain a web application in a WDT archive, and WDT model configuration for a WebLogic Administration Server called `admin-server` and a WebLogic cluster called `cluster-1`.\n+\n+Overall, a Model in Image image must contain a WebLogic installation, a WebLogic Deploy Tooling installation in its `/u01/wdt/weblogic-deploy` directory, your WDT model YAML and properties files in its `/u01/wdt/models` directory, and your WDT model archive files in the same directory.\n+\n+Let's walk through the steps for creating the image `model-in-image:WLS-v1`:\n \n-If you intend to use a remote Docker registry, you need to tag and push the image to the remote Docker registry.\n+  - Understanding a basic WDT archive's structure\n+  - Creating a WDT archive ZIP file that contains a web application.\n+  - Creating a WDT YAML model that references the web application, and defining a WDT `properties` file.\n+  - Using the WebLogic Image Tool to create a model image from these files.\n \n-1.  Tag the image for the remote Docker registry, for example:\n+#### Understanding our first archive\n+\n+The sample includes a predefined archive directory in `/tmp/archives/archive-v1` that we will use to create an archive ZIP file for the image.\n+\n+The archive top directory, named `wlsdeploy`, contains a directory named `applications`, which includes an 'exploded' sample JSP web application in the directory, `myapp-v1`. Three useful aspects to remember about WDT archives are:\n+  - A model image can contain multiple WDT archives.\n+  - WDT archives themselves can contain multiple applications, libraries, and other components.\n+  - WDT archives have a [well defined directory structure](https://github.com/oracle/weblogic-deploy-tooling/blob/master/site/archive.md) which always has `wlsdeploy` as the top directory.\n+\n+{{%expand \"Let's take a moment to look at the web application source. Click here to see the JSP code in the archive.\" %}}\n \n ```\n-docker tag model-in-image:v1 my.remote.registry.com/model-in-image:v1\n+<%-- Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates. --%>\n+<%-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. --%>\n+<%@ page import=\"javax.naming.InitialContext\" %>\n+<%@ page import=\"javax.management.*\" %>\n+<%@ page import=\"java.io.*\" %>\n+<%\n+  InitialContext ic = null;\n+  try {\n+    ic = new InitialContext();\n+\n+    String srName=System.getProperty(\"weblogic.Name\");\n+    String domainUID=System.getenv(\"DOMAIN_UID\");\n+    String domainName=System.getenv(\"CUSTOM_DOMAIN_NAME\");\n+\n+    out.println(\"<html><body><pre>\");\n+    out.println(\"*****************************************************************\");\n+    out.println();\n+    out.println(\"Hello World! This is version 'v1' of the mii-sample JSP web-app.\");\n+    out.println();\n+    out.println(\"Welcome to WebLogic server '\" + srName + \"'!\");\n+    out.println();\n+    out.println(\" domain UID  = '\" + domainUID +\"'\");\n+    out.println(\" domain name = '\" + domainName +\"'\");\n+    out.println();\n+\n+    MBeanServer mbs = (MBeanServer)ic.lookup(\"java:comp/env/jmx/runtime\");\n+\n+    // display the current server's cluster name\n+    Set<ObjectInstance> clusterRuntimes = mbs.queryMBeans(new ObjectName(\"*:Type=ClusterRuntime,*\"), null);\n+    out.println(\"Found \" + clusterRuntimes.size() + \" local cluster runtime\" + (String)((clusterRuntimes.size()!=1)?\"s:\":\":\"));\n+    for (ObjectInstance clusterRuntime : clusterRuntimes) {\n+       String cName = (String)mbs.getAttribute(clusterRuntime.getObjectName(), \"Name\");\n+       out.println(\"  Cluster '\" + cName + \"'\");\n+    }\n+    out.println();\n+\n+\n+    // display local data sources\n+    ObjectName jdbcRuntime = new ObjectName(\"com.bea:ServerRuntime=\" + srName + \",Name=\" + srName + \",Type=JDBCServiceRuntime\");\n+    ObjectName[] dataSources = (ObjectName[])mbs.getAttribute(jdbcRuntime, \"JDBCDataSourceRuntimeMBeans\");\n+    out.println(\"Found \" + dataSources.length + \" local data source\" + (String)((dataSources.length!=1)?\"s:\":\":\"));\n+    for (ObjectName dataSource : dataSources) {\n+       String dsName  = (String)mbs.getAttribute(dataSource, \"Name\");\n+       String dsState = (String)mbs.getAttribute(dataSource, \"State\");\n+       out.println(\"  Datasource '\" + dsName + \"': State='\" + dsState +\"'\");\n+    }\n+    out.println();\n+\n+    out.println(\"*****************************************************************\");\n+\n+  } catch (Throwable t) {\n+    t.printStackTrace(new PrintStream(response.getOutputStream()));\n+  } finally {\n+    out.println(\"</pre></body></html>\");\n+    if (ic != null) ic.close();\n+  }\n+%>\n ```\n+{{% /expand%}}\n+\n+If you expand the application, you can see that it reveals important details about the WebLogic Server that it's running on: namely its domain name, cluster name, and server name, as well as the names of any data sources that are targeted to the server. You can also see that application output reports that it's at version 'v1'; we will update this to 'v2' in a future use case to demonstrate upgrading the application.\n+\n+Next, we'll move on to creating a ZIP file of this archive in our image's staging directory.\n \n-2.  Push the image to the remote Docker registry, for example:\n+#### Staging a ZIP file of the archive\n+\n+When we create our image, we will use the files in staging directory `/tmp/mii-sample/model-in-image__WLS-v1`. In preparation, we need it to contain a ZIP file of the WDT application archive.\n+\n+Run the following commands to create your application archive ZIP file and put it in the expected directory:\n \n ```\n-docker push my.remote.registry.com/model-in-image:v1\n+# Delete existing archive.zip in case we have an old leftover version\n+rm -f /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip\n+\n+# Move to the directory which contains the source files for our archive\n+cd /tmp/mii-sample/archives/archive-v1\n+\n+# Zip the archive to the location will later use when we run the WebLogic Image Tool\n+zip -q -r /tmp/mii-sample/model-images/model-in-image__WLS-v1/archive.zip wlsdeploy\n ```\n \n-3. Create the pull secret for the remote Docker registry:\n+#### Staging model files\n+\n+In this step, we explore the staged WDT model YAML file and properties in directory `/tmp/mii-sample/model-in-image__WLS-v1`. The model in this directory references the web application in our archive, configures a WebLogic Administration Server, and configures a WebLogic cluster. It consists of only two files, `model.10.properties`, a file with a single property, and, `model.10.yaml`, a YAML file with our WebLogic configuration `model.10.yaml`.\n+\n+{{%expand \"Click here to expand `model.10.properties`.\" %}}\n \n ```\n- kubectl -n <domain namespace> create secret docker-registry <secret name> \\\n-     --docker-server=my.remote.registry.com \\\n-     --docker-username=your.email@some.com \\\n-     --docker-password=your-password \\\n-     --docker-email=your.email@some.com\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n+CLUSTER_SIZE=5\n ```\n \n-4. Update the domain template file `$SAMPLEDIR/k8s-domain.yaml.template` to provide the `imagePullSecrets`:\n+{{% /expand%}}\n+\n+{{%expand \"Click here to expand the WLS `model.10.yaml`.\" %}}\n \n-```\n-  imagePullSecrets:\n-  - name: <secret name>\n \n+```\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    AdminServerName: 'admin-server'\n+    Cluster:\n+        'cluster-1':\n+            DynamicServers:\n+                ServerTemplate:  'cluster-1-template'\n+                ServerNamePrefix: 'managed-server'\n+                DynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MaxDynamicClusterSize: '@@PROP:CLUSTER_SIZE@@'\n+                MinDynamicClusterSize: '0'\n+                CalculatedListenPorts: false\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+    ServerTemplate:\n+        'cluster-1-template':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n \n-  This domain template file will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+{{% /expand%}}\n \n-5. Export the environment variables for the image name and tag using the same values in step 1:\n+{{%expand \"Click here to expand the JRF `model.10.yaml`, and note the RCUDbInfo stanza and its references to a DOMAIN_UID-rcu-access secret.\" %}}\n \n ```\n-export MODEL_IMAGE_NAME=\"my.remote.registry.com/model-in-image\"\n-export MODEL_IMAGE_TAG=\"v1\"\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+    RCUDbInfo:\n+        rcu_prefix: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_prefix@@'\n+        rcu_schema_password: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_schema_password@@'\n+        rcu_db_conn_string: '@@SECRET:@@ENV:DOMAIN_UID@@-rcu-access:rcu_db_conn_string@@'\n+\n+topology:\n+    AdminServerName: 'admin-server'\n+    Name: '@@ENV:CUSTOM_DOMAIN_NAME@@'\n+    Cluster:\n+        'cluster-1':\n+    Server:\n+        'admin-server':\n+            ListenPort: 7001\n+        'managed-server1-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server2-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server3-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+        'managed-server4-c1-':\n+            Cluster: 'cluster-1'\n+            ListenPort: 8001\n+\n+appDeployments:\n+    Application:\n+        myapp:\n+            SourcePath: 'wlsdeploy/applications/myapp-v1'\n+            ModuleType: ear\n+            Target: 'cluster-1'\n ```\n+{{% /expand%}}\n+\n+{{%expand \"And click here for some observations about `model.10.yaml` and `model.10.properties`.\" %}}\n+\n+The model files:\n+\n+- Define a WebLogic domain with:\n+  - Cluster `cluster-1`\n+  - Administration Server `admin-server`\n+  - A `cluster-1` targeted `ear` application that's located in the WDT archive ZIP file at `wlsdeploy/applications/myapp-v1`\n+\n+- Leverage macros to inject external values:\n+  - The property file `CLUSTER_SIZE` property is referenced in the model YAML `DynamicClusterSize` and `MaxDynamicClusterSize` fields using a PROP macro.\n+  - The model file domain name is injected using a custom environment variable named `CUSTOM_DOMAIN_NAME` using an ENV macro.\n+    - We set this environment variable later on in this sample using an `env` field in its domain resource.\n+    - _This conveniently provides a simple way to deploy multiple differently named domains using the same model image._\n+  - The model file administrator user name and password are set using a `weblogic-credentials` secret macro reference to the WebLogic credential secret.\n+    - This secret is in turn referenced using the `weblogicCredentialsSecret` field in the domain resource.\n+    - The `weblogic-credentials` is a reserved name that always dereferences to the owning domain resource actual WebLogic credentials secret name.\n+\n+A Model in Image image can contain multiple properties files, archive ZIP files, and YAML files, but in this sample we use just one of each. For a full discussion of Model in Images model file naming conventions, file loading order, and macro syntax, see [Model files]({{< relref \"/userguide/managing-domains/model-in-image/model-files.md\" >}}) in the Model in Image user documentation.\n+\n+{{% /expand%}}\n \n-These environment variables will be used in [Create and deploy your Kubernetes resources](#create-and-deploy-your-kubernetes-resources), when it creates your final domain resource file.\n+#### Creating the image with WIT\n \n-#### Create and deploy your Kubernetes resources\n+> **JRF Note:** If you are using JRF in this sample, substitute `JRF` for each occurrence of `WLS` in the `imagetool` command line below, plus substitute `container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4` for the `--fromImage` value.\n \n-To deploy the sample operator domain and its required Kubernetes resources, use the sample script, `$SAMPLEDIR/run_domain.sh`, which will perform the following steps for you:\n+At this point, we have staged all of the files needed for image `model-in-image:WLS-v1`, they include:\n \n-  - Deletes the domain with a `DomainUID` of `domain1` in the namespace, `sample-domain1-ns`, if it already exists.\n-  - Creates a secret containing your WebLogic administrator user name and password.\n-  - Creates a secret containing your Model in Image runtime encryption password:\n+  - `/tmp/mii-sample/model-images/weblogic-deploy-tooling.zip`\n+  - `/tmp/mii-sample/model-images/model-in-image__WLS-v1/model.10.yaml`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 915}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk5NDYzOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1NTozNFrOGQLiCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTozOTozOVrOGQ4t_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxOTMzNw==", "bodyText": "should not be localhost - should be the address of one of the workers....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419619337", "createdAt": "2020-05-04T17:55:34Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -379,182 +1209,733 @@ If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see\n   sample-domain1-admin-server   0/1   ContainerCreating   0     0s\n   sample-domain1-admin-server   0/1   Running   0     1s\n   sample-domain1-admin-server   1/1   Running   0     32s\n-  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   Pending   0     0s\n-  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n+  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   ContainerCreating   0     0s\n-  sample-domain1-managed-server2   0/1   Running   0     2s\n+  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n   sample-domain1-managed-server1   0/1   Running   0     2s\n-  sample-domain1-managed-server2   1/1   Running   0     42s\n+  sample-domain1-managed-server2   0/1   Running   0     2s\n   sample-domain1-managed-server1   1/1   Running   0     43s\n+  sample-domain1-managed-server2   1/1   Running   0     42s\n+  ```\n+  {{% /expand%}}\n+\n+Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`; this is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+  {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+  ```\n+  $ ./wl-pod-wait.sh -?\n+\n+    Usage:\n+\n+      wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+         [-p expected_pod_count] \\\n+         [-t timeout_secs] \\\n+         [-q]\n+\n+      Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+    Parameters:\n+\n+      -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+      -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+      pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                        a domain all (a) are ready, (b) have the same\n+                        'domainRestartVersion' label value as the\n+                        current domain resource's 'spec.restartVersion, and\n+                        (c) have the same image as the current domain\n+                        resource's image.\n+\n+      pod_count = 0   : Wait until there are no running WebLogic server pods\n+                        for a domain. The default.\n+\n+      -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+      -q              : Quiet mode. Show only a count of wl pods that\n+                        have reached the desired criteria.\n+\n+      -?              : This help.\n   ```\n+  {{% /expand%}}\n+\n+  {{%expand \"Click here to expand sample output from `wl-pod-wait.sh`.\" %}}\n+  ```\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   ready='true'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   image='model-in-image:WLS-v1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainRestartVersion='1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   namespace='sample-domain1-ns'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainUID='sample-domain1'\n+\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'\n+\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'\n+\n+\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME  VERSION  IMAGE  READY  PHASE\n+  ----  -------  -----  -----  -----\n+\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY   PHASE\n+  --------------------------------  -------  -----------------------  ------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Success!\n+\n+  ```\n+  {{% /expand%}}\n+\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-#### Optionally test the sample application\n+#### Invoke the web application\n \n-1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+Now that all the initial use case resources have been deployed, let's invoke the sample web application through the Traefik load balancer port. Note that the web application will report if it finds any data sources, but we don't expect it to find any because the model doesn't contain any at this point.\n \n-2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+Run one of the following commands:\n \n-   For Helm 3.x:\n+   ```\n+   curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 1514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1OTY3Nw==", "bodyText": "IIRC, I added a mention of the heuristic \"kubectl cluster-info | grep KubeDNS\" elsewhere, I could mention it here and anywhere else it isn't brought up.  Is that a good heuristic?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420359677", "createdAt": "2020-05-05T19:39:39Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -379,182 +1209,733 @@ If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see\n   sample-domain1-admin-server   0/1   ContainerCreating   0     0s\n   sample-domain1-admin-server   0/1   Running   0     1s\n   sample-domain1-admin-server   1/1   Running   0     32s\n-  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   Pending   0     0s\n-  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n+  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   ContainerCreating   0     0s\n-  sample-domain1-managed-server2   0/1   Running   0     2s\n+  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n   sample-domain1-managed-server1   0/1   Running   0     2s\n-  sample-domain1-managed-server2   1/1   Running   0     42s\n+  sample-domain1-managed-server2   0/1   Running   0     2s\n   sample-domain1-managed-server1   1/1   Running   0     43s\n+  sample-domain1-managed-server2   1/1   Running   0     42s\n+  ```\n+  {{% /expand%}}\n+\n+Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`; this is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+  {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+  ```\n+  $ ./wl-pod-wait.sh -?\n+\n+    Usage:\n+\n+      wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+         [-p expected_pod_count] \\\n+         [-t timeout_secs] \\\n+         [-q]\n+\n+      Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+    Parameters:\n+\n+      -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+      -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+      pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                        a domain all (a) are ready, (b) have the same\n+                        'domainRestartVersion' label value as the\n+                        current domain resource's 'spec.restartVersion, and\n+                        (c) have the same image as the current domain\n+                        resource's image.\n+\n+      pod_count = 0   : Wait until there are no running WebLogic server pods\n+                        for a domain. The default.\n+\n+      -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+      -q              : Quiet mode. Show only a count of wl pods that\n+                        have reached the desired criteria.\n+\n+      -?              : This help.\n   ```\n+  {{% /expand%}}\n+\n+  {{%expand \"Click here to expand sample output from `wl-pod-wait.sh`.\" %}}\n+  ```\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   ready='true'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   image='model-in-image:WLS-v1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainRestartVersion='1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   namespace='sample-domain1-ns'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainUID='sample-domain1'\n+\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'\n+\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'\n+\n+\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME  VERSION  IMAGE  READY  PHASE\n+  ----  -------  -----  -----  -----\n+\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY   PHASE\n+  --------------------------------  -------  -----------------------  ------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Success!\n+\n+  ```\n+  {{% /expand%}}\n+\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-#### Optionally test the sample application\n+#### Invoke the web application\n \n-1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+Now that all the initial use case resources have been deployed, let's invoke the sample web application through the Traefik load balancer port. Note that the web application will report if it finds any data sources, but we don't expect it to find any because the model doesn't contain any at this point.\n \n-2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+Run one of the following commands:\n \n-   For Helm 3.x:\n+   ```\n+   curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxOTMzNw=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 1514}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjAwNzc4OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1ODozN1rOGQLp-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo1ODozN1rOGQLp-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyMTM2OA==", "bodyText": "i found this confusing - i thought it meant it was going to explain the steps first, then come back and do them, but after a while i realized i was actually meant to be doing them", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419621368", "createdAt": "2020-05-04T17:58:37Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -379,182 +1209,733 @@ If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see\n   sample-domain1-admin-server   0/1   ContainerCreating   0     0s\n   sample-domain1-admin-server   0/1   Running   0     1s\n   sample-domain1-admin-server   1/1   Running   0     32s\n-  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   Pending   0     0s\n-  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n+  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   ContainerCreating   0     0s\n-  sample-domain1-managed-server2   0/1   Running   0     2s\n+  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n   sample-domain1-managed-server1   0/1   Running   0     2s\n-  sample-domain1-managed-server2   1/1   Running   0     42s\n+  sample-domain1-managed-server2   0/1   Running   0     2s\n   sample-domain1-managed-server1   1/1   Running   0     43s\n+  sample-domain1-managed-server2   1/1   Running   0     42s\n+  ```\n+  {{% /expand%}}\n+\n+Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`; this is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+  {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+  ```\n+  $ ./wl-pod-wait.sh -?\n+\n+    Usage:\n+\n+      wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+         [-p expected_pod_count] \\\n+         [-t timeout_secs] \\\n+         [-q]\n+\n+      Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+    Parameters:\n+\n+      -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+      -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+      pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                        a domain all (a) are ready, (b) have the same\n+                        'domainRestartVersion' label value as the\n+                        current domain resource's 'spec.restartVersion, and\n+                        (c) have the same image as the current domain\n+                        resource's image.\n+\n+      pod_count = 0   : Wait until there are no running WebLogic server pods\n+                        for a domain. The default.\n+\n+      -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+      -q              : Quiet mode. Show only a count of wl pods that\n+                        have reached the desired criteria.\n+\n+      -?              : This help.\n   ```\n+  {{% /expand%}}\n+\n+  {{%expand \"Click here to expand sample output from `wl-pod-wait.sh`.\" %}}\n+  ```\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   ready='true'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   image='model-in-image:WLS-v1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainRestartVersion='1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   namespace='sample-domain1-ns'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainUID='sample-domain1'\n+\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'\n+\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'\n+\n+\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME  VERSION  IMAGE  READY  PHASE\n+  ----  -------  -----  -----  -----\n+\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY   PHASE\n+  --------------------------------  -------  -----------------------  ------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Success!\n+\n+  ```\n+  {{% /expand%}}\n+\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-#### Optionally test the sample application\n+#### Invoke the web application\n \n-1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+Now that all the initial use case resources have been deployed, let's invoke the sample web application through the Traefik load balancer port. Note that the web application will report if it finds any data sources, but we don't expect it to find any because the model doesn't contain any at this point.\n \n-2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+Run one of the following commands:\n \n-   For Helm 3.x:\n+   ```\n+   curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```\n+Or, if Traefik is unavailable and your Administration Server pod is running, you can try `kubectl exec`:\n \n    ```\n-   cd $SRCDIR\n-   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n-    --namespace sample-domain1-ns \\\n-    --set wlsDomain.domainUID=sample-domain1 \\\n-    --set traefik.hostname=sample-domain1.org\n+   kubectl exec -n sample-domain1-ns sample-domain1-admin-server -- bash -c \\\n+     \"curl -s -S -m 10 http://sample-domain1-cluster-cluster-1:8001/myapp_war/index.jsp\"\n    ```\n \n-   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+You should see output like the following:\n \n-3. Send a web application request to the load balancer:\n+  {{%expand \"Click here to expand the expected web application output.\" %}}\n \n-   ```\n-   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n-   ```\n+  ```\n+  $ curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+    http://localhost:30305/myapp_war/index.jsp\n \n-   You should see something like the following:\n+  <html><body><pre>\n+  *****************************************************************\n+\n+  Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+  Welcome to WebLogic server 'managed-server2'!\n+\n+   domain UID  = 'sample-domain1'\n+   domain name = 'domain1'\n+\n+  Found 1 local cluster runtime:\n+    Cluster 'cluster-1'\n+\n+  Found 0 local data sources:\n+\n+  *****************************************************************\n+  </pre></body></html>\n+  ```\n+  {{% /expand%}}\n+\n+  **Note**: If you're running your `curl` commands on a remote machine, then substitute `localhost` with an external address suitable for contacting your Kubernetes cluster. A Kubernetes cluster address that often works can be obtained by using the address just after `https://` in the KubeDNS line of the output from the `kubectl cluster-info` command.\n+\n+  Got it? Please leave your domain up and running if you want to try the next use case.\n+\n+### Update1 use case\n+\n+This use case demonstrates dynamically adding a data source to your running domain. It demonstrates several advantages of WDT and the Image model:\n+\n+- The syntax used for updating a model is exactly the same syntax you use for creating the original model.\n+- A domain's model can be updated dynamically by supplying a model update in a file in a Kubernetes configmap.\n+- Model updates can be as simple as changing the value of a single attribute, or as ambitious as adding a JMS Server.\n+\n+For a detailed discussion of model updates, see [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user guide.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice warning %}}\n+The operator does not support all possible dynamic model updates. For model update limitations, consult [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user docs, and carefully test any model update, before attempting a dynamic update in production.\n+{{% /notice %}}\n+\n+Let's go through the steps:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 1584}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjAxNDg5OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODowMDoxMlrOGQLuOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODowMDoxMlrOGQLuOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyMjQ1Nw==", "bodyText": "i got confused here -- what am i meant to do with this? how to i create the CM?  i assume that you will tell me later...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419622457", "createdAt": "2020-05-04T18:00:12Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -379,182 +1209,733 @@ If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see\n   sample-domain1-admin-server   0/1   ContainerCreating   0     0s\n   sample-domain1-admin-server   0/1   Running   0     1s\n   sample-domain1-admin-server   1/1   Running   0     32s\n-  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   Pending   0     0s\n-  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n+  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   ContainerCreating   0     0s\n-  sample-domain1-managed-server2   0/1   Running   0     2s\n+  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n   sample-domain1-managed-server1   0/1   Running   0     2s\n-  sample-domain1-managed-server2   1/1   Running   0     42s\n+  sample-domain1-managed-server2   0/1   Running   0     2s\n   sample-domain1-managed-server1   1/1   Running   0     43s\n+  sample-domain1-managed-server2   1/1   Running   0     42s\n+  ```\n+  {{% /expand%}}\n+\n+Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`; this is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+  {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+  ```\n+  $ ./wl-pod-wait.sh -?\n+\n+    Usage:\n+\n+      wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+         [-p expected_pod_count] \\\n+         [-t timeout_secs] \\\n+         [-q]\n+\n+      Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+    Parameters:\n+\n+      -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+      -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+      pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                        a domain all (a) are ready, (b) have the same\n+                        'domainRestartVersion' label value as the\n+                        current domain resource's 'spec.restartVersion, and\n+                        (c) have the same image as the current domain\n+                        resource's image.\n+\n+      pod_count = 0   : Wait until there are no running WebLogic server pods\n+                        for a domain. The default.\n+\n+      -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+      -q              : Quiet mode. Show only a count of wl pods that\n+                        have reached the desired criteria.\n+\n+      -?              : This help.\n   ```\n+  {{% /expand%}}\n+\n+  {{%expand \"Click here to expand sample output from `wl-pod-wait.sh`.\" %}}\n+  ```\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   ready='true'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   image='model-in-image:WLS-v1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainRestartVersion='1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   namespace='sample-domain1-ns'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainUID='sample-domain1'\n+\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'\n+\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'\n+\n+\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME  VERSION  IMAGE  READY  PHASE\n+  ----  -------  -----  -----  -----\n+\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY   PHASE\n+  --------------------------------  -------  -----------------------  ------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Success!\n+\n+  ```\n+  {{% /expand%}}\n+\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-#### Optionally test the sample application\n+#### Invoke the web application\n \n-1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+Now that all the initial use case resources have been deployed, let's invoke the sample web application through the Traefik load balancer port. Note that the web application will report if it finds any data sources, but we don't expect it to find any because the model doesn't contain any at this point.\n \n-2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+Run one of the following commands:\n \n-   For Helm 3.x:\n+   ```\n+   curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```\n+Or, if Traefik is unavailable and your Administration Server pod is running, you can try `kubectl exec`:\n \n    ```\n-   cd $SRCDIR\n-   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n-    --namespace sample-domain1-ns \\\n-    --set wlsDomain.domainUID=sample-domain1 \\\n-    --set traefik.hostname=sample-domain1.org\n+   kubectl exec -n sample-domain1-ns sample-domain1-admin-server -- bash -c \\\n+     \"curl -s -S -m 10 http://sample-domain1-cluster-cluster-1:8001/myapp_war/index.jsp\"\n    ```\n \n-   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+You should see output like the following:\n \n-3. Send a web application request to the load balancer:\n+  {{%expand \"Click here to expand the expected web application output.\" %}}\n \n-   ```\n-   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n-   ```\n+  ```\n+  $ curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+    http://localhost:30305/myapp_war/index.jsp\n \n-   You should see something like the following:\n+  <html><body><pre>\n+  *****************************************************************\n+\n+  Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+  Welcome to WebLogic server 'managed-server2'!\n+\n+   domain UID  = 'sample-domain1'\n+   domain name = 'domain1'\n+\n+  Found 1 local cluster runtime:\n+    Cluster 'cluster-1'\n+\n+  Found 0 local data sources:\n+\n+  *****************************************************************\n+  </pre></body></html>\n+  ```\n+  {{% /expand%}}\n+\n+  **Note**: If you're running your `curl` commands on a remote machine, then substitute `localhost` with an external address suitable for contacting your Kubernetes cluster. A Kubernetes cluster address that often works can be obtained by using the address just after `https://` in the KubeDNS line of the output from the `kubectl cluster-info` command.\n+\n+  Got it? Please leave your domain up and running if you want to try the next use case.\n+\n+### Update1 use case\n+\n+This use case demonstrates dynamically adding a data source to your running domain. It demonstrates several advantages of WDT and the Image model:\n+\n+- The syntax used for updating a model is exactly the same syntax you use for creating the original model.\n+- A domain's model can be updated dynamically by supplying a model update in a file in a Kubernetes configmap.\n+- Model updates can be as simple as changing the value of a single attribute, or as ambitious as adding a JMS Server.\n+\n+For a detailed discussion of model updates, see [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user guide.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice warning %}}\n+The operator does not support all possible dynamic model updates. For model update limitations, consult [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user docs, and carefully test any model update, before attempting a dynamic update in production.\n+{{% /notice %}}\n+\n+Let's go through the steps:\n+\n+1. _Ensure you have a running domain._\n+\n+    Make sure you have deployed the domain from the [Initial use case](#initial-use-case).\n+\n+1. _Obtain a data source model YAML._\n+\n+    Find or create a WDT model snippet for a data source, make sure that its target is set to `cluster-1`, and that its initial capacity is set to `0`.\n+\n+   The reason for the latter is to prevent the data source from causing a WebLogic Server startup failure if it can't find the database, which would be likely to happen because we haven't deployed one (unless you're using the `JRF` path through the sample).\n+\n+   Here's a handy data source model configuration that meets these criteria:\n+\n+   {{%expand \"Click here to expand.\" %}}\n \n    ```\n-   Hello World, you have reached server managed-server1\n+   # Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+   # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+   resources:\n+     JDBCSystemResource:\n+       mynewdatasource:\n+         Target: 'cluster-1'\n+         JdbcResource:\n+           JDBCDataSourceParams:\n+             JNDIName: [\n+               jdbc/mydatasource1,\n+               jdbc/mydatasource2\n+             ]\n+             GlobalTransactionsProtocol: TwoPhaseCommit\n+           JDBCDriverParams:\n+             DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+             URL: '@@SECRET:@@ENV:DOMAIN_UID@@-datasource-secret:url@@'\n+             PasswordEncrypted: '@@SECRET:@@ENV:DOMAIN_UID@@-datasource-secret:password@@'\n+             Properties:\n+               user:\n+                 Value: 'sys as sysdba'\n+               oracle.net.CONNECT_TIMEOUT:\n+                 Value: 5000\n+               oracle.jdbc.ReadTimeout:\n+                 Value: 30000\n+           JDBCConnectionPoolParams:\n+               InitialCapacity: 0\n+               MaxCapacity: 1\n+               TestTableName: SQL ISVALID\n+               TestConnectionsOnReserve: true\n+\n    ```\n+   {{% /expand%}}\n+\n+   You can cut and paste the above model snippet to a file and then use it for your configmap, or alternatively, you can use the same data source that's already there for you in `/tmp/mii-domain/model-configmaps/model.20.datasource.yaml`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 1636}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjAyMTM2OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODowMTo1MVrOGQLyQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNTowOTowOFrOGSDOXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyMzQ4OA==", "bodyText": "i could have used a reminder here of what i called that file :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r419623488", "createdAt": "2020-05-04T18:01:51Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -379,182 +1209,733 @@ If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see\n   sample-domain1-admin-server   0/1   ContainerCreating   0     0s\n   sample-domain1-admin-server   0/1   Running   0     1s\n   sample-domain1-admin-server   1/1   Running   0     32s\n-  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   Pending   0     0s\n-  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n+  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   ContainerCreating   0     0s\n-  sample-domain1-managed-server2   0/1   Running   0     2s\n+  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n   sample-domain1-managed-server1   0/1   Running   0     2s\n-  sample-domain1-managed-server2   1/1   Running   0     42s\n+  sample-domain1-managed-server2   0/1   Running   0     2s\n   sample-domain1-managed-server1   1/1   Running   0     43s\n+  sample-domain1-managed-server2   1/1   Running   0     42s\n+  ```\n+  {{% /expand%}}\n+\n+Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`; this is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+  {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+  ```\n+  $ ./wl-pod-wait.sh -?\n+\n+    Usage:\n+\n+      wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+         [-p expected_pod_count] \\\n+         [-t timeout_secs] \\\n+         [-q]\n+\n+      Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+    Parameters:\n+\n+      -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+      -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+      pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                        a domain all (a) are ready, (b) have the same\n+                        'domainRestartVersion' label value as the\n+                        current domain resource's 'spec.restartVersion, and\n+                        (c) have the same image as the current domain\n+                        resource's image.\n+\n+      pod_count = 0   : Wait until there are no running WebLogic server pods\n+                        for a domain. The default.\n+\n+      -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+      -q              : Quiet mode. Show only a count of wl pods that\n+                        have reached the desired criteria.\n+\n+      -?              : This help.\n   ```\n+  {{% /expand%}}\n+\n+  {{%expand \"Click here to expand sample output from `wl-pod-wait.sh`.\" %}}\n+  ```\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   ready='true'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   image='model-in-image:WLS-v1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainRestartVersion='1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   namespace='sample-domain1-ns'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainUID='sample-domain1'\n+\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'\n+\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'\n+\n+\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME  VERSION  IMAGE  READY  PHASE\n+  ----  -------  -----  -----  -----\n+\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY   PHASE\n+  --------------------------------  -------  -----------------------  ------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Success!\n+\n+  ```\n+  {{% /expand%}}\n+\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-#### Optionally test the sample application\n+#### Invoke the web application\n \n-1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+Now that all the initial use case resources have been deployed, let's invoke the sample web application through the Traefik load balancer port. Note that the web application will report if it finds any data sources, but we don't expect it to find any because the model doesn't contain any at this point.\n \n-2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+Run one of the following commands:\n \n-   For Helm 3.x:\n+   ```\n+   curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```\n+Or, if Traefik is unavailable and your Administration Server pod is running, you can try `kubectl exec`:\n \n    ```\n-   cd $SRCDIR\n-   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n-    --namespace sample-domain1-ns \\\n-    --set wlsDomain.domainUID=sample-domain1 \\\n-    --set traefik.hostname=sample-domain1.org\n+   kubectl exec -n sample-domain1-ns sample-domain1-admin-server -- bash -c \\\n+     \"curl -s -S -m 10 http://sample-domain1-cluster-cluster-1:8001/myapp_war/index.jsp\"\n    ```\n \n-   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+You should see output like the following:\n \n-3. Send a web application request to the load balancer:\n+  {{%expand \"Click here to expand the expected web application output.\" %}}\n \n-   ```\n-   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n-   ```\n+  ```\n+  $ curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+    http://localhost:30305/myapp_war/index.jsp\n \n-   You should see something like the following:\n+  <html><body><pre>\n+  *****************************************************************\n+\n+  Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+  Welcome to WebLogic server 'managed-server2'!\n+\n+   domain UID  = 'sample-domain1'\n+   domain name = 'domain1'\n+\n+  Found 1 local cluster runtime:\n+    Cluster 'cluster-1'\n+\n+  Found 0 local data sources:\n+\n+  *****************************************************************\n+  </pre></body></html>\n+  ```\n+  {{% /expand%}}\n+\n+  **Note**: If you're running your `curl` commands on a remote machine, then substitute `localhost` with an external address suitable for contacting your Kubernetes cluster. A Kubernetes cluster address that often works can be obtained by using the address just after `https://` in the KubeDNS line of the output from the `kubectl cluster-info` command.\n+\n+  Got it? Please leave your domain up and running if you want to try the next use case.\n+\n+### Update1 use case\n+\n+This use case demonstrates dynamically adding a data source to your running domain. It demonstrates several advantages of WDT and the Image model:\n+\n+- The syntax used for updating a model is exactly the same syntax you use for creating the original model.\n+- A domain's model can be updated dynamically by supplying a model update in a file in a Kubernetes configmap.\n+- Model updates can be as simple as changing the value of a single attribute, or as ambitious as adding a JMS Server.\n+\n+For a detailed discussion of model updates, see [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user guide.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice warning %}}\n+The operator does not support all possible dynamic model updates. For model update limitations, consult [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user docs, and carefully test any model update, before attempting a dynamic update in production.\n+{{% /notice %}}\n+\n+Let's go through the steps:\n+\n+1. _Ensure you have a running domain._\n+\n+    Make sure you have deployed the domain from the [Initial use case](#initial-use-case).\n+\n+1. _Obtain a data source model YAML._\n+\n+    Find or create a WDT model snippet for a data source, make sure that its target is set to `cluster-1`, and that its initial capacity is set to `0`.\n+\n+   The reason for the latter is to prevent the data source from causing a WebLogic Server startup failure if it can't find the database, which would be likely to happen because we haven't deployed one (unless you're using the `JRF` path through the sample).\n+\n+   Here's a handy data source model configuration that meets these criteria:\n+\n+   {{%expand \"Click here to expand.\" %}}\n \n    ```\n-   Hello World, you have reached server managed-server1\n+   # Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+   # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+   resources:\n+     JDBCSystemResource:\n+       mynewdatasource:\n+         Target: 'cluster-1'\n+         JdbcResource:\n+           JDBCDataSourceParams:\n+             JNDIName: [\n+               jdbc/mydatasource1,\n+               jdbc/mydatasource2\n+             ]\n+             GlobalTransactionsProtocol: TwoPhaseCommit\n+           JDBCDriverParams:\n+             DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+             URL: '@@SECRET:@@ENV:DOMAIN_UID@@-datasource-secret:url@@'\n+             PasswordEncrypted: '@@SECRET:@@ENV:DOMAIN_UID@@-datasource-secret:password@@'\n+             Properties:\n+               user:\n+                 Value: 'sys as sysdba'\n+               oracle.net.CONNECT_TIMEOUT:\n+                 Value: 5000\n+               oracle.jdbc.ReadTimeout:\n+                 Value: 30000\n+           JDBCConnectionPoolParams:\n+               InitialCapacity: 0\n+               MaxCapacity: 1\n+               TestTableName: SQL ISVALID\n+               TestConnectionsOnReserve: true\n+\n    ```\n+   {{% /expand%}}\n+\n+   You can cut and paste the above model snippet to a file and then use it for your configmap, or alternatively, you can use the same data source that's already there for you in `/tmp/mii-domain/model-configmaps/model.20.datasource.yaml`.\n \n-   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+1. _Deploy the data source secret._\n \n-4. Send a ReadyApp request to the load balancer (ReadyApp is a built-in WebLogic Server application):\n+    The data source references a new secret that needs to be deployed.\n \n+   Run the following commands:\n+\n+   {{%expand \"Click here to expand.\" %}}\n    ```\n-   curl -v -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/weblogic/ready\n+   kubectl -n sample-domain1-ns delete secret \\\n+     sample-domain1-datasource-secret \\\n+     --ignore-not-found\n+   kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain1-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain1-datasource-secret \\\n+     weblogic.domainUID=sample-domain1\n    ```\n \n-   You should see something like the following:\n+   - About deleting and recreating the secret:\n+     - We delete a secret before creating, otherwise the create command will fail if the secret already exists.\n+     - This allows us to change the secret when using the `kubectl create secret` verb.\n \n+   - We name and label secrets using their associated domain UID for two reasons:\n+     - To make it obvious which secret belongs to which domains.\n+     - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all the resources associated with a domain.\n+\n+   {{% /expand%}}\n+\n+1. _Deploy the data source YAML._\n+\n+    We're ready to deploy the data source!\n+\n+   Run the following commands:\n+\n+   {{%expand \"Click here to expand.\" %}}\n \n    ```\n-   * About to connect() to myhost.my.dns.domain.name port 30305 (#0)\n-   *   Trying 100.111.142.32...\n-   * Connected to myhost.my.dns.domain.name (100.111.142.32) port 30305 (#0)\n-   > GET /weblogic/ready HTTP/1.1\n-   > User-Agent: curl/7.29.0\n-   > Accept: */*\n-   > host: sample-domain1.org\n-   >\n-   < HTTP/1.1 200 OK\n-   < Content-Length: 0\n-   < Date: Mon, 09 Mar 2020 20:40:37 GMT\n-   < Vary: Accept-Encoding\n-   <\n-   * Connection #0 to host myhost.my.dns.domain.name left intact\n+   kubectl -n sample-domain1-ns delete configmap sample-domain1-wdt-config-map --ignore-not-found\n+   kubectl -n sample-domain1-ns create configmap sample-domain1-wdt-config-map --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   kubectl -n sample-domain1-ns label  configmap sample-domain1-wdt-config-map weblogic.domainUID=sample-domain1\n    ```\n \n-   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+   - If you've created your own datasource file, then substitute the file name in the `--from-file=` parameter. \n+     - Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the configmap, or it can reference a directory, in which case it populates the configmap with all of the files in the designated directory.\n \n-#### Optionally access the WebLogic Server Administration Console\n+   - About deleting and recreating the configmap:\n+     - We delete a configmap before creating it, otherwise the create command will fail if the configmap already exists.\n+     - This allows us to change the configmap when using the `kubectl create configmap` verb.\n \n-{{% notice warning %}} This sample externally exposes the WebLogic Server Administration Console using a plain text HTTP port. This is _not_ secure and should not be done in production deployments.\n-{{% /notice %}}\n+   - We name and label configmap using their associated domain UID for two reasons:\n+     - To make it obvious which configmap belong to which domains.\n+     - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n \n-You can add an Ingress rule to access the WebLogic Server Administration Console from your local browser.\n+   {{% /expand%}}\n \n-1. Find out the service name of the Administration Server and service port number.\n+1. _Update your domain resource file to refer to the configmap and its secret, and apply it._\n \n-   The service name follows the pattern `domainuid-adminservername`, all lower case, with a hyphen `-` substituted for each underscore `_`.\n-   The port number for administration traffic is configured in your WebLogic configuration (your model files), where the default is `7001`.\n+      Do one the following:\n \n-   If your domain resource is deployed, then you can also find the information by getting the port number for the Administration Server pod:\n+      {{%expand \"Click here to expand.\" %}}\n+  - Option 1: Update your current domain resource file from the Initial use case.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 1726}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4MDM4Mw==", "bodyText": "done.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r421580383", "createdAt": "2020-05-07T15:09:08Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/model-in-image/_index.md", "diffHunk": "@@ -379,182 +1209,733 @@ If you run `kubectl get pods -n sample-domain1-ns --watch`, then you should see\n   sample-domain1-admin-server   0/1   ContainerCreating   0     0s\n   sample-domain1-admin-server   0/1   Running   0     1s\n   sample-domain1-admin-server   1/1   Running   0     32s\n-  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   Pending   0     0s\n-  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n+  sample-domain1-managed-server2   0/1   Pending   0     0s\n   sample-domain1-managed-server1   0/1   ContainerCreating   0     0s\n-  sample-domain1-managed-server2   0/1   Running   0     2s\n+  sample-domain1-managed-server2   0/1   ContainerCreating   0     0s\n   sample-domain1-managed-server1   0/1   Running   0     2s\n-  sample-domain1-managed-server2   1/1   Running   0     42s\n+  sample-domain1-managed-server2   0/1   Running   0     2s\n   sample-domain1-managed-server1   1/1   Running   0     43s\n+  sample-domain1-managed-server2   1/1   Running   0     42s\n+  ```\n+  {{% /expand%}}\n+\n+Alternatively, you can run `/tmp/mii-sample/utils/wl-pod-wait.sh -p 3`; this is a utility script that provides useful information about a domain's pods and waits for them to reach a `ready` state, reach their target `restartVersion`, and reach their target `image` before exiting.\n+\n+  {{%expand \"Click here to expand the `wl-pod-wait.sh` usage.\" %}}\n+  ```\n+  $ ./wl-pod-wait.sh -?\n+\n+    Usage:\n+\n+      wl-pod-wait.sh [-n mynamespace] [-d mydomainuid] \\\n+         [-p expected_pod_count] \\\n+         [-t timeout_secs] \\\n+         [-q]\n+\n+      Exits non-zero if 'timeout_secs' is reached before 'pod_count' is reached.\n+\n+    Parameters:\n+\n+      -d <domain_uid> : Defaults to 'sample-domain1'.\n+\n+      -n <namespace>  : Defaults to 'sample-domain1-ns'.\n+\n+      pod_count > 0   : Wait until exactly 'pod_count' WebLogic server pods for\n+                        a domain all (a) are ready, (b) have the same\n+                        'domainRestartVersion' label value as the\n+                        current domain resource's 'spec.restartVersion, and\n+                        (c) have the same image as the current domain\n+                        resource's image.\n+\n+      pod_count = 0   : Wait until there are no running WebLogic server pods\n+                        for a domain. The default.\n+\n+      -t <timeout>    : Timeout in seconds. Defaults to '600'.\n+\n+      -q              : Quiet mode. Show only a count of wl pods that\n+                        have reached the desired criteria.\n+\n+      -?              : This help.\n   ```\n+  {{% /expand%}}\n+\n+  {{%expand \"Click here to expand sample output from `wl-pod-wait.sh`.\" %}}\n+  ```\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Waiting up to 600 seconds for exactly '3' WebLogic server pods to reach the following criteria:\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   ready='true'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   image='model-in-image:WLS-v1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainRestartVersion='1'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   namespace='sample-domain1-ns'\n+  @@ [2020-04-30T13:50:42][seconds=0] Info:   domainUID='sample-domain1'\n+\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:42][seconds=0] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Pending'\n+\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:50:45][seconds=3] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                                          VERSION  IMAGE  READY  PHASE\n+  --------------------------------------------  -------  -----  -----  ---------\n+  'sample-domain1-introspect-domain-job-rkdkg'  ''       ''     ''     'Running'\n+\n+\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:50][seconds=68] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME  VERSION  IMAGE  READY  PHASE\n+  ----  -------  -----  -----  -----\n+\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:51:59][seconds=77] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: '0' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:02][seconds=80] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                           VERSION  IMAGE                    READY    PHASE\n+  -----------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:32][seconds=110] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Pending'\n+\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: '1' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:52:34][seconds=112] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY    PHASE\n+  --------------------------------  -------  -----------------------  -------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'   'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'false'  'Running'\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: '3' WebLogic pods currently match all criteria, expecting '3'.\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Introspector and WebLogic pods with same namespace and domain-uid:\n+\n+  NAME                              VERSION  IMAGE                    READY   PHASE\n+  --------------------------------  -------  -----------------------  ------  ---------\n+  'sample-domain1-admin-server'     '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server1'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+  'sample-domain1-managed-server2'  '1'      'model-in-image:WLS-v1'  'true'  'Running'\n+\n+\n+  @@ [2020-04-30T13:53:14][seconds=152] Info: Success!\n+\n+  ```\n+  {{% /expand%}}\n+\n \n If you see an error, then consult [Debugging]({{< relref \"/userguide/managing-domains/model-in-image/debugging.md\" >}}) in the Model in Image user guide.\n \n-#### Optionally test the sample application\n+#### Invoke the web application\n \n-1. Ensure Traefik has been installed and is servicing external port 30305, as per [Prerequisites for all domain types](#prerequisites-for-all-domain-types).\n+Now that all the initial use case resources have been deployed, let's invoke the sample web application through the Traefik load balancer port. Note that the web application will report if it finds any data sources, but we don't expect it to find any because the model doesn't contain any at this point.\n \n-2. Create a Kubernetes Ingress for the domain's WebLogic cluster in the domain's namespace by using the sample Helm chart:\n+Run one of the following commands:\n \n-   For Helm 3.x:\n+   ```\n+   curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+      http://localhost:30305/myapp_war/index.jsp\n+   ```\n+Or, if Traefik is unavailable and your Administration Server pod is running, you can try `kubectl exec`:\n \n    ```\n-   cd $SRCDIR\n-   helm install sample-domain1-ingress kubernetes/samples/charts/ingress-per-domain \\\n-    --namespace sample-domain1-ns \\\n-    --set wlsDomain.domainUID=sample-domain1 \\\n-    --set traefik.hostname=sample-domain1.org\n+   kubectl exec -n sample-domain1-ns sample-domain1-admin-server -- bash -c \\\n+     \"curl -s -S -m 10 http://sample-domain1-cluster-cluster-1:8001/myapp_war/index.jsp\"\n    ```\n \n-   This creates an Kubernetes Ingress that helps route HTTP traffic from the Traefik load balancer's external port 30305 to the WebLogic domain's `cluster-1` 8001 port. Note that the WDT config map in this sample changes the cluster's port from 9001 to 8001 (9001 is the original port configured using the WDT model defined within in the image).\n+You should see output like the following:\n \n-3. Send a web application request to the load balancer:\n+  {{%expand \"Click here to expand the expected web application output.\" %}}\n \n-   ```\n-   curl -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/sample_war/index.jsp\n-   ```\n+  ```\n+  $ curl -s -S -m 10 -H 'host: sample-domain1-cluster-cluster-1.mii-sample.org' \\\n+    http://localhost:30305/myapp_war/index.jsp\n \n-   You should see something like the following:\n+  <html><body><pre>\n+  *****************************************************************\n+\n+  Hello World! This is version 'v1' of the mii-sample JSP web-app.\n+\n+  Welcome to WebLogic server 'managed-server2'!\n+\n+   domain UID  = 'sample-domain1'\n+   domain name = 'domain1'\n+\n+  Found 1 local cluster runtime:\n+    Cluster 'cluster-1'\n+\n+  Found 0 local data sources:\n+\n+  *****************************************************************\n+  </pre></body></html>\n+  ```\n+  {{% /expand%}}\n+\n+  **Note**: If you're running your `curl` commands on a remote machine, then substitute `localhost` with an external address suitable for contacting your Kubernetes cluster. A Kubernetes cluster address that often works can be obtained by using the address just after `https://` in the KubeDNS line of the output from the `kubectl cluster-info` command.\n+\n+  Got it? Please leave your domain up and running if you want to try the next use case.\n+\n+### Update1 use case\n+\n+This use case demonstrates dynamically adding a data source to your running domain. It demonstrates several advantages of WDT and the Image model:\n+\n+- The syntax used for updating a model is exactly the same syntax you use for creating the original model.\n+- A domain's model can be updated dynamically by supplying a model update in a file in a Kubernetes configmap.\n+- Model updates can be as simple as changing the value of a single attribute, or as ambitious as adding a JMS Server.\n+\n+For a detailed discussion of model updates, see [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user guide.\n+\n+{{% notice note %}}\n+Perform the steps in [Prerequisites for all domain types](#prerequisites-for-all-domain-types) before performing the steps in this use case.\n+{{% /notice %}}\n+\n+{{% notice warning %}}\n+The operator does not support all possible dynamic model updates. For model update limitations, consult [Runtime Updates]({{< relref \"/userguide/managing-domains/model-in-image/runtime-updates.md\" >}}) in the Model in Image user docs, and carefully test any model update, before attempting a dynamic update in production.\n+{{% /notice %}}\n+\n+Let's go through the steps:\n+\n+1. _Ensure you have a running domain._\n+\n+    Make sure you have deployed the domain from the [Initial use case](#initial-use-case).\n+\n+1. _Obtain a data source model YAML._\n+\n+    Find or create a WDT model snippet for a data source, make sure that its target is set to `cluster-1`, and that its initial capacity is set to `0`.\n+\n+   The reason for the latter is to prevent the data source from causing a WebLogic Server startup failure if it can't find the database, which would be likely to happen because we haven't deployed one (unless you're using the `JRF` path through the sample).\n+\n+   Here's a handy data source model configuration that meets these criteria:\n+\n+   {{%expand \"Click here to expand.\" %}}\n \n    ```\n-   Hello World, you have reached server managed-server1\n+   # Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+   # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+   resources:\n+     JDBCSystemResource:\n+       mynewdatasource:\n+         Target: 'cluster-1'\n+         JdbcResource:\n+           JDBCDataSourceParams:\n+             JNDIName: [\n+               jdbc/mydatasource1,\n+               jdbc/mydatasource2\n+             ]\n+             GlobalTransactionsProtocol: TwoPhaseCommit\n+           JDBCDriverParams:\n+             DriverName: oracle.jdbc.xa.client.OracleXADataSource\n+             URL: '@@SECRET:@@ENV:DOMAIN_UID@@-datasource-secret:url@@'\n+             PasswordEncrypted: '@@SECRET:@@ENV:DOMAIN_UID@@-datasource-secret:password@@'\n+             Properties:\n+               user:\n+                 Value: 'sys as sysdba'\n+               oracle.net.CONNECT_TIMEOUT:\n+                 Value: 5000\n+               oracle.jdbc.ReadTimeout:\n+                 Value: 30000\n+           JDBCConnectionPoolParams:\n+               InitialCapacity: 0\n+               MaxCapacity: 1\n+               TestTableName: SQL ISVALID\n+               TestConnectionsOnReserve: true\n+\n    ```\n+   {{% /expand%}}\n+\n+   You can cut and paste the above model snippet to a file and then use it for your configmap, or alternatively, you can use the same data source that's already there for you in `/tmp/mii-domain/model-configmaps/model.20.datasource.yaml`.\n \n-   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+1. _Deploy the data source secret._\n \n-4. Send a ReadyApp request to the load balancer (ReadyApp is a built-in WebLogic Server application):\n+    The data source references a new secret that needs to be deployed.\n \n+   Run the following commands:\n+\n+   {{%expand \"Click here to expand.\" %}}\n    ```\n-   curl -v -H 'host: sample-domain1.org' http://$(hostname).$(dnsdomainname):30305/weblogic/ready\n+   kubectl -n sample-domain1-ns delete secret \\\n+     sample-domain1-datasource-secret \\\n+     --ignore-not-found\n+   kubectl -n sample-domain1-ns create secret generic \\\n+     sample-domain1-datasource-secret \\\n+      --from-literal=password=Oradoc_db1 --from-literal=url=jdbc:oracle:thin:@oracle-db.default.svc.cluster.local:1521/devpdb.k8s\n+   kubectl -n sample-domain1-ns label  secret \\\n+     sample-domain1-datasource-secret \\\n+     weblogic.domainUID=sample-domain1\n    ```\n \n-   You should see something like the following:\n+   - About deleting and recreating the secret:\n+     - We delete a secret before creating, otherwise the create command will fail if the secret already exists.\n+     - This allows us to change the secret when using the `kubectl create secret` verb.\n \n+   - We name and label secrets using their associated domain UID for two reasons:\n+     - To make it obvious which secret belongs to which domains.\n+     - To make it easier to clean up a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all the resources associated with a domain.\n+\n+   {{% /expand%}}\n+\n+1. _Deploy the data source YAML._\n+\n+    We're ready to deploy the data source!\n+\n+   Run the following commands:\n+\n+   {{%expand \"Click here to expand.\" %}}\n \n    ```\n-   * About to connect() to myhost.my.dns.domain.name port 30305 (#0)\n-   *   Trying 100.111.142.32...\n-   * Connected to myhost.my.dns.domain.name (100.111.142.32) port 30305 (#0)\n-   > GET /weblogic/ready HTTP/1.1\n-   > User-Agent: curl/7.29.0\n-   > Accept: */*\n-   > host: sample-domain1.org\n-   >\n-   < HTTP/1.1 200 OK\n-   < Content-Length: 0\n-   < Date: Mon, 09 Mar 2020 20:40:37 GMT\n-   < Vary: Accept-Encoding\n-   <\n-   * Connection #0 to host myhost.my.dns.domain.name left intact\n+   kubectl -n sample-domain1-ns delete configmap sample-domain1-wdt-config-map --ignore-not-found\n+   kubectl -n sample-domain1-ns create configmap sample-domain1-wdt-config-map --from-file=/tmp/mii-sample/model-configmaps/datasource\n+   kubectl -n sample-domain1-ns label  configmap sample-domain1-wdt-config-map weblogic.domainUID=sample-domain1\n    ```\n \n-   **Note**: If you're running on a remote Kubernetes cluster, then substitute `$(hostname).$(dnsdomainname)` with an external address suitable for contacting the cluster.\n+   - If you've created your own datasource file, then substitute the file name in the `--from-file=` parameter. \n+     - Note that the `-from-file=` parameter can reference a single file, in which case it puts the designated file in the configmap, or it can reference a directory, in which case it populates the configmap with all of the files in the designated directory.\n \n-#### Optionally access the WebLogic Server Administration Console\n+   - About deleting and recreating the configmap:\n+     - We delete a configmap before creating it, otherwise the create command will fail if the configmap already exists.\n+     - This allows us to change the configmap when using the `kubectl create configmap` verb.\n \n-{{% notice warning %}} This sample externally exposes the WebLogic Server Administration Console using a plain text HTTP port. This is _not_ secure and should not be done in production deployments.\n-{{% /notice %}}\n+   - We name and label configmap using their associated domain UID for two reasons:\n+     - To make it obvious which configmap belong to which domains.\n+     - To make it easier to cleanup a domain. Typical cleanup scripts use the `weblogic.domainUID` label as a convenience for finding all resources associated with a domain.\n \n-You can add an Ingress rule to access the WebLogic Server Administration Console from your local browser.\n+   {{% /expand%}}\n \n-1. Find out the service name of the Administration Server and service port number.\n+1. _Update your domain resource file to refer to the configmap and its secret, and apply it._\n \n-   The service name follows the pattern `domainuid-adminservername`, all lower case, with a hyphen `-` substituted for each underscore `_`.\n-   The port number for administration traffic is configured in your WebLogic configuration (your model files), where the default is `7001`.\n+      Do one the following:\n \n-   If your domain resource is deployed, then you can also find the information by getting the port number for the Administration Server pod:\n+      {{%expand \"Click here to expand.\" %}}\n+  - Option 1: Update your current domain resource file from the Initial use case.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyMzQ4OA=="}, "originalCommit": {"oid": "e9710cd01aee9efdb310021f5575256dc7278f3a"}, "originalPosition": 1726}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjM2MDUxOnYy", "diffSide": "RIGHT", "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzo1NTozNlrOGQ1CvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzo1NTozNlrOGQ1CvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5OTQ1Mg==", "bodyText": "same configuration - probably need to elaborate more >  e.g.  Same jdbc datasource URL is referenced by two different model files or the same property is referenced by two different properties files", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1588#discussion_r420299452", "createdAt": "2020-05-05T17:55:36Z", "author": {"login": "jshum2479"}, "path": "docs-source/content/userguide/managing-domains/model-in-image/model-files.md", "diffHunk": "@@ -86,11 +86,11 @@ Some notes about the sample model file:\n \n Refer to this section if you need to control the order in which your model files are loaded.  The order is important when two or more model files refer to the same configuration, because the last model that's loaded has the highest precedence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0974418b9ab37085435938ef717460182d76cd5"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4461, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}