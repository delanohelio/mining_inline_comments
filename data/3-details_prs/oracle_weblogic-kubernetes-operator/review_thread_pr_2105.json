{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzMzNTE4", "number": 2105, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxNzoxOVrOFG11aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToyMzo0NFrOFG6VCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzE3ODAwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxNzoxOVrOIIClsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo1MDozMFrOIIIRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMTkzNg==", "bodyText": "Comment can be removed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545301936", "createdAt": "2020-12-17T18:17:19Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -135,7 +139,7 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     labelMap.put(\"istio-injection\", \"enabled\");\n \n     assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n-    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+    // assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NTAwNQ==", "bodyText": "I should uncomment the statement. Istio should be enabled in Operator Namespace.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545395005", "createdAt": "2020-12-17T20:50:30Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -135,7 +139,7 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     labelMap.put(\"istio-injection\", \"enabled\");\n \n     assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n-    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+    // assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMTkzNg=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzIzMjI2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoyOTo0N1rOIIDFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyNzo1NlrOIIHiBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwOTk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch adminServer's serverStartPolicy to NEVER\");\n          \n          \n            \n                     \"Failed to patch adminServer's serverStartPolicy to NEVER\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545309994", "createdAt": "2020-12-17T18:29:47Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+    // Stop and Start the managed server in absense of administration server\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Can't patch adminServer's serverStartPolicy to NEVER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MjkxOQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545382919", "createdAt": "2020-12-17T20:27:56Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+    // Stop and Start the managed server in absense of administration server\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Can't patch adminServer's serverStartPolicy to NEVER\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwOTk5NA=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI0NTQwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMjo1MlrOIIDM3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyODowM1rOIIHiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch adminServer's serverStartPolicy to NEVER\");\n          \n          \n            \n                     \"Failed to patch adminServer's serverStartPolicy to NEVER\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545311966", "createdAt": "2020-12-17T18:32:52Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -245,7 +242,9 @@ public void testAdminServerRestart() {\n     DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n     DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n \n-    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"NEVER\");\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Can't patch adminServer's serverStartPolicy to NEVER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4Mjk3Mw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545382973", "createdAt": "2020-12-17T20:28:03Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -245,7 +242,9 @@ public void testAdminServerRestart() {\n     DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n     DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n \n-    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"NEVER\");\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Can't patch adminServer's serverStartPolicy to NEVER\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTk2Ng=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI0NjUxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMzowNlrOIIDNgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyODowOVrOIIHibQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch adminServer's serverStartPolicy to IF_NEEDED\");\n          \n          \n            \n                     \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545312129", "createdAt": "2020-12-17T18:33:06Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -271,7 +270,9 @@ public void testAdminServerRestart() {\n     assertTrue(result.contains(\"script doesn't support starting or stopping administration server\"),\n         \"The script shouldn't start the admin server\");\n \n-    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+         \"Can't patch adminServer's serverStartPolicy to IF_NEEDED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MzAyMQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545383021", "createdAt": "2020-12-17T20:28:09Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -271,7 +270,9 @@ public void testAdminServerRestart() {\n     assertTrue(result.contains(\"script doesn't support starting or stopping administration server\"),\n         \"The script shouldn't start the admin server\");\n \n-    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+         \"Can't patch adminServer's serverStartPolicy to IF_NEEDED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjEyOQ=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI0ODg0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMzo0NFrOIIDO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyODoxNVrOIIHipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjQ3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch domain's serverStartPolicy to ADMIN_ONLY\");\n          \n          \n            \n                     \"Failed to patch domain's serverStartPolicy to ADMIN_ONLY\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545312479", "createdAt": "2020-12-17T18:33:44Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER \n+    result =  assertDoesNotThrow(() ->\n+       executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, \"managed-server1\", \"\", false),\n+       String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(result.contains(\"Cannot start server\"),\n+        \"The script shouldn't start the managed server\");\n+    logger.info(\"Managed server instances can not be started while spec.serverStartPolicy is NEVER\");\n+    \n     // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n-    // Here only Admin server pod should come up\n-    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"ADMIN_ONLY\");\n+    // Here only Administration server pod should come up\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/serverStartPolicy\", \"ADMIN_ONLY\"),\n+         \"Can't patch domain's serverStartPolicy to ADMIN_ONLY\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MzA3Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545383077", "createdAt": "2020-12-17T20:28:15Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER \n+    result =  assertDoesNotThrow(() ->\n+       executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, \"managed-server1\", \"\", false),\n+       String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(result.contains(\"Cannot start server\"),\n+        \"The script shouldn't start the managed server\");\n+    logger.info(\"Managed server instances can not be started while spec.serverStartPolicy is NEVER\");\n+    \n     // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n-    // Here only Admin server pod should come up\n-    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"ADMIN_ONLY\");\n+    // Here only Administration server pod should come up\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/serverStartPolicy\", \"ADMIN_ONLY\"),\n+         \"Can't patch domain's serverStartPolicy to ADMIN_ONLY\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjQ3OQ=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI1Njk1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNTo1MFrOIIDTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDozMjoyOVrOIIHsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * server from scrtach if it has never been started eralier with\n          \n          \n            \n               * server from scratch if it has never been started earlier with", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545313730", "createdAt": "2020-12-17T18:35:50Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scrtach if it has never been started eralier with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4NTQ5Ng==", "bodyText": "resolved the typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545385496", "createdAt": "2020-12-17T20:32:29Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scrtach if it has never been started eralier with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzczMA=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI2NDEyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNzozMVrOIIDX9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDozMjozNlrOIIHsZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * replica count but the server startup is defered till we re-start the \n          \n          \n            \n               * replica count but the server startup is deferred till we re-start the", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545314807", "createdAt": "2020-12-17T18:37:31Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scrtach if it has never been started eralier with\n+   * administration Server. Once the administration server is stopped, the \n+   * managed server can only be started in MSI (managed server independence) \n+   * mode. To start a managed server in MSI mode, the pre-requisite is that the\n+   * managed server MUST be started once before administration server is \n+   * shutdown, so that the security configuration is replicated to the managed \n+   * server. In this case of MII and DomainInImage model, the server \n+   * state/configuration is lost once the server is shutdown unless we use \n+   * domain-on-pv model. So in MII case, startServer.sh script update the \n+   * replica count but the server startup is defered till we re-start the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4NTU3Mg==", "bodyText": "resolved the typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545385572", "createdAt": "2020-12-17T20:32:36Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scrtach if it has never been started eralier with\n+   * administration Server. Once the administration server is stopped, the \n+   * managed server can only be started in MSI (managed server independence) \n+   * mode. To start a managed server in MSI mode, the pre-requisite is that the\n+   * managed server MUST be started once before administration server is \n+   * shutdown, so that the security configuration is replicated to the managed \n+   * server. In this case of MII and DomainInImage model, the server \n+   * state/configuration is lost once the server is shutdown unless we use \n+   * domain-on-pv model. So in MII case, startServer.sh script update the \n+   * replica count but the server startup is defered till we re-start the ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDgwNw=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzMwMTQwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo0NjozMlrOIIDueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxNTowMFrOIIJE8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDU2OA==", "bodyText": "I assume domain's spec.serverStartPolicy  is NEVER. Probably comment can say that \"managed server instances can't be started while domain is stopped\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545320568", "createdAt": "2020-12-17T18:46:32Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NTI3NQ==", "bodyText": "Modified the comments.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545395275", "createdAt": "2020-12-17T20:51:00Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDU2OA=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwODI0Mw==", "bodyText": "update the use case description for the changes", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545408243", "createdAt": "2020-12-17T21:15:00Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDU2OA=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzMyNjc2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1MToyM1rOIID-FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo0MTo1NVrOIIH_jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNDU2NQ==", "bodyText": "Use constant STOP_DOMAIN_SCRIPT for \"stopDomain.sh\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545324565", "createdAt": "2020-12-17T18:51:23Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5MDQ3OQ==", "bodyText": "This is a string to be when the test  fails.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545390479", "createdAt": "2020-12-17T20:41:55Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNDU2NQ=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzM0NDM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1NToyMVrOIIEISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToxODowNFrOIIJK1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNzE3Ng==", "bodyText": "Replace with constant.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545327176", "createdAt": "2020-12-17T18:55:21Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -255,6 +259,10 @@ public void testIstioDomainHomeInPv() {\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\"))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverName(\"managed-server2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwOTc1MA==", "bodyText": "Managed Server need not be added, as I am doing scale down/up in the absence of Admin Server.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545409750", "createdAt": "2020-12-17T21:18:04Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -255,6 +259,10 @@ public void testIstioDomainHomeInPv() {\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\"))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverName(\"managed-server2\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNzE3Ng=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzg0NzQ5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTowNDoxNFrOIIIueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMjoyNDoxN1rOIILMTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMjQ5MA==", "bodyText": "update the use case description for this change", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545402490", "createdAt": "2020-12-17T21:04:14Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0Mjg5Mg==", "bodyText": "Added the following line to the test description\nAdditionally, the test verifies that WebLogic cluster can be scaled down and scaled up in the absence of Administration server.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545442892", "createdAt": "2020-12-17T22:24:17Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMjQ5MA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzg1NDc4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTowNjoxMlrOIIIysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDoyMDoxOFrOIIOKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMzU3MQ==", "bodyText": "Check CommonTestUtils for this method and call that.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545403571", "createdAt": "2020-12-17T21:06:12Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+    // Stop and Start the managed server in absense of administration server\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Failed to patch administrationi server serverStartPolicy to NEVER\");\n+    logger.info(\"Domain is patched to shutdown administration server\");\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Administration server shutdown success\");\n+\n+    boolean scalingSuccess = assertDoesNotThrow(() ->\n+        scaleCluster(domainUid, domainNamespace, \"cluster-1\", 1),\n+        String.format(\"Scaling down cluster cluster-1 of domain %s in namespace %s failed\",\n+        domainUid, domainNamespace));\n+    assertTrue(scalingSuccess,\n+        String.format(\"Cluster scaling failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+    logger.info(\"Cluster is scaled down in absense of administration server\");\n+    checkPodDeleted(managedServerPodNamePrefix + \"2\", domainUid, domainNamespace);\n+    logger.info(\"Managed Server stopped in absense of administration server\");\n+\n+    scalingSuccess = assertDoesNotThrow(() ->\n+        scaleCluster(domainUid, domainNamespace, \"cluster-1\", 2),\n+        String.format(\"Scaling up cluster cluster-1 of domain %s in namespace %s failed\",\n+        domainUid, domainNamespace));\n+    assertTrue(scalingSuccess,\n+        String.format(\"Cluster scaling failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+    logger.info(\"Cluster is scaled up in absense of administration server\");\n+    checkServiceExists(managedServerPodNamePrefix + \"2\", domainNamespace);\n+    checkPodReady(managedServerPodNamePrefix + \"2\", domainUid, domainNamespace);\n+    logger.info(\"Managed Server started in absense of administration server\");\n+  }\n+\n+  private void checkPodDeleted(String podName, String domainUid, String domNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5MTQ5Mg==", "bodyText": "updated tests to use CommonTestUtils .checkPodDeleted()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545491492", "createdAt": "2020-12-18T00:20:18Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+    // Stop and Start the managed server in absense of administration server\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Failed to patch administrationi server serverStartPolicy to NEVER\");\n+    logger.info(\"Domain is patched to shutdown administration server\");\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Administration server shutdown success\");\n+\n+    boolean scalingSuccess = assertDoesNotThrow(() ->\n+        scaleCluster(domainUid, domainNamespace, \"cluster-1\", 1),\n+        String.format(\"Scaling down cluster cluster-1 of domain %s in namespace %s failed\",\n+        domainUid, domainNamespace));\n+    assertTrue(scalingSuccess,\n+        String.format(\"Cluster scaling failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+    logger.info(\"Cluster is scaled down in absense of administration server\");\n+    checkPodDeleted(managedServerPodNamePrefix + \"2\", domainUid, domainNamespace);\n+    logger.info(\"Managed Server stopped in absense of administration server\");\n+\n+    scalingSuccess = assertDoesNotThrow(() ->\n+        scaleCluster(domainUid, domainNamespace, \"cluster-1\", 2),\n+        String.format(\"Scaling up cluster cluster-1 of domain %s in namespace %s failed\",\n+        domainUid, domainNamespace));\n+    assertTrue(scalingSuccess,\n+        String.format(\"Cluster scaling failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+    logger.info(\"Cluster is scaled up in absense of administration server\");\n+    checkServiceExists(managedServerPodNamePrefix + \"2\", domainNamespace);\n+    checkPodReady(managedServerPodNamePrefix + \"2\", domainUid, domainNamespace);\n+    logger.info(\"Managed Server started in absense of administration server\");\n+  }\n+\n+  private void checkPodDeleted(String podName, String domainUid, String domNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMzU3MQ=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzkxMzUyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToyMzoyN1rOIIJU1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoxMTo0MVrOIIMk2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjMwOA==", "bodyText": "you have the same code both inside try and in finally blocks, keep it at one place(finally).", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545412308", "createdAt": "2020-12-17T21:23:27Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -916,17 +956,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n       logger.info(\"Server[\" + serverName + \"] pod is initialized\");\n \n       // (re)Start Start the admin\n-      patchServerStartPolicy(\n-             \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+            \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+             \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");\n       checkPodReadyAndServiceExists(\n              adminServerPodName, domainUid, domainNamespace);\n-      logger.info(\"AdminServer restart success\");\n+      logger.info(\"administration server restart success\");\n \n       checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n       logger.info(\"(re)Started [\" + serverName + \"] on admin server restart\");\n     } finally {\n       // restart admin server\n-      patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0NzcwNA==", "bodyText": "The code inside the try/catch block is part of test, which verifies that the managed server get started once the admin server is (re) started. The finally block is for if the test fails for any other reason before reaching the above scenario.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545447704", "createdAt": "2020-12-17T22:34:35Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -916,17 +956,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n       logger.info(\"Server[\" + serverName + \"] pod is initialized\");\n \n       // (re)Start Start the admin\n-      patchServerStartPolicy(\n-             \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+            \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+             \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");\n       checkPodReadyAndServiceExists(\n              adminServerPodName, domainUid, domainNamespace);\n-      logger.info(\"AdminServer restart success\");\n+      logger.info(\"administration server restart success\");\n \n       checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n       logger.info(\"(re)Started [\" + serverName + \"] on admin server restart\");\n     } finally {\n       // restart admin server\n-      patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjMwOA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1ODI2Mg==", "bodyText": "finally block gets executed in all cases, you can just keep the code in finally. No need to keep the code in both try and finally.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545458262", "createdAt": "2020-12-17T22:57:06Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -916,17 +956,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n       logger.info(\"Server[\" + serverName + \"] pod is initialized\");\n \n       // (re)Start Start the admin\n-      patchServerStartPolicy(\n-             \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+            \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+             \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");\n       checkPodReadyAndServiceExists(\n              adminServerPodName, domainUid, domainNamespace);\n-      logger.info(\"AdminServer restart success\");\n+      logger.info(\"administration server restart success\");\n \n       checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n       logger.info(\"(re)Started [\" + serverName + \"] on admin server restart\");\n     } finally {\n       // restart admin server\n-      patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjMwOA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2NTU2MQ==", "bodyText": "I know. I want to start the stop/start the admin server in my test. The admin server start in finally block is void if the test pass.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545465561", "createdAt": "2020-12-17T23:11:41Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -916,17 +956,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n       logger.info(\"Server[\" + serverName + \"] pod is initialized\");\n \n       // (re)Start Start the admin\n-      patchServerStartPolicy(\n-             \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+            \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+             \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");\n       checkPodReadyAndServiceExists(\n              adminServerPodName, domainUid, domainNamespace);\n-      logger.info(\"AdminServer restart success\");\n+      logger.info(\"administration server restart success\");\n \n       checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n       logger.info(\"(re)Started [\" + serverName + \"] on admin server restart\");\n     } finally {\n       // restart admin server\n-      patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjMwOA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzkxNDM1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToyMzo0NFrOIIJVWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzoxMzo0OVrOIIMoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * server from scratch if it has never been started eralier with\n          \n          \n            \n               * server from scratch if it has never been started earlier with", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545412440", "createdAt": "2020-12-17T21:23:44Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxNDgyMA==", "bodyText": "what is the difference between testDynamicServerLifeCycleWithoutAdmin and testConfiguredServerLifeCycleWithoutAdmin? is it just the cluster type?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545414820", "createdAt": "2020-12-17T21:28:31Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0NDY3MA==", "bodyText": "yes. You are right", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545444670", "createdAt": "2020-12-17T22:27:58Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1OTQ0OA==", "bodyText": "Is there any reason for testing the same use case for both dynamic cluster and configured cluster? I don't think there is any difference in behavior based on cluster type.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545459448", "createdAt": "2020-12-17T22:59:51Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2NjQ1Nw==", "bodyText": "Yes, we need coverage on both configured and dynamic cluster as far as server lifecycle is concerned.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545466457", "createdAt": "2020-12-17T23:13:49Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3828, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}