{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzUyMjU3", "number": 1541, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozODozNlrODvPDYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozODozNlrODvPDYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU2MjkxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozODozNlrOGBivXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMDoxMFrOGBjjHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDk0Mw==", "bodyText": "please make sure the assertions have failure messages", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1541#discussion_r404270943", "createdAt": "2020-04-06T17:38:36Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -3,37 +3,44 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n+import java.io.IOException;\n import java.util.concurrent.Callable;\n \n import io.kubernetes.client.openapi.ApiException;\n-import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.Configuration;\n import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n-import io.kubernetes.client.openapi.apis.ApisApi;\n import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+import io.kubernetes.client.util.ClientBuilder;\n \n import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class Domain {\n \n-  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n-  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n-  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n-  private static ApisApi apisApi = new ApisApi();\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n+  }\n \n+  private static final CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static final ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n \n   /**\n    * Check if the Domain CRD exists\n+   *\n    * @return true if domains.weblogic.oracle CRD exists otherwise false\n    * @throws ApiException when Domain CRD doesn't exist\n    */\n   public static boolean doesCRDExist() throws ApiException {\n     try {\n-      V1beta1CustomResourceDefinition domainBetaCrd =\n-          apiextensionsV1beta1Api.readCustomResourceDefinition(\n-              \"domains.weblogic.oracle\", null, null, null);\n+      V1beta1CustomResourceDefinition domainBetaCrd\n+          = apiextensionsV1beta1Api.readCustomResourceDefinition(\n+          \"domains.weblogic.oracle\", null, null, null);\n       assertNotNull(domainBetaCrd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a121be2bdd3f3dc80631715bc641c20e02432c73"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjIxMA==", "bodyText": "Shall I wait to merge?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1541#discussion_r404282210", "createdAt": "2020-04-06T17:57:02Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -3,37 +3,44 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n+import java.io.IOException;\n import java.util.concurrent.Callable;\n \n import io.kubernetes.client.openapi.ApiException;\n-import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.Configuration;\n import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n-import io.kubernetes.client.openapi.apis.ApisApi;\n import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+import io.kubernetes.client.util.ClientBuilder;\n \n import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class Domain {\n \n-  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n-  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n-  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n-  private static ApisApi apisApi = new ApisApi();\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n+  }\n \n+  private static final CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static final ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n \n   /**\n    * Check if the Domain CRD exists\n+   *\n    * @return true if domains.weblogic.oracle CRD exists otherwise false\n    * @throws ApiException when Domain CRD doesn't exist\n    */\n   public static boolean doesCRDExist() throws ApiException {\n     try {\n-      V1beta1CustomResourceDefinition domainBetaCrd =\n-          apiextensionsV1beta1Api.readCustomResourceDefinition(\n-              \"domains.weblogic.oracle\", null, null, null);\n+      V1beta1CustomResourceDefinition domainBetaCrd\n+          = apiextensionsV1beta1Api.readCustomResourceDefinition(\n+          \"domains.weblogic.oracle\", null, null, null);\n       assertNotNull(domainBetaCrd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDk0Mw=="}, "originalCommit": {"oid": "a121be2bdd3f3dc80631715bc641c20e02432c73"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NDE4OQ==", "bodyText": "Fixed it. Please go ahead and merge it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1541#discussion_r404284189", "createdAt": "2020-04-06T18:00:10Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -3,37 +3,44 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n+import java.io.IOException;\n import java.util.concurrent.Callable;\n \n import io.kubernetes.client.openapi.ApiException;\n-import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.Configuration;\n import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n-import io.kubernetes.client.openapi.apis.ApisApi;\n import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+import io.kubernetes.client.util.ClientBuilder;\n \n import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class Domain {\n \n-  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n-  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n-  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n-  private static ApisApi apisApi = new ApisApi();\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n+  }\n \n+  private static final CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static final ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n \n   /**\n    * Check if the Domain CRD exists\n+   *\n    * @return true if domains.weblogic.oracle CRD exists otherwise false\n    * @throws ApiException when Domain CRD doesn't exist\n    */\n   public static boolean doesCRDExist() throws ApiException {\n     try {\n-      V1beta1CustomResourceDefinition domainBetaCrd =\n-          apiextensionsV1beta1Api.readCustomResourceDefinition(\n-              \"domains.weblogic.oracle\", null, null, null);\n+      V1beta1CustomResourceDefinition domainBetaCrd\n+          = apiextensionsV1beta1Api.readCustomResourceDefinition(\n+          \"domains.weblogic.oracle\", null, null, null);\n       assertNotNull(domainBetaCrd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MDk0Mw=="}, "originalCommit": {"oid": "a121be2bdd3f3dc80631715bc641c20e02432c73"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4744, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}