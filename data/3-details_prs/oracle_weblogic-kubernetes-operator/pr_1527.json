{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzQ3NzUw", "number": 1527, "title": "Implemented the pod and service check assertions", "bodyText": "Added assertion implementation for domain pods and services", "createdAt": "2020-04-02T18:31:49Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527", "merged": true, "mergeCommit": {"oid": "8e829f50b0a58963b40fbbc8ef77d702bf3c874f"}, "closed": true, "closedAt": "2020-04-03T20:19:43Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTHrgdAH2gAyMzk3NzQ3NzUwOjg1MTI5NjRkZjhiMTMxNTk1M2I4MTgwZjQ4ZWQzYjVlYzRhMzU4Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUGSV9AFqTM4NzUzNDEyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8512964df8b1315953b8180f48ed3b5ec4a35877", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8512964df8b1315953b8180f48ed3b5ec4a35877", "committedDate": "2020-03-31T18:47:30Z", "message": "working on the pod status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1d77545941855f6d6e4260b02901f88ab9a7b4f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c1d77545941855f6d6e4260b02901f88ab9a7b4f", "committedDate": "2020-03-31T18:54:26Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77e57bfc2165f9b555b337fd47b9b1a16d58f767", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/77e57bfc2165f9b555b337fd47b9b1a16d58f767", "committedDate": "2020-03-31T19:23:16Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7d45187f2ed01d85c594b024ba6e512f1c185c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1e7d45187f2ed01d85c594b024ba6e512f1c185c", "committedDate": "2020-03-31T21:33:13Z", "message": "implement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed2af97f2af984a9decd6e91a1ae1407e2fea653", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ed2af97f2af984a9decd6e91a1ae1407e2fea653", "committedDate": "2020-04-01T17:03:52Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eaf45badf99a9872bc44ffe223c7209ed7dea78", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2eaf45badf99a9872bc44ffe223c7209ed7dea78", "committedDate": "2020-04-01T17:55:46Z", "message": "add serviceCreated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f48010bf7e12b5a2a2380fe1bbdd2fcaabcf02", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/07f48010bf7e12b5a2a2380fe1bbdd2fcaabcf02", "committedDate": "2020-04-01T17:59:00Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9b97f248c3ca49e9d2cb7b22ffcc899b5f12a2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9c9b97f248c3ca49e9d2cb7b22ffcc899b5f12a2", "committedDate": "2020-04-02T05:39:50Z", "message": "implemented service level assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d157f2127ec5a4021c60686c0ea867be233ca086", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d157f2127ec5a4021c60686c0ea867be233ca086", "committedDate": "2020-04-02T05:54:59Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "603cc19a5145fef1c5a2895fcf39ddd164ed758f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/603cc19a5145fef1c5a2895fcf39ddd164ed758f", "committedDate": "2020-04-02T16:52:42Z", "message": "adding domain related assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcbebee3544401958eaf9fb7b149a67369695e03", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bcbebee3544401958eaf9fb7b149a67369695e03", "committedDate": "2020-04-02T17:02:41Z", "message": "add domain related assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cdf4362deff24af2e963403c20fa8b2b0766da2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2cdf4362deff24af2e963403c20fa8b2b0766da2", "committedDate": "2020-04-02T17:44:41Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8fb2c493809b71a6c71c7d5f27989ed556dccce", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e8fb2c493809b71a6c71c7d5f27989ed556dccce", "committedDate": "2020-04-02T17:53:20Z", "message": "reverting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ea1c268661c702159e0f18550e25661390cbc3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/78ea1c268661c702159e0f18550e25661390cbc3", "committedDate": "2020-04-02T17:53:48Z", "message": "Merge branch 'mii-new-integration-tests' into sankar-junit5-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/46b79449efedaefca03b93f7514f88b9f8b6e2c6", "committedDate": "2020-04-02T18:29:11Z", "message": "Added javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzMyODA3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#pullrequestreview-386732807", "createdAt": "2020-04-02T19:30:32Z", "commit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozMDozMlrOF_6V2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozMDozMlrOF_6V2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDQ3Mg==", "bodyText": "Let's discuss in the meeting.  It seems that these assertions are insufficient (I know that they model exactly what was in the previous tests).  Just checking that the pod exists, is ready, or is terminating leaves off lots of possible errors.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r402560472", "createdAt": "2020-04-02T19:30:32Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -25,57 +28,84 @@\n \n   /**\n    * Check if operator Rest service is running.\n+   *\n    * @param namespace the operator rest service exists\n    * @return true if rest service is running otherwise false\n    */\n-  public static boolean operatorRestServiceRunning(String namespace) {\n-    return Operator.isRestServiceCreated(namespace);\n+  public static Callable<Boolean> operatorRestServiceRunning(String namespace) throws ApiException {\n+    return () -> {\n+      return Operator.isExternalRestServiceCreated(namespace);\n+    };\n   }\n \n   /**\n-   * Check if a WebLogic custom resource domain exists in specified namespace and all its pods are running.\n+   * Check if a WebLogic custom resource domain object exists in specified\n+   * namespace.\n+   *\n    * @param domainUID ID of the domain\n-   * @param namespace in which the domain custom resource exists\n-   * @return true if domain exists and pods running otherwise false\n+   * @param namespace in which the domain custom resource object exists\n+   * @return true if domain object exists\n    */\n   public static Callable<Boolean> domainExists(String domainUID, String namespace) {\n     return Domain.exists(domainUID, namespace);\n   }\n \n+  /**\n+   * Check if a Kubernetes pod exists in any state.\n+   *\n+   * @param podName name of the pod to check for\n+   * @param domainUID WebLogic domain uid in which the pod belongs\n+   * @param namespace in which the pod exists\n+   * @return true if the pod exists in the namespace otherwise false\n+   */\n+  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzMzMzQw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#pullrequestreview-386733340", "createdAt": "2020-04-02T19:31:21Z", "commit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozMToyMlrOF_6Xag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozMToyMlrOF_6Xag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDg3NA==", "bodyText": "HashMap -> Map<String, String>", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r402560874", "createdAt": "2020-04-02T19:31:22Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -25,57 +28,84 @@\n \n   /**\n    * Check if operator Rest service is running.\n+   *\n    * @param namespace the operator rest service exists\n    * @return true if rest service is running otherwise false\n    */\n-  public static boolean operatorRestServiceRunning(String namespace) {\n-    return Operator.isRestServiceCreated(namespace);\n+  public static Callable<Boolean> operatorRestServiceRunning(String namespace) throws ApiException {\n+    return () -> {\n+      return Operator.isExternalRestServiceCreated(namespace);\n+    };\n   }\n \n   /**\n-   * Check if a WebLogic custom resource domain exists in specified namespace and all its pods are running.\n+   * Check if a WebLogic custom resource domain object exists in specified\n+   * namespace.\n+   *\n    * @param domainUID ID of the domain\n-   * @param namespace in which the domain custom resource exists\n-   * @return true if domain exists and pods running otherwise false\n+   * @param namespace in which the domain custom resource object exists\n+   * @return true if domain object exists\n    */\n   public static Callable<Boolean> domainExists(String domainUID, String namespace) {\n     return Domain.exists(domainUID, namespace);\n   }\n \n+  /**\n+   * Check if a Kubernetes pod exists in any state.\n+   *\n+   * @param podName name of the pod to check for\n+   * @param domainUID WebLogic domain uid in which the pod belongs\n+   * @param namespace in which the pod exists\n+   * @return true if the pod exists in the namespace otherwise false\n+   */\n+  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) throws ApiException {\n+    return () -> {\n+      return Kubernetes.isPodExists(namespace, domainUID, podName);\n+    };\n+  }\n+\n   /**\n    * Check if a Kubernetes pod is in running/ready state.\n+   *\n    * @param podName name of the pod to check for\n    * @param domainUID WebLogic domain uid in which the pod belongs\n    * @param namespace in which the pod is running\n    * @return true if the pod is running otherwise false\n    */\n-  public static Callable<Boolean> podReady(String podName, String domainUID, String namespace) {\n-    return Kubernetes.podRunning(podName, domainUID, namespace);\n+  public static Callable<Boolean> podReady(String podName, String domainUID, String namespace) throws ApiException {\n+    return () -> {\n+      return Kubernetes.isPodRunning(namespace, domainUID, podName);\n+    };\n   }\n \n   /**\n    * Check if a pod given by the podName is in Terminating state.\n+   *\n    * @param podName name of the pod to check for Terminating status\n    * @param domainUID WebLogic domain uid in which the pod belongs\n    * @param namespace in which the pod is running\n    * @return true if the pod is terminating otherwise false\n    */\n   public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return Kubernetes.podTerminating(podName, domainUID, namespace);\n+    return () -> {\n+      return Kubernetes.isPodTerminating(namespace, domainUID, podName);\n+    };\n   }\n \n   /**\n    * Check is a service exists in given namespace.\n-   * @param serviceName  the name of the service to check for\n+   *\n+   * @param serviceName the name of the service to check for\n    * @param namespace in which the service is running\n    * @return true if the service exists otherwise false\n    */\n-  public static boolean serviceReady(String serviceName, String namespace) {\n-    return Kubernetes.serviceCreated(serviceName, namespace);\n+  public static boolean serviceReady(String serviceName, HashMap label, String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjQ5ODI5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#pullrequestreview-387249829", "createdAt": "2020-04-03T13:22:34Z", "commit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyMjozNFrOGAVOOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyOTowNFrOGAVfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMDg4OA==", "bodyText": "doesCRDExist", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403000888", "createdAt": "2020-04-03T13:22:34Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -5,17 +5,61 @@\n \n import java.util.concurrent.Callable;\n \n-public class Domain {\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n+import io.kubernetes.client.openapi.apis.ApisApi;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class Domain implements LoggedTest {\n+\n+  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n+  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n+  private static ApisApi apisApi = new ApisApi();\n+\n+\n+  /**\n+   * Check if the Domain CRD exists\n+   * @return true if domains.weblogic.oracle CRD exists otherwise false\n+   * @throws Exception\n+   */\n+  public static boolean isCRDExists() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMTQzMA==", "bodyText": "the message is unclear - it reads like you are saying that the CRD that you expected to exist DOES exist", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403001430", "createdAt": "2020-04-03T13:23:21Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -5,17 +5,61 @@\n \n import java.util.concurrent.Callable;\n \n-public class Domain {\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n+import io.kubernetes.client.openapi.apis.ApisApi;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class Domain implements LoggedTest {\n+\n+  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n+  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n+  private static ApisApi apisApi = new ApisApi();\n+\n+\n+  /**\n+   * Check if the Domain CRD exists\n+   * @return true if domains.weblogic.oracle CRD exists otherwise false\n+   * @throws Exception\n+   */\n+  public static boolean isCRDExists() throws Exception {\n+    try {\n+      V1beta1CustomResourceDefinition domainBetaCrd =\n+          apiextensionsV1beta1Api.readCustomResourceDefinition(\n+              \"domains.weblogic.oracle\", null, null, null);\n+      assertNotNull(domainBetaCrd);\n+      logger.info(\"domainBetaCrd is not null\");\n+      return true;\n+    } catch (ApiException aex) {\n+      if (aex.getCode() == 404) {\n+        assertTrue(false, \"Expected CRD domains.weblogic.oracle existed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMTY2Mg==", "bodyText": "is v2 right??", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403001662", "createdAt": "2020-04-03T13:23:40Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -5,17 +5,61 @@\n \n import java.util.concurrent.Callable;\n \n-public class Domain {\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n+import io.kubernetes.client.openapi.apis.ApisApi;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class Domain implements LoggedTest {\n+\n+  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n+  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n+  private static ApisApi apisApi = new ApisApi();\n+\n+\n+  /**\n+   * Check if the Domain CRD exists\n+   * @return true if domains.weblogic.oracle CRD exists otherwise false\n+   * @throws Exception\n+   */\n+  public static boolean isCRDExists() throws Exception {\n+    try {\n+      V1beta1CustomResourceDefinition domainBetaCrd =\n+          apiextensionsV1beta1Api.readCustomResourceDefinition(\n+              \"domains.weblogic.oracle\", null, null, null);\n+      assertNotNull(domainBetaCrd);\n+      logger.info(\"domainBetaCrd is not null\");\n+      return true;\n+    } catch (ApiException aex) {\n+      if (aex.getCode() == 404) {\n+        assertTrue(false, \"Expected CRD domains.weblogic.oracle existed.\");\n+      } else {\n+        throw aex;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if weblogic.oracle CRD domain object exists.\n+   * @param domainUID domain UID of the domain object\n+   * @param namespace in which the domain object exists\n+   * @return true if domain object exists otherwise false\n+   */\n   public static Callable<Boolean> exists(String domainUID, String namespace) {\n     return () -> {\n-      String[] pods = {};\n-      for (String pod : pods) {\n-        if (!Kubernetes.podRunning(pod, domainUID, namespace).call().booleanValue()) {\n-          return false;\n-        }\n-      }\n-      return true;\n+      Object domainObject =\n+          customObjectsApi.getNamespacedCustomObject(\n+              \"weblogic.oracle\", \"v2\", namespace, \"domains\", domainUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMjA4OQ==", "bodyText": "dosPodExist", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403002089", "createdAt": "2020-04-03T13:24:14Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMjk4Mw==", "bodyText": "this is too magical. what does this mean?\ndo your comparison and assign the value to a well-named variable, then return the var", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403002983", "createdAt": "2020-04-03T13:25:36Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMzQyNw==", "bodyText": "put comments after each value to explain what they are", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403003427", "createdAt": "2020-04-03T13:26:21Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMzY1MQ==", "bodyText": "wasServiceCreated or doesServiceExist", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403003651", "createdAt": "2020-04-03T13:26:41Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelector,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    for (V1Pod item : v1PodList.getItems()) {\n+      if (item.getMetadata().getName().startsWith(podName.trim())) {\n+        logger.info(\"Pod Name :\" + item.getMetadata().getName());\n+        logger.info(\"Pod Namespace :\" + item.getMetadata().getNamespace());\n+        logger.info(\"Pod UID :\" + item.getMetadata().getUid());\n+        logger.info(\"Pod Status :\" + item.getStatus().getPhase());\n+        return item;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if a Kubernetes service object exists in a given namespace.\n+   * @param serviceName name of the service to check for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return true if the service is found otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isServiceCreated(String serviceName, HashMap label, String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMzgxNw==", "bodyText": "explain params", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403003817", "createdAt": "2020-04-03T13:26:55Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelector,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    for (V1Pod item : v1PodList.getItems()) {\n+      if (item.getMetadata().getName().startsWith(podName.trim())) {\n+        logger.info(\"Pod Name :\" + item.getMetadata().getName());\n+        logger.info(\"Pod Namespace :\" + item.getMetadata().getNamespace());\n+        logger.info(\"Pod UID :\" + item.getMetadata().getUid());\n+        logger.info(\"Pod Status :\" + item.getStatus().getPhase());\n+        return item;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if a Kubernetes service object exists in a given namespace.\n+   * @param serviceName name of the service to check for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return true if the service is found otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isServiceCreated(String serviceName, HashMap label, String namespace) throws ApiException {\n+    return getService(serviceName, label, namespace) != null;\n+  }\n+\n+  /**\n+   * Get V1Service object for the given servicename, label and namespace\n+   * @param serviceName name of the service to look for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return V1Service object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Service getService(String serviceName, HashMap label, String namespace) throws ApiException {\n+    String labelSelector = null;\n+    if (label != null) {\n+      String key = label.keySet().iterator().next().toString();\n+      String value = label.get(key).toString();\n+      labelSelector = String.format(\"%s in (%s)\", key, value);\n+      logger.info(labelSelector);\n+    }\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDA2MQ==", "bodyText": "put space after colon", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403004061", "createdAt": "2020-04-03T13:27:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelector,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    for (V1Pod item : v1PodList.getItems()) {\n+      if (item.getMetadata().getName().startsWith(podName.trim())) {\n+        logger.info(\"Pod Name :\" + item.getMetadata().getName());\n+        logger.info(\"Pod Namespace :\" + item.getMetadata().getNamespace());\n+        logger.info(\"Pod UID :\" + item.getMetadata().getUid());\n+        logger.info(\"Pod Status :\" + item.getStatus().getPhase());\n+        return item;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if a Kubernetes service object exists in a given namespace.\n+   * @param serviceName name of the service to check for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return true if the service is found otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isServiceCreated(String serviceName, HashMap label, String namespace) throws ApiException {\n+    return getService(serviceName, label, namespace) != null;\n+  }\n+\n+  /**\n+   * Get V1Service object for the given servicename, label and namespace\n+   * @param serviceName name of the service to look for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return V1Service object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Service getService(String serviceName, HashMap label, String namespace) throws ApiException {\n+    String labelSelector = null;\n+    if (label != null) {\n+      String key = label.keySet().iterator().next().toString();\n+      String value = label.get(key).toString();\n+      labelSelector = String.format(\"%s in (%s)\", key, value);\n+      logger.info(labelSelector);\n+    }\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,\n+        null,\n+        labelSelector,\n+        null,\n+        Boolean.FALSE.toString(),\n+        null,\n+        null,\n+        Boolean.FALSE);\n+    for (V1Service service : v1ServiceList.getItems()) {\n+      if (service.getMetadata().getName().equals(serviceName.trim())\n+          && service.getMetadata().getNamespace().equals(namespace.trim())) {\n+        logger.info(\"Service Name :\" + service.getMetadata().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUyNg==", "bodyText": "explain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403004526", "createdAt": "2020-04-03T13:27:57Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelector,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    for (V1Pod item : v1PodList.getItems()) {\n+      if (item.getMetadata().getName().startsWith(podName.trim())) {\n+        logger.info(\"Pod Name :\" + item.getMetadata().getName());\n+        logger.info(\"Pod Namespace :\" + item.getMetadata().getNamespace());\n+        logger.info(\"Pod UID :\" + item.getMetadata().getUid());\n+        logger.info(\"Pod Status :\" + item.getStatus().getPhase());\n+        return item;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if a Kubernetes service object exists in a given namespace.\n+   * @param serviceName name of the service to check for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return true if the service is found otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isServiceCreated(String serviceName, HashMap label, String namespace) throws ApiException {\n+    return getService(serviceName, label, namespace) != null;\n+  }\n+\n+  /**\n+   * Get V1Service object for the given servicename, label and namespace\n+   * @param serviceName name of the service to look for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return V1Service object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Service getService(String serviceName, HashMap label, String namespace) throws ApiException {\n+    String labelSelector = null;\n+    if (label != null) {\n+      String key = label.keySet().iterator().next().toString();\n+      String value = label.get(key).toString();\n+      labelSelector = String.format(\"%s in (%s)\", key, value);\n+      logger.info(labelSelector);\n+    }\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,\n+        null,\n+        labelSelector,\n+        null,\n+        Boolean.FALSE.toString(),\n+        null,\n+        null,\n+        Boolean.FALSE);\n+    for (V1Service service : v1ServiceList.getItems()) {\n+      if (service.getMetadata().getName().equals(serviceName.trim())\n+          && service.getMetadata().getNamespace().equals(namespace.trim())) {\n+        logger.info(\"Service Name :\" + service.getMetadata().getName());\n+        logger.info(\"Service Namespace :\" + service.getMetadata().getNamespace());\n+        Map<String, String> labels = service.getMetadata().getLabels();\n+        if (labels != null) {\n+          for (Map.Entry<String, String> entry : labels.entrySet()) {\n+            logger.log(Level.INFO, \"Label Key: {0} Label Value: {1}\",\n+                new Object[]{entry.getKey(), entry.getValue()});\n+          }\n+        }\n+        return service;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * A utility method to list all pods in given namespace and a label\n+   * This method can be used as diagnostic tool to get the details of pods.\n+   * @param namespace in which to list all pods\n+   * @param labelSelectors with which the pods are decorated\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static void listPods(String namespace, String labelSelectors) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDU5Nw==", "bodyText": "explain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403004597", "createdAt": "2020-04-03T13:28:03Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelector,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    for (V1Pod item : v1PodList.getItems()) {\n+      if (item.getMetadata().getName().startsWith(podName.trim())) {\n+        logger.info(\"Pod Name :\" + item.getMetadata().getName());\n+        logger.info(\"Pod Namespace :\" + item.getMetadata().getNamespace());\n+        logger.info(\"Pod UID :\" + item.getMetadata().getUid());\n+        logger.info(\"Pod Status :\" + item.getStatus().getPhase());\n+        return item;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if a Kubernetes service object exists in a given namespace.\n+   * @param serviceName name of the service to check for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return true if the service is found otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isServiceCreated(String serviceName, HashMap label, String namespace) throws ApiException {\n+    return getService(serviceName, label, namespace) != null;\n+  }\n+\n+  /**\n+   * Get V1Service object for the given servicename, label and namespace\n+   * @param serviceName name of the service to look for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return V1Service object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Service getService(String serviceName, HashMap label, String namespace) throws ApiException {\n+    String labelSelector = null;\n+    if (label != null) {\n+      String key = label.keySet().iterator().next().toString();\n+      String value = label.get(key).toString();\n+      labelSelector = String.format(\"%s in (%s)\", key, value);\n+      logger.info(labelSelector);\n+    }\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,\n+        null,\n+        labelSelector,\n+        null,\n+        Boolean.FALSE.toString(),\n+        null,\n+        null,\n+        Boolean.FALSE);\n+    for (V1Service service : v1ServiceList.getItems()) {\n+      if (service.getMetadata().getName().equals(serviceName.trim())\n+          && service.getMetadata().getNamespace().equals(namespace.trim())) {\n+        logger.info(\"Service Name :\" + service.getMetadata().getName());\n+        logger.info(\"Service Namespace :\" + service.getMetadata().getNamespace());\n+        Map<String, String> labels = service.getMetadata().getLabels();\n+        if (labels != null) {\n+          for (Map.Entry<String, String> entry : labels.entrySet()) {\n+            logger.log(Level.INFO, \"Label Key: {0} Label Value: {1}\",\n+                new Object[]{entry.getKey(), entry.getValue()});\n+          }\n+        }\n+        return service;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * A utility method to list all pods in given namespace and a label\n+   * This method can be used as diagnostic tool to get the details of pods.\n+   * @param namespace in which to list all pods\n+   * @param labelSelectors with which the pods are decorated\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static void listPods(String namespace, String labelSelectors) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelectors,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    List<V1Pod> items = v1PodList.getItems();\n+    logger.info(Arrays.toString(items.toArray()));\n+  }\n+\n+  /**\n+   * A utillity method to list all services in a given namespace.\n+   * This method can be used as diagnostic tool to get the details of services.\n+   * @param namespace in which to list all services\n+   * @param labelSelectors  with which the services are decorated\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static void listServices(String namespace, String labelSelectors) throws ApiException {\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDY5MA==", "bodyText": "space after colon", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403004690", "createdAt": "2020-04-03T13:28:13Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -3,30 +3,268 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.concurrent.Callable;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n \n-public class Kubernetes {\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.Configuration;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.openapi.models.V1Service;\n+import io.kubernetes.client.openapi.models.V1ServiceList;\n+import io.kubernetes.client.util.ClientBuilder;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-  public static Callable<Boolean> podExists(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+public class Kubernetes implements LoggedTest {\n+\n+  private static final String OPERATOR_NAME = \"weblogic-operator-\";\n+\n+  private static ApiClient apiClient = null;\n+  private static CoreV1Api coreV1Api = null;\n+  private static CustomObjectsApi customObjectsApi = null;\n+  private static final String RUNNING = \"Running\";\n+  private static final String TERMINATING = \"Terminating\";\n+\n+  static {\n+    try {\n+      Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n+      apiClient = Configuration.getDefaultApiClient();\n+      coreV1Api = new CoreV1Api();\n+      customObjectsApi = new CustomObjectsApi();\n+    } catch (IOException ioex) {\n+      throw new ExceptionInInitializerError(ioex);\n+    }\n   }\n \n-  public static Callable<Boolean> podRunning(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace in any state.\n+   * @param namespace in which to check for the pod existence\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodExists(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod exists in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod != null;\n   }\n \n-  public static Callable<Boolean> podTerminating(String podName, String domainUID, String namespace) {\n-    return () -> {\n-      return true;\n-    };\n+  /**\n+   * Checks if a pod exists in a given namespace and in Running state.\n+   * @param namespace in which to check for the pod running\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodRunning(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod running in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(RUNNING);\n   }\n \n-  public static boolean serviceCreated(String domainUID, String namespace) {\n-    return true;\n+  /**\n+   * Checks if a pod exists in a given namespace and in Terminating state.\n+   * @param namespace in which to check for the pod\n+   * @param domainUid the label the pod is decorated with\n+   * @param podName name of the pod to check for\n+   * @return true if pod is in Terminating state otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isPodTerminating(String namespace, String domainUid, String podName) throws ApiException {\n+    logger.info(\"Checking if the pod terminating in namespace\");\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    return pod.getStatus().getPhase().equals(TERMINATING);\n+  }\n+\n+  /**\n+   * Checks if a Operator pod exists in a given namespace.\n+   * The method assumes the operator name to starts with weblogic-operator-\n+   * and decorated with label weblogic.operatorName:namespace\n+   * @param namespace in which to check for the pod existence\n+   * @return true if pod exists and running otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isOperatorPodRunning(String namespace) throws ApiException {\n+    String labelSelector = String.format(\"weblogic.operatorName in (%s)\", namespace);\n+    V1Pod pod = getPod(namespace, labelSelector, \"weblogic-operator-\");\n+    return pod.getStatus().getPhase().equals(RUNNING);\n+  }\n+\n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelector,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    for (V1Pod item : v1PodList.getItems()) {\n+      if (item.getMetadata().getName().startsWith(podName.trim())) {\n+        logger.info(\"Pod Name :\" + item.getMetadata().getName());\n+        logger.info(\"Pod Namespace :\" + item.getMetadata().getNamespace());\n+        logger.info(\"Pod UID :\" + item.getMetadata().getUid());\n+        logger.info(\"Pod Status :\" + item.getStatus().getPhase());\n+        return item;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if a Kubernetes service object exists in a given namespace.\n+   * @param serviceName name of the service to check for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return true if the service is found otherwise false\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static boolean isServiceCreated(String serviceName, HashMap label, String namespace) throws ApiException {\n+    return getService(serviceName, label, namespace) != null;\n+  }\n+\n+  /**\n+   * Get V1Service object for the given servicename, label and namespace\n+   * @param serviceName name of the service to look for\n+   * @param label the key value pair with which the service is decorated with\n+   * @param namespace the namespace in which to check for the service\n+   * @return V1Service object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Service getService(String serviceName, HashMap label, String namespace) throws ApiException {\n+    String labelSelector = null;\n+    if (label != null) {\n+      String key = label.keySet().iterator().next().toString();\n+      String value = label.get(key).toString();\n+      labelSelector = String.format(\"%s in (%s)\", key, value);\n+      logger.info(labelSelector);\n+    }\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,\n+        null,\n+        labelSelector,\n+        null,\n+        Boolean.FALSE.toString(),\n+        null,\n+        null,\n+        Boolean.FALSE);\n+    for (V1Service service : v1ServiceList.getItems()) {\n+      if (service.getMetadata().getName().equals(serviceName.trim())\n+          && service.getMetadata().getNamespace().equals(namespace.trim())) {\n+        logger.info(\"Service Name :\" + service.getMetadata().getName());\n+        logger.info(\"Service Namespace :\" + service.getMetadata().getNamespace());\n+        Map<String, String> labels = service.getMetadata().getLabels();\n+        if (labels != null) {\n+          for (Map.Entry<String, String> entry : labels.entrySet()) {\n+            logger.log(Level.INFO, \"Label Key: {0} Label Value: {1}\",\n+                new Object[]{entry.getKey(), entry.getValue()});\n+          }\n+        }\n+        return service;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * A utility method to list all pods in given namespace and a label\n+   * This method can be used as diagnostic tool to get the details of pods.\n+   * @param namespace in which to list all pods\n+   * @param labelSelectors with which the pods are decorated\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static void listPods(String namespace, String labelSelectors) throws ApiException {\n+    V1PodList v1PodList =\n+        coreV1Api.listNamespacedPod(\n+            namespace,\n+            Boolean.FALSE.toString(),\n+            Boolean.FALSE,\n+            null,\n+            null,\n+            labelSelectors,\n+            null,\n+            null,\n+            null,\n+            Boolean.FALSE);\n+    List<V1Pod> items = v1PodList.getItems();\n+    logger.info(Arrays.toString(items.toArray()));\n+  }\n+\n+  /**\n+   * A utillity method to list all services in a given namespace.\n+   * This method can be used as diagnostic tool to get the details of services.\n+   * @param namespace in which to list all services\n+   * @param labelSelectors  with which the services are decorated\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static void listServices(String namespace, String labelSelectors) throws ApiException {\n+    V1ServiceList v1ServiceList\n+        = coreV1Api.listServiceForAllNamespaces(\n+        Boolean.FALSE,\n+        null,\n+        null,\n+        labelSelectors,\n+        null,\n+        Boolean.FALSE.toString(),\n+        null,\n+        null,\n+        Boolean.FALSE);\n+    List<V1Service> items = v1ServiceList.getItems();\n+    logger.info(Arrays.toString(items.toArray()));\n+    for (V1Service service : items) {\n+      logger.info(\"Service Name :\" + service.getMetadata().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNTI3NQ==", "bodyText": "this is not a test -- should not implement LoggedTest\njust use a static import to get the logger (this is done in other assertion impls)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403005275", "createdAt": "2020-04-03T13:29:04Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Operator.java", "diffHunk": "@@ -3,30 +3,36 @@\n \n package oracle.weblogic.kubernetes.assertions.impl;\n \n-import java.util.Random;\n+import java.util.HashMap;\n import java.util.concurrent.Callable;\n \n-import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+public class Operator implements LoggedTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b79449efedaefca03b93f7514f88b9f8b6e2c6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d45c41013ba80bbcfca2ea2e54222c38f59a3fe", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3d45c41013ba80bbcfca2ea2e54222c38f59a3fe", "committedDate": "2020-04-03T16:41:38Z", "message": "Merge branch 'mii-new-integration-tests' of https://github.com/oracle/weblogic-kubernetes-operator into sankar-junit5-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b11fed14f61b22affc34cd72a1fc8d46e6f59db5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b11fed14f61b22affc34cd72a1fc8d46e6f59db5", "committedDate": "2020-04-03T18:20:56Z", "message": "addressed the PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTEyMDUx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#pullrequestreview-387512051", "createdAt": "2020-04-03T19:06:53Z", "commit": {"oid": "b11fed14f61b22affc34cd72a1fc8d46e6f59db5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNjo1M1rOGAkmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOToyNjoxMFrOGAlKaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1Mjc0MQ==", "bodyText": "fix comma and asterisk at the end", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403252741", "createdAt": "2020-04-03T19:06:53Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -3,19 +3,23 @@\n \n package oracle.weblogic.kubernetes.assertions;\n \n+import java.util.Map;\n import java.util.concurrent.Callable;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.assertions.impl.Domain;\n import oracle.weblogic.kubernetes.assertions.impl.Kubernetes;\n import oracle.weblogic.kubernetes.assertions.impl.Operator;\n \n \n-// as in the actions, it is intended tests only use these assertaions and do\n-// not go direct to the impl classes\n+/**\n+ * General assertions needed by the tests to validate CRD, Domain, Pods etc., *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11fed14f61b22affc34cd72a1fc8d46e6f59db5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MjA1Nw==", "bodyText": "fix javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#discussion_r403262057", "createdAt": "2020-04-03T19:26:10Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -5,17 +5,63 @@\n \n import java.util.concurrent.Callable;\n \n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1Api;\n+import io.kubernetes.client.openapi.apis.ApiextensionsV1beta1Api;\n+import io.kubernetes.client.openapi.apis.ApisApi;\n+import io.kubernetes.client.openapi.apis.CustomObjectsApi;\n+import io.kubernetes.client.openapi.models.V1beta1CustomResourceDefinition;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n public class Domain {\n \n-  public static Callable<Boolean> exists(String domainUID, String namespace) {\n-    return () -> {\n-      String[] pods = {};\n-      for (String pod : pods) {\n-        if (!Kubernetes.podRunning(pod, domainUID, namespace).call().booleanValue()) {\n-          return false;\n-        }\n-      }\n+  private static CustomObjectsApi customObjectsApi = new CustomObjectsApi();\n+  private static ApiextensionsV1Api apiextensionsV1Api = new ApiextensionsV1Api();\n+  private static ApiextensionsV1beta1Api apiextensionsV1beta1Api = new ApiextensionsV1beta1Api();\n+  private static ApisApi apisApi = new ApisApi();\n+\n+\n+  /**\n+   * Check if the Domain CRD exists\n+   * @return true if domains.weblogic.oracle CRD exists otherwise false\n+   * @throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11fed14f61b22affc34cd72a1fc8d46e6f59db5"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb9ccf7bc1549ca1d11c76edb2e00503971cfa24", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb9ccf7bc1549ca1d11c76edb2e00503971cfa24", "committedDate": "2020-04-03T19:30:48Z", "message": "fixed more javadoc comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTM0MTI4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1527#pullrequestreview-387534128", "createdAt": "2020-04-03T19:44:02Z", "commit": {"oid": "bb9ccf7bc1549ca1d11c76edb2e00503971cfa24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}