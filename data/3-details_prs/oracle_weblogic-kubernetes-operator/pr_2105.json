{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzMzNTE4", "number": 2105, "title": "Added managed server shutdown/startup in msi mode in Domain on PV model", "bodyText": "a. Added MSI Usecase (stop/start managed server) into ItIstioDomainOnPV class\nb. Updated the ItServerStartPolicy to add the following usecase\nManaged server can not be started when spec.serverStartPolicy is ADMIN_ONLY or NEVER\nIntegration test results\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/3374/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/3378/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/3397/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/3404", "createdAt": "2020-12-16T17:41:45Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105", "merged": true, "mergeCommit": {"oid": "cf5a1d94ec77cf24f3e8145efe3bb5d7159509fa"}, "closed": true, "closedAt": "2020-12-18T12:51:15Z", "author": {"login": "anpanigr"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmyUIcAH2gAyNTQxMzMzNTE4OjM5ZTExZDRiNGY2OThhYTdhY2Y5NjAzNzlmNzRiNjdlNmMyYzg5ZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnQJtVAFqTU1NTE2MDQ5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39e11d4b4f698aa7acf960379f74b67e6c2c89de", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/39e11d4b4f698aa7acf960379f74b67e6c2c89de", "committedDate": "2020-12-16T17:23:36Z", "message": "Added managed server shutdown/startup in msi mode in Domain on PV model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8fb20fa47ea7246d377a45ef32a191b6586d7fd3", "committedDate": "2020-12-16T22:35:41Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into msi-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODc2MzIx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#pullrequestreview-554876321", "createdAt": "2020-12-17T18:29:47Z", "commit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoyOTo0N1rOIIDFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNzozMVrOIIDX9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwOTk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch adminServer's serverStartPolicy to NEVER\");\n          \n          \n            \n                     \"Failed to patch adminServer's serverStartPolicy to NEVER\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545309994", "createdAt": "2020-12-17T18:29:47Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+    // Stop and Start the managed server in absense of administration server\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Can't patch adminServer's serverStartPolicy to NEVER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMTk2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch adminServer's serverStartPolicy to NEVER\");\n          \n          \n            \n                     \"Failed to patch adminServer's serverStartPolicy to NEVER\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545311966", "createdAt": "2020-12-17T18:32:52Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -245,7 +242,9 @@ public void testAdminServerRestart() {\n     DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n     DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n \n-    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"NEVER\");\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Can't patch adminServer's serverStartPolicy to NEVER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjEyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch adminServer's serverStartPolicy to IF_NEEDED\");\n          \n          \n            \n                     \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545312129", "createdAt": "2020-12-17T18:33:06Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -271,7 +270,9 @@ public void testAdminServerRestart() {\n     assertTrue(result.contains(\"script doesn't support starting or stopping administration server\"),\n         \"The script shouldn't start the admin server\");\n \n-    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+         \"Can't patch adminServer's serverStartPolicy to IF_NEEDED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjQ3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     \"Can't patch domain's serverStartPolicy to ADMIN_ONLY\");\n          \n          \n            \n                     \"Failed to patch domain's serverStartPolicy to ADMIN_ONLY\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545312479", "createdAt": "2020-12-17T18:33:44Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER \n+    result =  assertDoesNotThrow(() ->\n+       executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, \"managed-server1\", \"\", false),\n+       String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(result.contains(\"Cannot start server\"),\n+        \"The script shouldn't start the managed server\");\n+    logger.info(\"Managed server instances can not be started while spec.serverStartPolicy is NEVER\");\n+    \n     // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n-    // Here only Admin server pod should come up\n-    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"ADMIN_ONLY\");\n+    // Here only Administration server pod should come up\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/serverStartPolicy\", \"ADMIN_ONLY\"),\n+         \"Can't patch domain's serverStartPolicy to ADMIN_ONLY\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * server from scrtach if it has never been started eralier with\n          \n          \n            \n               * server from scratch if it has never been started earlier with", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545313730", "createdAt": "2020-12-17T18:35:50Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scrtach if it has never been started eralier with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDgwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * replica count but the server startup is defered till we re-start the \n          \n          \n            \n               * replica count but the server startup is deferred till we re-start the", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545314807", "createdAt": "2020-12-17T18:37:31Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scrtach if it has never been started eralier with\n+   * administration Server. Once the administration server is stopped, the \n+   * managed server can only be started in MSI (managed server independence) \n+   * mode. To start a managed server in MSI mode, the pre-requisite is that the\n+   * managed server MUST be started once before administration server is \n+   * shutdown, so that the security configuration is replicated to the managed \n+   * server. In this case of MII and DomainInImage model, the server \n+   * state/configuration is lost once the server is shutdown unless we use \n+   * domain-on-pv model. So in MII case, startServer.sh script update the \n+   * replica count but the server startup is defered till we re-start the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 306}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODY2OTE5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#pullrequestreview-554866919", "createdAt": "2020-12-17T18:17:18Z", "commit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxNzoxOVrOIIClsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1NToyMVrOIIEISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMTkzNg==", "bodyText": "Comment can be removed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545301936", "createdAt": "2020-12-17T18:17:19Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -135,7 +139,7 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     labelMap.put(\"istio-injection\", \"enabled\");\n \n     assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n-    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+    // assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDU2OA==", "bodyText": "I assume domain's spec.serverStartPolicy  is NEVER. Probably comment can say that \"managed server instances can't be started while domain is stopped\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545320568", "createdAt": "2020-12-17T18:46:32Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNDU2NQ==", "bodyText": "Use constant STOP_DOMAIN_SCRIPT for \"stopDomain.sh\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545324565", "createdAt": "2020-12-17T18:51:23Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNzE3Ng==", "bodyText": "Replace with constant.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545327176", "createdAt": "2020-12-17T18:55:21Z", "author": {"login": "ankedia"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -255,6 +259,10 @@ public void testIstioDomainHomeInPv() {\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\"))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverName(\"managed-server2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a434d255a76cedf6cadebfef5dca8f568f8cc98", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4a434d255a76cedf6cadebfef5dca8f568f8cc98", "committedDate": "2020-12-17T20:26:47Z", "message": "Addressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/92d8372378041c2d97e0dfe1b1250658d2e27f8b", "committedDate": "2020-12-17T20:31:37Z", "message": "More review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04032a6f49c4df5f971077fb447dde6335c4bff9", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/04032a6f49c4df5f971077fb447dde6335c4bff9", "committedDate": "2020-12-17T21:20:56Z", "message": "Remove additional managed server configutration and enable Operator namespace for istio"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTk4NTY3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#pullrequestreview-554998567", "createdAt": "2020-12-17T21:23:38Z", "commit": {"oid": "04032a6f49c4df5f971077fb447dde6335c4bff9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTg2Mjkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#pullrequestreview-554986291", "createdAt": "2020-12-17T21:04:13Z", "commit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTowNDoxNFrOIIIueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMToyODozMVrOIIJepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMjQ5MA==", "bodyText": "update the use case description for this change", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545402490", "createdAt": "2020-12-17T21:04:14Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwMzU3MQ==", "bodyText": "Check CommonTestUtils for this method and call that.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545403571", "createdAt": "2020-12-17T21:06:12Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -324,6 +332,49 @@ public void testIstioDomainHomeInPv() {\n     boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n     assertTrue(checkApp, \"Failed to access WebLogic application\");\n \n+    // Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n+    // Stop and Start the managed server in absense of administration server\n+    assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+         \"/spec/adminServer/serverStartPolicy\", \"NEVER\"),\n+         \"Failed to patch administrationi server serverStartPolicy to NEVER\");\n+    logger.info(\"Domain is patched to shutdown administration server\");\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Administration server shutdown success\");\n+\n+    boolean scalingSuccess = assertDoesNotThrow(() ->\n+        scaleCluster(domainUid, domainNamespace, \"cluster-1\", 1),\n+        String.format(\"Scaling down cluster cluster-1 of domain %s in namespace %s failed\",\n+        domainUid, domainNamespace));\n+    assertTrue(scalingSuccess,\n+        String.format(\"Cluster scaling failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+    logger.info(\"Cluster is scaled down in absense of administration server\");\n+    checkPodDeleted(managedServerPodNamePrefix + \"2\", domainUid, domainNamespace);\n+    logger.info(\"Managed Server stopped in absense of administration server\");\n+\n+    scalingSuccess = assertDoesNotThrow(() ->\n+        scaleCluster(domainUid, domainNamespace, \"cluster-1\", 2),\n+        String.format(\"Scaling up cluster cluster-1 of domain %s in namespace %s failed\",\n+        domainUid, domainNamespace));\n+    assertTrue(scalingSuccess,\n+        String.format(\"Cluster scaling failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+    logger.info(\"Cluster is scaled up in absense of administration server\");\n+    checkServiceExists(managedServerPodNamePrefix + \"2\", domainNamespace);\n+    checkPodReady(managedServerPodNamePrefix + \"2\", domainUid, domainNamespace);\n+    logger.info(\"Managed Server started in absense of administration server\");\n+  }\n+\n+  private void checkPodDeleted(String podName, String domainUid, String domNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwODI0Mw==", "bodyText": "update the use case description for the changes", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545408243", "createdAt": "2020-12-17T21:15:00Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -427,9 +429,20 @@ public void testDomainRestart() {\n     result = executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n     assertTrue(result.contains(\"No changes needed\"), \"stopDomain.sh shouldn't make changes\");\n \n+    // verify managed server instances can not be started while \n+    // spec.serverStartPolicy is NEVER ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDU2OA=="}, "originalCommit": {"oid": "8fb20fa47ea7246d377a45ef32a191b6586d7fd3"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjMwOA==", "bodyText": "you have the same code both inside try and in finally blocks, keep it at one place(finally).", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545412308", "createdAt": "2020-12-17T21:23:27Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -916,17 +956,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n       logger.info(\"Server[\" + serverName + \"] pod is initialized\");\n \n       // (re)Start Start the admin\n-      patchServerStartPolicy(\n-             \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,\n+            \"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\"),\n+             \"Failed to patch adminServer's serverStartPolicy to IF_NEEDED\");\n       checkPodReadyAndServiceExists(\n              adminServerPodName, domainUid, domainNamespace);\n-      logger.info(\"AdminServer restart success\");\n+      logger.info(\"administration server restart success\");\n \n       checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n       logger.info(\"(re)Started [\" + serverName + \"] on admin server restart\");\n     } finally {\n       // restart admin server\n-      patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+      assertTrue(patchServerStartPolicy(domainUid, domainNamespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * server from scratch if it has never been started eralier with\n          \n          \n            \n               * server from scratch if it has never been started earlier with", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545412440", "createdAt": "2020-12-17T21:23:44Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxNDgyMA==", "bodyText": "what is the difference between testDynamicServerLifeCycleWithoutAdmin and testConfiguredServerLifeCycleWithoutAdmin? is it just the cluster type?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#discussion_r545414820", "createdAt": "2020-12-17T21:28:31Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -935,20 +978,20 @@ public void testDynamicServerLifeCycleWithoutAdmin() {\n \n   /**\n    * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86251\n-   * Refer JIRA https://jira.oraclecorp.com/jira/browse/OWLS-86407\n    * Once the admin server is stopped, operator can not start a new managed \n-   * server from scrtach if it has never been started eralier with Admin Server\n-   * Once the admin server is stopped, the managed server can only be started \n-   * in MSI (managed server independence) mode. To start a manged server in \n-   * MSI mode, the pre-requisite is the that the manged server MUST be started \n-   * once before admin server is shutdown, so that the embedded LDAP server is \n-   * replicated from admin server to the managed server. \n-   * In this case of MII and DomainInImage model, the server state/configuration\n-   * is not saved once the server is shutdown unless we use domain-on-pv model\n-   * So in MII case, startServer.sh script update the replica count but the \n-   * server startup is defered till we re-start the adminserver. Here the \n-   * operator tries to start the managed server but it will keep on failing \n-   * until AdminServer is available.   \n+   * server from scratch if it has never been started eralier with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxMjQ0MA=="}, "originalCommit": {"oid": "92d8372378041c2d97e0dfe1b1250658d2e27f8b"}, "originalPosition": 297}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bac727376e21b3adaa35c118a0eed1f81b205de", "author": {"user": {"login": "anpanigr", "name": "Antaryami Panigrahi"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9bac727376e21b3adaa35c118a0eed1f81b205de", "committedDate": "2020-12-17T22:30:34Z", "message": "Update integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java\n\nCo-authored-by: Vanajakshi Mukkara <35709372+vanajamukkara@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDc4OTk0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#pullrequestreview-555078994", "createdAt": "2020-12-17T23:52:25Z", "commit": {"oid": "9bac727376e21b3adaa35c118a0eed1f81b205de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3769647ebb136a3d4aea3264c98be74ac76591", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6d3769647ebb136a3d4aea3264c98be74ac76591", "committedDate": "2020-12-18T00:29:18Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into msi-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2afad8ef987f3975ad17cbbaf31ea06b46a8fbba", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2afad8ef987f3975ad17cbbaf31ea06b46a8fbba", "committedDate": "2020-12-18T00:40:38Z", "message": "Updated test to use common utility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTYwNDkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2105#pullrequestreview-555160491", "createdAt": "2020-12-18T04:09:22Z", "commit": {"oid": "2afad8ef987f3975ad17cbbaf31ea06b46a8fbba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3997, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}