{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDA3NzIw", "number": 1562, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTowNToyNFrODx0nNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozNToxOVrOD07pNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTY4ODIwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTowNToyNFrOGFg4dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0NDowMlrOGG-AIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDgwNQ==", "bodyText": "The above tagging won't be necessary if the decision is to use LogginUtil.getNSListIntersecting( )\nPlease add your review comments as to which way to use to get the namespace list.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408434805", "createdAt": "2020-04-14T21:05:24Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -56,12 +58,16 @@\n @ExtendWith(Timing.class)\n // by implementing the LoggedTest, we will automatically get a logger injected and it\n // will also automatically log entry/exit messages for each test method.\n+@ExtendWith(IntegrationTestWatcher.class)\n class ItSimpleOperatorValidation implements LoggedTest {\n \n   private HelmParams opHelmParams = null;\n   private V1ServiceAccount serviceAccount = null;\n+  @NamespaceList\n   private String opNamespace = null;\n+  @NamespaceList\n   private String domainNamespace1 = null;\n+  @NamespaceList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ac7400ade6fb0324c2fe2c0843d84931196041"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTY2MA==", "bodyText": "this is not what i was looking for, let's discuss at the daily meeting", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408439660", "createdAt": "2020-04-14T21:14:31Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -56,12 +58,16 @@\n @ExtendWith(Timing.class)\n // by implementing the LoggedTest, we will automatically get a logger injected and it\n // will also automatically log entry/exit messages for each test method.\n+@ExtendWith(IntegrationTestWatcher.class)\n class ItSimpleOperatorValidation implements LoggedTest {\n \n   private HelmParams opHelmParams = null;\n   private V1ServiceAccount serviceAccount = null;\n+  @NamespaceList\n   private String opNamespace = null;\n+  @NamespaceList\n   private String domainNamespace1 = null;\n+  @NamespaceList", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDgwNQ=="}, "originalCommit": {"oid": "41ac7400ade6fb0324c2fe2c0843d84931196041"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2MDQ4Mg==", "bodyText": "Implemented the new method of creating namespaces based on the Annotation at the method parameter. The TestWatcher creates it and passes it to the test method for use. The list is can be used for log collection and can be used for cleanup once the test is done.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r409960482", "createdAt": "2020-04-17T02:44:02Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -56,12 +58,16 @@\n @ExtendWith(Timing.class)\n // by implementing the LoggedTest, we will automatically get a logger injected and it\n // will also automatically log entry/exit messages for each test method.\n+@ExtendWith(IntegrationTestWatcher.class)\n class ItSimpleOperatorValidation implements LoggedTest {\n \n   private HelmParams opHelmParams = null;\n   private V1ServiceAccount serviceAccount = null;\n+  @NamespaceList\n   private String opNamespace = null;\n+  @NamespaceList\n   private String domainNamespace1 = null;\n+  @NamespaceList", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDgwNQ=="}, "originalCommit": {"oid": "41ac7400ade6fb0324c2fe2c0843d84931196041"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTcyMDcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMToxNTowMFrOGFhMTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowNDo1NFrOGInphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTg4NQ==", "bodyText": "fix javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408439885", "createdAt": "2020-04-14T21:15:00Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -191,8 +228,18 @@ public static List listDeployments() {\n     return new ArrayList();\n   }\n \n-  // --------------------------- pods -----------------------------------------\n+  /**\n+   * List all deployments in a given namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4OTA3OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411689078", "createdAt": "2020-04-20T21:00:57Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -191,8 +228,18 @@ public static List listDeployments() {\n     return new ArrayList();\n   }\n \n-  // --------------------------- pods -----------------------------------------\n+  /**\n+   * List all deployments in a given namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTg4NQ=="}, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTM5OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411691399", "createdAt": "2020-04-20T21:04:54Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -191,8 +228,18 @@ public static List listDeployments() {\n     return new ArrayList();\n   }\n \n-  // --------------------------- pods -----------------------------------------\n+  /**\n+   * List all deployments in a given namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTg4NQ=="}, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTcyMzcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMToxNTo1MlrOGFhOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMjo1OVrOGInlJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDMyMg==", "bodyText": "fix", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408440322", "createdAt": "2020-04-14T21:15:52Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -621,19 +775,27 @@ public static boolean deleteSecret(String name, String namespace) throws ApiExce\n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"secret in background!\");\n+          + \"secret in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- pv/pvc ---------------------------\n+  /**\n+   * List secrets in a given namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 536}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MDI3OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411690279", "createdAt": "2020-04-20T21:02:59Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -621,19 +775,27 @@ public static boolean deleteSecret(String name, String namespace) throws ApiExce\n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"secret in background!\");\n+          + \"secret in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- pv/pvc ---------------------------\n+  /**\n+   * List secrets in a given namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDMyMg=="}, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 536}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTcyNDY5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMToxNjoxM1rOGFhOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowMzoyN1rOGInmPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDQ3OA==", "bodyText": "fix", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408440478", "createdAt": "2020-04-14T21:16:13Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +906,40 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 653}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MDU1OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411690559", "createdAt": "2020-04-20T21:03:27Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +906,40 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDQ3OA=="}, "originalCommit": {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e"}, "originalPosition": 653}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjUwMTAwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMzoyNDowNFrOGFoblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowNDoxM1rOGInoBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1ODQ4NQ==", "bodyText": "What should be log directory I should be using here ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408558485", "createdAt": "2020-04-15T03:24:04Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -0,0 +1,266 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.extensions;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.utils.LoggingUtil;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.LifecycleMethodExecutionExceptionHandler;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+import org.junit.jupiter.api.extension.TestWatcher;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * JUnit5 extension class to intercept test execution at various\n+ * levels and collect logs in Kubernetes cluster for all artifacts\n+ * in the namespace used by the tests. The tests has to tag their classes\n+ * with @ExtendWith(IntegrationTestWatcher.class) for the automatic log\n+ * collection to work.\n+ */\n+public class IntegrationTestWatcher implements\n+    AfterAllCallback,\n+    AfterEachCallback,\n+    BeforeAllCallback,\n+    BeforeEachCallback,\n+    BeforeTestExecutionCallback,\n+    InvocationInterceptor,\n+    LifecycleMethodExecutionExceptionHandler,\n+    TestExecutionExceptionHandler,\n+    TestWatcher {\n+\n+  private String className;\n+  private String methodName;\n+  private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35df6ec3b32accebd456716f6ff42c9c44813a5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTAxMg==", "bodyText": "fixed to use RESULT_ROOT if set or tmp dir", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411691012", "createdAt": "2020-04-20T21:04:13Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -0,0 +1,266 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.extensions;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.utils.LoggingUtil;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.LifecycleMethodExecutionExceptionHandler;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+import org.junit.jupiter.api.extension.TestWatcher;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * JUnit5 extension class to intercept test execution at various\n+ * levels and collect logs in Kubernetes cluster for all artifacts\n+ * in the namespace used by the tests. The tests has to tag their classes\n+ * with @ExtendWith(IntegrationTestWatcher.class) for the automatic log\n+ * collection to work.\n+ */\n+public class IntegrationTestWatcher implements\n+    AfterAllCallback,\n+    AfterEachCallback,\n+    BeforeAllCallback,\n+    BeforeEachCallback,\n+    BeforeTestExecutionCallback,\n+    InvocationInterceptor,\n+    LifecycleMethodExecutionExceptionHandler,\n+    TestExecutionExceptionHandler,\n+    TestWatcher {\n+\n+  private String className;\n+  private String methodName;\n+  private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1ODQ4NQ=="}, "originalCommit": {"oid": "b35df6ec3b32accebd456716f6ff42c9c44813a5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjUxNjczOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMzozMzo1NVrOGFok4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowNDoyM1rOGInoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2MDg2Nw==", "bodyText": "what should be property I should be using here ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408560867", "createdAt": "2020-04-15T03:33:55Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.NamespaceList;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect log messages from Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35df6ec3b32accebd456716f6ff42c9c44813a5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTA5Nw==", "bodyText": "fixed to use RESULT_ROOT if set or tmp dir", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411691097", "createdAt": "2020-04-20T21:04:23Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.NamespaceList;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect log messages from Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2MDg2Nw=="}, "originalCommit": {"oid": "b35df6ec3b32accebd456716f6ff42c9c44813a5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODU0NzE4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMToxOTo1N1rOGHdblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNTozMVrOGIkChg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw==", "bodyText": "numofns is kind of cryptic.  Is there a reason not to make this more verbose?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410475413", "createdAt": "2020-04-17T21:19:57Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)\n+@ITNamespaces(numofns = 2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04fad989601658544a886ee2ef522310329978fc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MjM2Ng==", "bodyText": "Just wanted to keep the name shorter. Is \"namespacesRequired\" is good enough ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410482366", "createdAt": "2020-04-17T21:38:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)\n+@ITNamespaces(numofns = 2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw=="}, "originalCommit": {"oid": "04fad989601658544a886ee2ef522310329978fc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjI5MQ==", "bodyText": "can't it just be Namespaces(2) ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411506291", "createdAt": "2020-04-20T16:11:41Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)\n+@ITNamespaces(numofns = 2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw=="}, "originalCommit": {"oid": "04fad989601658544a886ee2ef522310329978fc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjI2Mg==", "bodyText": "Removed the annotation at class level and moved it to method parameter per Derek's comments.\nAlso renamed it as Namespaces with default field. So method signature can use Namespaces(2)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411632262", "createdAt": "2020-04-20T19:25:31Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)\n+@ITNamespaces(numofns = 2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw=="}, "originalCommit": {"oid": "04fad989601658544a886ee2ef522310329978fc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODY3MzkyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoxMzo0M1rOGHeoIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNTo0NVrOGIkDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTAxMQ==", "bodyText": "Wouldn't this annotation be better on the method using it?\nLike:\npublic void testCreatingDomain(@ITNamespaces(numofns = 1) List namespaces)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410495011", "createdAt": "2020-04-17T22:13:43Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -34,19 +39,23 @@\n \n @DisplayName(\"Simple validation of basic domain functions\")\n @IntegrationTest\n+//Every test class needs to tagged with this annotation for log collection and namespace creation.\n+@ExtendWith(IntegrationTestWatcher.class)\n+// The ITNamespaces numofns value is used to create the number of unique namespaces needed by the test.\n+// The namespace list is available for use by all methods in the test class.\n+@ITNamespaces(numofns = 1) //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f795f98f6a1eb5440a30ef5cdf795a05f0acd7d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwOTgzOA==", "bodyText": "Yes we can do this. Lets see what others think.\nA minor thing is, it has to be placed at every method that wants to create new namespaces.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410509838", "createdAt": "2020-04-17T23:11:20Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -34,19 +39,23 @@\n \n @DisplayName(\"Simple validation of basic domain functions\")\n @IntegrationTest\n+//Every test class needs to tagged with this annotation for log collection and namespace creation.\n+@ExtendWith(IntegrationTestWatcher.class)\n+// The ITNamespaces numofns value is used to create the number of unique namespaces needed by the test.\n+// The namespace list is available for use by all methods in the test class.\n+@ITNamespaces(numofns = 1) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTAxMQ=="}, "originalCommit": {"oid": "f795f98f6a1eb5440a30ef5cdf795a05f0acd7d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjM4Ng==", "bodyText": "Done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411632386", "createdAt": "2020-04-20T19:25:45Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -34,19 +39,23 @@\n \n @DisplayName(\"Simple validation of basic domain functions\")\n @IntegrationTest\n+//Every test class needs to tagged with this annotation for log collection and namespace creation.\n+@ExtendWith(IntegrationTestWatcher.class)\n+// The ITNamespaces numofns value is used to create the number of unique namespaces needed by the test.\n+// The namespace list is available for use by all methods in the test class.\n+@ITNamespaces(numofns = 1) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTAxMQ=="}, "originalCommit": {"oid": "f795f98f6a1eb5440a30ef5cdf795a05f0acd7d0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUwMjM0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMToxMlrOGIcVAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNzoxMVrOGIkGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTkyMA==", "bodyText": "maybe we should just have a single extension - are there example of when we would would want one of these but not the other @ddsharpe @rjeberhard? i can't think of any", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411505920", "createdAt": "2020-04-20T16:11:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMzE5Mw==", "bodyText": "Removed the Timing extension and moved the @ExtendWith(IntegrationTestWatcher.class)  from test class to IntegrationTest interface.\nThe IntegrationTestWatcher implements methods that were in Timing.java", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411633193", "createdAt": "2020-04-20T19:27:11Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTkyMA=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUwNzI5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMjoxMlrOGIcYDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNzoyNFrOGIkGkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjcwMQ==", "bodyText": "can you change the initAll method signature?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411506701", "createdAt": "2020-04-20T16:12:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -120,22 +123,18 @@\n    * Install Operator.\n    */\n   @BeforeAll\n-  public static void initAll() {\n+  public static void initAll(List namespaces) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMzI5OQ==", "bodyText": "Done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411633299", "createdAt": "2020-04-20T19:27:24Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -120,22 +123,18 @@\n    * Install Operator.\n    */\n   @BeforeAll\n-  public static void initAll() {\n+  public static void initAll(List namespaces) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjcwMQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUxMDc5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMjo1OVrOGIcaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNzozNFrOGIkG_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzI1Nw==", "bodyText": "needs null check", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411507257", "createdAt": "2020-04-20T16:12:59Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -120,22 +123,18 @@\n    * Install Operator.\n    */\n   @BeforeAll\n-  public static void initAll() {\n+  public static void initAll(List namespaces) {\n     // create standard, reusbale retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n         .atMost(5, MINUTES).await();\n \n     // get a new unique opNamespace\n     logger.info(\"Creating unique namespace for Operator\");\n-    opNamespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-        \"Failed to create unique namespace due to ApiException\");\n-    logger.info(\"Created a new namespace called {0}\", opNamespace);\n+    opNamespace = (String)namespaces.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMzQwNA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411633404", "createdAt": "2020-04-20T19:27:34Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -120,22 +123,18 @@\n    * Install Operator.\n    */\n   @BeforeAll\n-  public static void initAll() {\n+  public static void initAll(List namespaces) {\n     // create standard, reusbale retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n         .atMost(5, MINUTES).await();\n \n     // get a new unique opNamespace\n     logger.info(\"Creating unique namespace for Operator\");\n-    opNamespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-        \"Failed to create unique namespace due to ApiException\");\n-    logger.info(\"Created a new namespace called {0}\", opNamespace);\n+    opNamespace = (String)namespaces.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzI1Nw=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjU1MTYyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyMTozM1rOGIcy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyODo1NlrOGIkKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzU5NA==", "bodyText": "if it is true/false, then why is it null?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411513594", "createdAt": "2020-04-20T16:21:33Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -216,18 +258,24 @@ public static String getPodLog(String name, String namespace) throws ApiExceptio\n    */\n   public static String getPodLog(String name, String namespace, String container)\n       throws ApiException {\n-    String log = coreV1Api.readNamespacedPodLog(\n-        name, // name of the Pod\n-        namespace, // name of the Namespace\n-        container, // container for which to stream logs\n-        null, //  true/false Follow the log stream of the pod\n-        null, // number of bytes to read from the server before terminating the log output\n-        PRETTY, // pretty print output\n-        null, // true/false, Return previous terminated container logs\n-        null, // relative time (seconds) before the current time from which to show logs\n-        null, // number of lines from the end of the logs to show\n-        null // true/false, add timestamp at the beginning of every line of log output\n-    );\n+    String log = null;\n+    try {\n+      log = coreV1Api.readNamespacedPodLog(\n+          name, // name of the Pod\n+          namespace, // name of the Namespace\n+          container, // container for which to stream logs\n+          null, //  true/false Follow the log stream of the pod\n+          null, // number of bytes to read from the server before terminating the log output\n+          PRETTY, // pretty print output\n+          null, // true/false, Return previous terminated container logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDI1NQ==", "bodyText": "Boolean object, changed the comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411634255", "createdAt": "2020-04-20T19:28:56Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -216,18 +258,24 @@ public static String getPodLog(String name, String namespace) throws ApiExceptio\n    */\n   public static String getPodLog(String name, String namespace, String container)\n       throws ApiException {\n-    String log = coreV1Api.readNamespacedPodLog(\n-        name, // name of the Pod\n-        namespace, // name of the Namespace\n-        container, // container for which to stream logs\n-        null, //  true/false Follow the log stream of the pod\n-        null, // number of bytes to read from the server before terminating the log output\n-        PRETTY, // pretty print output\n-        null, // true/false, Return previous terminated container logs\n-        null, // relative time (seconds) before the current time from which to show logs\n-        null, // number of lines from the end of the logs to show\n-        null // true/false, add timestamp at the beginning of every line of log output\n-    );\n+    String log = null;\n+    try {\n+      log = coreV1Api.readNamespacedPodLog(\n+          name, // name of the Pod\n+          namespace, // name of the Namespace\n+          container, // container for which to stream logs\n+          null, //  true/false Follow the log stream of the pod\n+          null, // number of bytes to read from the server before terminating the log output\n+          PRETTY, // pretty print output\n+          null, // true/false, Return previous terminated container logs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzU5NA=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjU1MzgzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyMjowMVrOGIc0QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyOTozNlrOGIkL3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzkyMA==", "bodyText": "missing @returns", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411513920", "createdAt": "2020-04-20T16:22:01Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -257,8 +304,37 @@ public static boolean deletePod(String name, String namespace) throws ApiExcepti\n     return true;\n   }\n \n-  // --------------------------- namespaces -----------------------------------\n+  /**\n+   * List all pods in given namespace.\n+   *\n+   * @param namespace Namespace in which to list all pods\n+   * @param labelSelectors with which the pods are decorated\n+   * @throws ApiException when there is error in querying the cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDY1Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411634652", "createdAt": "2020-04-20T19:29:36Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -257,8 +304,37 @@ public static boolean deletePod(String name, String namespace) throws ApiExcepti\n     return true;\n   }\n \n-  // --------------------------- namespaces -----------------------------------\n+  /**\n+   * List all pods in given namespace.\n+   *\n+   * @param namespace Namespace in which to list all pods\n+   * @param labelSelectors with which the pods are decorated\n+   * @throws ApiException when there is error in querying the cluster", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzkyMA=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjU1NzkwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyMjo1NlrOGIc2zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0OToyMVrOGJbs8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ==", "bodyText": "don't swallow the stack trace", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411514575", "createdAt": "2020-04-20T16:22:56Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -468,12 +598,73 @@ public static Domain getDomainCustomResource(String domainUID, String namespace)\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDkzNA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411634934", "createdAt": "2020-04-20T19:30:05Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -468,12 +598,73 @@ public static Domain getDomainCustomResource(String domainUID, String namespace)\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMjY5Mw==", "bodyText": "i don't see the fix", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412522693", "createdAt": "2020-04-21T22:03:03Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -468,12 +598,73 @@ public static Domain getDomainCustomResource(String domainUID, String namespace)\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDI0Mw==", "bodyText": "Now you should see it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412544243", "createdAt": "2020-04-21T22:49:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -468,12 +598,73 @@ public static Domain getDomainCustomResource(String domainUID, String namespace)\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 415}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjU2NTY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyNDoyOVrOGIc7YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0ODo1OVrOGJbsQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ==", "bodyText": "does this handle all namespaces?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411515745", "createdAt": "2020-04-20T16:24:29Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 737}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2MDY5OQ==", "bodyText": "Yes it lists persistent volume claims in all namespaces. I also added another overloaded method to handle namespace specific list.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411660699", "createdAt": "2020-04-20T20:13:23Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 737}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MDQyMQ==", "bodyText": "Let's call it listPersistentVolumeClaimsAllNamespaces() then.  Also, why would we ever need this as the diagnostics should be per-namespace.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412460421", "createdAt": "2020-04-21T20:14:19Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 737}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5OTE2Ng==", "bodyText": "changed the name to listPersistentVolumeClaimsAllNamespaces. I added this method when we need to query all namespaces in the cluster in case needed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412499166", "createdAt": "2020-04-21T21:19:23Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 737}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjM3OA==", "bodyText": "where do we need this?  as opposed to just looking in a single namespace?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412526378", "createdAt": "2020-04-21T22:10:23Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 737}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDA2NQ==", "bodyText": "removed listPersistentVolumeClaimsAllNamespaces()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412544065", "createdAt": "2020-04-21T22:48:59Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, "originalCommit": {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f"}, "originalPosition": 737}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Nzc5MjAyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyNToxMVrOGIoVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowOTowOFrOGIrT0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMjU4OQ==", "bodyText": "Shouldn't be this be checking if the call was successful?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411702589", "createdAt": "2020-04-20T21:25:11Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -198,18 +236,22 @@ private static void initializeGenericKubernetesApiClients() {\n   }\n \n   // ------------------------  deployments -----------------------------------\n-\n   public static boolean createDeployment(String deploymentYaml) {\n     // do something with the command!!!\n     return true;\n   }\n \n-  public static List listDeployments() {\n-    return new ArrayList();\n+  /**\n+   * List all deployments in a given namespace.\n+   * @param namespace Namespace in which to list the deployments\n+   * @return V1DeploymentList of deployments in the Kubernetes cluster\n+   */\n+  public static V1DeploymentList listDeployments(String namespace) {\n+    KubernetesApiResponse<V1DeploymentList> list = deploymentClient.list(namespace);\n+    return list.getObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTM3OQ==", "bodyText": "Fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411751379", "createdAt": "2020-04-20T23:09:08Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -198,18 +236,22 @@ private static void initializeGenericKubernetesApiClients() {\n   }\n \n   // ------------------------  deployments -----------------------------------\n-\n   public static boolean createDeployment(String deploymentYaml) {\n     // do something with the command!!!\n     return true;\n   }\n \n-  public static List listDeployments() {\n-    return new ArrayList();\n+  /**\n+   * List all deployments in a given namespace.\n+   * @param namespace Namespace in which to list the deployments\n+   * @return V1DeploymentList of deployments in the Kubernetes cluster\n+   */\n+  public static V1DeploymentList listDeployments(String namespace) {\n+    KubernetesApiResponse<V1DeploymentList> list = deploymentClient.list(namespace);\n+    return list.getObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMjU4OQ=="}, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Nzc5NjczOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyNjoxOVrOGIoX5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyODoxM1rOGIob0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMzI3MQ==", "bodyText": "Just curious, why are we using GenericKubernetesApi for everything except Pod?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411703271", "createdAt": "2020-04-20T21:26:19Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -233,18 +275,24 @@ public static String getPodLog(String name, String namespace) throws ApiExceptio\n    */\n   public static String getPodLog(String name, String namespace, String container)\n       throws ApiException {\n-    String log = coreV1Api.readNamespacedPodLog(\n-        name, // name of the Pod\n-        namespace, // name of the Namespace\n-        container, // container for which to stream logs\n-        null, //  true/false Follow the log stream of the pod\n-        null, // number of bytes to read from the server before terminating the log output\n-        PRETTY, // pretty print output\n-        null, // true/false, Return previous terminated container logs\n-        null, // relative time (seconds) before the current time from which to show logs\n-        null, // number of lines from the end of the logs to show\n-        null // true/false, add timestamp at the beginning of every line of log output\n-    );\n+    String log = null;\n+    try {\n+      log = coreV1Api.readNamespacedPodLog(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNDI3Mw==", "bodyText": "Actually, looks like we're using both kinds of API's.  It doesn't really matter.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411704273", "createdAt": "2020-04-20T21:28:13Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -233,18 +275,24 @@ public static String getPodLog(String name, String namespace) throws ApiExceptio\n    */\n   public static String getPodLog(String name, String namespace, String container)\n       throws ApiException {\n-    String log = coreV1Api.readNamespacedPodLog(\n-        name, // name of the Pod\n-        namespace, // name of the Namespace\n-        container, // container for which to stream logs\n-        null, //  true/false Follow the log stream of the pod\n-        null, // number of bytes to read from the server before terminating the log output\n-        PRETTY, // pretty print output\n-        null, // true/false, Return previous terminated container logs\n-        null, // relative time (seconds) before the current time from which to show logs\n-        null, // number of lines from the end of the logs to show\n-        null // true/false, add timestamp at the beginning of every line of log output\n-    );\n+    String log = null;\n+    try {\n+      log = coreV1Api.readNamespacedPodLog(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMzI3MQ=="}, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzgwNzYyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyOToyNFrOGIoeYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo0Mjo1OVrOGIo7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNDkyOQ==", "bodyText": "Why default to 0 instead of 1?  Wouldn't zero be when the annotation is not used.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411704929", "createdAt": "2020-04-20T21:29:24Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation interface to define the number of namespaces needed by the test.\n+ */\n+@Target({ElementType.PARAMETER})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Namespaces {\n+  int value() default 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMjMzNw==", "bodyText": "I wanted the test developers to get used to mentioning the number of namespaces they require. If no values I don't know what this annotation means.( at least for me)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411712337", "createdAt": "2020-04-20T21:42:59Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation interface to define the number of namespaces needed by the test.\n+ */\n+@Target({ElementType.PARAMETER})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Namespaces {\n+  int value() default 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNDkyOQ=="}, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzgxMzg1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTozMTowM1rOGIoh8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxMDoxM1rOGIrViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNTg0Mw==", "bodyText": "We need some way to label PV's.  This will generate a lot of data since it will grab all PV's, including those associated with domains from other tests.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411705843", "createdAt": "2020-04-20T21:31:03Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");\n+    // get pv\n+    writeToFile(Kubernetes.listPersistenVolumes(), resultDir.toString(), namespace + \"_pv.log\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNjE1OQ==", "bodyText": "Maybe just grab PV's associated with PVC's we have in the namespace?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411706159", "createdAt": "2020-04-20T21:31:35Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");\n+    // get pv\n+    writeToFile(Kubernetes.listPersistenVolumes(), resultDir.toString(), namespace + \"_pv.log\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNTg0Mw=="}, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTgxNg==", "bodyText": "Grabbing the weblogic.domainUID value from PVC and using that to list PVs.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411751816", "createdAt": "2020-04-20T23:10:13Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");\n+    // get pv\n+    writeToFile(Kubernetes.listPersistenVolumes(), resultDir.toString(), namespace + \"_pv.log\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNTg0Mw=="}, "originalCommit": {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg4OTg0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMjoxN1rOGJWgxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToxNjowM1rOGJY1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTIwNA==", "bodyText": "I'm confused.  Why do we still have these methods?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412459204", "createdAt": "2020-04-21T20:12:17Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -579,12 +716,74 @@ public static boolean patchDomainCustomResource(String domainUID, String namespa\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+      throw ex;\n+    }\n     return response != null ? response.getObject() : new DomainList();\n   }\n \n-  // --------------------------- config map ---------------------------\n \n+  /**\n+   * Get Domain Custom Resource objects in all namespaces.\n+   *\n+   * @return Object Domain Custom Resources object\n+   */\n+  public static Object getDomainObjects() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2"}, "originalPosition": 427}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5NzE4MQ==", "bodyText": "Removed it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412497181", "createdAt": "2020-04-21T21:16:03Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -579,12 +716,74 @@ public static boolean patchDomainCustomResource(String domainUID, String namespa\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+      throw ex;\n+    }\n     return response != null ? response.getObject() : new DomainList();\n   }\n \n-  // --------------------------- config map ---------------------------\n \n+  /**\n+   * Get Domain Custom Resource objects in all namespaces.\n+   *\n+   * @return Object Domain Custom Resources object\n+   */\n+  public static Object getDomainObjects() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTIwNA=="}, "originalCommit": {"oid": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjkxMTk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxODowOFrOGJWuKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToxNjozMlrOGJY2Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjYzNA==", "bodyText": "I only want details for the named namespace", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412462634", "createdAt": "2020-04-21T20:18:08Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5NzQ4Ng==", "bodyText": "Logging only the named namespace.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412497486", "createdAt": "2020-04-21T21:16:32Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjYzNA=="}, "originalCommit": {"oid": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzMwNzAyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1ODozMVrOGJaPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjozNToxMVrOGJbTww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDM0MA==", "bodyText": "fix", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412520340", "createdAt": "2020-04-21T21:58:31Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -122,20 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces listof namespaces created by the IntegrationTestWatcher by the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzMTAxNg==", "bodyText": "isn't that the typo \"listof\" or something else ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412531016", "createdAt": "2020-04-21T22:20:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -122,20 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces listof namespaces created by the IntegrationTestWatcher by the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDM0MA=="}, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzc5NQ==", "bodyText": "Fixed the typo \"listof\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412537795", "createdAt": "2020-04-21T22:35:11Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -122,20 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces listof namespaces created by the IntegrationTestWatcher by the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDM0MA=="}, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzMxMTU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1OTo0OVrOGJaSLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjozNTozMlrOGJbUTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMTAwNw==", "bodyText": "use for x : namespaces instead -- less brittle", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412521007", "createdAt": "2020-04-21T21:59:49Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -77,17 +71,20 @@\n   // like these two:\n   @Slow\n   @MustNotRunInParallel\n-  public void testInstallingOperator(List namespaces) {\n+  public void testInstallingOperator(@Namespaces(3) List<String> namespaces) {\n     // this first example is an operation that we wait for.\n     // installOperator() is one of our custom, reusable actions.\n     // imagine that installOperator() will try to install the operator, by creating\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n     // get unique namespaces for operator and domains\n-    opNamespace = (String)namespaces.get(0);\n-    domainNamespace1 = (String)namespaces.get(1);\n-    domainNamespace2 = (String)namespaces.get(2);\n+    for (int i = 0; i < 3; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzkzMg==", "bodyText": "Changed to forEach", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412537932", "createdAt": "2020-04-21T22:35:32Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -77,17 +71,20 @@\n   // like these two:\n   @Slow\n   @MustNotRunInParallel\n-  public void testInstallingOperator(List namespaces) {\n+  public void testInstallingOperator(@Namespaces(3) List<String> namespaces) {\n     // this first example is an operation that we wait for.\n     // installOperator() is one of our custom, reusable actions.\n     // imagine that installOperator() will try to install the operator, by creating\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n     // get unique namespaces for operator and domains\n-    opNamespace = (String)namespaces.get(0);\n-    domainNamespace1 = (String)namespaces.get(1);\n-    domainNamespace2 = (String)namespaces.get(2);\n+    for (int i = 0; i < 3; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMTAwNw=="}, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzM1MTcwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjoxMTowNFrOGJaogQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoyNDo0NVrOGJ_VLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ==", "bodyText": "use for over collection", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412526721", "createdAt": "2020-04-21T22:11:04Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -85,21 +89,20 @@ public boolean supportsParameter(ParameterContext parameterContext,\n   @Override\n   public Object resolveParameter(ParameterContext parameterContext,\n       ExtensionContext extensionContext) throws ParameterResolutionException {\n-    Object requiredTestInstance = extensionContext.getRequiredTestInstance();\n-    List<String> namespaces = null;\n-\n-    if (requiredTestInstance.getClass().isAnnotationPresent(ITNamespaces.class)) {\n-      ITNamespaces itNsTag = requiredTestInstance.getClass().getAnnotation(ITNamespaces.class);\n-      logger.info(\"Creating {0} unique namespaces for the test\", itNsTag.numofns());\n-      namespaces = new ArrayList();\n-      for (int i = 1; i <= itNsTag.numofns(); i++) {\n-        String namespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-            \"Failed to create unique namespace due to ApiException\");\n-        namespaces.add(namespace);\n-        logger.info(\"Created a new namespace called {0}\", namespace);\n-      }\n+    Namespaces ns = parameterContext.findAnnotation(Namespaces.class).get();\n+    List<String> namespaces = new ArrayList();\n+    for (int i = 1; i <= ns.value(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzMyMw==", "bodyText": "Sorry I don't understand what you mean by \"use for over collection\" , can you elaborate ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412537323", "createdAt": "2020-04-21T22:34:00Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -85,21 +89,20 @@ public boolean supportsParameter(ParameterContext parameterContext,\n   @Override\n   public Object resolveParameter(ParameterContext parameterContext,\n       ExtensionContext extensionContext) throws ParameterResolutionException {\n-    Object requiredTestInstance = extensionContext.getRequiredTestInstance();\n-    List<String> namespaces = null;\n-\n-    if (requiredTestInstance.getClass().isAnnotationPresent(ITNamespaces.class)) {\n-      ITNamespaces itNsTag = requiredTestInstance.getClass().getAnnotation(ITNamespaces.class);\n-      logger.info(\"Creating {0} unique namespaces for the test\", itNsTag.numofns());\n-      namespaces = new ArrayList();\n-      for (int i = 1; i <= itNsTag.numofns(); i++) {\n-        String namespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-            \"Failed to create unique namespace due to ApiException\");\n-        namespaces.add(namespace);\n-        logger.info(\"Created a new namespace called {0}\", namespace);\n-      }\n+    Namespaces ns = parameterContext.findAnnotation(Namespaces.class).get();\n+    List<String> namespaces = new ArrayList();\n+    for (int i = 1; i <= ns.value(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ=="}, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMjYyMQ==", "bodyText": "Looking at this again, @markxnelson, he's not iterating over a collection but generating the required count of namespaces per the value from the annotation.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413112621", "createdAt": "2020-04-22T16:04:32Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -85,21 +89,20 @@ public boolean supportsParameter(ParameterContext parameterContext,\n   @Override\n   public Object resolveParameter(ParameterContext parameterContext,\n       ExtensionContext extensionContext) throws ParameterResolutionException {\n-    Object requiredTestInstance = extensionContext.getRequiredTestInstance();\n-    List<String> namespaces = null;\n-\n-    if (requiredTestInstance.getClass().isAnnotationPresent(ITNamespaces.class)) {\n-      ITNamespaces itNsTag = requiredTestInstance.getClass().getAnnotation(ITNamespaces.class);\n-      logger.info(\"Creating {0} unique namespaces for the test\", itNsTag.numofns());\n-      namespaces = new ArrayList();\n-      for (int i = 1; i <= itNsTag.numofns(); i++) {\n-        String namespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-            \"Failed to create unique namespace due to ApiException\");\n-        namespaces.add(namespace);\n-        logger.info(\"Created a new namespace called {0}\", namespace);\n-      }\n+    Namespaces ns = parameterContext.findAnnotation(Namespaces.class).get();\n+    List<String> namespaces = new ArrayList();\n+    for (int i = 1; i <= ns.value(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ=="}, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyNzk4MQ==", "bodyText": "ah ok, i see, thanks, please ignore", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413127981", "createdAt": "2020-04-22T16:24:45Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -85,21 +89,20 @@ public boolean supportsParameter(ParameterContext parameterContext,\n   @Override\n   public Object resolveParameter(ParameterContext parameterContext,\n       ExtensionContext extensionContext) throws ParameterResolutionException {\n-    Object requiredTestInstance = extensionContext.getRequiredTestInstance();\n-    List<String> namespaces = null;\n-\n-    if (requiredTestInstance.getClass().isAnnotationPresent(ITNamespaces.class)) {\n-      ITNamespaces itNsTag = requiredTestInstance.getClass().getAnnotation(ITNamespaces.class);\n-      logger.info(\"Creating {0} unique namespaces for the test\", itNsTag.numofns());\n-      namespaces = new ArrayList();\n-      for (int i = 1; i <= itNsTag.numofns(); i++) {\n-        String namespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-            \"Failed to create unique namespace due to ApiException\");\n-        namespaces.add(namespace);\n-        logger.info(\"Created a new namespace called {0}\", namespace);\n-      }\n+    Namespaces ns = parameterContext.findAnnotation(Namespaces.class).get();\n+    List<String> namespaces = new ArrayList();\n+    for (int i = 1; i <= ns.value(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ=="}, "originalCommit": {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODE0MzkyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowMDowMVrOGKGQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNTo0M1rOGKG3rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MTU2MA==", "bodyText": "It's a small point, but you changed \"reusable\" from the correct spelling to an incorrect one.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413241560", "createdAt": "2020-04-22T19:00:01Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -119,24 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n    */\n   @BeforeAll\n-  public static void initAll() {\n-    // create standard, reusable retry/backoff policy\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusbale retry/backoff policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eca58126d744529ca18235b9257e01b8452f77a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTUwMA==", "bodyText": "Thanks for catching that. Your eyes are sharp :-)\nFixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413251500", "createdAt": "2020-04-22T19:15:43Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -119,24 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n    */\n   @BeforeAll\n-  public static void initAll() {\n-    // create standard, reusable retry/backoff policy\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusbale retry/backoff policy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MTU2MA=="}, "originalCommit": {"oid": "1eca58126d744529ca18235b9257e01b8452f77a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODE1Njk0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowMjo1NVrOGKGYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNTo1M1rOGKG4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MzUwOQ==", "bodyText": "replica sets", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413243509", "createdAt": "2020-04-22T19:02:55Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -975,12 +1239,46 @@ public static boolean deleteService(String name, String namespace) {\n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"service in background!\");\n+          + \"service in background!\");\n     }\n \n     return true;\n   }\n \n+  // --------------------------- jobs ---------------------------\n+  /**\n+   * Get a list of all jobs in the given namespace.\n+   *\n+   * @param namespace in which to list the jobs\n+   * @return V1JobList of jobs from Kubernetes cluster\n+   */\n+  public static V1JobList listJobs(String namespace) {\n+    KubernetesApiResponse<V1JobList> list = jobClient.list(namespace);\n+    if (list.isSuccess()) {\n+      return list.getObject();\n+    } else {\n+      logger.warning(\"Failed to list jobs, status code {0}\", list.getHttpStatusCode());\n+      return null;\n+    }\n+  }\n+\n+  // --------------------------- resplica sets ---------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eca58126d744529ca18235b9257e01b8452f77a"}, "originalPosition": 895}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTYyMw==", "bodyText": "Fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413251623", "createdAt": "2020-04-22T19:15:53Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -975,12 +1239,46 @@ public static boolean deleteService(String name, String namespace) {\n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"service in background!\");\n+          + \"service in background!\");\n     }\n \n     return true;\n   }\n \n+  // --------------------------- jobs ---------------------------\n+  /**\n+   * Get a list of all jobs in the given namespace.\n+   *\n+   * @param namespace in which to list the jobs\n+   * @return V1JobList of jobs from Kubernetes cluster\n+   */\n+  public static V1JobList listJobs(String namespace) {\n+    KubernetesApiResponse<V1JobList> list = jobClient.list(namespace);\n+    if (list.isSuccess()) {\n+      return list.getObject();\n+    } else {\n+      logger.warning(\"Failed to list jobs, status code {0}\", list.getHttpStatusCode());\n+      return null;\n+    }\n+  }\n+\n+  // --------------------------- resplica sets ---------------------------", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MzUwOQ=="}, "originalCommit": {"oid": "1eca58126d744529ca18235b9257e01b8452f77a"}, "originalPosition": 895}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODI5NzQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTozNToyMFrOGKHtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoxMDozMlrOGKJcuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2NTMxMQ==", "bodyText": "i would be find to say @param namespaces injected by JUnit extension", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413265311", "createdAt": "2020-04-22T19:35:20Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -119,24 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc14c0a91bbd396f89cb567bd51424dd271d2fd4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Mzc1Mw==", "bodyText": "Modified it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413293753", "createdAt": "2020-04-22T20:10:32Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -119,24 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2NTMxMQ=="}, "originalCommit": {"oid": "cc14c0a91bbd396f89cb567bd51424dd271d2fd4"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4776, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}