{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTc2ODc5", "number": 1511, "title": "Adding more actions", "bodyText": "", "createdAt": "2020-03-27T21:27:00Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511", "merged": true, "mergeCommit": {"oid": "821f49891aa38351d8319155974b5e8e26432208"}, "closed": true, "closedAt": "2020-03-30T16:43:58Z", "author": {"login": "vanajamukkara"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRv1h0AH2gAyMzk0OTc2ODc5OjgxNmYzZTkzMDNmZjljNzVjNTNjODUwZTE2Zjg4ZmJjMmI1ZmJjY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS2NrcAH2gAyMzk0OTc2ODc5OmY1OTdmZTRkODhiNzgxMTI1MWU2ZmVhN2Q1ZGVjZGU4MjE2MWNlYmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "816f3e9303ff9c75c53c850e16f88fbc2b5fbccd", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/816f3e9303ff9c75c53c850e16f88fbc2b5fbccd", "committedDate": "2020-03-27T12:26:48Z", "message": "adding new actions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjM1MzE3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383235317", "createdAt": "2020-03-27T22:31:40Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78db1ae8e5404174d3644702c67740186fc099de", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/78db1ae8e5404174d3644702c67740186fc099de", "committedDate": "2020-03-28T05:17:34Z", "message": "adding more actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e", "committedDate": "2020-03-28T05:24:16Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzEwNzEz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383310713", "createdAt": "2020-03-28T12:53:18Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1MzoxOFrOF9JQpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1MzoxOFrOF9JQpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTE3NQ==", "bodyText": "We should make a fluent API for the helm chart values", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659175", "createdAt": "2020-03-28T12:53:18Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzEwNzQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383310747", "createdAt": "2020-03-28T12:53:44Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1Mzo0NVrOF9JQ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1Mzo0NVrOF9JQ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTIzMQ==", "bodyText": "Fluent api for domain... I'm willing to help with these :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659231", "createdAt": "2020-03-28T12:53:45Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzEwNzg0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383310784", "createdAt": "2020-03-28T12:54:12Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1NDoxMlrOF9JRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1NDoxMlrOF9JRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTI3Ng==", "bodyText": "Similarly, let's make the tests more expressive.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659276", "createdAt": "2020-03-28T12:54:12Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzEwODQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383310847", "createdAt": "2020-03-28T12:55:03Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1NTowNFrOF9JRZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1NTowNFrOF9JRZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw==", "bodyText": "We have an API for standard types. io.kubernetes.client.openapi.models.V1PersistentVolume", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659367", "createdAt": "2020-03-28T12:55:04Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {\n+        return Traefik.install(valuesYaml);\n+    }\n \n+    /**\n+     * Create Treafik Ingress\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createIngress(String valuesYaml) {\n+        return Traefik.createIngress(valuesYaml);\n+    }\n \n     // -------------------------  namespaces -------------------------------\n \n+    /**\n+     * Create Kubernetes namespace\n+     * @param name the name of the namespace\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createNamespace(String name) {\n         return Namespace.createNamespace(name);\n     }\n \n+    /**\n+     * Create a namespace with unique name\n+     * @return true on success, false otherwise\n+     */\n     public static String createUniqueNamespace() {\n         return Namespace.createUniqueNamespace();\n     }\n \n+    // -------------------------   pv/pvc  ---------------------------------\n+\n+    /**\n+     * Create Kubernetes Persistent Volume using the yaml provided\n+     * @param pvYaml the persistent volume yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolume(String pvYaml) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzEwOTM1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383310935", "createdAt": "2020-03-28T12:56:00Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1NjowMFrOF9JRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1NjowMFrOF9JRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTQ2Nw==", "bodyText": "Similarly, have existing type", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399659467", "createdAt": "2020-03-28T12:56:00Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {\n+        return Traefik.install(valuesYaml);\n+    }\n \n+    /**\n+     * Create Treafik Ingress\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createIngress(String valuesYaml) {\n+        return Traefik.createIngress(valuesYaml);\n+    }\n \n     // -------------------------  namespaces -------------------------------\n \n+    /**\n+     * Create Kubernetes namespace\n+     * @param name the name of the namespace\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createNamespace(String name) {\n         return Namespace.createNamespace(name);\n     }\n \n+    /**\n+     * Create a namespace with unique name\n+     * @return true on success, false otherwise\n+     */\n     public static String createUniqueNamespace() {\n         return Namespace.createUniqueNamespace();\n     }\n \n+    // -------------------------   pv/pvc  ---------------------------------\n+\n+    /**\n+     * Create Kubernetes Persistent Volume using the yaml provided\n+     * @param pvYaml the persistent volume yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolume(String pvYaml) {\n+        return PersistentVolume.create(pvYaml);\n+    }\n+\n+    /**\n+     * Delete the Kubernetes Persistent Volume\n+     * @param pvName the name of the Persistent Volume\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deletePersistentVolume(String pvName) {\n+        return PersistentVolume.delete(pvName);\n+    }\n+\n+    /**\n+     * Create Kubernetes Persistent Volume Claim using the yaml provided\n+     * @param pvcYaml the persistent volume claim yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolumeClaim(String pvcYaml) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzE5Mzgy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383319382", "createdAt": "2020-03-28T14:53:30Z", "commit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDo1MzozMFrOF9J-MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDo1NDoxNFrOF9J-kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDgzMw==", "bodyText": "agree", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399670833", "createdAt": "2020-03-28T14:53:30Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTE3NQ=="}, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDkzMA==", "bodyText": "happy to discuss, but if it is ugly, i would prefer to have a fluent api that hides that ugliness under the covers", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399670930", "createdAt": "2020-03-28T14:54:14Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -14,30 +21,225 @@\n \n     // ----------------------   operator  ---------------------------------\n \n+    /**\n+     * Install WebLogic Kubernetes Operator\n+     * @return true if the operator is successfully installed, false otherwise.\n+     */\n     public static boolean installOperator() {\n         return Operator.install();\n     }\n \n+    /**\n+     * Upgrade existing Operator release\n+     * @param values map with values\n+     * @return true if the operator is successfully upgraded, false otherwise.\n+     */\n+    public static boolean upgradeOperator(HashMap<String, String> values) {\n+        return Operator.upgrade(values);\n+    }\n+\n+    /**\n+     * Makes a REST call to the Operator to scale the domain.\n+     * @param domainUID - domainUid of the domain\n+     * @param clusterName - cluster in the domain to scale\n+     * @param numOfServers - number of servers to scale upto.\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean scaleDomain(String domainUID, String clusterName, int numOfServers) {\n+        return Operator.scaleDomain(domainUID, clusterName, numOfServers);\n+    }\n+\n+    /**\n+     * Delete the Operator release\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteOperator() { return Operator.delete(); }\n+\n     // ----------------------   domain  -----------------------------------\n \n+    /**\n+     * Create domain custom resource from the given domain yaml file.\n+     * @param domainUID\n+     * @param namespace\n+     * @param domainYAML\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createDomainCustomResource(String domainUID, String namespace, String domainYAML) {\n         return Domain.createDomainCustomResource(domainUID, namespace, domainYAML);\n     }\n \n+    /**\n+     * Shutdown the domain\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean shutdown(String domainUID, String namespace) {\n+        return Domain.shutdown(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean restart(String domainUID, String namespace) {\n+        return Domain.restart(domainUID, namespace);\n+    }\n+\n+    /**\n+     *\n+     * @param domainUID\n+     * @param namespace\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean deleteDomainCustomResource(String domainUID, String namespace) {\n+        return Domain.deleteDomainCustomResource(domainUID, namespace);\n+    }\n+\n     // ------------------------   ingress controller ----------------------\n \n+    /**\n+     * Install Traefik Operator\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean installTraefik(String valuesYaml) {\n+        return Traefik.install(valuesYaml);\n+    }\n \n+    /**\n+     * Create Treafik Ingress\n+     * @param valuesYaml values yaml file to be used\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createIngress(String valuesYaml) {\n+        return Traefik.createIngress(valuesYaml);\n+    }\n \n     // -------------------------  namespaces -------------------------------\n \n+    /**\n+     * Create Kubernetes namespace\n+     * @param name the name of the namespace\n+     * @return true on success, false otherwise\n+     */\n     public static boolean createNamespace(String name) {\n         return Namespace.createNamespace(name);\n     }\n \n+    /**\n+     * Create a namespace with unique name\n+     * @return true on success, false otherwise\n+     */\n     public static String createUniqueNamespace() {\n         return Namespace.createUniqueNamespace();\n     }\n \n+    // -------------------------   pv/pvc  ---------------------------------\n+\n+    /**\n+     * Create Kubernetes Persistent Volume using the yaml provided\n+     * @param pvYaml the persistent volume yaml file\n+     * @return true on success, false otherwise\n+     */\n+    public static boolean createPersistentVolume(String pvYaml) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTM2Nw=="}, "originalCommit": {"oid": "6eac929d5d727c4d4f9cccd7d240bbc2a2cb8e7e"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDcwNDMy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383470432", "createdAt": "2020-03-29T23:44:01Z", "commit": {"oid": "1b5653315001c2a42151d3fbd14150cac9264050"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMzo0NDowMVrOF9WPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMzo0NDowMVrOF9WPNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3MTc5Nw==", "bodyText": "do we need the builder? i did a lot of googling and i did not come up with a definitive answer. this seems to be builder pattern, which is almost the same as fluent, but not exactly. i think fluent is more of a static that manages the instance. i don't mind really - i will defer to @rjeberhard and @ddsharpe on this", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r399871797", "createdAt": "2020-03-29T23:44:01Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -7,31 +7,86 @@\n \n public class Helm {\n \n-    public static boolean addRepo(String repoUrl) {\n-        // do something!!\n+    private String chart;\n+    private String name;\n+    private String namespace;\n+    private String repoUrl;\n+    private HashMap<String, String> values;\n+\n+    private Helm(HelmBuilder builder) {\n+        this.chart = builder.chart;\n+        this.name = builder.name;\n+        this.namespace = builder.namespace;\n+        this.repoUrl = builder.repoUrl;\n+        this.values = builder.values;\n+    }\n+\n+    public String getChart() {\n+        return chart;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    public String getRepoUrl() {\n+        return repoUrl;\n+    }\n+\n+    public HashMap<String, String> getValues() {\n+        return values;\n+    }\n+\n+    public boolean install(){\n         return true;\n     }\n \n-    public static boolean installRelease(\n-            String chart,\n-            String name,\n-            HashMap<String, String> values\n-    ) {\n-        // do something !!!\n+    public boolean upgrade(){\n         return true;\n     }\n \n-    public static boolean upgradeRelease(\n-        String chart,\n-        String name,\n-        HashMap<String, String> values\n-    ) {\n-        // do something !!!\n+    public boolean delete(){\n         return true;\n     }\n \n-    public static boolean deleteRelease(String name) {\n+    public boolean addRepo() {\n         return true;\n     }\n \n+    public static class HelmBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5653315001c2a42151d3fbd14150cac9264050"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5653315001c2a42151d3fbd14150cac9264050", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1b5653315001c2a42151d3fbd14150cac9264050", "committedDate": "2020-03-30T07:13:32Z", "message": "using fluent api for Helm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8670afc55953cf42251d0f3d896ae5de965f42d2", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8670afc55953cf42251d0f3d896ae5de965f42d2", "committedDate": "2020-03-30T11:57:44Z", "message": "using fluent api for operatorparams instead of hashmap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNzkzNTAx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#pullrequestreview-383793501", "createdAt": "2020-03-30T12:15:42Z", "commit": {"oid": "8670afc55953cf42251d0f3d896ae5de965f42d2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxNTo0MlrOF9m2Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxNTo0MlrOF9m2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzkyMg==", "bodyText": "fix javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1511#discussion_r400143922", "createdAt": "2020-03-30T12:15:42Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -28,8 +29,8 @@\n      * @param values map with values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8670afc55953cf42251d0f3d896ae5de965f42d2"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f597fe4d88b7811251e6fea7d5decde82161cebd", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f597fe4d88b7811251e6fea7d5decde82161cebd", "committedDate": "2020-03-30T22:26:32Z", "message": "fixing javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4930, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}