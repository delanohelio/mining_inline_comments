{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODMwNzQw", "number": 1664, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1NjoxMVrOD-TuVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozMjowM1rOD_xr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjYxNDYzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjo1NjoxMVrOGYVLiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0ODo0N1rOGay1qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NjAyNQ==", "bodyText": "@sankarpn, @anpanigr, @xiancao... Including all of the pending PR's, it seems like we have three different ways to assert that a pod has been restarted. Let's see if we can come up with a consistent pattern.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r428166025", "createdAt": "2020-05-20T16:56:11Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4167a1ef5d4750bf6f32383a833d2d4f1ef10e3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwMjE4NQ==", "bodyText": "Can you list the other ways to assert that a pod has been restarted? In TestAssertions.java, there is only one assertion related to pod restart.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r428202185", "createdAt": "2020-05-20T17:56:38Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NjAyNQ=="}, "originalCommit": {"oid": "d4167a1ef5d4750bf6f32383a833d2d4f1ef10e3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc2MjU0Ng==", "bodyText": "from yesterday's meeting discussion, the cluster server will be rolling restarted after the resources change. I will use Sankar's assertion method once it is ready.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r428762546", "createdAt": "2020-05-21T16:19:59Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NjAyNQ=="}, "originalCommit": {"oid": "d4167a1ef5d4750bf6f32383a833d2d4f1ef10e3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTA5OA==", "bodyText": "updated the code using verifyRollingRestartOccurred()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749098", "createdAt": "2020-05-26T22:48:47Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NjAyNQ=="}, "originalCommit": {"oid": "d4167a1ef5d4750bf6f32383a833d2d4f1ef10e3"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTg5MjQyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo1ODo0MlrOGanurw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0ODo1N1rOGay16g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NzA4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Test pods were restarted after some properties in server pods changed.\n          \n          \n            \n             * Test pods are restarted after some properties in server pods are changed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430567087", "createdAt": "2020-05-26T16:58:42Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTE2Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749162", "createdAt": "2020-05-26T22:48:57Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NzA4Nw=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTkyMjYwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowNzowN1rOGaoB7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0OToxM1rOGay2TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3MjAxMw==", "bodyText": "Does these tests still needs to be in order?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430572013", "createdAt": "2020-05-26T17:07:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTI2MQ==", "bodyText": "removed the annotation", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749261", "createdAt": "2020-05-26T22:49:13Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3MjAxMw=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTkyMzcwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzowNzoyNVrOGaoCwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0OToyMVrOGay2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3MjIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n          \n          \n            \n            @DisplayName(\"Test pods are restarted after some properties change in server pods are changed\")", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430572224", "createdAt": "2020-05-26T17:07:25Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTI5OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749298", "createdAt": "2020-05-26T22:49:21Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3MjIyNA=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk0MDcyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxMjozMFrOGaoN4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0OTozMFrOGay2og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NTA3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Verify all pods were restarted and back to be ready.\n          \n          \n            \n               * Verify all pods are restarted and back to ready state.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430575074", "createdAt": "2020-05-26T17:12:30Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTM0Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749346", "createdAt": "2020-05-26T22:49:30Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NTA3NA=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk0ODM3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxNDo0OFrOGaoS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0OTo0MFrOGay22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NjM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n          \n          \n            \n               * Test fails if any server pod is not restarted and back to ready state or the compute resources in the patched", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430576371", "createdAt": "2020-05-26T17:14:48Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTQwMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749401", "createdAt": "2020-05-26T22:49:40Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NjM3MQ=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk1MTA0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxNTozMVrOGaoUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0OTo0OFrOGay3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NjgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * domain custom resource do not match the values we planed to add or modify.\n          \n          \n            \n               * domain custom resource do not match the values we planned to add or modify.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430576815", "createdAt": "2020-05-26T17:15:31Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTQ1Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749453", "createdAt": "2020-05-26T22:49:48Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NjgxNQ=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk1MjQ0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxNTo1NFrOGaoVmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo0OTo1NlrOGay3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NzA0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @DisplayName(\"Verify server pods were restarted by changing the resources\")\n          \n          \n            \n              @DisplayName(\"Verify server pods are restarted by changing the resources\")", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430577049", "createdAt": "2020-05-26T17:15:54Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTUwNw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749507", "createdAt": "2020-05-26T22:49:56Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NzA0OQ=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk1OTIxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxNzo1N1rOGaoaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo1MDowN1rOGay3iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3ODIxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertNotNull(domain1, \"domain1 is null\");\n          \n          \n            \n                assertNotNull(domain1, domain1 + \" is null\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430578219", "createdAt": "2020-05-26T17:17:57Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTU3Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749576", "createdAt": "2020-05-26T22:50:07Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3ODIxOQ=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk2MTIwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxODozMFrOGaobZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo1MDoxOFrOGay30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3ODUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n          \n          \n            \n                assertNotNull(domain1.getSpec(), domain1 + \"/spec is null\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430578533", "createdAt": "2020-05-26T17:18:30Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTY0OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749648", "createdAt": "2020-05-26T22:50:18Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3ODUzMw=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTk2MjI4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxODo0OVrOGaocEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo1MDoyNFrOGay3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3ODcwNg==", "bodyText": "same as above rest of the class", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430578706", "createdAt": "2020-05-26T17:18:49Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTY5Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749692", "createdAt": "2020-05-26T22:50:24Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3ODcwNg=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAwMjM3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozMDoxMlrOGao1wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo1MDozMlrOGay4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NTI4MQ==", "bodyText": "This assertion will make sure that the pods - admin server, managed servers are restarted in order and comes to ready state.\nSo you don't need to check anything after doing addServerPodResources(cpuLimit, cpuRequest)\nPlease see the example in ItMiiConfigMapOverride test testAddMiiSystemResources on how to use this assertion.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430585281", "createdAt": "2020-05-26T17:30:12Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTc1Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749753", "createdAt": "2020-05-26T22:50:32Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NTI4MQ=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAwNTUwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozMTowMVrOGao3nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjo1MDozOVrOGay4UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NTc1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Checking that the server pod resources cpu request was updated correctly\");\n          \n          \n            \n                logger.info(\"Checking that the server pod resources cpu request are updated correctly\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430585757", "createdAt": "2020-05-26T17:31:01Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);\n+\n+    // get the patched domain custom resource\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get new server pod compute resources limits\n+    limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out server pod compute resource limits\n+    logger.info(\"New value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources limits got updated\n+    logger.info(\"Checking that the server pod resources cpu limit was updated correctly\");\n+    assertNotNull(limits.get(\"cpu\"), \"domain1/spec/serverPod/resources/limits/cpu is null\");\n+    assertEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+        String.format(\"server pod compute resource limits were not updated correctly, set cpu limit to %s, got %s\",\n+            cpuLimit, limits.get(\"cpu\").getNumber().toString()));\n+\n+    // get new server pod compute resources requests\n+    requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out server pod compute resource requests\n+    logger.info(\"New value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources requests got updated\n+    logger.info(\"Checking that the server pod resources cpu request was updated correctly\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0OTc3Nw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430749777", "createdAt": "2020-05-26T22:50:39Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);\n+\n+    // get the patched domain custom resource\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get new server pod compute resources limits\n+    limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out server pod compute resource limits\n+    logger.info(\"New value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources limits got updated\n+    logger.info(\"Checking that the server pod resources cpu limit was updated correctly\");\n+    assertNotNull(limits.get(\"cpu\"), \"domain1/spec/serverPod/resources/limits/cpu is null\");\n+    assertEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+        String.format(\"server pod compute resource limits were not updated correctly, set cpu limit to %s, got %s\",\n+            cpuLimit, limits.get(\"cpu\").getNumber().toString()));\n+\n+    // get new server pod compute resources requests\n+    requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out server pod compute resource requests\n+    logger.info(\"New value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources requests got updated\n+    logger.info(\"Checking that the server pod resources cpu request was updated correctly\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NTc1Nw=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAwOTM1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozMjowM1rOGao55g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDo0NToxOVrOGa5QIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NjM0Mg==", "bodyText": "This has to be done right after checkPodExists(adminServerPodName, domainUid, domainNamespace);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430586342", "createdAt": "2020-05-26T17:32:03Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);\n+\n+    // get the patched domain custom resource\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get new server pod compute resources limits\n+    limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out server pod compute resource limits\n+    logger.info(\"New value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources limits got updated\n+    logger.info(\"Checking that the server pod resources cpu limit was updated correctly\");\n+    assertNotNull(limits.get(\"cpu\"), \"domain1/spec/serverPod/resources/limits/cpu is null\");\n+    assertEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+        String.format(\"server pod compute resource limits were not updated correctly, set cpu limit to %s, got %s\",\n+            cpuLimit, limits.get(\"cpu\").getNumber().toString()));\n+\n+    // get new server pod compute resources requests\n+    requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out server pod compute resource requests\n+    logger.info(\"New value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources requests got updated\n+    logger.info(\"Checking that the server pod resources cpu request was updated correctly\");\n+    assertNotNull(requests.get(\"cpu\"), \"domain1/spec/serverPod/resources/requests/cpu is null\");\n+    assertEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+        String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n+            cpuRequest, requests.get(\"cpu\").getNumber().toString()));\n+  }\n+\n+  /**\n+   * Create a model in image domain and verify the server pods are ready.\n+   */\n+  private static void createAndVerifyMiiDomain() {\n+\n+    // get the pre-built image created by IntegrationTestWatcher\n+    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .resources(new V1ResourceRequirements()\n+                    .limits(new HashMap<>())\n+                    .requests(new HashMap<>())))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\"))\n+            .addClustersItem(new Cluster()\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczODgyOQ==", "bodyText": "why?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430738829", "createdAt": "2020-05-26T22:19:03Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);\n+\n+    // get the patched domain custom resource\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get new server pod compute resources limits\n+    limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out server pod compute resource limits\n+    logger.info(\"New value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources limits got updated\n+    logger.info(\"Checking that the server pod resources cpu limit was updated correctly\");\n+    assertNotNull(limits.get(\"cpu\"), \"domain1/spec/serverPod/resources/limits/cpu is null\");\n+    assertEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+        String.format(\"server pod compute resource limits were not updated correctly, set cpu limit to %s, got %s\",\n+            cpuLimit, limits.get(\"cpu\").getNumber().toString()));\n+\n+    // get new server pod compute resources requests\n+    requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out server pod compute resource requests\n+    logger.info(\"New value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources requests got updated\n+    logger.info(\"Checking that the server pod resources cpu request was updated correctly\");\n+    assertNotNull(requests.get(\"cpu\"), \"domain1/spec/serverPod/resources/requests/cpu is null\");\n+    assertEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+        String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n+            cpuRequest, requests.get(\"cpu\").getNumber().toString()));\n+  }\n+\n+  /**\n+   * Create a model in image domain and verify the server pods are ready.\n+   */\n+  private static void createAndVerifyMiiDomain() {\n+\n+    // get the pre-built image created by IntegrationTestWatcher\n+    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .resources(new V1ResourceRequirements()\n+                    .limits(new HashMap<>())\n+                    .requests(new HashMap<>())))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\"))\n+            .addClustersItem(new Cluster()\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NjM0Mg=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0NDYwMw==", "bodyText": "The services are created right after the pod is created. If there was a problem in creating the services for admin server the operator will not create managed server pods. But the test code won't check service existence for admin server pod until the managed server are ready but that will never happen. The test will fail with a timedout condition waiting for managed server pod when in fact it should fail for non existence service for admin server", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430844603", "createdAt": "2020-05-27T04:02:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);\n+\n+    // get the patched domain custom resource\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get new server pod compute resources limits\n+    limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out server pod compute resource limits\n+    logger.info(\"New value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources limits got updated\n+    logger.info(\"Checking that the server pod resources cpu limit was updated correctly\");\n+    assertNotNull(limits.get(\"cpu\"), \"domain1/spec/serverPod/resources/limits/cpu is null\");\n+    assertEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+        String.format(\"server pod compute resource limits were not updated correctly, set cpu limit to %s, got %s\",\n+            cpuLimit, limits.get(\"cpu\").getNumber().toString()));\n+\n+    // get new server pod compute resources requests\n+    requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out server pod compute resource requests\n+    logger.info(\"New value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources requests got updated\n+    logger.info(\"Checking that the server pod resources cpu request was updated correctly\");\n+    assertNotNull(requests.get(\"cpu\"), \"domain1/spec/serverPod/resources/requests/cpu is null\");\n+    assertEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+        String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n+            cpuRequest, requests.get(\"cpu\").getNumber().toString()));\n+  }\n+\n+  /**\n+   * Create a model in image domain and verify the server pods are ready.\n+   */\n+  private static void createAndVerifyMiiDomain() {\n+\n+    // get the pre-built image created by IntegrationTestWatcher\n+    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .resources(new V1ResourceRequirements()\n+                    .limits(new HashMap<>())\n+                    .requests(new HashMap<>())))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\"))\n+            .addClustersItem(new Cluster()\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NjM0Mg=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1NDE3OA==", "bodyText": "The test checks the admin service existence after the admin server pod is ready, not after the managed server pod is ready.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1664#discussion_r430854178", "createdAt": "2020-05-27T04:45:19Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test pods were restarted after some properties in server pods changed.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test pods were restarted after some properties change in server pods changed\")\n+@IntegrationTest\n+class ItPodsRestart implements LoggedTest {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static final String domainUid = \"domain1\";\n+  private static final String clusterName = \"cluster-1\";\n+  private static final int replicaCount = 2;\n+  private static final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static final String managedServerPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  /**\n+   * Get namespaces for operator and WebLogic domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a basic model in image domain\n+    createAndVerifyMiiDomain();\n+  }\n+\n+  /**\n+   * Add/Modify server pod resources by patching the domain custom resource.\n+   * Verify all pods were restarted and back to be ready.\n+   * The resources tested: resources: limits: cpu: \"1\", resources: requests: cpu: \"0.5\"\n+   * Test fails if any server pod was not restarted and back to be ready or the compute resources in the patched\n+   * domain custom resource do not match the values we planed to add or modify.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods were restarted by changing the resources\")\n+  public void testServerPodsRestartByChangingResource() {\n+\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get the current server pod compute resource limit\n+    Map<String, Quantity> limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out current server pod compute resource limits\n+    logger.info(\"Current value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the current server pod compute resource requests\n+    Map<String, Quantity> requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out current server pod compute resource requests\n+    logger.info(\"Current value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.toString()));\n+\n+    // get the admin server pod original creation timestamp\n+    logger.info(\"Getting admin server pod original creation timestamp\");\n+    String adminPodOriginalTimestamp =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+            String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                adminServerPodName, domainNamespace));\n+\n+    // get the managed server pods original creation timestamps\n+    logger.info(\"Getting managed server pods original creation timestamps\");\n+    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodOriginalTimestampList.add(\n+          assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName),\n+              String.format(\"getPodCreationTimestamp failed with ApiException for pod %s in namespace %s\",\n+                  managedServerPodName, domainNamespace)));\n+    }\n+\n+    // add the new server pod compute resources limits: cpu: 1, requests: cpu: 0.5\n+    String cpuLimit = \"1\";\n+    String cpuRequest = \"0.5\";\n+\n+    // verify if cpu limit was set then the new value should be different than the original value\n+    if (limits.get(\"cpu\") != null) {\n+      assertNotEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+          String.format(\"server pod compute resources cpu limit is already set to %s, set cpu limit to \"\n+              + \"a different value\", cpuLimit));\n+    }\n+\n+    // verify if cpu request was set then the new value should be different than the original value\n+    if (requests.get(\"cpu\") != null) {\n+      assertNotEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+          String.format(\"server pod compute resources cpu request is already set to %s, set cpu request to \"\n+              + \"a different value\", cpuRequest));\n+    }\n+\n+    // add/modify the server pod resources by patching the domain custom resource\n+    assertTrue(addServerPodResources(cpuLimit, cpuRequest),\n+        String.format(\"Failed to add server pod compute resources for domain {0} in namespace {1}\",\n+            domainUid, domainNamespace));\n+\n+    // verify the admin server pod was restarted\n+    checkPodRestarted(domainUid, domainNamespace, adminServerPodName, adminPodOriginalTimestamp);\n+\n+    // check that the admin server pod is back to be ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify the managed server pods were rolling restarted and back to be ready\n+    Map<String, String> managedServerPodsWithTimeStamps = new HashMap<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPrefix + i;\n+      managedServerPodsWithTimeStamps.put(managedServerPodName, managedServerPodOriginalTimestampList.get(i - 1));\n+    }\n+    logger.info(\"Verifying rolling restart occurred for managed servers {0} in namespace {1}\",\n+        managedServerPodsWithTimeStamps.keySet(), domainNamespace);\n+    verifyRollingRestartOccurred(managedServerPodsWithTimeStamps, 1, domainNamespace);\n+\n+    // get the patched domain custom resource\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+\n+    assertNotNull(domain1, \"domain1 is null\");\n+    assertNotNull(domain1.getSpec(), \"domain1/spec is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), \"domain1/spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getResources(), \"domain1/spec/serverPod/resources is null\");\n+\n+    // get new server pod compute resources limits\n+    limits = domain1.getSpec().getServerPod().getResources().getLimits();\n+    assertNotNull(limits, \"domain1/spec/serverPod/resources/limits is null\");\n+\n+    // print out server pod compute resource limits\n+    logger.info(\"New value for server pod compute resource limits:\");\n+    limits.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources limits got updated\n+    logger.info(\"Checking that the server pod resources cpu limit was updated correctly\");\n+    assertNotNull(limits.get(\"cpu\"), \"domain1/spec/serverPod/resources/limits/cpu is null\");\n+    assertEquals(limits.get(\"cpu\").getNumber().toString(), cpuLimit,\n+        String.format(\"server pod compute resource limits were not updated correctly, set cpu limit to %s, got %s\",\n+            cpuLimit, limits.get(\"cpu\").getNumber().toString()));\n+\n+    // get new server pod compute resources requests\n+    requests = domain1.getSpec().getServerPod().getResources().getRequests();\n+    assertNotNull(requests, \"domain1/spec/serverPod/resources/requests is null\");\n+\n+    // print out server pod compute resource requests\n+    logger.info(\"New value for server pod compute resource requests:\");\n+    requests.forEach((key, value) -> logger.info(key + \": \" + value.getNumber().toString()));\n+\n+    // verify the server pod resources requests got updated\n+    logger.info(\"Checking that the server pod resources cpu request was updated correctly\");\n+    assertNotNull(requests.get(\"cpu\"), \"domain1/spec/serverPod/resources/requests/cpu is null\");\n+    assertEquals(requests.get(\"cpu\").getNumber().toString(), cpuRequest,\n+        String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n+            cpuRequest, requests.get(\"cpu\").getNumber().toString()));\n+  }\n+\n+  /**\n+   * Create a model in image domain and verify the server pods are ready.\n+   */\n+  private static void createAndVerifyMiiDomain() {\n+\n+    // get the pre-built image created by IntegrationTestWatcher\n+    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .resources(new V1ResourceRequirements()\n+                    .limits(new HashMap<>())\n+                    .requests(new HashMap<>())))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\"))\n+            .addClustersItem(new Cluster()\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NjM0Mg=="}, "originalCommit": {"oid": "97e84f5eeb93af0bb6a96abf1a87274292a77917"}, "originalPosition": 320}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4589, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}