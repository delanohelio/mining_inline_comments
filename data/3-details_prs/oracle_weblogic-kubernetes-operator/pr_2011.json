{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjIwNTYw", "number": 2011, "title": "JRF mii Domain test class/infra for the mii RCU functionality testing", "bodyText": "The latest clean Kind new Jenkins run after addressing Vanaja's comment\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2996/testReport/", "createdAt": "2020-10-26T18:19:10Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011", "merged": true, "mergeCommit": {"oid": "802c93d7707d9c726e49ae6fe8ef051b236de70b"}, "closed": true, "closedAt": "2020-11-05T21:44:24Z", "author": {"login": "maggiehe00"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSf5UOAH2gAyNTEwMjIwNTYwOmY4NzNlMTc0Mzg1MzBjMjQyMGMwYWU1ZDdkOTQwY2JjM2E2ZThjOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZohClAFqTUyNDY0Njg1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f873e17438530c2420c0ae5d7d940cbc3a6e8c8e", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f873e17438530c2420c0ae5d7d940cbc3a6e8c8e", "committedDate": "2020-10-14T16:37:32Z", "message": "first cut for ItJrfMiiDomain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ee92f0bfaaf18e948dd576e46e8d6aaa72f976", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f3ee92f0bfaaf18e948dd576e46e8d6aaa72f976", "committedDate": "2020-10-21T15:30:30Z", "message": "Merge remote-tracking branch 'origin/develop' into jrfmii"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13acc7e288eca91297ae944bf910a68517c4f4e4", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/13acc7e288eca91297ae944bf910a68517c4f4e4", "committedDate": "2020-10-23T19:08:06Z", "message": "Merge remote-tracking branch 'origin/develop' into jrfmii"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00b6465faed9d6985439a88d2dc8e1691f04f6fe", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/00b6465faed9d6985439a88d2dc8e1691f04f6fe", "committedDate": "2020-10-26T18:07:10Z", "message": "minor change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjIzNzk3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#pullrequestreview-517223797", "createdAt": "2020-10-26T22:32:20Z", "commit": {"oid": "00b6465faed9d6985439a88d2dc8e1691f04f6fe"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjozMjoyMFrOHok1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo0Mjo1OFrOHolE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwODU5NA==", "bodyText": "combine checkServiceExists() and checkPodReady()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r512308594", "createdAt": "2020-10-26T22:32:20Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,293 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+//import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create JRF Domain model in image\")\n+  public void testJrfModelInImage() {\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(jrfDomainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUid + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        jrfDomainNamespace,\n+        \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = domainUid + \"-encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        jrfDomainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create RCU access secret\n+    logger.info(\"Create RCU access secret\");\n+    String rcuaccessSecretName = domainUid + \"-rcu-access\";\n+    logger.info(\"Creating RCU access secret: {0}, with prefix: {1}, dbUrl: {2}, schemapassword: {3})\",\n+        rcuaccessSecretName, RCUSCHEMAPREFIX, RCUSCHEMAPASSWORD, dbUrl);\n+    assertDoesNotThrow(() -> createRcuAccessSecret(\n+        rcuaccessSecretName,\n+        jrfDomainNamespace,\n+        RCUSCHEMAPREFIX,\n+        RCUSCHEMAPASSWORD,\n+        dbUrl),\n+        String.format(\"createSecret failed for %s\", rcuaccessSecretName));\n+\n+    logger.info(\"Create OPSS wallet password secret\");\n+    String opsswalletpassSecretName = domainUid + \"-opss-wallet-password-secret\";\n+    assertDoesNotThrow(() -> createOpsswalletpasswordSecret(\n+        opsswalletpassSecretName,\n+        jrfDomainNamespace,\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", opsswalletpassSecretName));\n+\n+    logger.info(\"Create an image with jrf model file\");\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+    jrfMiiImage = createMiiImageAndVerify(\n+        \"jrf-mii-image\",\n+        modelList,\n+        Collections.singletonList(MII_BASIC_APP_NAME),\n+        FMWINFRA_IMAGE_NAME,\n+        FMWINFRA_IMAGE_TAG,\n+        \"JRF\",\n+        false);\n+\n+    // push the image to a registry to make it accessible in multi-node cluster\n+    dockerLoginAndPushImageToRegistry(jrfMiiImage);\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+        jrfDomainNamespace,\n+        adminSecretName,\n+        OCIR_SECRET_NAME,\n+        encryptionSecretName,\n+        rcuaccessSecretName,\n+        opsswalletpassSecretName,\n+        replicaCount,\n+        jrfMiiImage);\n+\n+    // create model in image domain\n+    createDomainAndVerify(domain, jrfDomainNamespace);\n+\n+    //check admin service created\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, jrfDomainNamespace);\n+    checkServiceExists(adminServerPodName, jrfDomainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00b6465faed9d6985439a88d2dc8e1691f04f6fe"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwODcwNA==", "bodyText": "combine checkServiceExists() and checkPodReady()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r512308704", "createdAt": "2020-10-26T22:32:36Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,293 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+//import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create JRF Domain model in image\")\n+  public void testJrfModelInImage() {\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(jrfDomainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUid + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        jrfDomainNamespace,\n+        \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = domainUid + \"-encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        jrfDomainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create RCU access secret\n+    logger.info(\"Create RCU access secret\");\n+    String rcuaccessSecretName = domainUid + \"-rcu-access\";\n+    logger.info(\"Creating RCU access secret: {0}, with prefix: {1}, dbUrl: {2}, schemapassword: {3})\",\n+        rcuaccessSecretName, RCUSCHEMAPREFIX, RCUSCHEMAPASSWORD, dbUrl);\n+    assertDoesNotThrow(() -> createRcuAccessSecret(\n+        rcuaccessSecretName,\n+        jrfDomainNamespace,\n+        RCUSCHEMAPREFIX,\n+        RCUSCHEMAPASSWORD,\n+        dbUrl),\n+        String.format(\"createSecret failed for %s\", rcuaccessSecretName));\n+\n+    logger.info(\"Create OPSS wallet password secret\");\n+    String opsswalletpassSecretName = domainUid + \"-opss-wallet-password-secret\";\n+    assertDoesNotThrow(() -> createOpsswalletpasswordSecret(\n+        opsswalletpassSecretName,\n+        jrfDomainNamespace,\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", opsswalletpassSecretName));\n+\n+    logger.info(\"Create an image with jrf model file\");\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+    jrfMiiImage = createMiiImageAndVerify(\n+        \"jrf-mii-image\",\n+        modelList,\n+        Collections.singletonList(MII_BASIC_APP_NAME),\n+        FMWINFRA_IMAGE_NAME,\n+        FMWINFRA_IMAGE_TAG,\n+        \"JRF\",\n+        false);\n+\n+    // push the image to a registry to make it accessible in multi-node cluster\n+    dockerLoginAndPushImageToRegistry(jrfMiiImage);\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+        jrfDomainNamespace,\n+        adminSecretName,\n+        OCIR_SECRET_NAME,\n+        encryptionSecretName,\n+        rcuaccessSecretName,\n+        opsswalletpassSecretName,\n+        replicaCount,\n+        jrfMiiImage);\n+\n+    // create model in image domain\n+    createDomainAndVerify(domain, jrfDomainNamespace);\n+\n+    //check admin service created\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, jrfDomainNamespace);\n+    checkServiceExists(adminServerPodName, jrfDomainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, jrfDomainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, jrfDomainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed service {0} is created in namespace {1}\",\n+          managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n+      checkServiceExists(managedServerPrefix + i + \"-c1\", jrfDomainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00b6465faed9d6985439a88d2dc8e1691f04f6fe"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwOTY1MQ==", "bodyText": "Need javadoc.  Step-by-step information for  the usecase.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r512309651", "createdAt": "2020-10-26T22:35:05Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,293 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+//import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00b6465faed9d6985439a88d2dc8e1691f04f6fe"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxMjUyOQ==", "bodyText": "Verify few JRF scenarios.  Check accessibility of default JRF application or check em console.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r512312529", "createdAt": "2020-10-26T22:42:58Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,293 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+//import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create JRF Domain model in image\")\n+  public void testJrfModelInImage() {\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(jrfDomainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUid + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        jrfDomainNamespace,\n+        \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = domainUid + \"-encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        jrfDomainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create RCU access secret\n+    logger.info(\"Create RCU access secret\");\n+    String rcuaccessSecretName = domainUid + \"-rcu-access\";\n+    logger.info(\"Creating RCU access secret: {0}, with prefix: {1}, dbUrl: {2}, schemapassword: {3})\",\n+        rcuaccessSecretName, RCUSCHEMAPREFIX, RCUSCHEMAPASSWORD, dbUrl);\n+    assertDoesNotThrow(() -> createRcuAccessSecret(\n+        rcuaccessSecretName,\n+        jrfDomainNamespace,\n+        RCUSCHEMAPREFIX,\n+        RCUSCHEMAPASSWORD,\n+        dbUrl),\n+        String.format(\"createSecret failed for %s\", rcuaccessSecretName));\n+\n+    logger.info(\"Create OPSS wallet password secret\");\n+    String opsswalletpassSecretName = domainUid + \"-opss-wallet-password-secret\";\n+    assertDoesNotThrow(() -> createOpsswalletpasswordSecret(\n+        opsswalletpassSecretName,\n+        jrfDomainNamespace,\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", opsswalletpassSecretName));\n+\n+    logger.info(\"Create an image with jrf model file\");\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+    jrfMiiImage = createMiiImageAndVerify(\n+        \"jrf-mii-image\",\n+        modelList,\n+        Collections.singletonList(MII_BASIC_APP_NAME),\n+        FMWINFRA_IMAGE_NAME,\n+        FMWINFRA_IMAGE_TAG,\n+        \"JRF\",\n+        false);\n+\n+    // push the image to a registry to make it accessible in multi-node cluster\n+    dockerLoginAndPushImageToRegistry(jrfMiiImage);\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+        jrfDomainNamespace,\n+        adminSecretName,\n+        OCIR_SECRET_NAME,\n+        encryptionSecretName,\n+        rcuaccessSecretName,\n+        opsswalletpassSecretName,\n+        replicaCount,\n+        jrfMiiImage);\n+\n+    // create model in image domain\n+    createDomainAndVerify(domain, jrfDomainNamespace);\n+\n+    //check admin service created\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, jrfDomainNamespace);\n+    checkServiceExists(adminServerPodName, jrfDomainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, jrfDomainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, jrfDomainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed service {0} is created in namespace {1}\",\n+          managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n+      checkServiceExists(managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n+    }\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n+      checkPodReady(managedServerPrefix + i + \"-c1\", domainUid, jrfDomainNamespace);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00b6465faed9d6985439a88d2dc8e1691f04f6fe"}, "originalPosition": 234}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02d688d255b6715423cc257aa5f250f32c0c0cb", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f02d688d255b6715423cc257aa5f250f32c0c0cb", "committedDate": "2020-10-29T17:21:51Z", "message": "addressing the review comments, adding em console verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b2fee8593c131ff3d15625ee6723b2a366a1c8", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/35b2fee8593c131ff3d15625ee6723b2a366a1c8", "committedDate": "2020-10-29T17:25:43Z", "message": "Merge remote-tracking branch 'origin/develop' into jrfmii"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/48fd9df6f316b2337231e83a18dbd4bb0921615e", "committedDate": "2020-11-02T22:54:51Z", "message": "use default -ext as service suffix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTA0OTU0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#pullrequestreview-523504954", "createdAt": "2020-11-04T16:02:40Z", "commit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzAzMjU5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#pullrequestreview-523703259", "createdAt": "2020-11-04T20:17:06Z", "commit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoxNzowNlrOHtoL0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMjo1N1rOHtoXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNjM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Verify Pod is ready and service Exists for both admin server and managed servers.\n          \n          \n            \n               * Verify Pod is ready and service exists for both admin server and managed servers.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r517606355", "createdAt": "2020-11-04T20:17:06Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,327 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.appAccessibleInPod;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  /**\n+   * Create a basic JRF model in image domain.\n+   * Verify Pod is ready and service Exists for both admin server and managed servers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNjU3Mg==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r517606572", "createdAt": "2020-11-04T20:17:31Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,327 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.appAccessibleInPod;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNjY3Mg==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r517606672", "createdAt": "2020-11-04T20:17:44Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,327 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.appAccessibleInPod;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwODU3Mg==", "bodyText": "add a message when it fails", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r517608572", "createdAt": "2020-11-04T20:21:37Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,327 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.appAccessibleInPod;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  /**\n+   * Create a basic JRF model in image domain.\n+   * Verify Pod is ready and service Exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Create JRF Domain model in image\")\n+  public void testJrfModelInImage() {\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(jrfDomainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUid + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        jrfDomainNamespace,\n+        \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = domainUid + \"-encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        jrfDomainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create RCU access secret\n+    logger.info(\"Create RCU access secret\");\n+    String rcuaccessSecretName = domainUid + \"-rcu-access\";\n+    logger.info(\"Creating RCU access secret: {0}, with prefix: {1}, dbUrl: {2}, schemapassword: {3})\",\n+        rcuaccessSecretName, RCUSCHEMAPREFIX, RCUSCHEMAPASSWORD, dbUrl);\n+    assertDoesNotThrow(() -> createRcuAccessSecret(\n+        rcuaccessSecretName,\n+        jrfDomainNamespace,\n+        RCUSCHEMAPREFIX,\n+        RCUSCHEMAPASSWORD,\n+        dbUrl),\n+        String.format(\"createSecret failed for %s\", rcuaccessSecretName));\n+\n+    logger.info(\"Create OPSS wallet password secret\");\n+    String opsswalletpassSecretName = domainUid + \"-opss-wallet-password-secret\";\n+    assertDoesNotThrow(() -> createOpsswalletpasswordSecret(\n+        opsswalletpassSecretName,\n+        jrfDomainNamespace,\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", opsswalletpassSecretName));\n+\n+    logger.info(\"Create an image with jrf model file\");\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+    jrfMiiImage = createMiiImageAndVerify(\n+        \"jrf-mii-image\",\n+        modelList,\n+        Collections.singletonList(MII_BASIC_APP_NAME),\n+        FMWINFRA_IMAGE_NAME,\n+        FMWINFRA_IMAGE_TAG,\n+        \"JRF\",\n+        false);\n+\n+    // push the image to a registry to make it accessible in multi-node cluster\n+    dockerLoginAndPushImageToRegistry(jrfMiiImage);\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+        jrfDomainNamespace,\n+        adminSecretName,\n+        OCIR_SECRET_NAME,\n+        encryptionSecretName,\n+        rcuaccessSecretName,\n+        opsswalletpassSecretName,\n+        replicaCount,\n+        jrfMiiImage);\n+\n+    // create model in image domain\n+    createDomainAndVerify(domain, jrfDomainNamespace);\n+\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, jrfDomainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i + \"-c1\", domainUid, jrfDomainNamespace);\n+    }\n+\n+    //check access to the em console: http://hostname:port/em\n+    int nodePort = getServiceNodePort(\n+           jrfDomainNamespace, getExternalServicePodName(adminServerPodName), \"default\");\n+    assertTrue(nodePort != -1,\n+          \"Could not get the default external service node port\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    String curlCmd1 = \"curl -s -L --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/em --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd1);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd1, 5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTI3NQ==", "bodyText": "doesn't look like you are calling this method, delete it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#discussion_r517609275", "createdAt": "2020-11-04T20:22:57Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItJrfMiiDomain.java", "diffHunk": "@@ -0,0 +1,327 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.Opss;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_APP_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.appAccessibleInPod;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createMiiImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOpsswalletpasswordSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuAccessSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.setupDBandRCUschema;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@DisplayName(\"Test to a create JRF model in image domain and start the domain\")\n+@IntegrationTest\n+public class ItJrfMiiDomain {\n+\n+  private static String dbNamespace = null;\n+  private static String opNamespace = null;\n+  private static String jrfDomainNamespace = null;\n+  private static String jrfMiiImage = null;\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfdomainmii\";\n+  private static final String ORACLEDBURLPREFIX = \"oracledb.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static final String modelFile = \"model-singleclusterdomain-sampleapp-jrf.yaml\";\n+\n+  private static String dbUrl = null;\n+  private static LoggingFacade logger = null;\n+\n+  private final String domainUid = \"jrfdomain-mii\";\n+  //private final String wlSecretName = domainUid + \"-weblogic-credentials\";\n+  //private final String rcuSecretName = domainUid + \"-rcu-credentials\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    jrfDomainNamespace = namespaces.get(2);\n+\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    assertDoesNotThrow(() -> setupDBandRCUschema(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, 0, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, jrfDomainNamespace);\n+\n+    logger.info(\"For ItJrfMiiDomain using DB image: {0}, FMW image {1}\",\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+\n+  }\n+\n+  /**\n+   * Create a basic JRF model in image domain.\n+   * Verify Pod is ready and service Exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Create JRF Domain model in image\")\n+  public void testJrfModelInImage() {\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    // this secret is used only for non-kind cluster\n+    createOcirRepoSecret(jrfDomainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = domainUid + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        jrfDomainNamespace,\n+        \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = domainUid + \"-encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        jrfDomainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create RCU access secret\n+    logger.info(\"Create RCU access secret\");\n+    String rcuaccessSecretName = domainUid + \"-rcu-access\";\n+    logger.info(\"Creating RCU access secret: {0}, with prefix: {1}, dbUrl: {2}, schemapassword: {3})\",\n+        rcuaccessSecretName, RCUSCHEMAPREFIX, RCUSCHEMAPASSWORD, dbUrl);\n+    assertDoesNotThrow(() -> createRcuAccessSecret(\n+        rcuaccessSecretName,\n+        jrfDomainNamespace,\n+        RCUSCHEMAPREFIX,\n+        RCUSCHEMAPASSWORD,\n+        dbUrl),\n+        String.format(\"createSecret failed for %s\", rcuaccessSecretName));\n+\n+    logger.info(\"Create OPSS wallet password secret\");\n+    String opsswalletpassSecretName = domainUid + \"-opss-wallet-password-secret\";\n+    assertDoesNotThrow(() -> createOpsswalletpasswordSecret(\n+        opsswalletpassSecretName,\n+        jrfDomainNamespace,\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", opsswalletpassSecretName));\n+\n+    logger.info(\"Create an image with jrf model file\");\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+    jrfMiiImage = createMiiImageAndVerify(\n+        \"jrf-mii-image\",\n+        modelList,\n+        Collections.singletonList(MII_BASIC_APP_NAME),\n+        FMWINFRA_IMAGE_NAME,\n+        FMWINFRA_IMAGE_TAG,\n+        \"JRF\",\n+        false);\n+\n+    // push the image to a registry to make it accessible in multi-node cluster\n+    dockerLoginAndPushImageToRegistry(jrfMiiImage);\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+        jrfDomainNamespace,\n+        adminSecretName,\n+        OCIR_SECRET_NAME,\n+        encryptionSecretName,\n+        rcuaccessSecretName,\n+        opsswalletpassSecretName,\n+        replicaCount,\n+        jrfMiiImage);\n+\n+    // create model in image domain\n+    createDomainAndVerify(domain, jrfDomainNamespace);\n+\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, jrfDomainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i + \"-c1\", jrfDomainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i + \"-c1\", domainUid, jrfDomainNamespace);\n+    }\n+\n+    //check access to the em console: http://hostname:port/em\n+    int nodePort = getServiceNodePort(\n+           jrfDomainNamespace, getExternalServicePodName(adminServerPodName), \"default\");\n+    assertTrue(nodePort != -1,\n+          \"Could not get the default external service node port\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    String curlCmd1 = \"curl -s -L --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/em --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd1);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd1, 5));\n+    logger.info(\"EM console is accessible thru default service\");\n+  }\n+\n+  /**\n+   * Construct a domain object with the given parameters that can be used to create a domain resource.\n+   */\n+  private Domain createDomainResource(\n+      String domainUid, String domNamespace, String adminSecretName,\n+      String repoSecretName, String encryptionSecretName, String rcuAccessSecretName,\n+      String opssWalletPasswordSecretName, int replicaCount, String miiImage) {\n+    // create the domain CR\n+    Domain domain = new Domain()\n+            .apiVersion(DOMAIN_API_VERSION)\n+            .kind(\"Domain\")\n+            .metadata(new V1ObjectMeta()\n+                    .name(domainUid)\n+                    .namespace(domNamespace))\n+            .spec(new DomainSpec()\n+                    .domainUid(domainUid)\n+                    .domainHomeSourceType(\"FromModel\")\n+                    .image(miiImage)\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .addImagePullSecretsItem(new V1LocalObjectReference()\n+                            .name(repoSecretName))\n+                    .webLogicCredentialsSecret(new V1SecretReference()\n+                            .name(adminSecretName)\n+                            .namespace(domNamespace))\n+                    .includeServerOutInPodLog(true)\n+                    .serverStartPolicy(\"IF_NEEDED\")\n+                    .serverPod(new ServerPod()\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"JAVA_OPTIONS\")\n+                                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"USER_MEM_ARGS\")\n+                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+                    .adminServer(new AdminServer()\n+                            .serverStartState(\"RUNNING\")\n+                            .adminService(new AdminService()\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default\")\n+                                            .nodePort(0))))\n+                    .addClustersItem(new Cluster()\n+                            .clusterName(\"cluster-1\")\n+                            .replicas(replicaCount)\n+                            .serverStartState(\"RUNNING\"))\n+                    .configuration(new Configuration()\n+                            .opss(new Opss()\n+                                   .walletPasswordSecret(opssWalletPasswordSecretName))\n+                            .model(new Model()\n+                                    .domainType(\"JRF\")\n+                                    .runtimeEncryptionSecret(encryptionSecretName))\n+                            .addSecretsItem(rcuAccessSecretName)\n+                            .introspectorJobActiveDeadlineSeconds(600L)));\n+\n+    return domain;\n+  }\n+\n+  private void checkAppIsRunning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48fd9df6f316b2337231e83a18dbd4bb0921615e"}, "originalPosition": 299}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c595b239ad3e38d7ef36b074a80e604fcf782a46", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c595b239ad3e38d7ef36b074a80e604fcf782a46", "committedDate": "2020-11-05T02:57:55Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679243b623070c9522cbb32f2d15b895c481657d", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/679243b623070c9522cbb32f2d15b895c481657d", "committedDate": "2020-11-05T02:59:51Z", "message": "Merge remote-tracking branch 'origin/develop' into jrfmii"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b8471a38548915076d02c984f965d2762387964", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4b8471a38548915076d02c984f965d2762387964", "committedDate": "2020-11-05T16:06:42Z", "message": "minor change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjQ2ODU4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2011#pullrequestreview-524646858", "createdAt": "2020-11-05T20:37:38Z", "commit": {"oid": "4b8471a38548915076d02c984f965d2762387964"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4046, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}