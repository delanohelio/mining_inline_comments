{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MTEzMTYy", "number": 1886, "title": "Added sample support for Ngnix Load Balancer", "bodyText": "Following are the highlight of the changes ...\na. Updated kubernetes/samples/charts/util/setupLoadBalancer.sh to support new lbtype as \"ngnix\"\nb. Created new directory kubernetes/samples/charts/nginx\nc. kubernetes/samples/charts/ingress-per-domain  to add host based routing for NGINX\nd. Added \"Terminating SSL on Ingress Controller\" section the nginx/README.md", "createdAt": "2020-08-26T19:37:48Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886", "merged": true, "mergeCommit": {"oid": "2e9d2501dbbb2b75edadaabeed1a30af46c03794"}, "closed": true, "closedAt": "2020-09-08T13:51:24Z", "author": {"login": "anpanigr"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCtMbNgH2gAyNDc0MTEzMTYyOmIyZDc5NGY1YmY0ZTBiNDI1NDQwYzFjNTI5NWViODZlNjI4NzQzZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG38FJgFqTQ4NDE2MTE0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b2d794f5bf4e0b425440c1c5295eb86e628743db", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b2d794f5bf4e0b425440c1c5295eb86e628743db", "committedDate": "2020-08-26T15:04:23Z", "message": "Initial check-in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c47ceccdbfe98cb88076ee73293e79ab718435e0", "committedDate": "2020-08-26T19:26:27Z", "message": "Updated doc with SSL termination"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQzMDk4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-475843098", "createdAt": "2020-08-26T20:41:35Z", "commit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0MTozNVrOHHc9xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0MTozNVrOHHc9xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NjY0NQ==", "bodyText": "Add comment above line 29: \"# NGINX specific values\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r477576645", "createdAt": "2020-08-26T20:41:35Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/charts/ingress-per-domain/values.yaml", "diffHunk": "@@ -25,3 +25,7 @@ voyager:\n   webPort: 30305\n   # stats port\n   statsPort: 30315\n+\n+nginx:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQzNTc5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-475843579", "createdAt": "2020-08-26T20:42:17Z", "commit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0MjoxOFrOHHc_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0MjoxOFrOHHc_XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzA1Mg==", "bodyText": "lastest --> latest", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r477577052", "createdAt": "2020-08-26T20:42:18Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,209 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the lastest supported versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQ2Mjk4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-475846298", "createdAt": "2020-08-26T20:46:21Z", "commit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0NjoyMlrOHHdHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0NjoyMlrOHHdHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3OTE2NQ==", "bodyText": "It's a little confusing to include the sets for ListenPort and Name - as these are already set...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r477579165", "createdAt": "2020-08-26T20:46:22Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,209 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the lastest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create ns nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all -n nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Update the NGINX operator\n+After the NGINX operator is installed and running, to change some configuration of the NGINX operator, use `helm upgrade` to achieve this.\n+```\n+$ helm upgrade nginx-operator ingress-nginx/ingress-nginx [flags]\n+```\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing ingress controller.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+\n+#### Path-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using path-based routing. Install a path-based routing ingress controller.\n+```\n+$ kubectl create -f samples/path-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-path created\n+ingress.networking.k8s.io/domain2-ingress-path created\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different paths, as defined in the route section of the `path-routing.yaml` file.\n+\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl http://${HOSTNAME}:${LB_PORT}/domain1/\n+$ curl http://${HOSTNAME}:${LB_PORT}/domain2/\n+```\n+\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('ListenPort', admin_port)\n+set('Name', admin_server_name)\n+set('WeblogicPluginEnabled',true)\n+...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODQ3NTMz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-475847533", "createdAt": "2020-08-26T20:48:18Z", "commit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0ODoxOFrOHHdLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0ODoxOFrOHHdLXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MDEyNQ==", "bodyText": "For context, can you provide an example of when to use this?  Can you note the assumptions in the command line (e.g. assumes nginx-operator is the release name)?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r477580125", "createdAt": "2020-08-26T20:48:18Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,209 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the lastest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create ns nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all -n nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Update the NGINX operator\n+After the NGINX operator is installed and running, to change some configuration of the NGINX operator, use `helm upgrade` to achieve this.\n+```\n+$ helm upgrade nginx-operator ingress-nginx/ingress-nginx [flags]\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODUwNTc3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-475850577", "createdAt": "2020-08-26T20:53:13Z", "commit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo1MzoxM1rOHHdUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo1MzoxM1rOHHdUww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MjUzMQ==", "bodyText": "It'd be helpful to remind folks at this point where the original resource file is located.  Also, you can mention in this step (instead of the next step) that the updated file should be named 'nginx-tls-console.yaml'.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r477582531", "createdAt": "2020-08-26T20:53:13Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,209 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the lastest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create ns nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all -n nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Update the NGINX operator\n+After the NGINX operator is installed and running, to change some configuration of the NGINX operator, use `helm upgrade` to achieve this.\n+```\n+$ helm upgrade nginx-operator ingress-nginx/ingress-nginx [flags]\n+```\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing ingress controller.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+\n+#### Path-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using path-based routing. Install a path-based routing ingress controller.\n+```\n+$ kubectl create -f samples/path-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-path created\n+ingress.networking.k8s.io/domain2-ingress-path created\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different paths, as defined in the route section of the `path-routing.yaml` file.\n+\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl http://${HOSTNAME}:${LB_PORT}/domain1/\n+$ curl http://${HOSTNAME}:${LB_PORT}/domain2/\n+```\n+\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('ListenPort', admin_port)\n+set('Name', admin_server_name)\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Update the Ingress resource with customRequestHeaders value.\n+Replace the string 'weblogic-domain' with namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c47ceccdbfe98cb88076ee73293e79ab718435e0"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b027bcd28195349e6eefeeefbb9877cb266edc1", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2b027bcd28195349e6eefeeefbb9877cb266edc1", "committedDate": "2020-08-26T21:17:07Z", "message": "Review comments on nginx/README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8e336fe4ebf3045e787fbdb77c1fb989fa74f45", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a8e336fe4ebf3045e787fbdb77c1fb989fa74f45", "committedDate": "2020-08-27T13:37:44Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Nzk4MDEx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-476798011", "createdAt": "2020-08-27T14:48:45Z", "commit": {"oid": "a8e336fe4ebf3045e787fbdb77c1fb989fa74f45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0ODo0NlrOHIT7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0ODo0NlrOHIT7rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NzIyOA==", "bodyText": "with namespace -> with the namespace", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478477228", "createdAt": "2020-08-27T14:48:46Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create ns nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all -n nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing ingress controller.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+\n+#### Path-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using path-based routing. Install a path-based routing ingress controller.\n+```\n+$ kubectl create -f samples/path-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-path created\n+ingress.networking.k8s.io/domain2-ingress-path created\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different paths, as defined in the route section of the `path-routing.yaml` file.\n+\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl http://${HOSTNAME}:${LB_PORT}/domain1/\n+$ curl http://${HOSTNAME}:${LB_PORT}/domain2/\n+```\n+\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create a ingress resource file with custom annotation value\n+Save the below configuration as 'nginx-tls-console.yaml' by replacing the string 'weblogic-domain' with namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e336fe4ebf3045e787fbdb77c1fb989fa74f45"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3118c5d1dbc2d093d74e27e798cd139b91dadfe", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c3118c5d1dbc2d093d74e27e798cd139b91dadfe", "committedDate": "2020-08-27T15:29:48Z", "message": "More review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4526b74469de1f2577d80141069f14e606728882", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4526b74469de1f2577d80141069f14e606728882", "committedDate": "2020-08-27T15:53:53Z", "message": "Removed the Path Routing Section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/327cb740284da426ae17ee2518ae685fdb61411a", "committedDate": "2020-08-27T15:54:02Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into lb-nginx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDE2OTYw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-477016960", "createdAt": "2020-08-27T19:27:03Z", "commit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToyNzowNFrOHIeM9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo0ODo1NFrOHIe5Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0NTQ5Mg==", "bodyText": "Traeafik (typo)  -> Traefik\nChange Ingress to lowercase ingress throughout the doc.\nShould this sentence include Nginx? \"We support two Ingress types: Traefik and Voyager.\" (In the WKO docs, we have this, \"Most common ingress controllers, for example Traefik, Voyager, and NGINX,\")", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478645492", "createdAt": "2020-08-27T19:27:04Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/ingress-per-domain/README.md", "diffHunk": "@@ -4,7 +4,7 @@ This chart is for deploying an Ingress resource in front of a WebLogic domain cl\n ## Prerequisites", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0NzY1MA==", "bodyText": "Sample values.yaml -> Sample values.yaml file (make this edit for Voyager and Traefik, also)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478647650", "createdAt": "2020-08-27T19:31:18Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/ingress-per-domain/README.md", "diffHunk": "@@ -52,21 +52,39 @@ voyager:\n   # stats port\n   statsPort: 30315\n ```\n+\n+Sample `values.yaml` for the Nginx Ingress:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0OTA3Nw==", "bodyText": "'NGINX' needs to be code font (surround with back ticks, NGINX", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478649077", "createdAt": "2020-08-27T19:34:00Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/ingress-per-domain/README.md", "diffHunk": "@@ -52,21 +52,39 @@ voyager:\n   # stats port\n   statsPort: 30315\n ```\n+\n+Sample `values.yaml` for the Nginx Ingress:\n+```\n+type: NGINX\n+\n+# WLS domain as backend to the load balancer\n+wlsDomain:\n+  domainUID: domain1\n+  clusterName: cluster1\n+  managedServerPort: 8001\n+\n+# Nginx specific values\n+nginx:\n+  # hostname used by host-routing\n+  hostname: domain1.org\n+```\n+\n ## Uninstalling the chart\n To uninstall and delete the `my-ingress` deployment:\n ```\n-$ helm delete --purge my-ingress\n+$ helm uninstall my-ingress\n ```\n ## Configuration\n The following table lists the configurable parameters of this chart and their default values.\n \n | Parameter | Description | Default |\n | --- | --- | --- |\n-| `type` | Type of Ingress controller. Legal values are `TRAEFIK` or `VOYAGER`. | `TRAEFIK` |\n+| `type` | Type of Ingress controller. Legal values are `TRAEFIK` or `VOYAGER` or 'NGINX'. | `TRAEFIK` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MDc4MQ==", "bodyText": "by using Helm 3 -> using Helm 3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478650781", "createdAt": "2020-08-27T19:37:22Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MTQzMQ==", "bodyText": "helm  -> Helm\nmaybe -> may be\nhere, please -> here. Please (these are two separate sentences)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478651431", "createdAt": "2020-08-27T19:38:44Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MTY1Mg==", "bodyText": "Operator  -> operator", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478651652", "createdAt": "2020-08-27T19:39:10Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NDAyNQ==", "bodyText": "Save the below configuration -> Save the following configuration\nAll these terms need to be in code font: nginx-tls-console.yaml  weblogic-domain domain1 adminserver\nAdministration server -> Administration Server", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478654025", "createdAt": "2020-08-27T19:43:47Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create NGINX ingress resource with custom annotation values\n+Save the below configuration as 'nginx-tls-console.yaml' and replace the string 'weblogic-domain' with the namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NDQwNQ==", "bodyText": "code font kubectl", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478654405", "createdAt": "2020-08-27T19:44:25Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create NGINX ingress resource with custom annotation values\n+Save the below configuration as 'nginx-tls-console.yaml' and replace the string 'weblogic-domain' with the namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: nginx-console-tls\n+  namespace: weblogic-domain\n+  annotations:\n+    kubernetes.io/ingress.class: nginx\n+    nginx.ingress.kubernetes.io/configuration-snippet: |\n+      more_set_input_headers \"X-Forwarded-Proto: https\";\n+      more_set_input_headers \"WL-Proxy-SSL: true\";\n+    nginx.ingress.kubernetes.io/ingress.allow-http: \"false\"\n+spec:\n+  tls:\n+  - hosts:\n+    secretName: domain-tls-cert\n+  rules:\n+  - host: \n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: domain1-adminserver\n+          servicePort: 7001\n+```\n+### 3. Deploy the ingress resource\n+Deploy the ingress resource using 'kubectl'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NDYyOQ==", "bodyText": "Kubernetes service -> Kubernetes service. (period)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478654629", "createdAt": "2020-08-27T19:44:53Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create NGINX ingress resource with custom annotation values\n+Save the below configuration as 'nginx-tls-console.yaml' and replace the string 'weblogic-domain' with the namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: nginx-console-tls\n+  namespace: weblogic-domain\n+  annotations:\n+    kubernetes.io/ingress.class: nginx\n+    nginx.ingress.kubernetes.io/configuration-snippet: |\n+      more_set_input_headers \"X-Forwarded-Proto: https\";\n+      more_set_input_headers \"WL-Proxy-SSL: true\";\n+    nginx.ingress.kubernetes.io/ingress.allow-http: \"false\"\n+spec:\n+  tls:\n+  - hosts:\n+    secretName: domain-tls-cert\n+  rules:\n+  - host: \n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: domain1-adminserver\n+          servicePort: 7001\n+```\n+### 3. Deploy the ingress resource\n+Deploy the ingress resource using 'kubectl'.\n+```\n+ kubectl create -f nginx-tls-console.yaml\n+```\n+### 4. Access the WebLogic Server Administration Console using the HTTPS port\n+Get the SSL port from the Kubernetes service ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NTA2MQ==", "bodyText": "web browser -> web browser, (comma)\ncode font https://${HOSTNAME}:${SSLPORT}/console", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478655061", "createdAt": "2020-08-27T19:45:40Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create NGINX ingress resource with custom annotation values\n+Save the below configuration as 'nginx-tls-console.yaml' and replace the string 'weblogic-domain' with the namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: nginx-console-tls\n+  namespace: weblogic-domain\n+  annotations:\n+    kubernetes.io/ingress.class: nginx\n+    nginx.ingress.kubernetes.io/configuration-snippet: |\n+      more_set_input_headers \"X-Forwarded-Proto: https\";\n+      more_set_input_headers \"WL-Proxy-SSL: true\";\n+    nginx.ingress.kubernetes.io/ingress.allow-http: \"false\"\n+spec:\n+  tls:\n+  - hosts:\n+    secretName: domain-tls-cert\n+  rules:\n+  - host: \n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: domain1-adminserver\n+          servicePort: 7001\n+```\n+### 3. Deploy the ingress resource\n+Deploy the ingress resource using 'kubectl'.\n+```\n+ kubectl create -f nginx-tls-console.yaml\n+```\n+### 4. Access the WebLogic Server Administration Console using the HTTPS port\n+Get the SSL port from the Kubernetes service \n+```\n+# Get the ingress controller secure web port\n+SSLPORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+```\n+In a web browser address bar type 'https://${HOSTNAME}:${SSLPORT}/console' to access the WebLogic Server Administration Console.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NTI1MA==", "bodyText": "Operator -> operator", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478655250", "createdAt": "2020-08-27T19:45:59Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create NGINX ingress resource with custom annotation values\n+Save the below configuration as 'nginx-tls-console.yaml' and replace the string 'weblogic-domain' with the namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: nginx-console-tls\n+  namespace: weblogic-domain\n+  annotations:\n+    kubernetes.io/ingress.class: nginx\n+    nginx.ingress.kubernetes.io/configuration-snippet: |\n+      more_set_input_headers \"X-Forwarded-Proto: https\";\n+      more_set_input_headers \"WL-Proxy-SSL: true\";\n+    nginx.ingress.kubernetes.io/ingress.allow-http: \"false\"\n+spec:\n+  tls:\n+  - hosts:\n+    secretName: domain-tls-cert\n+  rules:\n+  - host: \n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: domain1-adminserver\n+          servicePort: 7001\n+```\n+### 3. Deploy the ingress resource\n+Deploy the ingress resource using 'kubectl'.\n+```\n+ kubectl create -f nginx-tls-console.yaml\n+```\n+### 4. Access the WebLogic Server Administration Console using the HTTPS port\n+Get the SSL port from the Kubernetes service \n+```\n+# Get the ingress controller secure web port\n+SSLPORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+```\n+In a web browser address bar type 'https://${HOSTNAME}:${SSLPORT}/console' to access the WebLogic Server Administration Console.\n+\n+## Uninstall the NGINX Operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1Njc4Nw==", "bodyText": "Ingress  -> ingress", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r478656787", "createdAt": "2020-08-27T19:48:54Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.\n+```\n+# Configure the Administration Server\n+cd('/Servers/AdminServer')\n+set('WeblogicPluginEnabled',true)\n+...\n+cd('/Clusters/%s' % cluster_name)\n+set('WeblogicPluginEnabled',true)\n+```\n+### 2. Create NGINX ingress resource with custom annotation values\n+Save the below configuration as 'nginx-tls-console.yaml' and replace the string 'weblogic-domain' with the namespace of the WebLogic domain, the string 'domain1' with domain UID and the string 'adminserver' with name of the Administration server in the WebLogic domain.\n+\n+```\n+apiVersion: extensions/v1beta1\n+kind: Ingress\n+metadata:\n+  name: nginx-console-tls\n+  namespace: weblogic-domain\n+  annotations:\n+    kubernetes.io/ingress.class: nginx\n+    nginx.ingress.kubernetes.io/configuration-snippet: |\n+      more_set_input_headers \"X-Forwarded-Proto: https\";\n+      more_set_input_headers \"WL-Proxy-SSL: true\";\n+    nginx.ingress.kubernetes.io/ingress.allow-http: \"false\"\n+spec:\n+  tls:\n+  - hosts:\n+    secretName: domain-tls-cert\n+  rules:\n+  - host: \n+    http:\n+      paths:\n+      - path: /console\n+        backend:\n+          serviceName: domain1-adminserver\n+          servicePort: 7001\n+```\n+### 3. Deploy the ingress resource\n+Deploy the ingress resource using 'kubectl'.\n+```\n+ kubectl create -f nginx-tls-console.yaml\n+```\n+### 4. Access the WebLogic Server Administration Console using the HTTPS port\n+Get the SSL port from the Kubernetes service \n+```\n+# Get the ingress controller secure web port\n+SSLPORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+```\n+In a web browser address bar type 'https://${HOSTNAME}:${SSLPORT}/console' to access the WebLogic Server Administration Console.\n+\n+## Uninstall the NGINX Operator\n+After removing all the NGINX Ingress resources, uninstall the NGINX operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 168}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f200c847e694ada8fd18e722cd23932485249204", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f200c847e694ada8fd18e722cd23932485249204", "committedDate": "2020-08-27T22:26:47Z", "message": "More doc review change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76364e63ec7c86278d9aa194e613b316b8807ac", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e76364e63ec7c86278d9aa194e613b316b8807ac", "committedDate": "2020-08-27T22:27:02Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into lb-nginx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDI5MDYy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-480029062", "createdAt": "2020-09-01T18:53:43Z", "commit": {"oid": "e76364e63ec7c86278d9aa194e613b316b8807ac"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Mzo0M1rOHLD5pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Mzo0M1rOHLD5pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDI5NA==", "bodyText": "This correction is not done.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r481360294", "createdAt": "2020-09-01T18:53:43Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator by using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the helm repository, the NGINX version listed maybe newer that the one appearing here, please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX Operator is running.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MTY1Mg=="}, "originalCommit": {"oid": "327cb740284da426ae17ee2518ae685fdb61411a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "982dabde3c539e6bc72a9eb13db73543997cf3ec", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/982dabde3c539e6bc72a9eb13db73543997cf3ec", "committedDate": "2020-09-01T19:05:55Z", "message": "Minor doc modification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9afdca341579b82207eb61562224216eb294af39", "committedDate": "2020-09-01T19:06:09Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into lb-nginx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODE4NDg1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482818485", "createdAt": "2020-09-04T17:01:02Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMTowM1rOHNVrTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMTowM1rOHNVrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0ODY4NA==", "bodyText": "typo here: change 'newer that' to 'newer than'\nNOTE: After updating the Helm repository, the NGINX version listed may be newer than the one appearing here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483748684", "createdAt": "2020-09-04T17:01:03Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODE5NTIy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482819522", "createdAt": "2020-09-04T17:02:54Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMjo1NFrOHNVuUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMjo1NFrOHNVuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0OTQ1Nw==", "bodyText": "maybe use term \"NGINX ingress controller\" here:\n2. Install the NGINX ingress controller", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483749457", "createdAt": "2020-09-04T17:02:54Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODIwNzQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482820747", "createdAt": "2020-09-04T17:05:05Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowNTowNVrOHNVx8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowNTowNVrOHNVx8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MDM4NA==", "bodyText": "NGINX ingress controller", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483750384", "createdAt": "2020-09-04T17:05:05Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX operator is running.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODIxOTQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482821945", "createdAt": "2020-09-04T17:07:12Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowNzoxMlrOHNV1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowNzoxMlrOHNV1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MTI5Mw==", "bodyText": "through a NGINX ingress controller.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483751293", "createdAt": "2020-09-04T17:07:12Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODIzNTM4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482823538", "createdAt": "2020-09-04T17:10:10Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMDoxMFrOHNV6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMDoxMFrOHNV6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MjUzNQ==", "bodyText": "$ kubectl -n weblogic-domain2 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483752535", "createdAt": "2020-09-04T17:10:10Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI0OTU3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482824957", "createdAt": "2020-09-04T17:12:40Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMjo0MFrOHNV-lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxMjo0MFrOHNV-lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MzYyMg==", "bodyText": "modifications are needed to the respective python script", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483753622", "createdAt": "2020-09-04T17:12:40Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+\n+## SSL termination at ingress controller\n+This sample demonstrates how to terminate SSL traffic at the ingress controller to access the WebLogic Server Administration Console through the SSL port. \n+\n+### 1. Enable \"WebLogic Plugin Enabled\" on the WebLogic domain level\n+\n+If you are using WDT to configure the WebLogic domain, you need to add the following resource section at the domain level to the model YAML file.\n+```\n+resources:\n+     WebAppContainer:\n+         WeblogicPluginEnabled: true\n+```\n+If you are using a WLST script to configure the domain, then the following modifications are needed to the respective PY script.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI3MDc2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482827076", "createdAt": "2020-09-04T17:16:21Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxNjoyMVrOHNWE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxNjoyMVrOHNWE6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NTI0MA==", "bodyText": "Can you add the path-routing instruction here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483755240", "createdAt": "2020-09-04T17:16:21Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/README.md", "diffHunk": "@@ -0,0 +1,184 @@\n+# Install and configure NGINX\n+\n+## A step-by-step guide to install the NGINX operator\n+See the official installation document at:\n+- https://kubernetes.github.io/ingress-nginx/deploy/#using-helm\n+\n+As a *demonstration*, the following are steps to install the NGINX operator using Helm 3 on a Linux OS.\n+\n+### 1. Add the ingress-nginx chart repository\n+```\n+$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n+$ helm repo update\n+```\n+Verify that the chart repository has been added.\n+\n+```\n+$ helm search repo ingress-nginx\n+NAME               CHART VERSION APP VERSION\tDESCRIPTION\n+ingress-nginx/ingress-nginx\t2.12.0       \t0.34.1     \tIngress controller for Kubernetes using NGINX a...\n+```\n+> **NOTE**: After updating the Helm repository, the NGINX version listed may be newer that the one appearing here. Please check with the NGINX site for the latest supported versions.\n+\n+### 2. Install the NGINX operator\n+\n+> **NOTE**: The NGINX version used for the install should match the version found with `helm search`.\n+\n+```\n+$ kubectl create namespace nginx\n+$ helm install nginx-operator ingress-nginx/ingress-nginx --namespace nginx\n+```\n+\n+Wait until the NGINX operator is running.\n+```\n+$ kubectl get all --namespace nginx \n+NAME                                                           READY   STATUS    RESTARTS   AGE\n+pod/nginx-operator-ingress-nginx-controller-84fbd64787-v4p4c   1/1     Running   0          11m\n+NAME                                                        TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n+service/nginx-operator-ingress-nginx-controller             LoadBalancer   10.107.159.96   <pending>     80:31470/TCP,443:32465/TCP   11m\n+service/nginx-operator-ingress-nginx-controller-admission   ClusterIP      10.109.12.133   <none>        443/TCP                      11m\n+NAME                                                      READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/nginx-operator-ingress-nginx-controller   1/1     1            1           11m\n+NAME                                                                 DESIRED   CURRENT   READY   AGE\n+replicaset.apps/nginx-operator-ingress-nginx-controller-84fbd64787   1         1         1       11m\n+$ POD_NAME=$(kubectl get pods -n nginx -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}')\n+$ kubectl exec -it $POD_NAME -n nginx -- /nginx-ingress-controller --version\n+\n+```\n+> **NOTE**: All the generated Kubernetes resources of the NGINX operator have names controlled by the NGINX Helm chart. In our case, we use `releaseName` of `nginx-operator`.\n+\n+## Configure NGINX as a load balancer for WebLogic domains\n+We'll demonstrate how to use NGINX to handle traffic to backend WebLogic domains.\n+\n+### 1. Install WebLogic domains\n+Now we need to prepare two domains for NGINX load balancing.\n+\n+Create two WebLogic domains:\n+- One domain with `domain1` as the domain UID and namespace `weblogic-domain1`.\n+- One domain with `domain2` as the domain UID and namespace `weblogic-domain2`.\n+- Each domain has a web application installed with the URL context `testwebapp`.\n+- Each domain has a WebLogic cluster `cluster-1` where each Managed Server listens on port `8001`.\n+\n+### 2. Web request routing\n+The following sections describe how to route an application web request to the WebLogic domain through a NGINX frontend.\n+\n+#### Host-based routing \n+This sample demonstrates how to access an application on two WebLogic domains using host-based routing. Install a host-based routing NGINX ingress.\n+```\n+$ kubectl create -f samples/host-routing.yaml\n+ingress.networking.k8s.io/domain1-ingress-host created\n+ingress.networking.k8s.io/domain2-ingress-host created\n+\n+```\n+Now you can send requests to different WebLogic domains with the unique NGINX entry point of different host names as defined in the route section of the `host-routing.yaml` file.\n+```\n+# Get the ingress controller web port\n+$ export LB_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"http\")].nodePort}')\n+$ curl -H 'host: domain1.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+$ curl -H 'host: domain2.org' http://${HOSTNAME}:${LB_PORT}/testwebapp/\n+```\n+#### Host-based secured routing\n+This sample demonstrates how to access an application on two WebLogic domains using an HTTPS endpoint. Install a TLS-enabled ingress controller.\n+\n+First, you need to create two secrets with TLS certificates, one with the common name `domain1.org`, the other with the common name `domain2.org`. We use `openssl` to generate self-signed certificates for demonstration purposes. Note that the TLS secret needs to be in the same namespace as the WebLogic domain.\n+```\n+# create a TLS secret for domain1\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \"/CN=domain1.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt\n+\n+# create a TLS secret for domain2\n+$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls2.key -out /tmp/tls2.crt -subj \"/CN=domain2.org\"\n+$ kubectl -n weblogic-domain1 create secret tls domain2-tls-cert --key /tmp/tls2.key --cert /tmp/tls2.crt\n+# Deploy the TLS ingress controller.\n+$ kubectl create -f samples/tls.yaml\n+ingress.networking.k8s.io/domain1-ingress-tls created\n+ingress.networking.k8s.io/domain2-ingress-tls created\n+```\n+Now you can access the application on the WebLogic domain with the host name in the HTTP header. The ingress controller secure port can be obtained dynamically from the `nginx-operator` service in the `nginx` namespace.\n+\n+```\n+# Get the ingress controller secure web port\n+$ export TLS_PORT=$(kubectl -n nginx get service nginx-operator-ingress-nginx-controller -o jsonpath='{.spec.ports[?(@.name==\"https\")].nodePort}')\n+$ curl -k -H 'host: domain1.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+$ curl -k -H 'host: domain2.org' https://${HOSTNAME}:${TLS_PORT}/testwebapp/\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI4NjA0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482828604", "createdAt": "2020-09-04T17:19:11Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxOToxMVrOHNWJYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxOToxMVrOHNWJYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NjM4Nw==", "bodyText": "change it to:\napiVersion: networking.k8s.io/v1beta1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483756387", "createdAt": "2020-09-04T17:19:11Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI4NzQ2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482828746", "createdAt": "2020-09-04T17:19:27Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxOToyN1rOHNWJxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoxOToyN1rOHNWJxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NjQ4NQ==", "bodyText": "change to: nginx-ssl-1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483756485", "createdAt": "2020-09-04T17:19:27Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI5NDI2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482829426", "createdAt": "2020-09-04T17:20:42Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMDo0MlrOHNWL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMDo0MlrOHNWL_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NzA1Mg==", "bodyText": "those annotations are for Voyager. You need to change it to NGINX related annotation.\nkubernetes.io/ingress.class: \"nginx\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483757052", "createdAt": "2020-09-04T17:20:42Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1\n+  namespace: weblogic-domain1\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI5Njk3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482829697", "createdAt": "2020-09-04T17:21:15Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMToxNVrOHNWMuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMToxNVrOHNWMuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NzI0MQ==", "bodyText": "this is for Voyager. Delete this line.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483757241", "createdAt": "2020-09-04T17:21:15Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1\n+  namespace: weblogic-domain1\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'\n+spec:\n+  tls:\n+  - secretName: domain1-tls-cert\n+    hosts:\n+    - domain1.org\n+  rules:\n+  - host: domain1.org \n+    http:\n+      nodePort: '30305'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODMwMDc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482830078", "createdAt": "2020-09-04T17:21:55Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMTo1NVrOHNWN-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMTo1NVrOHNWN-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NzU2Mg==", "bodyText": "same here, use NGINX apiVersion.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483757562", "createdAt": "2020-09-04T17:21:55Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1\n+  namespace: weblogic-domain1\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'\n+spec:\n+  tls:\n+  - secretName: domain1-tls-cert\n+    hosts:\n+    - domain1.org\n+  rules:\n+  - host: domain1.org \n+    http:\n+      nodePort: '30305'\n+      paths:\n+      - backend:\n+          serviceName: domain1-cluster-cluster-1\n+          servicePort: '8001'\n+---\n+apiVersion: voyager.appscode.com/v1beta1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODMwMjUw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482830250", "createdAt": "2020-09-04T17:22:15Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjoxNVrOHNWOag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjoxNVrOHNWOag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NzY3NA==", "bodyText": "change to 'Nginx-ssl-2'", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483757674", "createdAt": "2020-09-04T17:22:15Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1\n+  namespace: weblogic-domain1\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'\n+spec:\n+  tls:\n+  - secretName: domain1-tls-cert\n+    hosts:\n+    - domain1.org\n+  rules:\n+  - host: domain1.org \n+    http:\n+      nodePort: '30305'\n+      paths:\n+      - backend:\n+          serviceName: domain1-cluster-cluster-1\n+          servicePort: '8001'\n+---\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODMwNDY1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482830465", "createdAt": "2020-09-04T17:22:38Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjozOFrOHNWPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjozOFrOHNWPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1NzgyNQ==", "bodyText": "change the annotations to use Nginx related.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483757825", "createdAt": "2020-09-04T17:22:38Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1\n+  namespace: weblogic-domain1\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'\n+spec:\n+  tls:\n+  - secretName: domain1-tls-cert\n+    hosts:\n+    - domain1.org\n+  rules:\n+  - host: domain1.org \n+    http:\n+      nodePort: '30305'\n+      paths:\n+      - backend:\n+          serviceName: domain1-cluster-cluster-1\n+          servicePort: '8001'\n+---\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-2\n+  namespace: weblogic-domain2\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODMwNjEw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482830610", "createdAt": "2020-09-04T17:22:53Z", "commit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjo1M1rOHNWPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzoyMjo1M1rOHNWPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1Nzk1MA==", "bodyText": "delete this line.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#discussion_r483757950", "createdAt": "2020-09-04T17:22:53Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/charts/nginx/samples/tls.yaml", "diffHunk": "@@ -0,0 +1,48 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-1\n+  namespace: weblogic-domain1\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'\n+spec:\n+  tls:\n+  - secretName: domain1-tls-cert\n+    hosts:\n+    - domain1.org\n+  rules:\n+  - host: domain1.org \n+    http:\n+      nodePort: '30305'\n+      paths:\n+      - backend:\n+          serviceName: domain1-cluster-cluster-1\n+          servicePort: '8001'\n+---\n+apiVersion: voyager.appscode.com/v1beta1\n+kind: Ingress\n+metadata:\n+  name: voyager-ssl-2\n+  namespace: weblogic-domain2\n+  annotations:\n+    ingress.appscode.com/type: 'NodePort'\n+    ingress.appscode.com/stats: 'true'\n+    ingress.appscode.com/affinity: 'cookie'\n+spec:\n+  tls:\n+  - secretName: domain2-tls-cert\n+    hosts:\n+    - domain2.org\n+  rules:\n+  - host: domain2.org\n+    http:\n+      nodePort: '30307'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afdca341579b82207eb61562224216eb294af39"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "704a3d75ddcc3dccbf8c9027ffc59e1c825f9cec", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/704a3d75ddcc3dccbf8c9027ffc59e1c825f9cec", "committedDate": "2020-09-04T17:37:18Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into lb-nginx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1fcb369878389a10a65fd4ce6f333849507fd1", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8c1fcb369878389a10a65fd4ce6f333849507fd1", "committedDate": "2020-09-04T20:18:36Z", "message": "More review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTQyNjE3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-482942617", "createdAt": "2020-09-04T21:15:41Z", "commit": {"oid": "8c1fcb369878389a10a65fd4ce6f333849507fd1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de89b2617ca312aabe6e91ab8a1feb5c31beadee", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/de89b2617ca312aabe6e91ab8a1feb5c31beadee", "committedDate": "2020-09-04T21:42:46Z", "message": "Remove path routing yaml file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dbf0555ef3823ca0f60926fe4c34e422f4c9a09", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0dbf0555ef3823ca0f60926fe4c34e422f4c9a09", "committedDate": "2020-09-08T13:46:40Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef1421f6663d4ec3ea9b3f4566be7a3467f6f2e", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3ef1421f6663d4ec3ea9b3f4566be7a3467f6f2e", "committedDate": "2020-09-08T13:48:36Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eedc43cfe29b21dec288a17591532197ae83c89", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0eedc43cfe29b21dec288a17591532197ae83c89", "committedDate": "2020-09-08T13:51:02Z", "message": "Update setupLoadBalancer.sh"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTYxMTQw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1886#pullrequestreview-484161140", "createdAt": "2020-09-08T13:51:11Z", "commit": {"oid": "0eedc43cfe29b21dec288a17591532197ae83c89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4416, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}