{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODU5MzI0", "number": 1528, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozMTo0M1rODuYOwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0ODoyNVrODux15g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU4MDgyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozMTo0M1rOGAVmAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1NzozMlrOGAs6Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNjk3OQ==", "bodyText": "tests should not throw exceptions", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403006979", "createdAt": "2020-04-03T13:31:43Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -109,7 +109,7 @@ public static void staticUnPrepare() throws Exception {\n    * @throws Exception if domain creation, config update or test veriofication fails\n    */\n   @Test\n-  public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n+  public void testMiiConfigUpdateNonJdbcCm() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4OTAzMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403389031", "createdAt": "2020-04-03T23:57:32Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -109,7 +109,7 @@ public static void staticUnPrepare() throws Exception {\n    * @throws Exception if domain creation, config update or test veriofication fails\n    */\n   @Test\n-  public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n+  public void testMiiConfigUpdateNonJdbcCm() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNjk3OQ=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU4MjQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozMjowN1rOGAVnDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1MzoxOVrOGAs2kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNzI0NA==", "bodyText": "tests should not throw exceptions\nif you think there may be an exception - write an assert to catch it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403007244", "createdAt": "2020-04-03T13:32:07Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateNonJdbcImage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4ODA1MQ==", "bodyText": "removed \"throws Exception\" from all tests", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403388051", "createdAt": "2020-04-03T23:53:19Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateNonJdbcImage() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNzI0NA=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTU4NjU5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozMzoxOFrOGAVpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo0NTo0NFrOGAr1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNzkyMA==", "bodyText": "is it just me, or is there not a single assertion in this whole test?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403007920", "createdAt": "2020-04-03T13:33:18Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateNonJdbcImage() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain w/o JDBC DS using the image created by MII\n+      boolean createDS = false;\n+      createDomainUsingMii(createDS);\n+\n+      // create image with a new tag to update config\n+      Map<String, Object> domainMap = domain.getDomainMap();\n+      final String imageName = (String) domainMap.get(\"image\") + \"_nonjdbc\";\n+      final String wdtModelFile = \"model.jdbc.yaml\";\n+      final String wdtModelPropFile = \"model.jdbc.properties\";\n+      createDomainImage(domainMap, imageName, wdtModelFile, wdtModelPropFile);\n+\n+      // update domain yaml with new image tag and\n+      // apply the domain yaml, verify domain rolling-restarted\n+      modifyDomainYamlWithImageName(domain, domainNS, imageName);\n+\n+      // verify the test result by checking updated config file on server pod\n+      verifyJdbcUpdate();\n+\n+      // verify that JDBC DS is created by checking JDBC DS name and read timeout\n+      LoggerHelper.getLocal().log(Level.INFO, \"Verify that JDBC DS is created\");\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_2);\n+\n+      final String destDir = getResultDir() + \"/samples/model-in-image-update\";\n+      verifyJdbcResources(jdbcResourcesToVerify, destDir);\n+\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NDEyMA==", "bodyText": "assertion is inside of verifyJdbcResources(jdbcResourcesToVerify, destDir);\nprivate void verifyJdbcResources(Set jdbcResourcesSet, String destDir)  {\n// verify JDBC DS props via WLST on server pod\nString jdbcResources = getJdbcResources(destDir);\nIterator<String> iterator = jdbcResourcesSet.iterator();\nwhile (iterator.hasNext()) {\n  String prop = iterator.next();\n  Assertions.assertTrue(jdbcResources.contains(prop), prop + \" is not found\");\n  LoggerHelper.getLocal().log(Level.INFO, prop + \" exists\");\n}\n\n}", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403364120", "createdAt": "2020-04-03T22:21:52Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateNonJdbcImage() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain w/o JDBC DS using the image created by MII\n+      boolean createDS = false;\n+      createDomainUsingMii(createDS);\n+\n+      // create image with a new tag to update config\n+      Map<String, Object> domainMap = domain.getDomainMap();\n+      final String imageName = (String) domainMap.get(\"image\") + \"_nonjdbc\";\n+      final String wdtModelFile = \"model.jdbc.yaml\";\n+      final String wdtModelPropFile = \"model.jdbc.properties\";\n+      createDomainImage(domainMap, imageName, wdtModelFile, wdtModelPropFile);\n+\n+      // update domain yaml with new image tag and\n+      // apply the domain yaml, verify domain rolling-restarted\n+      modifyDomainYamlWithImageName(domain, domainNS, imageName);\n+\n+      // verify the test result by checking updated config file on server pod\n+      verifyJdbcUpdate();\n+\n+      // verify that JDBC DS is created by checking JDBC DS name and read timeout\n+      LoggerHelper.getLocal().log(Level.INFO, \"Verify that JDBC DS is created\");\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_2);\n+\n+      final String destDir = getResultDir() + \"/samples/model-in-image-update\";\n+      verifyJdbcResources(jdbcResourcesToVerify, destDir);\n+\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNzkyMA=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MTMyMQ==", "bodyText": "it feels like there should be more than that, i think we should be checking each operation as we go, to make sure it is behaving as we expect.  your javadoc reads like there are several steps - we should check as we go to make sure they all work, please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403371321", "createdAt": "2020-04-03T22:45:44Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateNonJdbcImage() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain w/o JDBC DS using the image created by MII\n+      boolean createDS = false;\n+      createDomainUsingMii(createDS);\n+\n+      // create image with a new tag to update config\n+      Map<String, Object> domainMap = domain.getDomainMap();\n+      final String imageName = (String) domainMap.get(\"image\") + \"_nonjdbc\";\n+      final String wdtModelFile = \"model.jdbc.yaml\";\n+      final String wdtModelPropFile = \"model.jdbc.properties\";\n+      createDomainImage(domainMap, imageName, wdtModelFile, wdtModelPropFile);\n+\n+      // update domain yaml with new image tag and\n+      // apply the domain yaml, verify domain rolling-restarted\n+      modifyDomainYamlWithImageName(domain, domainNS, imageName);\n+\n+      // verify the test result by checking updated config file on server pod\n+      verifyJdbcUpdate();\n+\n+      // verify that JDBC DS is created by checking JDBC DS name and read timeout\n+      LoggerHelper.getLocal().log(Level.INFO, \"Verify that JDBC DS is created\");\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_2);\n+\n+      final String destDir = getResultDir() + \"/samples/model-in-image-update\";\n+      verifyJdbcResources(jdbcResourcesToVerify, destDir);\n+\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNzkyMA=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTk0Njc1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo1NzowMlrOGAZK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzo1ODoyNFrOGAhTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTU2Ng==", "bodyText": "spelling", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403065566", "createdAt": "2020-04-03T14:57:02Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5ODkxMw==", "bodyText": "fixed changed to verification", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403198913", "createdAt": "2020-04-03T17:58:24Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -153,6 +153,62 @@ public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain without a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTU2Ng=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjA3NjM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo0Nzo1NlrOGAr4JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMjo1NzozNVrOGA3QiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjA2OA==", "bodyText": "i have the same concern here, it seems like there are several steps and there should be assertions after each step to make sure it is working as desired. thanks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403372068", "createdAt": "2020-04-03T22:47:56Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -218,6 +274,62 @@ public void testMiiConfigUpdateExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain with a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateJdbcImage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4OTQzOQ==", "bodyText": "ok. Let me move the assertions to right after the operation is done to make it look clearer", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403389439", "createdAt": "2020-04-03T23:59:07Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -218,6 +274,62 @@ public void testMiiConfigUpdateExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain with a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateJdbcImage() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjA2OA=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU1ODUzNg==", "bodyText": "Mark, I made changes regarding this. I added Assertions after each step, some of them are added in the helper methods, others added in the test methods themselves. Could you please take one more look see if you are ok with the changes.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403558536", "createdAt": "2020-04-04T22:57:35Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -218,6 +274,62 @@ public void testMiiConfigUpdateExistJdbc() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+  /**\n+   * Create a domain with a JDBC DS using model in image and having configmap\n+   * in the domain.yaml before deploying the domain. After deploying the domain crd,\n+   * create a new image with diff tag name and model files that define a JDBC DataSource\n+   * and update the domain crd to change image name to reload the model,\n+   * generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception if domain creation, config update or test veriofication fails\n+   */\n+  @Test\n+  public void testMiiConfigUpdateJdbcImage() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjA2OA=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjA3ODYyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo0ODo1OFrOGAr5Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1NjowNFrOGAs5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjM3NA==", "bodyText": "this is good - we are checking the outcome, and printing out a nice descriptive message, but i think an assertion that it does not throw an exception would be better style.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403372374", "createdAt": "2020-04-03T22:48:58Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -76,15 +77,109 @@ public Domain createMiiDomainWithConfigMap(String domainUidPrefix,\n     return domain;\n   }\n \n+  /**\n+   * Modify the domain yaml to change domain-level restart version.\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n+   * @param versionNo version number of domain\n+   *\n+   * @throws Exception if patching domain fails\n+   */\n+  protected void createDomainImage(Map<String, Object> domainMap, String imageName,\n+                                   String modelFile, String modelPropFile) throws Exception {\n+    String domainBaseImageName = (String) domainMap.get(\"domainHomeImageBase\");\n+    String domainUid = (String) domainMap.get(\"domainUID\");\n+    String domainName = (String) domainMap.get(\"domainName\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"imageName: \" + imageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainBaseImageName: \" + domainBaseImageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainUid: \" + domainUid);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainName: \" + domainName);\n+\n+    // Get the map of any additional environment vars, or null\n+    Map<String, String> additionalEnvMap = (Map<String, String>) domainMap.get(\"additionalEnvMap\");\n+    String resultsDir = (String) domainMap.get(\"resultDir\");\n+    StringBuffer createDomainImageScriptCmd = new StringBuffer(\"export WDT_VERSION=\");\n+\n+    createDomainImageScriptCmd.append(BaseTest.WDT_VERSION).append(\" && \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/\")\n+      .append(\"imagetool/bin/imagetool.sh update\")\n+      .append(\" --tag \")\n+      .append(imageName)\n+      .append(\" --fromImage \")\n+      .append(domainBaseImageName)\n+      .append(\" --wdtModel \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelFile)\n+      .append(\" --wdtVariables \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelPropFile)\n+      .append(\" --wdtArchive \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/models/archive.zip\")\n+      .append(\" --wdtModelOnly \")\n+      .append(\" --wdtDomainType \")\n+      .append(WdtDomainType.WLS.geWdtDomainType());\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to create domain image: \" + createDomainImageScriptCmd);\n+    ExecResult result = ExecCommand.exec(createDomainImageScriptCmd.toString(), true, additionalEnvMap);\n+    if (result.exitValue() != 0) {\n+      throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4ODY3OQ==", "bodyText": "yea. I have changed it to:\ncatch (Exception ex) {\nStringBuffer errorMsg = new StringBuffer(\"FAILURE: command: \");\nerrorMsg\n.append(createDomainImageScriptCmd)\n.append(\" failed, returned \")\n.append(result.stdout())\n.append(\"\\n\")\n.append(result.stderr());\n  Assertions.fail(errorMsg + \"\\n \" + ex.getMessage());\n}", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403388679", "createdAt": "2020-04-03T23:56:04Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -76,15 +77,109 @@ public Domain createMiiDomainWithConfigMap(String domainUidPrefix,\n     return domain;\n   }\n \n+  /**\n+   * Modify the domain yaml to change domain-level restart version.\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n+   * @param versionNo version number of domain\n+   *\n+   * @throws Exception if patching domain fails\n+   */\n+  protected void createDomainImage(Map<String, Object> domainMap, String imageName,\n+                                   String modelFile, String modelPropFile) throws Exception {\n+    String domainBaseImageName = (String) domainMap.get(\"domainHomeImageBase\");\n+    String domainUid = (String) domainMap.get(\"domainUID\");\n+    String domainName = (String) domainMap.get(\"domainName\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"imageName: \" + imageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainBaseImageName: \" + domainBaseImageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainUid: \" + domainUid);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainName: \" + domainName);\n+\n+    // Get the map of any additional environment vars, or null\n+    Map<String, String> additionalEnvMap = (Map<String, String>) domainMap.get(\"additionalEnvMap\");\n+    String resultsDir = (String) domainMap.get(\"resultDir\");\n+    StringBuffer createDomainImageScriptCmd = new StringBuffer(\"export WDT_VERSION=\");\n+\n+    createDomainImageScriptCmd.append(BaseTest.WDT_VERSION).append(\" && \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/\")\n+      .append(\"imagetool/bin/imagetool.sh update\")\n+      .append(\" --tag \")\n+      .append(imageName)\n+      .append(\" --fromImage \")\n+      .append(domainBaseImageName)\n+      .append(\" --wdtModel \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelFile)\n+      .append(\" --wdtVariables \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelPropFile)\n+      .append(\" --wdtArchive \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/models/archive.zip\")\n+      .append(\" --wdtModelOnly \")\n+      .append(\" --wdtDomainType \")\n+      .append(WdtDomainType.WLS.geWdtDomainType());\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to create domain image: \" + createDomainImageScriptCmd);\n+    ExecResult result = ExecCommand.exec(createDomainImageScriptCmd.toString(), true, additionalEnvMap);\n+    if (result.exitValue() != 0) {\n+      throw new RuntimeException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjM3NA=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjA4MDc2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo0OTo1MFrOGAr6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo1NzoxMlrOGAs6Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjY2NQ==", "bodyText": "logging is great, thanks!\ni also would love to see an assertion in here, and a descriptive error please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403372665", "createdAt": "2020-04-03T22:49:50Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -76,15 +77,109 @@ public Domain createMiiDomainWithConfigMap(String domainUidPrefix,\n     return domain;\n   }\n \n+  /**\n+   * Modify the domain yaml to change domain-level restart version.\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n+   * @param versionNo version number of domain\n+   *\n+   * @throws Exception if patching domain fails\n+   */\n+  protected void createDomainImage(Map<String, Object> domainMap, String imageName,\n+                                   String modelFile, String modelPropFile) throws Exception {\n+    String domainBaseImageName = (String) domainMap.get(\"domainHomeImageBase\");\n+    String domainUid = (String) domainMap.get(\"domainUID\");\n+    String domainName = (String) domainMap.get(\"domainName\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"imageName: \" + imageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainBaseImageName: \" + domainBaseImageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainUid: \" + domainUid);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainName: \" + domainName);\n+\n+    // Get the map of any additional environment vars, or null\n+    Map<String, String> additionalEnvMap = (Map<String, String>) domainMap.get(\"additionalEnvMap\");\n+    String resultsDir = (String) domainMap.get(\"resultDir\");\n+    StringBuffer createDomainImageScriptCmd = new StringBuffer(\"export WDT_VERSION=\");\n+\n+    createDomainImageScriptCmd.append(BaseTest.WDT_VERSION).append(\" && \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/\")\n+      .append(\"imagetool/bin/imagetool.sh update\")\n+      .append(\" --tag \")\n+      .append(imageName)\n+      .append(\" --fromImage \")\n+      .append(domainBaseImageName)\n+      .append(\" --wdtModel \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelFile)\n+      .append(\" --wdtVariables \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelPropFile)\n+      .append(\" --wdtArchive \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/models/archive.zip\")\n+      .append(\" --wdtModelOnly \")\n+      .append(\" --wdtDomainType \")\n+      .append(WdtDomainType.WLS.geWdtDomainType());\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to create domain image: \" + createDomainImageScriptCmd);\n+    ExecResult result = ExecCommand.exec(createDomainImageScriptCmd.toString(), true, additionalEnvMap);\n+    if (result.exitValue() != 0) {\n+      throw new RuntimeException(\n+        \"FAILURE: command \"\n+          + createDomainImageScriptCmd\n+          + \" failed, returned \"\n+          + result.stdout()\n+          + \"\\n\"\n+          + result.stderr());\n+    }\n+  }\n+\n+  /**\n+   * Modify the domain yaml to change image name.\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n+   * @param imageName image name\n+   *\n+   * @throws Exception if patching domain fails\n+   */\n+  protected void modifyDomainYamlWithImageName(\n+      Domain domain, String domainNS, String imageName) throws Exception {\n+    String versionNo = getRestartVersion(domainNS, domain.getDomainUid());\n+    StringBuffer patchDomainCmd = new StringBuffer(\"kubectl -n \");\n+    patchDomainCmd\n+        .append(domainNS)\n+        .append(\" patch domain \")\n+        .append(domain.getDomainUid())\n+        .append(\" --type='json' \")\n+        .append(\" -p='[{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/image\\\", \\\"value\\\": \\\"'\")\n+        .append(imageName)\n+        .append(\"'\\\" }]'\");\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to patch domain: \" + patchDomainCmd);\n+    ExecResult result = TestUtils.exec(patchDomainCmd.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Domain patch result: \" + result.stdout());\n+\n+    // verify the domain restarted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4ODk1MQ==", "bodyText": "yea. I have changed it to:\n  StringBuffer errorMsg = new StringBuffer(\"FAILURE: command: \");\n  errorMsg\n      .append(patchDomainCmd)\n      .append(\" failed, returned \")\n      .append(result.stdout())\n      .append(\"\\n\")\n      .append(result.stderr());\n\n  Assertions.fail(errorMsg + \"\\n \" + ex.getMessage());", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403388951", "createdAt": "2020-04-03T23:57:12Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -76,15 +77,109 @@ public Domain createMiiDomainWithConfigMap(String domainUidPrefix,\n     return domain;\n   }\n \n+  /**\n+   * Modify the domain yaml to change domain-level restart version.\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n+   * @param versionNo version number of domain\n+   *\n+   * @throws Exception if patching domain fails\n+   */\n+  protected void createDomainImage(Map<String, Object> domainMap, String imageName,\n+                                   String modelFile, String modelPropFile) throws Exception {\n+    String domainBaseImageName = (String) domainMap.get(\"domainHomeImageBase\");\n+    String domainUid = (String) domainMap.get(\"domainUID\");\n+    String domainName = (String) domainMap.get(\"domainName\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"imageName: \" + imageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainBaseImageName: \" + domainBaseImageName);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainUid: \" + domainUid);\n+    LoggerHelper.getLocal().log(Level.INFO, \"domainName: \" + domainName);\n+\n+    // Get the map of any additional environment vars, or null\n+    Map<String, String> additionalEnvMap = (Map<String, String>) domainMap.get(\"additionalEnvMap\");\n+    String resultsDir = (String) domainMap.get(\"resultDir\");\n+    StringBuffer createDomainImageScriptCmd = new StringBuffer(\"export WDT_VERSION=\");\n+\n+    createDomainImageScriptCmd.append(BaseTest.WDT_VERSION).append(\" && \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/\")\n+      .append(\"imagetool/bin/imagetool.sh update\")\n+      .append(\" --tag \")\n+      .append(imageName)\n+      .append(\" --fromImage \")\n+      .append(domainBaseImageName)\n+      .append(\" --wdtModel \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelFile)\n+      .append(\" --wdtVariables \")\n+      .append(resultsDir)\n+      .append(\"/samples/model-in-image/\")\n+      .append(modelPropFile)\n+      .append(\" --wdtArchive \")\n+      .append(getUserProjectsDir())\n+      .append(\"/weblogic-domains/\")\n+      .append(domainName)\n+      .append(\"/miiWorkDir/models/archive.zip\")\n+      .append(\" --wdtModelOnly \")\n+      .append(\" --wdtDomainType \")\n+      .append(WdtDomainType.WLS.geWdtDomainType());\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to create domain image: \" + createDomainImageScriptCmd);\n+    ExecResult result = ExecCommand.exec(createDomainImageScriptCmd.toString(), true, additionalEnvMap);\n+    if (result.exitValue() != 0) {\n+      throw new RuntimeException(\n+        \"FAILURE: command \"\n+          + createDomainImageScriptCmd\n+          + \" failed, returned \"\n+          + result.stdout()\n+          + \"\\n\"\n+          + result.stderr());\n+    }\n+  }\n+\n+  /**\n+   * Modify the domain yaml to change image name.\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n+   * @param imageName image name\n+   *\n+   * @throws Exception if patching domain fails\n+   */\n+  protected void modifyDomainYamlWithImageName(\n+      Domain domain, String domainNS, String imageName) throws Exception {\n+    String versionNo = getRestartVersion(domainNS, domain.getDomainUid());\n+    StringBuffer patchDomainCmd = new StringBuffer(\"kubectl -n \");\n+    patchDomainCmd\n+        .append(domainNS)\n+        .append(\" patch domain \")\n+        .append(domain.getDomainUid())\n+        .append(\" --type='json' \")\n+        .append(\" -p='[{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/image\\\", \\\"value\\\": \\\"'\")\n+        .append(imageName)\n+        .append(\"'\\\" }]'\");\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to patch domain: \" + patchDomainCmd);\n+    ExecResult result = TestUtils.exec(patchDomainCmd.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Domain patch result: \" + result.stdout());\n+\n+    // verify the domain restarted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjY2NQ=="}, "originalCommit": {"oid": "4b48a4c7b0ed5bf44c6626d7f5bc01d185e4f16a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzc3NzAyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0ODoyNVrOGA4jrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNDoxMjoyNlrOGBHPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3OTgyMA==", "bodyText": "do you mean it wasn't updated?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403579820", "createdAt": "2020-04-04T23:48:25Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -105,48 +103,137 @@ public static void staticUnPrepare() throws Exception {\n    * re-create the configmap with model files that define a JDBC DataSource\n    * and update the domain crd to change domain restartVersion to reload the model,\n    * generate new config and initiate a rolling restart.\n-   *\n-   * @throws Exception if domain creation, config update or test veriofication fails\n    */\n   @Test\n-  public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n+  public void testMiiConfigUpdateNonJdbcCm() {\n     Assumptions.assumeTrue(QUICKTEST);\n     String testMethodName = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethodName);\n-    LoggerHelper.getLocal().log(Level.INFO,\n-        \"Creating Domain & waiting for the script to complete execution\");\n     boolean testCompletedSuccessfully = false;\n+    Domain domain = null;\n+\n     try {\n-      // create Domain w/o JDBC DS using the image created by MII\n+      logTestBegin(testMethodName);\n+      LoggerHelper.getLocal().log(Level.INFO,\n+          \"Creating Domain & waiting for the script to complete execution\");\n+\n+      // create domain w/o JDBC DS using the image created by MII\n       boolean createDS = false;\n-      createDomainUsingMii(createDS);\n+      domain = createDomainUsingMii(createDS);\n+      Assertions.assertNotNull(domain, \"Failed to create a domain\");\n \n       // copy model files that contains JDBC DS to a dir to re-create cm\n-      String destDir = copyTestModelFiles();\n+      final String destDir = getResultDir() + \"/samples/model-in-image-update\";\n+      copyTestModelFiles(destDir);\n \n-      // re-create cm to update config\n-      wdtConfigUpdate(destDir);\n+      // re-create cm to update config and verify cm is created successfylly\n+      wdtConfigUpdate(destDir, domain);\n \n-      // update domain yaml with restartVersion and\n-      // apply the domain yaml, verify domain restarted\n+      // update domain yaml with restartVersion,\n+      // apply the domain yaml and verify domain restarted successfully\n       modifyDomainYamlWithRestartVersion(domain, domainNS);\n \n-      // verify the test result by checking updated config file on server pod\n-      verifyJdbcUpdate();\n+      // verify that JNDI name exists by checking updated config file on server pod\n+      String jdbcDsStr = getJndiName(domain);\n+      Assertions.assertTrue(jdbcDsStr.contains(\"<jndi-name>\" + jndiName + \"</jndi-name>\"),\n+          \"JDBC DS doesn't update\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9870d2a042fa99e7eec2380ebee874762cb445e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyMDQwNQ==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1528#discussion_r403820405", "createdAt": "2020-04-06T04:12:26Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageConfigUpdate.java", "diffHunk": "@@ -105,48 +103,137 @@ public static void staticUnPrepare() throws Exception {\n    * re-create the configmap with model files that define a JDBC DataSource\n    * and update the domain crd to change domain restartVersion to reload the model,\n    * generate new config and initiate a rolling restart.\n-   *\n-   * @throws Exception if domain creation, config update or test veriofication fails\n    */\n   @Test\n-  public void testMiiConfigUpdateNonExistJdbc() throws Exception {\n+  public void testMiiConfigUpdateNonJdbcCm() {\n     Assumptions.assumeTrue(QUICKTEST);\n     String testMethodName = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethodName);\n-    LoggerHelper.getLocal().log(Level.INFO,\n-        \"Creating Domain & waiting for the script to complete execution\");\n     boolean testCompletedSuccessfully = false;\n+    Domain domain = null;\n+\n     try {\n-      // create Domain w/o JDBC DS using the image created by MII\n+      logTestBegin(testMethodName);\n+      LoggerHelper.getLocal().log(Level.INFO,\n+          \"Creating Domain & waiting for the script to complete execution\");\n+\n+      // create domain w/o JDBC DS using the image created by MII\n       boolean createDS = false;\n-      createDomainUsingMii(createDS);\n+      domain = createDomainUsingMii(createDS);\n+      Assertions.assertNotNull(domain, \"Failed to create a domain\");\n \n       // copy model files that contains JDBC DS to a dir to re-create cm\n-      String destDir = copyTestModelFiles();\n+      final String destDir = getResultDir() + \"/samples/model-in-image-update\";\n+      copyTestModelFiles(destDir);\n \n-      // re-create cm to update config\n-      wdtConfigUpdate(destDir);\n+      // re-create cm to update config and verify cm is created successfylly\n+      wdtConfigUpdate(destDir, domain);\n \n-      // update domain yaml with restartVersion and\n-      // apply the domain yaml, verify domain restarted\n+      // update domain yaml with restartVersion,\n+      // apply the domain yaml and verify domain restarted successfully\n       modifyDomainYamlWithRestartVersion(domain, domainNS);\n \n-      // verify the test result by checking updated config file on server pod\n-      verifyJdbcUpdate();\n+      // verify that JNDI name exists by checking updated config file on server pod\n+      String jdbcDsStr = getJndiName(domain);\n+      Assertions.assertTrue(jdbcDsStr.contains(\"<jndi-name>\" + jndiName + \"</jndi-name>\"),\n+          \"JDBC DS doesn't update\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3OTgyMA=="}, "originalCommit": {"oid": "b9870d2a042fa99e7eec2380ebee874762cb445e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4709, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}