{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTY5OTAw", "number": 1668, "title": "Adding parameterized test for mii end-to-end use case in JUnit 5", "bodyText": "Adding parameterized test for mii end-to-end use case in JUnit 5, WebLogic image tags can be passed as env var.\nModified ItMiiDomain.java to call the utility methods in CommonTestUtils.java and removed duplicate code\nDeleted testCreateMiiDomainSameDomainUidDiffNS as parameterized test uses the same domainuid with different namespaces.\n\nJenkins results, clean run on Kind cluster - https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/138/\non regular cluster, all tests ran fine except domain on pv test is failing with NPE, Sankar is working on a fix - https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests-10/140/", "createdAt": "2020-05-20T19:18:09Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668", "merged": true, "mergeCommit": {"oid": "d7288598adb60390f57cc739f648ad935c9ff620"}, "closed": true, "closedAt": "2020-05-21T18:50:22Z", "author": {"login": "vanajamukkara"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcir5QjAH2gAyNDIwOTY5OTAwOmQxNDE4MDg1M2VkN2Q1MWM1NTA3MWM0YjM3MTBlOTJhMDllZTI5ODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjpDXegH2gAyNDIwOTY5OTAwOjBmMzg0OWI3YzZiMWMwZmRhNzI0NDhmZjE2ODlkZjY5ZjQyOTFmYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d14180853ed7d51c55071c4b3710e92a09ee2989", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d14180853ed7d51c55071c4b3710e92a09ee2989", "committedDate": "2020-05-19T03:27:58Z", "message": "adding dependency for param tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "061270b0eb5eaa49493cdb7577a8559561814f14", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/061270b0eb5eaa49493cdb7577a8559561814f14", "committedDate": "2020-05-20T05:41:48Z", "message": "adding parameterized test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a6b73333cbb0ba20b82dcc6f234222fdb8c161", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a5a6b73333cbb0ba20b82dcc6f234222fdb8c161", "committedDate": "2020-05-20T23:35:30Z", "message": "use utils class and remove duplicated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be6c373ed4f0d3dbef32d69c0b722fd174d800c3", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/be6c373ed4f0d3dbef32d69c0b722fd174d800c3", "committedDate": "2020-05-21T01:38:07Z", "message": "adding operator upgrade util method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "929d3fa95d472190c8c8bcc1bb3b2090689712b0", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/929d3fa95d472190c8c8bcc1bb3b2090689712b0", "committedDate": "2020-05-21T02:51:01Z", "message": "assert for operator upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6829cdcd380fdfc922fa2d0c651286381e49090", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6829cdcd380fdfc922fa2d0c651286381e49090", "committedDate": "2020-05-21T03:02:25Z", "message": "changing parameter value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODc0MzU1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#pullrequestreview-415874355", "createdAt": "2020-05-21T04:42:57Z", "commit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDo0Mjo1N1rOGYl_zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDo1NTowM1rOGYmKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MTU0OA==", "bodyText": "You don't really need this check, the podReady actually validates the existence of the pod and ready status", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428441548", "createdAt": "2020-05-21T04:42:57Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -259,60 +171,60 @@ public void testCreateMiiDomain() {\n     final int replicaCount = 2;\n \n     // Create the repo secret to pull the image\n-    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n-            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n-            \"welcome1\", domainNamespace),\n-            String.format(\"createSecret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                    adminSecretName,\n+                                    domainNamespace,\n+                                    \"weblogic\",\n+                                    \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n-            \"weblogicenc\", domainNamespace),\n-             String.format(\"createSecret failed for %s\", encryptionSecretName));\n-\n-    // create the domain CR\n-    createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n-              encryptionSecretName, replicaCount);\n-\n-    // wait for the domain to exist\n-    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n-\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                      encryptionSecretName,\n+                                      domainNamespace,\n+                            \"weblogicenc\",\n+                            \"weblogicenc\"),\n+                    String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+                                      domainNamespace,\n+                                      adminSecretName,\n+                                      REPO_SECRET_NAME,\n+                                      encryptionSecretName,\n+                                      replicaCount,\n+                              MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+    createDomainAndVerify(domain, domainNamespace);\n \n     // check admin server pod exists\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName, domainUid, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods exist\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDAzNA==", "bodyText": "add javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428444034", "createdAt": "2020-05-21T04:54:22Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 545}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDE5Nw==", "bodyText": "we don't need the podExists assertions", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428444197", "createdAt": "2020-05-21T04:55:03Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {\n+    imageTag = imageTag.trim();\n+    assertTrue(!imageTag.isEmpty(), \"imageTag can not be empty string\");\n+    logger.info(\"Using imageTag {0}\", imageTag);\n+\n+    logger.info(\"Getting unique namespace for Domain\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(0);\n+\n+    // upgrade Operator for the new domain namespace\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, domainNamespace),\n+        String.format(\"Failed to upgrade operator in namespace %s\", opNamespace));\n+\n+    // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+    final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // create image with model files\n+    logger.info(\"Creating image with model file and verify\");\n+    miiImage = createMiiImageAndVerify(\n+          \"mii-image\",\n+                          MII_BASIC_WDT_MODEL_FILE,\n+                          MII_BASIC_APP_NAME,\n+                          WLS_BASE_IMAGE_NAME,\n+                          imageTag,\n+                          WLS);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n+        encryptionSecretName, replicaCount, miiImage);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod exists\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods exist\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 613}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd8b518839c2d88b5cf4a48da33ad80e9d99f995", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dd8b518839c2d88b5cf4a48da33ad80e9d99f995", "committedDate": "2020-05-21T05:04:24Z", "message": "adding methodsource and taking values from env var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98387458bcfb7db7f2d298e111f1021c063047bb", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/98387458bcfb7db7f2d298e111f1021c063047bb", "committedDate": "2020-05-21T05:06:57Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a91bfa10114bb648a3883aecaa15f7749353cea9", "committedDate": "2020-05-21T05:33:03Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into junit5-param-test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTkzOTcy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#pullrequestreview-416193972", "createdAt": "2020-05-21T14:29:57Z", "commit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyOTo1N1rOGY1BoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyOTo1N1rOGY1BoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4Nzc3Ng==", "bodyText": "Not 14.1.1.0? I think we should add that version.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428687776", "createdAt": "2020-05-21T14:29:57Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -18,6 +18,7 @@\n   public static final String ADMIN_SERVER_NAME_BASE = \"admin-server\";\n   public static final String MANAGED_SERVER_NAME_BASE = \"managed-server\";\n   public static final String WLS_DOMAIN_TYPE = \"WLS\";\n+  public static final String DEFAULT_WLS_IMAGE_TAGS = \"12.2.1.3, 12.2.1.4\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTk0NzA2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#pullrequestreview-416194706", "createdAt": "2020-05-21T14:30:50Z", "commit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDAwOTI0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#pullrequestreview-416400924", "createdAt": "2020-05-21T18:46:17Z", "commit": {"oid": "0986bb7a3e09cb208b99935d2562d24a2833591b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800f771408d2426e4e52bdd22cff17a2222da8ca", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/800f771408d2426e4e52bdd22cff17a2222da8ca", "committedDate": "2020-05-21T23:26:25Z", "message": "addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad0dc1c5ea7e57bb15016f6c4a5d7f95d3b4999", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ad0dc1c5ea7e57bb15016f6c4a5d7f95d3b4999", "committedDate": "2020-05-22T01:17:49Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into junit5-param-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f7b91f610416585961bb0b81b8bb0eb525b723", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d5f7b91f610416585961bb0b81b8bb0eb525b723", "committedDate": "2020-05-22T02:39:28Z", "message": "moving parameterized test before @after methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0986bb7a3e09cb208b99935d2562d24a2833591b", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0986bb7a3e09cb208b99935d2562d24a2833591b", "committedDate": "2020-05-22T02:43:13Z", "message": "fixing order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f3849b7c6b1c0fda72448ff1689df69f4291fa2", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0f3849b7c6b1c0fda72448ff1689df69f4291fa2", "committedDate": "2020-05-21T18:50:12Z", "message": "Merge branch 'develop' into junit5-param-test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4835, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}