{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDEzODEx", "number": 1881, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxMTo0OFrOEeUyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyODozMFrOEiUGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjMzMjI5OnYy", "diffSide": "RIGHT", "path": "docs/charts/index.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxMTo0OFrOHJ6grQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxMTo0OFrOHJ6grQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1Nzg2OQ==", "bodyText": "Should this really be part of the PR? I don't see a change in the CRD.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r480157869", "createdAt": "2020-08-31T14:11:48Z", "author": {"login": "russgold"}, "path": "docs/charts/index.yaml", "diffHunk": "@@ -3,108 +3,108 @@ entries:\n   weblogic-operator:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aafd6aeebe13a99861f4b22077fddc75cd1641"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM0NTc5OnYy", "diffSide": "RIGHT", "path": "operator/src/test/java/oracle/kubernetes/operator/DomainWatcherTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxNTowN1rOHJ6o8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToxNzowNVrOHPMc5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1OTk4NQ==", "bodyText": "I don't understand the name of this test. It seems to be testing that if a watcher receives  a bookmark callback, it updates its resource version for future queries. Is that correct? If so, I'd suggest that the test be named something like, whenWatcherReceivesBookmarkEvent_updateResourceVersion. The current name seems to be talking about what Kubernetes does, not what the operator does.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r480159985", "createdAt": "2020-08-31T14:15:07Z", "author": {"login": "russgold"}, "path": "operator/src/test/java/oracle/kubernetes/operator/DomainWatcherTest.java", "diffHunk": "@@ -43,6 +45,13 @@ public void initialRequest_specifiesStartingResourceVersion() {\n         hasEntry(\"resourceVersion\", INITIAL_RESOURCE_VERSION.toString()));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aafd6aeebe13a99861f4b22077fddc75cd1641"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NDY5Mw==", "bodyText": "Changed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r485694693", "createdAt": "2020-09-09T15:17:05Z", "author": {"login": "rjeberhard"}, "path": "operator/src/test/java/oracle/kubernetes/operator/DomainWatcherTest.java", "diffHunk": "@@ -43,6 +45,13 @@ public void initialRequest_specifiesStartingResourceVersion() {\n         hasEntry(\"resourceVersion\", INITIAL_RESOURCE_VERSION.toString()));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1OTk4NQ=="}, "originalCommit": {"oid": "94aafd6aeebe13a99861f4b22077fddc75cd1641"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM1Nzc3OnYy", "diffSide": "RIGHT", "path": "operator/src/test/java/oracle/kubernetes/operator/WatcherTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxODoxMlrOHJ6wcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxODoxMlrOHJ6wcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2MTkwNg==", "bodyText": "Generally, we've kept the type of watcher generic in the test base. This could simply return Watcher<?> and the unit test could either cast the result or just accept the generic.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r480161906", "createdAt": "2020-08-31T14:18:12Z", "author": {"login": "russgold"}, "path": "operator/src/test/java/oracle/kubernetes/operator/WatcherTestBase.java", "diffHunk": "@@ -101,10 +105,20 @@ void sendInitialRequest(BigInteger initialResourceVersion) {\n     createAndRunWatcher(NAMESPACE, stopping, initialResourceVersion);\n   }\n \n+  DomainWatcher sendBookmarkRequest(BigInteger initialResourceVersion, String bookmarkResourceVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aafd6aeebe13a99861f4b22077fddc75cd1641"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM5ODkzOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ResponseStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyODoxMlrOHJ7JcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToxNjozOFrOHPMbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2ODMwNQ==", "bodyText": "Here you have the retry logic and list continue logic mixed together. It seems to me that they really need to be separate, as a retry and and a continue are orthogonal. You seem to be conditioning the processing of a retry on the presence of a continue token. At the very least, the code is unclear.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r480168305", "createdAt": "2020-08-31T14:28:12Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ResponseStep.java", "diffHunk": "@@ -92,17 +94,34 @@ private NextAction getPotentialRetryAction(Packet packet) {\n \n   /**\n    * Returns next action that can be used to get the next batch of results from a list search that\n-   * specified a \"continue\" value.\n+   * specified a \"continue\" value, if any; otherwise, returns next.\n    *\n+   * @param callResponse Call response\n    * @param packet Packet\n    * @return Next action for list continue\n    */\n-  protected final NextAction doContinueList(Packet packet) {\n-    RetryStrategy retryStrategy = packet.getSpi(RetryStrategy.class);\n-    if (retryStrategy != null) {\n-      retryStrategy.reset();\n+  protected final NextAction doContinueListOrNext(CallResponse<T> callResponse, Packet packet) {\n+    return doContinueListOrNext(callResponse, packet, getNext());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94aafd6aeebe13a99861f4b22077fddc75cd1641"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NDMzNg==", "bodyText": "I've changed this to try and clarify... I believe that the disconnect is that I see that you implemented a solution in your PR that would iterate until there was no continue token and then present the final list to the response step, but I wanted to present each partial list to the response step. Therefore, the response step needs a mechanism to request the next request. When a new request happens, I do want to reset any failure count that may have been accumulated from the previous request.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r485694336", "createdAt": "2020-09-09T15:16:38Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ResponseStep.java", "diffHunk": "@@ -92,17 +94,34 @@ private NextAction getPotentialRetryAction(Packet packet) {\n \n   /**\n    * Returns next action that can be used to get the next batch of results from a list search that\n-   * specified a \"continue\" value.\n+   * specified a \"continue\" value, if any; otherwise, returns next.\n    *\n+   * @param callResponse Call response\n    * @param packet Packet\n    * @return Next action for list continue\n    */\n-  protected final NextAction doContinueList(Packet packet) {\n-    RetryStrategy retryStrategy = packet.getSpi(RetryStrategy.class);\n-    if (retryStrategy != null) {\n-      retryStrategy.reset();\n+  protected final NextAction doContinueListOrNext(CallResponse<T> callResponse, Packet packet) {\n+    return doContinueListOrNext(callResponse, packet, getNext());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2ODMwNQ=="}, "originalCommit": {"oid": "94aafd6aeebe13a99861f4b22077fddc75cd1641"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODI2Mzg2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo1NDo0NVrOHK08OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTowNzowMVrOHPL_kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNTE5Mw==", "bodyText": "This code is becoming increasingly complex. The coupling between the listNamespace calls and the CRD processing should not be done at this level. One of the great things about the Step/Fiber architecture is that you have those separate steps, and let the code that sets them up define the chain. Putting the dependency directly in the response to the namespace list makes future maintenance ever more difficult.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r481115193", "createdAt": "2020-09-01T12:54:45Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -369,14 +370,33 @@ private static Step readExistingPods(String ns) {\n   }\n \n   static Step readExistingNamespaces(DomainNamespaceSelectionStrategy selectionStrategy,\n-                                             Collection<String> domainNamespaces,\n-                                             boolean isFullRecheck) {\n+                                     Collection<String> domainNamespaces,\n+                                     boolean isFullRecheck) {\n     CallBuilder builder = new CallBuilder();\n     String selector = selectionStrategy.getLabelSelector();\n     if (selector != null) {\n       builder.withLabelSelectors(selector);\n     }\n-    return builder.listNamespaceAsync(new NamespaceListStep(selectionStrategy, domainNamespaces, isFullRecheck));\n+    return builder.listNamespaceAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95eccc0283e546e652cd0b52d5ab74ae7c28e05"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4OTI4OA==", "bodyText": "That's fair, but the complexity here really isn't new -- I just moved this code here. I'll see if I can separate them.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r485189288", "createdAt": "2020-09-08T20:52:06Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -369,14 +370,33 @@ private static Step readExistingPods(String ns) {\n   }\n \n   static Step readExistingNamespaces(DomainNamespaceSelectionStrategy selectionStrategy,\n-                                             Collection<String> domainNamespaces,\n-                                             boolean isFullRecheck) {\n+                                     Collection<String> domainNamespaces,\n+                                     boolean isFullRecheck) {\n     CallBuilder builder = new CallBuilder();\n     String selector = selectionStrategy.getLabelSelector();\n     if (selector != null) {\n       builder.withLabelSelectors(selector);\n     }\n-    return builder.listNamespaceAsync(new NamespaceListStep(selectionStrategy, domainNamespaces, isFullRecheck));\n+    return builder.listNamespaceAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNTE5Mw=="}, "originalCommit": {"oid": "b95eccc0283e546e652cd0b52d5ab74ae7c28e05"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY4NzE4Ng==", "bodyText": "Okay, I pulled the CRD steps out separately and earlier in the overall flow.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r485687186", "createdAt": "2020-09-09T15:07:01Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -369,14 +370,33 @@ private static Step readExistingPods(String ns) {\n   }\n \n   static Step readExistingNamespaces(DomainNamespaceSelectionStrategy selectionStrategy,\n-                                             Collection<String> domainNamespaces,\n-                                             boolean isFullRecheck) {\n+                                     Collection<String> domainNamespaces,\n+                                     boolean isFullRecheck) {\n     CallBuilder builder = new CallBuilder();\n     String selector = selectionStrategy.getLabelSelector();\n     if (selector != null) {\n       builder.withLabelSelectors(selector);\n     }\n-    return builder.listNamespaceAsync(new NamespaceListStep(selectionStrategy, domainNamespaces, isFullRecheck));\n+    return builder.listNamespaceAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNTE5Mw=="}, "originalCommit": {"oid": "b95eccc0283e546e652cd0b52d5ab74ae7c28e05"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDAzODM4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ResponseStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo0MDo0N1rOHQGuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTo1NTozMlrOHQHGzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0OTM3NQ==", "bodyText": "The method name is bit unclear. Should it be something like resetRetryStrategyAndReinvokeRequest?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486649375", "createdAt": "2020-09-10T21:40:47Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ResponseStep.java", "diffHunk": "@@ -126,6 +147,20 @@ private NextAction doPotentialRetry(Step conflictStep, Packet packet, CallRespon\n     return null;\n   }\n \n+  /**\n+   * Resets any retry strategy, such as a failed retry count and invokes the request again. This\n+   * will be useful for patterns such as list requests that include a \"continue\" value.\n+   * @param packet Packet\n+   * @return Next action for the original request\n+   */\n+  private NextAction resetResetAndReinvokeRequest(Packet packet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7619b35e664a45d69321744bb654d2cc1809bd4e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NTY5NA==", "bodyText": "Yup... it's a typo. Thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486655694", "createdAt": "2020-09-10T21:55:32Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ResponseStep.java", "diffHunk": "@@ -126,6 +147,20 @@ private NextAction doPotentialRetry(Step conflictStep, Packet packet, CallRespon\n     return null;\n   }\n \n+  /**\n+   * Resets any retry strategy, such as a failed retry count and invokes the request again. This\n+   * will be useful for patterns such as list requests that include a \"continue\" value.\n+   * @param packet Packet\n+   * @return Next action for the original request\n+   */\n+  private NextAction resetResetAndReinvokeRequest(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0OTM3NQ=="}, "originalCommit": {"oid": "7619b35e664a45d69321744bb654d2cc1809bd4e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE1MDIzOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/builders/WatchBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyMzoyMlrOHQHxrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo0MjoxMlrOHQIMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjY2OQ==", "bodyText": "The ALLOW_BOOKMARKS is set to true in WatchBuilder but I don't see BOOKMARK watch event handled in Watcher.java. My understanding of Watch bookmark feature is that it will send an event of type BOOKMARK to mark that all changes up to a given resourceVersion the client is requesting have already been sent. I was imagining that we'll update the resource version in Watcher.java with resource version set in BOOKMARK event . https://kubernetes.io/docs/reference/using-api/api-concepts/#watch-bookmarks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486666669", "createdAt": "2020-09-10T22:23:22Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/builders/WatchBuilder.java", "diffHunk": "@@ -29,7 +29,7 @@\n   /** Ignored for watches. */\n   private static final String START_LIST = null;\n \n-  private static final Boolean ALLOW_BOOKMARKS = false;\n+  private static final Boolean ALLOW_BOOKMARKS = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7619b35e664a45d69321744bb654d2cc1809bd4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MzUxMw==", "bodyText": "I found that the behavior of the default branch of the switch was identical to what we would do for a specific BOOKMARK event, so there was no need to make further code change.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486673513", "createdAt": "2020-09-10T22:42:12Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/builders/WatchBuilder.java", "diffHunk": "@@ -29,7 +29,7 @@\n   /** Ignored for watches. */\n   private static final String START_LIST = null;\n \n-  private static final Boolean ALLOW_BOOKMARKS = false;\n+  private static final Boolean ALLOW_BOOKMARKS = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjY2OQ=="}, "originalCommit": {"oid": "7619b35e664a45d69321744bb654d2cc1809bd4e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE2MjY0OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyODozMFrOHQH5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyMDowNlrOHQJ-uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODU0Nw==", "bodyText": "I was thinking that getNewResourceVersion() method of Watcher.java will check if event type is BOOKMARK and then update the resource version sent as part of bookmark event. Please let me know if my understanding is incorrect or if I missed something.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486668547", "createdAt": "2020-09-10T22:28:30Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -93,6 +93,11 @@ void waitForExit() {\n     }\n   }\n \n+  // for test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecdb291a7081ee9348f0a11d000409366a21c71b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3Mzg2MA==", "bodyText": "If you follow the logic through, you will see that this is what happens. I'm working on another branch, but tomorrow I'll find the existing code.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486673860", "createdAt": "2020-09-10T22:43:14Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -93,6 +93,11 @@ void waitForExit() {\n     }\n   }\n \n+  // for test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODU0Nw=="}, "originalCommit": {"oid": "ecdb291a7081ee9348f0a11d000409366a21c71b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMjc3OQ==", "bodyText": "ok, got it. I wonder if we need to test it functionally (in integration test or stress test) to verify if bookmark events helps in mitigating the impact of short event history window. In any case, this looks fine to me.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1881#discussion_r486702779", "createdAt": "2020-09-11T00:20:06Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -93,6 +93,11 @@ void waitForExit() {\n     }\n   }\n \n+  // for test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODU0Nw=="}, "originalCommit": {"oid": "ecdb291a7081ee9348f0a11d000409366a21c71b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4225, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}