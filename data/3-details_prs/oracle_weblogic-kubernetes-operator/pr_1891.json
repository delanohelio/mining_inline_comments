{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjYzMTM1", "number": 1891, "title": "create test infrastructure for Apache load balancer", "bodyText": "Add the test infrastructure for Apache load balancer\nAdd tests to verify Apache default sample and custom sample in ItTwoDomainsLoadBalancers.java\nhttps://build.weblogick8s.org:8443/view/all/job/weblogic-kubernetes-operator-kind-new/1739/\nhttps://build.weblogick8s.org:8443/view/all/job/weblogic-kubernetes-operator-kind-new/1740/\nhttps://build.weblogick8s.org:8443/view/all/job/weblogic-kubernetes-operator-kind-new/1748/\nhttps://build.weblogick8s.org:8443/view/all/job/weblogic-kubernetes-operator-kind-new/1781/", "createdAt": "2020-08-28T22:12:56Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891", "merged": true, "mergeCommit": {"oid": "9571aed032e3710c3dd36ad4254c2cdb9d8a65d2"}, "closed": true, "closedAt": "2020-09-02T19:15:28Z", "author": {"login": "xiancao"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-UCf4gH2gAyNDc1NjYzMTM1OjlhYmNjOTI5MWI3NjI5NTY2ZDM5N2I0NzY0MmY5NGQ0YTYwYTliMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEsoTxgH2gAyNDc1NjYzMTM1OjQ4NWIyZmE4ODZhZTgwOWU3ZThjNDM3MTQ2OTdmMmQ5NDFkOTAwZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9abcc9291b7629566d397b47642f94d4a60a9b1c", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9abcc9291b7629566d397b47642f94d4a60a9b1c", "committedDate": "2020-08-12T23:30:13Z", "message": "initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b23c1b777b3389a6f9fc08f9a5e54d939213bd8", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4b23c1b777b3389a6f9fc08f9a5e54d939213bd8", "committedDate": "2020-08-13T16:57:45Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79569c6c60abd5cc6bee28d77fd02cc7da97f1a8", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/79569c6c60abd5cc6bee28d77fd02cc7da97f1a8", "committedDate": "2020-08-20T17:06:10Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308501f889dc129899c45b6f99884cc2723cb509", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/308501f889dc129899c45b6f99884cc2723cb509", "committedDate": "2020-08-21T17:00:39Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb195cb78bc06ceba4e6ef589b480a8fa2d37d34", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb195cb78bc06ceba4e6ef589b480a8fa2d37d34", "committedDate": "2020-08-24T14:43:53Z", "message": "apache lb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d94c4292879463a0cf34c77ac6322ebf1bf17c", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/88d94c4292879463a0cf34c77ac6322ebf1bf17c", "committedDate": "2020-08-24T16:55:24Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6596ebe80e69d6abc098d278efa11279682cb631", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6596ebe80e69d6abc098d278efa11279682cb631", "committedDate": "2020-08-26T15:29:43Z", "message": "add apache tests to ItTwoDomainsLoadBalancers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab305c7ec261f594d18f5da4399df97ea9b5d0f", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/aab305c7ec261f594d18f5da4399df97ea9b5d0f", "committedDate": "2020-08-26T19:20:30Z", "message": "fix apache-webtier chart imagePullSecret"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca2582f52650760728d4e91f6371f6457237c4e", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1ca2582f52650760728d4e91f6371f6457237c4e", "committedDate": "2020-08-26T20:13:56Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9c510964fecb378c522910eb17e5f686cdc9048", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f9c510964fecb378c522910eb17e5f686cdc9048", "committedDate": "2020-08-26T22:32:50Z", "message": "get the ItPodsShutdownOption from shutdown3 branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56c7d27300bc92ad3911d487c5519c7869c3eef", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f56c7d27300bc92ad3911d487c5519c7869c3eef", "committedDate": "2020-08-27T05:49:57Z", "message": "change imagePullPolicy to Always"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eebad12ebc50579296fa74212dff2be0f0a5d74e", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eebad12ebc50579296fa74212dff2be0f0a5d74e", "committedDate": "2020-08-27T16:20:04Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f26c1a99a1c93420aa1e0fe0779d1c558ea1e8", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/75f26c1a99a1c93420aa1e0fe0779d1c558ea1e8", "committedDate": "2020-08-27T16:28:57Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6d6bd024e6a1f18a0d8f0ff8a6650a242eb452", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5c6d6bd024e6a1f18a0d8f0ff8a6650a242eb452", "committedDate": "2020-08-27T20:33:32Z", "message": "push the apache image to Kind repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac942b8a87db6bfdbef5f65901dcdcbddda73ceb", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ac942b8a87db6bfdbef5f65901dcdcbddda73ceb", "committedDate": "2020-08-27T21:50:07Z", "message": "add debug info for REPO_REGISTRY etc in Kind new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e113b422430c65498e2aec7fc222b1c29289dcbe", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e113b422430c65498e2aec7fc222b1c29289dcbe", "committedDate": "2020-08-27T21:52:17Z", "message": "get the latest develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ab3b3d353b7d7ee419b50f091be7cad6cd4b373", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5ab3b3d353b7d7ee419b50f091be7cad6cd4b373", "committedDate": "2020-08-27T22:35:25Z", "message": "remoe pull image from ocir and push to kind repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16d521843fded7b1f6d38e7e2589d663be17d4c8", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/16d521843fded7b1f6d38e7e2589d663be17d4c8", "committedDate": "2020-08-28T14:54:44Z", "message": "enable pull apache image from ocir and push to kind new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1294ffa95f12e56359729a780d2a3bc975d0c64", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f1294ffa95f12e56359729a780d2a3bc975d0c64", "committedDate": "2020-08-28T19:15:51Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9ad4a3b108e424b2af503db7540e071621dca7c2", "committedDate": "2020-08-31T18:36:05Z", "message": "move OCR login to test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4ODYxMDQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#pullrequestreview-478861045", "createdAt": "2020-08-31T18:53:57Z", "commit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1Mzo1N1rOHKEoSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTozOTo0NFrOHKGqCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMzY1OQ==", "bodyText": "any specific reason for using version in the constant name? can it be APACHE_IMAGE_NAME so that the constant name doesn't need to be changed if the version is different?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480323659", "createdAt": "2020-08-31T18:53:57Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -93,7 +93,12 @@\n   public static final String VOYAGER_CHART_NAME = \"voyager\";\n   public static final String VOYAGER_CHART_VERSION = \"12.0.0\";\n \n-  // ELK Stack and WebLogic Logging Exporter constants\n+  // Apache constants\n+  public static final String APACHE_IMAGE_12213 = \"phx.ocir.io/weblogick8s/oracle/apache:12.2.1.3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MzM4NA==", "bodyText": "log a message, logger.info(\"curl request {0}\", curlRequest);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480343384", "createdAt": "2020-08-31T19:22:14Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -1308,34 +1443,25 @@ private void verifyClusterLoadbalancing(String domainUid, String protocol, int l\n     // verify each managed server can see other member in the cluster\n     verifyServerCommunication(curlRequest, managedServers);\n \n-    boolean hostRouting = false;\n-    //access application in managed servers through Traefik load balancer and bind domain in the JNDI tree\n+    boolean containsCorrectDomainUid = false;\n     logger.info(\"Verifying the requests are routed to correct domain and cluster\");\n-    String curlCmd = String.format(\"curl --silent --show-error -ks --noproxy '*' \"\n-            + \"-H 'host: %s' %s://%s:%s/clusterview/ClusterViewServlet\"\n-            + \"\\\"?user=\" + ADMIN_USERNAME_DEFAULT\n-            + \"&password=\" + ADMIN_PASSWORD_DEFAULT + \"\\\"\",\n-        domainUid + \".\" + defaultNamespace + \".\" + \"cluster-1.test\", protocol, K8S_NODEPORT_HOST, lbPort, domainUid);\n-\n-    // call the webapp and verify the bound domain name to determine\n-    // the requests are sent to the correct cluster members.\n     for (int i = 0; i < 10; i++) {\n       ExecResult result;\n       try {\n-        logger.info(curlCmd);\n-        result = ExecCommand.exec(curlCmd, true);\n+        logger.info(curlRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MDg4Mw==", "bodyText": "what is default sample?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480350883", "createdAt": "2020-08-31T19:30:21Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -412,7 +469,43 @@ public void testVoyagerHostHttpRoutingAcrossDomains() {\n     logger.info(\"Verifying http traffic\");\n     for (String domainUid : domainUids) {\n       String ingressName = domainUid + \"-ingress-host-routing\";\n-      verifyClusterLoadbalancing(domainUid, \"http\", getVoyagerLbNodePort(ingressName));\n+      verifyClusterLoadbalancing(domainUid, defaultNamespace, \"http\", getVoyagerLbNodePort(ingressName),\n+          replicaCount, true, \"\");\n+    }\n+  }\n+\n+  /**\n+   * Verify Apache load balancer default sample through HTTP channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MTIyMQ==", "bodyText": "what is custom sample? explain the use case", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480351221", "createdAt": "2020-08-31T19:30:45Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -412,7 +469,43 @@ public void testVoyagerHostHttpRoutingAcrossDomains() {\n     logger.info(\"Verifying http traffic\");\n     for (String domainUid : domainUids) {\n       String ingressName = domainUid + \"-ingress-host-routing\";\n-      verifyClusterLoadbalancing(domainUid, \"http\", getVoyagerLbNodePort(ingressName));\n+      verifyClusterLoadbalancing(domainUid, defaultNamespace, \"http\", getVoyagerLbNodePort(ingressName),\n+          replicaCount, true, \"\");\n+    }\n+  }\n+\n+  /**\n+   * Verify Apache load balancer default sample through HTTP channel.\n+   */\n+  @Order(8)\n+  @Test\n+  @DisplayName(\"verify Apache load balancer default sample through HTTP channel\")\n+  public void testApacheDefaultSample() {\n+\n+    // verify Apache default sample\n+    logger.info(\"Verifying Apache default sample\");\n+    int httpNodePort = getApacheNodePort(domain1Namespace, \"http\");\n+    verifyClusterLoadbalancing(domain1Uid, domain1Namespace, \"http\", httpNodePort, 3, false, \"/weblogic\");\n+  }\n+\n+  /**\n+   * Verify Apache load balancer custom sample through HTTP and HTTPS channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NjM3Nw==", "bodyText": "are these values going to be replaced?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480356377", "createdAt": "2020-08-31T19:38:42Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -605,6 +612,172 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid) throws IOException {\n+    return installAndVerifyApache(apacheNamespace, image, httpNodePort, httpsNodePort, domainUid,\n+        null, null, null);\n+  }\n+\n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @param volumePath the path to put your own custom_mod_wl_apache.conf file\n+   * @param virtualHostName the VirtualHostName of the Apache HTTP server which is used to enable custom SSL config\n+   * @param clusterNamePortMap the map with clusterName as key and cluster port number as value\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid,\n+                                                  String volumePath,\n+                                                  String virtualHostName,\n+                                                  LinkedHashMap<String, String> clusterNamePortMap)\n+      throws IOException {\n+\n+    LoggingFacade logger = getLogger();\n+\n+    // Create Docker registry secret in the apache namespace to pull the Apache webtier image from repository\n+    if (!secretExists(REPO_SECRET_NAME, apacheNamespace)) {\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", apacheNamespace);\n+      createDockerRegistrySecret(apacheNamespace);\n+    }\n+\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // Helm install parameters\n+    HelmParams apacheHelmParams = new HelmParams()\n+        .releaseName(APACHE_RELEASE_NAME + \"-\" + apacheNamespace.substring(3))\n+        .namespace(apacheNamespace)\n+        .chartDir(APACHE_SAMPLE_CHART_DIR);\n+\n+    // Apache chart values to override\n+    ApacheParams apacheParams = new ApacheParams()\n+        .helmParams(apacheHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .image(image)\n+        .imagePullPolicy(\"Always\")\n+        .domainUID(domainUid);\n+\n+    if (httpNodePort >= 0 && httpsNodePort >= 0) {\n+      apacheParams\n+          .httpNodePort(httpNodePort)\n+          .httpsNodePort(httpsNodePort);\n+    }\n+\n+    if (volumePath != null && clusterNamePortMap != null) {\n+      // create a custom Apache plugin configuration file named custom_mod_wl_apache.conf\n+      Path customConf = Paths.get(volumePath, \"custom_mod_wl_apache.conf\");\n+      ArrayList<String> lines = new ArrayList<>();\n+      lines.add(\"<IfModule mod_weblogic.c>\");\n+      lines.add(\"WebLogicHost ${WEBLOGIC_HOST}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1Njg3NA==", "bodyText": "add more comments in this method to explain how it works", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480356874", "createdAt": "2020-08-31T19:39:44Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -605,6 +612,172 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid) throws IOException {\n+    return installAndVerifyApache(apacheNamespace, image, httpNodePort, httpsNodePort, domainUid,\n+        null, null, null);\n+  }\n+\n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @param volumePath the path to put your own custom_mod_wl_apache.conf file\n+   * @param virtualHostName the VirtualHostName of the Apache HTTP server which is used to enable custom SSL config\n+   * @param clusterNamePortMap the map with clusterName as key and cluster port number as value\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid,\n+                                                  String volumePath,\n+                                                  String virtualHostName,\n+                                                  LinkedHashMap<String, String> clusterNamePortMap)\n+      throws IOException {\n+\n+    LoggingFacade logger = getLogger();\n+\n+    // Create Docker registry secret in the apache namespace to pull the Apache webtier image from repository\n+    if (!secretExists(REPO_SECRET_NAME, apacheNamespace)) {\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", apacheNamespace);\n+      createDockerRegistrySecret(apacheNamespace);\n+    }\n+\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // Helm install parameters\n+    HelmParams apacheHelmParams = new HelmParams()\n+        .releaseName(APACHE_RELEASE_NAME + \"-\" + apacheNamespace.substring(3))\n+        .namespace(apacheNamespace)\n+        .chartDir(APACHE_SAMPLE_CHART_DIR);\n+\n+    // Apache chart values to override\n+    ApacheParams apacheParams = new ApacheParams()\n+        .helmParams(apacheHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .image(image)\n+        .imagePullPolicy(\"Always\")\n+        .domainUID(domainUid);\n+\n+    if (httpNodePort >= 0 && httpsNodePort >= 0) {\n+      apacheParams\n+          .httpNodePort(httpNodePort)\n+          .httpsNodePort(httpsNodePort);\n+    }\n+\n+    if (volumePath != null && clusterNamePortMap != null) {\n+      // create a custom Apache plugin configuration file named custom_mod_wl_apache.conf\n+      Path customConf = Paths.get(volumePath, \"custom_mod_wl_apache.conf\");\n+      ArrayList<String> lines = new ArrayList<>();\n+      lines.add(\"<IfModule mod_weblogic.c>\");\n+      lines.add(\"WebLogicHost ${WEBLOGIC_HOST}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NjM3Nw=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8", "committedDate": "2020-08-31T23:21:19Z", "message": "address Vanaja's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTA2Nzg3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#pullrequestreview-479906787", "createdAt": "2020-09-01T16:10:39Z", "commit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA0MDkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#pullrequestreview-480004091", "createdAt": "2020-09-01T18:21:16Z", "commit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToxNlrOHLC0Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToxNlrOHLC0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjU1OA==", "bodyText": "We should not put any open ended question in the  test description, rather says for fin cluster we need to follow these steps.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481342558", "createdAt": "2020-09-01T18:21:16Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -244,6 +256,34 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n       logger.info(\"Using image {0}\", kindRepoImage);\n       image = kindRepoImage;\n       isUseSecret = false;\n+\n+      // We do not know why the kind clusters can't pull Apache webtier image from OCIR using the image pull secret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA3NzAz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#pullrequestreview-480007703", "createdAt": "2020-09-01T18:26:22Z", "commit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNjoyMlrOHLC_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNjoyMlrOHLC_DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTI5Mw==", "bodyText": "Do not put open ended question in description on publicly available class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481345293", "createdAt": "2020-09-01T18:26:22Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -133,6 +135,44 @@ public void beforeAll(ExtensionContext context) {\n         assertFalse(operatorImage.isEmpty(), \"Image name can not be empty\");\n         assertTrue(Operator.buildImage(operatorImage), \"docker build failed for Operator\");\n \n+        // docker login to OCR if OCR_USERNAME and OCR_PASSWORD is provided in env var\n+        if (!OCR_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+          withStandardRetryPolicy\n+              .conditionEvaluationListener(\n+                  condition -> logger.info(\"Waiting for docker login to be successful\"\n+                          + \"(elapsed time {0} ms, remaining time {1} ms)\",\n+                      condition.getElapsedTimeInMS(),\n+                      condition.getRemainingTimeInMS()))\n+              .until(() -> dockerLogin(OCR_REGISTRY, OCR_USERNAME, OCR_PASSWORD));\n+        }\n+\n+        // The following code is for pulling WLS images if running tests in Kind cluster\n+        if (KIND_REPO != null) {\n+          // We can't figure out why the kind clusters can't pull images from OCR using the image pull secret. There", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb94ffbea7981ea252c07814412012ba742a570b", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fb94ffbea7981ea252c07814412012ba742a570b", "committedDate": "2020-09-01T19:02:32Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls81606"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69c7c22d25b7481ee49227db9d22e39727a784f0", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/69c7c22d25b7481ee49227db9d22e39727a784f0", "committedDate": "2020-09-01T19:10:18Z", "message": "address Pani's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDQzNzg4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#pullrequestreview-480043788", "createdAt": "2020-09-01T19:15:41Z", "commit": {"oid": "69c7c22d25b7481ee49227db9d22e39727a784f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDQ0OTAw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#pullrequestreview-480044900", "createdAt": "2020-09-01T19:17:25Z", "commit": {"oid": "69c7c22d25b7481ee49227db9d22e39727a784f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNzoyNVrOHLE0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNzoyNVrOHLE0PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NTI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // The kind clusters can't pull images from OCR using the image pull secret. \n          \n          \n            \n                      // The kind clusters can't pull images from OCR using the image pull secret. It may be a containerd bug, we are going to workaround the issue", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481375292", "createdAt": "2020-09-01T19:17:25Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -148,8 +148,7 @@ public void beforeAll(ExtensionContext context) {\n \n         // The following code is for pulling WLS images if running tests in Kind cluster\n         if (KIND_REPO != null) {\n-          // We can't figure out why the kind clusters can't pull images from OCR using the image pull secret. There\n-          // is some evidence it may be a containerd bug. Therefore, we are going to \"give up\" and workaround the issue.\n+          // The kind clusters can't pull images from OCR using the image pull secret. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7c22d25b7481ee49227db9d22e39727a784f0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "485b2fa886ae809e7e8c43714697f2d941d900d2", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/485b2fa886ae809e7e8c43714697f2d941d900d2", "committedDate": "2020-09-01T19:32:47Z", "message": "address Vanaja's comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}