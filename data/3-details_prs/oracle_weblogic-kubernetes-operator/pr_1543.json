{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODc5NzU5", "number": 1543, "title": "Additional support for K8s resources for actions in test mii framework", "bodyText": "Changed many of the API's to use K8s API model objects as parameters\nAdded support for create/delete of Config Maps, PV/PVC, and Services.\nGetting pod's log\nSimple refactoring.", "createdAt": "2020-04-06T20:12:30Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543", "merged": true, "mergeCommit": {"oid": "15b16db408c62d75226526c2c4b93b503637d81d"}, "closed": true, "closedAt": "2020-04-07T16:38:24Z", "author": {"login": "lennyphan"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT5PfSgH2gAyMzk5ODc5NzU5OjUyZTdkMDllMzU4ZWU4NDk4OTVkMzhmY2I0YzE1NDQwNTJiMmU3Yjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVV7RFAH2gAyMzk5ODc5NzU5OjI2MTk5YjhkMzI2OTYxZmFhYzBmYjJmYjM2Y2E5ZGM0NDY3ZTRmYzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "52e7d09e358ee849895d38fcb4c1544052b2e7b9", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/52e7d09e358ee849895d38fcb4c1544052b2e7b9", "committedDate": "2020-04-03T04:32:09Z", "message": "Refactoring, services, pods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd283e270ba011af43e8b2c610efb7b4d74b5c93", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dd283e270ba011af43e8b2c610efb7b4d74b5c93", "committedDate": "2020-04-03T22:56:14Z", "message": "Some refactoring and added additional Kubernetes primitives"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c423d5117ab1f5a031b294b9108ad6b41e99bdd", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1c423d5117ab1f5a031b294b9108ad6b41e99bdd", "committedDate": "2020-04-05T22:03:18Z", "message": "Merge latest changes from mii-new-integration-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c20982b0cc6f40f904250e409aff955f82645c8a", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c20982b0cc6f40f904250e409aff955f82645c8a", "committedDate": "2020-04-06T17:56:02Z", "message": "Use oracle.weblogic.domain.Domain class for getDomainCustomResource() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/01fdf0c716a490e382af93213826ac6b08183c0a", "committedDate": "2020-04-06T20:02:24Z", "message": "Merge remote-tracking branch 'origin/mii-new-integration-tests' into lenny-mii-tests\n\nMerge latest changes from mii-new-integration-tests branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTgyNjM2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388582636", "createdAt": "2020-04-06T20:14:17Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNDoxN1rOGBoKiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNDoxN1rOGBoKiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTgxOQ==", "bodyText": "I don't want this to be a String domainYAML.  The test should be passing in the Domain object created with the fluent api.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404359819", "createdAt": "2020-04-06T20:14:17Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -46,7 +46,7 @@ public void testCreatingDomain() {\n     logger.info(\"Created service account: \" + serviceAccount.getMetadata().getName());\n \n     // create the domain CR\n-    boolean success = createDomainCustomResource(domainUID, namespace, domainYAML);\n+    boolean success = createDomainCustomResource(namespace, domainYAML);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTgyOTYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388582961", "createdAt": "2020-04-06T20:14:51Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNDo1MVrOGBoLlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNDo1MVrOGBoLlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MDA4NQ==", "bodyText": "The dashes aren't necessary between parameter name and descriptions in javadoc.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404360085", "createdAt": "2020-04-06T20:14:51Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -80,13 +85,12 @@ public static boolean deleteOperator(String name, String namespace) {\n   /**\n    * Create domain custom resource from the given domain yaml file.\n    *\n-   * @param domainUID - unique domain identifier\n    * @param namespace - name of namespace\n-   * @param domainYAML - domain yaml file\n+   * @param domainYAML - path to a file containing domain custom resource spec in yaml format", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTgzNDYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388583461", "createdAt": "2020-04-06T20:15:37Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNTozN1rOGBoNLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNTozN1rOGBoNLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MDQ5NA==", "bodyText": "Is it useful to return List?  What is the test going to check?  Why not return the object?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404360494", "createdAt": "2020-04-06T20:15:37Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -100,6 +104,19 @@ public static boolean createDomainCustomResource(String domainUID, String namesp\n     return Domain.listDomainCustomResources(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTgzODkw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388583890", "createdAt": "2020-04-06T20:16:17Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNjoxN1rOGBoOfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNjoxN1rOGBoOfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MDgzMQ==", "bodyText": "It's here :).  I thought you had forgot about the types...  You should just import the types you need rather than use the full package.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404360831", "createdAt": "2020-04-06T20:16:17Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -100,6 +104,19 @@ public static boolean createDomainCustomResource(String domainUID, String namesp\n     return Domain.listDomainCustomResources(namespace);\n   }\n \n+  /**\n+   * Get the domain custom resource\n+   *\n+   * @param domainUID - unique domain identifier\n+   * @param namespace - name of namespace\n+   * @return domain custom resource\n+   * @throws ApiException - if Kubernetes request fails or domain does not exist\n+   */\n+  public static oracle.weblogic.domain.Domain getDomainCustomResource(String domainUID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTg0Njc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388584678", "createdAt": "2020-04-06T20:17:27Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNzoyN1rOGBoREw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxNzoyN1rOGBoREw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTQ5MQ==", "bodyText": "Let's delete these methods", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404361491", "createdAt": "2020-04-06T20:17:27Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -261,74 +293,107 @@ public static boolean createPersistentVolumeClaim(String pvcYaml) {\n     return PersistentVolumeClaim.create(pvcYaml);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTg1MDc1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388585075", "createdAt": "2020-04-06T20:18:00Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxODowMFrOGBoSWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxODowMFrOGBoSWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTgxNg==", "bodyText": "Delete just needs the name.  Here passing the object isn't necessary.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404361816", "createdAt": "2020-04-06T20:18:00Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -261,74 +293,107 @@ public static boolean createPersistentVolumeClaim(String pvcYaml) {\n     return PersistentVolumeClaim.create(pvcYaml);\n   }\n \n+  /**\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing Kubernetes\n+   *     persistent volume claim configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean createPersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)\n+      throws ApiException {\n+    return PersistentVolumeClaim.create(persistentVolumeClaim);\n+  }\n+\n   /**\n    * Delete the Kubernetes Persistent Volume Claim\n    *\n-   * @param pvcName   the name of the Persistent Volume Claim\n-   * @param namespace the namespace of the Persistent Volume Claim\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing PVC configuration\n+   *     data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deletePersistentVolumeClaim(String pvcName, String namespace)\n+  public static boolean deletePersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTg1MjY4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388585268", "createdAt": "2020-04-06T20:18:16Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxODoxN1rOGBoS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxODoxN1rOGBoS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTk2Ng==", "bodyText": "Same.  Delete just needs the name.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404361966", "createdAt": "2020-04-06T20:18:17Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -261,74 +293,107 @@ public static boolean createPersistentVolumeClaim(String pvcYaml) {\n     return PersistentVolumeClaim.create(pvcYaml);\n   }\n \n+  /**\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing Kubernetes\n+   *     persistent volume claim configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean createPersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)\n+      throws ApiException {\n+    return PersistentVolumeClaim.create(persistentVolumeClaim);\n+  }\n+\n   /**\n    * Delete the Kubernetes Persistent Volume Claim\n    *\n-   * @param pvcName   the name of the Persistent Volume Claim\n-   * @param namespace the namespace of the Persistent Volume Claim\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing PVC configuration\n+   *     data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deletePersistentVolumeClaim(String pvcName, String namespace)\n+  public static boolean deletePersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)\n       throws ApiException {\n-    return PersistentVolumeClaim.delete(pvcName, namespace);\n+    return PersistentVolumeClaim.delete(persistentVolumeClaim);\n   }\n \n   // --------------------------  secret  ----------------------------------\n \n   /**\n    * Create Kubernetes Secret\n    *\n-   * @param secretName the name of the secret\n-   * @param userName   username\n-   * @param password   password\n-   * @param namespace  the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param secret - V1Secret object containing Kubernetes secret configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean createSecret(String secretName,\n-                                     String userName, String password, String namespace) throws ApiException {\n-    return Secret.create(secretName, userName, password, namespace);\n+  public static boolean createSecret(V1Secret secret) throws ApiException {\n+    return Secret.create(secret);\n   }\n \n   /**\n    * Delete Kubernetes Secret\n    *\n-   * @param secretName the name of the secret\n-   * @param namespace  the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param secret - V1Secret object containing Kubernetes secret configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deleteSecret(String secretName, String namespace) throws ApiException {\n-    return Secret.delete(secretName, namespace);\n+  public static boolean deleteSecret(V1Secret secret) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTg3MTQ5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388587149", "createdAt": "2020-04-06T20:21:09Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoyMTowOVrOGBoY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoyMTowOVrOGBoY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MzUxOA==", "bodyText": "Don't know if you have it elsewhere, but Domain version should look much like these but using the Domain & DomainList as the class types.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404363518", "createdAt": "2020-04-06T20:21:09Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -45,31 +56,128 @@\n \n public class Kubernetes implements LoggedTest {\n \n-  public static Random random = new Random(System.currentTimeMillis());\n-  private static String pretty = \"false\";\n-  private static Boolean allowWatchBookmarks = false;\n-  private static String resourceVersion = \"\";\n-  private static Integer timeoutSeconds = 5;\n+  public static Random RANDOM = new Random(System.currentTimeMillis());\n+  private static String PRETTY = \"false\";\n+  private static Boolean ALLOW_WATCH_BOOKMARKS = false;\n+  private static String RESOURCE_VERSION = \"\";\n+  private static Integer TIMEOUT_SECONDS = 5;\n   private static String DOMAIN_GROUP = \"weblogic.oracle\";\n   private static String DOMAIN_VERSION = \"v7\";\n   private static String DOMAIN_PLURAL = \"domains\";\n \n-  // the CoreV1Api loads default api-client from global configuration.\n+  // Core Kubernetes API clients\n   private static ApiClient apiClient = null;\n   private static CoreV1Api coreV1Api = null;\n   private static CustomObjectsApi customObjectsApi = null;\n \n+  // Extended GenericKubernetesApi clients\n+  private static GenericKubernetesApi<V1ConfigMap, V1ConfigMapList> configMapClient = null;\n+  private static GenericKubernetesApi<V1Namespace, V1NamespaceList> namespaceClient = null;\n+  private static GenericKubernetesApi<V1Pod, V1PodList> podClient = null;\n+  private static GenericKubernetesApi<V1PersistentVolume, V1PersistentVolumeList> pvClient = null;\n+  private static GenericKubernetesApi<V1PersistentVolumeClaim, V1PersistentVolumeClaimList> pvcClient = null;\n+  private static GenericKubernetesApi<V1Secret, V1SecretList> secretClient = null;\n+  private static GenericKubernetesApi<V1Service, V1ServiceList> serviceClient = null;\n+  private static GenericKubernetesApi<V1ServiceAccount, V1ServiceAccountList> serviceAccountClient = null;\n+\n   static {\n     try {\n       Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n       apiClient = Configuration.getDefaultApiClient();\n       coreV1Api = new CoreV1Api();\n       customObjectsApi = new CustomObjectsApi();\n+      initializeGenericKubernetesApiClients();\n     } catch (IOException ioex) {\n       throw new ExceptionInInitializerError(ioex);\n     }\n   }\n \n+  /**\n+   * Create static instances of GenericKubernetesApi clients\n+   */\n+  private static void initializeGenericKubernetesApiClients() {\n+    // Invocation parameters aren't changing so create them as statics\n+    configMapClient =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTg4MTk5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388588199", "createdAt": "2020-04-06T20:22:43Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjE5ODEy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388619812", "createdAt": "2020-04-06T21:10:45Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToxMDo0NVrOGBqByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToxMDo0NVrOGBqByQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5MDM0NQ==", "bodyText": "Is the test expected to create the PVC Object ? or do we need another POJO object to hold the values of PVC details ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404390345", "createdAt": "2020-04-06T21:10:45Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -436,104 +743,222 @@ public static boolean createSecret(String secretName,\n   /**\n    * Delete Kubernetes Secret\n    *\n-   * @param secretName the name of the secret\n-   * @param namespace  the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param secret - V1Secret object containing Kubernetes secret configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deleteSecret(String secretName, String namespace) throws ApiException {\n-    V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+  public static boolean deleteSecret(V1Secret secret) throws ApiException {\n+    if (secret == null) {\n+      throw new ApiException(\n+          \"Parameter 'secret' is null when calling deleteSecret()\");\n+    }\n \n-    V1Status status = coreV1Api.deleteNamespacedSecret(\n-        secretName,// name of secret\n-        namespace,  // name of the Namespace\n-        pretty, // pretty print output\n-        null, // indicates that modifications should not be persisted\n-        0, // duration in seconds before the object should be deleted\n-        false, // Should the dependent objects be orphaned\n-        \"Foreground\", // Whether and how garbage collection will be performed\n-        deleteOptions\n-    );\n+    if (secret.getMetadata() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'metadata' when calling deleteSecret()\");\n+    }\n+\n+    if (secret.getMetadata().getNamespace() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'namespace' when calling deleteSecret()\");\n+    }\n+\n+    if (secret.getMetadata().getName() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'name' when calling deleteSecret()\");\n+    }\n+\n+    String namespace = secret.getMetadata().getNamespace();\n+    String name = secret.getMetadata().getName();\n+\n+    KubernetesApiResponse<V1Secret> response = secretClient.delete(namespace, name);\n+\n+    if (!response.isSuccess()) {\n+      throw new ApiException(\"Failed to delete secret '\" + name + \"' from namespace: \"\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+    }\n \n-    if (status.getCode() == 200 || status.getCode() == 202) {\n-      // status code 200 = OK, 202 = Accepted\n-      return true;\n+    if (response.getObject() != null) {\n+      logger.info(\n+          \"Received after-deletion status of the requested object, will be deleting \"\n+              + \"secret in background!\");\n     }\n \n-    return false;\n+    return true;\n   }\n \n   // --------------------------- pv/pvc ---------------------------\n \n   /**\n-   * Delete the Kubernetes Persistent Volume\n    *\n-   * @param pvName the name of the Persistent Volume\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param persistentVolume - V1PersistentVolume object containing Kubernetes persistent volume\n+   *     configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deletePv(String pvName) throws ApiException {\n-    V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+  public static boolean createPv(V1PersistentVolume persistentVolume) throws ApiException {\n+    if (persistentVolume == null) {\n+      throw new ApiException(\n+          \"Parameter 'persistentVolume' is null when calling createPv()\");\n+    }\n \n-    V1Status status = coreV1Api.deletePersistentVolume(\n-        pvName, // persistent volume (PV) name\n-        pretty, // pretty print output\n+    V1PersistentVolume pv = coreV1Api.createPersistentVolume(\n+        persistentVolume, // persistent volume configuration data\n+        PRETTY, // pretty print output\n         null, // indicates that modifications should not be persisted\n-        0, // duration in seconds before the object should be deleted\n-        false, // Should the dependent objects be orphaned\n-        \"Foreground\", // Whether and how garbage collection will be performed\n-        deleteOptions\n+        null // fieldManager is a name associated with the actor\n     );\n \n-    if (status.getCode() == 200 || status.getCode() == 202) {\n-      // status code 200 = OK, 202 = Accepted\n-      return true;\n+    return true;\n+  }\n+\n+  /**\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing Kubernetes\n+   *     persistent volume claim configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean createPvc(V1PersistentVolumeClaim persistentVolumeClaim) throws ApiException {\n+    if (persistentVolumeClaim == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 807}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Njk5MzI2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-388699326", "createdAt": "2020-04-07T00:02:28Z", "commit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDowMjoyOVrOGBuPuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDowOToxNlrOGBuX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1OTQ1MQ==", "bodyText": "and namespace?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404459451", "createdAt": "2020-04-07T00:02:29Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -261,74 +293,107 @@ public static boolean createPersistentVolumeClaim(String pvcYaml) {\n     return PersistentVolumeClaim.create(pvcYaml);\n   }\n \n+  /**\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing Kubernetes\n+   *     persistent volume claim configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean createPersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)\n+      throws ApiException {\n+    return PersistentVolumeClaim.create(persistentVolumeClaim);\n+  }\n+\n   /**\n    * Delete the Kubernetes Persistent Volume Claim\n    *\n-   * @param pvcName   the name of the Persistent Volume Claim\n-   * @param namespace the namespace of the Persistent Volume Claim\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing PVC configuration\n+   *     data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deletePersistentVolumeClaim(String pvcName, String namespace)\n+  public static boolean deletePersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTgxNg=="}, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1OTQ5Nw==", "bodyText": "namespace?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404459497", "createdAt": "2020-04-07T00:02:37Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -261,74 +293,107 @@ public static boolean createPersistentVolumeClaim(String pvcYaml) {\n     return PersistentVolumeClaim.create(pvcYaml);\n   }\n \n+  /**\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing Kubernetes\n+   *     persistent volume claim configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean createPersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)\n+      throws ApiException {\n+    return PersistentVolumeClaim.create(persistentVolumeClaim);\n+  }\n+\n   /**\n    * Delete the Kubernetes Persistent Volume Claim\n    *\n-   * @param pvcName   the name of the Persistent Volume Claim\n-   * @param namespace the namespace of the Persistent Volume Claim\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing PVC configuration\n+   *     data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deletePersistentVolumeClaim(String pvcName, String namespace)\n+  public static boolean deletePersistentVolumeClaim(V1PersistentVolumeClaim persistentVolumeClaim)\n       throws ApiException {\n-    return PersistentVolumeClaim.delete(pvcName, namespace);\n+    return PersistentVolumeClaim.delete(persistentVolumeClaim);\n   }\n \n   // --------------------------  secret  ----------------------------------\n \n   /**\n    * Create Kubernetes Secret\n    *\n-   * @param secretName the name of the secret\n-   * @param userName   username\n-   * @param password   password\n-   * @param namespace  the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param secret - V1Secret object containing Kubernetes secret configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean createSecret(String secretName,\n-                                     String userName, String password, String namespace) throws ApiException {\n-    return Secret.create(secretName, userName, password, namespace);\n+  public static boolean createSecret(V1Secret secret) throws ApiException {\n+    return Secret.create(secret);\n   }\n \n   /**\n    * Delete Kubernetes Secret\n    *\n-   * @param secretName the name of the secret\n-   * @param namespace  the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param secret - V1Secret object containing Kubernetes secret configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deleteSecret(String secretName, String namespace) throws ApiException {\n-    return Secret.delete(secretName, namespace);\n+  public static boolean deleteSecret(V1Secret secret) throws ApiException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTk2Ng=="}, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1OTY4OA==", "bodyText": "sentences finish with a period please.\ndo not use hyphens after param name, etc.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404459688", "createdAt": "2020-04-07T00:03:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/ConfigMap.java", "diffHunk": "@@ -3,19 +3,33 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n-import java.io.IOException;\n-\n import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n \n public class ConfigMap {\n \n-  public static boolean create(String cmName, String namespace, String fromFile)\n-      throws ApiException, IOException {\n-    return Kubernetes.createConfigMap(cmName, namespace, fromFile);\n+  /**\n+   * Create Kubernetes Config Map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDEzMg==", "bodyText": "is -> was", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404460132", "createdAt": "2020-04-07T00:04:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -139,19 +357,40 @@ public static boolean createNamespace(String name) throws ApiException {\n    *\n    * @param name - name of namespace\n    * @return true if successful delete, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n   public static boolean deleteNamespace(String name) throws ApiException {\n+    V1ObjectMeta metdata = new V1ObjectMetaBuilder().withName(name).build();\n+    V1Namespace namespace = new V1NamespaceBuilder().withMetadata(metdata).build();\n+    return deleteNamespace(namespace);\n+  }\n \n-    GenericKubernetesApi<V1Namespace, V1NamespaceList> namespaceClient =\n-        new GenericKubernetesApi<>(\n-                V1Namespace.class, // the api type class\n-                V1NamespaceList.class, // the api list type class\n-                \"\", // the api group\n-            \"v1\", // the api version\n-                \"namespaces\", // the resource plural\n-                apiClient //the api client\n-        );\n+  /**\n+   * Delete a Kubernetes namespace\n+   *\n+   * @param namespace - V1Namespace object containing name space configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean deleteNamespace(V1Namespace namespace) throws ApiException {\n+    if (namespace == null) {\n+      throw new ApiException(\n+          \"Parameter 'namespace' is null when calling deleteNamespace()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDI3MQ==", "bodyText": "or even better, something like \"Parameter 'namespace' cannot be null when ...\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404460271", "createdAt": "2020-04-07T00:05:11Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -139,19 +357,40 @@ public static boolean createNamespace(String name) throws ApiException {\n    *\n    * @param name - name of namespace\n    * @return true if successful delete, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n   public static boolean deleteNamespace(String name) throws ApiException {\n+    V1ObjectMeta metdata = new V1ObjectMetaBuilder().withName(name).build();\n+    V1Namespace namespace = new V1NamespaceBuilder().withMetadata(metdata).build();\n+    return deleteNamespace(namespace);\n+  }\n \n-    GenericKubernetesApi<V1Namespace, V1NamespaceList> namespaceClient =\n-        new GenericKubernetesApi<>(\n-                V1Namespace.class, // the api type class\n-                V1NamespaceList.class, // the api list type class\n-                \"\", // the api group\n-            \"v1\", // the api version\n-                \"namespaces\", // the resource plural\n-                apiClient //the api client\n-        );\n+  /**\n+   * Delete a Kubernetes namespace\n+   *\n+   * @param namespace - V1Namespace object containing name space configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean deleteNamespace(V1Namespace namespace) throws ApiException {\n+    if (namespace == null) {\n+      throw new ApiException(\n+          \"Parameter 'namespace' is null when calling deleteNamespace()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDEzMg=="}, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDk0OQ==", "bodyText": "i don't think any of these should throw the k8s ApiException - that does not make sense - there are no k8s API calls here, you are just checking your args.\nIllegalArgsException would be a better choice.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404460949", "createdAt": "2020-04-07T00:07:32Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -139,19 +357,40 @@ public static boolean createNamespace(String name) throws ApiException {\n    *\n    * @param name - name of namespace\n    * @return true if successful delete, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n   public static boolean deleteNamespace(String name) throws ApiException {\n+    V1ObjectMeta metdata = new V1ObjectMetaBuilder().withName(name).build();\n+    V1Namespace namespace = new V1NamespaceBuilder().withMetadata(metdata).build();\n+    return deleteNamespace(namespace);\n+  }\n \n-    GenericKubernetesApi<V1Namespace, V1NamespaceList> namespaceClient =\n-        new GenericKubernetesApi<>(\n-                V1Namespace.class, // the api type class\n-                V1NamespaceList.class, // the api list type class\n-                \"\", // the api group\n-            \"v1\", // the api version\n-                \"namespaces\", // the resource plural\n-                apiClient //the api client\n-        );\n+  /**\n+   * Delete a Kubernetes namespace\n+   *\n+   * @param namespace - V1Namespace object containing name space configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean deleteNamespace(V1Namespace namespace) throws ApiException {\n+    if (namespace == null) {\n+      throw new ApiException(\n+          \"Parameter 'namespace' is null when calling deleteNamespace()\");\n+    }\n+\n+    if (namespace.getMetadata() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MTI3Mg==", "bodyText": "again I don't think ApiException is the right choice", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404461272", "createdAt": "2020-04-07T00:08:36Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -373,59 +656,83 @@ public static boolean createConfigMap(String cmName, String namespace, String fr\n   /**\n    * Delete Kubernetes Config Map\n    *\n-   * @param cmName    the name of the Config Map\n-   * @param namespace the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param configMap - V1ConfigMap object containing config map configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deleteConfigMap(String cmName, String namespace) throws ApiException {\n-    V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+  public static boolean deleteConfigMap(V1ConfigMap configMap) throws ApiException {\n+    if (configMap == null) {\n+      throw new ApiException(\n+          \"Parameter 'configMap' is null when calling deleteConfigMap()\");\n+    }\n \n-    V1Status status = coreV1Api.deleteNamespacedConfigMap(\n-        cmName, // name of config map\n-        namespace,  // name of the Namespace\n-        pretty, // pretty print output\n-        null, // indicates that modifications should not be persisted\n-        0, // duration in seconds before the object should be deleted\n-        false, // Should the dependent objects be orphaned\n-        \"Foreground\", // Whether and how garbage collection will be performed\n-        deleteOptions\n-    );\n+    if (configMap.getMetadata() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'metadata' when calling deleteConfigMap()\");\n+    }\n \n-    if (status.getCode() == 200 || status.getCode() == 202) {\n-      // status code 200 = OK, 202 = Accepted\n-      return true;\n+    if (configMap.getMetadata().getNamespace() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'namespace' when calling deleteConfigMap()\");\n     }\n \n-    return false;\n+    if (configMap.getMetadata().getName() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'name' when calling deleteConfigMap()\");\n+    }\n+\n+    String namespace = configMap.getMetadata().getNamespace();\n+    String name = configMap.getMetadata().getName();\n+\n+    KubernetesApiResponse<V1ConfigMap> response = configMapClient.delete(namespace, name);\n+\n+    if (!response.isSuccess()) {\n+      throw new ApiException(\"Failed to delete config map '\" + name + \"' from namespace: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 623}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MTUyNA==", "bodyText": "Javadoc initial sentences missing periods all the way through this file.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404461524", "createdAt": "2020-04-07T00:09:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -436,104 +743,222 @@ public static boolean createSecret(String secretName,\n   /**\n    * Delete Kubernetes Secret\n    *\n-   * @param secretName the name of the secret\n-   * @param namespace  the name of the namespace\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param secret - V1Secret object containing Kubernetes secret configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deleteSecret(String secretName, String namespace) throws ApiException {\n-    V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+  public static boolean deleteSecret(V1Secret secret) throws ApiException {\n+    if (secret == null) {\n+      throw new ApiException(\n+          \"Parameter 'secret' is null when calling deleteSecret()\");\n+    }\n \n-    V1Status status = coreV1Api.deleteNamespacedSecret(\n-        secretName,// name of secret\n-        namespace,  // name of the Namespace\n-        pretty, // pretty print output\n-        null, // indicates that modifications should not be persisted\n-        0, // duration in seconds before the object should be deleted\n-        false, // Should the dependent objects be orphaned\n-        \"Foreground\", // Whether and how garbage collection will be performed\n-        deleteOptions\n-    );\n+    if (secret.getMetadata() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'metadata' when calling deleteSecret()\");\n+    }\n+\n+    if (secret.getMetadata().getNamespace() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'namespace' when calling deleteSecret()\");\n+    }\n+\n+    if (secret.getMetadata().getName() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'name' when calling deleteSecret()\");\n+    }\n+\n+    String namespace = secret.getMetadata().getNamespace();\n+    String name = secret.getMetadata().getName();\n+\n+    KubernetesApiResponse<V1Secret> response = secretClient.delete(namespace, name);\n+\n+    if (!response.isSuccess()) {\n+      throw new ApiException(\"Failed to delete secret '\" + name + \"' from namespace: \"\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+    }\n \n-    if (status.getCode() == 200 || status.getCode() == 202) {\n-      // status code 200 = OK, 202 = Accepted\n-      return true;\n+    if (response.getObject() != null) {\n+      logger.info(\n+          \"Received after-deletion status of the requested object, will be deleting \"\n+              + \"secret in background!\");\n     }\n \n-    return false;\n+    return true;\n   }\n \n   // --------------------------- pv/pvc ---------------------------\n \n   /**\n-   * Delete the Kubernetes Persistent Volume\n    *\n-   * @param pvName the name of the Persistent Volume\n-   * @return true on success, false otherwise\n-   * @throws ApiException - if Kubernetes client API call fails\n+   * @param persistentVolume - V1PersistentVolume object containing Kubernetes persistent volume\n+   *     configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n    */\n-  public static boolean deletePv(String pvName) throws ApiException {\n-    V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+  public static boolean createPv(V1PersistentVolume persistentVolume) throws ApiException {\n+    if (persistentVolume == null) {\n+      throw new ApiException(\n+          \"Parameter 'persistentVolume' is null when calling createPv()\");\n+    }\n \n-    V1Status status = coreV1Api.deletePersistentVolume(\n-        pvName, // persistent volume (PV) name\n-        pretty, // pretty print output\n+    V1PersistentVolume pv = coreV1Api.createPersistentVolume(\n+        persistentVolume, // persistent volume configuration data\n+        PRETTY, // pretty print output\n         null, // indicates that modifications should not be persisted\n-        0, // duration in seconds before the object should be deleted\n-        false, // Should the dependent objects be orphaned\n-        \"Foreground\", // Whether and how garbage collection will be performed\n-        deleteOptions\n+        null // fieldManager is a name associated with the actor\n     );\n \n-    if (status.getCode() == 200 || status.getCode() == 202) {\n-      // status code 200 = OK, 202 = Accepted\n-      return true;\n+    return true;\n+  }\n+\n+  /**\n+   * @param persistentVolumeClaim - V1PersistentVolumeClaim object containing Kubernetes\n+   *     persistent volume claim configuration data\n+   * @return true if successful\n+   * @throws ApiException - missing required configuration data, if Kubernetes request fails or\n+   *     unsuccessful\n+   */\n+  public static boolean createPvc(V1PersistentVolumeClaim persistentVolumeClaim) throws ApiException {\n+    if (persistentVolumeClaim == null) {\n+      throw new ApiException(\n+          \"Parameter 'persistentVolume' is null when calling createPv()\");\n+    }\n+\n+    if (persistentVolumeClaim.getMetadata() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'metadata' when calling createPvc()\");\n+    }\n+\n+    if (persistentVolumeClaim.getMetadata().getNamespace() == null) {\n+      throw new ApiException(\n+          \"Missing the required parameter 'namespace' when calling createPvc()\");\n     }\n \n-    return false;\n+    String namespace = persistentVolumeClaim.getMetadata().getNamespace();\n+\n+    V1PersistentVolumeClaim pvc = coreV1Api.createNamespacedPersistentVolumeClaim(\n+        namespace, // name of the Namespace\n+        persistentVolumeClaim, // persistent volume claim configuration data\n+        PRETTY, // pretty print output\n+        null, // indicates that modifications should not be persisted\n+        null // fieldManager is a name associated with the actor\n+    );\n+\n+    return true;\n+  }\n+\n+\n+  /**\n+   * Delete the Kubernetes Persistent Volume", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fdf0c716a490e382af93213826ac6b08183c0a"}, "originalPosition": 838}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32982d89591603fcf4ac98d8c494a37e5bd0004f", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/32982d89591603fcf4ac98d8c494a37e5bd0004f", "committedDate": "2020-04-07T03:32:16Z", "message": "Address PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87c3ab8d74118f0cf6237bf71add9b2d723fc97c", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/87c3ab8d74118f0cf6237bf71add9b2d723fc97c", "committedDate": "2020-04-07T04:20:30Z", "message": "Fix merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjA3Njc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-389207678", "createdAt": "2020-04-07T15:02:41Z", "commit": {"oid": "87c3ab8d74118f0cf6237bf71add9b2d723fc97c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjUxMDMx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-389251031", "createdAt": "2020-04-07T15:47:59Z", "commit": {"oid": "87c3ab8d74118f0cf6237bf71add9b2d723fc97c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjM2MTE3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#pullrequestreview-389236117", "createdAt": "2020-04-07T15:32:10Z", "commit": {"oid": "87c3ab8d74118f0cf6237bf71add9b2d723fc97c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMjoxMFrOGCJYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMjoxMFrOGCJYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwMzk0Mw==", "bodyText": "nitpick: pust each call on new line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1543#discussion_r404903943", "createdAt": "2020-04-07T15:32:10Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -46,7 +49,22 @@ public void testCreatingDomain() {\n     logger.info(\"Created service account: \" + serviceAccount.getMetadata().getName());\n \n     // create the domain CR\n-    boolean success = createDomainCustomResource(domainUID, namespace, domainYAML);\n+    V1ObjectMeta metadata = new V1ObjectMetaBuilder()\n+        .withName(domainUID)\n+        .withNamespace(namespace)\n+        .build();\n+    DomainSpec domainSpec = new DomainSpec()\n+        .domainHome(\"/shared/domains/sample-domain1\")\n+        .domainHomeInImage(false)\n+        .image(\"store/oracle/weblogic:12.2.1.3\").imagePullPolicy(\"IfNotPresent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87c3ab8d74118f0cf6237bf71add9b2d723fc97c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26199b8d326961faac0fb2fb36ca9dc4467e4fc9", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/26199b8d326961faac0fb2fb36ca9dc4467e4fc9", "committedDate": "2020-04-07T16:31:14Z", "message": "Resolve merge conflicts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 0, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}