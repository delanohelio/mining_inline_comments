{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzExNzg1", "number": 1723, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNjoyMlrOEEtUWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODoxODo1M1rOEFJoYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzcyMjUwOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDoyNjoyMlrOGif3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowNTo0N1rOGiq7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjc5NQ==", "bodyText": "If I understand the change correctly, domain CRD creation and  start namespaces logic are associated with readExistingNamespaces(), which is skipped in the dedicated mode. Does that mean in dedicated mode, CRD and domains will not be created? I may have missed something. Have you tested dedicated mode use cases?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r438826795", "createdAt": "2020-06-11T14:26:22Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -191,11 +192,9 @@ private static void begin() {\n \n       Step strategy = Step.chain(\n           new InitializeNamespacesSecurityStep(targetNamespaces),\n-          new NamespaceRulesReviewStep(),\n-          CrdHelper.createDomainCrdStep(version,\n-              new StartNamespacesStep(targetNamespaces, false)));\n+          new NamespaceRulesReviewStep());\n       if (!isDedicated()) {\n-        strategy = Step.chain(strategy, readExistingNamespaces());\n+        strategy = Step.chain(strategy, readExistingNamespaces(targetNamespaces));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7144add48458d0cf2b7521c02056ae73d318eaa5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MDY3NQ==", "bodyText": "Thanks Dongbo. I'm trying to run integration tests in external jenkins with my changes and seeing some failures. I'm not sure if failures are related to my change or intermittent env issue. I'm also trying to run tests in my machine but seeing a different issue regarding JAVA_HOME.  Do you know if there are any integration test for dedicated mode?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r438840675", "createdAt": "2020-06-11T14:45:59Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -191,11 +192,9 @@ private static void begin() {\n \n       Step strategy = Step.chain(\n           new InitializeNamespacesSecurityStep(targetNamespaces),\n-          new NamespaceRulesReviewStep(),\n-          CrdHelper.createDomainCrdStep(version,\n-              new StartNamespacesStep(targetNamespaces, false)));\n+          new NamespaceRulesReviewStep());\n       if (!isDedicated()) {\n-        strategy = Step.chain(strategy, readExistingNamespaces());\n+        strategy = Step.chain(strategy, readExistingNamespaces(targetNamespaces));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjc5NQ=="}, "originalCommit": {"oid": "7144add48458d0cf2b7521c02056ae73d318eaa5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMjE4OQ==", "bodyText": "Hi Dongbo, I have adjusted the change for dedicated mode as we discussed. Please let me know if you see something missing. I'll also try running tests for dedicated mode use-case. Thanks again for your comment and catching this.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r438912189", "createdAt": "2020-06-11T16:21:13Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -191,11 +192,9 @@ private static void begin() {\n \n       Step strategy = Step.chain(\n           new InitializeNamespacesSecurityStep(targetNamespaces),\n-          new NamespaceRulesReviewStep(),\n-          CrdHelper.createDomainCrdStep(version,\n-              new StartNamespacesStep(targetNamespaces, false)));\n+          new NamespaceRulesReviewStep());\n       if (!isDedicated()) {\n-        strategy = Step.chain(strategy, readExistingNamespaces());\n+        strategy = Step.chain(strategy, readExistingNamespaces(targetNamespaces));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjc5NQ=="}, "originalCommit": {"oid": "7144add48458d0cf2b7521c02056ae73d318eaa5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwODAyNg==", "bodyText": "The modified code here looks good.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439008026", "createdAt": "2020-06-11T19:05:47Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -191,11 +192,9 @@ private static void begin() {\n \n       Step strategy = Step.chain(\n           new InitializeNamespacesSecurityStep(targetNamespaces),\n-          new NamespaceRulesReviewStep(),\n-          CrdHelper.createDomainCrdStep(version,\n-              new StartNamespacesStep(targetNamespaces, false)));\n+          new NamespaceRulesReviewStep());\n       if (!isDedicated()) {\n-        strategy = Step.chain(strategy, readExistingNamespaces());\n+        strategy = Step.chain(strategy, readExistingNamespaces(targetNamespaces));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNjc5NQ=="}, "originalCommit": {"oid": "7144add48458d0cf2b7521c02056ae73d318eaa5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDgxODE4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTowNTowOVrOGiq58A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNzowMFrOGjMXCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcyOA==", "bodyText": "recheckDomains method also has similar filtering logic. Can yon double check and see if the logic there takes care of non-existent namespaces correctly as well?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439007728", "createdAt": "2020-06-11T19:05:09Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,63 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : \n+            super.onFailureNoRetry(packet, callResponse);\n     }\n \n     @Override\n     public NextAction onSuccess(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       V1NamespaceList result = callResponse.getResult();\n       // don't bother processing pre-existing events\n-\n-      if (namespaceWatcher == null) {\n-        namespaceWatcher = createNamespaceWatcher(getInitialResourceVersion(result));\n+      String intialResourceVersion = getInitialResourceVersion(result);\n+      List<String> nsList = getExistingNamespaces(result);\n+      \n+      Set<String> namespacesToStart = new TreeSet<>(targetNamespaces);\n+      for (String ns : targetNamespaces) {\n+        if (!nsList.contains(ns)) {\n+          namespacesToStart.remove(ns);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e63b68245e07a8e0fd431363aad619c1e579cc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwNjU4OQ==", "bodyText": "My understanding is that recheckDomains runs periodically and it takes care of non-existing namespaces except in full recheck case. It also checks for namespaces that are removed from operator's targetNamespaces list or that are deleted from k8s cluster and stops those namespaces. In case of full recheck (which happens every 2 min), it'll attempt to start all namespaces in targetNamespaces (including non-existing ns). However, I believe that doesn't cause liveness probe failure since it's executed in a thread separate from main thread.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439406589", "createdAt": "2020-06-12T13:06:34Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,63 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : \n+            super.onFailureNoRetry(packet, callResponse);\n     }\n \n     @Override\n     public NextAction onSuccess(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       V1NamespaceList result = callResponse.getResult();\n       // don't bother processing pre-existing events\n-\n-      if (namespaceWatcher == null) {\n-        namespaceWatcher = createNamespaceWatcher(getInitialResourceVersion(result));\n+      String intialResourceVersion = getInitialResourceVersion(result);\n+      List<String> nsList = getExistingNamespaces(result);\n+      \n+      Set<String> namespacesToStart = new TreeSet<>(targetNamespaces);\n+      for (String ns : targetNamespaces) {\n+        if (!nsList.contains(ns)) {\n+          namespacesToStart.remove(ns);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcyOA=="}, "originalCommit": {"oid": "e6e63b68245e07a8e0fd431363aad619c1e579cc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODE4Nw==", "bodyText": "Shall we add a log (warning?) message when we detect that a namespace that is in the target namespace but does not exist?\nWe may also want to add test cases for different lifecycle sequences of namespaces w.r.t targetNamesapces. For example, a namespace that is in the targetNamespaces but does not exist initially, but is added while the operator is running or not running (and later starts to run). There are multiple permutations to be tested.  If we agree that those test cases are needed, we need to create a task to track it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439478187", "createdAt": "2020-06-12T15:09:47Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,63 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : \n+            super.onFailureNoRetry(packet, callResponse);\n     }\n \n     @Override\n     public NextAction onSuccess(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       V1NamespaceList result = callResponse.getResult();\n       // don't bother processing pre-existing events\n-\n-      if (namespaceWatcher == null) {\n-        namespaceWatcher = createNamespaceWatcher(getInitialResourceVersion(result));\n+      String intialResourceVersion = getInitialResourceVersion(result);\n+      List<String> nsList = getExistingNamespaces(result);\n+      \n+      Set<String> namespacesToStart = new TreeSet<>(targetNamespaces);\n+      for (String ns : targetNamespaces) {\n+        if (!nsList.contains(ns)) {\n+          namespacesToStart.remove(ns);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcyOA=="}, "originalCommit": {"oid": "e6e63b68245e07a8e0fd431363aad619c1e579cc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTg0OQ==", "bodyText": "Yes, I have added a warning message when we detect that a namespace that is in target namespace but doesn't exist. Adding test cases for different lifecycle sequences of namespaces is a good idea. I'll check on that. Thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439555849", "createdAt": "2020-06-12T17:37:00Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,63 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : \n+            super.onFailureNoRetry(packet, callResponse);\n     }\n \n     @Override\n     public NextAction onSuccess(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       V1NamespaceList result = callResponse.getResult();\n       // don't bother processing pre-existing events\n-\n-      if (namespaceWatcher == null) {\n-        namespaceWatcher = createNamespaceWatcher(getInitialResourceVersion(result));\n+      String intialResourceVersion = getInitialResourceVersion(result);\n+      List<String> nsList = getExistingNamespaces(result);\n+      \n+      Set<String> namespacesToStart = new TreeSet<>(targetNamespaces);\n+      for (String ns : targetNamespaces) {\n+        if (!nsList.contains(ns)) {\n+          namespacesToStart.remove(ns);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcyOA=="}, "originalCommit": {"oid": "e6e63b68245e07a8e0fd431363aad619c1e579cc"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODM2MTI5OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODoxODo1M1rOGjNieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxMjoyMVrOGjRwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3NTE2MA==", "bodyText": "Sorry, I did not notice this earlier.\nI am not sure what this change is for. It tries to create domain CRD and start the namespaces if isNotAuthorizedOrForbidden() returns true. Not sure this is correct. in addition, this change does not seem to relate to non-existing namespaces.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439575160", "createdAt": "2020-06-12T18:18:53Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,70 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb38ccc753c5ddaef2d3d0c7d05f6eba2cfb874"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MTA2MA==", "bodyText": "Previously create domain CRD and start namespaces steps were called before the async call to read existing namespaces (unconditionally). I made this change to cover the case where  async call fails and comes to \"onFailureNoRetry\" after multiple retries. We still execute create domain CRD and start namespaces steps before executing next step. If failure is due to some reason other than 401 or 403, it calls \"super.onFailureNoRetry\". I'm not sure if calling create domain CRD and start namespaces steps will be useful here. The async call is just to read  existing namespaces and if it fails and goes to onFailureNoRetry after multiple retries, there's some fundamental problem with cluster.\n@rjeberhard and @doxiao  - Please let me know if this looks incorrect or if you have any suggestions. Thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439581060", "createdAt": "2020-06-12T18:31:53Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,70 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3NTE2MA=="}, "originalCommit": {"oid": "aeb38ccc753c5ddaef2d3d0c7d05f6eba2cfb874"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0MTQ2Mg==", "bodyText": "Just had a discussion with Ryan about this change and it looks fine. Namespace is global k8s resource and some customers don't want operator to have permission on global resources. So we still want to go ahead and create CRD and start namespaces when API call to list namespaces fails due to authorization error. In other failure cases, operator pod liveness probe will fail and pod will be restarted by kubernetes. So create domain CRD and start namespace will be executed when pod restarts.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439641462", "createdAt": "2020-06-12T21:03:36Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,70 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3NTE2MA=="}, "originalCommit": {"oid": "aeb38ccc753c5ddaef2d3d0c7d05f6eba2cfb874"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NDM1NA==", "bodyText": "Okay. It sounds fine. thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1723#discussion_r439644354", "createdAt": "2020-06-12T21:12:21Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -858,24 +866,70 @@ public NextAction onFailure(Packet packet, CallResponse<V1NamespaceList> callRes\n     @Override\n     protected NextAction onFailureNoRetry(Packet packet, CallResponse<V1NamespaceList> callResponse) {\n       return isNotAuthorizedOrForbidden(callResponse)\n-          ? doNext(packet) : super.onFailureNoRetry(packet, callResponse);\n+          ? doNext(createDomainCrdAndStartNamespaces(targetNamespaces), packet) : ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3NTE2MA=="}, "originalCommit": {"oid": "aeb38ccc753c5ddaef2d3d0c7d05f6eba2cfb874"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4316, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}