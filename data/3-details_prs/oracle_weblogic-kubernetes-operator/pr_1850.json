{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNTY3MzYy", "number": 1850, "title": "ItPodTemplates test conversion to Junit5", "bodyText": "Latest Result\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1142/", "createdAt": "2020-08-05T18:30:03Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850", "merged": true, "mergeCommit": {"oid": "b4811cc3ce84ba89a87b9ad7d4e2175cf7d60298"}, "closed": true, "closedAt": "2020-08-12T21:56:00Z", "author": {"login": "marinakog"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7--G7AH2gAyNDYzNTY3MzYyOmM4MDkwYTc2NWY4M2MxMGI3NjA5YTM2MDI4NjkxYWFhMWRhMzE5MWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-SfRTAH2gAyNDYzNTY3MzYyOjVkMDlhYmIxZTllNDVhNTA1MWIxYjZmZGUwMGVhYzdiNjQ5MDFkNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8090a765f83c10b7609a36028691aaa1da3191c", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c8090a765f83c10b7609a36028691aaa1da3191c", "committedDate": "2020-08-05T17:49:34Z", "message": "added tests for pod templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd3c3269350044227bca29f8027d89333c48a04d", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cd3c3269350044227bca29f8027d89333c48a04d", "committedDate": "2020-08-05T17:50:05Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d378ea6183d144777575e49ce5549515cdc37747", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d378ea6183d144777575e49ce5549515cdc37747", "committedDate": "2020-08-05T18:10:02Z", "message": "fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c098f81243e14c71b424a6c4ca2d3f7de5238bc4", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c098f81243e14c71b424a6c4ca2d3f7de5238bc4", "committedDate": "2020-08-05T18:16:33Z", "message": "fixed styling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "402bf599dc03a1cdc7013bbca0af207f11155576", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/402bf599dc03a1cdc7013bbca0af207f11155576", "committedDate": "2020-08-05T18:35:17Z", "message": "fixed styling1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7294511c36d071d7116adffe21a8a29a7312f059", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7294511c36d071d7116adffe21a8a29a7312f059", "committedDate": "2020-08-05T21:53:01Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00d744fdadc86f0db0a0865d591d6e1dfd42fb7b", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/00d744fdadc86f0db0a0865d591d6e1dfd42fb7b", "committedDate": "2020-08-05T21:53:50Z", "message": "removed junit4 test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8752bef815a6517a459b2cf548d4b79009c480a2", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8752bef815a6517a459b2cf548d4b79009c480a2", "committedDate": "2020-08-06T16:06:26Z", "message": "removed t3port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd6e0cca2c03105e19f3c44844fa910fd9a9f9d", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9cd6e0cca2c03105e19f3c44844fa910fd9a9f9d", "committedDate": "2020-08-06T16:06:50Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f3c52cb0a65899ec9b46c3259735487c2fd0b8c", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7f3c52cb0a65899ec9b46c3259735487c2fd0b8c", "committedDate": "2020-08-06T19:33:24Z", "message": "fixed domainhome dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ca7d8a704fdfc0b5395b80e327a520b97b33a6e", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5ca7d8a704fdfc0b5395b80e327a520b97b33a6e", "committedDate": "2020-08-06T19:35:09Z", "message": "fixed domainhome dir1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a7f9d9d5401627c4fc334627ae551d894778bf9", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5a7f9d9d5401627c4fc334627ae551d894778bf9", "committedDate": "2020-08-07T16:15:20Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/317b43e8d16105c22a0b3e08e553d960db53cd58", "committedDate": "2020-08-07T17:32:25Z", "message": " revert to 5ca7d8a704fdfc0b5395b80e327a520b97b33a6e"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTU0OTE0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#pullrequestreview-464554914", "createdAt": "2020-08-10T20:13:36Z", "commit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxMzozNlrOG-d9sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1NzowMVrOG-fhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1NTgyNQ==", "bodyText": "do you need JDBC/JMS system resources for this test?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468155825", "createdAt": "2020-08-10T20:13:36Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/resources/wdt-models/wdt-model.yaml", "diffHunk": "@@ -0,0 +1,85 @@\n+# Copyright 2020, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n+domainInfo:\n+  AdminUserName: '@@PROP:ADMIN_USER@@'\n+  AdminPassword: '@@PROP:ADMIN_PWD@@'\n+  ServerStartMode: '@@PROP:SERVER_START_MODE@@'\n+topology:\n+  Name: '@@PROP:DOMAIN_NAME@@'\n+  AdminServerName: '@@PROP:ADMIN_NAME@@'\n+  ProductionModeEnabled: '@@PROP:PRODUCTION_MODE_ENABLED@@'\n+  Cluster:\n+    '@@PROP:CLUSTER_NAME@@':\n+      ClientCertProxyEnabled: true\n+      DynamicServers:\n+        ServerTemplate: template1\n+        CalculatedListenPorts: false\n+        ServerNamePrefix: '@@PROP:MANAGED_SERVER_NAME_BASE@@'\n+        DynamicClusterSize: '@@PROP:CONFIGURED_MANAGED_SERVER_COUNT@@'\n+        MaxDynamicClusterSize: '@@PROP:CONFIGURED_MANAGED_SERVER_COUNT@@'\n+  Server:\n+    '@@PROP:ADMIN_NAME@@':\n+      ListenPort: '@@PROP:ADMIN_PORT@@'\n+      NetworkAccessPoint:\n+        T3Channel:\n+          ListenAddress: None\n+          ListenPort: '@@PROP:T3_CHANNEL_PORT@@'\n+          PublicAddress: '@@PROP:T3_PUBLIC_ADDRESS@@'\n+          PublicPort: '@@PROP:T3_CHANNEL_PORT@@'\n+  ServerTemplate:\n+    template1:\n+      Cluster: '@@PROP:CLUSTER_NAME@@'\n+      ListenPort: '@@PROP:MANAGED_SERVER_PORT@@'\n+resources:\n+  JDBCSystemResource:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTUyOQ==", "bodyText": "this method is called for creating domain home in image too, but the variable name used is miiImage", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468161529", "createdAt": "2020-08-10T20:17:44Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(\"wls-domain1\"),\n+          \"Can't find expected value for  label domainname\");\n+\n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+\n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain1Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain1Uid),\n+          \"Can't find expected value for label domainhome, the retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain1\");\n+      shutdownDomain(domain1Uid, domain1Namespace);\n+    }\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // shutdown domain1\n+    logger.info(\"Shutting down domain1\");\n+    assertTrue(shutdownDomain(domain1Uid, domain1Namespace),\n+        String.format(\"shutdown domain %s in namespace %s failed\", domain1Uid, domain1Namespace));\n+    if (wdtImage != null) {\n+      deleteImage(miiImage);\n+    }\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domain1Namespace);\n+    assertDoesNotThrow(() -> deleteDomainCustomResource(domain1Uid, domain1Namespace),\n+        \"deleteDomainCustomResource failed with ApiException\");\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    // Delete wdt domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domain2Namespace);\n+    assertDoesNotThrow(() -> deleteDomainCustomResource(domain2Uid, domain2Namespace),\n+        \"deleteDomainCustomResource failed with ApiException\");\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+  }\n+\n+  /**\n+   * Create and verify domain in image.\n+   * @return image name\n+   */\n+  private static String createAndVerifyDomainInImage() {\n+    // create image with model files\n+    logger.info(\"Create image with model file and verify\");\n+    String appPath = String.format(\"%s/../src/integration-tests/apps/testwebapp.war\", ITTESTS_DIR);\n+\n+    List<String> appList = new ArrayList();\n+    appList.add(appPath);\n+\n+    int t3ChannelPort = getNextFreePort(31600, 32767);  // the port range has to be between 31,000 to 32,767\n+\n+    Properties p = new Properties();\n+    p.setProperty(\"ADMIN_USER\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"ADMIN_PWD\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"DOMAIN_NAME\", domain2Uid);\n+    p.setProperty(\"DOMAIN_UID\", domain2Uid);\n+    p.setProperty(\"ADMIN_NAME\", \"admin-server\");\n+    p.setProperty(\"PRODUCTION_MODE_ENABLED\", \"true\");\n+    p.setProperty(\"CLUSTER_NAME\", clusterName);\n+    p.setProperty(\"CLUSTER_TYPE\", \"DYNAMIC\");\n+    p.setProperty(\"CONFIGURED_MANAGED_SERVER_COUNT\", \"2\");\n+    p.setProperty(\"MANAGED_SERVER_NAME_BASE\", \"managed-server\");\n+    p.setProperty(\"T3_CHANNEL_PORT\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"T3_PUBLIC_ADDRESS\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"MANAGED_SERVER_PORT\", \"8001\");\n+    p.setProperty(\"SERVER_START_MODE\", \"prod\");\n+    p.setProperty(\"ADMIN_PORT\", \"7001\");\n+    p.setProperty(\"MYSQL_USER\", \"wluser1\");\n+    p.setProperty(\"MYSQL_PWD\", \"wlpwd123\");\n+    // create a temporary WebLogic domain property file as a input for WDT model file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+            File.createTempFile(\"domain\", \"properties\"),\n+        \"Failed to create domain properties file\");\n+    assertDoesNotThrow(() ->\n+            p.store(new FileOutputStream(domainPropertiesFile), \"WDT properties file\"),\n+        \"Failed to write domain properties file\");\n+\n+    final List<String> propertyList = Collections.singletonList(domainPropertiesFile.getPath());\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(RESOURCE_DIR\n+        + \"/wdt-models/wdt-model.yaml\");\n+\n+    wdtImage =\n+        createImageAndVerify(PODTEMPLATES_IMAGE_NAME,\n+            modelList,\n+            appList,\n+            propertyList,\n+            WLS_BASE_IMAGE_NAME,\n+            WLS_BASE_IMAGE_TAG,\n+            WLS,\n+            false,\n+            domain2Uid, true);\n+\n+\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(wdtImage);\n+\n+    return wdtImage;\n+  }\n+\n+  //create domain from provided image and verify it's start\n+  private static void createAndVerifyDomain(String miiImage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MjczOA==", "bodyText": "fix the messages for domain home in image and model in image domains ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468162738", "createdAt": "2020-08-10T20:19:36Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(\"wls-domain1\"),\n+          \"Can't find expected value for  label domainname\");\n+\n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+\n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain1Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain1Uid),\n+          \"Can't find expected value for label domainhome, the retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain1\");\n+      shutdownDomain(domain1Uid, domain1Namespace);\n+    }\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // shutdown domain1\n+    logger.info(\"Shutting down domain1\");\n+    assertTrue(shutdownDomain(domain1Uid, domain1Namespace),\n+        String.format(\"shutdown domain %s in namespace %s failed\", domain1Uid, domain1Namespace));\n+    if (wdtImage != null) {\n+      deleteImage(miiImage);\n+    }\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domain1Namespace);\n+    assertDoesNotThrow(() -> deleteDomainCustomResource(domain1Uid, domain1Namespace),\n+        \"deleteDomainCustomResource failed with ApiException\");\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    // Delete wdt domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domain2Namespace);\n+    assertDoesNotThrow(() -> deleteDomainCustomResource(domain2Uid, domain2Namespace),\n+        \"deleteDomainCustomResource failed with ApiException\");\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+  }\n+\n+  /**\n+   * Create and verify domain in image.\n+   * @return image name\n+   */\n+  private static String createAndVerifyDomainInImage() {\n+    // create image with model files\n+    logger.info(\"Create image with model file and verify\");\n+    String appPath = String.format(\"%s/../src/integration-tests/apps/testwebapp.war\", ITTESTS_DIR);\n+\n+    List<String> appList = new ArrayList();\n+    appList.add(appPath);\n+\n+    int t3ChannelPort = getNextFreePort(31600, 32767);  // the port range has to be between 31,000 to 32,767\n+\n+    Properties p = new Properties();\n+    p.setProperty(\"ADMIN_USER\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"ADMIN_PWD\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"DOMAIN_NAME\", domain2Uid);\n+    p.setProperty(\"DOMAIN_UID\", domain2Uid);\n+    p.setProperty(\"ADMIN_NAME\", \"admin-server\");\n+    p.setProperty(\"PRODUCTION_MODE_ENABLED\", \"true\");\n+    p.setProperty(\"CLUSTER_NAME\", clusterName);\n+    p.setProperty(\"CLUSTER_TYPE\", \"DYNAMIC\");\n+    p.setProperty(\"CONFIGURED_MANAGED_SERVER_COUNT\", \"2\");\n+    p.setProperty(\"MANAGED_SERVER_NAME_BASE\", \"managed-server\");\n+    p.setProperty(\"T3_CHANNEL_PORT\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"T3_PUBLIC_ADDRESS\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"MANAGED_SERVER_PORT\", \"8001\");\n+    p.setProperty(\"SERVER_START_MODE\", \"prod\");\n+    p.setProperty(\"ADMIN_PORT\", \"7001\");\n+    p.setProperty(\"MYSQL_USER\", \"wluser1\");\n+    p.setProperty(\"MYSQL_PWD\", \"wlpwd123\");\n+    // create a temporary WebLogic domain property file as a input for WDT model file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+            File.createTempFile(\"domain\", \"properties\"),\n+        \"Failed to create domain properties file\");\n+    assertDoesNotThrow(() ->\n+            p.store(new FileOutputStream(domainPropertiesFile), \"WDT properties file\"),\n+        \"Failed to write domain properties file\");\n+\n+    final List<String> propertyList = Collections.singletonList(domainPropertiesFile.getPath());\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(RESOURCE_DIR\n+        + \"/wdt-models/wdt-model.yaml\");\n+\n+    wdtImage =\n+        createImageAndVerify(PODTEMPLATES_IMAGE_NAME,\n+            modelList,\n+            appList,\n+            propertyList,\n+            WLS_BASE_IMAGE_NAME,\n+            WLS_BASE_IMAGE_TAG,\n+            WLS,\n+            false,\n+            domain2Uid, true);\n+\n+\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(wdtImage);\n+\n+    return wdtImage;\n+  }\n+\n+  //create domain from provided image and verify it's start\n+  private static void createAndVerifyDomain(String miiImage,\n+                                            String domainUid,\n+                                            String namespace,\n+                                            String domainHomeSource,\n+                                            int replicaCount) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Create docker registry secret in namespace {0}\", namespace);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(namespace),\n+        String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, namespace,\n+        \"weblogic\", \"welcome1\"),\n+        String.format(\"create secret for admin credentials failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, namespace,\n+        \"weblogicenc\", \"weblogicenc\"),\n+        String.format(\"create encryption secret failed for %s\", encryptionSecretName));\n+\n+    // create domain and verify\n+    logger.info(\"Create model in image domain {0} in namespace {1} using docker image {2}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 382}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MzE3Ng==", "bodyText": "add some comments and log messages as to what you are verifying here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468173176", "createdAt": "2020-08-10T20:40:37Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3Mzg3Mg==", "bodyText": "same as above by leaving a blank line between the checks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468173872", "createdAt": "2020-08-10T20:41:59Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NTEzNQ==", "bodyText": "is this needed here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468175135", "createdAt": "2020-08-10T20:44:40Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NjExMw==", "bodyText": "leave blank line for better readability", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468176113", "createdAt": "2020-08-10T20:46:35Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NjI1Mg==", "bodyText": "leave blank line for better readability", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468176252", "createdAt": "2020-08-10T20:46:51Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NjM3OA==", "bodyText": "leave blank line for better readability", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468176378", "createdAt": "2020-08-10T20:47:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3NjkyMg==", "bodyText": "what is this?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468176922", "createdAt": "2020-08-10T20:48:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(\"wls-domain1\"),\n+          \"Can't find expected value for  label domainname\");\n+\n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+\n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain1Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3Nzg3MA==", "bodyText": "checking wdtImage and deleting miiImage? images are deleted in ImageBuilders extension class at the end of the test suite. Is this needed here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468177870", "createdAt": "2020-08-10T20:50:05Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(\"wls-domain1\"),\n+          \"Can't find expected value for  label domainname\");\n+\n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+\n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain1Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain1Uid),\n+          \"Can't find expected value for label domainhome, the retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain1\");\n+      shutdownDomain(domain1Uid, domain1Namespace);\n+    }\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // shutdown domain1\n+    logger.info(\"Shutting down domain1\");\n+    assertTrue(shutdownDomain(domain1Uid, domain1Namespace),\n+        String.format(\"shutdown domain %s in namespace %s failed\", domain1Uid, domain1Namespace));\n+    if (wdtImage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3ODY2Nw==", "bodyText": "test infra takes care of cleanup, no need to have this code here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468178667", "createdAt": "2020-08-10T20:51:43Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(\"wls-domain1\"),\n+          \"Can't find expected value for  label domainname\");\n+\n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+\n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain1Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain1Uid),\n+          \"Can't find expected value for label domainhome, the retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain1\");\n+      shutdownDomain(domain1Uid, domain1Namespace);\n+    }\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // shutdown domain1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3OTIzMQ==", "bodyText": "is this related to template variables ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468179231", "createdAt": "2020-08-10T20:52:50Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create domain and verify that it's running\");\n+      createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", replicaCount);\n+      String managedServerPodName = domain1Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      //checking that values from template variables are assigned.\n+      V1Pod managedServerPod = Kubernetes.getPod(domain1Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod, \"The managed-server1 pod does not exist in namespace \" + domain1Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(\"wls-domain1\"),\n+          \"Can't find expected value for  label domainname\");\n+\n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+\n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain1Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain1Uid),\n+          \"Can't find expected value for label domainhome, the retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain1\");\n+      shutdownDomain(domain1Uid, domain1Namespace);\n+    }\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // shutdown domain1\n+    logger.info(\"Shutting down domain1\");\n+    assertTrue(shutdownDomain(domain1Uid, domain1Namespace),\n+        String.format(\"shutdown domain %s in namespace %s failed\", domain1Uid, domain1Namespace));\n+    if (wdtImage != null) {\n+      deleteImage(miiImage);\n+    }\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domain1Namespace);\n+    assertDoesNotThrow(() -> deleteDomainCustomResource(domain1Uid, domain1Namespace),\n+        \"deleteDomainCustomResource failed with ApiException\");\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    // Delete wdt domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domain2Namespace);\n+    assertDoesNotThrow(() -> deleteDomainCustomResource(domain2Uid, domain2Namespace),\n+        \"deleteDomainCustomResource failed with ApiException\");\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+  }\n+\n+  /**\n+   * Create and verify domain in image.\n+   * @return image name\n+   */\n+  private static String createAndVerifyDomainInImage() {\n+    // create image with model files\n+    logger.info(\"Create image with model file and verify\");\n+    String appPath = String.format(\"%s/../src/integration-tests/apps/testwebapp.war\", ITTESTS_DIR);\n+\n+    List<String> appList = new ArrayList();\n+    appList.add(appPath);\n+\n+    int t3ChannelPort = getNextFreePort(31600, 32767);  // the port range has to be between 31,000 to 32,767\n+\n+    Properties p = new Properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4MTM3OQ==", "bodyText": "is there any difference in the way the variables are used for domain home in image and model in image domain?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468181379", "createdAt": "2020-08-10T20:57:01Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjA3MDY0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#pullrequestreview-464607064", "createdAt": "2020-08-10T21:39:55Z", "commit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTozOTo1NlrOG-gv4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTozOTo1NlrOG-gv4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMTQ0MQ==", "bodyText": "throughout the test add some logs and comments as to what you are verifying.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r468201441", "createdAt": "2020-08-10T21:39:56Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0861af4e738cf28f37db3f58dc749288e5b7a6b", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e0861af4e738cf28f37db3f58dc749288e5b7a6b", "committedDate": "2020-08-10T23:51:23Z", "message": " addressed the review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2879ab292ff09d34687a7cd5973f5da67328265", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f2879ab292ff09d34687a7cd5973f5da67328265", "committedDate": "2020-08-11T00:03:04Z", "message": "put back Lenny's commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3f9256ba3788fecf9b1ea16505c9f0ea0a81800", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a3f9256ba3788fecf9b1ea16505c9f0ea0a81800", "committedDate": "2020-08-11T16:26:38Z", "message": "added more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3edb1c1051ef811c6d140f7ff818f4ca0bea7dd2", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3edb1c1051ef811c6d140f7ff818f4ca0bea7dd2", "committedDate": "2020-08-11T16:26:46Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6892e364291849bd627f6affbc1fa57c7c7164", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cc6892e364291849bd627f6affbc1fa57c7c7164", "committedDate": "2020-08-11T22:55:57Z", "message": "addressed comments, move to use default wdt image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0598c1908d46c642c6783c921474457faa93ad55", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0598c1908d46c642c6783c921474457faa93ad55", "committedDate": "2020-08-11T22:56:01Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTg5MjYy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#pullrequestreview-465989262", "createdAt": "2020-08-12T14:46:02Z", "commit": {"oid": "0598c1908d46c642c6783c921474457faa93ad55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0NjowM1rOG_kr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0NjowM1rOG_kr5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxNDUzMg==", "bodyText": "I don't think its needed as there is no difference in the way the template variables are used. Can you remove this test.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#discussion_r469314532", "createdAt": "2020-08-12T14:46:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodTemplates.java", "diffHunk": "@@ -0,0 +1,495 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_IMAGE_DOMAINHOME_BASE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * This test is used for creating Operator(s) and domain which uses pod templates.\n+ */\n+@DisplayName(\"Test to verify domain pod templates.\")\n+@IntegrationTest\n+class ItPodTemplates {\n+\n+\n+  // domain constants\n+  private static final int replicaCount = 1;\n+  private static String domain1Namespace = null;\n+  private static String domain1Uid = \"itpodtemplates-domain-1\";\n+  private static String domain2Namespace = null;\n+  private static String domain2Uid = \"itpodtemplates-domain-2\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  // constants for creating domain image using model in image\n+  private static final String PODTEMPLATES_IMAGE_NAME = \"podtemplates-image\";\n+\n+  private static String clusterName = \"cluster-1\";\n+  private static String miiImage = null;\n+  private static String wdtImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install operator.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    final String opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Get a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    logger.info(\"install and verify operator\");\n+    installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n+\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME) in serverPod for Domain In Image. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for domain in image.\")\n+  public void testPodTemplateUsingVariablesDomainInImage() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      String managedServerPodName = domain2Uid + \"-\" + MANAGED_SERVER_NAME_BASE + \"1\";\n+      V1Pod managedServerPod = Kubernetes.getPod(domain2Namespace, null, managedServerPodName);\n+      assertNotNull(managedServerPod,\"The admin pod does not exist in namespace \" + domain2Namespace);\n+      String serverName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"servername\");\n+      assertNotNull(serverName, \"Can't find label servername\");\n+      assertTrue(serverName.equalsIgnoreCase(\"managed-server1\"),\n+          \"Can't find or match label servername\");\n+      String domainName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainname\");\n+      assertNotNull(domainName, \"Can't find label domainname\");\n+      assertTrue(domainName.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for  label domainname\");\n+      \n+      String myclusterName = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"clustername\");\n+      assertNotNull(myclusterName, \"Can't find label clustername\");\n+      assertTrue(myclusterName.equalsIgnoreCase(clusterName),\n+          \"Can't find expected value for label clustername\");\n+      \n+      String domainuid = managedServerPod\n+          .getMetadata().getLabels()\n+          .get(\"domainuid\");\n+      assertNotNull(domainuid, \"Can't find label domainuid\");\n+      assertTrue(domainuid.equalsIgnoreCase(domain2Uid),\n+          \"Can't find expected value for label domainuid\");\n+\n+      String loghome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"loghome\");\n+      assertNotNull(loghome, \"Can't find label loghome\");\n+      //value is not initialized since logHomeEnable = false\n+      assertTrue(loghome.equalsIgnoreCase(\"$(LOG_HOME)\"),\n+          \"Can't find expected value for label loghome, real value is \" + loghome);\n+\n+      String domainhome = managedServerPod\n+          .getMetadata().getAnnotations()\n+          .get(\"domainhome\");\n+      assertNotNull(domainhome, \"Can't find label domainhome\");\n+      assertTrue(domainhome.equalsIgnoreCase(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domain2Uid),\n+          \"Can't find expected value for label domainhome, retrieved value is :\" + domainhome);\n+\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      shutdownDomain(domain2Uid, domain2Namespace);\n+    }\n+  }\n+\n+  /**\n+   * Test pod templates using all the variables $(SERVER_NAME), $(DOMAIN_NAME), $(DOMAIN_UID),\n+   * $(DOMAIN_HOME), $(LOG_HOME) and $(CLUSTER_NAME)\n+   * in serverPod for Model In Image domain. Make sure the domain comes up\n+   * successfully.\n+   *\n+   * @throws Exception when the domain crd creation fails or when updating the serverPod with\n+   *                   variables\n+   */\n+  @Test\n+  @DisplayName(\"Test pod templates using all the variables for model in image domain.\")\n+  public void testPodTemplateUsingVariablesModelInImage() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4MTM3OQ=="}, "originalCommit": {"oid": "317b43e8d16105c22a0b3e08e553d960db53cd58"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "340b0d866d72fed4c125d26bbaeed70d707b7807", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/340b0d866d72fed4c125d26bbaeed70d707b7807", "committedDate": "2020-08-12T15:39:15Z", "message": "removed mii test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjY5NzUx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#pullrequestreview-466269751", "createdAt": "2020-08-12T20:54:31Z", "commit": {"oid": "340b0d866d72fed4c125d26bbaeed70d707b7807"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjgyMDc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1850#pullrequestreview-466282078", "createdAt": "2020-08-12T21:13:55Z", "commit": {"oid": "340b0d866d72fed4c125d26bbaeed70d707b7807"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d09abb1e9e45a5051b1b6fde00eac7b64901d70", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d09abb1e9e45a5051b1b6fde00eac7b64901d70", "committedDate": "2020-08-12T21:41:50Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podtempl"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4349, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}