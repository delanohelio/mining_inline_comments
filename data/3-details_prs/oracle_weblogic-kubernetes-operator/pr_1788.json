{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDYxNTQ0", "number": 1788, "title": "Istio Configuration in MII Model and DomainHomeOnPV model ", "bodyText": "Test case added to  verify ISTIO configuration  in\na) Model In Image\nb) Domain Home On PV\nAdditionally  (a) optimized the usage of utility methods  in the Test Classes instead of creating locally (b) modified istio installation scripts to to do some additional check to ensure proper installation.\nMulti Node Cluster Jenkin\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests/1134\nKind Cluster\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/664", "createdAt": "2020-07-07T00:05:08Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788", "merged": true, "mergeCommit": {"oid": "155eb123640d0989e292739be11ec9c4cd369760"}, "closed": true, "closedAt": "2020-07-09T19:58:32Z", "author": {"login": "anpanigr"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyZYLiAH2gAyNDQ1MDYxNTQ0OjQzOGFhMjYwZmY0NDVmYmIwM2ZiYzk5N2RjMjQ0NTgyNWY0NWU2YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczTGJmAFqTQ0NTg1NDUxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "438aa260ff445fbb03fbc997dc2445825f45e6a0", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/438aa260ff445fbb03fbc997dc2445825f45e6a0", "committedDate": "2020-07-06T22:56:20Z", "message": "Added missing files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f3118de93b5f8b568ab0221d2dd389f268e7de", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/57f3118de93b5f8b568ab0221d2dd389f268e7de", "committedDate": "2020-07-07T18:51:58Z", "message": "Renamed the test class and methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "286c4c383b7f68b92e3df41e8a2b1c3994b49fee", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/286c4c383b7f68b92e3df41e8a2b1c3994b49fee", "committedDate": "2020-07-07T18:52:10Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into istio-mii"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODc1NTc3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-444875577", "createdAt": "2020-07-08T15:21:41Z", "commit": {"oid": "286c4c383b7f68b92e3df41e8a2b1c3994b49fee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNToyMTo0MlrOGutNjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo0ODoxNFrOGuuVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODQzMA==", "bodyText": "It says both WLST and wdt, fix the description.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r451628430", "createdAt": "2020-07-08T15:21:42Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -0,0 +1,625 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1ContainerPort;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1HostPathVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Job;\n+import io.kubernetes.client.openapi.models.V1JobCondition;\n+import io.kubernetes.client.openapi.models.V1JobSpec;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolume;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaim;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimSpec;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeSpec;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1PodTemplateSpec;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1SecurityContext;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Istio;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CommonTestUtils;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_EMAIL;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespacedJob;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createPersistentVolume;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createPersistentVolumeClaim;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getJob;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listPods;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.jobCompleted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.getIstioHttpIngressPort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Tests to create domain in persistent volume using WLST.\n+ */\n+@DisplayName(\"Verify istio enabled WebLogic domain in domainhome-on-pv model\")\n+@IntegrationTest\n+public class ItIstioDomainInPV  {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static String image = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+  private final String domainUid = \"istio-div\";\n+  private final String clusterName = \"mycluster\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+  private static LoggingFacade logger = null;\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull WebLogic image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // Label the operator/domain namespace with istio-injection=enabled\n+    Map<String, String> labelMap = new HashMap();\n+    labelMap.put(\"istio-injection\", \"enabled\");\n+\n+    assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n+    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + image.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      image = kindRepoImage;\n+      isUseSecret = false;\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain using WLST in a persistent volume using wdt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "286c4c383b7f68b92e3df41e8a2b1c3994b49fee"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0Mzk4OA==", "bodyText": "There is lot of duplicated code from ItDomainInPV which can be moved to common or util class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r451643988", "createdAt": "2020-07-08T15:44:12Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioDomainInPV.java", "diffHunk": "@@ -0,0 +1,625 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.custom.Quantity;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1ContainerPort;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1HostPathVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Job;\n+import io.kubernetes.client.openapi.models.V1JobCondition;\n+import io.kubernetes.client.openapi.models.V1JobSpec;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolume;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaim;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimSpec;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeSpec;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1PodTemplateSpec;\n+import io.kubernetes.client.openapi.models.V1ResourceRequirements;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1SecurityContext;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Istio;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CommonTestUtils;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_EMAIL;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespacedJob;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createPersistentVolume;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createPersistentVolumeClaim;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getJob;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listPods;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.jobCompleted;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.getIstioHttpIngressPort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Tests to create domain in persistent volume using WLST.\n+ */\n+@DisplayName(\"Verify istio enabled WebLogic domain in domainhome-on-pv model\")\n+@IntegrationTest\n+public class ItIstioDomainInPV  {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static String image = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+  private final String domainUid = \"istio-div\";\n+  private final String clusterName = \"mycluster\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+  private static LoggingFacade logger = null;\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull WebLogic image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+\n+    logger = getLogger();\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // Label the operator/domain namespace with istio-injection=enabled\n+    Map<String, String> labelMap = new HashMap();\n+    labelMap.put(\"istio-injection\", \"enabled\");\n+\n+    assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n+    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + image.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      image = kindRepoImage;\n+      isUseSecret = false;\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain using WLST in a persistent volume using wdt.\n+   * Add istio configuration. \n+   * Deploy istio gateways and virtual service.\n+   * Verify domain pods runs in ready state and services are created.\n+   * Verify login to WebLogic console is successful thru istio ingress Port.\n+   */\n+  @Test\n+  @DisplayName(\"Create WebLogic domain in PV with Istio\")\n+  public void testIstioDomainHomeInPv() {\n+\n+    final String managedServerNameBase = \"wlst-ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+    final int replicaCount = 2;\n+    final int t3ChannelPort = getNextFreePort(30000, 32767);  // the port range has to be between 30,000 to 32,767\n+\n+    final String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+    final String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    if (isUseSecret) {\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+\n+    // create WebLogic domain credential secret\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create persistent volume and persistent volume claim for domain\n+    // these resources should be labeled with domainUid for cleanup after test\n+    createPV(pvName, domainUid);\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // create a temporary WebLogic domain property file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+            File.createTempFile(\"domain\", \"properties\"),\n+        \"Failed to create domain properties file\");\n+    Properties p = new Properties();\n+    p.setProperty(\"domain_path\", \"/shared/domains\");\n+    p.setProperty(\"domain_name\", domainUid);\n+    p.setProperty(\"domain_uid\", domainUid);\n+    p.setProperty(\"cluster_name\", clusterName);\n+    p.setProperty(\"admin_server_name\", adminServerName);\n+    p.setProperty(\"managed_server_port\", \"8001\");\n+    p.setProperty(\"admin_server_port\", \"7001\");\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"admin_t3_public_address\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_t3_channel_port\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"number_of_ms\", \"4\");\n+    p.setProperty(\"managed_server_name_base\", managedServerNameBase);\n+    p.setProperty(\"domain_logs\", \"/shared/logs\");\n+    p.setProperty(\"production_mode_enabled\", \"true\");\n+    assertDoesNotThrow(() ->\n+            p.store(new FileOutputStream(domainPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write domain properties file\");\n+\n+    // WLST script for creating domain\n+    Path wlstScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"wlst-create-istio-domain-onpv.py\");\n+\n+    // create configmap and domain on persistent volume using the WLST script and property file\n+    createDomainOnPVUsingWlst(wlstScript, domainPropertiesFile.toPath(),\n+        pvName, pvcName, domainNamespace);\n+\n+    // Enable istio in domain custom resource configuration object.\n+    // Add T3Channel Service with port assigned to Istio TCP ingress port.\n+    logger.info(\"Creating domain custom resource\");\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHome(\"/shared/domains/\" + domainUid) \n+            .domainHomeSourceType(\"PersistentVolume\")\n+            .image(image)\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .imagePullSecrets(isUseSecret ? Arrays.asList(\n+                new V1LocalObjectReference()\n+                    .name(OCR_SECRET_NAME))\n+                : null)\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(wlSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .logHomeEnabled(Boolean.TRUE)\n+            .logHome(\"/shared/logs/\" + domainUid)\n+            .dataHome(\"\")\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod() //serverpod\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .addVolumesItem(new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(new V1PersistentVolumeClaimVolumeSource()\n+                        .claimName(pvcName)))\n+                .addVolumeMountsItem(new V1VolumeMount()\n+                    .mountPath(\"/shared\")\n+                    .name(pvName)))\n+            .adminServer(new AdminServer() //admin server\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"T3Channel\")\n+                        .nodePort(t3ChannelPort))))\n+            .addClustersItem(new Cluster() //cluster\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .istio(new Istio()\n+                    .enabled(Boolean.TRUE)\n+                    .readinessPort(8888))));\n+\n+    // verify the domain custom resource is created\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // verify managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, domainNamespace);\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, domainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    String clusterService = domainUid + \"-cluster-\" + clusterName + \".\" + domainNamespace + \".svc.cluster.local\";\n+\n+    Map<String, String> templateMap  = new HashMap();\n+    templateMap.put(\"NAMESPACE\", domainNamespace);\n+    templateMap.put(\"DUID\", domainUid);\n+    templateMap.put(\"ADMIN_SERVICE\",adminServerPodName);\n+    templateMap.put(\"CLUSTER_SERVICE\", clusterService);\n+\n+    Path srcHttpFile = Paths.get(RESOURCE_DIR, \"istio\", \"istio-http-template.yaml\");\n+    Path targetHttpFile = assertDoesNotThrow(\n+        () -> generateFileFromTemplate(srcHttpFile.toString(), \"istio-http.yaml\", templateMap));\n+    logger.info(\"Generated Http VS/Gateway file path is {0}\", targetHttpFile);\n+\n+    boolean deployRes = assertDoesNotThrow(\n+        () -> deployHttpIstioGatewayAndVirtualservice(targetHttpFile));\n+    assertTrue(deployRes, \"Failed to deploy Http Istio Gateway/VirtualService\");\n+\n+    int istioIngressPort = getIstioHttpIngressPort();\n+    logger.info(\"Istio http ingress Port is {0}\", istioIngressPort);\n+\n+    String consoleUrl = \"http://\" + K8S_NODEPORT_HOST + \":\" + istioIngressPort + \"/console/login/LoginForm.jsp\";\n+    boolean checkConsole =\n+         checkAppUsingHostHeader(consoleUrl, domainNamespace + \".org\");\n+    assertTrue(checkConsole, \"Failed to access WebLogic console\");\n+    logger.info(\"WebLogic console is accessible\");\n+\n+    Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n+    ExecResult result = null;\n+    result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST, \n+        String.valueOf(istioIngressPort),\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, \n+        clusterName, archivePath, domainNamespace + \".org\", \"testwebapp\");\n+    assertNotNull(result, \"Application deployment failed\");\n+    logger.info(\"Application deployment returned {0}\", result.toString());\n+    assertEquals(\"202\", result.stdout(), \"Application deployed successfully\");\n+\n+    String url = \"http://\" + K8S_NODEPORT_HOST + \":\" + istioIngressPort + \"/testwebapp/index.jsp\";\n+    logger.info(\"Application Access URL {0}\", url);\n+    boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n+    assertTrue(checkApp, \"Failed to access WebLogic application\");\n+\n+  }\n+\n+  /**\n+   * Create a WebLogic domain on a persistent volume by doing the following.\n+   * Create a configmap containing WLST script and property file.\n+   * Create a Kubernetes job to create domain on persistent volume.\n+   *\n+   * @param wlstScriptFile       python script to create domain\n+   * @param domainPropertiesFile properties file containing domain configuration\n+   * @param pvName               name of the persistent volume to create domain in\n+   * @param pvcName              name of the persistent volume claim\n+   * @param namespace            name of the domain namespace in which the job is created\n+   */\n+  private void createDomainOnPVUsingWlst(Path wlstScriptFile, Path domainPropertiesFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "286c4c383b7f68b92e3df41e8a2b1c3994b49fee"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NjUyMQ==", "bodyText": "why is this?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r451646521", "createdAt": "2020-07-08T15:47:55Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioMiiDomain.java", "diffHunk": "@@ -0,0 +1,297 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Istio;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployIstioDestinationRule;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.getIstioHttpIngressPort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test istio enabled WebLogic Domain in mii model\")\n+@IntegrationTest\n+class ItIstioMiiDomain {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static ConditionFactory withQuickRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private String domainUid = \"istio-mii\";\n+  private final String clusterName = \"cluster-1\"; // do not modify \n+  private final String adminServerName = \"admin-server\"; // do not modify\n+  private String miiImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(6, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Assign unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // Label the domain/operator namespace with istio-injection=enabled\n+    Map<String, String> labelMap = new HashMap();\n+    labelMap.put(\"istio-injection\", \"enabled\");\n+    assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n+    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Create a domain using model-in-image model.\n+   * Add istio configuration with default readinessPort \n+   * Do not add any AdminService under AdminServer configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "286c4c383b7f68b92e3df41e8a2b1c3994b49fee"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NjczNw==", "bodyText": "add full stop at the end of each sentence.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r451646737", "createdAt": "2020-07-08T15:48:14Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioMiiDomain.java", "diffHunk": "@@ -0,0 +1,297 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Istio;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployIstioDestinationRule;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.getIstioHttpIngressPort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test istio enabled WebLogic Domain in mii model\")\n+@IntegrationTest\n+class ItIstioMiiDomain {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static ConditionFactory withQuickRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private String domainUid = \"istio-mii\";\n+  private final String clusterName = \"cluster-1\"; // do not modify \n+  private final String adminServerName = \"admin-server\"; // do not modify\n+  private String miiImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(6, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Assign unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // Label the domain/operator namespace with istio-injection=enabled\n+    Map<String, String> labelMap = new HashMap();\n+    labelMap.put(\"istio-injection\", \"enabled\");\n+    assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n+    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Create a domain using model-in-image model.\n+   * Add istio configuration with default readinessPort ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "286c4c383b7f68b92e3df41e8a2b1c3994b49fee"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c992c80d1e00395ef8c051d79bbb548f17bdd01a", "committedDate": "2020-07-08T22:50:46Z", "message": "Addressed review comments. modified the istio installation script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ff8f5f6abdde686db1291cc9f218b5263670a5e", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ff8f5f6abdde686db1291cc9f218b5263670a5e", "committedDate": "2020-07-09T15:21:49Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into istio-mii"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzQ5MTQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-445749145", "createdAt": "2020-07-09T15:50:54Z", "commit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1MDo1NFrOGvXWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1MDo1NFrOGvXWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxODg5MQ==", "bodyText": "can you add a * at the beginning", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r452318891", "createdAt": "2020-07-09T15:50:54Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioMiiDomain.java", "diffHunk": "@@ -0,0 +1,297 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Istio;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployIstioDestinationRule;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.getIstioHttpIngressPort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test istio enabled WebLogic Domain in mii model\")\n+@IntegrationTest\n+class ItIstioMiiDomain {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static ConditionFactory withQuickRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private String domainUid = \"istio-mii\";\n+  private final String clusterName = \"cluster-1\"; // do not modify \n+  private final String adminServerName = \"admin-server\"; // do not modify\n+  private String miiImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzUxNzA2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-445751706", "createdAt": "2020-07-09T15:53:58Z", "commit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1Mzo1OFrOGvXebQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1Mzo1OFrOGvXebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMDg3Nw==", "bodyText": "remove the blank line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r452320877", "createdAt": "2020-07-09T15:53:58Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioMiiDomain.java", "diffHunk": "@@ -0,0 +1,297 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Istio;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkAppUsingHostHeader;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.generateFileFromTemplate;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployHttpIstioGatewayAndVirtualservice;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.deployIstioDestinationRule;\n+import static oracle.weblogic.kubernetes.utils.IstioUtils.getIstioHttpIngressPort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test istio enabled WebLogic Domain in mii model\")\n+@IntegrationTest\n+class ItIstioMiiDomain {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static ConditionFactory withQuickRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private String domainUid = \"istio-mii\";\n+  private final String clusterName = \"cluster-1\"; // do not modify \n+  private final String adminServerName = \"admin-server\"; // do not modify\n+  private String miiImage = null;\n+  private static LoggingFacade logger = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(6, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Assign unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // Label the domain/operator namespace with istio-injection=enabled\n+    Map<String, String> labelMap = new HashMap();\n+    labelMap.put(\"istio-injection\", \"enabled\");\n+    assertDoesNotThrow(() -> addLabelsToNamespace(domainNamespace,labelMap));\n+    assertDoesNotThrow(() -> addLabelsToNamespace(opNamespace,labelMap));\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Create a domain using model-in-image model.\n+   * Add istio configuration with default readinessPort.\n+   * Do not add any AdminService under AdminServer configuration.\n+   * Deploy istio gateways and virtual service.\n+   * Verify server pods are in ready state and services are created.\n+   * Verify login to WebLogic console is successful thru istio ingress port.\n+   * Deploy a web application thru istio http ingress port using REST api.  \n+   * Access web application thru istio http ingress port using curl.\n+   */\n+  @Test\n+  @DisplayName(\"Create WebLogic Domain with mii model with istio\")\n+  public void testIstioModelInImage() {\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                    adminSecretName,\n+                                    domainNamespace,\n+                                    \"weblogic\",\n+                                    \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                      encryptionSecretName,\n+                                      domainNamespace,\n+                            \"weblogicenc\",\n+                            \"weblogicenc\"),\n+                    String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+                                      domainNamespace,\n+                                      adminSecretName,\n+                                      REPO_SECRET_NAME,\n+                                      encryptionSecretName,\n+                                      replicaCount,\n+                              MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+\n+    // create model in image domain\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    String clusterService = domainUid + \"-cluster-\" + clusterName + \".\" + domainNamespace + \".svc.cluster.local\";\n+\n+    Map<String, String> templateMap  = new HashMap();\n+    templateMap.put(\"NAMESPACE\", domainNamespace);\n+    templateMap.put(\"DUID\", domainUid);\n+    templateMap.put(\"ADMIN_SERVICE\",adminServerPodName);\n+    templateMap.put(\"CLUSTER_SERVICE\", clusterService);\n+\n+    Path srcHttpFile = Paths.get(RESOURCE_DIR, \"istio\", \"istio-http-template.yaml\");\n+    Path targetHttpFile = assertDoesNotThrow(\n+        () -> generateFileFromTemplate(srcHttpFile.toString(), \"istio-http.yaml\", templateMap));\n+    logger.info(\"Generated Http VS/Gateway file path is {0}\", targetHttpFile);\n+    \n+    boolean deployRes = assertDoesNotThrow(\n+        () -> deployHttpIstioGatewayAndVirtualservice(targetHttpFile)); \n+    assertTrue(deployRes, \"Failed to deploy Http Istio Gateway/VirtualService\");\n+\n+    Path srcDrFile = Paths.get(RESOURCE_DIR, \"istio\", \"istio-dr-template.yaml\");\n+    Path targetDrFile = assertDoesNotThrow(\n+        () -> generateFileFromTemplate(srcDrFile.toString(), \"istio-dr.yaml\", templateMap));\n+    logger.info(\"Generated DestinationRule file path is {0}\", targetDrFile);\n+\n+    deployRes = assertDoesNotThrow(\n+        () -> deployIstioDestinationRule(targetDrFile));\n+    assertTrue(deployRes, \"Failed to deploy Istio DestinationRule\");\n+\n+    int istioIngressPort = getIstioHttpIngressPort();\n+    logger.info(\"Istio Ingress Port is {0}\", istioIngressPort);\n+\n+    String consoleUrl = \"http://\" + K8S_NODEPORT_HOST + \":\" + istioIngressPort + \"/console/login/LoginForm.jsp\";\n+    boolean checkConsole = \n+         checkAppUsingHostHeader(consoleUrl, domainNamespace + \".org\");\n+    assertTrue(checkConsole, \"Failed to access WebLogic console\");\n+    logger.info(\"WebLogic console is accessible\");\n+\n+\n+    Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n+    ExecResult result = null;\n+    result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST, \n+        String.valueOf(istioIngressPort),\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, \n+        clusterName, archivePath, domainNamespace + \".org\", \"testwebapp\");\n+    assertNotNull(result, \"Application deployment failed\");\n+    logger.info(\"Application deployment returned {0}\", result.toString());\n+    assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+    String url = \"http://\" + K8S_NODEPORT_HOST + \":\" + istioIngressPort + \"/testwebapp/index.jsp\";\n+    logger.info(\"Application Access URL {0}\", url);\n+    boolean checkApp = checkAppUsingHostHeader(url, domainNamespace + \".org\");\n+    assertTrue(checkApp, \"Failed to access WebLogic application\");\n+  }\n+\n+  private Domain createDomainResource(String domainUid, String domNamespace, \n+           String adminSecretName, String repoSecretName, \n+           String encryptionSecretName, int replicaCount, String miiImage) {\n+\n+    // create the domain CR\n+    return new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(repoSecretName))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\"))\n+            .addClustersItem(new Cluster()\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                    .istio(new Istio()\n+                         .enabled(Boolean.TRUE)\n+                         .readinessPort(8888))\n+                     .model(new Model()\n+                         .domainType(\"WLS\")\n+                         .runtimeEncryptionSecret(encryptionSecretName))\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "originalPosition": 293}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzU3NDU5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-445757459", "createdAt": "2020-07-09T16:00:31Z", "commit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowMDozMVrOGvXvMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowMDozMVrOGvXvMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNTE3MA==", "bodyText": "this is for line 125. I am not able to comment there. Can you add a *?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#discussion_r452325170", "createdAt": "2020-07-09T16:00:31Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -107,7 +107,7 @@\n   private static String dockerConfigJson = \"\";\n \n   private static int replicaCount = 2;\n-  private static final String domainUid = \"miiaddcluster\";\n+  private static final String domainUid = \"mii-add-cluster\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzU4NTc3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-445758577", "createdAt": "2020-07-09T16:01:52Z", "commit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzcyOTM1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-445772935", "createdAt": "2020-07-09T16:19:28Z", "commit": {"oid": "c992c80d1e00395ef8c051d79bbb548f17bdd01a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63663997d776c678e3784aa594c5898408886108", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63663997d776c678e3784aa594c5898408886108", "committedDate": "2020-07-09T17:53:18Z", "message": "Refactored the code to use utility methods from CommonTestUtils Class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODU0NTE0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1788#pullrequestreview-445854514", "createdAt": "2020-07-09T18:11:09Z", "commit": {"oid": "63663997d776c678e3784aa594c5898408886108"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4264, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}