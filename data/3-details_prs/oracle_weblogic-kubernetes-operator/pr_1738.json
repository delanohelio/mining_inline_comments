{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzYxNTc0", "number": 1738, "title": "Crossdomxaction", "bodyText": "tests cross domain transaction with domain in image with 2 domains running in the same cluster different namespaces.", "createdAt": "2020-06-16T17:24:37Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738", "merged": true, "mergeCommit": {"oid": "5f3185b681a2f8aec60b2d1a1d1a5621909bcc6d"}, "closed": true, "closedAt": "2020-06-23T17:49:53Z", "author": {"login": "bhavaniravichandran"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoXlSkAH2gAyNDM1MzYxNTc0OjFlZjhiOTFjODE2NjBjNjI1MWM3MTE2Yzg5OTA4YjE3OTkyM2ZmMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuJEoQAFqTQzNjAxMTc1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ef8b91c81660c6251c7116c89908b179923ff1a", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1ef8b91c81660c6251c7116c89908b179923ff1a", "committedDate": "2020-06-05T19:11:36Z", "message": "cross domain transaction test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3b5dbcbb96c5211b1dc083669ec7ab6da59e8f", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ee3b5dbcbb96c5211b1dc083669ec7ab6da59e8f", "committedDate": "2020-06-05T19:11:47Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into crossdomxaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea131cc2c9d63c6c242732780eb69b7bd072e26", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1ea131cc2c9d63c6c242732780eb69b7bd072e26", "committedDate": "2020-06-11T16:34:52Z", "message": "updating cross domain transaction test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f21fe47546259a708e3c7ab0030b95df821448c", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2f21fe47546259a708e3c7ab0030b95df821448c", "committedDate": "2020-06-12T21:05:04Z", "message": "sync develop changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23fbfa92163ecf974a9cd81b068255d70074ed74", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/23fbfa92163ecf974a9cd81b068255d70074ed74", "committedDate": "2020-06-12T21:07:47Z", "message": "updates to cross domain transaction test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "127c0a1529ad95b4c2d07858cbf4e2b503da75ac", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/127c0a1529ad95b4c2d07858cbf4e2b503da75ac", "committedDate": "2020-06-15T15:12:12Z", "message": "add curl command to the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c28ef7bce3eab2beac5d512b965f1eab55abe9", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/16c28ef7bce3eab2beac5d512b965f1eab55abe9", "committedDate": "2020-06-15T18:08:12Z", "message": "update crossd domaintransaction to use new app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f7e08d65e9189a47c34063591da1b31276e6ae", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/33f7e08d65e9189a47c34063591da1b31276e6ae", "committedDate": "2020-06-16T14:29:06Z", "message": "adding some debug statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381", "committedDate": "2020-06-16T15:42:02Z", "message": "sync develop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODU3NTcy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-431857572", "createdAt": "2020-06-16T20:15:33Z", "commit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNTozM1rOGkri4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNTozM1rOGkri4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTM2Mw==", "bodyText": "add domain2-managed-server2 to end of URL list", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441115363", "createdAt": "2020-06-16T20:15:33Z", "author": {"login": "ajsomogyi"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,400 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n+    // set in the config file. Cannot set this after the domain is up since a server restart is\n+    // required for this to take effect. So, copying the property file to RESULT_ROOT and updating the\n+    // property file\n+    updatePropertyFile();\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domain1Namespace, domain2Namespace);\n+\n+  }\n+\n+  private static void updatePropertyFile() {\n+    //create a temporary directory to copy and update the properties file\n+    Path target = Paths.get(PROPS_TEMP_DIR);\n+    Path source1 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN1_PROPS);\n+    Path source2 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN2_PROPS);\n+    logger.info(\"Copy the properties file to the above area so that we can add namespace property\");\n+    assertDoesNotThrow(() -> {\n+      Files.createDirectories(target);\n+      Files.copy(source1, target.resolve(source1.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+      Files.copy(source2, target.resolve(source2.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+    });\n+\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+    });\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+    });\n+\n+  }\n+\n+  private static void addNamespaceToPropertyFile(String propFileName, String domainNamespace) throws IOException {\n+    FileInputStream in = new FileInputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    Properties props = new Properties();\n+    props.load(in);\n+    in.close();\n+\n+    FileOutputStream out = new FileOutputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    props.setProperty(\"NAMESPACE\", domainNamespace);\n+    props.store(out, null);\n+    out.close();\n+  }\n+\n+  /*\n+   * This test verifies cross domain transaction is successful. domain in image using wdt is used\n+   * to create 2 domains in different namespaces. An app is deployed to both the domains and the servlet\n+   * is invoked which starts a transaction that spans both domains.\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCrossDomainTransaction() {\n+\n+    //build application archive\n+    //Path application = Paths.get(RESOURCE_DIR, \"apps\", \"txpropagate\");\n+    Path application = Paths.get(RESOURCE_DIR, \"apps\", \"txforward\");\n+    BuildApplication.buildApplication(application, null, \"build\", domain1Namespace);\n+\n+    // create admin credential secret for domain1\n+    logger.info(\"Create admin credential secret for domain1\");\n+    String domain1AdminSecretName = domainUid1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain1AdminSecretName, domain1Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain1AdminSecretName, domainUid1));\n+\n+    // create admin credential secret for domain2\n+    logger.info(\"Create admin credential secret for domain2\");\n+    String domain2AdminSecretName = domainUid2 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain2AdminSecretName, domain2Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain2AdminSecretName, domainUid2));\n+\n+    //createImageVerify expects the location of the ear file\n+    String appSource = PV_ROOT + \"/applications/\" + WDT_APP_NAME + \"/\" + WDT_APP_NAME + \".ear\";\n+\n+    logger.info(\"Creating image with model file and verify\");\n+    String domain1Image = createImageAndVerify(\n+        WDT_IMAGE_NAME1, WDT_MODEL_FILE_DOMAIN1, appSource, WDT_MODEL_DOMAIN1_PROPS, PROPS_TEMP_DIR, domainUid1);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(domain1Image);\n+\n+    logger.info(\"Creating image with model file and verify\");\n+    //String domain2Image = createImageAndVerify(\n+    //    WDT_IMAGE_NAME2, WDT_MODEL_FILE_DOMAIN2, WDT_APP_NAME, WDT_MODEL_DOMAIN2_PROPS, PROPS_TEMP_DIR, domainUid2);\n+    String domain2Image = createImageAndVerify(\n+        WDT_IMAGE_NAME2, WDT_MODEL_FILE_DOMAIN2, appSource, WDT_MODEL_DOMAIN2_PROPS, PROPS_TEMP_DIR, domainUid2);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(domain2Image);\n+\n+    //create domain1\n+    createDomain(domainUid1, domain1Namespace, domain1AdminSecretName, domain1Image);\n+    //create domain2\n+    createDomain(domainUid2, domain2Namespace, domain2AdminSecretName, domain2Image);\n+\n+    logger.info(\"Getting admin server external service node port\");\n+    int adminServiceNodePort = assertDoesNotThrow(\n+        () -> getServiceNodePort(domain1Namespace, domain1AdminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    String curlRequest = String.format(\"curl -v --show-error --noproxy '*' \"\n+            + \"http://%s:%s/TxForward/TxForward?urls=t3://%s.%s:7001,t3://%s1.%s:8001,t3://%s1.%s:8001\",\n+             K8S_NODEPORT_HOST, adminServiceNodePort, domain1AdminServerPodName, domain1Namespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 242}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODU4OTMw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-431858930", "createdAt": "2020-06-16T20:17:40Z", "commit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNzo0MFrOGkrnJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNzo0MFrOGkrnJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjQ1NA==", "bodyText": "Remove txpropagate application", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441116454", "createdAt": "2020-06-16T20:17:40Z", "author": {"login": "ajsomogyi"}, "path": "new-integration-tests/src/test/resources/apps/txpropagate/build.xml", "diffHunk": "@@ -0,0 +1,102 @@\n+<!-- Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+     Licensed under the Universal Permissive License v 1.0 as shown at\n+          https://oss.oracle.com/licenses/upl.-->\n+\n+<project name=\"txpropagate.app\" default=\"build\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODU5NTUx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-431859551", "createdAt": "2020-06-16T20:18:36Z", "commit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxODozNlrOGkro_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxODozNlrOGkro_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjkyNQ==", "bodyText": "change JNDIName to txforward.RemoteSync", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441116925", "createdAt": "2020-06-16T20:18:36Z", "author": {"login": "ajsomogyi"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package example;\r\n+\r\n+import java.rmi.Remote;\r\n+import java.rmi.RemoteException;\r\n+\r\n+public interface RemoteSync extends Remote {\r\n+  public static final String JNDINAME = \"propagate.RemoteSync\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTMyMjQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-431932247", "createdAt": "2020-06-16T22:19:54Z", "commit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f9b3c16420dba70f28f816f8786de633556dc8", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/54f9b3c16420dba70f28f816f8786de633556dc8", "committedDate": "2020-06-16T23:01:44Z", "message": "sync develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59f22ee5183d4ddc438fda853882ded8ee5618f", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b59f22ee5183d4ddc438fda853882ded8ee5618f", "committedDate": "2020-06-16T23:38:03Z", "message": "Merge branch 'crossdomxaction' of https://github.com/oracle/weblogic-kubernetes-operator into crossdomxaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe5a88a7bf831901cb4f199d796440696bb011d8", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fe5a88a7bf831901cb4f199d796440696bb011d8", "committedDate": "2020-06-16T23:45:26Z", "message": "fix following Alex's review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b2c763387fb3d801cf43bd2c054fe728d40336", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d1b2c763387fb3d801cf43bd2c054fe728d40336", "committedDate": "2020-06-17T00:26:49Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into crossdomxaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66801ccf7c33a955985a244e0d4344e93316ccc6", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/66801ccf7c33a955985a244e0d4344e93316ccc6", "committedDate": "2020-06-17T01:23:27Z", "message": "fix merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzk4NTIz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-432398523", "createdAt": "2020-06-17T13:26:45Z", "commit": {"oid": "66801ccf7c33a955985a244e0d4344e93316ccc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7503d721cf5f44bfac77781d143166fe0548c64c", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7503d721cf5f44bfac77781d143166fe0548c64c", "committedDate": "2020-06-19T21:43:51Z", "message": "add debugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e31f697baae6b2a55100a656825e5cbe6cf073", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/13e31f697baae6b2a55100a656825e5cbe6cf073", "committedDate": "2020-06-21T01:22:11Z", "message": "add repo name to the image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6bcbe8531cf5fd841610186ebbcf0730f5481bb", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f6bcbe8531cf5fd841610186ebbcf0730f5481bb", "committedDate": "2020-06-21T03:04:13Z", "message": "reverting previous commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e930ba304a55cefb3dc2304f3acf2d8686044c47", "committedDate": "2020-06-21T18:22:09Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODM4NTMw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-435838530", "createdAt": "2020-06-23T14:26:14Z", "commit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719778266308e622a54a4de72b658317be13816a", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/719778266308e622a54a4de72b658317be13816a", "committedDate": "2020-06-23T16:04:07Z", "message": "pull develop and resolve merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTMxMzM3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-435931337", "createdAt": "2020-06-23T16:02:14Z", "commit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjoxNFrOGnwKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNzozN1rOGnwyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Now that we got the namespaces for both the domains,w e need to update the model properties\n          \n          \n            \n                // Now that we got the namespaces for both the domains, we need to update the model properties", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444336652", "createdAt": "2020-06-23T16:02:14Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,402 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+//import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n          \n          \n            \n                // file with the namespaces. For cross domain transaction to work, we need to have the externalDNSName", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444336948", "createdAt": "2020-06-23T16:02:39Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,402 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+//import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MTI1MA==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444341250", "createdAt": "2020-06-23T16:08:49Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n+    // set in the config file. Cannot set this after the domain is up since a server restart is\n+    // required for this to take effect. So, copying the property file to RESULT_ROOT and updating the\n+    // property file\n+    updatePropertyFile();\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domain1Namespace, domain2Namespace);\n+\n+  }\n+\n+  private static void updatePropertyFile() {\n+    //create a temporary directory to copy and update the properties file\n+    Path target = Paths.get(PROPS_TEMP_DIR);\n+    Path source1 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN1_PROPS);\n+    Path source2 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN2_PROPS);\n+    logger.info(\"Copy the properties file to the above area so that we can add namespace property\");\n+    assertDoesNotThrow(() -> {\n+      Files.createDirectories(target);\n+      Files.copy(source1, target.resolve(source1.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+      Files.copy(source2, target.resolve(source2.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+    });\n+\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+    });\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+    });\n+\n+  }\n+\n+  private static void addNamespaceToPropertyFile(String propFileName, String domainNamespace) throws IOException {\n+    FileInputStream in = new FileInputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    Properties props = new Properties();\n+    props.load(in);\n+    in.close();\n+\n+    FileOutputStream out = new FileOutputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    props.setProperty(\"NAMESPACE\", domainNamespace);\n+    props.store(out, null);\n+    out.close();\n+  }\n+\n+  /*\n+   * This test verifies cross domain transaction is successful. domain in image using wdt is used\n+   * to create 2 domains in different namespaces. An app is deployed to both the domains and the servlet\n+   * is invoked which starts a transaction that spans both domains.\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCrossDomainTransaction() {\n+\n+    //build application archive\n+\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"txforward\"), null, null,\n+        \"build\", domain1Namespace);\n+    logger.info(\"distDir is {0}\", distDir.toString());\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"txforward.ear\").toFile().exists(),\n+        \"Application archive is not available\");\n+    String appSource = distDir.toString() + \"/txforward.ear\";\n+    logger.info(\"Application is in {0}\", appSource);\n+\n+    // create admin credential secret for domain1\n+    logger.info(\"Create admin credential secret for domain1\");\n+    String domain1AdminSecretName = domainUid1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain1AdminSecretName, domain1Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain1AdminSecretName, domainUid1));\n+\n+    // create admin credential secret for domain2\n+    logger.info(\"Create admin credential secret for domain2\");\n+    String domain2AdminSecretName = domainUid2 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain2AdminSecretName, domain2Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain2AdminSecretName, domainUid2));\n+\n+    //createImageVerify expects the location of the ear file\n+    //String appSource = PV_ROOT + \"/applications/\" + WDT_APP_NAME + \"/\" + WDT_APP_NAME + \".ear\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzQyMw==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444343423", "createdAt": "2020-06-23T16:12:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/application.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzUyOA==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444343528", "createdAt": "2020-06-23T16:12:16Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/weblogic-application.xml", "diffHunk": "@@ -0,0 +1,7 @@\n+<?xml version = '1.0' ?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzYwMA==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444343600", "createdAt": "2020-06-23T16:12:24Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/src/example/TxForward.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjM5OA==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346398", "createdAt": "2020-06-23T16:16:44Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/LifecycleListenerImpl.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjYxNQ==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346615", "createdAt": "2020-06-23T16:17:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package example;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjY3NQ==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346675", "createdAt": "2020-06-23T16:17:13Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSyncImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package example;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjkzMw==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346933", "createdAt": "2020-06-23T16:17:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/Utils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e1e57707c8a8ccbb6d16ce0ad754976236ea9d", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/99e1e57707c8a8ccbb6d16ce0ad754976236ea9d", "committedDate": "2020-06-23T16:46:09Z", "message": "fixes based on review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f616d5b4131509a10bb4a305068d7c7aa358c45c", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f616d5b4131509a10bb4a305068d7c7aa358c45c", "committedDate": "2020-06-23T17:32:27Z", "message": "fix teh app distribution dir in the test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDExNzUz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#pullrequestreview-436011753", "createdAt": "2020-06-23T17:40:48Z", "commit": {"oid": "f616d5b4131509a10bb4a305068d7c7aa358c45c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4542, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}