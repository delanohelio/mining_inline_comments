{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjUzOTYy", "number": 1907, "title": "ItInitContainers conversion to Junit5 ", "bodyText": "https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1845/", "createdAt": "2020-09-08T19:36:23Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907", "merged": true, "mergeCommit": {"oid": "5c7c22e8607c9c1efe5355e223e1c067cf111fa8"}, "closed": true, "closedAt": "2020-09-10T18:25:07Z", "author": {"login": "marinakog"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFs8NvgH2gAyNDgyMjUzOTYyOjExOTJjMGYwMGQxMGVhNmI5Y2MwOWZhYWY1OTg1NDVkY2FmN2FmMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHkHyyAFqTQ4NjE1MDIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1192c0f00d10ea6b9cc09faaf598545dcaf7af08", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1192c0f00d10ea6b9cc09faaf598545dcaf7af08", "committedDate": "2020-09-04T22:28:27Z", "message": "added testcase for initcontainers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d4f485caec51beafe9a9c367878eead23b5c860", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7d4f485caec51beafe9a9c367878eead23b5c860", "committedDate": "2020-09-04T22:29:34Z", "message": "added testcase for initcontainers1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46048e599f005d2cab76b51286deb765f166765", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d46048e599f005d2cab76b51286deb765f166765", "committedDate": "2020-09-04T22:34:20Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9cef13be2e2aa084a11bd9d0dd0b114a03b7c7f", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d9cef13be2e2aa084a11bd9d0dd0b114a03b7c7f", "committedDate": "2020-09-08T15:51:06Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into initcont"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b29f7d263337be9b65dd6e0eb876fb095a18c1ea", "committedDate": "2020-09-08T19:23:14Z", "message": "fixed init check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDQ5MDcw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#pullrequestreview-484449070", "createdAt": "2020-09-08T19:55:37Z", "commit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NTozN1rOHOr5MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowODo0OVrOHOsTLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTI2NQ==", "bodyText": "update description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485161265", "createdAt": "2020-09-08T19:55:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTM4Nw==", "bodyText": "update description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485161387", "createdAt": "2020-09-08T19:55:51Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTg3Mg==", "bodyText": "both domain3Uid  and domain4Uid variable values the same, is it right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485161872", "createdAt": "2020-09-08T19:56:41Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjEwNg==", "bodyText": "use import", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485162106", "createdAt": "2020-09-08T19:57:08Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjMzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get namespaces for operator, domain.\n          \n          \n            \n               * Get namespaces for operator, domains.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485162334", "createdAt": "2020-09-08T19:57:30Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * WebLogic server pod doesn't go through initialization and ready state\n          \n          \n            \n               * WebLogic server pod doesn't go through initialization and ready state.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485162934", "createdAt": "2020-09-08T19:58:45Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MzI0OA==", "bodyText": "do you need the test order?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485163248", "createdAt": "2020-09-08T19:59:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDAyNA==", "bodyText": "for all servers or just admin server?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485164024", "createdAt": "2020-09-08T20:00:44Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDcxMQ==", "bodyText": "Add initContainers to adminServer or to cluster?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485164711", "createdAt": "2020-09-08T20:02:09Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDk5Nw==", "bodyText": "Test fails if it cannot include the initContainers for clustered members or some other pods?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485164997", "createdAt": "2020-09-08T20:02:46Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NTQzMQ==", "bodyText": "before starting the admin server pod or managed-server1 pod?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485165431", "createdAt": "2020-09-08T20:03:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzIzMw==", "bodyText": "move this check before checkPodExists", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485167233", "createdAt": "2020-09-08T20:07:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzU0NQ==", "bodyText": "same as above comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485167545", "createdAt": "2020-09-08T20:08:00Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+      //check if pod in init state\n+      checkPodInitializing(managedServerPodName,domainUid, domainNamespace);\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzkxOA==", "bodyText": "what is the need for this check?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485167918", "createdAt": "2020-09-08T20:08:49Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+      //check if pod in init state\n+      checkPodInitializing(managedServerPodName,domainUid, domainNamespace);\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n+\n+      // check that the managed server pod is ready\n+      logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+\n+    }\n+    //check the access to managed server mbean via rest api\n+    checkManagedServerConfiguration(domainNamespace, domainUid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 408}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b92e6d5f11c3c1a28c571b8c61bed66ce80b921", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0b92e6d5f11c3c1a28c571b8c61bed66ce80b921", "committedDate": "2020-09-08T23:10:21Z", "message": "addressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f90a60bf0b8619449af25bfaa8f7c1457d1160a", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f90a60bf0b8619449af25bfaa8f7c1457d1160a", "committedDate": "2020-09-09T20:19:31Z", "message": "addressed the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "054139bec28dc6093bfdb06f3a43abba514f170c", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/054139bec28dc6093bfdb06f3a43abba514f170c", "committedDate": "2020-09-09T20:19:39Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into initcont"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Mzk4ODgy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#pullrequestreview-485398882", "createdAt": "2020-09-09T20:58:39Z", "commit": {"oid": "054139bec28dc6093bfdb06f3a43abba514f170c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTUwMjA1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#pullrequestreview-486150205", "createdAt": "2020-09-10T17:19:48Z", "commit": {"oid": "054139bec28dc6093bfdb06f3a43abba514f170c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4123, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}