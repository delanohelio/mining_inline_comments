{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNjc2MzMy", "number": 1495, "title": "two automated test case for Wdt Config Update w single Model File jenkins-ignore", "bodyText": "Local test passed:\noracle.kubernetes.operator.ItModelInImageOverride verifyJdbcOverride JDBC DS info from server pod: MyDataSource-0625-jdbc.xml:    jdbc/generic1\n...\noracle.kubernetes.operator.ItModelInImageOverride testMiiOverrideNonExistJdbc SUCCESS\n...\n[INFO] Reactor Summary:\n[INFO]\n[INFO] Build Tools 1.0 .................................... SUCCESS [  1.253 s]\n[INFO] weblogic-kubernetes-operator 3.0.0 ................. SUCCESS [  2.608 s]\n[INFO] operator-swagger 3.0.0 ............................. SUCCESS [  7.289 s]\n[INFO] json-schema 3.0.0 .................................. SUCCESS [  9.848 s]\n[INFO] jsonschema-maven-plugin Maven Mojo 3.0.0 ........... SUCCESS [  7.919 s]\n[INFO] operator-runtime 3.0.0 ............................. SUCCESS [01:01 min]\n[INFO] operator-integration-tests 3.0.0 ................... SUCCESS [13:12 min]\n[INFO] installation-tests 3.0.0 ........................... SUCCESS [  2.187 s]\n[INFO] Project Reports 3.0.0 .............................. SUCCESS [  0.077 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  14:45 min\n[INFO] Finished at: 2020-03-25T08:48:57-07:00\n[INFO] ------------------------------------------------------------------------\nkicking off Jenkins jobs now...", "createdAt": "2020-03-25T16:01:33Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495", "merged": true, "mergeCommit": {"oid": "867c5287ac0eabf6cf78319ad39b804e172b28ac"}, "closed": true, "closedAt": "2020-03-31T19:13:45Z", "author": {"login": "hzhao-github"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRJklZAH2gAyMzkzNjc2MzMyOmM4MDYyYjJkNTNlN2RkNjFlNWFiMDI3YjlkNDA2N2MwYmM3YzcyYjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTH9QMgH2gAyMzkzNjc2MzMyOmI2NDRiMTZhN2JjYTU3Y2FkMzNhYjIxMTQzNjljNmMzOWM4YmUwZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8062b2d53e7dd61e5ab027b9d4067c0bc7c72b9", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c8062b2d53e7dd61e5ab027b9d4067c0bc7c72b9", "committedDate": "2020-03-25T15:51:54Z", "message": "The first test case for OWLS-80444 Automate Wdt Config Override with single Model File jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzAzNTQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-381303547", "createdAt": "2020-03-25T16:09:27Z", "commit": {"oid": "c8062b2d53e7dd61e5ab027b9d4067c0bc7c72b9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/41d9df03dd170d1a804b71db9671e614e47c5c55", "committedDate": "2020-03-25T19:14:52Z", "message": "Modified TestUtils.java jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTEyMTM2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-381512136", "createdAt": "2020-03-25T20:30:52Z", "commit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjA1NDk5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-381605499", "createdAt": "2020-03-25T23:19:20Z", "commit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoxOToyMFrOF7x8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzozMTozM1rOF7yMxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODY0Ng==", "bodyText": "explain why an exception might be thrown, we already know it is an exception", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398228646", "createdAt": "2020-03-25T23:19:20Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODc1Nw==", "bodyText": "no need to say \"simple JUnit test file\" -- just say what it does", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398228757", "createdAt": "2020-03-25T23:19:43Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODk5OQ==", "bodyText": "no need to sat the method is called before every test, we know that already :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398228999", "createdAt": "2020-03-25T23:20:27Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg==", "bodyText": "do we really  need to create operator before each test? seems a little heavy weight", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229222", "createdAt": "2020-03-25T23:21:12Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTMzNw==", "bodyText": "why?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229337", "createdAt": "2020-03-25T23:21:32Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTQ2NA==", "bodyText": "recreate? or update?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229464", "createdAt": "2020-03-25T23:21:52Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTc1Nw==", "bodyText": "this is a really nice test, i like this, i can read it understand the intent easily.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229757", "createdAt": "2020-03-25T23:22:46Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjUwMw==", "bodyText": "this is a really nice method, logs what it is doing, puts the command in a string, which it prints and execs, so no chance of someone coming along later and updating one but not the other, the assertion is specific and has a reasonable message.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398232503", "createdAt": "2020-03-25T23:30:44Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result\n+      verifyJdbcOverride();\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    // config map before deploying domain crd\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), testClassName);\n+    final String cmName = domainMap.get(\"domainUID\") + configMapSuffix;\n+    domainMap.put(\"namespace\", domainNS);\n+    // params passed to mii\n+    domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+    domainMap.put(\"wdtModelPropertiesFile\", \"./model.empty.properties\");\n+    // params to create cm\n+    String cmModelFile = \"./model.properties\";\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmModelFile);\n+\n+    // create domain and verify\n+    domain = TestUtils.createDomain(domainMap);\n+    domain.verifyDomainCreated();\n+  }\n+\n+  private void wdtConfigOverride() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating configMap\");\n+    String origDir = BaseTest.getProjectRoot()\n+        + \"/integration-tests/src/test/resources/model-in-image\";\n+    String origModelFile = origDir + \"/model.jdbc.yaml\";\n+    String origPropFile = origDir + \"/model.jdbc.properties\";\n+    String destDir = getResultDir() + \"/samples/model-in-image-override\";;\n+    String destModelFile = destDir + \"/model.jdbc_2.yaml\";\n+    String destPropFile = destDir + \"/model.jdbc_2.properties\";\n+    Files.createDirectories(Paths.get(destDir));\n+\n+    TestUtils.copyFile(origModelFile, destModelFile);\n+    TestUtils.copyFile(origPropFile, destPropFile);\n+\n+    // Re-create config map after deploying domain crd\n+    final String domainUid = domain.getDomainUid();\n+    final String cmName = domainUid + configMapSuffix;\n+    final String label = \"weblogic.domainUID=\" + domainUid;\n+\n+    TestUtils.createConfigMap(cmName, destDir, domainNS, label);\n+  }\n+\n+  private void modifyDomainYamlWithRestartVersion()\n+      throws Exception {\n+    String originalYaml =\n+        getUserProjectsDir()\n+            + \"/weblogic-domains/\"\n+            + domain.getDomainUid()\n+            + \"/domain.yaml\";\n+\n+    // Modify the original domain yaml to include restartVersion in admin server node\n+    DomainCrd crd = new DomainCrd(originalYaml);\n+    Map<String, String> objectNode = new HashMap();\n+    objectNode.put(\"restartVersion\", \"v1.1\");\n+    crd.addObjectNodeToDomain(objectNode);\n+    String modYaml = crd.getYamlTree();\n+    LoggerHelper.getLocal().log(Level.INFO, modYaml);\n+\n+    // Write the modified yaml to a new file\n+    Path path = Paths.get(getUserProjectsDir()\n+        + \"/weblogic-domains/\"\n+        + domain.getDomainUid(), \"modified.domain.yaml\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"Path of the modified domain.yaml :{0}\", path.toString());\n+    Charset charset = StandardCharsets.UTF_8;\n+    Files.write(path, modYaml.getBytes(charset));\n+\n+    // Apply the new yaml to update the domain crd\n+    LoggerHelper.getLocal().log(Level.INFO, \"kubectl apply -f {0}\", path.toString());\n+    ExecResult exec = TestUtils.exec(\"kubectl apply -f \" + path.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Verifying if the domain is restarted\");\n+    domain.verifyDomainRestarted();\n+  }\n+\n+  private void verifyJdbcOverride() throws Exception {\n+    // get domain name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjU3NQ==", "bodyText": "should this be an assumption or an assertion?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398232575", "createdAt": "2020-03-25T23:30:56Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result\n+      verifyJdbcOverride();\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    // config map before deploying domain crd\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), testClassName);\n+    final String cmName = domainMap.get(\"domainUID\") + configMapSuffix;\n+    domainMap.put(\"namespace\", domainNS);\n+    // params passed to mii\n+    domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+    domainMap.put(\"wdtModelPropertiesFile\", \"./model.empty.properties\");\n+    // params to create cm\n+    String cmModelFile = \"./model.properties\";\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmModelFile);\n+\n+    // create domain and verify\n+    domain = TestUtils.createDomain(domainMap);\n+    domain.verifyDomainCreated();\n+  }\n+\n+  private void wdtConfigOverride() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating configMap\");\n+    String origDir = BaseTest.getProjectRoot()\n+        + \"/integration-tests/src/test/resources/model-in-image\";\n+    String origModelFile = origDir + \"/model.jdbc.yaml\";\n+    String origPropFile = origDir + \"/model.jdbc.properties\";\n+    String destDir = getResultDir() + \"/samples/model-in-image-override\";;\n+    String destModelFile = destDir + \"/model.jdbc_2.yaml\";\n+    String destPropFile = destDir + \"/model.jdbc_2.properties\";\n+    Files.createDirectories(Paths.get(destDir));\n+\n+    TestUtils.copyFile(origModelFile, destModelFile);\n+    TestUtils.copyFile(origPropFile, destPropFile);\n+\n+    // Re-create config map after deploying domain crd\n+    final String domainUid = domain.getDomainUid();\n+    final String cmName = domainUid + configMapSuffix;\n+    final String label = \"weblogic.domainUID=\" + domainUid;\n+\n+    TestUtils.createConfigMap(cmName, destDir, domainNS, label);\n+  }\n+\n+  private void modifyDomainYamlWithRestartVersion()\n+      throws Exception {\n+    String originalYaml =\n+        getUserProjectsDir()\n+            + \"/weblogic-domains/\"\n+            + domain.getDomainUid()\n+            + \"/domain.yaml\";\n+\n+    // Modify the original domain yaml to include restartVersion in admin server node\n+    DomainCrd crd = new DomainCrd(originalYaml);\n+    Map<String, String> objectNode = new HashMap();\n+    objectNode.put(\"restartVersion\", \"v1.1\");\n+    crd.addObjectNodeToDomain(objectNode);\n+    String modYaml = crd.getYamlTree();\n+    LoggerHelper.getLocal().log(Level.INFO, modYaml);\n+\n+    // Write the modified yaml to a new file\n+    Path path = Paths.get(getUserProjectsDir()\n+        + \"/weblogic-domains/\"\n+        + domain.getDomainUid(), \"modified.domain.yaml\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"Path of the modified domain.yaml :{0}\", path.toString());\n+    Charset charset = StandardCharsets.UTF_8;\n+    Files.write(path, modYaml.getBytes(charset));\n+\n+    // Apply the new yaml to update the domain crd\n+    LoggerHelper.getLocal().log(Level.INFO, \"kubectl apply -f {0}\", path.toString());\n+    ExecResult exec = TestUtils.exec(\"kubectl apply -f \" + path.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Verifying if the domain is restarted\");\n+    domain.verifyDomainRestarted();\n+  }\n+\n+  private void verifyJdbcOverride() throws Exception {\n+    // get domain name\n+    StringBuffer cmdKubectlSh = new StringBuffer(\"kubectl get domain -n \");\n+    cmdKubectlSh\n+        .append(domainNS)\n+        .append(\" -o=jsonpath='{.items[0].metadata.name}'\");\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to exec: \" + cmdKubectlSh);\n+    ExecResult result = TestUtils.exec(cmdKubectlSh.toString());\n+    String domainName = result.stdout();\n+    LoggerHelper.getLocal().log(Level.INFO, \"Domain name is: \" + domainName);\n+\n+    // check JDBC DS override\n+    cmdKubectlSh = new StringBuffer(\"kubectl -n \");\n+    cmdKubectlSh\n+        .append(domainNS)\n+        .append(\" exec -it \")\n+        .append(domain.getDomainUid())\n+        .append(\"-\")\n+        .append(domain.getAdminServerName())\n+        .append(\" -- bash -c 'cd /u01/oracle/user_projects/domains/\")\n+        .append(domainName)\n+        .append(\"/config/jdbc/\")\n+        .append(\" && grep -R jdbc/generic1\")\n+        .append(\"'\");\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to exec: \" + cmdKubectlSh);\n+    result = TestUtils.exec(cmdKubectlSh.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, \"JDBC DS info from server pod: \" + result.stdout());\n+\n+    Assumptions.assumeTrue(result.stdout().contains(\"<jndi-name>jdbc/generic1</jndi-name>\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjY0Mw==", "bodyText": "copyright statement wrong", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398232643", "createdAt": "2020-03-25T23:31:12Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/resources/model-in-image/model.jdbc.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+# Copyright 2019, Oracle Corporation and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjc3Mg==", "bodyText": "no oracle internal system names to be checked into public repositories", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398232772", "createdAt": "2020-03-25T23:31:33Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/resources/model-in-image/model.jdbc.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+# Copyright 2019, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n+#\n+\n+MANSVR_PORT=8001\n+dbcs1.url=slcai724.us.oracle.com:1583:w03ys12c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b55d8189ef02962e3c741174d137480386cd22b4", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b55d8189ef02962e3c741174d137480386cd22b4", "committedDate": "2020-03-26T03:27:47Z", "message": "Added python file to verify JDBC DS prop in server pod jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "committedDate": "2020-03-26T05:58:44Z", "message": "Changes b ased on the comments jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDc0MzU4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-382074358", "createdAt": "2020-03-26T14:38:46Z", "commit": {"oid": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDozODo0NlrOF8KFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1MTo0NlrOF8KtfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNDE5MQ==", "bodyText": "This method is there in MiiBaseTest.java, why do u need this here again?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398624191", "createdAt": "2020-03-26T14:38:46Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,348 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String jndiName = \"jdbc/generic1\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to change domain restartVersion\n+   * to reload the model, generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result by checking override config file on server pod\n+      verifyJdbcOverride();\n+\n+      // verify the test result by getting JDBC DS props via WLST on server pod\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      // verify JDBC DS name and value of read timeout\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_1);\n+\n+      verifyJdbcResources(jdbcResourcesToVerify);\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    // config map before deploying domain crd\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), testClassName);\n+    final String cmName = domainMap.get(\"domainUID\") + configMapSuffix;\n+    domainMap.put(\"namespace\", domainNS);\n+    // params passed to mii\n+    domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+    domainMap.put(\"wdtModelPropertiesFile\", \"./model.empty.properties\");\n+    // params to create cm\n+    String cmModelFile = \"./model.properties\";\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmModelFile);\n+\n+    // create domain and verify\n+    domain = TestUtils.createDomain(domainMap);\n+    domain.verifyDomainCreated();\n+  }\n+\n+  private void wdtConfigOverride() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating configMap\");\n+    String origDir = BaseTest.getProjectRoot()\n+        + \"/integration-tests/src/test/resources/model-in-image\";\n+    String origModelFile = origDir + \"/model.jdbc.yaml\";\n+    String origPropFile = origDir + \"/model.jdbc.properties\";\n+    String destDir = getResultDir() + \"/samples/model-in-image-override\";;\n+    String destModelFile = destDir + \"/model.jdbc_2.yaml\";\n+    String destPropFile = destDir + \"/model.jdbc_2.properties\";\n+    Files.createDirectories(Paths.get(destDir));\n+\n+    TestUtils.copyFile(origModelFile, destModelFile);\n+    TestUtils.copyFile(origPropFile, destPropFile);\n+\n+    // Re-create config map after deploying domain crd\n+    final String domainUid = domain.getDomainUid();\n+    final String cmName = domainUid + configMapSuffix;\n+    final String label = \"weblogic.domainUID=\" + domainUid;\n+\n+    TestUtils.createConfigMap(cmName, destDir, domainNS, label);\n+  }\n+\n+  private void modifyDomainYamlWithRestartVersion()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNTM1NA==", "bodyText": "Check MiiBaseTest.createMIIDomainWithConfigMap()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398625354", "createdAt": "2020-03-26T14:40:14Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,348 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String jndiName = \"jdbc/generic1\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to change domain restartVersion\n+   * to reload the model, generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result by checking override config file on server pod\n+      verifyJdbcOverride();\n+\n+      // verify the test result by getting JDBC DS props via WLST on server pod\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      // verify JDBC DS name and value of read timeout\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_1);\n+\n+      verifyJdbcResources(jdbcResourcesToVerify);\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNDM2NA==", "bodyText": "Check MiiBaseTest.modifyDomainYamlWithNewConfigMapAndDomainRestartVersion(), if you want you can refactor it or add another method in MiiBaseTest as you need these methods in other MII tests also.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398634364", "createdAt": "2020-03-26T14:51:46Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,348 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String jndiName = \"jdbc/generic1\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to change domain restartVersion\n+   * to reload the model, generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7658283a0fab03a9fda7dedb4e782e40469ce621", "committedDate": "2020-03-27T07:51:34Z", "message": "Added the 2nd test case jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjI1OTg3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-383225987", "createdAt": "2020-03-27T22:05:15Z", "commit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowNToxNVrOF9DLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowNToxNVrOF9DLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTQ5NQ==", "bodyText": "In the method modifyDomainYamlWithRestartVersion can't we use  kubectl patch command to update the Restart Version instead of modifying the domain.yaml file. We can get the current version and add +1 to it.  No need to get VersionNumber parameter. It will be easier to port to Junit5 where we will be using kubectl API.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399559495", "createdAt": "2020-03-27T22:05:15Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -116,4 +116,57 @@ public void modifyDomainYamlWithNewConfigMapAndDomainRestartVersion(\n     LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n \n   }\n+\n+  /**\n+   * Modify the domain yaml to change domain-level restart version.\n+   * @param domain the domain\n+   * @param versionNo version number of domain\n+   *\n+   * @throws Exception on failure\n+   */\n+  protected void modifyDomainYamlWithRestartVersion(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjU1MDIx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-383255021", "createdAt": "2020-03-27T23:46:35Z", "commit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo0NjozNlrOF9Ew9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzo1MDowOVrOF9Ez9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTUyNg==", "bodyText": "delete line 30 - we know junit tests are used for testing", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399585526", "createdAt": "2020-03-27T23:46:36Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTgwNw==", "bodyText": "you don't  need type & name on @throws\njust say @throws exception if initializing........", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399585807", "createdAt": "2020-03-27T23:47:54Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjEyMg==", "bodyText": "right, but you have this in a @beforeeach not a @BeforeAll\nso this will do if for every test method, which is not what vanaja said -one per class", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399586122", "createdAt": "2020-03-27T23:49:17Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg=="}, "originalCommit": {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjE1NA==", "bodyText": "fix this", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399586154", "createdAt": "2020-03-27T23:49:26Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjI5Mg==", "bodyText": "stopping here - resubmit when you fix the basic stuff..", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399586292", "createdAt": "2020-03-27T23:50:09Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjE1NA=="}, "originalCommit": {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "committedDate": "2020-03-30T00:36:21Z", "message": "Used patch domain to restart domain jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjIwOTkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-384220991", "createdAt": "2020-03-30T20:51:58Z", "commit": {"oid": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjI5MjAw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-384229200", "createdAt": "2020-03-30T21:04:35Z", "commit": {"oid": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633c9c87695ca756519945585d1f48a67b1bd062", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/633c9c87695ca756519945585d1f48a67b1bd062", "committedDate": "2020-03-30T23:17:48Z", "message": "Changed test case names jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzAwMjIw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-384300220", "createdAt": "2020-03-30T23:21:44Z", "commit": {"oid": "633c9c87695ca756519945585d1f48a67b1bd062"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzQ4MjQ5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-384348249", "createdAt": "2020-03-31T01:44:28Z", "commit": {"oid": "633c9c87695ca756519945585d1f48a67b1bd062"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0Nzk1OTk2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#pullrequestreview-384795996", "createdAt": "2020-03-31T14:34:11Z", "commit": {"oid": "633c9c87695ca756519945585d1f48a67b1bd062"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b644b16a7bca57cad33ab2114369c6c39c8be0e9", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b644b16a7bca57cad33ab2114369c6c39c8be0e9", "committedDate": "2020-03-31T19:06:53Z", "message": "Synced up with latestb model-in-image jenkins-ignore"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}