{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTM3NzU5", "number": 1996, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowMToxMlrOEve54Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxNTo0MFrOEv3vMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjI0ODY1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowMToxMlrOHkfiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NTozNlrOHlKO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNzQwMA==", "bodyText": "fix description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508027400", "createdAt": "2020-10-19T20:01:12Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzAzNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508727036", "createdAt": "2020-10-20T17:55:36Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNzQwMA=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjI1MTcwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowMTo1OFrOHkfjwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NTo0MVrOHlKPVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNzg0MQ==", "bodyText": "fix log message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508027841", "createdAt": "2020-10-19T20:01:58Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzEyNA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508727124", "createdAt": "2020-10-20T17:55:41Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNzg0MQ=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjMxNzEyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoyMDo0OFrOHkgLig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1Njo1NlrOHlKSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzODAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertTrue(result, \"Failed to create domain\");\n          \n          \n            \n                assertTrue(result, \"Failed to create domain custom resource\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508038026", "createdAt": "2020-10-19T20:20:48Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")\n+  public void testSampleDomainInPv(String model) {\n+\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    //create PV and PVC used by the domain\n+    createPvPvc(domainName);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainName + \"-weblogic-credentials\", domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"domain1\", domainName);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(sampleBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzg5MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508727890", "createdAt": "2020-10-20T17:56:56Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")\n+  public void testSampleDomainInPv(String model) {\n+\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    //create PV and PVC used by the domain\n+    createPvPvc(domainName);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainName + \"-weblogic-credentials\", domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"domain1\", domainName);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(sampleBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzODAyNg=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjMyNDIyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoyMjozN1rOHkgPoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NzowMlrOHlKSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzOTA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertTrue(result, \"Failed to delete domain\");\n          \n          \n            \n                assertTrue(result, \"Failed to delete domain custom resource\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508039073", "createdAt": "2020-10-19T20:22:37Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")\n+  public void testSampleDomainInPv(String model) {\n+\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    //create PV and PVC used by the domain\n+    createPvPvc(domainName);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainName + \"-weblogic-credentials\", domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"domain1\", domainName);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(sampleBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain\");\n+\n+    // wait for the domain to exist\n+    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"managed-server\";\n+    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+    int replicaCount = 2;\n+\n+    // verify the admin server service and pod is created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainName, domainNamespace);\n+\n+    // verify managed server services created and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+    //delete the domain resource\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl delete -f \"\n+        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to delete domain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzk1OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508727958", "createdAt": "2020-10-20T17:57:02Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")\n+  public void testSampleDomainInPv(String model) {\n+\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    //create PV and PVC used by the domain\n+    createPvPvc(domainName);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainName + \"-weblogic-credentials\", domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"domain1\", domainName);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(sampleBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain\");\n+\n+    // wait for the domain to exist\n+    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"managed-server\";\n+    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+    int replicaCount = 2;\n+\n+    // verify the admin server service and pod is created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainName, domainNamespace);\n+\n+    // verify managed server services created and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+    //delete the domain resource\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl delete -f \"\n+        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to delete domain\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzOTA3Mw=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjI5OTY4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxMzowMlrOHlGJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NTo1NVrOHlKP8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MDEyNw==", "bodyText": "What are the possible values for paramProvider ? Put on the description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508660127", "createdAt": "2020-10-20T16:13:02Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzI4MA==", "bodyText": "added the explanation", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508727280", "createdAt": "2020-10-20T17:55:55Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MDEyNw=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjMxNzI5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoxNTo0MFrOHlGU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyMjozNVrOHlTSJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzAxMg==", "bodyText": "Can you modify the name of the Class to ItDomainOnPvSample.java", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508663012", "createdAt": "2020-10-20T16:15:40Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2NTU5Ng==", "bodyText": "We can have all the samples in this It class, no need for individual It class for each sample.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508665596", "createdAt": "2020-10-20T16:19:10Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzAxMg=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNzc4OA==", "bodyText": "Right, I thought of naming it as ItDomainOnPvSample but like as Vanaja said we can have all samples in the same class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508727788", "createdAt": "2020-10-20T17:56:47Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzAxMg=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3NTMwMA==", "bodyText": "OK, Huiling can add  DomainHomeInImage sample to this class once this PR is merged.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1996#discussion_r508875300", "createdAt": "2020-10-20T22:22:35Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -0,0 +1,305 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to introspectVersion attribute.\n+ */\n+@DisplayName(\"Verify the domain on pv samples using wlst and wdt\")\n+@IntegrationTest\n+public class ItSamples {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+\n+  private static final String[] params = {\"wlst:domain1\", \"wdt:domain2\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for Introspect Version WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test domain in pv samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in pv\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2MzAxMg=="}, "originalCommit": {"oid": "872a0e09bb2f5db1f6168b1a73709d2fd43f647d"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4076, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}