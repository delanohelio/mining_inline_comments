{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjUzOTYy", "number": 1907, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NTozN1rOEhZNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowODo0OVrOEhZecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUxNTM2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NTozN1rOHOr5MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMzowOFrOHOxAvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTI2NQ==", "bodyText": "update description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485161265", "createdAt": "2020-09-08T19:55:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NTExOQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485245119", "createdAt": "2020-09-08T23:13:08Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTI2NQ=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUxNjE4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NTo1MVrOHOr5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMzowNFrOHOxApw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTM4Nw==", "bodyText": "update description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485161387", "createdAt": "2020-09-08T19:55:51Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NTA5NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485245095", "createdAt": "2020-09-08T23:13:04Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTM4Nw=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUxOTMwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1Njo0MVrOHOr7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjo1M1rOHOxAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTg3Mg==", "bodyText": "both domain3Uid  and domain4Uid variable values the same, is it right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485161872", "createdAt": "2020-09-08T19:56:41Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NTAyNw==", "bodyText": "corrected", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485245027", "createdAt": "2020-09-08T23:12:53Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTg3Mg=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUyMDc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NzowOFrOHOr8eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjo0OFrOHOxASw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjEwNg==", "bodyText": "use import", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485162106", "createdAt": "2020-09-08T19:57:08Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NTAwMw==", "bodyText": "corrected", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485245003", "createdAt": "2020-09-08T23:12:48Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjEwNg=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUyMjIyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NzozMFrOHOr9Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjozOVrOHOxAHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get namespaces for operator, domain.\n          \n          \n            \n               * Get namespaces for operator, domains.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485162334", "createdAt": "2020-09-08T19:57:30Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDk1OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485244959", "createdAt": "2020-09-08T23:12:39Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjMzNA=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUyNjAxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1ODo0NVrOHOr_tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNzoxM1rOHPZGbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * WebLogic server pod doesn't go through initialization and ready state\n          \n          \n            \n               * WebLogic server pod doesn't go through initialization and ready state.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485162934", "createdAt": "2020-09-08T19:58:45Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTkzNA==", "bodyText": "corrected", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485901934", "createdAt": "2020-09-09T20:27:13Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MjkzNA=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUyODA5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1OToyMVrOHOsA8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNzowNVrOHPZGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MzI0OA==", "bodyText": "do you need the test order?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485163248", "createdAt": "2020-09-08T19:59:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTg1Ng==", "bodyText": "removed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485901856", "createdAt": "2020-09-09T20:27:05Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MzI0OA=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUzMzQ2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowMDo0NFrOHOsD-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjo1OVrOHPZF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDAyNA==", "bodyText": "for all servers or just admin server?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485164024", "createdAt": "2020-09-08T20:00:44Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTgwNQ==", "bodyText": "corrected to all", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485901805", "createdAt": "2020-09-09T20:26:59Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDAyNA=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUzNzg5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowMjowOVrOHOsGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjo0OFrOHPZFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDcxMQ==", "bodyText": "Add initContainers to adminServer or to cluster?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485164711", "createdAt": "2020-09-08T20:02:09Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTcxMw==", "bodyText": "corrected", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485901713", "createdAt": "2020-09-09T20:26:48Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDcxMQ=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDUzOTkwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowMjo0NlrOHOsHxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjozMlrOHOw_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDk5Nw==", "bodyText": "Test fails if it cannot include the initContainers for clustered members or some other pods?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485164997", "createdAt": "2020-09-08T20:02:46Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDkyMg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485244922", "createdAt": "2020-09-08T23:12:32Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NDk5Nw=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU0MjczOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowMzozN1rOHOsJdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjoyN1rOHOw_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NTQzMQ==", "bodyText": "before starting the admin server pod or managed-server1 pod?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485165431", "createdAt": "2020-09-08T20:03:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDg5NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485244895", "createdAt": "2020-09-08T23:12:27Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NTQzMQ=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU1NDEyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNzoyMVrOHOsQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjozN1rOHPZFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzIzMw==", "bodyText": "move this check before checkPodExists", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485167233", "createdAt": "2020-09-08T20:07:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDg3Mg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485244872", "createdAt": "2020-09-08T23:12:23Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzIzMw=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNjExOQ==", "bodyText": "Use the test utility CommonTestUtils.checkPodReadyAndServiceExists to combine the both operation.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485806119", "createdAt": "2020-09-09T17:49:31Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzIzMw=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTYxMg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485901612", "createdAt": "2020-09-09T20:26:37Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzIzMw=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 377}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU1NjEwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowODowMFrOHOsRuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjoxOFrOHOw_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzU0NQ==", "bodyText": "same as above comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485167545", "createdAt": "2020-09-08T20:08:00Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+      //check if pod in init state\n+      checkPodInitializing(managedServerPodName,domainUid, domainNamespace);\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDg0NA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485244844", "createdAt": "2020-09-08T23:12:18Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+      //check if pod in init state\n+      checkPodInitializing(managedServerPodName,domainUid, domainNamespace);\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzU0NQ=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDU1ODU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowODo0OVrOHOsTLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoxMjoxMlrOHOw_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzkxOA==", "bodyText": "what is the need for this check?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485167918", "createdAt": "2020-09-08T20:08:49Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+      //check if pod in init state\n+      checkPodInitializing(managedServerPodName,domainUid, domainNamespace);\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n+\n+      // check that the managed server pod is ready\n+      logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+\n+    }\n+    //check the access to managed server mbean via rest api\n+    checkManagedServerConfiguration(domainNamespace, domainUid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDgyMg==", "bodyText": "just to check that domain is functioning properly, admin server can access managed servermbean, I will remove it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1907#discussion_r485244822", "createdAt": "2020-09-08T23:12:12Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItInitContainers.java", "diffHunk": "@@ -0,0 +1,443 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodLog;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodInitializing;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator usability.\n+ * Use Helm chart to install operator(s)\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator usability using Helm chart installation\")\n+@IntegrationTest\n+class ItInitContainers {\n+\n+  private static String opNamespace = null;\n+  private static HelmParams opHelmParams = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"initcontainersdomain1\";\n+  private final String domain2Uid = \"initcontainerusabdomain2\";\n+  private final String domain3Uid = \"initcontainerusabdomain3\";\n+  private final String domain4Uid = \"initcontainerusabdomain3\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+  private static String adminSecretName = \"weblogic-credentials\";\n+  private static String encryptionSecretName = \"encryptionsecret\";\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static LoggingFacade logger = null;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(5) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain1\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    opHelmParams = installAndVerifyOperator(opNamespace,\n+        domain1Namespace, domain2Namespace,\n+        domain3Namespace, domain4Namespace);\n+\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    //create secrets for domain\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    //delete operator\n+    uninstallOperator(opHelmParams);\n+  }\n+\n+  /**\n+   * Add initContainers at domain spec level and verify the admin server pod executes initContainer command.\n+   * Test fails if domain crd can't add the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers at domain spec level and verify the admin server pod executes initContainer command \"\n+      + \" and starts the admin server pod\")\n+  public void testDomainInitContainer() {\n+    logger.info(\"Installing and verifying domain\");\n+    assertTrue(createVerifyDomain(domain1Namespace, domain1Uid, \"spec\"),\n+        \"can't start or verify domain in namespace \" + domain1Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-admin-server\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for admin server\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server1\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain1Uid + \"-managed-server2\", domain1Namespace,\"busybox\")\n+            .contains(\"Hi from Domain\"),\n+        \"failed to init busybox container command for managed server2\"));\n+\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the admin server pod executes initContainer command\n+   * and starts the admin server pod.\n+   * Test fails if domain crd can't add the initContainers or\n+   * weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to adminServer and verify the admin server pod executes initContainer command \")\n+  public void testAdminServerInitContainer() {\n+    assertTrue(createVerifyDomain(domain2Namespace, domain2Uid, \"adminServer\"),\n+        \"can't start or verify domain in namespace \" + domain2Namespace);\n+\n+    //check if init container got executed for admin server pod\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain2Uid + \"-admin-server\", domain2Namespace,\"busybox\")\n+            .contains(\"Hi from AdminServer\"),\n+        \"failed to init busybox container command for admin server\"));\n+  }\n+\n+  /**\n+   * Add initContainers to adminServer and verify the managed server pods in cluster execute initContainer command\n+   * before starting the admin server pod.\n+   * Test fails if it cannot include the initContainers or\n+   *                   weblogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to cluster1 and verify all managed server pods go through Init state \")\n+  public void testClusterInitContainer() {\n+    assertTrue(createVerifyDomain(domain3Namespace, domain3Uid, \"clusters\"),\n+        \"can't start or verify domain in namespace \" + domain3Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server1\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server1\"));\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain3Uid + \"-managed-server2\",\n+        domain3Namespace,\"busybox\").contains(\"Hi from Cluster\"),\n+        \"failed to init busybox container command for cluster's managed-server2\"));\n+  }\n+\n+  /**\n+   * Add initContainers to managed-server1 and verify managed server pod executes initContainer command\n+   * before starting the admin server pod.\n+   * cannot be read or modified to include the initContainers or\n+   * WebLogic server pod doesn't go through initialization and ready state\n+   */\n+  @Test\n+  @DisplayName(\"Add initContainers to managed-server1 and verify the pod goes through Init state \")\n+  public void testMsInitContainer() {\n+    assertTrue(createVerifyDomain(domain4Namespace, domain4Uid, \"managedServers\"),\n+        \"can't start or verify domain in namespace \" + domain4Namespace);\n+\n+    //check if init container got executed\n+    assertTrue(assertDoesNotThrow(() -> getPodLog(domain4Uid + \"-managed-server1\", domain4Namespace,\"busybox\")\n+            .contains(\"Hi from managed-server1\"),\n+        \"failed to init busybox container command for managed server1\"));\n+  }\n+\n+  private boolean createVerifyDomain(String domainNamespace, String domainUid, String parentNodeName) {\n+\n+    createSecrets(domainNamespace);\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+\n+    createAndVerifyMiiDomain(domainNamespace, domainUid, parentNodeName);\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain, add initContainers section to domain crd and verify the domain pods are ready.\n+   */\n+  private void createAndVerifyMiiDomain(String domainNamespace, String domainUid, String testCaseName) {\n+\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+\n+    switch (testCaseName) {\n+      case \"spec\":\n+        domain.getSpec().getServerPod().addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Domain\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\"));\n+        break;\n+      case \"adminServer\":\n+        domain.getSpec().getAdminServer().serverPod(new ServerPod()\n+            .addInitContainersItem(new V1Container()\n+            .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from AdminServer\\\"\")\n+            .name(\"busybox\")\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .image(\"busybox\")));\n+        break;\n+      case \"clusters\":\n+        clusters = domain.getSpec().getClusters();\n+        assertNotNull(clusters, \"Can't find clusters in CRD \");\n+        Cluster mycluster = clusters.stream()\n+            .filter(cluster -> clusterName.equals(cluster.getClusterName())).findAny()\n+            .orElse(null);\n+        assertNotNull(mycluster, \"Can't find cluster \" + clusterName);\n+        mycluster.serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from Cluster \\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\")));\n+        break;\n+      case \"managedServers\":\n+        domain.getSpec().addManagedServersItem(new ManagedServer()\n+            .serverName(\"managed-server1\")\n+            .serverPod(new ServerPod()\n+                .addInitContainersItem(new V1Container()\n+                    .addCommandItem(\"echo\").addArgsItem(\"\\\"Hi from managed-server1\\\"\")\n+                    .name(\"busybox\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .image(\"busybox\"))));\n+        break;\n+      default:\n+        logger.info(\"no match for provided case {0}\", testCaseName);\n+    }\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    //check if pod in init state\n+    checkPodInitializing(adminServerPodName,domainUid, domainNamespace);\n+\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+      //check if pod in init state\n+      checkPodInitializing(managedServerPodName,domainUid, domainNamespace);\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n+\n+      // check that the managed server pod is ready\n+      logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+\n+    }\n+    //check the access to managed server mbean via rest api\n+    checkManagedServerConfiguration(domainNamespace, domainUid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NzkxOA=="}, "originalCommit": {"oid": "b29f7d263337be9b65dd6e0eb876fb095a18c1ea"}, "originalPosition": 408}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3945, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}