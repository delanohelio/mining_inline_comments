{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMzk5MzQx", "number": 1884, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzowMjozNlrOEcqqBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToyMzoyMVrOEdRa_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDk0NDY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzowMjozNlrOHHVaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo1MjoxNFrOHHZPAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjkyMw==", "bodyText": "kill --> stop/shutdown the admin and manged sever in the domain by changing the StartupPolicy to NEVER", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477452923", "createdAt": "2020-08-26T17:02:36Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -104,6 +112,96 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n         replicaCount);\n   }\n \n+  /**\n+   * Stop Operator and kill admin and managed server pods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840dde970267bb90fd60ed2540d6adebd05db54d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMDc4NA==", "bodyText": "changing StartupPolicy doesn't work as Operator is stopped first. Its actually deleting the server pods, can change the wording to delete the admin and managed server pods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477500784", "createdAt": "2020-08-26T18:25:23Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -104,6 +112,96 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n         replicaCount);\n   }\n \n+  /**\n+   * Stop Operator and kill admin and managed server pods.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjkyMw=="}, "originalCommit": {"oid": "840dde970267bb90fd60ed2540d6adebd05db54d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNTUyMA==", "bodyText": "modified", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477515520", "createdAt": "2020-08-26T18:52:14Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -104,6 +112,96 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n         replicaCount);\n   }\n \n+  /**\n+   * Stop Operator and kill admin and managed server pods.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjkyMw=="}, "originalCommit": {"oid": "840dde970267bb90fd60ed2540d6adebd05db54d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI0NjEzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoyNjoxMVrOHHYXMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTo1NjowOFrOHHbhxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTIzNQ==", "bodyText": "Delete the Order annotation from all methods if we do not need Order in the class", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477501235", "createdAt": "2020-08-26T18:26:11Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +214,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840dde970267bb90fd60ed2540d6adebd05db54d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MzA5NA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477553094", "createdAt": "2020-08-26T19:56:08Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +214,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTIzNQ=="}, "originalCommit": {"oid": "840dde970267bb90fd60ed2540d6adebd05db54d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTQ4MDI5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToyOToyMFrOHHaqTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTo1Njo0MFrOHHbjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg5Mg==", "bodyText": "Make sure the Rolling Restart and Operator Restart has been occurring simultaneously.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477538892", "createdAt": "2020-08-26T19:29:20Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +208,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test\n   @DisplayName(\"Restart operator when the domain is rolling after the admin credentials are changed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03f3066dec0a2a86e1e6b73e2e3b06f004b7277"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzOTkzNQ==", "bodyText": "will add the check to see if the last managed server pod is deleted in this existing test...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477539935", "createdAt": "2020-08-26T19:31:21Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +208,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test\n   @DisplayName(\"Restart operator when the domain is rolling after the admin credentials are changed\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg5Mg=="}, "originalCommit": {"oid": "c03f3066dec0a2a86e1e6b73e2e3b06f004b7277"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MzQ1OQ==", "bodyText": "admin server gets terminated first when rolling restart happens..added check for the same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477553459", "createdAt": "2020-08-26T19:56:40Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +208,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test\n   @DisplayName(\"Restart operator when the domain is rolling after the admin credentials are changed\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg5Mg=="}, "originalCommit": {"oid": "c03f3066dec0a2a86e1e6b73e2e3b06f004b7277"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTcyNTg4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0MzowOVrOHHdBFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMToxMjo0OFrOHHd7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzQ5NA==", "bodyText": "In CommonTestUtils.java, we have a similar test method:\npublic static void checkPodReadyAndServiceExists(String podName, String domainUid, String namespace)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477577494", "createdAt": "2020-08-26T20:43:09Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -244,4 +344,30 @@ private void restartOperatorAndVerify() {\n     assertFalse(opPodNameNew.equals(opPodName),\n         \"The operator names before and after a restart should be different\");\n   }\n+\n+  private void checkServiceExistsAndPodReady() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "770eee47797fc53f7bedf429b1a723fb762a01c4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MDUzMQ==", "bodyText": "thanks for pointing it out ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477590531", "createdAt": "2020-08-26T21:08:59Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -244,4 +344,30 @@ private void restartOperatorAndVerify() {\n     assertFalse(opPodNameNew.equals(opPodName),\n         \"The operator names before and after a restart should be different\");\n   }\n+\n+  private void checkServiceExistsAndPodReady() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzQ5NA=="}, "originalCommit": {"oid": "770eee47797fc53f7bedf429b1a723fb762a01c4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjQ1Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477592457", "createdAt": "2020-08-26T21:12:48Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -244,4 +344,30 @@ private void restartOperatorAndVerify() {\n     assertFalse(opPodNameNew.equals(opPodName),\n         \"The operator names before and after a restart should be different\");\n   }\n+\n+  private void checkServiceExistsAndPodReady() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzQ5NA=="}, "originalCommit": {"oid": "770eee47797fc53f7bedf429b1a723fb762a01c4"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTc2MTIzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo1NDoyMVrOHHdWsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMToxMjo0MVrOHHd7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MzAyNA==", "bodyText": "you can just call checkPodDoesNotExist(podName, null, namespace)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477583024", "createdAt": "2020-08-26T20:54:21Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1189,6 +1189,28 @@ public static void checkPodDoesNotExist(String podName, String domainUid, String\n                 podName, namespace)));\n   }\n \n+\n+  /**\n+   * Check pod does not exist in the specified namespace.\n+   *\n+   * @param podName pod name to check\n+   * @param namespace the namespace in which to check whether the pod exists\n+   */\n+  public static void checkPodDoesNotExist(String podName, String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "770eee47797fc53f7bedf429b1a723fb762a01c4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjM4MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477592380", "createdAt": "2020-08-26T21:12:41Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1189,6 +1189,28 @@ public static void checkPodDoesNotExist(String podName, String domainUid, String\n                 podName, namespace)));\n   }\n \n+\n+  /**\n+   * Check pod does not exist in the specified namespace.\n+   *\n+   * @param podName pod name to check\n+   * @param namespace the namespace in which to check whether the pod exists\n+   */\n+  public static void checkPodDoesNotExist(String podName, String namespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MzAyNA=="}, "originalCommit": {"oid": "770eee47797fc53f7bedf429b1a723fb762a01c4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTI3NzM0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToxOTowNFrOHIVSbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToxOTowNFrOHIVSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5OTQzNw==", "bodyText": "Same issue as previous comment.  Also, the error message is exactly the same as the previous one.  It might be better to include the filename in the log message so you know which file is failing.\nThis logger format is incorrect. If you are using this method\npublic void info(String msg, Object... params)\nthen the code should be\nlogger.info(\"Exception while copying file to pod {0}\", ioex.getMessage())\nor if you are using this method\npublic void info(String msg, Throwable thrown)\nthen the code should be\nlogger.info(\"Exception while copying file to pod\", ioex)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r478499437", "createdAt": "2020-08-27T15:19:04Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "diffHunk": "@@ -156,30 +156,31 @@ public static Path buildApplication(Path appSrcPath, Map<String, String> antPara\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTI5MDM1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToyMjowM1rOHIVa0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToyMjowM1rOHIVa0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwMTU4NQ==", "bodyText": "This logger format is incorrect. If you are using this method\npublic void info(String msg, Object... params)\nthen the code should be\nlogger.info(\"Exception while copying file to pod {0}\", ioex.getMessage())\nor if you are using this method\npublic void info(String msg, Throwable thrown)\nthen the code should be\nlogger.info(\"Exception while copying file to pod\", ioex)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r478501585", "createdAt": "2020-08-27T15:22:03Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "diffHunk": "@@ -156,30 +156,31 @@ public static Path buildApplication(Path appSrcPath, Map<String, String> antPara\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTI5NTk3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToyMzoyMVrOHIVeWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToyMzoyMVrOHIVeWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwMjQ5MA==", "bodyText": "Same as previous comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r478502490", "createdAt": "2020-08-27T15:23:21Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "diffHunk": "@@ -156,30 +156,31 @@ public static Path buildApplication(Path appSrcPath, Map<String, String> antPara\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);\n     }\n     try {\n       //Kubernetes.exec(webLogicPod, new String[]{\"/bin/sh\", \"/u01/\" + BUILD_SCRIPT});\n       ExecResult exec = Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"/u01/\" + BUILD_SCRIPT);\n       if (exec.stdout() != null) {\n-        logger.info(exec.stdout());\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n       }\n       if (exec.stderr() != null) {\n-        logger.info(exec.stderr());\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n       }\n       assertEquals(0, exec.exitValue(), \"Exec into \" + webLogicPod.getMetadata().getName()\n-          + \" to build an application failed\");\n+          + \" to build an application failed with exit value \" + exec.exitValue());\n+\n       Kubernetes.copyDirectoryFromPod(webLogicPod,\n           Paths.get(APPLICATIONS_PATH, archiveDistDir).toString(), destArchiveBaseDir);\n     } catch (ApiException | IOException | InterruptedException ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file from pod {0}\", ioex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4227, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}