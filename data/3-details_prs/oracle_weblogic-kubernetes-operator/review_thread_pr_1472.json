{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Mzc2MTAy", "number": 1472, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MDo0N1rODodVmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MjoxNlrODodXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzUwMjk2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MDo0N1rOF3BSfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MDo0N1rOF3BSfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNzExOA==", "bodyText": "wow, that really clarified that :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1472#discussion_r393237118", "createdAt": "2020-03-16T18:40:47Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -711,14 +731,81 @@ private Call readCustomResourceDefinitionAsync(\n    * @return Asynchronous step\n    */\n   public Step readCustomResourceDefinitionAsync(\n-      String name, ResponseStep<V1beta1CustomResourceDefinition> responseStep) {\n+      String name, ResponseStep<V1CustomResourceDefinition> responseStep) {\n     return createRequestAsync(\n         responseStep, new RequestParams(\"readCRD\", null, name, null), readCrd);\n   }\n \n-  /* Services */\n-\n   private Call createCustomResourceDefinitionAsync(\n+      ApiClient client,\n+      V1CustomResourceDefinition body,\n+      ApiCallback<V1CustomResourceDefinition> callback)\n+      throws ApiException {\n+    return new ApiextensionsV1Api(client)\n+        .createCustomResourceDefinitionAsync(body, pretty, null, null, callback);\n+  }\n+\n+  /**\n+   * Asynchronous step for creating CRD.\n+   *\n+   * @param body Body", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695c26aa876dff74813b72f55985ce446a0a54d4"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzUwNDEwOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MTowNVrOF3BTJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MTowNVrOF3BTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNzI4NQ==", "bodyText": "is this generated?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1472#discussion_r393237285", "createdAt": "2020-03-16T18:41:05Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -711,14 +731,81 @@ private Call readCustomResourceDefinitionAsync(\n    * @return Asynchronous step\n    */\n   public Step readCustomResourceDefinitionAsync(\n-      String name, ResponseStep<V1beta1CustomResourceDefinition> responseStep) {\n+      String name, ResponseStep<V1CustomResourceDefinition> responseStep) {\n     return createRequestAsync(\n         responseStep, new RequestParams(\"readCRD\", null, name, null), readCrd);\n   }\n \n-  /* Services */\n-\n   private Call createCustomResourceDefinitionAsync(\n+      ApiClient client,\n+      V1CustomResourceDefinition body,\n+      ApiCallback<V1CustomResourceDefinition> callback)\n+      throws ApiException {\n+    return new ApiextensionsV1Api(client)\n+        .createCustomResourceDefinitionAsync(body, pretty, null, null, callback);\n+  }\n+\n+  /**\n+   * Asynchronous step for creating CRD.\n+   *\n+   * @param body Body\n+   * @param responseStep Response step for when call completes\n+   * @return Asynchronous step\n+   */\n+  public Step createCustomResourceDefinitionAsync(\n+      V1CustomResourceDefinition body,\n+      ResponseStep<V1CustomResourceDefinition> responseStep) {\n+    return createRequestAsync(\n+        responseStep, new RequestParams(\"createCRD\", null, null, body), createCrd);\n+  }\n+\n+  private Call replaceCustomResourceDefinitionAsync(\n+      ApiClient client,\n+      String name,\n+      V1CustomResourceDefinition body,\n+      ApiCallback<V1CustomResourceDefinition> callback)\n+      throws ApiException {\n+    return new ApiextensionsV1Api(client)\n+        .replaceCustomResourceDefinitionAsync(name, body, pretty, null, null, callback);\n+  }\n+\n+  /**\n+   * Asynchronous step for replacing CRD.\n+   *\n+   * @param name Name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695c26aa876dff74813b72f55985ce446a0a54d4"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzUwNzUyOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CrdHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MjoxNlrOF3BVdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODo0MjoxNlrOF3BVdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNzg3Nw==", "bodyText": "magic number", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1472#discussion_r393237877", "createdAt": "2020-03-16T18:42:16Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CrdHelper.java", "diffHunk": "@@ -116,63 +151,130 @@ boolean isOutdatedCrd(\n \n     @Override\n     public NextAction apply(Packet packet) {\n-      return doNext(context.verifyCrd(getNext()), packet);\n+      if (context.version.isCrdV1Supported()) {\n+        return doNext(context.verifyCrd(getNext()), packet);\n+      } else {\n+        return doNext(context.verifyBetaCrd(getNext()), packet);\n+      }\n     }\n   }\n \n   static class CrdContext {\n     private final Step conflictStep;\n-    private final V1beta1CustomResourceDefinition model;\n+    private final V1CustomResourceDefinition model;\n+    private final V1beta1CustomResourceDefinition betaModel;\n     private final KubernetesVersion version;\n \n     CrdContext(KubernetesVersion version, Step conflictStep) {\n       this.version = version;\n       this.conflictStep = conflictStep;\n       this.model = createModel(version);\n+      this.betaModel = createBetaModel(version);\n     }\n \n-    static V1beta1CustomResourceDefinition createModel(KubernetesVersion version) {\n+    static V1CustomResourceDefinition createModel(KubernetesVersion version) {\n+      return new V1CustomResourceDefinition()\n+          .apiVersion(\"apiextensions.k8s.io/v1\")\n+          .kind(\"CustomResourceDefinition\")\n+          .metadata(createMetadata())\n+          .spec(createSpec(version));\n+    }\n+\n+    static V1beta1CustomResourceDefinition createBetaModel(KubernetesVersion version) {\n       return new V1beta1CustomResourceDefinition()\n           .apiVersion(\"apiextensions.k8s.io/v1beta1\")\n           .kind(\"CustomResourceDefinition\")\n           .metadata(createMetadata())\n-          .spec(createSpec(version));\n+          .spec(createBetaSpec(version));\n     }\n \n     static V1ObjectMeta createMetadata() {\n       return new V1ObjectMeta()\n           .name(KubernetesConstants.CRD_NAME);\n     }\n \n-    static V1beta1CustomResourceDefinitionSpec createSpec(KubernetesVersion version) {\n+    static V1CustomResourceDefinitionSpec createSpec(KubernetesVersion version) {\n+      V1CustomResourceDefinitionSpec spec =\n+          new V1CustomResourceDefinitionSpec()\n+              .group(KubernetesConstants.DOMAIN_GROUP)\n+              .versions(getCrdVersions())\n+              .scope(\"Namespaced\")\n+              .names(getCrdNames());\n+      return spec;\n+    }\n+\n+    static V1beta1CustomResourceDefinitionSpec createBetaSpec(KubernetesVersion version) {\n       V1beta1CustomResourceDefinitionSpec spec =\n           new V1beta1CustomResourceDefinitionSpec()\n               .group(KubernetesConstants.DOMAIN_GROUP)\n-              .version(KubernetesConstants.DOMAIN_VERSION)\n-              .versions(getCrdVersions())\n+              .versions(getBetaCrdVersions())\n+              .validation(createBetaSchemaValidation())\n+              .subresources(createBetaSubresources())\n               .scope(\"Namespaced\")\n-              .names(getCrdNames())\n-              .validation(createSchemaValidation());\n-      if (version == null || version.isCrdSubresourcesSupported()) {\n-        spec.setSubresources(\n-            new V1beta1CustomResourceSubresources()\n-                .scale(\n-                    new V1beta1CustomResourceSubresourceScale()\n-                        .specReplicasPath(\".spec.replicas\")\n-                        .statusReplicasPath(\".status.replicas\")));\n-        // Remove status for now because seeing status not updated on some k8s environments\n-        // Consider adding this only for K8s version 1.13+\n-        // See the note in KubernetesVersion\n-        // .status(new HashMap<String, Object>()));\n-      }\n+              .names(getBetaCrdNames());\n       return spec;\n     }\n \n-    static List<V1beta1CustomResourceDefinitionVersion> getCrdVersions() {\n-      List<V1beta1CustomResourceDefinitionVersion> versions =\n-          Arrays.stream(KubernetesConstants.DOMAIN_ALTERNATE_VERSIONS)\n-              .map(e -> new V1beta1CustomResourceDefinitionVersion().name(e).served(true).storage(false))\n-              .collect(Collectors.toList());\n+    static String getVersionFromCrdSchemaFileName(String name) {\n+      // names will be like \"domain-crd-schemav2-201.yaml\"\n+      // want \"v2\"\n+      String end = name.substring(17);\n+      return end.substring(0, end.indexOf('-'));\n+    }\n+\n+    static V1CustomResourceValidation getValidationFromCrdSchemaFile(String fileContents) {\n+      return Yaml.getSnakeYaml().loadAs(new StringReader(fileContents), V1CustomResourceValidation.class);\n+    }\n+\n+    static V1CustomResourceSubresources createSubresources() {\n+      return new V1CustomResourceSubresources()\n+          .scale(\n+              new V1CustomResourceSubresourceScale()\n+                  .specReplicasPath(\".spec.replicas\")\n+                  .statusReplicasPath(\".status.replicas\"));\n+    }\n+\n+    static V1beta1CustomResourceSubresources createBetaSubresources() {\n+      return new V1beta1CustomResourceSubresources()\n+          .scale(\n+              new V1beta1CustomResourceSubresourceScale()\n+                  .specReplicasPath(\".spec.replicas\")\n+                  .statusReplicasPath(\".status.replicas\"));\n+    }\n+\n+    static List<V1CustomResourceDefinitionVersion> getCrdVersions() {\n+      Map<String, String> schemas = schemaReader.loadFilesFromClasspath();\n+      List<V1CustomResourceDefinitionVersion> versions = schemas.entrySet().stream()\n+          .sorted(Comparator.comparing(Map.Entry::getKey))\n+          .map(entry -> new V1CustomResourceDefinitionVersion()\n+              .name(getVersionFromCrdSchemaFileName(entry.getKey()))\n+              .schema(getValidationFromCrdSchemaFile(entry.getValue()))\n+              .subresources(createSubresources())\n+              .served(true)\n+              .storage(false))\n+          .collect(Collectors.toList());\n+\n+      versions.add(\n+          0, // must be first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "695c26aa876dff74813b72f55985ce446a0a54d4"}, "originalPosition": 255}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4616, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}