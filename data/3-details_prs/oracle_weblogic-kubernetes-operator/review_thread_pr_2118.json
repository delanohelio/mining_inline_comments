{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDUzMTcy", "number": 2118, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzo0NDozNVrOFIyw-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Mjo1OVrOFLVZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzY0NjY1OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzo0NDozNVrOIK65-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNTowNDowMFrOILJCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTc4Ng==", "bodyText": "What happened if it is a RuntimeException but not an ApiException?  Do we want to limit the number of retries or make it retry forever (hopefully the condition can be resolved)?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r548321786", "createdAt": "2020-12-23T23:44:35Z", "author": {"login": "jshum2479"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1MzQxMg==", "bodyText": "I'll think about other exceptions... I didn't want to limit the number of retries here because the operator cannot go on until it can connect to the master and the operator will eventually be killed by the liveness probe.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r548553412", "createdAt": "2020-12-24T15:04:00Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTc4Ng=="}, "originalCommit": {"oid": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDI4MTExOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1MDoyMFrOIOch_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1MDoyMFrOIOch_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxODQzMA==", "bodyText": "Does the ApiException ever get nested further down?  Is there ever a case where you need to loop through the causes looking for ApiException?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r552018430", "createdAt": "2021-01-05T15:50:20Z", "author": {"login": "ddsharpe"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {\n+        Throwable cause = re.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDI5MTgzOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Mjo1OVrOIOcoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Mjo1OVrOIOcoig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMDEwNg==", "bodyText": "Please add a comment here that we expect the liveness probe to cancel this process if it \"retries forever\".  The next coder may not understand the assumption/expectation.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r552020106", "createdAt": "2021-01-05T15:52:59Z", "author": {"login": "ddsharpe"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {\n+        Throwable cause = re.getCause();\n+        if (cause instanceof ApiException) {\n+          LOGGER.warning(MessageKeys.EXCEPTION, cause);\n+        }\n+      } catch (Throwable t) {\n+        LOGGER.warning(MessageKeys.EXCEPTION, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3845, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}