{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjg0NTQ2", "number": 1774, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMDo1OFrOEKHJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NjowNlrOEKO0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM4MjgwOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMDo1OFrOGq90sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMDo1OFrOGq90sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNjI5MA==", "bodyText": "Long.parseLong can throw NumberFormatException - why would you swallow it for BigInteger?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447706290", "createdAt": "2020-06-30T14:00:58Z", "author": {"login": "dldnh"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -226,12 +227,16 @@ private long computeNextResourceVersionFromMessage(V1Status status) {\n         if (index2 > 0) {\n           String val = message.substring(index1 + 1, index2);\n           if (!isNullOrEmpty(val)) {\n-            return Long.parseLong(val);\n+            try {\n+              return new BigInteger(val);\n+            } catch (NumberFormatException nfe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM5MDQ0OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMjozOVrOGq95ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMjozOVrOGq95ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNzU1MA==", "bodyText": "why swallow the NumberFormatException?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447707550", "createdAt": "2020-06-30T14:02:39Z", "author": {"login": "dldnh"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +129,22 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    String resVersion = metadata.getResourceVersion();\n+    if (resVersion != null) {\n+      try {\n+        return new BigInteger(resVersion);\n+      } catch (NumberFormatException nfe) {\n+        // no-op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQxMTEwOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNzowNFrOGq-Gdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNzowNFrOGq-Gdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMDgzOA==", "bodyText": "no op or return BI.ZERO?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447710838", "createdAt": "2020-06-30T14:07:04Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -226,12 +227,16 @@ private long computeNextResourceVersionFromMessage(V1Status status) {\n         if (index2 > 0) {\n           String val = message.substring(index1 + 1, index2);\n           if (!isNullOrEmpty(val)) {\n-            return Long.parseLong(val);\n+            try {\n+              return new BigInteger(val);\n+            } catch (NumberFormatException nfe) {\n+              // no-op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQxNDM2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNzo0M1rOGq-Igw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNzo0M1rOGq-Igw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMTM2Mw==", "bodyText": "no op or zero?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447711363", "createdAt": "2020-06-30T14:07:43Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +129,22 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    String resVersion = metadata.getResourceVersion();\n+    if (resVersion != null) {\n+      try {\n+        return new BigInteger(resVersion);\n+      } catch (NumberFormatException nfe) {\n+        // no-op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTYzOTQ2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NjowNlrOGrJ5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1Mzo1MVrOGrKLQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ==", "bodyText": "you say you will return the value or zero, but you seem to return the value or null", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447904029", "createdAt": "2020-06-30T18:46:06Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +130,47 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNzU5MQ==", "bodyText": "That's not correct. This method may pass null as the parameter to getResourceVersion(String), which will return 0.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447907591", "createdAt": "2020-06-30T18:52:04Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +130,47 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ=="}, "originalCommit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwODY3NQ==", "bodyText": "ah ok, my bad. thanks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447908675", "createdAt": "2020-06-30T18:53:51Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +130,47 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ=="}, "originalCommit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4418, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}