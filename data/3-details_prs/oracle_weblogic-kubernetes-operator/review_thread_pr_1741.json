{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDM4NDQ4", "number": 1741, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMjo1OVrOEGF5hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjoxMToxNlrOEGIENA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODIzNTU4OnYy", "diffSide": "RIGHT", "path": "docs/domains/Domain.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMzowMFrOGkreCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0MDowM1rOGkuI5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNDEyMQ==", "bodyText": "managed servers -> Managed Servers\nif maxConcurrentStartup is not -> if maxConcurrentStartup is not (maxConcurrentStartup should be in code font)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441114121", "createdAt": "2020-06-16T20:13:00Z", "author": {"login": "rosemarymarano"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -36,6 +37,7 @@ DomainSpec is a description of a domain.\n | `logHome` | string | The in-pod name of the directory in which to store the domain, Node Manager, server logs, server  *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if logHomeEnabled is false. |\n | `logHomeEnabled` | Boolean | Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise. |\n | `managedServers` | array of [Managed Server](#managed-server) | Configuration for individual Managed Servers. |\n+| `maxClusterConcurrentStartup` | number | The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1Nzg2Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441157862", "createdAt": "2020-06-16T21:40:03Z", "author": {"login": "alai8"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -36,6 +37,7 @@ DomainSpec is a description of a domain.\n | `logHome` | string | The in-pod name of the directory in which to store the domain, Node Manager, server logs, server  *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if logHomeEnabled is false. |\n | `logHomeEnabled` | Boolean | Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise. |\n | `managedServers` | array of [Managed Server](#managed-server) | Configuration for individual Managed Servers. |\n+| `maxClusterConcurrentStartup` | number | The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNDEyMQ=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODI2MDk4OnYy", "diffSide": "RIGHT", "path": "docs/domains/Domain.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoyMToxM1rOGkruPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0MjowMVrOGkuMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExODI3MQ==", "bodyText": "managed servers -> Managed Servers (globally)\nwill wait until a managed server to be in Ready and Running state -> will wait until a Managed Server is in the Ready and Running state.\n(Hmmm, in the WLS docs, https://docs.oracle.com/en/middleware/standalone/weblogic-server/14.1.1.0/start/server_life.html#GUID-B1352C2D-351C-47C0-BE40-CA109367263C, there is a RUNNING state but not a READY state. Maybe these docs are not applicable.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441118271", "createdAt": "2020-06-16T20:21:13Z", "author": {"login": "rosemarymarano"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -80,6 +82,7 @@ An element representing a cluster in the domain configuration.\n | `allowReplicasBelowMinDynClusterSize` | Boolean | If true (the default), then the number of replicas is allowed to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration. Otherwise, the operator will ensure that the number of replicas is not less than the minimum dynamic cluster setting. This setting applies to dynamic clusters only. |\n | `clusterName` | string | The name of this cluster. Required |\n | `clusterService` | [Kubernetes Resource](#kubernetes-resource) | Customization affecting ClusterIP Kubernetes services for the WebLogic cluster. |\n+| `maxConcurrentStartup` | number | The maximum number of managed servers that the operator will start in parallel for the cluster in response to a change in replicas count for the cluster. If more managed servers need to be started, the operator will wait until a managed server to be in Ready and Running state before starting the next managed server. A value of 0 (the default) means all managed servers will start in parallel. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1ODc0Mg==", "bodyText": "Thanks. The \"Ready and Running state\" should be for the managed server pod. So this is now updated to read\n\"If more Managed Servers need to be started, the operator will wait until a Managed Server pod is in the Ready and Running state before starting the next Managed Server. \"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441158742", "createdAt": "2020-06-16T21:42:01Z", "author": {"login": "alai8"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -80,6 +82,7 @@ An element representing a cluster in the domain configuration.\n | `allowReplicasBelowMinDynClusterSize` | Boolean | If true (the default), then the number of replicas is allowed to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration. Otherwise, the operator will ensure that the number of replicas is not less than the minimum dynamic cluster setting. This setting applies to dynamic clusters only. |\n | `clusterName` | string | The name of this cluster. Required |\n | `clusterService` | [Kubernetes Resource](#kubernetes-resource) | Customization affecting ClusterIP Kubernetes services for the WebLogic cluster. |\n+| `maxConcurrentStartup` | number | The maximum number of managed servers that the operator will start in parallel for the cluster in response to a change in replicas count for the cluster. If more managed servers need to be started, the operator will wait until a managed server to be in Ready and Running state before starting the next managed server. A value of 0 (the default) means all managed servers will start in parallel. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExODI3MQ=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQyNDIwOnYy", "diffSide": "RIGHT", "path": "docs/domains/Domain.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMTowN1rOGktUbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0Mjo1NlrOGkuN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDQzMA==", "bodyText": "Add 'Defaults to true'.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441144430", "createdAt": "2020-06-16T21:11:07Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -383,6 +393,10 @@\n           \"description\": \"Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise.\",\n           \"type\": \"boolean\"\n         },\n+        \"allowReplicasBelowMinDynClusterSize\": {\n+          \"description\": \"Whether to allow the number of replicas to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration, if this is not specified at the cluster level.\",\n+          \"type\": \"boolean\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1OTE2NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441159165", "createdAt": "2020-06-16T21:42:56Z", "author": {"login": "alai8"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -383,6 +393,10 @@\n           \"description\": \"Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise.\",\n           \"type\": \"boolean\"\n         },\n+        \"allowReplicasBelowMinDynClusterSize\": {\n+          \"description\": \"Whether to allow the number of replicas to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration, if this is not specified at the cluster level.\",\n+          \"type\": \"boolean\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDQzMA=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQyNjU3OnYy", "diffSide": "RIGHT", "path": "docs/domains/Domain.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMTo0NlrOGktVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0MzoxNlrOGkuOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDc3Nw==", "bodyText": "Add 'Defaults to true.' (Similarly add the default in any other description.)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441144777", "createdAt": "2020-06-16T21:11:46Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -17,6 +17,7 @@ DomainSpec is a description of a domain.\n | Name | Type | Description |\n | --- | --- | --- |\n | `adminServer` | [Admin Server](#admin-server) | Configuration for the Administration Server. |\n+| `allowReplicasBelowMinDynClusterSize` | Boolean | Whether to allow the number of replicas to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration, if this is not specified at the cluster level. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1OTMxMw==", "bodyText": "done. thanks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441159313", "createdAt": "2020-06-16T21:43:16Z", "author": {"login": "alai8"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -17,6 +17,7 @@ DomainSpec is a description of a domain.\n | Name | Type | Description |\n | --- | --- | --- |\n | `adminServer` | [Admin Server](#admin-server) | Configuration for the Administration Server. |\n+| `allowReplicasBelowMinDynClusterSize` | Boolean | Whether to allow the number of replicas to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration, if this is not specified at the cluster level. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDc3Nw=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQzMjgxOnYy", "diffSide": "RIGHT", "path": "docs/domains/Domain.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMzo0N1rOGktZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0Mzo1MVrOGkuPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NTc0MQ==", "bodyText": "A default value of 0 means there --> A value of 0 (the default) means that there", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441145741", "createdAt": "2020-06-16T21:13:47Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -343,6 +348,11 @@\n             \"IfNotPresent\"\n           ]\n         },\n+        \"maxClusterConcurrentStartup\": {\n+          \"description\": \"The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit.\",\n+          \"type\": \"number\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NjE2NQ==", "bodyText": "Ditto for other occurrences of the same wording.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441146165", "createdAt": "2020-06-16T21:14:42Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -343,6 +348,11 @@\n             \"IfNotPresent\"\n           ]\n         },\n+        \"maxClusterConcurrentStartup\": {\n+          \"description\": \"The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit.\",\n+          \"type\": \"number\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NTc0MQ=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1OTU0OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441159549", "createdAt": "2020-06-16T21:43:51Z", "author": {"login": "alai8"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -343,6 +348,11 @@\n             \"IfNotPresent\"\n           ]\n         },\n+        \"maxClusterConcurrentStartup\": {\n+          \"description\": \"The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit.\",\n+          \"type\": \"number\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NTc0MQ=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQ5NDA3OnYy", "diffSide": "RIGHT", "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNTowOFrOGkuAsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1NTozOVrOGkujrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NTc2Mg==", "bodyText": "General questions (not directly related to this unit test):\nWill the managed server startup ordering fix from #1727 continue to apply (start 'lowest' servers first)?  I assume so?\nIf the answer is yes, do these unit tests verify this?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441155762", "createdAt": "2020-06-16T21:35:08Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NDcxOQ==", "bodyText": "yes, fix from #1727 should continue to apply.\nThese unit tests won't verify it. #1727 updates WlsClusterConfig.getServerConfigs() to return a sorted list of server configs, which helps to create a sorted list of ServerStartupInfos.  But ManagedServerUpIteratorStepTest here create its own  ServerStartupInfos arrays in the tests.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441164719", "createdAt": "2020-06-16T21:55:39Z", "author": {"login": "alai8"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NTc2Mg=="}, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU3Mjk1OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMzo1OVrOGkuw5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjo0ODoxMVrOGkvwUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2ODEwMw==", "bodyText": "If you're using Intellij, it should have suggested that you change this to\n.filter(this::isServerInCluster)\nsince there is no need to repeat the variable ssi here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441168103", "createdAt": "2020-06-16T22:03:59Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -102,6 +119,27 @@ private Packet createPacketForServer(Packet packet, ServerStartupInfo ssi) {\n     return p;\n   }\n \n+  private Map<String, StartClusteredServersStepFactory> getStartClusteredServersStepFactories(\n+      Collection<ServerStartupInfo> startupInfos,\n+      Packet packet) {\n+    DomainPresenceInfo info = packet.getSpi(DomainPresenceInfo.class);\n+    Domain domain = info.getDomain();\n+\n+    Map<String, StartClusteredServersStepFactory> factories = new HashMap<>();\n+    startupInfos.stream()\n+        .filter(ssi -> isServerInCluster(ssi))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDMzNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441184336", "createdAt": "2020-06-16T22:48:11Z", "author": {"login": "alai8"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -102,6 +119,27 @@ private Packet createPacketForServer(Packet packet, ServerStartupInfo ssi) {\n     return p;\n   }\n \n+  private Map<String, StartClusteredServersStepFactory> getStartClusteredServersStepFactories(\n+      Collection<ServerStartupInfo> startupInfos,\n+      Packet packet) {\n+    DomainPresenceInfo info = packet.getSpi(DomainPresenceInfo.class);\n+    Domain domain = info.getDomain();\n+\n+    Map<String, StartClusteredServersStepFactory> factories = new HashMap<>();\n+    startupInfos.stream()\n+        .filter(ssi -> isServerInCluster(ssi))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2ODEwMw=="}, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU4NjgwOnYy", "diffSide": "RIGHT", "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowOTo1MVrOGku5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjo0ODo0MFrOGkvw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMzNQ==", "bodyText": "You don't need to prefix your test names with \"verifyThat_\" since all tests do verification. Just make it an assertion on the behaviors, such as:\nwithConcurrencyOf1_clusteredServersStartSequentially", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441170335", "createdAt": "2020-06-16T22:09:51Z", "author": {"login": "russgold"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDUwOA==", "bodyText": "thanks. updated test names.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441184508", "createdAt": "2020-06-16T22:48:40Z", "author": {"login": "alai8"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMzNQ=="}, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU5MDYwOnYy", "diffSide": "RIGHT", "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjoxMToxNlrOGku73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjo0ODo0N1rOGkvxKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDkwOQ==", "bodyText": "missing 'e' in \"Clusterd\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441170909", "createdAt": "2020-06-16T22:11:16Z", "author": {"login": "russgold"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }\n+\n+  @Test\n+  public void verifyThat_withMultipleClusters_differentClusterShouldStartDifferently() {\n+    final String CLUSTER2 = \"cluster2\";\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    configureCluster(CLUSTER2).withMaxConcurrentStartup(0);\n+\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+    addWlsCluster(CLUSTER2, \"ms3\", \"ms4\");\n+\n+    Collection<ServerStartupInfo> serverStartupInfos = createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\");\n+    serverStartupInfos.addAll(createServerStartupInfosForCluster(CLUSTER2, \"ms3\", \"ms4\"));\n+    invokeStepWithServerStartupInfos(serverStartupInfos);\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers(), allOf(hasItem(\"ms3\"), hasItem(\"ms4\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_maxClusterConcurrentStartup_doesNotApplyToNonClusterdServers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NDU1NQ==", "bodyText": "thanks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441184555", "createdAt": "2020-06-16T22:48:47Z", "author": {"login": "alai8"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }\n+\n+  @Test\n+  public void verifyThat_withMultipleClusters_differentClusterShouldStartDifferently() {\n+    final String CLUSTER2 = \"cluster2\";\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    configureCluster(CLUSTER2).withMaxConcurrentStartup(0);\n+\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+    addWlsCluster(CLUSTER2, \"ms3\", \"ms4\");\n+\n+    Collection<ServerStartupInfo> serverStartupInfos = createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\");\n+    serverStartupInfos.addAll(createServerStartupInfosForCluster(CLUSTER2, \"ms3\", \"ms4\"));\n+    invokeStepWithServerStartupInfos(serverStartupInfos);\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers(), allOf(hasItem(\"ms3\"), hasItem(\"ms4\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_maxClusterConcurrentStartup_doesNotApplyToNonClusterdServers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDkwOQ=="}, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 160}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4353, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}