{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzYxNTc0", "number": 1738, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNTozM1rOEGF8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNzozN1rOEICoHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODI0Mjk5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNTozM1rOGkri4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo0OTowMlrOGkw5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTM2Mw==", "bodyText": "add domain2-managed-server2 to end of URL list", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441115363", "createdAt": "2020-06-16T20:15:33Z", "author": {"login": "ajsomogyi"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,400 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n+    // set in the config file. Cannot set this after the domain is up since a server restart is\n+    // required for this to take effect. So, copying the property file to RESULT_ROOT and updating the\n+    // property file\n+    updatePropertyFile();\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domain1Namespace, domain2Namespace);\n+\n+  }\n+\n+  private static void updatePropertyFile() {\n+    //create a temporary directory to copy and update the properties file\n+    Path target = Paths.get(PROPS_TEMP_DIR);\n+    Path source1 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN1_PROPS);\n+    Path source2 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN2_PROPS);\n+    logger.info(\"Copy the properties file to the above area so that we can add namespace property\");\n+    assertDoesNotThrow(() -> {\n+      Files.createDirectories(target);\n+      Files.copy(source1, target.resolve(source1.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+      Files.copy(source2, target.resolve(source2.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+    });\n+\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+    });\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+    });\n+\n+  }\n+\n+  private static void addNamespaceToPropertyFile(String propFileName, String domainNamespace) throws IOException {\n+    FileInputStream in = new FileInputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    Properties props = new Properties();\n+    props.load(in);\n+    in.close();\n+\n+    FileOutputStream out = new FileOutputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    props.setProperty(\"NAMESPACE\", domainNamespace);\n+    props.store(out, null);\n+    out.close();\n+  }\n+\n+  /*\n+   * This test verifies cross domain transaction is successful. domain in image using wdt is used\n+   * to create 2 domains in different namespaces. An app is deployed to both the domains and the servlet\n+   * is invoked which starts a transaction that spans both domains.\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCrossDomainTransaction() {\n+\n+    //build application archive\n+    //Path application = Paths.get(RESOURCE_DIR, \"apps\", \"txpropagate\");\n+    Path application = Paths.get(RESOURCE_DIR, \"apps\", \"txforward\");\n+    BuildApplication.buildApplication(application, null, \"build\", domain1Namespace);\n+\n+    // create admin credential secret for domain1\n+    logger.info(\"Create admin credential secret for domain1\");\n+    String domain1AdminSecretName = domainUid1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain1AdminSecretName, domain1Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain1AdminSecretName, domainUid1));\n+\n+    // create admin credential secret for domain2\n+    logger.info(\"Create admin credential secret for domain2\");\n+    String domain2AdminSecretName = domainUid2 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain2AdminSecretName, domain2Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain2AdminSecretName, domainUid2));\n+\n+    //createImageVerify expects the location of the ear file\n+    String appSource = PV_ROOT + \"/applications/\" + WDT_APP_NAME + \"/\" + WDT_APP_NAME + \".ear\";\n+\n+    logger.info(\"Creating image with model file and verify\");\n+    String domain1Image = createImageAndVerify(\n+        WDT_IMAGE_NAME1, WDT_MODEL_FILE_DOMAIN1, appSource, WDT_MODEL_DOMAIN1_PROPS, PROPS_TEMP_DIR, domainUid1);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(domain1Image);\n+\n+    logger.info(\"Creating image with model file and verify\");\n+    //String domain2Image = createImageAndVerify(\n+    //    WDT_IMAGE_NAME2, WDT_MODEL_FILE_DOMAIN2, WDT_APP_NAME, WDT_MODEL_DOMAIN2_PROPS, PROPS_TEMP_DIR, domainUid2);\n+    String domain2Image = createImageAndVerify(\n+        WDT_IMAGE_NAME2, WDT_MODEL_FILE_DOMAIN2, appSource, WDT_MODEL_DOMAIN2_PROPS, PROPS_TEMP_DIR, domainUid2);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(domain2Image);\n+\n+    //create domain1\n+    createDomain(domainUid1, domain1Namespace, domain1AdminSecretName, domain1Image);\n+    //create domain2\n+    createDomain(domainUid2, domain2Namespace, domain2AdminSecretName, domain2Image);\n+\n+    logger.info(\"Getting admin server external service node port\");\n+    int adminServiceNodePort = assertDoesNotThrow(\n+        () -> getServiceNodePort(domain1Namespace, domain1AdminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    String curlRequest = String.format(\"curl -v --show-error --noproxy '*' \"\n+            + \"http://%s:%s/TxForward/TxForward?urls=t3://%s.%s:7001,t3://%s1.%s:8001,t3://%s1.%s:8001\",\n+             K8S_NODEPORT_HOST, adminServiceNodePort, domain1AdminServerPodName, domain1Namespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMjk1Ng==", "bodyText": "added domain2-managed-server2 to the url list", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441202956", "createdAt": "2020-06-16T23:49:02Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,400 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n+    // set in the config file. Cannot set this after the domain is up since a server restart is\n+    // required for this to take effect. So, copying the property file to RESULT_ROOT and updating the\n+    // property file\n+    updatePropertyFile();\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domain1Namespace, domain2Namespace);\n+\n+  }\n+\n+  private static void updatePropertyFile() {\n+    //create a temporary directory to copy and update the properties file\n+    Path target = Paths.get(PROPS_TEMP_DIR);\n+    Path source1 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN1_PROPS);\n+    Path source2 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN2_PROPS);\n+    logger.info(\"Copy the properties file to the above area so that we can add namespace property\");\n+    assertDoesNotThrow(() -> {\n+      Files.createDirectories(target);\n+      Files.copy(source1, target.resolve(source1.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+      Files.copy(source2, target.resolve(source2.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+    });\n+\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+    });\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+    });\n+\n+  }\n+\n+  private static void addNamespaceToPropertyFile(String propFileName, String domainNamespace) throws IOException {\n+    FileInputStream in = new FileInputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    Properties props = new Properties();\n+    props.load(in);\n+    in.close();\n+\n+    FileOutputStream out = new FileOutputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    props.setProperty(\"NAMESPACE\", domainNamespace);\n+    props.store(out, null);\n+    out.close();\n+  }\n+\n+  /*\n+   * This test verifies cross domain transaction is successful. domain in image using wdt is used\n+   * to create 2 domains in different namespaces. An app is deployed to both the domains and the servlet\n+   * is invoked which starts a transaction that spans both domains.\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCrossDomainTransaction() {\n+\n+    //build application archive\n+    //Path application = Paths.get(RESOURCE_DIR, \"apps\", \"txpropagate\");\n+    Path application = Paths.get(RESOURCE_DIR, \"apps\", \"txforward\");\n+    BuildApplication.buildApplication(application, null, \"build\", domain1Namespace);\n+\n+    // create admin credential secret for domain1\n+    logger.info(\"Create admin credential secret for domain1\");\n+    String domain1AdminSecretName = domainUid1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain1AdminSecretName, domain1Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain1AdminSecretName, domainUid1));\n+\n+    // create admin credential secret for domain2\n+    logger.info(\"Create admin credential secret for domain2\");\n+    String domain2AdminSecretName = domainUid2 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain2AdminSecretName, domain2Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain2AdminSecretName, domainUid2));\n+\n+    //createImageVerify expects the location of the ear file\n+    String appSource = PV_ROOT + \"/applications/\" + WDT_APP_NAME + \"/\" + WDT_APP_NAME + \".ear\";\n+\n+    logger.info(\"Creating image with model file and verify\");\n+    String domain1Image = createImageAndVerify(\n+        WDT_IMAGE_NAME1, WDT_MODEL_FILE_DOMAIN1, appSource, WDT_MODEL_DOMAIN1_PROPS, PROPS_TEMP_DIR, domainUid1);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(domain1Image);\n+\n+    logger.info(\"Creating image with model file and verify\");\n+    //String domain2Image = createImageAndVerify(\n+    //    WDT_IMAGE_NAME2, WDT_MODEL_FILE_DOMAIN2, WDT_APP_NAME, WDT_MODEL_DOMAIN2_PROPS, PROPS_TEMP_DIR, domainUid2);\n+    String domain2Image = createImageAndVerify(\n+        WDT_IMAGE_NAME2, WDT_MODEL_FILE_DOMAIN2, appSource, WDT_MODEL_DOMAIN2_PROPS, PROPS_TEMP_DIR, domainUid2);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(domain2Image);\n+\n+    //create domain1\n+    createDomain(domainUid1, domain1Namespace, domain1AdminSecretName, domain1Image);\n+    //create domain2\n+    createDomain(domainUid2, domain2Namespace, domain2AdminSecretName, domain2Image);\n+\n+    logger.info(\"Getting admin server external service node port\");\n+    int adminServiceNodePort = assertDoesNotThrow(\n+        () -> getServiceNodePort(domain1Namespace, domain1AdminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    String curlRequest = String.format(\"curl -v --show-error --noproxy '*' \"\n+            + \"http://%s:%s/TxForward/TxForward?urls=t3://%s.%s:7001,t3://%s1.%s:8001,t3://%s1.%s:8001\",\n+             K8S_NODEPORT_HOST, adminServiceNodePort, domain1AdminServerPodName, domain1Namespace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTM2Mw=="}, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODI0OTU4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txpropagate/build.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNzo0MFrOGkrnJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1MDozNlrOGkw61A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjQ1NA==", "bodyText": "Remove txpropagate application", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441116454", "createdAt": "2020-06-16T20:17:40Z", "author": {"login": "ajsomogyi"}, "path": "new-integration-tests/src/test/resources/apps/txpropagate/build.xml", "diffHunk": "@@ -0,0 +1,102 @@\n+<!-- Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+     Licensed under the Universal Permissive License v 1.0 as shown at\n+          https://oss.oracle.com/licenses/upl.-->\n+\n+<project name=\"txpropagate.app\" default=\"build\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzQxMg==", "bodyText": "removed txpropagate app", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441203412", "createdAt": "2020-06-16T23:50:36Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txpropagate/build.xml", "diffHunk": "@@ -0,0 +1,102 @@\n+<!-- Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+     Licensed under the Universal Permissive License v 1.0 as shown at\n+          https://oss.oracle.com/licenses/upl.-->\n+\n+<project name=\"txpropagate.app\" default=\"build\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjQ1NA=="}, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODI1MjUyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxODozNlrOGkro_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1MDo1MlrOGkw7JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjkyNQ==", "bodyText": "change JNDIName to txforward.RemoteSync", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441116925", "createdAt": "2020-06-16T20:18:36Z", "author": {"login": "ajsomogyi"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package example;\r\n+\r\n+import java.rmi.Remote;\r\n+import java.rmi.RemoteException;\r\n+\r\n+public interface RemoteSync extends Remote {\r\n+  public static final String JNDINAME = \"propagate.RemoteSync\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMzQ5Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r441203493", "createdAt": "2020-06-16T23:50:52Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package example;\r\n+\r\n+import java.rmi.Remote;\r\n+import java.rmi.RemoteException;\r\n+\r\n+public interface RemoteSync extends Remote {\r\n+  public static final String JNDINAME = \"propagate.RemoteSync\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNjkyNQ=="}, "originalCommit": {"oid": "29ecb7a13e1a5fb2f15e5b98d7416f13cc5cf381"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYwNzM1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjoxNFrOGnwKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0ODo0M1rOGnx9PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Now that we got the namespaces for both the domains,w e need to update the model properties\n          \n          \n            \n                // Now that we got the namespaces for both the domains, we need to update the model properties", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444336652", "createdAt": "2020-06-23T16:02:14Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,402 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+//import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NjE0MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444366140", "createdAt": "2020-06-23T16:48:43Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,402 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+//import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjY1Mg=="}, "originalCommit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYwOTI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowMjozOVrOGnwLNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0ODozMlrOGnx8ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n          \n          \n            \n                // file with the namespaces. For cross domain transaction to work, we need to have the externalDNSName", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444336948", "createdAt": "2020-06-23T16:02:39Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,402 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+//import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NjAxOQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444366019", "createdAt": "2020-06-23T16:48:32Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,402 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+//import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNjk0OA=="}, "originalCommit": {"oid": "e930ba304a55cefb3dc2304f3acf2d8686044c47"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODYzNjA1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjowODo0OVrOGnwcAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0ODoyM1rOGnx8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MTI1MA==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444341250", "createdAt": "2020-06-23T16:08:49Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n+    // set in the config file. Cannot set this after the domain is up since a server restart is\n+    // required for this to take effect. So, copying the property file to RESULT_ROOT and updating the\n+    // property file\n+    updatePropertyFile();\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domain1Namespace, domain2Namespace);\n+\n+  }\n+\n+  private static void updatePropertyFile() {\n+    //create a temporary directory to copy and update the properties file\n+    Path target = Paths.get(PROPS_TEMP_DIR);\n+    Path source1 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN1_PROPS);\n+    Path source2 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN2_PROPS);\n+    logger.info(\"Copy the properties file to the above area so that we can add namespace property\");\n+    assertDoesNotThrow(() -> {\n+      Files.createDirectories(target);\n+      Files.copy(source1, target.resolve(source1.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+      Files.copy(source2, target.resolve(source2.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+    });\n+\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+    });\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+    });\n+\n+  }\n+\n+  private static void addNamespaceToPropertyFile(String propFileName, String domainNamespace) throws IOException {\n+    FileInputStream in = new FileInputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    Properties props = new Properties();\n+    props.load(in);\n+    in.close();\n+\n+    FileOutputStream out = new FileOutputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    props.setProperty(\"NAMESPACE\", domainNamespace);\n+    props.store(out, null);\n+    out.close();\n+  }\n+\n+  /*\n+   * This test verifies cross domain transaction is successful. domain in image using wdt is used\n+   * to create 2 domains in different namespaces. An app is deployed to both the domains and the servlet\n+   * is invoked which starts a transaction that spans both domains.\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCrossDomainTransaction() {\n+\n+    //build application archive\n+\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"txforward\"), null, null,\n+        \"build\", domain1Namespace);\n+    logger.info(\"distDir is {0}\", distDir.toString());\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"txforward.ear\").toFile().exists(),\n+        \"Application archive is not available\");\n+    String appSource = distDir.toString() + \"/txforward.ear\";\n+    logger.info(\"Application is in {0}\", appSource);\n+\n+    // create admin credential secret for domain1\n+    logger.info(\"Create admin credential secret for domain1\");\n+    String domain1AdminSecretName = domainUid1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain1AdminSecretName, domain1Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain1AdminSecretName, domainUid1));\n+\n+    // create admin credential secret for domain2\n+    logger.info(\"Create admin credential secret for domain2\");\n+    String domain2AdminSecretName = domainUid2 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain2AdminSecretName, domain2Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain2AdminSecretName, domainUid2));\n+\n+    //createImageVerify expects the location of the ear file\n+    //String appSource = PV_ROOT + \"/applications/\" + WDT_APP_NAME + \"/\" + WDT_APP_NAME + \".ear\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTkyNw==", "bodyText": "removed the 2 lines", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365927", "createdAt": "2020-06-23T16:48:23Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.assertions.TestAssertions;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createImageAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Verify cross domain transaction is successful\")\n+@IntegrationTest\n+public class ItCrossDomainTransaction implements LoggedTest {\n+\n+  private static final String WDT_MODEL_FILE_DOMAIN1 = \"model-crossdomaintransaction-domain1.yaml\";\n+  private static final String WDT_MODEL_FILE_DOMAIN2 = \"model-crossdomaintransaction-domain2.yaml\";\n+\n+  private static final String WDT_MODEL_DOMAIN1_PROPS = \"model-crossdomaintransaction-domain1.properties\";\n+  private static final String WDT_MODEL_DOMAIN2_PROPS = \"model-crossdomaintransaction-domain2.properties\";\n+  private static final String WDT_IMAGE_NAME1 = \"domain1-cdxaction-wdt-image\";\n+  private static final String WDT_IMAGE_NAME2 = \"domain2-cdxaction-wdt-image\";\n+  private static final String WDT_APP_NAME = \"txforward\";\n+  private static final String PROPS_TEMP_DIR = RESULTS_ROOT + \"/crossdomaintransactiontemp\";\n+\n+  private static HelmParams opHelmParams = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+  private String domainUid1 = \"domain1\";\n+  private String domainUid2 = \"domain2\";\n+  private static Map<String, Object> secretNameMap;\n+  private final String domain1AdminServerPodName = domainUid1 + \"-admin-server\";\n+  private final String domain1ManagedServerPrefix = domainUid1 + \"-managed-server\";\n+  private final String domain2ManagedServerPrefix = domainUid2 + \"-managed-server\";\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *     JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // Now that we got the namespaces for both the domains,w e need to update the model properties\n+    // file with the namespaces. for cross domain transaction to work, we need to have the externalDNSName\n+    // set in the config file. Cannot set this after the domain is up since a server restart is\n+    // required for this to take effect. So, copying the property file to RESULT_ROOT and updating the\n+    // property file\n+    updatePropertyFile();\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domain1Namespace, domain2Namespace);\n+\n+  }\n+\n+  private static void updatePropertyFile() {\n+    //create a temporary directory to copy and update the properties file\n+    Path target = Paths.get(PROPS_TEMP_DIR);\n+    Path source1 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN1_PROPS);\n+    Path source2 = Paths.get(MODEL_DIR, WDT_MODEL_DOMAIN2_PROPS);\n+    logger.info(\"Copy the properties file to the above area so that we can add namespace property\");\n+    assertDoesNotThrow(() -> {\n+      Files.createDirectories(target);\n+      Files.copy(source1, target.resolve(source1.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+      Files.copy(source2, target.resolve(source2.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n+    });\n+\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN1_PROPS, domain1Namespace);\n+    });\n+    assertDoesNotThrow(() -> {\n+      addNamespaceToPropertyFile(WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+      String.format(\"Failed to update %s with namespace %s\",\n+            WDT_MODEL_DOMAIN2_PROPS, domain2Namespace);\n+    });\n+\n+  }\n+\n+  private static void addNamespaceToPropertyFile(String propFileName, String domainNamespace) throws IOException {\n+    FileInputStream in = new FileInputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    Properties props = new Properties();\n+    props.load(in);\n+    in.close();\n+\n+    FileOutputStream out = new FileOutputStream(PROPS_TEMP_DIR + \"/\" + propFileName);\n+    props.setProperty(\"NAMESPACE\", domainNamespace);\n+    props.store(out, null);\n+    out.close();\n+  }\n+\n+  /*\n+   * This test verifies cross domain transaction is successful. domain in image using wdt is used\n+   * to create 2 domains in different namespaces. An app is deployed to both the domains and the servlet\n+   * is invoked which starts a transaction that spans both domains.\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testCrossDomainTransaction() {\n+\n+    //build application archive\n+\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"txforward\"), null, null,\n+        \"build\", domain1Namespace);\n+    logger.info(\"distDir is {0}\", distDir.toString());\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"txforward.ear\").toFile().exists(),\n+        \"Application archive is not available\");\n+    String appSource = distDir.toString() + \"/txforward.ear\";\n+    logger.info(\"Application is in {0}\", appSource);\n+\n+    // create admin credential secret for domain1\n+    logger.info(\"Create admin credential secret for domain1\");\n+    String domain1AdminSecretName = domainUid1 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain1AdminSecretName, domain1Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain1AdminSecretName, domainUid1));\n+\n+    // create admin credential secret for domain2\n+    logger.info(\"Create admin credential secret for domain2\");\n+    String domain2AdminSecretName = domainUid2 + \"-weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        domain2AdminSecretName, domain2Namespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret %s failed for %s\", domain2AdminSecretName, domainUid2));\n+\n+    //createImageVerify expects the location of the ear file\n+    //String appSource = PV_ROOT + \"/applications/\" + WDT_APP_NAME + \"/\" + WDT_APP_NAME + \".ear\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MTI1MA=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY0OTQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/application.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMjowN1rOGnwkfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0ODowNFrOGnx7nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzQyMw==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444343423", "createdAt": "2020-06-23T16:12:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/application.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTcyNA==", "bodyText": "added copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365724", "createdAt": "2020-06-23T16:48:04Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/application.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzQyMw=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY1MDA1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/weblogic-application.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMjoxNlrOGnwk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0Nzo1OFrOGnx7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzUyOA==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444343528", "createdAt": "2020-06-23T16:12:16Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/weblogic-application.xml", "diffHunk": "@@ -0,0 +1,7 @@\n+<?xml version = '1.0' ?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTY3NA==", "bodyText": "added copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365674", "createdAt": "2020-06-23T16:47:58Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/WebContent/META-INF/weblogic-application.xml", "diffHunk": "@@ -0,0 +1,7 @@\n+<?xml version = '1.0' ?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzUyOA=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY1MDUyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/src/example/TxForward.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMjoyNFrOGnwlMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0Nzo0M1rOGnx63A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzYwMA==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444343600", "createdAt": "2020-06-23T16:12:24Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/src/example/TxForward.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTUzMg==", "bodyText": "added copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365532", "createdAt": "2020-06-23T16:47:43Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/TxForward/src/example/TxForward.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package example;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzYwMA=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY2NzYzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/LifecycleListenerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNjo0NFrOGnwwHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0NzozMFrOGnx6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjM5OA==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346398", "createdAt": "2020-06-23T16:16:44Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/LifecycleListenerImpl.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTQyMg==", "bodyText": "added copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365422", "createdAt": "2020-06-23T16:47:30Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/LifecycleListenerImpl.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package example;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjM5OA=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY2OTAwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNzowNlrOGnww9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0NzoyMFrOGnx6BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjYxNQ==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346615", "createdAt": "2020-06-23T16:17:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package example;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTMxNw==", "bodyText": "added copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365317", "createdAt": "2020-06-23T16:47:20Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSync.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package example;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjYxNQ=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY2OTI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSyncImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNzoxM1rOGnwxMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0NzoxMFrOGnx5tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjY3NQ==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346675", "createdAt": "2020-06-23T16:17:13Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSyncImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package example;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTIzOQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365239", "createdAt": "2020-06-23T16:47:10Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/RemoteSyncImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package example;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjY3NQ=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY3MTAzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxNzozN1rOGnwyNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjo0NzowMlrOGnx5ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjkzMw==", "bodyText": "missing copyright", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444346933", "createdAt": "2020-06-23T16:17:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/Utils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NTE1Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1738#discussion_r444365156", "createdAt": "2020-06-23T16:47:02Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/resources/apps/txforward/remotesync/src/example/Utils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package example;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NjkzMw=="}, "originalCommit": {"oid": "719778266308e622a54a4de72b658317be13816a"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4348, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}