{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDAzODIx", "number": 1514, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMDo0OFrODspG8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0ODowMFrODszoww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM3NDU2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMDo0OFrOF9mq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0OTowN1rOF93fIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTA0Ng==", "bodyText": "let's use log not sop", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400141046", "createdAt": "2020-03-30T12:10:48Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjU0NQ==", "bodyText": "Changed to use logger.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400416545", "createdAt": "2020-03-30T18:49:07Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTA0Ng=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM3NjI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMToxNlrOF9mr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0OTozNFrOF93gGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA==", "bodyText": "probably a good idea to return the exception", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400141308", "createdAt": "2020-03-30T12:11:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxOTIyMg==", "bodyText": "@markxnelson Should we catch Throwable throughout ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400319222", "createdAt": "2020-03-30T16:16:17Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzQwOA==", "bodyText": "I prefer to catch the most specific object and handle it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400323408", "createdAt": "2020-03-30T16:22:21Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDA5Ng==", "bodyText": "I realize that's SOP for system programming in Java to narrowly only check for the checked exceptions.  But I have two counter thoughts to this.  One, we're talking about testing here - so 'happy path' programming is far more acceptable.   Two, if there's an insistence not to catch Runtime/Throwable throughout, then there will be\ncases where an exception will float out of a library all the way up to the highest level.  But I thought the goal you set out was to prevent this from happening.  For example, there's a (sad IMO) school of thought these days that even normal paths can normally throw runtimes - even some JDBC drivers do that unfortunately - and we've no clue in a callout to external library what the hell it's going to throw...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400330096", "createdAt": "2020-03-30T16:32:01Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMTM4Mw==", "bodyText": "Even in system programming catch Throwable tends to be useful.  For calls to the 'outside' we've found we had to do that in WL in many places.  Calling customer code.  Calling shaky external libraries.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400331383", "createdAt": "2020-03-30T16:33:58Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4ODg2Ng==", "bodyText": "Hi Mark, can you clarify here?  I assume you want to just declare the exception in the throws clause and have it propagate up?   Just a little confusion on my part relative to the discussion about handling the types of exceptions.  Thanks for clarifying.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400388866", "createdAt": "2020-03-30T18:03:04Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5MTE2NA==", "bodyText": "yeah, i am thinking about the test in the calling method where we say something like\nassert.DoesNotThrow(whatever(), ApiException.class, e,\n  String.format(\"could not do whatever, got exception %s\", e))\n\nso we have the exception and we can print out a meaningful error message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400391164", "createdAt": "2020-03-30T18:06:51Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjc5NQ==", "bodyText": "Added throws clause to method signature.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400416795", "createdAt": "2020-03-30T18:49:34Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM4NDQyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMzozMFrOF9mw8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MDowOFrOF93hhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjU3Ng==", "bodyText": "nit pick - put each param on a new line - maybe put a comment after them to say what they are, since the six nulls seem a bit magical :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400142576", "createdAt": "2020-03-30T12:13:30Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -54,4 +111,83 @@ public static String createUniqueNamespace() {\n         }\n     }\n \n+    public static List<String> listNamespaces() {\n+        ArrayList<String> nameSpaces = new ArrayList<>();\n+        try {\n+            V1NamespaceList namespaceList = coreV1Api.listNamespace(pretty, allowWatchBookmarks, null, null, null, null, resourceVersion, timeoutSeconds, false);\n+\n+            for (V1Namespace namespace : namespaceList.getItems()) {\n+                nameSpaces.add(namespace.getMetadata().getName());\n+            }\n+        } catch (ApiException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return nameSpaces;\n+    }\n+\n+    public static boolean deleteNamespace(String name) {\n+        V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+        try {\n+            V1Status status = coreV1Api.deleteNamespace(name, pretty, null, timeoutSeconds, false, \"Foreground\", deleteOptions);\n+            return true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    // --------------------------- Custom Resource Domain -----------------------------------\n+\n+    public static boolean createDomain(String domainUID, String namespace, String domainYAML) {\n+        final String localVarPath =\n+                DOMAIN_PATH.replaceAll(\"\\\\{namespace\\\\}\", apiClient.escapeString(namespace));\n+\n+        Object json = null;\n+        try {\n+            json = convertYamlToJson(domainYAML);\n+            Object response = customObjectsApi.createClusterCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, localVarPath, json, null);\n+            return true;\n+        } catch (ApiException | IOException e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    private static Object convertYamlToJson(String yamlFile) throws IOException {\n+        ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+        Object yamlObj = yamlReader.readValue(new File(yamlFile), Object.class);\n+        System.out.println(\"Kubernetes.convertYamlToJson yaml: \" + yamlObj);\n+\n+        ObjectMapper jsonWriter = new ObjectMapper();\n+        String writeValueAsString = jsonWriter.writeValueAsString(yamlObj);\n+        System.out.println(\"Kubernetes.convertYamlToJson writeValueAsString: \" + writeValueAsString);\n+        JsonNode root = new ObjectMapper().readTree(writeValueAsString);\n+        return root;\n+    }\n+\n+    public static List<String> listDomains(String namespace) {\n+        ArrayList<String> domains = new ArrayList<>();\n+        try {\n+            Map response = (Map) customObjectsApi.listNamespacedCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, namespace, DOMAIN_PLURAL, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjYxOQ==", "bodyText": "Yeah, it's too bad they don't have a builder for requests (I'll validate that this is still correct).", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400236619", "createdAt": "2020-03-30T14:28:54Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -54,4 +111,83 @@ public static String createUniqueNamespace() {\n         }\n     }\n \n+    public static List<String> listNamespaces() {\n+        ArrayList<String> nameSpaces = new ArrayList<>();\n+        try {\n+            V1NamespaceList namespaceList = coreV1Api.listNamespace(pretty, allowWatchBookmarks, null, null, null, null, resourceVersion, timeoutSeconds, false);\n+\n+            for (V1Namespace namespace : namespaceList.getItems()) {\n+                nameSpaces.add(namespace.getMetadata().getName());\n+            }\n+        } catch (ApiException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return nameSpaces;\n+    }\n+\n+    public static boolean deleteNamespace(String name) {\n+        V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+        try {\n+            V1Status status = coreV1Api.deleteNamespace(name, pretty, null, timeoutSeconds, false, \"Foreground\", deleteOptions);\n+            return true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    // --------------------------- Custom Resource Domain -----------------------------------\n+\n+    public static boolean createDomain(String domainUID, String namespace, String domainYAML) {\n+        final String localVarPath =\n+                DOMAIN_PATH.replaceAll(\"\\\\{namespace\\\\}\", apiClient.escapeString(namespace));\n+\n+        Object json = null;\n+        try {\n+            json = convertYamlToJson(domainYAML);\n+            Object response = customObjectsApi.createClusterCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, localVarPath, json, null);\n+            return true;\n+        } catch (ApiException | IOException e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    private static Object convertYamlToJson(String yamlFile) throws IOException {\n+        ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+        Object yamlObj = yamlReader.readValue(new File(yamlFile), Object.class);\n+        System.out.println(\"Kubernetes.convertYamlToJson yaml: \" + yamlObj);\n+\n+        ObjectMapper jsonWriter = new ObjectMapper();\n+        String writeValueAsString = jsonWriter.writeValueAsString(yamlObj);\n+        System.out.println(\"Kubernetes.convertYamlToJson writeValueAsString: \" + writeValueAsString);\n+        JsonNode root = new ObjectMapper().readTree(writeValueAsString);\n+        return root;\n+    }\n+\n+    public static List<String> listDomains(String namespace) {\n+        ArrayList<String> domains = new ArrayList<>();\n+        try {\n+            Map response = (Map) customObjectsApi.listNamespacedCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, namespace, DOMAIN_PLURAL, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjU3Ng=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzE1Nw==", "bodyText": "split params to individual lines and added comments to explain parameter meaning.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400417157", "createdAt": "2020-03-30T18:50:08Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -54,4 +111,83 @@ public static String createUniqueNamespace() {\n         }\n     }\n \n+    public static List<String> listNamespaces() {\n+        ArrayList<String> nameSpaces = new ArrayList<>();\n+        try {\n+            V1NamespaceList namespaceList = coreV1Api.listNamespace(pretty, allowWatchBookmarks, null, null, null, null, resourceVersion, timeoutSeconds, false);\n+\n+            for (V1Namespace namespace : namespaceList.getItems()) {\n+                nameSpaces.add(namespace.getMetadata().getName());\n+            }\n+        } catch (ApiException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return nameSpaces;\n+    }\n+\n+    public static boolean deleteNamespace(String name) {\n+        V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+        try {\n+            V1Status status = coreV1Api.deleteNamespace(name, pretty, null, timeoutSeconds, false, \"Foreground\", deleteOptions);\n+            return true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    // --------------------------- Custom Resource Domain -----------------------------------\n+\n+    public static boolean createDomain(String domainUID, String namespace, String domainYAML) {\n+        final String localVarPath =\n+                DOMAIN_PATH.replaceAll(\"\\\\{namespace\\\\}\", apiClient.escapeString(namespace));\n+\n+        Object json = null;\n+        try {\n+            json = convertYamlToJson(domainYAML);\n+            Object response = customObjectsApi.createClusterCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, localVarPath, json, null);\n+            return true;\n+        } catch (ApiException | IOException e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    private static Object convertYamlToJson(String yamlFile) throws IOException {\n+        ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+        Object yamlObj = yamlReader.readValue(new File(yamlFile), Object.class);\n+        System.out.println(\"Kubernetes.convertYamlToJson yaml: \" + yamlObj);\n+\n+        ObjectMapper jsonWriter = new ObjectMapper();\n+        String writeValueAsString = jsonWriter.writeValueAsString(yamlObj);\n+        System.out.println(\"Kubernetes.convertYamlToJson writeValueAsString: \" + writeValueAsString);\n+        JsonNode root = new ObjectMapper().readTree(writeValueAsString);\n+        return root;\n+    }\n+\n+    public static List<String> listDomains(String namespace) {\n+        ArrayList<String> domains = new ArrayList<>();\n+        try {\n+            Map response = (Map) customObjectsApi.listNamespacedCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, namespace, DOMAIN_PLURAL, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjU3Ng=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg4NzQzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDoyNVrOF9rnRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MDozN1rOF93inQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjAyMA==", "bodyText": "Why did this get changed? The (c) is part of the check-style.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400222020", "createdAt": "2020-03-30T14:10:25Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java", "diffHunk": "@@ -1,10 +1,12 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzOTIyNg==", "bodyText": "Ah, Thanks.  this is a copy over issue.  I created a different branch for the PR and pulled over my modified file that has an older copyright. Thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400239226", "createdAt": "2020-03-30T14:32:12Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java", "diffHunk": "@@ -1,10 +1,12 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjAyMA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzQzNw==", "bodyText": "Corrected copyright.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400417437", "createdAt": "2020-03-30T18:50:37Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java", "diffHunk": "@@ -1,10 +1,12 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjAyMA=="}, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg4ODY1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDozOFrOF9roBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDozOFrOF9roBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjIxMg==", "bodyText": "same issue, (c)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400222212", "createdAt": "2020-03-30T14:10:38Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1,10 +1,29 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA5ODE0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NzozOVrOF93bgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0NzozOVrOF93bgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTYxNw==", "bodyText": "For the moment, updated the test to surround with try-catch until we learn how to handle exceptions with JUnit 5 assertions, as noted from Mark.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400415617", "createdAt": "2020-03-30T18:47:39Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -30,8 +32,19 @@ public void testCreatingDomain() {\n         String domainYAML= \"something\";\n \n         // get a new unique namespace\n-        String namespace = createUniqueNamespace();\n-        logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+        String namespace = null;\n+        try {\n+            namespace = createUniqueNamespace();\n+            logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+        } catch (ApiException e) {\n+            // TODO: test in the calling method where we say something like\n+            //\n+            //  assert.DoesNotThrow(whatever(), ApiException.class, e,\n+            //    String.format(\"could not do whatever, got exception %s\", e))\n+            //\n+            //  so we have the exception and we can print out a meaningful error message\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114ad731cdf52aa31231b83b9474b06e680848fd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA5OTU1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0ODowMFrOF93cUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo0ODowMFrOF93cUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTgyNg==", "bodyText": "Same as above comment.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400415826", "createdAt": "2020-03-30T18:48:00Z", "author": {"login": "lennyphan"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -53,6 +66,16 @@ public void testCreatingDomain() {\n \n         // wait for the managed servers to exist\n \n+        // Delete namespace\n+        try {\n+            deleteNamespace(namespace);\n+            logger.info(\"Deleted namespace: \" + namespace);\n+        } catch (Exception e) {\n+            // TODO: Fix as there is a known bug that delete can return either the object\n+            //  just deleted or a status.  We can workaround by either retrying or using\n+            //  the general GenericKubernetesApi client class and doing our own type checks\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114ad731cdf52aa31231b83b9474b06e680848fd"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4680, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}