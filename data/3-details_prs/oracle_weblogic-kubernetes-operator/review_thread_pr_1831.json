{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODE0MDAy", "number": 1831, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjoxNFrOERjs9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToyODoxM1rOETDzOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQ2MTk3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjoxNFrOG2VrBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NToyN1rOG3vCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTM2Ng==", "bodyText": "Add more information about the usecase\n(a) we are verifying host routing usecase\n(b) A single Traefik Ingress controller routing web requests to multiple domains by providing host information in Http Header.\n(c) quick info about the expected return string from the webapp.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459631366", "createdAt": "2020-07-23T18:02:14Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTQ3NQ==", "bodyText": "Added more details to test descriptions.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461095475", "createdAt": "2020-07-27T18:45:27Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTM2Ng=="}, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQ2OTgzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowNDozOFrOG2VwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NTo0NFrOG3vCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMjY1OA==", "bodyText": "Modify test name to be specific testTraefikHostRoutingAcrossDomains()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459632658", "createdAt": "2020-07-23T18:04:38Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTYyMQ==", "bodyText": "test method names are changed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461095621", "createdAt": "2020-07-27T18:45:44Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMjY1OA=="}, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODUwMDA1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMzowOVrOG2WC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NjozOFrOG3vErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzQ5Ng==", "bodyText": "Does the clusterView Servlet assures that the response is coming form domain1/domain2. Does it display the unique managed server name from each domain ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459637496", "createdAt": "2020-07-23T18:13:09Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjExMA==", "bodyText": "Yes, the domain names are bound in JNDI trees of the managed servers and later verified while accessing a particular managed server response.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096110", "createdAt": "2020-07-27T18:46:38Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzQ5Ng=="}, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODUyMzA0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxOToyNlrOG2WQ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzowMFrOG3vFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTA1OQ==", "bodyText": "We need to add test\n(a) to access console thru LoadBalancer\n(b) access the app thru TLS enabled EndPoints.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459641059", "createdAt": "2020-07-23T18:19:26Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjU2NA==", "bodyText": "Why do you want to access the console through loadbalancer?\nWhat is the usecase?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459666564", "createdAt": "2020-07-23T19:05:36Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTA1OQ=="}, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjMyNA==", "bodyText": "added testcases for accessing the admin server console.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096324", "createdAt": "2020-07-27T18:47:00Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTA1OQ=="}, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg2NjU1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMjo1MFrOG2ZnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzowN1rOG3vFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NTk1OQ==", "bodyText": "Assigns unique namespaces for operator, Traefik and domains", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459695959", "createdAt": "2020-07-23T20:02:50Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjM4MQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096381", "createdAt": "2020-07-27T18:47:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NTk1OQ=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg4MTE1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowNzowOVrOG2ZwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzoyOVrOG3vGdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5ODIxNQ==", "bodyText": "Can you let Kubernetes pick up the nodeport for Traefik then get the assigned nodeport through getServiceNodePort() method? In parallel run, the predefined nodeport may got port conflicts.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459698215", "createdAt": "2020-07-23T20:07:09Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ3Nw==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096477", "createdAt": "2020-07-27T18:47:18Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5ODIxNQ=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjU2Ng==", "bodyText": "Good point, Thanks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096566", "createdAt": "2020-07-27T18:47:29Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5ODIxNQ=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkwMjU5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDoxN1rOG2Z9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzozNlrOG3vGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTY2Mg==", "bodyText": "change this to: domainUid + \".\" + domainNamespace + \".cluster-1.test\", K8S_NODEPORT_HOST, nodeportshttp);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459701662", "createdAt": "2020-07-23T20:14:17Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjYxOA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096618", "createdAt": "2020-07-27T18:47:36Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTY2Mg=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTI4MjI1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMjoyMVrOG2dkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Nzo0M1rOG3vG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MDc4MA==", "bodyText": "You can change this to: domainUid + \".\" + domainNamespace + \".cluster-1.test\", K8S_NODEPORT_HOST, nodeportshttp);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459760780", "createdAt": "2020-07-23T22:22:21Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    List<String> managedServers = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServers.add(managedServerNameBase + i);\n+    }\n+    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n+        .as(\"Verify applications from cluster can be acessed through the traefik loadbalancer.\")\n+        .withFailMessage(\"application not accessible through traefik loadbalancer.\")\n+        .isTrue();\n+\n+    boolean hostRouting = false;\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?domainTest=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjcwMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096701", "createdAt": "2020-07-27T18:47:43Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    List<String> managedServers = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServers.add(managedServerNameBase + i);\n+    }\n+    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n+        .as(\"Verify applications from cluster can be acessed through the traefik loadbalancer.\")\n+        .withFailMessage(\"application not accessible through traefik loadbalancer.\")\n+        .isTrue();\n+\n+    boolean hostRouting = false;\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?domainTest=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MDc4MA=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTI4NDM1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMzoxNVrOG2dlyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Nzo1MlrOG3vHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MTA5OQ==", "bodyText": "You can change this to: domainUid + \".\" + domainNamespace + \".cluster-1.test\", K8S_NODEPORT_HOST, nodeportshttp);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459761099", "createdAt": "2020-07-23T22:23:15Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    List<String> managedServers = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServers.add(managedServerNameBase + i);\n+    }\n+    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n+        .as(\"Verify applications from cluster can be acessed through the traefik loadbalancer.\")\n+        .withFailMessage(\"application not accessible through traefik loadbalancer.\")\n+        .isTrue();\n+\n+    boolean hostRouting = false;\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?domainTest=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+\n+    // call the webapp and verify the bound domain name to determine\n+    // the requests are sent to the correct cluster members.\n+    for (int i = 0; i < 10; i++) {\n+      ExecResult result;\n+      try {\n+        result = ExecCommand.exec(curlCmd, true);\n+        String response = result.stdout().trim();\n+        if (response.contains(domainUid)) {\n+          hostRouting = true;\n+        }\n+        logger.info(\"Response for iteration {0}: exitValue {1}, stdout {2}, stderr {3}\",\n+            i, result.exitValue(), response, result.stderr());\n+      } catch (IOException | InterruptedException ex) {\n+        //\n+      }\n+    }\n+    assertTrue(hostRouting, \"Host routing is not working\");\n+\n+  }\n+\n+  private void bindDomainName(String domainUid) {\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?bindDomain=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5Njc2Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096766", "createdAt": "2020-07-27T18:47:52Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    List<String> managedServers = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServers.add(managedServerNameBase + i);\n+    }\n+    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n+        .as(\"Verify applications from cluster can be acessed through the traefik loadbalancer.\")\n+        .withFailMessage(\"application not accessible through traefik loadbalancer.\")\n+        .isTrue();\n+\n+    boolean hostRouting = false;\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?domainTest=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+\n+    // call the webapp and verify the bound domain name to determine\n+    // the requests are sent to the correct cluster members.\n+    for (int i = 0; i < 10; i++) {\n+      ExecResult result;\n+      try {\n+        result = ExecCommand.exec(curlCmd, true);\n+        String response = result.stdout().trim();\n+        if (response.contains(domainUid)) {\n+          hostRouting = true;\n+        }\n+        logger.info(\"Response for iteration {0}: exitValue {1}, stdout {2}, stderr {3}\",\n+            i, result.exitValue(), response, result.stderr());\n+      } catch (IOException | InterruptedException ex) {\n+        //\n+      }\n+    }\n+    assertTrue(hostRouting, \"Host routing is not working\");\n+\n+  }\n+\n+  private void bindDomainName(String domainUid) {\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?bindDomain=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MTA5OQ=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMwNDQwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozMToyNlrOG2dxsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Nzo1OFrOG3vHdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDE0Ng==", "bodyText": "use 'Traefik' since it is a product name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459764146", "createdAt": "2020-07-23T22:31:26Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -338,6 +340,18 @@ public static boolean installVoyager(VoyagerParams params) {\n     return Voyager.install(params);\n   }\n \n+  /**\n+   * Install traefik ingress controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjgyMw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096823", "createdAt": "2020-07-27T18:47:58Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -338,6 +340,18 @@ public static boolean installVoyager(VoyagerParams params) {\n     return Voyager.install(params);\n   }\n \n+  /**\n+   * Install traefik ingress controller.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDE0Ng=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMxNDc2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozNTo0MlrOG2d34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0ODoxNFrOG3vH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTczMA==", "bodyText": "use 'Traefik' here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459765730", "createdAt": "2020-07-23T22:35:42Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -338,6 +339,29 @@ public static boolean isNginxPodReady(String namespace) throws ApiException {\n     return isPodReady(namespace, labelSelector, \"nginx-ingress-controller\");\n   }\n \n+  /**\n+   * Checks if traefik pod is running in the specified namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5Njk1MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461096950", "createdAt": "2020-07-27T18:48:14Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -338,6 +339,29 @@ public static boolean isNginxPodReady(String namespace) throws ApiException {\n     return isPodReady(namespace, labelSelector, \"nginx-ingress-controller\");\n   }\n \n+  /**\n+   * Checks if traefik pod is running in the specified namespace.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTczMA=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMxNjEwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozNjoxN1rOG2d4qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0ODoyMlrOG3vITA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTkzMA==", "bodyText": "change all 'traefik' in the comments to 'Traefik'", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459765930", "createdAt": "2020-07-23T22:36:17Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -338,6 +339,29 @@ public static boolean isNginxPodReady(String namespace) throws ApiException {\n     return isPodReady(namespace, labelSelector, \"nginx-ingress-controller\");\n   }\n \n+  /**\n+   * Checks if traefik pod is running in the specified namespace.\n+   *\n+   * @param namespace in which to check for the running traefik pod\n+   * @return true if the pod is running, otherwise false\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean isTraefikPodRunning(String namespace) throws ApiException {\n+    return isPodRunning(namespace, null, TRAEFIK_RELEASE_NAME + \"-\" + namespace.substring(3));\n+  }\n+\n+  /**\n+   * Check whether the traefik pod is ready in the specified namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzAzNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461097036", "createdAt": "2020-07-27T18:48:22Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -338,6 +339,29 @@ public static boolean isNginxPodReady(String namespace) throws ApiException {\n     return isPodReady(namespace, labelSelector, \"nginx-ingress-controller\");\n   }\n \n+  /**\n+   * Checks if traefik pod is running in the specified namespace.\n+   *\n+   * @param namespace in which to check for the running traefik pod\n+   * @return true if the pod is running, otherwise false\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean isTraefikPodRunning(String namespace) throws ApiException {\n+    return isPodRunning(namespace, null, TRAEFIK_RELEASE_NAME + \"-\" + namespace.substring(3));\n+  }\n+\n+  /**\n+   * Check whether the traefik pod is ready in the specified namespace.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTkzMA=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMyMjUzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozOToyMFrOG2d8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0ODozMFrOG3vIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NjkyNQ==", "bodyText": "Traefik chart values to override", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459766925", "createdAt": "2020-07-23T22:39:20Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -448,6 +455,63 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install traefik and wait for up to five minutes for the traefik pod to be ready.\n+   *\n+   * @param traefikNamespace the namespace in which the traefik ingress controller is installed\n+   * @param nodeportshttp the web nodeport of traefik\n+   * @param nodeportshttps the websecure nodeport of traefik\n+   * @return the traefik Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyTraefik(String traefikNamespace,\n+      int nodeportshttp,\n+      int nodeportshttps) {\n+    LoggingFacade logger = getLogger();\n+    // Helm install parameters\n+    HelmParams traefikHelmParams = new HelmParams()\n+        .releaseName(TRAEFIK_RELEASE_NAME + \"-\" + traefikNamespace.substring(3))\n+        .namespace(traefikNamespace)\n+        .repoUrl(TRAEFIK_REPO_URL)\n+        .repoName(TRAEFIK_REPO_NAME)\n+        .chartName(TRAEFIK_CHART_NAME);\n+\n+    // NGINX chart values to override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzA5OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461097098", "createdAt": "2020-07-27T18:48:30Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -448,6 +455,63 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install traefik and wait for up to five minutes for the traefik pod to be ready.\n+   *\n+   * @param traefikNamespace the namespace in which the traefik ingress controller is installed\n+   * @param nodeportshttp the web nodeport of traefik\n+   * @param nodeportshttps the websecure nodeport of traefik\n+   * @return the traefik Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyTraefik(String traefikNamespace,\n+      int nodeportshttp,\n+      int nodeportshttps) {\n+    LoggingFacade logger = getLogger();\n+    // Helm install parameters\n+    HelmParams traefikHelmParams = new HelmParams()\n+        .releaseName(TRAEFIK_RELEASE_NAME + \"-\" + traefikNamespace.substring(3))\n+        .namespace(traefikNamespace)\n+        .repoUrl(TRAEFIK_REPO_URL)\n+        .repoName(TRAEFIK_REPO_NAME)\n+        .chartName(TRAEFIK_CHART_NAME);\n+\n+    // NGINX chart values to override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NjkyNQ=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMyNzIxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0MToxOVrOG2d_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0OTozMFrOG3vKvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NzY0MA==", "bodyText": "what if only nodeportshttp or nodeportshttps is not 0?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459767640", "createdAt": "2020-07-23T22:41:19Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -448,6 +455,63 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install traefik and wait for up to five minutes for the traefik pod to be ready.\n+   *\n+   * @param traefikNamespace the namespace in which the traefik ingress controller is installed\n+   * @param nodeportshttp the web nodeport of traefik\n+   * @param nodeportshttps the websecure nodeport of traefik\n+   * @return the traefik Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyTraefik(String traefikNamespace,\n+      int nodeportshttp,\n+      int nodeportshttps) {\n+    LoggingFacade logger = getLogger();\n+    // Helm install parameters\n+    HelmParams traefikHelmParams = new HelmParams()\n+        .releaseName(TRAEFIK_RELEASE_NAME + \"-\" + traefikNamespace.substring(3))\n+        .namespace(traefikNamespace)\n+        .repoUrl(TRAEFIK_REPO_URL)\n+        .repoName(TRAEFIK_REPO_NAME)\n+        .chartName(TRAEFIK_CHART_NAME);\n+\n+    // NGINX chart values to override\n+    TraefikParams traefikParams = new TraefikParams()\n+        .helmParams(traefikHelmParams);\n+\n+    if (nodeportshttp != 0 && nodeportshttps != 0) {\n+      traefikParams\n+          .nodePortsHttp(nodeportshttp)\n+          .nodePortsHttps(nodeportshttps);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzY2Mw==", "bodyText": "I copied this code from the one I guess you created. Your question makes sense, removed the check and assign value only from supplied method params.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461097663", "createdAt": "2020-07-27T18:49:30Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -448,6 +455,63 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install traefik and wait for up to five minutes for the traefik pod to be ready.\n+   *\n+   * @param traefikNamespace the namespace in which the traefik ingress controller is installed\n+   * @param nodeportshttp the web nodeport of traefik\n+   * @param nodeportshttps the websecure nodeport of traefik\n+   * @return the traefik Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyTraefik(String traefikNamespace,\n+      int nodeportshttp,\n+      int nodeportshttps) {\n+    LoggingFacade logger = getLogger();\n+    // Helm install parameters\n+    HelmParams traefikHelmParams = new HelmParams()\n+        .releaseName(TRAEFIK_RELEASE_NAME + \"-\" + traefikNamespace.substring(3))\n+        .namespace(traefikNamespace)\n+        .repoUrl(TRAEFIK_REPO_URL)\n+        .repoName(TRAEFIK_REPO_NAME)\n+        .chartName(TRAEFIK_CHART_NAME);\n+\n+    // NGINX chart values to override\n+    TraefikParams traefikParams = new TraefikParams()\n+        .helmParams(traefikHelmParams);\n+\n+    if (nodeportshttp != 0 && nodeportshttps != 0) {\n+      traefikParams\n+          .nodePortsHttp(nodeportshttp)\n+          .nodePortsHttps(nodeportshttps);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NzY0MA=="}, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDIwNjY3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToyODoxM1rOG4lTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToyODoxM1rOG4lTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NDYyNg==", "bodyText": "remove commented out line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461984626", "createdAt": "2020-07-29T01:28:13Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,509 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.ActionConstants;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithTLSCertKey;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by Traefik loadbalancer.\n+ */\n+@DisplayName(\"Test Traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static final String WL_SECRET_NAME = \"weblogic-credentials\";\n+  private static Path tlsCertFile;\n+  private static Path tlsKeyFile;\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  private static final String[] domains = {\"domain1\", \"domain2\"};\n+  private static final int replicaCount = 2;\n+  private static final String managedServerNameBase = \"managed-server\";\n+\n+  /**\n+   * 1. Assigns unique namespaces for operator, Traefik loadbalancer and domains.\n+   * 2. Installs operator.\n+   * 3. Creates 2 MII domains.\n+   * 4. Creates Ingress resource for each domain with Host based routing rules.\n+   * 5. Deploys clusterview sample application in cluster target in each domain.\n+   * 6. Creates a TLS Kubernetes for secure access to the clusters.\n+   * 7. Create Ingress rules for host based routing to various targets.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for Traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // install and verify Traefik\n+    logger.info(\"Installing Traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, 0, 0);\n+    //traefikHelmParams = installAndVerifyTraefik(domainNamespace, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e95fadc162d2d4d9cc68725b40ce276336422d"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4138, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}