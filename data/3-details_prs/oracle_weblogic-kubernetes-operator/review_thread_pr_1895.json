{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzU3NDE4", "number": 1895, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzowMTo0N1rOEfG_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMjoyMzowMlrOEgN20Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDU1OTc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzowMTo0N1rOHLLHgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo1MToxM1rOHLNMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODUyOQ==", "bodyText": "typo : scenarios", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481478529", "createdAt": "2020-09-01T23:01:47Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjUzNw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481512537", "createdAt": "2020-09-02T00:51:13Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODUyOQ=="}, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDYwMDU2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzoyMDo0MlrOHLLfSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo1MTowNlrOHLNMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NDYxNg==", "bodyText": "managed server", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481484616", "createdAt": "2020-09-01T23:20:42Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjUxNA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481512514", "createdAt": "2020-09-02T00:51:06Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NDYxNg=="}, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDYwMTA1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzoyMDo1NFrOHLLfkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo1MDo1OVrOHLNMKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NDY4OQ==", "bodyText": "managed server", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481484689", "createdAt": "2020-09-01T23:20:54Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managedserver service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjQ4OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481512489", "createdAt": "2020-09-02T00:50:59Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managedserver service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NDY4OQ=="}, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDYwNjg4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzoyMzozOFrOHLLjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozMjoxMFrOHMJEZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NTU5NQ==", "bodyText": "server pod is not effected", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481485595", "createdAt": "2020-09-01T23:23:38Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managedserver service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other clusyter are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjQzOA==", "bodyText": "Here we make sure all the managed server(s) pod from other cluster are not affected.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r481512438", "createdAt": "2020-09-02T00:50:48Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managedserver service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other clusyter are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NTU5NQ=="}, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5MDQ2Ng==", "bodyText": "You have to save the pod creation timestamps before you attempt to restart servers and then after intended server is restarted verify other pods creation timestamps is not changed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482190466", "createdAt": "2020-09-02T16:08:12Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managedserver service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other clusyter are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NTU5NQ=="}, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5MzU0MA==", "bodyText": "Modified the logic to compare the pod creation timestamp", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482493540", "createdAt": "2020-09-02T21:32:10Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenerios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managedserver pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managedserver service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other clusyter are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NTU5NQ=="}, "originalCommit": {"oid": "52a9abdc2398be66cbba6ee0f415c136b8720c01"}, "originalPosition": 438}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg3MzU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1MToyNFrOHL14YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoxMjoxNFrOHL5MQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3OTE2OQ==", "bodyText": "Is that the expected behavior? As long as there are servers running equal to replicaCount it shouldn't bring up ms1 right when ms2 is already running?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482179169", "createdAt": "2020-09-02T15:51:24Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzMzQwOA==", "bodyText": "This is the behavior I see in current code. Let us confirm with Ryan/Monica.\nAs Per Monica (09/02) this many be a BUG. Need to open a Operator BUG", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482233408", "createdAt": "2020-09-02T17:12:14Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3OTE2OQ=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg3NTkwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1MTo1MVrOHL15vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoxMjoyM1rOHL5NAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3OTUxOQ==", "bodyText": "same as above here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482179519", "createdAt": "2020-09-02T15:51:51Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzMzYwMw==", "bodyText": "This is the behavior I see in current code. Let us confirm with Ryan/Monica.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482233603", "createdAt": "2020-09-02T17:12:23Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3OTUxOQ=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg5MzkzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NTozOVrOHL2EyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoxNzoyNVrOHL5cOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjM0NQ==", "bodyText": "checkServiceExists has to be called before checkPodReady", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482182345", "createdAt": "2020-09-02T15:55:39Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzNzQ5OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482237499", "createdAt": "2020-09-02T17:17:25Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjM0NQ=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg5NjA5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NjoxMFrOHL2GDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoxNzozMVrOHL5cag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjY3MQ==", "bodyText": "same thing here.\ncheckServiceExists has to be called before checkPodReady", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482182671", "createdAt": "2020-09-02T15:56:10Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzNzU0Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482237546", "createdAt": "2020-09-02T17:17:31Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjY3MQ=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkyMDM2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMTo1OFrOHL2VaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDozNjo0N1rOHMFLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NjYwMA==", "bodyText": "Instead of just verifying the ms pods are in ready state right after admin server pod is deleted save the pods start times before patching for managed servers and verify the managed servers are not restarted with creation time stamps after admin server pod is restarted", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482186600", "createdAt": "2020-09-02T16:01:58Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyOTc3MA==", "bodyText": "Added the logic for managed server pod creation timestamp comparison.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482429770", "createdAt": "2020-09-02T20:36:47Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NjYwMA=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkyMTQ2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMjoxN1rOHL2WMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozNToyMFrOHMJPWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NjgwMw==", "bodyText": "checkServiceExists has to be called before checkPodReady", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482186803", "createdAt": "2020-09-02T16:02:17Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NjM0Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482496347", "createdAt": "2020-09-02T21:35:20Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NjgwMw=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkyNTUwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMzoyM1rOHL2Y5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0NjowNlrOHMNSBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NzQ5Mw==", "bodyText": "throughout the file checkServiceExists has to be called before checkPodReady", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482187493", "createdAt": "2020-09-02T16:03:23Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2MjU2Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482562566", "createdAt": "2020-09-02T22:46:06Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NzQ5Mw=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDk1NzkzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxMTozM1rOHL2tXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoxOToxNVrOHL5gfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5MjczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * cluster with SeeverStartuoPolicy IF_NEEDED. \n          \n          \n            \n               * cluster with serverStartPolicy IF_NEEDED.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482192732", "createdAt": "2020-09-02T16:11:33Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 565}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzODU4OA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482238588", "createdAt": "2020-09-02T17:19:15Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5MjczMg=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 565}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDk3MDMzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxNDozNVrOHL209A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo1MDoyN1rOHMNmVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NDY3Ng==", "bodyText": "why would the managed server be stopped? When the replicaCount is 1 how does changing the serverStartPolicy from ALWAYS to IF_NEEDED shutsdown the server? There is only one running server in this cluster right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482194676", "createdAt": "2020-09-02T16:14:35Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. \n+   * Initially, server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource defintion with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource defintion \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 573}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2Nzc2NA==", "bodyText": "ALWAYS for managed server just start the managed server irrespective of replica count. You may go beyond the replica count. IF_NEEDED means it starts if we need to fulfill the replica count.\nRef : https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482567764", "createdAt": "2020-09-02T22:50:27Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. \n+   * Initially, server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource defintion with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource defintion \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NDY3Ng=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 573}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTAzNDA3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjozMDo0MFrOHL3dcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0NjoyMVrOHMNTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNTA0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * cluster with SeeverStartuoPolicy IF_NEEDED. \n          \n          \n            \n               * cluster with serverStartPolicy IF_NEEDED.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482205042", "createdAt": "2020-09-02T16:30:40Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. \n+   * Initially, server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource defintion with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource defintion \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop config cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testStartAlwaysConfigClusterManaged() {\n+    String serverPodName = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/managedServers/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ALWAYS\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Config cluster managed server patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(managedShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(managedShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for config cluster managed server !!!\");\n+    checkPodReady(serverPodName, domainUid, domainNamespace);\n+    checkServiceExists(serverPodName, domainNamespace);\n+    logger.info(\"Configured cluster managed Server is RUNNING\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/managedServers/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Managed restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(managedRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(managedRestart) failed\");\n+    logger.info(\"!!! Domain resource patched for config cluster managed server shutdown !!!\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 626}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxOTMwMQ==", "bodyText": "Also fix the typo throughout the file", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482219301", "createdAt": "2020-09-02T16:54:00Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. \n+   * Initially, server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource defintion with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource defintion \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop config cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testStartAlwaysConfigClusterManaged() {\n+    String serverPodName = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/managedServers/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ALWAYS\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Config cluster managed server patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(managedShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(managedShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for config cluster managed server !!!\");\n+    checkPodReady(serverPodName, domainUid, domainNamespace);\n+    checkServiceExists(serverPodName, domainNamespace);\n+    logger.info(\"Configured cluster managed Server is RUNNING\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/managedServers/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Managed restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(managedRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(managedRestart) failed\");\n+    logger.info(\"!!! Domain resource patched for config cluster managed server shutdown !!!\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNTA0Mg=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 626}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2Mjg2Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482562867", "createdAt": "2020-09-02T22:46:21Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    // Check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource defintion with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    // check managed server pods are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers are still RUNNING after AdminServer is stopped\");\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that Configured Cluster Managed server is Ready \n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Configured cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(configclusterShutdown) failed\");\n+   \n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    logger.info(\"Managed servers on cluster-1 are RUNNING after cluster-2 is stopped\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(clusterRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(clusterRestart) failed\");\n+    logger.info(\"Wait for Cluster server pod {0} to be ready in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"Check configured cluster managed service {0} is created in namespace {1}\",\n+        configServerPodName, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY servers in second Cluster are stopped. \n+   * Restart the dynamic cluster by patching the resource defintion with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in second cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    // Make sure that dynamic cluster managed server is Ready \n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster Managed Server is RUNNING\");\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterShutdown) failed\");\n+   \n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check managed server pods are not affected\");\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(configServerPodName, domainNamespace);\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/clusters/0/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Dynamic cluster restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(dynamicClusterRestart) failed\");\n+    logger.info(\"Wait for dynamic Cluster server pod {0} to be ready in namespace {1}\", domainNamespace);\n+    checkPodReady(dynamicServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(dynamicServerPodName, domainNamespace);\n+\n+    logger.info(\"Dynamic Cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource defintion with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(domainShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(domainShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (NEVER) !!!\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ADMIN_ONLY\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(adminonly) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminonly) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminonly) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (ADMIN_ONLY) !!!\");\n+\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Domain restart(if_needed) patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(if_needed) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(if_needed) failed\");\n+    logger.info(\"!!! Domain Resource patched for shutdown (IF_NEEDED) !!!\");\n+    \n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    checkPodReady(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. \n+   * Initially, server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource defintion with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource defintion \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop config cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testStartAlwaysConfigClusterManaged() {\n+    String serverPodName = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/managedServers/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"ALWAYS\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Config cluster managed server patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(managedShutdown) failed\");\n+    assertTrue(crdPatched, \"patchDomainCustomResource(managedShutdown) failed\");\n+    logger.info(\"!!! Domain Resource patched for config cluster managed server !!!\");\n+    checkPodReady(serverPodName, domainUid, domainNamespace);\n+    checkServiceExists(serverPodName, domainNamespace);\n+    logger.info(\"Configured cluster managed Server is RUNNING\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/managedServers/1/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"Managed restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(managedRestart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(managedRestart) failed\");\n+    logger.info(\"!!! Domain resource patched for config cluster managed server shutdown !!!\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with SeeverStartuoPolicy IF_NEEDED. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNTA0Mg=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 626}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTEyNjQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1NToxNFrOHL4Y-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo0NToxMFrOHL6asQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMDI4MA==", "bodyText": "Document how many clusters are created and how many servers in it initially.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482220280", "createdAt": "2020-09-02T16:55:14Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1MzQ4OQ==", "bodyText": "Create a WebLogic domain with one dynamic cluster (with two managed servers)\none configured cluster (with two managed servers) and a standalone manged\nserver. The replica count is set to 1 and serverStartPolicy is set to\nIF_NEEDED at managed server level.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r482253489", "createdAt": "2020-09-02T17:45:10Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to mantain the \n+ *  replica count whle the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to mantain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource defintion.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMDI4MA=="}, "originalCommit": {"oid": "1d1f80f45201b3334085f291e46ee8bd1c1d9600"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ4Njc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1ODoxMVrOHMtSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowOTo1NlrOHMyA6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4Njg1MQ==", "bodyText": "testConfigClusterStartServerUsingAlwaysAtServerLevel or testConfigClusterStartServerUsingAlways - same pattern as other test methods above cluster type followed by use case", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483086851", "createdAt": "2020-09-03T15:58:11Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDM5Mw==", "bodyText": "modified the method name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483164393", "createdAt": "2020-09-03T18:09:56Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4Njg1MQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ5NjQ1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjowMDoxNFrOHMtXrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowOTo1M1rOHMyAtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODMwMw==", "bodyText": "testDynamicClusterStartServerUsingAlwaysAtServerLevel or testDynamicClusterStartServerUsingAlways", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483088303", "createdAt": "2020-09-03T16:00:14Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDM0Mw==", "bodyText": "modified the method name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483164343", "createdAt": "2020-09-03T18:09:53Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODMwMw=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDYwMDUzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyNTowMFrOHMuYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowOTo0OFrOHMyAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNDk2MA==", "bodyText": "As we discussed, this can be removed as NEVER is covered in other use case", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483104960", "createdAt": "2020-09-03T16:25:00Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDI4OQ==", "bodyText": "removed the methods", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483164289", "createdAt": "2020-09-03T18:09:48Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNDk2MA=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDYwMDk1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyNTowOFrOHMuZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowOTozMVrOHMx_9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNTAzNQ==", "bodyText": "As we discussed, this can be removed as NEVER is covered in other use case", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483105035", "createdAt": "2020-09-03T16:25:08Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDE0OA==", "bodyText": "removed the methods", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483164148", "createdAt": "2020-09-03T18:09:31Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNTAzNQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDYwNzg1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyNjo0NVrOHMudIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODowOToxM1rOHMx_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNjA4Mw==", "bodyText": "testConfigClusterReplicaCountIsMaintained", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483106083", "createdAt": "2020-09-03T16:26:45Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2Mzk5NA==", "bodyText": "modified the method name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483163994", "createdAt": "2020-09-03T18:09:13Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNjA4Mw=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDYxMTQ4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjoyNzozN1rOHMufWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyMDoyMVrOHM338w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNjY1MQ==", "bodyText": "testDynamicClusterReplicaCountIsMaintained", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483106651", "createdAt": "2020-09-03T16:27:37Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MDQwMw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483260403", "createdAt": "2020-09-03T21:20:21Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwNjY1MQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY1MjYyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjozODowM1rOHMu4nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyMTo0NFrOHM36OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExMzExNg==", "bodyText": "serverStartPolicy at different levels in a MII domain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483113116", "createdAt": "2020-09-03T16:38:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MDk4NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483260985", "createdAt": "2020-09-03T21:21:44Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExMzExNg=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY1ODk2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjozOTozOFrOHMu8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyMjozNlrOHM37og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNDExMQ==", "bodyText": "by changing", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483114111", "createdAt": "2020-09-03T16:39:38Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MTM0Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483261346", "createdAt": "2020-09-03T21:22:36Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNDExMQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY1OTUxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjozOTo0OFrOHMu85A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyMjo0OVrOHM37_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNDIxMg==", "bodyText": "by changing", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483114212", "createdAt": "2020-09-03T16:39:48Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MTQzOQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483261439", "createdAt": "2020-09-03T21:22:49Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNDIxMg=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY2NzczOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjo0MTo0OVrOHMvB9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyNDowOVrOHM3-DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNTUwOQ==", "bodyText": "there are unused variables, check the code in IDE for unused variables and cleanup", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483115509", "createdAt": "2020-09-03T16:41:49Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MTk2NA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483261964", "createdAt": "2020-09-03T21:24:09Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNTUwOQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY4MTM1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjo0NToyMlrOHMvKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyNDo1OFrOHM3_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNzY3Mg==", "bodyText": "you can use checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483117672", "createdAt": "2020-09-03T16:45:22Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MjMzOQ==", "bodyText": "replaced the occurrence of checkServiceExists/checkPodReady with checkPodReadyAndServiceExists", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483262339", "createdAt": "2020-09-03T21:24:58Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNzY3Mg=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY4MjQ2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjo0NTo0MFrOHMvLDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyNToxM1rOHM3_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNzgzNg==", "bodyText": "checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483117836", "createdAt": "2020-09-03T16:45:40Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MjQ1NA==", "bodyText": "replaced the occurrence of checkServiceExists/checkPodReady with checkPodReadyAndServiceExists", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483262454", "createdAt": "2020-09-03T21:25:13Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExNzgzNg=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY4NjI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjo0Njo0N1rOHMvNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyODo0MVrOHM4F_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExODQzNw==", "bodyText": "assert missing here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483118437", "createdAt": "2020-09-03T16:46:47Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2Mzk5Ng==", "bodyText": "added Boolean assertion", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483263996", "createdAt": "2020-09-03T21:28:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExODQzNw=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDczMjY0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjo1OToyN1rOHMvqeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMjoxOVrOHNVteA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNTg4MQ==", "bodyText": "use isPodRestarted in TestAssertions", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483125881", "createdAt": "2020-09-03T16:59:27Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2ODI0OQ==", "bodyText": "utils/CommonTestUtils has a method void checkPodRestarted(), there is no direct method for CommonTestUtils .isPodRestarted(). I used the comparison for copule of times, not much code duplication.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483268249", "createdAt": "2020-09-03T21:39:01Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNTg4MQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0NzQ4Mw==", "bodyText": "Have you checked isPodRestarted in TestAssertions class?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483347483", "createdAt": "2020-09-04T02:14:44Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNTg4MQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0OTI0MA==", "bodyText": "Modified tests to use TestAssertions.isPodRestarted() method to make sure pod is not re started.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483749240", "createdAt": "2020-09-04T17:02:19Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNTg4MQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc0MTY3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMjowMFrOHMvwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDo0NjoxNFrOHM26jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNzM0Nw==", "bodyText": "lot of duplicated code, create a private method which takes path, value, other needed vars and patches the domain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483127347", "createdAt": "2020-09-03T17:02:00Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0NDY4Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483244686", "createdAt": "2020-09-03T20:46:14Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNzM0Nw=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc0MjkxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMjoyMVrOHMvxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToyMDowM1rOHM33YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNzU1Ng==", "bodyText": "duplicated code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483127556", "createdAt": "2020-09-03T17:02:21Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchStr = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MDI1Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483260256", "createdAt": "2020-09-03T21:20:03Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchStr = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNzU1Ng=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc0NjQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMzoyMlrOHMvzRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToxOTo0MVrOHM32vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODEzNQ==", "bodyText": "use checkPodReadyAndServiceExists through out the class where ever it can be used", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483128135", "createdAt": "2020-09-03T17:03:22Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2MDA5NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483260095", "createdAt": "2020-09-03T21:19:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODEzNQ=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc0ODg2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowNDowNVrOHMv0wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMDo1NTozNFrOHM3L_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODUxMw==", "bodyText": "duplicated code, create a method and use every where", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483128513", "createdAt": "2020-09-03T17:04:05Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that only server(s) in the configured cluster are stopped. \n+   * Make sure that server(s) in the dynamic cluster are in RUNNING state. \n+   * Restart the cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in the configured cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI0OTE1MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483249150", "createdAt": "2020-09-03T20:55:34Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,1258 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysConfigClusterManaged\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStartAlwaysDynamicClusterManaged\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testStopNeverConfigClusterManaged\n+ *  Stop a server in configured cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopNeverDynamicClusterManaged\n+ *  Stop a server in dynamic cluster by changing serverStartPolicy\n+ *   IF_NEEDED->ALWAYS->NEVER\n+ *\n+ * <p>testStopConfigClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStopDynamicClusterReplicaManaged\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different scope in a mii domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static HelmParams opHelmParams = null;\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    // Check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+        checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    isServerConfigured = \n+       checkManagedServerConfiguration(\"standalone-managed\");\n+    logger.info(\"Found non-cluster managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"NEVER\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer shutdown patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(adminShutdown) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(adminShutdown) failed\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/adminServer/serverStartPolicy\\\",\")\n+        .append(\" \\\"value\\\":  \\\"IF_NEEDED\\\"\")\n+        .append(\" }]\");\n+    logger.info(\"AdminServer restart patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    crdPatched = false;\n+    crdPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(restart) failed\");\n+\n+    assertTrue(crdPatched, \"patchDomainCustomResource(restart) failed\");\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that only server(s) in the configured cluster are stopped. \n+   * Make sure that server(s) in the dynamic cluster are in RUNNING state. \n+   * Restart the cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in the configured cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+\n+    checkServiceExists(configServerPodName, domainNamespace);\n+    checkPodReady(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    StringBuffer patchStr = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODUxMw=="}, "originalCommit": {"oid": "53a306fc3301eb747bab77eec72a56233e223afb"}, "originalPosition": 367}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjE2OTEzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMjoyMzowMlrOHM9Tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzowMjo0N1rOHNVuGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0OTQ0Mw==", "bodyText": "this is not needed, test infra deletes the domain custom resource as part of cleanup logic", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483349443", "createdAt": "2020-09-04T02:23:02Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,876 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testConfigClusterStartServerUsingAlways\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterStartServerUsingAlways\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testConfigClusterReplicaCountIsMaintained\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testDynamicClusterReplicaCountIsMaintained\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different levels in a MII domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service/pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, \n+          domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, \n+                domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+         checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    boolean isStandaloneServerConfigured = \n+         checkManagedServerConfiguration(\"standalone-managed\");\n+    assertTrue(isStandaloneServerConfigured, \n+        \"Could not find standalone managed server from configured cluster\");\n+    logger.info(\"Found standalone managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown administration server\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Administration server shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start administration server\");\n+\n+    logger.info(\"Check admin service/pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that only server(s) in the configured cluster are stopped. \n+   * Make sure that server(s) in the dynamic cluster are in RUNNING state. \n+   * Restart the cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in the configured cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/1/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown configured cluster\");\n+\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check dynamic managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()),\n+        \"Dynamic managed server pod creation time must be same\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/1/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start configured cluster\");\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that only servers in the dynamic cluster are stopped. \n+   * Make sure that only servers in the configured cluster are in the \n+   * RUNNING state. \n+   * Restart the dynamic cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in the dynamic cluster are in RUNNING state again. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    checkPodReadyAndServiceExists(dynamicServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/0/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to stop dynamic cluster\");\n+\n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check configured managed server pods are not affected\");\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()),\n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/0/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start dynamic cluster\");\n+\n+    checkPodReadyAndServiceExists(dynamicServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource definition with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource definition with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource definition with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to stop entire WebLogic domain\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"ADMIN_ONLY\");\n+    logger.info(\"Domain is patched to start only administrative server\");\n+\n+    checkPodReadyAndServiceExists(adminServerPodName, \n+             domainUid, domainNamespace);\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start all servers in the domain\");\n+\n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, \n+           domainUid, domainNamespace);\n+    }\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+          domainUid, domainNamespace);\n+    checkPodReadyAndServiceExists(standaloneServerPodName, \n+          domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with serverStartPolicy IF_NEEDED. \n+   * Initially, the server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource definition with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource definition \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop config cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testConfigClusterStartServerUsingAlways() {\n+    String serverPodName = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/1/serverStartPolicy\", \"ALWAYS\");\n+    logger.info(\"Domain is patched to start configured cluster managed server\");\n+\n+    checkPodReadyAndServiceExists(serverPodName, \n+          domainUid, domainNamespace);\n+    logger.info(\"Configured cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/1/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to stop configured cluster managed server\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add managed server configuration (managed-server2) to CRD in a dynamic \n+   * cluster with ServerStartPolicy IF_NEEDED. \n+   * So initially, the server will not come up since replica count is set to 1.\n+   * Update the ServerStartPolicy for managed-server2 to ALWAYS\n+   * by patching the resource definition with \n+   *  spec/managedServers/2/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server managed-server2 is up and running\n+   * Stop the managed server by patching the resource definition \n+   *   with spec/managedServers/2/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop dynamic cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testDynamicClusterStartServerUsingAlways() {\n+    String serverPodName = domainUid + \"-managed-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    \n+    patchServerStartPolicy(\"/spec/managedServers/2/serverStartPolicy\", \n+                           \"ALWAYS\");\n+    logger.info(\"Domain resource patched to start the managed server\");\n+    checkPodReadyAndServiceExists(serverPodName, \n+          domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\"/spec/managedServers/2/serverStartPolicy\", \n+                           \"IF_NEEDED\");\n+    logger.info(\"Domain resource patched to shutdown the managed server\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add the first managed server (config-cluster-server1) in a configured \n+   * cluster with serverStartPolicy IF_NEEDED. \n+   * Initially, the server will come up since the replica count is set to 1.\n+   * (a) Update the serverStartPolicy for config-cluster-server1 to NEVER\n+   *      by patching the resource definition with \n+   *        spec/managedServers/3/serverStartPolicy set to NEVER.\n+   *     Make sure that managed server config-cluster-server1 is shutdown.\n+   *     Make sure that managed server config-cluster-server2 comes up\n+   *       to maintain the replica count of 1.\n+   * (b) Update the serverStartPolicy for config-cluster-server1 to IF_NEEDED\n+   *       by patching the resource definition with \n+   *       spec/managedServers/3/serverStartPolicy set to IF_NEEDED.\n+   *     Make sure that managed server config-cluster-server2 is shutdown.\n+   *     Make sure that managed server config-cluster-server1 comes up\n+   *       to maintain the replica count of 1.\n+   */\n+  @Test\n+  @DisplayName(\"Stop a running config cluster managed server and verify the replica count is maintained\")\n+  public void testConfigClusterReplicaCountIsMaintained() {\n+    String serverPodName = domainUid + \"-config-cluster-server1\";\n+    String serverPodName2 = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server(2) is not running \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Patch(Shutdown) the config-cluster-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/3/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown cluster managed server\");\n+\n+    // Make sure config-cluster-server1 is deleted \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    // Make sure  config-cluster-server2 is started \n+    checkPodReadyAndServiceExists(serverPodName2, domainUid, domainNamespace);\n+    logger.info(\"Configured cluster managed Server(2) is RUNNING\");\n+\n+    // Patch(start) the config-cluster-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/3/serverStartPolicy\", \"IF_NEEDED\");\n+\n+    // Make sure config-cluster-server2 is deleted \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Make sure config-cluster-server1 is re-started\n+    checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add the first managed server (managed-server1) in a dynamic \n+   * cluster with serverStartPolicy IF_NEEDED. \n+   * Initially, the server will come up since the replica count is set to 1.\n+   * (a) Update the serverStartPolicy for managed-server1 to NEVER\n+   *      by patching the resource definition with \n+   *        spec/managedServers/4/serverStartPolicy set to NEVER.\n+   *     Make sure that managed server managed-server1 is shutdown.\n+   *     Make sure that managed server managed-server2 comes up\n+   *       to maintain the replica count of 1.\n+   * (b) Update the serverStartPolicy for managed-server1 to IF_NEEDED\n+   *       by patching the resource definition with \n+   *       spec/managedServers/4/serverStartPolicy set to IF_NEEDED.\n+   *     Make sure that managed server managed-server2 is shutdown.\n+   *     Make sure that managed server managed-server1 comes up\n+   *       to maintain the replica count of 1.\n+   */\n+  @Test\n+  @DisplayName(\"Stop a running dynamic cluster managed server and verify the replica count \")\n+  public void testDynamicClusterReplicaCountIsMaintained() {\n+    String serverPodName = domainUid + \"-managed-server1\";\n+    String serverPodName2 = domainUid + \"-managed-server2\";\n+\n+    // Make sure that managed server(2) is not running \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Patch(Shutdown) the managed-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/4/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown dynamic managed server\");\n+\n+    // Make sure maanged-server1 is deleted \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    checkPodReadyAndServiceExists(serverPodName2, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster managed server(2) is RUNNING\");\n+\n+    // Patch(start) the managed-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/4/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start dynamic managed server\");\n+\n+    // Make sure managed-server2 is deleted \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Make sure managed-server1 is re-started\n+    checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Start independent managed server by setting serverStartPolicy to IF_NEEDED.\n+   * Stop an independent managed server by patching the resource definition with \n+   *  spec/managedServers/0/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY the specified managed server is stopped. \n+   * Restart the independent managed server by patching the resource definition \n+   * with spec/managedServers/0/serverStartPolicy set to ALWAYS.\n+   * Make sure that the specified managed server is in RUNNING state.\n+   */\n+\n+  // The usecase fails NEVER->ALWAYS\n+  // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n+  @Disabled\n+  @Test\n+  @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n+  public void testStandaloneManagedRestartAlways() {\n+\n+    String configServerPodName = domainUid + \"-standalone-managed\";\n+\n+    // Make sure that configured managed server is ready \n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Configured managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown standalone managed server\");\n+\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Configured managed server shutdown success\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"ALWAYS\");\n+    logger.info(\"Domain is patched to start standalone managed server\");\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Configured managed server restart success\");\n+  }\n+\n+  /**\n+   * Start independent managed server by setting serverStartPolicy to IF_NEEDED.\n+   * Stop an independent managed server by patching the resource definition with \n+   *  spec/managedServers/0/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY the specified managed server is stopped. \n+   * Restart the independent managed server by patching the resource definition \n+   * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the specified managed server is in RUNNING state.\n+   */\n+\n+  // The usecase fails NEVER->IF_NEEDED\n+  // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n+  @Disabled\n+  @Test\n+  @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n+  public void testStandaloneManagedRestartIfNeeded() {\n+\n+    String configServerPodName = domainUid + \"-standalone-managed\";\n+\n+    // Make sure that configured managed server is ready \n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Standalone managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown standalone managed server\");\n+\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Standalone managed server shutdown success\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start standalone managed server\");\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Standalone managed server restart success\");\n+  }\n+\n+  // This method is needed in this test class, since the cleanup util\n+  // won't clean up the images.\n+  @AfterAll\n+  void tearDown() {\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "477d31dc279356f5719d8dfacb9e6baffc202146"}, "originalPosition": 708}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0OTQwMw==", "bodyText": "removed tearDown()) method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1895#discussion_r483749403", "createdAt": "2020-09-04T17:02:47Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -0,0 +1,876 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.V1Patch;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.ManagedServer;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * Create a WebLogic domain with one dynamic cluster (with two managed servers)\n+ * one configured cluster (with two managed servers) and a standalone manged \n+ * server. The replica count is set to 1 and serverStartPolicy is set to \n+ * IF_NEEDED at managed server level. \n+ * This test class verifies the following scenarios.\n+ *\n+ * <p>testAdminServerRestart\n+ *  Restart the Administration Server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDomainRestart\n+ *  Restart the entire domain by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ADMIN_ONLY->IF_NEEDED\n+ *\n+ * <p>testConfigClusterRestart\n+ *  Restart all servers in configured cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterRestart\n+ *  Restart all servers in dynamic cluster by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testConfigClusterStartServerUsingAlways\n+ *  Restart a server in configured cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testDynamicClusterStartServerUsingAlways\n+ *  Restart a server in dynamic cluster (beyond replica count) \n+ *   IF_NEEDED->ALWAYS->IF_NEEDED\n+ *\n+ * <p>testConfigClusterReplicaCountIsMaintained\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in config\n+ *  cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testDynamicClusterReplicaCountIsMaintained\n+ *  Change the serverStartPolicy of a running managed server (say ms1) in a \n+ *  dynamic cluster to NEVER. \n+ *  Make sure next managed server (say ms2) is scheduled to run to maintain the \n+ *  replica count while the running managed server ms1 goes down.\n+ *  Change the serverStartPolicy of server ms1 to IF_NEEDED.\n+ *  Make sure server ms2 goes down and server ms1 is re-scheduled to maintain \n+ *  the replica count\n+ *\n+ * <p>testStandaloneManagedRestartIfNeeded\n+ *  Restart standalone server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->IF_NEEDED\n+ *\n+ * <p>testStandaloneManagedRestartAlways\n+ *  Restart standalone server by changing serverStartPolicy \n+ *   IF_NEEDED->NEVER->ALWAYS\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"ServerStartPolicy attribute in different levels in a MII domain\")\n+@IntegrationTest\n+class ItServerStartPolicy {\n+\n+  private static V1ServiceAccount serviceAccount = null;\n+  private String serviceAccountName = null;\n+  private static String opNamespace = null;\n+  private static String operatorImage = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String dockerConfigJson = \"\";\n+\n+  private static int replicaCount = 1;\n+  private static final String domainUid = \"mii-start-policy\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private V1Patch patch = null;\n+\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create a domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n+            \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"wls-ext-configmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.wls.ext.config.yaml\"));\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+\n+    logger.info(\"Check admin service/pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, \n+          domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, \n+                domainUid, domainNamespace);\n+    }\n+\n+    // Check configured cluster configuration is available \n+    boolean isServerConfigured = \n+         checkManagedServerConfiguration(\"config-cluster-server1\");\n+    assertTrue(isServerConfigured, \n+        \"Could not find managed server from configured cluster\");\n+    logger.info(\"Found managed server from configured cluster\");\n+\n+    // Check standalone server configuration is available \n+    boolean isStandaloneServerConfigured = \n+         checkManagedServerConfiguration(\"standalone-managed\");\n+    assertTrue(isStandaloneServerConfigured, \n+        \"Could not find standalone managed server from configured cluster\");\n+    logger.info(\"Found standalone managed server configuration\");\n+  }\n+\n+  /**\n+   * Stop the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to NEVER.\n+   * Make sure that Only the Administration server is stopped. \n+   * Restart the Administration server by patching the resource definition with \n+   *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the Administration server is in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Administration server with serverStartPolicy\")\n+  public void testAdminServerRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown administration server\");\n+   \n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Administration server shutdown success\");\n+\n+    logger.info(\"Check managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()), \n+        \"Dynamic managed server pod creation time must be same\");\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()), \n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchServerStartPolicy(\"/spec/adminServer/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start administration server\");\n+\n+    logger.info(\"Check admin service/pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"AdminServer restart success\");\n+  }\n+\n+  /**\n+   * Stop a configured cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that only server(s) in the configured cluster are stopped. \n+   * Make sure that server(s) in the dynamic cluster are in RUNNING state. \n+   * Restart the cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in the configured cluster are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testConfigClusterRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+\n+    DateTime dynTs = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"(BeforePatch) configured cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/1/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown configured cluster\");\n+\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check dynamic managed server pods are not affected\");\n+    DateTime dynTs2 = getPodCreationTime(domainNamespace, dynamicServerPodName);\n+    assertTrue(\n+        dynTs2.withTimeAtStartOfDay().isEqual(dynTs.withTimeAtStartOfDay()),\n+        \"Dynamic managed server pod creation time must be same\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/1/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start configured cluster\");\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"Configured cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop a dynamic cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to NEVER.\n+   * Make sure that only servers in the dynamic cluster are stopped. \n+   * Make sure that only servers in the configured cluster are in the \n+   * RUNNING state. \n+   * Restart the dynamic cluster by patching the resource definition with \n+   *  spec/clusters/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that servers in the dynamic cluster are in RUNNING state again. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the dynamic cluster with serverStartPolicy\")\n+  public void testDynamicClusterRestart() {\n+\n+    String dynamicServerPodName = domainUid + \"-managed-server1\";\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+\n+    DateTime cfgTs = getPodCreationTime(domainNamespace, configServerPodName);\n+\n+    checkPodReadyAndServiceExists(dynamicServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"(BeforePatch) dynamic cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/0/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to stop dynamic cluster\");\n+\n+    checkPodDeleted(dynamicServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster shutdown success\");\n+\n+    // check managed server from other cluster are not affected\n+    logger.info(\"Check configured managed server pods are not affected\");\n+    DateTime cfgTs2 = getPodCreationTime(domainNamespace, configServerPodName);\n+    assertTrue(\n+        cfgTs2.withTimeAtStartOfDay().isEqual(cfgTs.withTimeAtStartOfDay()),\n+        \"Configured managed server pod creation time must be same\");\n+\n+    patchServerStartPolicy(\"/spec/clusters/0/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start dynamic cluster\");\n+\n+    checkPodReadyAndServiceExists(dynamicServerPodName, \n+              domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster restart success\");\n+  }\n+\n+  /**\n+   * Stop the entire domain by patching the resource definition with \n+   *  spec/serverStartPolicy set to NEVER.\n+   * Make sure that all servers in the domain are stopped. \n+   * Restart the domain by patching the resource definition with \n+   *  spec/serverStartPolicy set to ADMIN_ONLY.\n+   * Make sure that ONLY Admin Server is in RUNNING state. \n+   * Restart the domain by patching the resource definition with \n+   *  spec/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that all servers in the domain are in RUNNING state. \n+   */\n+  @Test\n+  @DisplayName(\"Restart the Domain with serverStartPolicy\")\n+  public void testDomainRestart() {\n+\n+    String configServerPodName = domainUid + \"-config-cluster-server1\";\n+    String standaloneServerPodName = domainUid + \"-standalone-managed\";\n+\n+    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to stop entire WebLogic domain\");\n+   \n+    // make sure all the server pods are removed after patch\n+    checkPodDeleted(adminServerPodName, domainUid, domainNamespace);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+    logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to ADMIN_ONLY\n+    // Here only Admin server pod should come up\n+    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"ADMIN_ONLY\");\n+    logger.info(\"Domain is patched to start only administrative server\");\n+\n+    checkPodReadyAndServiceExists(adminServerPodName, \n+             domainUid, domainNamespace);\n+    // make sure all other managed server pods are not provisioned \n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDeleted(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(standaloneServerPodName, domainUid, domainNamespace);\n+\n+    logger.info(\"!!! Domain restart (ADMIN_ONLY) success !!!\");\n+\n+    // Patch the Domain with serverStartPolicy set to IF_NEEDED\n+    // Here all the Servers should come up\n+    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start all servers in the domain\");\n+\n+    // check dynamic managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, \n+           domainUid, domainNamespace);\n+    }\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+          domainUid, domainNamespace);\n+    checkPodReadyAndServiceExists(standaloneServerPodName, \n+          domainUid, domainNamespace);\n+    logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\");\n+  }\n+\n+  /**\n+   * Add a second managed server (config-cluster-server2) in a configured \n+   * cluster with serverStartPolicy IF_NEEDED. \n+   * Initially, the server will not come up since the replica count is set to 1.\n+   * Update the serverStartPolicy for config-cluster-server2 to ALWAYS\n+   * by patching the resource definition with \n+   *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server config-cluster-server2 is up and running\n+   * Stop the managed server by patching the resource definition \n+   *   with spec/managedServers/1/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop config cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testConfigClusterStartServerUsingAlways() {\n+    String serverPodName = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/1/serverStartPolicy\", \"ALWAYS\");\n+    logger.info(\"Domain is patched to start configured cluster managed server\");\n+\n+    checkPodReadyAndServiceExists(serverPodName, \n+          domainUid, domainNamespace);\n+    logger.info(\"Configured cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/1/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to stop configured cluster managed server\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add managed server configuration (managed-server2) to CRD in a dynamic \n+   * cluster with ServerStartPolicy IF_NEEDED. \n+   * So initially, the server will not come up since replica count is set to 1.\n+   * Update the ServerStartPolicy for managed-server2 to ALWAYS\n+   * by patching the resource definition with \n+   *  spec/managedServers/2/serverStartPolicy set to ALWAYS.\n+   * Make sure that managed server managed-server2 is up and running\n+   * Stop the managed server by patching the resource definition \n+   *   with spec/managedServers/2/serverStartPolicy set to IF_NEEDED.\n+   * Make sure the specified managed server is stopped as per replica count.\n+   */\n+\n+  @Test\n+  @DisplayName(\"Start/stop dynamic cluster managed server by updating serverStartPolicy to ALWAYS/IF_NEEDED\")\n+  public void testDynamicClusterStartServerUsingAlways() {\n+    String serverPodName = domainUid + \"-managed-server2\";\n+\n+    // Make sure that managed server is not running \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    \n+    patchServerStartPolicy(\"/spec/managedServers/2/serverStartPolicy\", \n+                           \"ALWAYS\");\n+    logger.info(\"Domain resource patched to start the managed server\");\n+    checkPodReadyAndServiceExists(serverPodName, \n+          domainUid, domainNamespace);\n+    logger.info(\"Config cluster managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\"/spec/managedServers/2/serverStartPolicy\", \n+                           \"IF_NEEDED\");\n+    logger.info(\"Domain resource patched to shutdown the managed server\");\n+\n+    logger.info(\"Wait for managed server ${0} to be shutdown\", serverPodName);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster managed server shutdown success\");\n+  }\n+\n+  /**\n+   * Add the first managed server (config-cluster-server1) in a configured \n+   * cluster with serverStartPolicy IF_NEEDED. \n+   * Initially, the server will come up since the replica count is set to 1.\n+   * (a) Update the serverStartPolicy for config-cluster-server1 to NEVER\n+   *      by patching the resource definition with \n+   *        spec/managedServers/3/serverStartPolicy set to NEVER.\n+   *     Make sure that managed server config-cluster-server1 is shutdown.\n+   *     Make sure that managed server config-cluster-server2 comes up\n+   *       to maintain the replica count of 1.\n+   * (b) Update the serverStartPolicy for config-cluster-server1 to IF_NEEDED\n+   *       by patching the resource definition with \n+   *       spec/managedServers/3/serverStartPolicy set to IF_NEEDED.\n+   *     Make sure that managed server config-cluster-server2 is shutdown.\n+   *     Make sure that managed server config-cluster-server1 comes up\n+   *       to maintain the replica count of 1.\n+   */\n+  @Test\n+  @DisplayName(\"Stop a running config cluster managed server and verify the replica count is maintained\")\n+  public void testConfigClusterReplicaCountIsMaintained() {\n+    String serverPodName = domainUid + \"-config-cluster-server1\";\n+    String serverPodName2 = domainUid + \"-config-cluster-server2\";\n+\n+    // Make sure that managed server(2) is not running \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Patch(Shutdown) the config-cluster-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/3/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown cluster managed server\");\n+\n+    // Make sure config-cluster-server1 is deleted \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    // Make sure  config-cluster-server2 is started \n+    checkPodReadyAndServiceExists(serverPodName2, domainUid, domainNamespace);\n+    logger.info(\"Configured cluster managed Server(2) is RUNNING\");\n+\n+    // Patch(start) the config-cluster-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/3/serverStartPolicy\", \"IF_NEEDED\");\n+\n+    // Make sure config-cluster-server2 is deleted \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Make sure config-cluster-server1 is re-started\n+    checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add the first managed server (managed-server1) in a dynamic \n+   * cluster with serverStartPolicy IF_NEEDED. \n+   * Initially, the server will come up since the replica count is set to 1.\n+   * (a) Update the serverStartPolicy for managed-server1 to NEVER\n+   *      by patching the resource definition with \n+   *        spec/managedServers/4/serverStartPolicy set to NEVER.\n+   *     Make sure that managed server managed-server1 is shutdown.\n+   *     Make sure that managed server managed-server2 comes up\n+   *       to maintain the replica count of 1.\n+   * (b) Update the serverStartPolicy for managed-server1 to IF_NEEDED\n+   *       by patching the resource definition with \n+   *       spec/managedServers/4/serverStartPolicy set to IF_NEEDED.\n+   *     Make sure that managed server managed-server2 is shutdown.\n+   *     Make sure that managed server managed-server1 comes up\n+   *       to maintain the replica count of 1.\n+   */\n+  @Test\n+  @DisplayName(\"Stop a running dynamic cluster managed server and verify the replica count \")\n+  public void testDynamicClusterReplicaCountIsMaintained() {\n+    String serverPodName = domainUid + \"-managed-server1\";\n+    String serverPodName2 = domainUid + \"-managed-server2\";\n+\n+    // Make sure that managed server(2) is not running \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Patch(Shutdown) the managed-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/4/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown dynamic managed server\");\n+\n+    // Make sure maanged-server1 is deleted \n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n+    checkPodReadyAndServiceExists(serverPodName2, domainUid, domainNamespace);\n+    logger.info(\"Dynamic cluster managed server(2) is RUNNING\");\n+\n+    // Patch(start) the managed-server1 \n+    patchServerStartPolicy(\n+         \"/spec/managedServers/4/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start dynamic managed server\");\n+\n+    // Make sure managed-server2 is deleted \n+    checkPodDeleted(serverPodName2, domainUid, domainNamespace);\n+\n+    // Make sure managed-server1 is re-started\n+    checkPodReadyAndServiceExists(serverPodName, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Start independent managed server by setting serverStartPolicy to IF_NEEDED.\n+   * Stop an independent managed server by patching the resource definition with \n+   *  spec/managedServers/0/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY the specified managed server is stopped. \n+   * Restart the independent managed server by patching the resource definition \n+   * with spec/managedServers/0/serverStartPolicy set to ALWAYS.\n+   * Make sure that the specified managed server is in RUNNING state.\n+   */\n+\n+  // The usecase fails NEVER->ALWAYS\n+  // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n+  @Disabled\n+  @Test\n+  @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n+  public void testStandaloneManagedRestartAlways() {\n+\n+    String configServerPodName = domainUid + \"-standalone-managed\";\n+\n+    // Make sure that configured managed server is ready \n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Configured managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown standalone managed server\");\n+\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Configured managed server shutdown success\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"ALWAYS\");\n+    logger.info(\"Domain is patched to start standalone managed server\");\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Configured managed server restart success\");\n+  }\n+\n+  /**\n+   * Start independent managed server by setting serverStartPolicy to IF_NEEDED.\n+   * Stop an independent managed server by patching the resource definition with \n+   *  spec/managedServers/0/serverStartPolicy set to NEVER.\n+   * Make sure that ONLY the specified managed server is stopped. \n+   * Restart the independent managed server by patching the resource definition \n+   * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n+   * Make sure that the specified managed server is in RUNNING state.\n+   */\n+\n+  // The usecase fails NEVER->IF_NEEDED\n+  // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n+  @Disabled\n+  @Test\n+  @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n+  public void testStandaloneManagedRestartIfNeeded() {\n+\n+    String configServerPodName = domainUid + \"-standalone-managed\";\n+\n+    // Make sure that configured managed server is ready \n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Standalone managed server is RUNNING\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    logger.info(\"Domain is patched to shutdown standalone managed server\");\n+\n+    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Standalone managed server shutdown success\");\n+\n+    patchServerStartPolicy(\n+         \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    logger.info(\"Domain is patched to start standalone managed server\");\n+\n+    checkPodReadyAndServiceExists(configServerPodName, \n+            domainUid, domainNamespace);\n+    logger.info(\"Standalone managed server restart success\");\n+  }\n+\n+  // This method is needed in this test class, since the cleanup util\n+  // won't clean up the images.\n+  @AfterAll\n+  void tearDown() {\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain custom resource in namespace {0}\", domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0OTQ0Mw=="}, "originalCommit": {"oid": "477d31dc279356f5719d8dfacb9e6baffc202146"}, "originalPosition": 708}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3923, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}