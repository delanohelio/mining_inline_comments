{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTAyMjQ1", "number": 1875, "title": "Consolidate multiple Mii test classes to a single ItClass ", "bodyText": "Consolidated ItMiiChangeAdminCredentials, ItMiiConfigMap, ItMiiConfigMapOverride, ItMiiAddCluster into a single class ItMiiUpdateDomainConfig. Removed all Junit4 test classes after asserting the coverage in corresponding Junit5 tests.\nLatest parallel Integration tests results\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1342   (all 82 tests passed )\nRerunning with latest develop branch ( after Lenny resolution to Kubectl issue )\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1352\nMore parallel run after modifying the check System Resources logic\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1514   (all passed)\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1515    (all passed)\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1519/   (all passed)\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1538  ( all passed )", "createdAt": "2020-08-17T15:25:36Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875", "merged": true, "mergeCommit": {"oid": "b8581fa3cea1e6d0c1947b5251501aeb74fbc6cd"}, "closed": true, "closedAt": "2020-08-21T19:49:53Z", "author": {"login": "anpanigr"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-7lnGAH2gAyNDY4OTAyMjQ1OjljNzM0MThhOTI2NmZmM2Y4OGU5YWM4MTY2MzE4YzY0MWE5YTczMGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA82cCAFqTQ3MjEzMjQ0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c73418a9266ff3f88e9ac8166318c641a9a730c", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9c73418a9266ff3f88e9ac8166318c641a9a730c", "committedDate": "2020-08-14T21:34:52Z", "message": "Consolidate Mii Domains and remove junit4 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a364c6bf96310137f1f80ff346762981ebd2bd", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/43a364c6bf96310137f1f80ff346762981ebd2bd", "committedDate": "2020-08-14T21:35:33Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1edafc201f1de18ede778e28982070a99a2818", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8f1edafc201f1de18ede778e28982070a99a2818", "committedDate": "2020-08-16T17:13:40Z", "message": "removed more Junit4 Mii tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f22d110d941ea9533816f54abec814aee70972", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/29f22d110d941ea9533816f54abec814aee70972", "committedDate": "2020-08-17T15:26:45Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTEwNzE3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-469510717", "createdAt": "2020-08-18T14:27:17Z", "commit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNzoxOFrOHCXLzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyOToyM1rOHCaB0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzOTA1NA==", "bodyText": "I am wondering if the initAll method can be modified to use some of the comment test util methods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472239054", "createdAt": "2020-08-18T14:27:18Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -237,10 +275,22 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n             \"weblogicenc\", domainNamespace),\n              String.format(\"createSecret failed for %s\", encryptionSecretName));\n-    // create the domain CR with no configmap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0MDc2MQ==", "bodyText": "Javadoc here needs some cleanup, such as removing the space in the beginning of a line, and adding a period at the end of a sentence.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472240761", "createdAt": "2020-08-18T14:29:32Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDkxMQ==", "bodyText": "What is the replica count in the initial configuration?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472244911", "createdAt": "2020-08-18T14:34:56Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -351,18 +589,16 @@ public void testAddMiiClusteriWithNoReplica() {\n   /**\n    * Create a configmap with a sparse model file to add a dynamic cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NTcxNQ==", "bodyText": "javadoc needs some cleanup.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472245715", "createdAt": "2020-08-18T14:36:01Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Mjg1Ng==", "bodyText": "typo \"repicar\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472272856", "createdAt": "2020-08-18T15:12:09Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.\n+   * Create a configmap to delete JMS/JDBC System Resource.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"JDBCSystemResource configuration not found\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"JMSSystemResource configuration not found\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource2\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule2\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repicar count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NjA4OQ==", "bodyText": "Are we deleting multiple system resources? If so, modify the javadoc to use plural.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472276089", "createdAt": "2020-08-18T15:16:35Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTY0OA==", "bodyText": "Typo \"validitity\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472285648", "createdAt": "2020-08-18T15:29:23Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge \n+   * Patch domain CRD with new webLogicCredentialsSecret.\n+   * Update domainRestartVersion to trigger a rolling restart of server pods.\n+   * make sure all the server pods are re-started in a rolling fashion. \n+   * Check the validitity of new credentials by accessing ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 392}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1285a972188e83c1b3744103aed389a53a35a107", "committedDate": "2020-08-19T15:47:40Z", "message": "Resolve Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzU3NjE2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-470757616", "createdAt": "2020-08-19T19:07:34Z", "commit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowNzozNFrOHDVXGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NToxNlrOHDWjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1Nzc1Mw==", "bodyText": "SystemResource typo, Check the SystemResources in a pre-configured ConfigMap", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473257753", "createdAt": "2020-08-19T19:07:34Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODU0MA==", "bodyText": "SystemResources", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473258540", "createdAt": "2020-08-19T19:09:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODk4NQ==", "bodyText": "managed typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473258985", "createdAt": "2020-08-19T19:09:55Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTA1MQ==", "bodyText": "managed typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259051", "createdAt": "2020-08-19T19:10:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTE0NA==", "bodyText": "activated", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259144", "createdAt": "2020-08-19T19:10:13Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTY5NA==", "bodyText": "administrative", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259694", "createdAt": "2020-08-19T19:11:19Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MTUxMA==", "bodyText": "remove old code and use installAndVerifyOperator utility method in initAll()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473261510", "createdAt": "2020-08-19T19:14:43Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the \n+ *  secret and activating a rolling restart.\n+ */\n+\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test to add a cluster to model in image domain\")\n+@DisplayName(\"Test add SystemResources, Clusters to model in image domain\")\n @IntegrationTest\n-class ItMiiAddCluster {\n+class ItMiiUpdateDomainConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NDUzNQ==", "bodyText": "If you want to refactor the code in the same PR, you can use the below code, change return type to boolean\nreturn new Command()\n          .withParams(new CommandParams()\n              .command(curlString.toString()))\n          .executeAndVerify(\"200\");\n\nFrom the calling code,\nassertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\"), \"JDBCSystemResource is not found\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473274535", "createdAt": "2020-08-19T19:39:58Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -685,4 +1006,50 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }\n \n+  private ExecResult checkSystemResourceConfiguration(String resourcesType, String resourcesName) {\n+\n+    int adminServiceNodePort = getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    ExecResult result = null;\n+    curlString = new StringBuffer(\"status=$(curl --user weblogic:welcome1 \");\n+    curlString.append(\"http://\" + K8S_NODEPORT_HOST + \":\" + adminServiceNodePort)\n+         .append(\"/management/weblogic/latest/domainConfig\")\n+         .append(\"/\")\n+         .append(resourcesType)\n+         .append(\"/\")\n+         .append(resourcesName)\n+         .append(\"/\")\n+         .append(\" --silent --show-error \")\n+         .append(\" -o /dev/null \")\n+         .append(\" -w %{http_code});\")\n+         .append(\"echo ${status}\");\n+    logger.info(\"checkSystemResource: curl command {0}\", new String(curlString));\n+    try {\n+      result = exec(new String(curlString), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 529}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTEwNA==", "bodyText": "you can replace these lines with single line if you refactor the code, scroll down to check checkSystemResourceConfiguration()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275104", "createdAt": "2020-08-19T19:41:05Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTE3MA==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275170", "createdAt": "2020-08-19T19:41:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTU4NA==", "bodyText": "Resources", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275584", "createdAt": "2020-08-19T19:42:06Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NzE5NQ==", "bodyText": "Patch the domain CRD with new credentials secret.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473277195", "createdAt": "2020-08-19T19:45:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge.\n+   * Patch domain CRD with new webLogicCredentialsSecret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 389}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6543606400e588367f5ab30ec61c44009890a0b0", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6543606400e588367f5ab30ec61c44009890a0b0", "committedDate": "2020-08-20T00:49:21Z", "message": "Modify the logic to check SystemResources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzM5NTY3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-471739567", "createdAt": "2020-08-20T15:33:57Z", "commit": {"oid": "6543606400e588367f5ab30ec61c44009890a0b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMzo1N1rOHEHRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMzo1N1rOHEHRgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTUyMw==", "bodyText": "Typo \"repica\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474075523", "createdAt": "2020-08-20T15:33:57Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +336,184 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+        \"TestDataSource\"), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n+        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    ExecResult result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResources are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    assertFalse(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+         \"TestDataSource\"), \"JDBCSystemResource should be deleted\");\n+    assertFalse(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+         \"TestClusterJmsModule\"), \"JMSSystemResources should be deleted\");\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+          \"TestDataSource2\"), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+          \"TestClusterJmsModule2\"), \"JMSSystemResources not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repica count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6543606400e588367f5ab30ec61c44009890a0b0"}, "originalPosition": 311}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e1670d3d3fce79ee8ce6c2614197548cd38aca29", "committedDate": "2020-08-20T15:47:41Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTI4NTc0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-471928574", "createdAt": "2020-08-20T19:36:37Z", "commit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjozN1rOHEQaoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjozN1rOHEQaoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Check the SystemResoureces in a pre-configured in ConfigMap\n          \n          \n            \n             *  Check the System Resources in a pre-configured ConfigMap", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474225312", "createdAt": "2020-08-20T19:36:37Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTI4NzU3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-471928757", "createdAt": "2020-08-20T19:36:57Z", "commit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjo1N1rOHEQb7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjo1N1rOHEQb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTY0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Delete SystemResoureces defined in WebLogic domain \n          \n          \n            \n             *  Delete System Resources defined in WebLogic domain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474225646", "createdAt": "2020-08-20T19:36:57Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResoureces defined in WebLogic domain ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17a72592f1de7239a81da7393745704c0eae0b9", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b17a72592f1de7239a81da7393745704c0eae0b9", "committedDate": "2020-08-20T21:41:52Z", "message": "Resolved few more typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6b0db9282927ccb40bf5dc1aca61d5b3d035f6", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6d6b0db9282927ccb40bf5dc1aca61d5b3d035f6", "committedDate": "2020-08-20T21:42:07Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63a37c28057e51eca685ba33b584519d9be71da6", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63a37c28057e51eca685ba33b584519d9be71da6", "committedDate": "2020-08-20T23:11:51Z", "message": "Updated the initAll() with  installAndVerifyOperator replacing the old code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDYzNzQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-472063747", "createdAt": "2020-08-21T00:10:44Z", "commit": {"oid": "63a37c28057e51eca685ba33b584519d9be71da6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c53c9538a82e716f1a28b59e55b71d0300db5dbd", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c53c9538a82e716f1a28b59e55b71d0300db5dbd", "committedDate": "2020-08-21T00:31:22Z", "message": "Modify the assetion for delete resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTMyNDQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#pullrequestreview-472132445", "createdAt": "2020-08-21T04:11:00Z", "commit": {"oid": "c53c9538a82e716f1a28b59e55b71d0300db5dbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4393, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}