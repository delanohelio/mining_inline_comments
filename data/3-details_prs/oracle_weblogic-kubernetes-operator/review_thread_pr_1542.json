{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODc2NzM0", "number": 1542, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMzowOFrODvS16Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NDo1MFrODv-b4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTE4Mzc3OnYy", "diffSide": "RIGHT", "path": "docs/2.4.0/samples/simple/domains/domain-home-in-image/index.html", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMzowOFrOGBozXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTowMDoxNVrOGBps4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDI2OA==", "bodyText": "this is a generated file, you can't edit this", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r404370268", "createdAt": "2020-04-06T20:33:08Z", "author": {"login": "markxnelson"}, "path": "docs/2.4.0/samples/simple/domains/domain-home-in-image/index.html", "diffHunk": "@@ -2790,6 +2790,18 @@ <h4 id=\"configuration-parameters\">Configuration parameters</h4>\n <td><code>7001</code></td>\n </tr>\n \n+<tr>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77f68b95323f177eb4f9b8f51f146e3e499dd95c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MjQxOQ==", "bodyText": "Which file should I edit to add the new SSL parameters for domain-home-in-image?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r404382419", "createdAt": "2020-04-06T20:55:48Z", "author": {"login": "qvdang"}, "path": "docs/2.4.0/samples/simple/domains/domain-home-in-image/index.html", "diffHunk": "@@ -2790,6 +2790,18 @@ <h4 id=\"configuration-parameters\">Configuration parameters</h4>\n <td><code>7001</code></td>\n </tr>\n \n+<tr>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDI2OA=="}, "originalCommit": {"oid": "77f68b95323f177eb4f9b8f51f146e3e499dd95c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NDk5NA==", "bodyText": "See the files at https://github.com/oracle/weblogic-kubernetes-operator/tree/develop/docs-source/content/samples", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r404384994", "createdAt": "2020-04-06T21:00:15Z", "author": {"login": "TheFrogPad"}, "path": "docs/2.4.0/samples/simple/domains/domain-home-in-image/index.html", "diffHunk": "@@ -2790,6 +2790,18 @@ <h4 id=\"configuration-parameters\">Configuration parameters</h4>\n <td><code>7001</code></td>\n </tr>\n \n+<tr>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDI2OA=="}, "originalCommit": {"oid": "77f68b95323f177eb4f9b8f51f146e3e499dd95c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTE4NTkxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMzo0M1rOGBo0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NjoxMFrOGBpjkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDYwMg==", "bodyText": "fix javadoc.\nstopping review here. please resubmit when you are ready for a review", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r404370602", "createdAt": "2020-04-06T20:33:43Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Create a WLS domain using domain-in-image option. Verify the domain is started\n+   * successfully and the SSL listeners in the WLS servers are active.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77f68b95323f177eb4f9b8f51f146e3e499dd95c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MjYwOQ==", "bodyText": "Fixing right now and will resubmit shortly.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r404382609", "createdAt": "2020-04-06T20:56:10Z", "author": {"login": "qvdang"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Create a WLS domain using domain-in-image option. Verify the domain is started\n+   * successfully and the SSL listeners in the WLS servers are active.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDYwMg=="}, "originalCommit": {"oid": "77f68b95323f177eb4f9b8f51f146e3e499dd95c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDI5Nzc0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo0ODozMVrOGCaIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMToxNDo1M1rOGEGGZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODU3NQ==", "bodyText": "i would really like to see some assertions in here please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405178575", "createdAt": "2020-04-07T23:48:31Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Creates a WebLogic domain using domain-in-image option. Verifies the domain is started\n+   * successfully and the SSL listeners in the WebLogic servers are active.\n+   *\n+   * @throws Exception If an error occurred\n+   */\n+  @Test\n+  public void testDomainInImageUsingWlstWithSSLEnabled() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating Domain & verifying the domain creation\");\n+    // create domain\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap = createDomainInImageMap(\n+              getNewSuffixCount(), false, testClassName);\n+      domainMap.put(\"namespace\", domainNS1);\n+      domainMap.remove(\"clusterType\");\n+\n+      // domainMap key/value pairs are hard coded in the create domain method call above\n+      domainMap.put(\"sslEnabled\", Boolean.TRUE);\n+      domainMap.put(\"javaOptions\",\n+              \"-Dweblogic.StdoutDebugEnabled=false -Dweblogic.security.SSL.ignoreHostnameVerification=true\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      domain.verifyDomainCreated();\n+      domain.verifySSLListeners();\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMzE3OA==", "bodyText": "@markxnelson I'm not sure what this comment implies? Are you talking JUnit assertions? JMockit style assertions? Or some other assertions? I may have missed something new here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405533178", "createdAt": "2020-04-08T13:40:43Z", "author": {"login": "TheFrogPad"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Creates a WebLogic domain using domain-in-image option. Verifies the domain is started\n+   * successfully and the SSL listeners in the WebLogic servers are active.\n+   *\n+   * @throws Exception If an error occurred\n+   */\n+  @Test\n+  public void testDomainInImageUsingWlstWithSSLEnabled() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating Domain & verifying the domain creation\");\n+    // create domain\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap = createDomainInImageMap(\n+              getNewSuffixCount(), false, testClassName);\n+      domainMap.put(\"namespace\", domainNS1);\n+      domainMap.remove(\"clusterType\");\n+\n+      // domainMap key/value pairs are hard coded in the create domain method call above\n+      domainMap.put(\"sslEnabled\", Boolean.TRUE);\n+      domainMap.put(\"javaOptions\",\n+              \"-Dweblogic.StdoutDebugEnabled=false -Dweblogic.security.SSL.ignoreHostnameVerification=true\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      domain.verifyDomainCreated();\n+      domain.verifySSLListeners();\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODU3NQ=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MTcyMQ==", "bodyText": "I don't know if there's any additional assurance to have assertions after line 157.  Any of those domain creation, domain verification, SSL listener verification steps throws an exception if it encounters an error.  I can refactor the code to obtain the exec result and do some kind of assertion here but that seems a bit redundant in my opinion.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405681721", "createdAt": "2020-04-08T17:10:22Z", "author": {"login": "qvdang"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Creates a WebLogic domain using domain-in-image option. Verifies the domain is started\n+   * successfully and the SSL listeners in the WebLogic servers are active.\n+   *\n+   * @throws Exception If an error occurred\n+   */\n+  @Test\n+  public void testDomainInImageUsingWlstWithSSLEnabled() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating Domain & verifying the domain creation\");\n+    // create domain\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap = createDomainInImageMap(\n+              getNewSuffixCount(), false, testClassName);\n+      domainMap.put(\"namespace\", domainNS1);\n+      domainMap.remove(\"clusterType\");\n+\n+      // domainMap key/value pairs are hard coded in the create domain method call above\n+      domainMap.put(\"sslEnabled\", Boolean.TRUE);\n+      domainMap.put(\"javaOptions\",\n+              \"-Dweblogic.StdoutDebugEnabled=false -Dweblogic.security.SSL.ignoreHostnameVerification=true\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      domain.verifyDomainCreated();\n+      domain.verifySSLListeners();\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODU3NQ=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NDYxNw==", "bodyText": "@rjeberhard @ddsharpe what do you think?\ni do not like the style of relying on an exception being thrown. if you think there may be one, i prefer to explicitly catch it and write an assertion about whether it was/was not thrown, its type, etc.\ni think the real issue is that someone could independently change any of these methods, and maybe they no longer throw an exception, and now this test would be broken, but we would not know.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r406754617", "createdAt": "2020-04-10T13:21:48Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Creates a WebLogic domain using domain-in-image option. Verifies the domain is started\n+   * successfully and the SSL listeners in the WebLogic servers are active.\n+   *\n+   * @throws Exception If an error occurred\n+   */\n+  @Test\n+  public void testDomainInImageUsingWlstWithSSLEnabled() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating Domain & verifying the domain creation\");\n+    // create domain\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap = createDomainInImageMap(\n+              getNewSuffixCount(), false, testClassName);\n+      domainMap.put(\"namespace\", domainNS1);\n+      domainMap.remove(\"clusterType\");\n+\n+      // domainMap key/value pairs are hard coded in the create domain method call above\n+      domainMap.put(\"sslEnabled\", Boolean.TRUE);\n+      domainMap.put(\"javaOptions\",\n+              \"-Dweblogic.StdoutDebugEnabled=false -Dweblogic.security.SSL.ignoreHostnameVerification=true\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      domain.verifyDomainCreated();\n+      domain.verifySSLListeners();\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODU3NQ=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMzA4Mw==", "bodyText": "@qvdang @TheFrogPad @markxnelson I would prefer NOT to rely on Exceptions in this way.  Yes, this is what we did in JUnit4, and it worked.  But, its a somewhat harder to read/debug.  If I come into a test that you wrote, I may not understand that you expected exception and thing its a bug in your test.  I would prefer that we were very explicit about when we expect an exception.  In JUnit4, I used code comments.  In JUnit5, there is no reason not to use the assertions.  It makes it very explicit as to what you intend/expect and others that follow you will have less chance of messing up your work.  One of the benefits of good tests is that YOU (the original author) don't have to be the one to go back and fix all the bugs.  You don't want to be the owner of something for all time.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r406813083", "createdAt": "2020-04-10T15:37:48Z", "author": {"login": "ddsharpe"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Creates a WebLogic domain using domain-in-image option. Verifies the domain is started\n+   * successfully and the SSL listeners in the WebLogic servers are active.\n+   *\n+   * @throws Exception If an error occurred\n+   */\n+  @Test\n+  public void testDomainInImageUsingWlstWithSSLEnabled() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating Domain & verifying the domain creation\");\n+    // create domain\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap = createDomainInImageMap(\n+              getNewSuffixCount(), false, testClassName);\n+      domainMap.put(\"namespace\", domainNS1);\n+      domainMap.remove(\"clusterType\");\n+\n+      // domainMap key/value pairs are hard coded in the create domain method call above\n+      domainMap.put(\"sslEnabled\", Boolean.TRUE);\n+      domainMap.put(\"javaOptions\",\n+              \"-Dweblogic.StdoutDebugEnabled=false -Dweblogic.security.SSL.ignoreHostnameVerification=true\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      domain.verifyDomainCreated();\n+      domain.verifySSLListeners();\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODU3NQ=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0NzQyOA==", "bodyText": "Not a problem.  Assertions added.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r406947428", "createdAt": "2020-04-10T21:14:53Z", "author": {"login": "qvdang"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItDomainInImage.java", "diffHunk": "@@ -123,6 +123,51 @@ public void testDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n+\n+  /**\n+   * Creates a WebLogic domain using domain-in-image option. Verifies the domain is started\n+   * successfully and the SSL listeners in the WebLogic servers are active.\n+   *\n+   * @throws Exception If an error occurred\n+   */\n+  @Test\n+  public void testDomainInImageUsingWlstWithSSLEnabled() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating Domain & verifying the domain creation\");\n+    // create domain\n+    Domain domain = null;\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      Map<String, Object> domainMap = createDomainInImageMap(\n+              getNewSuffixCount(), false, testClassName);\n+      domainMap.put(\"namespace\", domainNS1);\n+      domainMap.remove(\"clusterType\");\n+\n+      // domainMap key/value pairs are hard coded in the create domain method call above\n+      domainMap.put(\"sslEnabled\", Boolean.TRUE);\n+      domainMap.put(\"javaOptions\",\n+              \"-Dweblogic.StdoutDebugEnabled=false -Dweblogic.security.SSL.ignoreHostnameVerification=true\");\n+\n+      domain = TestUtils.createDomain(domainMap);\n+      domain.verifyDomainCreated();\n+      domain.verifySSLListeners();\n+      testCompletedSuccessfully = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODU3NQ=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDI5ODMwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzo0ODo0N1rOGCaJIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxODo0NlrOGCasQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODY1Ng==", "bodyText": "period at end of sentence please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405178656", "createdAt": "2020-04-07T23:48:47Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/Domain.java", "diffHunk": "@@ -221,6 +228,24 @@ public void verifyServicesCreated(boolean precreateService) throws Exception {\n     }\n   }\n \n+  /**\n+   * Verifies the SSL listeners in the domain are active by making an SSL connection to each one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NzY1MQ==", "bodyText": "It's clear that our Checkstyle rules are not running for this test code.  Let me follow-up.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405187651", "createdAt": "2020-04-08T00:18:46Z", "author": {"login": "rjeberhard"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/Domain.java", "diffHunk": "@@ -221,6 +228,24 @@ public void verifyServicesCreated(boolean precreateService) throws Exception {\n     }\n   }\n \n+  /**\n+   * Verifies the SSL listeners in the domain are active by making an SSL connection to each one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE3ODY1Ng=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM0NzQwOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxMzozOVrOGCamgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NToxM1rOGC4Qgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NjE3Nw==", "bodyText": "Why is \"Demo\" capitalized?  What do you mean by the host name of the runtime container?  Do you mean the pod's host name or what hostname reports inside a container?  I want to understand what you are communicating.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405186177", "createdAt": "2020-04-08T00:13:39Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -145,11 +147,12 @@ The following parameters can be provided in the inputs file.\n | `imagePullSecretName` | Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified. |  |\n | `includeServerOutInPodLog` | Boolean indicating whether to include `server.out` to the pod's stdout. | `true` |\n | `initialManagedServerReplicas` | Number of Managed Servers to initially start for the domain. | `2` |\n-| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. | `-Dweblogic.StdoutDebugEnabled=false` |\n+| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. If `sslEnabled` is set to `true` and the WebLogic Demo certificate is used, add `-Dweblogic.security.SSL.ignoreHostnameVerification=true` to allow the managed servers to connect to the Admin server while booting up.  The WebLogic generated Demo certificate in this environment typically contains a host name that is different from the runtime container's.  | `-Dweblogic.StdoutDebugEnabled=false` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTYxOA==", "bodyText": "Should be lower case, demo certificate, unless referring a specific demo certificate, such as the Demo Certificate Authority X.509 certificate.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405489618", "createdAt": "2020-04-08T12:35:22Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -145,11 +147,12 @@ The following parameters can be provided in the inputs file.\n | `imagePullSecretName` | Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified. |  |\n | `includeServerOutInPodLog` | Boolean indicating whether to include `server.out` to the pod's stdout. | `true` |\n | `initialManagedServerReplicas` | Number of Managed Servers to initially start for the domain. | `2` |\n-| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. | `-Dweblogic.StdoutDebugEnabled=false` |\n+| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. If `sslEnabled` is set to `true` and the WebLogic Demo certificate is used, add `-Dweblogic.security.SSL.ignoreHostnameVerification=true` to allow the managed servers to connect to the Admin server while booting up.  The WebLogic generated Demo certificate in this environment typically contains a host name that is different from the runtime container's.  | `-Dweblogic.StdoutDebugEnabled=false` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NjE3Nw=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MjA2Ng==", "bodyText": "I'll change it to \"demo\".  By \"the host name of the runtime container\", I mean the output of hostname or echo $HOSTNAME in a running container.  Should I use \"the pod's host name\" instead of \"the runtime container's host name\"?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405672066", "createdAt": "2020-04-08T16:55:13Z", "author": {"login": "qvdang"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -145,11 +147,12 @@ The following parameters can be provided in the inputs file.\n | `imagePullSecretName` | Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified. |  |\n | `includeServerOutInPodLog` | Boolean indicating whether to include `server.out` to the pod's stdout. | `true` |\n | `initialManagedServerReplicas` | Number of Managed Servers to initially start for the domain. | `2` |\n-| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. | `-Dweblogic.StdoutDebugEnabled=false` |\n+| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. If `sslEnabled` is set to `true` and the WebLogic Demo certificate is used, add `-Dweblogic.security.SSL.ignoreHostnameVerification=true` to allow the managed servers to connect to the Admin server while booting up.  The WebLogic generated Demo certificate in this environment typically contains a host name that is different from the runtime container's.  | `-Dweblogic.StdoutDebugEnabled=false` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NjE3Nw=="}, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM0ODkxOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxNDoxOFrOGCanWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxNDoxOFrOGCanWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NjM5Mg==", "bodyText": "Port -> port", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405186392", "createdAt": "2020-04-08T00:14:18Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -145,11 +147,12 @@ The following parameters can be provided in the inputs file.\n | `imagePullSecretName` | Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified. |  |\n | `includeServerOutInPodLog` | Boolean indicating whether to include `server.out` to the pod's stdout. | `true` |\n | `initialManagedServerReplicas` | Number of Managed Servers to initially start for the domain. | `2` |\n-| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. | `-Dweblogic.StdoutDebugEnabled=false` |\n+| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. If `sslEnabled` is set to `true` and the WebLogic Demo certificate is used, add `-Dweblogic.security.SSL.ignoreHostnameVerification=true` to allow the managed servers to connect to the Admin server while booting up.  The WebLogic generated Demo certificate in this environment typically contains a host name that is different from the runtime container's.  | `-Dweblogic.StdoutDebugEnabled=false` |\n | `logHomeOnPV` | Specifies whether the log home is stored on the persistent volume. If set to true, then you must specify the `logHome`, `persistentVolumeClaimName`, and `domainPVMountPath` parameters.| `false` |\n | `logHome` | The in-pod location for domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the `domainUID` as `/shared/logs/<domainUID>`. This parameter is required if `logHomeOnPV` is true. Otherwise, it is ignored. | `/shared/logs/domain1` |\n | `managedServerNameBase` | Base string used to generate Managed Server names. | `managed-server` |\n | `managedServerPort` | Port number for each Managed Server. | `8001` |\n+| `managedServerSSLPort` | SSL Port number for each Managed Server. | `8002` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM1MjU3OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxNjowOVrOGCapeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxNjowOVrOGCapeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NjkzOA==", "bodyText": "server -> Server instance", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405186938", "createdAt": "2020-04-08T00:16:09Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -129,7 +129,9 @@ The following parameters can be provided in the inputs file.\n \n | Parameter | Definition | Default |\n | --- | --- | --- |\n+| `sslEnabled` | Boolean indicating whether to enable SSL in each WebLogic server. | `false` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM1MzA4OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxNjoyN1rOGCap1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxNjoyN1rOGCap1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NzAyOA==", "bodyText": "Port -> port", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405187028", "createdAt": "2020-04-08T00:16:27Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -129,7 +129,9 @@ The following parameters can be provided in the inputs file.\n \n | Parameter | Definition | Default |\n | --- | --- | --- |\n+| `sslEnabled` | Boolean indicating whether to enable SSL in each WebLogic server. | `false` |\n | `adminPort` | Port number for the Administration Server inside the Kubernetes cluster. | `7001` |\n+| `adminServerSSLPort` | SSL Port number for the Administration Server inside the Kubernetes cluster. | `7002` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjMyNjExOnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NDo1MFrOGCteZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NDo1MFrOGCteZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NTM5Nw==", "bodyText": "managed servers to connect to the Admin server -> Managed Servers to connect to the Administration Server\nruntime container's -> runtime container's host name.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1542#discussion_r405495397", "createdAt": "2020-04-08T12:44:50Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -145,11 +147,12 @@ The following parameters can be provided in the inputs file.\n | `imagePullSecretName` | Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified. |  |\n | `includeServerOutInPodLog` | Boolean indicating whether to include `server.out` to the pod's stdout. | `true` |\n | `initialManagedServerReplicas` | Number of Managed Servers to initially start for the domain. | `2` |\n-| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. | `-Dweblogic.StdoutDebugEnabled=false` |\n+| `javaOptions` | Java options for starting the Administration and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: `$(DOMAIN_NAME)`, `$(DOMAIN_HOME)`, `$(ADMIN_NAME)`, `$(ADMIN_PORT)`, and `$(SERVER_NAME)`. If `sslEnabled` is set to `true` and the WebLogic Demo certificate is used, add `-Dweblogic.security.SSL.ignoreHostnameVerification=true` to allow the managed servers to connect to the Admin server while booting up.  The WebLogic generated Demo certificate in this environment typically contains a host name that is different from the runtime container's.  | `-Dweblogic.StdoutDebugEnabled=false` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8da611141e65035ddb5d51c6daa1b56b08d0f81"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4748, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}