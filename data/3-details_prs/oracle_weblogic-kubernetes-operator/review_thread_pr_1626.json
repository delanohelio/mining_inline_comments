{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzg1MjMx", "number": 1626, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0NzoxOFrOD5pC3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxOTo1M1rOD6ozHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3OTAzOnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0NzoxOFrOGRBiCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo0MTozOVrOGRZR9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDA3Mw==", "bodyText": "copyright notice", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504073", "createdAt": "2020-05-06T01:47:18Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwNzQyMw==", "bodyText": "Ugh, okay... that's embarrassing. Thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420807423", "createdAt": "2020-05-06T13:51:47Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDA3Mw=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzOTAyMg==", "bodyText": "2019?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420839022", "createdAt": "2020-05-06T14:32:17Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDA3Mw=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5MzE3NQ==", "bodyText": "More coffee needed... Thanks for having my back.  I'm not with it today.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420893175", "createdAt": "2020-05-06T15:41:39Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDA3Mw=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4MDU2OnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0ODoyNlrOGRBi5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1Mjo0M1rOGRUF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDI5NA==", "bodyText": "maybe we could print a usage message and stop, rather than arbitrarily chose this location?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504294", "createdAt": "2020-05-06T01:48:26Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODE5MA==", "bodyText": "I was trying to have a useful default when running on your own machine.  I think that is still valuable.  I can make another argument.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420808190", "createdAt": "2020-05-06T13:52:43Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDI5NA=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4MTAyOnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0ODo0OVrOGRBjKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1MzoxNFrOGRUHsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDM2Mg==", "bodyText": "does it matter it is was already there?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504362", "createdAt": "2020-05-06T01:48:49Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODYyNw==", "bodyText": "No, I'm actually okay with that.  I'd like to be able to run repeatedly on my local box.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420808627", "createdAt": "2020-05-06T13:53:14Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDM2Mg=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4MjQ5OnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0OTozOFrOGRBj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0OTozOFrOGRBj-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDU2OA==", "bodyText": "should this have --name ${KIND_CLUSTER_NAME}?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504568", "createdAt": "2020-05-06T01:49:38Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4NDE4OnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo1MDozMlrOGRBk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozMjowMVrOGRTHeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDc5Nw==", "bodyText": "make this a param? from a list of \"approved\" ones?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504797", "createdAt": "2020-05-06T01:50:32Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MjE4NQ==", "bodyText": "agreed... working on that now.  I needed this once I was testing against 1.16.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420792185", "createdAt": "2020-05-06T13:32:01Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDc5Nw=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4NDgwOnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo1MDo1OFrOGRBlNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozMjoyOFrOGRV--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDg4NA==", "bodyText": "do we need to expose 6443 or any node ports?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504884", "createdAt": "2020-05-06T01:50:58Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'\n+cat <<EOF | kind create cluster --name \"${KIND_CLUSTER_NAME}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: kindest/node:${kind_version}\n+  - role: worker\n+    image: kindest/node:${kind_version}\n+    extraMounts:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MjQ2Mg==", "bodyText": "no, not on Linux.  The kind documentation says that it's automatic for Linux networking.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420792462", "createdAt": "2020-05-06T13:32:25Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'\n+cat <<EOF | kind create cluster --name \"${KIND_CLUSTER_NAME}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: kindest/node:${kind_version}\n+  - role: worker\n+    image: kindest/node:${kind_version}\n+    extraMounts:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDg4NA=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzOTE2MA==", "bodyText": "ok cool", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420839160", "createdAt": "2020-05-06T14:32:28Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'\n+cat <<EOF | kind create cluster --name \"${KIND_CLUSTER_NAME}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: kindest/node:${kind_version}\n+  - role: worker\n+    image: kindest/node:${kind_version}\n+    extraMounts:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDg4NA=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY4NTM4OnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo1MToyNlrOGRBliQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozMjo0MFrOGRTJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDk2OQ==", "bodyText": "shouldn't this use your cluster name var?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420504969", "createdAt": "2020-05-06T01:51:26Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'\n+cat <<EOF | kind create cluster --name \"${KIND_CLUSTER_NAME}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: kindest/node:${kind_version}\n+  - role: worker\n+    image: kindest/node:${kind_version}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context kind-kind", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MjY0OQ==", "bodyText": "Yes, it should.  thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420792649", "createdAt": "2020-05-06T13:32:40Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,102 @@\n+#!/bin/bash\n+set -o errexit\n+\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  kinddir=\"/scratch/$USER/kindtest\"\n+else\n+  kinddir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+mkdir -m777 -p \"${kinddir}\"\n+export RESULT_ROOT=\"${kinddir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${kinddir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster\n+\n+# desired cluster name; default is \"kind\"\n+KIND_CLUSTER_NAME=\"${KIND_CLUSTER_NAME:-kind}\"\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+kind_version='v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d'\n+cat <<EOF | kind create cluster --name \"${KIND_CLUSTER_NAME}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: kindest/node:${kind_version}\n+  - role: worker\n+    image: kindest/node:${kind_version}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context kind-kind", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDk2OQ=="}, "originalCommit": {"oid": "d1d38fb879847135216a4cc759ade67bd82f0d34"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTkwMjExOnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0ODoyN1rOGRWwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1NzoyOFrOGSRxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTkwOQ==", "bodyText": "This one is supposed to get the nodes from kind cluster or localhost kubernetes cluster ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420851909", "createdAt": "2020-05-06T14:48:27Z", "author": {"login": "sankarpn"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,143 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+set -o errexit\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-v <version>] [-n <name>] [-o <directory>] [-h]\"\n+  echo \"  -v Kubernetes version (optional) \"\n+  echo \"      (default: 1.15.11, supported values: 1.18, 1.18.2, 1.17, 1.17.5, 1.16, 1.16.9, 1.15, 1.15.11, 1.14, 1.14.10) \"\n+  echo \"  -n Kind cluster name (optional) \"\n+  echo \"      (default: kind) \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\$USER/kindtest) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+k8s_version=\"1.15.11\"\n+kind_name=\"kind\"\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  outdir=\"/scratch/$USER/kindtest\"\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+\n+while getopts \":h:n:o:v:\" opt; do\n+  case $opt in\n+    v) k8s_version=\"${OPTARG}\"\n+    ;;\n+    n) kind_name=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+function versionprop {\n+  grep \"${1}=\" \"${scriptDir}/kindversions.properties\"|cut -d'=' -f2\n+}\n+\n+kind_image=$(versionprop \"${k8s_version}\")\n+if [ -z \"$kind_image\" ]; then\n+  echo \"Unsupported Kubernetes version: ${k8s_version}\"\n+  exit 1\n+fi\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster --name ${kind_name}\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+cat <<EOF | kind create cluster --name \"${kind_name}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: ${kind_image}\n+  - role: worker\n+    image: ${kind_image}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context \"kind-${kind_name}\"\n+kubectl get node -o wide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90d2290d3e17dae90646fa5ab41f29409a197d25"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NjY1OQ==", "bodyText": "This gets the nodes from the kind cluster.  The call above (line 114) sets the current context to the kind cluster.  All kubectl calls after this will be to the kind cluster until a different context is set.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420896659", "createdAt": "2020-05-06T15:46:30Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,143 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+set -o errexit\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-v <version>] [-n <name>] [-o <directory>] [-h]\"\n+  echo \"  -v Kubernetes version (optional) \"\n+  echo \"      (default: 1.15.11, supported values: 1.18, 1.18.2, 1.17, 1.17.5, 1.16, 1.16.9, 1.15, 1.15.11, 1.14, 1.14.10) \"\n+  echo \"  -n Kind cluster name (optional) \"\n+  echo \"      (default: kind) \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\$USER/kindtest) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+k8s_version=\"1.15.11\"\n+kind_name=\"kind\"\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  outdir=\"/scratch/$USER/kindtest\"\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+\n+while getopts \":h:n:o:v:\" opt; do\n+  case $opt in\n+    v) k8s_version=\"${OPTARG}\"\n+    ;;\n+    n) kind_name=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+function versionprop {\n+  grep \"${1}=\" \"${scriptDir}/kindversions.properties\"|cut -d'=' -f2\n+}\n+\n+kind_image=$(versionprop \"${k8s_version}\")\n+if [ -z \"$kind_image\" ]; then\n+  echo \"Unsupported Kubernetes version: ${k8s_version}\"\n+  exit 1\n+fi\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster --name ${kind_name}\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+cat <<EOF | kind create cluster --name \"${kind_name}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: ${kind_image}\n+  - role: worker\n+    image: ${kind_image}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context \"kind-${kind_name}\"\n+kubectl get node -o wide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTkwOQ=="}, "originalCommit": {"oid": "90d2290d3e17dae90646fa5ab41f29409a197d25"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwODg3NA==", "bodyText": "Got it. command cluster-info is kind of misleading :-(", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r420908874", "createdAt": "2020-05-06T16:02:57Z", "author": {"login": "sankarpn"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,143 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+set -o errexit\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-v <version>] [-n <name>] [-o <directory>] [-h]\"\n+  echo \"  -v Kubernetes version (optional) \"\n+  echo \"      (default: 1.15.11, supported values: 1.18, 1.18.2, 1.17, 1.17.5, 1.16, 1.16.9, 1.15, 1.15.11, 1.14, 1.14.10) \"\n+  echo \"  -n Kind cluster name (optional) \"\n+  echo \"      (default: kind) \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\$USER/kindtest) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+k8s_version=\"1.15.11\"\n+kind_name=\"kind\"\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  outdir=\"/scratch/$USER/kindtest\"\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+\n+while getopts \":h:n:o:v:\" opt; do\n+  case $opt in\n+    v) k8s_version=\"${OPTARG}\"\n+    ;;\n+    n) kind_name=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+function versionprop {\n+  grep \"${1}=\" \"${scriptDir}/kindversions.properties\"|cut -d'=' -f2\n+}\n+\n+kind_image=$(versionprop \"${k8s_version}\")\n+if [ -z \"$kind_image\" ]; then\n+  echo \"Unsupported Kubernetes version: ${k8s_version}\"\n+  exit 1\n+fi\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster --name ${kind_name}\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+cat <<EOF | kind create cluster --name \"${kind_name}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: ${kind_image}\n+  - role: worker\n+    image: ${kind_image}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context \"kind-${kind_name}\"\n+kubectl get node -o wide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTkwOQ=="}, "originalCommit": {"oid": "90d2290d3e17dae90646fa5ab41f29409a197d25"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxNzczNw==", "bodyText": "oh yeah i did not notice that, a kubectl config set-context  might be clearer, but not a biggie, if it works, fair enough", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r421817737", "createdAt": "2020-05-07T21:55:14Z", "author": {"login": "markxnelson"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,143 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+set -o errexit\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-v <version>] [-n <name>] [-o <directory>] [-h]\"\n+  echo \"  -v Kubernetes version (optional) \"\n+  echo \"      (default: 1.15.11, supported values: 1.18, 1.18.2, 1.17, 1.17.5, 1.16, 1.16.9, 1.15, 1.15.11, 1.14, 1.14.10) \"\n+  echo \"  -n Kind cluster name (optional) \"\n+  echo \"      (default: kind) \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\$USER/kindtest) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+k8s_version=\"1.15.11\"\n+kind_name=\"kind\"\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  outdir=\"/scratch/$USER/kindtest\"\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+\n+while getopts \":h:n:o:v:\" opt; do\n+  case $opt in\n+    v) k8s_version=\"${OPTARG}\"\n+    ;;\n+    n) kind_name=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+function versionprop {\n+  grep \"${1}=\" \"${scriptDir}/kindversions.properties\"|cut -d'=' -f2\n+}\n+\n+kind_image=$(versionprop \"${k8s_version}\")\n+if [ -z \"$kind_image\" ]; then\n+  echo \"Unsupported Kubernetes version: ${k8s_version}\"\n+  exit 1\n+fi\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster --name ${kind_name}\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+cat <<EOF | kind create cluster --name \"${kind_name}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: ${kind_image}\n+  - role: worker\n+    image: ${kind_image}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context \"kind-${kind_name}\"\n+kubectl get node -o wide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTkwOQ=="}, "originalCommit": {"oid": "90d2290d3e17dae90646fa5ab41f29409a197d25"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxODY1NQ==", "bodyText": "I'm happy to switch it... I used this command because after you create a kind cluster, the tool prints out this command as the suggested way to select the cluster's context.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r421818655", "createdAt": "2020-05-07T21:57:28Z", "author": {"login": "rjeberhard"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,143 @@\n+#!/bin/bash\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+set -o errexit\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-v <version>] [-n <name>] [-o <directory>] [-h]\"\n+  echo \"  -v Kubernetes version (optional) \"\n+  echo \"      (default: 1.15.11, supported values: 1.18, 1.18.2, 1.17, 1.17.5, 1.16, 1.16.9, 1.15, 1.15.11, 1.14, 1.14.10) \"\n+  echo \"  -n Kind cluster name (optional) \"\n+  echo \"      (default: kind) \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\$USER/kindtest) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+k8s_version=\"1.15.11\"\n+kind_name=\"kind\"\n+if [[ -z \"$WORKSPACE\" ]]; then\n+  outdir=\"/scratch/$USER/kindtest\"\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+\n+while getopts \":h:n:o:v:\" opt; do\n+  case $opt in\n+    v) k8s_version=\"${OPTARG}\"\n+    ;;\n+    n) kind_name=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+function versionprop {\n+  grep \"${1}=\" \"${scriptDir}/kindversions.properties\"|cut -d'=' -f2\n+}\n+\n+kind_image=$(versionprop \"${k8s_version}\")\n+if [ -z \"$kind_image\" ]; then\n+  echo \"Unsupported Kubernetes version: ${k8s_version}\"\n+  exit 1\n+fi\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"$RESULT_ROOT\" ]; then\n+  rm -Rf \"$RESULT_ROOT/*\"\n+else\n+  mkdir -m777 \"$RESULT_ROOT\"\n+fi\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"$PV_ROOT\" ]; then\n+  rm -Rf \"$PV_ROOT/*\"\n+else\n+  mkdir -m777 \"$PV_ROOT\"\n+fi\n+\n+echo 'Remove old cluster (if any)...'\n+kind delete cluster --name ${kind_name}\n+\n+kind_version=$(kind version)\n+kind_network='kind'\n+reg_name='kind-registry'\n+reg_port='5000'\n+case \"${kind_version}\" in\n+  \"kind v0.7.\"* | \"kind v0.6.\"* | \"kind v0.5.\"*)\n+    kind_network='bridge'\n+    ;;\n+esac\n+\n+echo 'Create registry container unless it already exists'\n+running=\"$(docker inspect -f '{{.State.Running}}' \"${reg_name}\" 2>/dev/null || true)\"\n+if [ \"${running}\" != 'true' ]; then\n+  docker run \\\n+    -d --restart=always -p \"${reg_port}:5000\" --name \"${reg_name}\" \\\n+    registry:2\n+fi\n+\n+reg_host=\"${reg_name}\"\n+if [ \"${kind_network}\" = \"bridge\" ]; then\n+    reg_host=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' \"${reg_name}\")\"\n+fi\n+echo \"Registry Host: ${reg_host}\"\n+\n+echo 'Create a cluster with the local registry enabled in containerd'\n+cat <<EOF | kind create cluster --name \"${kind_name}\" --config=-\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+containerdConfigPatches:\n+- |-\n+  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"localhost:${reg_port}\"]\n+    endpoint = [\"http://${reg_host}:${reg_port}\"]\n+nodes:\n+  - role: control-plane\n+    image: ${kind_image}\n+  - role: worker\n+    image: ${kind_image}\n+    extraMounts:\n+      - hostPath: ${PV_ROOT}\n+        containerPath: ${PV_ROOT}\n+EOF\n+\n+kubectl cluster-info --context \"kind-${kind_name}\"\n+kubectl get node -o wide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTkwOQ=="}, "originalCommit": {"oid": "90d2290d3e17dae90646fa5ab41f29409a197d25"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODEyNDQ1OnYy", "diffSide": "RIGHT", "path": "kindtest.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxOTo1M1rOGSlRLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxOTo1M1rOGSlRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzODE1Nw==", "bodyText": "RESULT_ROOT is set just above,  but never-the-less an rm -rf $ENV/* of env var looks a bit like playing with fire to me.  A \"set -u\" would make it a little safer maybe.  Putting the 'wl_k8s_test_results' string directly  in the rm expression makes it even safer IMO.  Ditto for PV_ROOT below.  This reduces chance that a future change  to the env var logic could leave a crater in the file system.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1626#discussion_r422138157", "createdAt": "2020-05-08T13:19:53Z", "author": {"login": "tbarnes-us"}, "path": "kindtest.sh", "diffHunk": "@@ -0,0 +1,187 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a Kubernetes cluster using Kind (https://kind.sigs.k8s.io/) and runs the new\n+# integration test suite against that cluster.\n+#\n+# To install Kind:\n+#    curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.0/kind-$(uname)-amd64\n+#    chmod +x ./kind\n+#    mv ./kind /some-dir-in-your-PATH/kind\n+#\n+# Kind creates Kubernetes nodes on your local box by running each node as a Docker container. This\n+# makes it very easy to setup and tear down clusters. Presently, this script creates a cluster with a\n+# master node and a worker node. Each node will run the same Kubernetes version. Future enhancements to\n+# this script could allow for the configuration of a different number of nodes or for nodes to run a\n+# differing set of Kubernetes versions.\n+#\n+# Kind nodes do not have access to the Docker repository on the local machine. Therefore this script works\n+# around this limitation by running a Docker registry in a Docker container and connecting the networks so\n+# that the Kubernetes nodes have visibility to the registry. When you run tests, you will see that Docker\n+# images are pushed to this local registry and then are pulled to the Kubernetes nodes as needed.\n+# You can see the images on a node by running: \"docker exec -it kind-worker crictl images\" where kind-worker\n+# is the name of the Docker container.\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+# If you want to access the cluster, use \"kubectl cluster-info --context kind-kind\" where the trailing \"kind\" is the value of the \"-n\" argument.\n+set -o errexit\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-v <version>] [-n <name>] [-o <directory>] [-t <tests>] [-h]\"\n+  echo \"  -v Kubernetes version (optional) \"\n+  echo \"      (default: 1.15.11, supported values: 1.18, 1.18.2, 1.17, 1.17.5, 1.16, 1.16.9, 1.15, 1.15.11, 1.14, 1.14.10) \"\n+  echo \"  -n Kind cluster name (optional) \"\n+  echo \"      (default: kind) \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+k8s_version=\"1.15.11\"\n+kind_name=\"kind\"\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/kindtest\"\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+\n+while getopts \":h:n:o:t:v:\" opt; do\n+  case $opt in\n+    v) k8s_version=\"${OPTARG}\"\n+    ;;\n+    n) kind_name=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+function versionprop {\n+  grep \"${1}=\" \"${scriptDir}/kindversions.properties\"|cut -d'=' -f2\n+}\n+\n+kind_image=$(versionprop \"${k8s_version}\")\n+if [ -z \"${kind_image}\" ]; then\n+  echo \"Unsupported Kubernetes version: ${k8s_version}\"\n+  exit 1\n+fi\n+\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9e4f704246f9c8ca30dbddb352289bd2e7f95b"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4519, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}