{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjcwODQz", "number": 1531, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NTowOFrODudSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1NDoxOFrODudeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQwODc2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NTowOFrOGAdmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0MDowOFrOGAqgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODIyMA==", "bodyText": "what if it is an earlier version? this might give the wrong behavior", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403138220", "createdAt": "2020-04-03T16:45:08Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -677,9 +675,33 @@ private void test13_ReplaceMetricsNameSnakeCaseFalseConfiguration() throws Excep\n   }\n \n   /**\n-   * Try to change monitoring exporter configuration without authentication.\n+   * Test to replace monitoring exporter configuration with configuration file with\n+   * domainQualifier=true.\n    *\n-   * @throws Exception exception\n+   * @throws Exception if failed to apply configuration or check the expected values.\n+   */\n+  private void test19_ReplaceMetricsDomainQualifierTrueConfiguration() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    HtmlPage page =\n+        submitConfigureForm(exporterUrl, \"replace\", configPath + \"/rest_domainqualtrue.yml\");\n+    assertNotNull(page);\n+    LoggerHelper.getLocal().log(Level.INFO, \"page - \" + page.asText());\n+    assertTrue(page.asText().contains(\"domainQualifier\"));\n+    //1.1.1 does not contain the fix for parsing error in prometheus\n+    if (!MONITORING_EXPORTER_VERSION.equals(\"1.1.1\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NTY2OA==", "bodyText": "@marinakog, can you please answer?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403245668", "createdAt": "2020-04-03T18:57:00Z", "author": {"login": "rjeberhard"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -677,9 +675,33 @@ private void test13_ReplaceMetricsNameSnakeCaseFalseConfiguration() throws Excep\n   }\n \n   /**\n-   * Try to change monitoring exporter configuration without authentication.\n+   * Test to replace monitoring exporter configuration with configuration file with\n+   * domainQualifier=true.\n    *\n-   * @throws Exception exception\n+   * @throws Exception if failed to apply configuration or check the expected values.\n+   */\n+  private void test19_ReplaceMetricsDomainQualifierTrueConfiguration() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    HtmlPage page =\n+        submitConfigureForm(exporterUrl, \"replace\", configPath + \"/rest_domainqualtrue.yml\");\n+    assertNotNull(page);\n+    LoggerHelper.getLocal().log(Level.INFO, \"page - \" + page.asText());\n+    assertTrue(page.asText().contains(\"domainQualifier\"));\n+    //1.1.1 does not contain the fix for parsing error in prometheus\n+    if (!MONITORING_EXPORTER_VERSION.equals(\"1.1.1\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODIyMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NDY2Ng==", "bodyText": "https://jira.****/jira/browse/OWLS-80941", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403344666", "createdAt": "2020-04-03T21:27:29Z", "author": {"login": "rjeberhard"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -677,9 +675,33 @@ private void test13_ReplaceMetricsNameSnakeCaseFalseConfiguration() throws Excep\n   }\n \n   /**\n-   * Try to change monitoring exporter configuration without authentication.\n+   * Test to replace monitoring exporter configuration with configuration file with\n+   * domainQualifier=true.\n    *\n-   * @throws Exception exception\n+   * @throws Exception if failed to apply configuration or check the expected values.\n+   */\n+  private void test19_ReplaceMetricsDomainQualifierTrueConfiguration() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    HtmlPage page =\n+        submitConfigureForm(exporterUrl, \"replace\", configPath + \"/rest_domainqualtrue.yml\");\n+    assertNotNull(page);\n+    LoggerHelper.getLocal().log(Level.INFO, \"page - \" + page.asText());\n+    assertTrue(page.asText().contains(\"domainQualifier\"));\n+    //1.1.1 does not contain the fix for parsing error in prometheus\n+    if (!MONITORING_EXPORTER_VERSION.equals(\"1.1.1\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODIyMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTY3OA==", "bodyText": "1.1.1 is earlier version of exporter , I put it because at that time the new release was not posted, to avoid develop breakage. For now the fix is in 1.1.2 so we can remove if condition .", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403349678", "createdAt": "2020-04-03T21:40:08Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -677,9 +675,33 @@ private void test13_ReplaceMetricsNameSnakeCaseFalseConfiguration() throws Excep\n   }\n \n   /**\n-   * Try to change monitoring exporter configuration without authentication.\n+   * Test to replace monitoring exporter configuration with configuration file with\n+   * domainQualifier=true.\n    *\n-   * @throws Exception exception\n+   * @throws Exception if failed to apply configuration or check the expected values.\n+   */\n+  private void test19_ReplaceMetricsDomainQualifierTrueConfiguration() throws Exception {\n+    Assumptions.assumeTrue(FULLTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    HtmlPage page =\n+        submitConfigureForm(exporterUrl, \"replace\", configPath + \"/rest_domainqualtrue.yml\");\n+    assertNotNull(page);\n+    LoggerHelper.getLocal().log(Level.INFO, \"page - \" + page.asText());\n+    assertTrue(page.asText().contains(\"domainQualifier\"));\n+    //1.1.1 does not contain the fix for parsing error in prometheus\n+    if (!MONITORING_EXPORTER_VERSION.equals(\"1.1.1\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODIyMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQxMTI1OnYy", "diffSide": "RIGHT", "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NTo0OFrOGAdoMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MjowMlrOGAj-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA==", "bodyText": "This is a side note for @rosemarymarano :    We know that this relref syntax doesn't quite work - it'll redirect to the top of the file instead of to the specified # location.   You need to pretend there's an \"_index.md\" file in the directory even if there isn't, and do this instead: /security/domain-security/image-protection/_index.md#weblogic-domain-in-docker-image-protection.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403138610", "createdAt": "2020-04-03T16:45:48Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODg5NA==", "bodyText": "I saw a couple of others of these.  We should come up with a grep expression to suss them out and then fix 'em.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403138894", "createdAt": "2020-04-03T16:46:17Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1MjAxOA==", "bodyText": "you can just remove the .md after image-protection and it works fine", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403152018", "createdAt": "2020-04-03T17:04:35Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE2OTA1Mg==", "bodyText": "Okay, I'll test removing the \".md\" and do the grep.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403169052", "createdAt": "2020-04-03T17:24:15Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxODk0Nw==", "bodyText": "According to the documentation, you should use the \".md\"... https://gohugo.io/content-management/cross-references/#use-ref-and-relref", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403218947", "createdAt": "2020-04-03T18:21:57Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMDk1OQ==", "bodyText": "I've tested this here and cannot find a combination that works", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403230959", "createdAt": "2020-04-03T18:36:06Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MjYzOQ==", "bodyText": "I'm not going to fix this in this PR as it's not working for me, so I can't test that I have it right :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403242639", "createdAt": "2020-04-03T18:52:02Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/samples/simple/domains/domain-home-in-image/_index.md", "diffHunk": "@@ -66,9 +66,8 @@ The script will perform the following steps:\n   in the registry (for example, Oracle Cloud Infrastructure Registry, Docker Hub, and such) as\n   this image contains sensitive information about the domain including keys and\n   credentials that are used to access external resources (for example, data source password).\n-  For more information about\n-  [domain home in image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}),\n-  see the ***Security*** section.\n+  For more information, see\n+  [WebLogic domain in Docker image protection]({{<relref \"/security/domain-security/image-protection.md#weblogic-domain-in-docker-image-protection\">}}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODYxMA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQxMjU3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NjowOFrOGAdo9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozNDoxOVrOGAqYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODgwNA==", "bodyText": "this seems odd - why only retry once? does this fail often?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403138804", "createdAt": "2020-04-03T16:46:08Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -927,32 +949,31 @@ private void changeConfigNegativeAuth(\n       String effect, String configFile, String expectedErrorMsg, String username, String password)\n       throws Exception {\n     try {\n-      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, username, password);\n+      final WebClient webClient = new WebClient();\n+      setCredentials(webClient, username, password);\n+      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, webClient);\n       throw new RuntimeException(\"Expected exception was not thrown \");\n     } catch (FailingHttpStatusCodeException ex) {\n       assertTrue((ex.getMessage()).contains(expectedErrorMsg));\n     }\n   }\n \n-  private HtmlPage submitConfigureForm(\n-      String exporterUrl, String effect, String configFile, String username, String password)\n-      throws Exception {\n-    final WebClient webClient = new WebClient();\n-    setCredentials(webClient, username, password);\n-    return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n-  }\n-\n   private HtmlPage submitConfigureForm(String exporterUrl, String effect, String configFile)\n       throws Exception {\n     final WebClient webClient = new WebClient();\n+    webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);\n     setCredentials(webClient);\n     return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n   }\n \n   private HtmlPage submitConfigureForm(\n       String exporterUrl, String effect, String configFile, WebClient webClient) throws Exception {\n     // Get the first page\n-    final HtmlPage page1 = webClient.getPage(exporterUrl);\n+    HtmlPage page1 = webClient.getPage(exporterUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NTc3MA==", "bodyText": "@marinakog, can you please answer?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403245770", "createdAt": "2020-04-03T18:57:07Z", "author": {"login": "rjeberhard"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -927,32 +949,31 @@ private void changeConfigNegativeAuth(\n       String effect, String configFile, String expectedErrorMsg, String username, String password)\n       throws Exception {\n     try {\n-      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, username, password);\n+      final WebClient webClient = new WebClient();\n+      setCredentials(webClient, username, password);\n+      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, webClient);\n       throw new RuntimeException(\"Expected exception was not thrown \");\n     } catch (FailingHttpStatusCodeException ex) {\n       assertTrue((ex.getMessage()).contains(expectedErrorMsg));\n     }\n   }\n \n-  private HtmlPage submitConfigureForm(\n-      String exporterUrl, String effect, String configFile, String username, String password)\n-      throws Exception {\n-    final WebClient webClient = new WebClient();\n-    setCredentials(webClient, username, password);\n-    return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n-  }\n-\n   private HtmlPage submitConfigureForm(String exporterUrl, String effect, String configFile)\n       throws Exception {\n     final WebClient webClient = new WebClient();\n+    webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);\n     setCredentials(webClient);\n     return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n   }\n \n   private HtmlPage submitConfigureForm(\n       String exporterUrl, String effect, String configFile, WebClient webClient) throws Exception {\n     // Get the first page\n-    final HtmlPage page1 = webClient.getPage(exporterUrl);\n+    HtmlPage page1 = webClient.getPage(exporterUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODgwNA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NTA4OQ==", "bodyText": "https://jira.****/jira/browse/OWLS-80942", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403345089", "createdAt": "2020-04-03T21:28:28Z", "author": {"login": "rjeberhard"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -927,32 +949,31 @@ private void changeConfigNegativeAuth(\n       String effect, String configFile, String expectedErrorMsg, String username, String password)\n       throws Exception {\n     try {\n-      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, username, password);\n+      final WebClient webClient = new WebClient();\n+      setCredentials(webClient, username, password);\n+      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, webClient);\n       throw new RuntimeException(\"Expected exception was not thrown \");\n     } catch (FailingHttpStatusCodeException ex) {\n       assertTrue((ex.getMessage()).contains(expectedErrorMsg));\n     }\n   }\n \n-  private HtmlPage submitConfigureForm(\n-      String exporterUrl, String effect, String configFile, String username, String password)\n-      throws Exception {\n-    final WebClient webClient = new WebClient();\n-    setCredentials(webClient, username, password);\n-    return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n-  }\n-\n   private HtmlPage submitConfigureForm(String exporterUrl, String effect, String configFile)\n       throws Exception {\n     final WebClient webClient = new WebClient();\n+    webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);\n     setCredentials(webClient);\n     return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n   }\n \n   private HtmlPage submitConfigureForm(\n       String exporterUrl, String effect, String configFile, WebClient webClient) throws Exception {\n     // Get the first page\n-    final HtmlPage page1 = webClient.getPage(exporterUrl);\n+    HtmlPage page1 = webClient.getPage(exporterUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODgwNA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NzU1Ng==", "bodyText": "it does not fail often, once in 2 weeks or so in the external Jen job, so added one more try if server is too busy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403347556", "createdAt": "2020-04-03T21:34:19Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItMonitoringExporter.java", "diffHunk": "@@ -927,32 +949,31 @@ private void changeConfigNegativeAuth(\n       String effect, String configFile, String expectedErrorMsg, String username, String password)\n       throws Exception {\n     try {\n-      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, username, password);\n+      final WebClient webClient = new WebClient();\n+      setCredentials(webClient, username, password);\n+      HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile, webClient);\n       throw new RuntimeException(\"Expected exception was not thrown \");\n     } catch (FailingHttpStatusCodeException ex) {\n       assertTrue((ex.getMessage()).contains(expectedErrorMsg));\n     }\n   }\n \n-  private HtmlPage submitConfigureForm(\n-      String exporterUrl, String effect, String configFile, String username, String password)\n-      throws Exception {\n-    final WebClient webClient = new WebClient();\n-    setCredentials(webClient, username, password);\n-    return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n-  }\n-\n   private HtmlPage submitConfigureForm(String exporterUrl, String effect, String configFile)\n       throws Exception {\n     final WebClient webClient = new WebClient();\n+    webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);\n     setCredentials(webClient);\n     return submitConfigureForm(exporterUrl, effect, configFile, webClient);\n   }\n \n   private HtmlPage submitConfigureForm(\n       String exporterUrl, String effect, String configFile, WebClient webClient) throws Exception {\n     // Get the first page\n-    final HtmlPage page1 = webClient.getPage(exporterUrl);\n+    HtmlPage page1 = webClient.getPage(exporterUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODgwNA=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQxMzY2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/exporter/rest_domainqualtrue.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NjozMFrOGAdpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NjozMFrOGAdpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTAwNA==", "bodyText": "this appears to be a new file, so should only list 2020", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403139004", "createdAt": "2020-04-03T16:46:30Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/resources/exporter/rest_domainqualtrue.yml", "diffHunk": "@@ -0,0 +1,23 @@\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQxOTA2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0ODoxMVrOGAdtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo1MDozM1rOGAqvyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTg4Mg==", "bodyText": "might be nice to include a link to an explanation of this - i googled that phrase and found nothing that seemed related", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403139882", "createdAt": "2020-04-03T16:48:11Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4NTg1NA==", "bodyText": "See pull #1503", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403185854", "createdAt": "2020-04-03T17:43:48Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTg4Mg=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4NjE1Mw==", "bodyText": "It's a made up term.  Feel free to come up with a better one.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403186153", "createdAt": "2020-04-03T17:44:06Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTg4Mg=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NjY5Nw==", "bodyText": "Does it mean numbers and then letters?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403246697", "createdAt": "2020-04-03T18:58:18Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTg4Mg=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NjA0OQ==", "bodyText": "https://jira.****/jira/browse/OWLS-80943", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403346049", "createdAt": "2020-04-03T21:30:47Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTg4Mg=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MzU0NA==", "bodyText": "there is some description in the comment of getSortingString method in the same class", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403353544", "createdAt": "2020-04-03T21:50:33Z", "author": {"login": "alai8"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzOTg4Mg=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQyMDc4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0ODozN1rOGAduMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0ODozN1rOGAduMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDE0NA==", "bodyText": "2 -> two", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403140144", "createdAt": "2020-04-03T16:48:37Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQyMjQ4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0OTowNlrOGAdvNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0OTowNlrOGAdvNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDQwNw==", "bodyText": "extra * in there -- is that an unintentional mistake?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403140407", "createdAt": "2020-04-03T16:49:06Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQyNTI0OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0OTo1OFrOGAdxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTozMTo0OVrOGAqUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDg4Ng==", "bodyText": "i guess i would question if we really need to implement a sort algorithm???", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403140886", "createdAt": "2020-04-03T16:49:58Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MTI4Ng==", "bodyText": "did you write this, or copy it from somewhere? if you copied it, we need attribution, and we need to check licenses and copyrights.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403141286", "createdAt": "2020-04-03T16:50:44Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDg4Ng=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MTcxMg==", "bodyText": "This is new and it's definitely needed.\nThe domain status was listing information in a random order, and the rolls were in a random order.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403181712", "createdAt": "2020-04-03T17:39:07Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDg4Ng=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MzYxMQ==", "bodyText": "It comes from pull OWLS-80522 Domain status ordering, OWLS-80144 Ordered rolling upgrade.  #1503", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403183611", "createdAt": "2020-04-03T17:41:14Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDg4Ng=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NjQ3NQ==", "bodyText": "https://jira.****/jira/browse/OWLS-80944", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403346475", "createdAt": "2020-04-03T21:31:49Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +25,84 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Create a Map using the elements from the given map, with their keys sorted\n+   * using the 'numero lexi sorting name'.\n+   *\n+   * @param map Map containing elements to be sorted by the keys\n+   * @param <T> Type of map entries\n+   * @return A sorted Map containing the elements from the give map\n+   */\n+  public static <T> Map<String, T> createSortedMap(Map<String, T> map) {\n+    if (map == null) {\n+      return Collections.emptyMap();\n+    }\n+    return map.entrySet()\n+        .stream()\n+        .sorted(Comparator\n+            .comparing((Entry<String, T> entry) -> getSortingString(entry.getKey())))\n+        .collect(Collectors.toMap(\n+            Map.Entry::getKey,\n+            Map.Entry::getValue,\n+            (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n+  }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MDg4Ng=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQzMTAxOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1MTo0NlrOGAd0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1MTo0NlrOGAd0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MTgyNg==", "bodyText": "thank you for putting a comment to explain that", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403141826", "createdAt": "2020-04-03T16:51:46Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/ServerStatus.java", "diffHunk": "@@ -46,6 +47,9 @@\n   @Valid\n   private ServerHealth health;\n \n+  // volatile so it will not be included in the json schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQ0MDAyOnYy", "diffSide": "RIGHT", "path": "operator/src/test/java/oracle/kubernetes/weblogic/domain/model/ServerStatusTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1NDoxOFrOGAd6gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo1NDowMlrOGAq0-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzI5Ng==", "bodyText": "these asserts should probably have messages on them ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403143296", "createdAt": "2020-04-03T16:54:18Z", "author": {"login": "markxnelson"}, "path": "operator/src/test/java/oracle/kubernetes/weblogic/domain/model/ServerStatusTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.weblogic.domain.model;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThan;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ServerStatusTest {\n+\n+  static ServerStatus cluster1Server1 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server1\");\n+  static ServerStatus cluster1Server2 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server2\");\n+  static ServerStatus cluster1Server10 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server10\");\n+\n+  static ServerStatus cluster2Server1 = new ServerStatus().withClusterName(\"cluster-2\").withServerName(\"server1\");\n+  static ServerStatus cluster10Server1 = new ServerStatus().withClusterName(\"cluster-10\").withServerName(\"server1\");\n+\n+  static ServerStatus standAloneServer1 = new ServerStatus().withServerName(\"server1\");\n+  static ServerStatus standAloneServer2 = new ServerStatus().withServerName(\"server2\");\n+  static ServerStatus standAloneServer10 = new ServerStatus().withServerName(\"server10\");\n+\n+  static ServerStatus adminServer = new ServerStatus().withServerName(\"admin-server\").withIsAdminServer(true);\n+  static ServerStatus cluster1ServerA = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"a\");\n+  static ServerStatus standAloneServerA = new ServerStatus().withServerName(\"a\");\n+\n+  static ServerStatus nullClusterNullServer = new ServerStatus();\n+\n+  @Test\n+  public void verify_Equal_compareTo() {\n+    assertThat(nullClusterNullServer.compareTo(nullClusterNullServer), equalTo(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0NjkxNg==", "bodyText": "https://jira.****/jira/browse/OWLS-80945", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403346916", "createdAt": "2020-04-03T21:32:55Z", "author": {"login": "rjeberhard"}, "path": "operator/src/test/java/oracle/kubernetes/weblogic/domain/model/ServerStatusTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.weblogic.domain.model;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThan;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ServerStatusTest {\n+\n+  static ServerStatus cluster1Server1 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server1\");\n+  static ServerStatus cluster1Server2 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server2\");\n+  static ServerStatus cluster1Server10 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server10\");\n+\n+  static ServerStatus cluster2Server1 = new ServerStatus().withClusterName(\"cluster-2\").withServerName(\"server1\");\n+  static ServerStatus cluster10Server1 = new ServerStatus().withClusterName(\"cluster-10\").withServerName(\"server1\");\n+\n+  static ServerStatus standAloneServer1 = new ServerStatus().withServerName(\"server1\");\n+  static ServerStatus standAloneServer2 = new ServerStatus().withServerName(\"server2\");\n+  static ServerStatus standAloneServer10 = new ServerStatus().withServerName(\"server10\");\n+\n+  static ServerStatus adminServer = new ServerStatus().withServerName(\"admin-server\").withIsAdminServer(true);\n+  static ServerStatus cluster1ServerA = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"a\");\n+  static ServerStatus standAloneServerA = new ServerStatus().withServerName(\"a\");\n+\n+  static ServerStatus nullClusterNullServer = new ServerStatus();\n+\n+  @Test\n+  public void verify_Equal_compareTo() {\n+    assertThat(nullClusterNullServer.compareTo(nullClusterNullServer), equalTo(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzI5Ng=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1NDg3NA==", "bodyText": "this method tests that compareTo should return 0 when comparing to the same object. The assertThat statement seems to be self explanatory.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1531#discussion_r403354874", "createdAt": "2020-04-03T21:54:02Z", "author": {"login": "alai8"}, "path": "operator/src/test/java/oracle/kubernetes/weblogic/domain/model/ServerStatusTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.weblogic.domain.model;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThan;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ServerStatusTest {\n+\n+  static ServerStatus cluster1Server1 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server1\");\n+  static ServerStatus cluster1Server2 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server2\");\n+  static ServerStatus cluster1Server10 = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"server10\");\n+\n+  static ServerStatus cluster2Server1 = new ServerStatus().withClusterName(\"cluster-2\").withServerName(\"server1\");\n+  static ServerStatus cluster10Server1 = new ServerStatus().withClusterName(\"cluster-10\").withServerName(\"server1\");\n+\n+  static ServerStatus standAloneServer1 = new ServerStatus().withServerName(\"server1\");\n+  static ServerStatus standAloneServer2 = new ServerStatus().withServerName(\"server2\");\n+  static ServerStatus standAloneServer10 = new ServerStatus().withServerName(\"server10\");\n+\n+  static ServerStatus adminServer = new ServerStatus().withServerName(\"admin-server\").withIsAdminServer(true);\n+  static ServerStatus cluster1ServerA = new ServerStatus().withClusterName(\"cluster-1\").withServerName(\"a\");\n+  static ServerStatus standAloneServerA = new ServerStatus().withServerName(\"a\");\n+\n+  static ServerStatus nullClusterNullServer = new ServerStatus();\n+\n+  @Test\n+  public void verify_Equal_compareTo() {\n+    assertThat(nullClusterNullServer.compareTo(nullClusterNullServer), equalTo(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzI5Ng=="}, "originalCommit": {"oid": "8f9225247231add8fca45faf2ed746a03daa4586"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4721, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}