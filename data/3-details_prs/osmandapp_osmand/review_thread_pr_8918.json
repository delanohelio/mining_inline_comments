{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTE2NTY3", "number": 8918, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozMzo0M1rOD8ZkIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowODowM1rOD9Yt3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYwMDAyOnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozMzo0M1rOGVUCcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozMzo0M1rOGVUCcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMTU4NA==", "bodyText": "Bad class naming, couldn't be part of PoiFiltersDBHelper and same db?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425001584", "createdAt": "2020-05-14T09:33:43Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYwNTI2OnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozNToxNVrOGVUFzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozNToxNVrOGVUFzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMjQ0NQ==", "bodyText": "Bad link, Helpers/Serice connected to OsmAndApplication shouldn't use LocalIndexInfo/LocalIndexHelper which are UI classes at all. Static methods are also bad", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425002445", "createdAt": "2020-05-14T09:35:15Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYwODg2OnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozNjoxMlrOGVUINQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozNjoxMlrOGVUINQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMzA2MQ==", "bodyText": "Shouldn't be async cause initialization of all maps is already async and it should be part of map initialization processes", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425003061", "createdAt": "2020-05-14T09:36:12Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYxMjkzOnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozNzoyOVrOGVULCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozNzoyOVrOGVULCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMzc4NA==", "bodyText": "BinaryMapIndexReader shouldn't use at all MapPoiTypes, looks like it was bad design from previous request.", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425003784", "createdAt": "2020-05-14T09:37:29Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {\n+\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n+\t\tfiles.clear();\n+\t\thelper.deleteFilesTable();\n+\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\tFile f = new File(info.getPathToData());\n+\t\t\thelper.addFile(f);\n+\t\t\tfiles.put(f.getName(), f.lastModified());\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate void initCategoriesFromFiles() {\n+\t\tapp.getPoiTypes().clearCreatedCategories();\n+\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n+\t\tfor (BinaryMapIndexReader r : currentFile) {\n+\t\t\ttry {\n+\t\t\t\tr.initCategories();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYxODQxOnYy", "diffSide": "RIGHT", "path": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTozOToxMVrOGVUO2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0NDowNFrOGVUbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNDc2Mg==", "bodyText": "Bad naming - createdCategories?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425004762", "createdAt": "2020-05-14T09:39:11Z", "author": {"login": "vshcherb"}, "path": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "diffHunk": "@@ -33,6 +33,7 @@\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n+\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzg5OQ==", "bodyText": "This is not used at all, only temporarily to build new categories.", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425007899", "createdAt": "2020-05-14T09:44:04Z", "author": {"login": "vshcherb"}, "path": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "diffHunk": "@@ -33,6 +33,7 @@\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n+\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNDc2Mg=="}, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYyNzU2OnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MTozMFrOGVUUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MTozMFrOGVUUww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNjI3NQ==", "bodyText": "Wrong table design", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425006275", "createdAt": "2020-05-14T09:41:30Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {\n+\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n+\t\tfiles.clear();\n+\t\thelper.deleteFilesTable();\n+\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\tFile f = new File(info.getPathToData());\n+\t\t\thelper.addFile(f);\n+\t\t\tfiles.put(f.getName(), f.lastModified());\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate void initCategoriesFromFiles() {\n+\t\tapp.getPoiTypes().clearCreatedCategories();\n+\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n+\t\tfor (BinaryMapIndexReader r : currentFile) {\n+\t\t\ttry {\n+\t\t\t\tr.initCategories();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n+\t\t\t}\n+\t\t}\n+\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n+\t}\n+\n+\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n+\t\tcategories.clear();\n+\t\thelper.deletePoiTypesTable();\n+\t\tfor (PoiCategory category : poiCategories) {\n+\t\t\thelper.addCategory(category);\n+\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n+\t\tList<String> filters = new ArrayList<>();\n+\t\tfor (PoiType poiType : poiTypeList) {\n+\t\t\tfilters.add(poiType.getKeyName());\n+\t\t}\n+\t\treturn filters;\n+\t}\n+\n+\tpublic class PoiDbHelper {\n+\n+\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n+\t\tprivate static final int DATABASE_VERSION = 1;\n+\n+\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n+\t\tprivate static final String FILE_NAME = \"name\";\n+\t\tprivate static final String FILE_DATE = \"date\";\n+\n+\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n+\t\t\t\tFILES_TABLE_NAME + \" (\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYzNTY1OnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MzozMlrOGVUZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MzozMlrOGVUZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzU3OQ==", "bodyText": "Probably this is not needed at all.", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425007579", "createdAt": "2020-05-14T09:43:32Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "diffHunk": "@@ -550,6 +539,7 @@ public void onCreateApplication() {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n+\t\tapp.poiHelper = startupInit(new PoiHelper(app), PoiHelper.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY1ODIzOnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0OTozOFrOGVUomQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0OTozOFrOGVUomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTM1Mw==", "bodyText": "List.contains ?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425011353", "createdAt": "2020-05-14T09:49:38Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY2MDIxOnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1MDowN1rOGVUpzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1MDowN1rOGVUpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTY2MQ==", "bodyText": "First create, then check?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425011661", "createdAt": "2020-05-14T09:50:07Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY2NDIwOnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1MDo1N1rOGVUsGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1MTowM1rOGVUsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI0OQ==", "bodyText": "Should it be method part of POICategory to check?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425012249", "createdAt": "2020-05-14T09:50:57Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI5OA==", "bodyText": "getPoiTypeByKeyName?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425012298", "createdAt": "2020-05-14T09:51:03Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI0OQ=="}, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxMDcyOnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzozMFrOGVVKlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMzozMFrOGVVKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDA1Mw==", "bodyText": "UI ?", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425020053", "createdAt": "2020-05-14T10:03:30Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java", "diffHunk": "@@ -632,6 +632,7 @@ protected void onPostExecute(String result) {\n \t\t\t} else {\n \t\t\t\ta.newDownloadIndexes();\n \t\t\t}\n+\t\t\tgetMyApplication().getPoiHelper().readPoiTypesFromMapAsync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165d1430e3e081d8b76c6a34bab6428647836861"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njk0Njg2OnYy", "diffSide": "RIGHT", "path": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowODowM1rOGW2V7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowODowM1rOGW2V7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjIwNA==", "bodyText": "?\nIterate in the loop over and check each subtype, it should be faster", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r426612204", "createdAt": "2020-05-18T13:08:03Z", "author": {"login": "vshcherb"}, "path": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "diffHunk": "@@ -9,27 +10,79 @@\n import net.osmand.binary.BinaryMapIndexReader.MapIndex;\n import net.osmand.binary.BinaryMapIndexReader.SearchPoiTypeFilter;\n import net.osmand.binary.BinaryMapIndexReader.SearchRequest;\n+import net.osmand.binary.BinaryMapPoiReaderAdapter;\n import net.osmand.data.Amenity;\n+import net.osmand.osm.MapPoiTypes;\n import net.osmand.osm.PoiCategory;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.poi.PoiFiltersHelper;\n import net.osmand.plus.resources.ResourceManager.BinaryMapReaderResource;\n import net.osmand.plus.resources.ResourceManager.BinaryMapReaderResourceType;\n import net.osmand.util.MapUtils;\n \n import org.apache.commons.logging.Log;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n public class AmenityIndexRepositoryBinary implements AmenityIndexRepository {\n \n \tprivate final static Log log = PlatformUtil.getLog(AmenityIndexRepositoryBinary.class);\n \tprivate BinaryMapReaderResource resource;\n+\tprivate MapPoiTypes poiTypes;\n+\tprivate Map<String, List<String>> poiCategories = new HashMap<>();\n \n-\tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource) {\n+\tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource, OsmandApplication app) {\n \t\tthis.resource = resource;\n+\t\tpoiTypes = app.getPoiTypes();\n+\t\tcheckCachedCategories(app.getPoiFilters());\n+\t}\n+\n+\tpublic Map<String, List<String>> getPoiCategories() {\n+\t\treturn poiCategories;\n+\t}\n+\n+\tprivate void checkCachedCategories(PoiFiltersHelper poiFiltersHelper) {\n+\t\tString fileName = resource.getFileName();\n+\t\tlong lastModified = resource.getFileLastModified();\n+\t\tPair<Long, Map<String, List<String>>> cache = poiFiltersHelper.getCacheByResourceName(fileName);\n+\t\tif (cache == null || cache.first != null && cache.first != lastModified) {\n+\t\t\ttry {\n+\t\t\t\tBinaryMapIndexReader reader = getOpenFile();\n+\t\t\t\tif (reader != null) {\n+\t\t\t\t\treader.initCategories();\n+\t\t\t\t\tList<BinaryMapPoiReaderAdapter.PoiRegion> regions = reader.getPoiIndexes();\n+\t\t\t\t\tfor (BinaryMapPoiReaderAdapter.PoiRegion region : regions) {\n+\t\t\t\t\t\tList<String> categories = region.getCategories();\n+\t\t\t\t\t\tList<List<String>> subCategories = region.getSubcategories();\n+\t\t\t\t\t\tfor (int i = 0; i < categories.size(); i++) {\n+\t\t\t\t\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categories.get(i));\n+\t\t\t\t\t\t\tSet<String> filters = new HashSet<>(subCategories.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a800d252053003f3f408d8b60319194fe31788a"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3372, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}