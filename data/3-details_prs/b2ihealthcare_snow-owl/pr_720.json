{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTczMjc5", "number": 720, "title": "Import API changes", "bodyText": "New content import Java API has been developed to provide developers the necessary tools for their plug-ins to easily validate and import content into Snow Owl Terminology Server.", "createdAt": "2020-11-26T16:19:51Z", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720", "merged": true, "mergeCommit": {"oid": "3470901eb85e676faeaf5cf711023647e6118783"}, "closed": true, "closedAt": "2020-12-08T09:09:50Z", "author": {"login": "cmark"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgF9lMAH2gAyNTI4MTczMjc5OmJlMzA1YWZjNTRhNzZhYmRiZGRkODExMzEwMzU1ZWUyMmU4NTFhYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj1XJRAH2gAyNTI4MTczMjc5OjcxMDkyYTk2NDQ1MmJkOWJlOTQwMmRjY2EzM2JiNDllNDFiMWYwOGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "be305afc54a76abdbddd811310355ee22e851aa7", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/be305afc54a76abdbddd811310355ee22e851aa7", "committedDate": "2020-11-25T22:19:36Z", "message": "[io] commit progress on new generic import API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edffe4d2f8642c3869db324fe2192580aec7af18", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/edffe4d2f8642c3869db324fe2192580aec7af18", "committedDate": "2020-11-25T22:44:04Z", "message": "SO-4346: add CodeSystemURI based build methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "108873031c0a075019764fb3573037955d088d78", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/108873031c0a075019764fb3573037955d088d78", "committedDate": "2020-11-26T14:48:08Z", "message": "[core] add hasChanges to CommitResult\n\nMake commitTimestamp primitive."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/e36799acb5d7c20c15e2829e6aab870222ffddcc", "committedDate": "2020-11-26T14:48:53Z", "message": "SO-4346: improve Import Defect API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDQ5NDkz", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#pullrequestreview-539449493", "createdAt": "2020-11-26T16:29:37Z", "commit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyOTozN1rOH6h8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozNDozM1rOH6iFuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNTU1NA==", "bodyText": "Are floating point dots/commas and negative signs allowed? Maybe E for powers of 10? \ud83d\ude03", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531135554", "createdAt": "2020-11-26T16:29:37Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.core.runtime.ISafeRunnable;\n+\n+import com.b2international.commons.StringUtils;\n+import com.b2international.snowowl.core.request.io.ImportDefect.ImportDefectType;\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.12 \n+ */\n+public final class ImportDefectAcceptor {\n+\n+\tprivate final String file;\n+\tprivate final List<ImportDefect> defects = Lists.newArrayList();\n+\n+\tpublic ImportDefectAcceptor(String file) {\n+\t\tthis.file = file;\n+\t}\n+\t\n+\tpublic List<ImportDefect> getDefects() {\n+\t\treturn defects;\n+\t}\n+\t\n+\tpublic void error(String message) {\n+\t\tnew ImportDefectBuilder().error(message);\n+\t}\n+\t\n+\tpublic void warn(String message) {\n+\t\tnew ImportDefectBuilder().warn(message);\n+\t}\n+\t\n+\tpublic void info(String message) {\n+\t\tnew ImportDefectBuilder().info(message);\n+\t}\n+\t\n+\tpublic ImportDefectBuilder on(String location) {\n+\t\treturn new ImportDefectBuilder().on(location);\n+\t}\n+\t\n+\t/**\n+\t * @since 7.12\n+\t */\n+\tpublic final class ImportDefectBuilder {\n+\t\t\n+\t\tprivate String location;\n+\t\tprivate Supplier<Boolean> when;\n+\n+\t\tpublic ImportDefectBuilder on(String location) {\n+\t\t\tthis.location = location;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ImportDefectBuilder whenThrows(ISafeRunnable runnable) {\n+\t\t\treturn when(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\trunnable.run();\n+\t\t\t\t\treturn false;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenEqual(Object a, Object b) {\n+\t\t\treturn when(Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNotEqual(Object a, Object b) {\n+\t\t\treturn when(!Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenBlank(String value) {\n+\t\t\treturn when(StringUtils.isEmpty(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNaN(String value) {\n+\t\t\treturn when(!CharMatcher.inRange('0', '9').matchesAllOf(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNjUxNA==", "bodyText": "Informational and warning messages could be let through here...", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531136514", "createdAt": "2020-11-26T16:31:31Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzAxOA==", "bodyText": "...and then it would make sense to return them along with the components imported.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137018", "createdAt": "2020-11-26T16:32:28Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzI5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.\n          \n          \n            \n            \t * Subclasses can optionally provide validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137297", "createdAt": "2020-11-26T16:33:06Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);\n+\t\t\t}\n+\t\t\t\n+\t\t} catch (ApiException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tString error = \"Unexpected error happened during the import of the source file: \" + attachment.getFileName();\n+\t\t\tcontext.log().error(error, e);\n+\t\t\treturn ImportResponse.error(error);\n+\t\t} finally {\n+\t\t\tcontext.log().info(\"Finished importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\t}\n+\t}\n+\n+//\t/**\n+//\t * Logs the import activity with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportActivity(final String message) {\n+//\t\tLogUtils.logImportActivity(context.log(), context.author(), context.path(), message);\n+//\t}\n+//\t\n+//\t/**\n+//\t * Logs the import warning with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportWarning(final String message) {\n+//\t\tLogUtils.logImportWarning(context.log(), context.author(), context.path(), message);\n+//\t}\n+\t\n+\t/**\n+\t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzY3OA==", "bodyText": "There is no return value, the import defect collecting object consumes all messages instead.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137678", "createdAt": "2020-11-26T16:33:57Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);\n+\t\t\t}\n+\t\t\t\n+\t\t} catch (ApiException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tString error = \"Unexpected error happened during the import of the source file: \" + attachment.getFileName();\n+\t\t\tcontext.log().error(error, e);\n+\t\t\treturn ImportResponse.error(error);\n+\t\t} finally {\n+\t\t\tcontext.log().info(\"Finished importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\t}\n+\t}\n+\n+//\t/**\n+//\t * Logs the import activity with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportActivity(final String message) {\n+//\t\tLogUtils.logImportActivity(context.log(), context.author(), context.path(), message);\n+//\t}\n+//\t\n+//\t/**\n+//\t * Logs the import warning with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportWarning(final String message) {\n+//\t\tLogUtils.logImportWarning(context.log(), context.author(), context.path(), message);\n+//\t}\n+\t\n+\t/**\n+\t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.\n+\t * @param context - the context to run the validation on\n+\t * @param attachment - the file attachment to validate\n+\t * @param defectsAcceptor - the acceptor that collects {@link ImportDefect}s through a few helper methods\n+\t * @param monitor - the monitor that can be used to track progress\n+\t * @return a {@link List} of {@link ImportDefect} instances that can aid the user pinpoint and resolve the errors/issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzk3OQ==", "bodyText": "No return value in this method either.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137979", "createdAt": "2020-11-26T16:34:33Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);\n+\t\t\t}\n+\t\t\t\n+\t\t} catch (ApiException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tString error = \"Unexpected error happened during the import of the source file: \" + attachment.getFileName();\n+\t\t\tcontext.log().error(error, e);\n+\t\t\treturn ImportResponse.error(error);\n+\t\t} finally {\n+\t\t\tcontext.log().info(\"Finished importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\t}\n+\t}\n+\n+//\t/**\n+//\t * Logs the import activity with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportActivity(final String message) {\n+//\t\tLogUtils.logImportActivity(context.log(), context.author(), context.path(), message);\n+//\t}\n+//\t\n+//\t/**\n+//\t * Logs the import warning with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportWarning(final String message) {\n+//\t\tLogUtils.logImportWarning(context.log(), context.author(), context.path(), message);\n+//\t}\n+\t\n+\t/**\n+\t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.\n+\t * @param context - the context to run the validation on\n+\t * @param attachment - the file attachment to validate\n+\t * @param defectsAcceptor - the acceptor that collects {@link ImportDefect}s through a few helper methods\n+\t * @param monitor - the monitor that can be used to track progress\n+\t * @return a {@link List} of {@link ImportDefect} instances that can aid the user pinpoint and resolve the errors/issues\n+\t * @throws Exception\n+\t */\n+\tprotected void doValidate(TransactionContext context, File attachment, ImportDefectAcceptor defectsAcceptor, IProgressMonitor monitor) throws Exception {\n+\t}\n+\n+\t/**\n+\t * Performs the import from the given file attachment.\n+\t * \n+\t * @param context - the context that can be used to commit changes\n+\t * @param attachment - the attachment file to import\n+\t * @param visitor - visitor that accepts visited component URIs\n+\t * @param monitor - the monitor that can be used to track progress\n+\t * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c26fb4d26607ab1021afabb537ae58d11445327", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/0c26fb4d26607ab1021afabb537ae58d11445327", "committedDate": "2020-11-26T17:06:53Z", "message": "SO-4346: add Serializable to ImportDefect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a6fc30cd598191f73752d0b9272d204548f1480", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/2a6fc30cd598191f73752d0b9272d204548f1480", "committedDate": "2020-11-26T17:28:18Z", "message": "SO-4346: return warn/info defects as part of the success result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a67f80503188b07ebecdf306852348a419dd32", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/d0a67f80503188b07ebecdf306852348a419dd32", "committedDate": "2020-11-26T17:29:00Z", "message": "SO-4346: log error when request return null response body"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5277980d7e37e64562c2380b227e2bca3dd6b4e", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/f5277980d7e37e64562c2380b227e2bca3dd6b4e", "committedDate": "2020-11-26T17:30:19Z", "message": "SO-4346: clean up in ImportRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "256449f938f0ca04ce12aaf082764a93da57a3ec", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/256449f938f0ca04ce12aaf082764a93da57a3ec", "committedDate": "2020-11-26T17:42:17Z", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java\n\nCo-authored-by: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc8f32461e2e5e7132833c4fc320403bb4496bc", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/adc8f32461e2e5e7132833c4fc320403bb4496bc", "committedDate": "2020-11-26T18:14:48Z", "message": "SO-4346: fix log statement substitution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NTA5NDg4", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#pullrequestreview-539509488", "createdAt": "2020-11-26T18:44:52Z", "commit": {"oid": "adc8f32461e2e5e7132833c4fc320403bb4496bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb65a2730ba26d54ccaa5aadf99752f0d86bff7", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/dbb65a2730ba26d54ccaa5aadf99752f0d86bff7", "committedDate": "2020-11-26T19:28:04Z", "message": "SO-4346: fix unused format argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02bc333f9dbb0cfa0d4695237c1a31be416b5ae", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/e02bc333f9dbb0cfa0d4695237c1a31be416b5ae", "committedDate": "2020-11-26T20:05:43Z", "message": "SO-4346: support optionalService up to the root context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c184cdea3c273524b21d12fef74015c27d6201", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/37c184cdea3c273524b21d12fef74015c27d6201", "committedDate": "2020-11-26T20:07:57Z", "message": "SO-4346: fall back to Locks.lockContext if parentLockContext not defined\n\n...in RepositoryTransactionContext (requires outer wrapping of Locks)\n\nFor any other inner logic that uses `TransactionContext` interface with\na custom made lock should still delegate its lockContext to the\n`TransactionContext.commit(...)` calls."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ad59b08a1c8a638ad7e6b548dda70f34b2cac3", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/94ad59b08a1c8a638ad7e6b548dda70f34b2cac3", "committedDate": "2020-11-26T21:32:02Z", "message": "SO-4346: move finished log message before sending back response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NTYxMjg3", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#pullrequestreview-539561287", "createdAt": "2020-11-26T21:59:47Z", "commit": {"oid": "94ad59b08a1c8a638ad7e6b548dda70f34b2cac3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb56b3db1eed7e147d8c46a5839d08525efb18a6", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/eb56b3db1eed7e147d8c46a5839d08525efb18a6", "committedDate": "2020-11-26T22:35:50Z", "message": "Merge branch '7.x' into improvements/import-api-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebcee47751c35313fde8e003a32f01946275393", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/2ebcee47751c35313fde8e003a32f01946275393", "committedDate": "2020-11-26T22:50:24Z", "message": "Merge branch '7.x' into improvements/import-api-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2fa86f3ec5a8f4e8b8d13dc4fe939ff268347ed", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/a2fa86f3ec5a8f4e8b8d13dc4fe939ff268347ed", "committedDate": "2020-12-01T10:04:53Z", "message": "Merge remote-tracking branch 'origin/7.x' into\nimprovements/import-api-refactor\n\nConflicts:\n\tcore/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/RepositoryTransactionContext.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a03fafc6eaa1b087d5b7f30eef12f79d29614e9", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/7a03fafc6eaa1b087d5b7f30eef12f79d29614e9", "committedDate": "2020-12-01T16:32:45Z", "message": "SO-4346: Use ImportDefectBuilder for RF2 content validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "082c123fdc78ec134d6e363bee67db3baacd7211", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/082c123fdc78ec134d6e363bee67db3baacd7211", "committedDate": "2020-12-02T11:38:39Z", "message": "SO-4346: Restrict maximum collected defects in ImportDefectAcceptor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f890c004ee5fb9094c21f7efa733c8c0528831d5", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/f890c004ee5fb9094c21f7efa733c8c0528831d5", "committedDate": "2020-12-02T11:42:36Z", "message": "SO-4346: Use generic ImportResponse in SnomedRf2ImportRequest\n\n- Update Rf2GlobalValidator to use an import defect collecting instance\n- Update Rf2ValidationIssueReporter to collect defects by source file\n- Collect visited component URIs in Rf2EffectiveTimeSlice\n- Update SnomedCommand after API change\n- Set ImportStatus based on ImportResponse in SnomedRf2ImportService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d3c9ac2a1c37c330f51b58bcf2a57afa6b049f8", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/8d3c9ac2a1c37c330f51b58bcf2a57afa6b049f8", "committedDate": "2020-12-02T11:46:33Z", "message": "SO-4483: support `dryRun` in RF2 import Java/REST APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6384209f869f0c53e774e78c61c400ea41185907", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/6384209f869f0c53e774e78c61c400ea41185907", "committedDate": "2020-12-03T09:17:02Z", "message": "SO-4346: Validate effective time slices in reverse chronological order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6b978d72eae50d776e04fae887a8c1fb80b538", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/ca6b978d72eae50d776e04fae887a8c1fb80b538", "committedDate": "2020-12-04T13:04:09Z", "message": "SO-4346: Create a copy of the HTreeMap's key set\n\nOne-time iteration of the key set is fast, but single \"contains\" checks\nare comparatively very slow."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbf4f0fce13118895c981c0d24f94c470b54946e", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/fbf4f0fce13118895c981c0d24f94c470b54946e", "committedDate": "2020-12-04T13:05:02Z", "message": "SO-4346: Register only concepts and reference sets in visited components"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfdb6db0dacb0201ce50929175cefb88b7a53d42", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/bfdb6db0dacb0201ce50929175cefb88b7a53d42", "committedDate": "2020-12-04T13:17:10Z", "message": "SO-4346: Treat empty \"when\" conditions as defects in...\n\n...ImportDefectBuilder; the \"error\", \"warn\", \"info\" shortcuts in\nImportDefectAcceptor won't register a defect otherwise."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e8f9c74e894eae194d7dfb30bdd40b31920984", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/b9e8f9c74e894eae194d7dfb30bdd40b31920984", "committedDate": "2020-12-04T13:47:02Z", "message": "SO-4346: Initialize defect location field with an empty string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a2a8a4c675a01d48300caf2fae38b2d3cad2f42", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/0a2a8a4c675a01d48300caf2fae38b2d3cad2f42", "committedDate": "2020-12-04T15:07:25Z", "message": "Merge remote-tracking branch 'origin/7.x' into improvements/import-api-refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDYzNDQx", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#pullrequestreview-546063441", "createdAt": "2020-12-07T11:34:01Z", "commit": {"oid": "0a2a8a4c675a01d48300caf2fae38b2d3cad2f42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTozNDowMVrOIAifsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTozNDowMVrOIAifsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQzNjA4Mg==", "bodyText": "I suggest returning all defects from the API and limiting visualization on user interfaces instead.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r537436082", "createdAt": "2020-12-07T11:34:01Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.core.runtime.ISafeRunnable;\n+\n+import com.b2international.commons.StringUtils;\n+import com.b2international.snowowl.core.request.io.ImportDefect.ImportDefectType;\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.12 \n+ */\n+public final class ImportDefectAcceptor {\n+\n+\tprivate static final int DEFAULT_MAX_DEFECTS = 100_000;\n+\t\n+\tprivate final String file;\n+\tprivate final List<ImportDefect> defects = Lists.newArrayList();\n+\n+\tpublic ImportDefectAcceptor(String file) {\n+\t\tthis(file, DEFAULT_MAX_DEFECTS);\n+\t}\n+\t\n+\tpublic ImportDefectAcceptor(String file, int maxDefects) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<ImportDefect> getDefects() {\n+\t\treturn List.copyOf(defects);\n+\t}\n+\t\n+\tpublic void error(String message) {\n+\t\tnew ImportDefectBuilder().error(message);\n+\t}\n+\t\n+\tpublic void warn(String message) {\n+\t\tnew ImportDefectBuilder().warn(message);\n+\t}\n+\t\n+\tpublic void info(String message) {\n+\t\tnew ImportDefectBuilder().info(message);\n+\t}\n+\t\n+\tpublic ImportDefectBuilder on(String location) {\n+\t\treturn new ImportDefectBuilder().on(location);\n+\t}\n+\t\n+\t/**\n+\t * @since 7.12\n+\t */\n+\tpublic final class ImportDefectBuilder {\n+\t\t\n+\t\tprivate String location = \"\";\n+\t\tprivate Supplier<Boolean> when;\n+\n+\t\tpublic ImportDefectBuilder on(String location) {\n+\t\t\tthis.location = location;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ImportDefectBuilder whenThrows(ISafeRunnable runnable) {\n+\t\t\treturn when(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\trunnable.run();\n+\t\t\t\t\treturn false;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenEqual(Object a, Object b) {\n+\t\t\treturn when(Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNotEqual(Object a, Object b) {\n+\t\t\treturn when(!Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenBlank(String value) {\n+\t\t\treturn when(StringUtils.isEmpty(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNaN(String value) {\n+\t\t\treturn when(!CharMatcher.inRange('0', '9').matchesAllOf(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder when(Boolean when) {\n+\t\t\treturn when(() -> when);\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder when(Supplier<Boolean> when) {\n+\t\t\tthis.when = when;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic void error(String message, Object...args) {\n+\t\t\terror(String.format(message, args));\n+\t\t}\n+\t\t\n+\t\tpublic void error(String message) {\n+\t\t\tbuild(message, ImportDefectType.ERROR);\n+\t\t}\n+\t\t\n+\t\tpublic void warn(String message, Object...args) {\n+\t\t\twarn(String.format(message, args));\n+\t\t}\n+\t\t\n+\t\tpublic void warn(String message) {\n+\t\t\tbuild(message, ImportDefectType.WARNING);\n+\t\t}\n+\t\t\n+\t\tpublic void info(String message, Object...args) {\n+\t\t\tinfo(String.format(message, args));\n+\t\t}\n+\t\t\n+\t\tpublic void info(String message) {\n+\t\t\tbuild(message, ImportDefectType.INFO);\n+\t\t}\n+\t\t\n+\t\tprivate void build(String message, ImportDefectType type) {\n+\t\t\tif (when == null || when.get()) {\n+\t\t\t\tdefects.add(new ImportDefect(file, location, message, type));\n+\n+\t\t\t\t// Remove the earliest defect on overflow\n+\t\t\t\tif (defects.size() > DEFAULT_MAX_DEFECTS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2a8a4c675a01d48300caf2fae38b2d3cad2f42"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e609fe599444a14d61a6822119742af8fb82361c", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/e609fe599444a14d61a6822119742af8fb82361c", "committedDate": "2020-12-07T13:12:06Z", "message": "Revert \"SO-4346: Restrict maximum collected defects in ImportDefectAcceptor\"\n\nThis reverts commit 082c123fdc78ec134d6e363bee67db3baacd7211."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71092a964452bd9be9402dcca33bb49e41b1f08b", "author": {"user": {"login": "apeteri", "name": "Andr\u00e1s P\u00e9teri"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/71092a964452bd9be9402dcca33bb49e41b1f08b", "committedDate": "2020-12-07T13:14:50Z", "message": "SO-4346: Remove restriction on defects from Rf2ValidationIssueReporter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4850, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}