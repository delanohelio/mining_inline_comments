{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMzQyNzYz", "number": 693, "title": "SO-4307: always use preferred synonym for reference set displays", "bodyText": "", "createdAt": "2020-10-12T06:33:25Z", "url": "https://github.com/b2ihealthcare/snow-owl/pull/693", "merged": true, "mergeCommit": {"oid": "08519f8883b7610e1170606b6b5a48b9174cc1cb"}, "closed": true, "closedAt": "2020-10-14T09:47:00Z", "author": {"login": "cmark"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRuCeWgH2gAyNTAxMzQyNzYzOmQwYjcyZjczN2FiMTRhM2UzNWZlYWRiMTQ5YjAyY2FlYTIzM2U5NGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSXk79AH2gAyNTAxMzQyNzYzOjI0YjdkMTJkMzYyY2Y1MWM2MDdjMGIyMWQ1NDIwMmU2MmY1ODU5MDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0b72f737ab14a3e35feadb149b02caea233e94b", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/d0b72f737ab14a3e35feadb149b02caea233e94b", "committedDate": "2020-10-12T06:32:17Z", "message": "SO-4307: fetch always pt() for reference set's label"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Mzk4NzA3", "url": "https://github.com/b2ihealthcare/snow-owl/pull/693#pullrequestreview-506398707", "createdAt": "2020-10-12T08:25:12Z", "commit": {"oid": "d0b72f737ab14a3e35feadb149b02caea233e94b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d37b16a53f10b1c26159a7a3e839852b6c317d50", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/d37b16a53f10b1c26159a7a3e839852b6c317d50", "committedDate": "2020-10-12T13:08:34Z", "message": "SI-4307: add concept map search api test-cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1758b9baec947ed015ba247ad8ce3124cd564219", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/1758b9baec947ed015ba247ad8ce3124cd564219", "committedDate": "2020-10-12T13:09:01Z", "message": "SI-4307: move concept map search api test to its own class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed7428fd59667fcb2b77dda01a71a810323dc0b3", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/ed7428fd59667fcb2b77dda01a71a810323dc0b3", "committedDate": "2020-10-12T13:22:15Z", "message": "SO-4307: set locale to fix test-case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6df1f98dd4d800a633c01e22a9326bface1072", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/bf6df1f98dd4d800a633c01e22a9326bface1072", "committedDate": "2020-10-12T13:23:35Z", "message": "Merge remote-tracking branch 'origin/7.x' into issue/so-4307-metadata-concepts-always-display-pt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjE5Nzcx", "url": "https://github.com/b2ihealthcare/snow-owl/pull/693#pullrequestreview-506619771", "createdAt": "2020-10-12T13:29:14Z", "commit": {"oid": "bf6df1f98dd4d800a633c01e22a9326bface1072"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzgyNzI1", "url": "https://github.com/b2ihealthcare/snow-owl/pull/693#pullrequestreview-507782725", "createdAt": "2020-10-13T20:00:08Z", "commit": {"oid": "bf6df1f98dd4d800a633c01e22a9326bface1072"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDowMDowOFrOHg3MEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDowMTozNFrOHg3PAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyMDY5MA==", "bodyText": "Restore this single import statement and configure your IDE to use * imports above 10 import statements.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/693#discussion_r504220690", "createdAt": "2020-10-13T20:00:08Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.snomed.core.rest.tests/src/com/b2international/snowowl/snomed/core/rest/AllSnomedApiTests.java", "diffHunk": "@@ -32,13 +32,24 @@\n import com.b2international.snowowl.snomed.core.issue.IssueSO2503RemoteJobDynamicMappingFix;\n import com.b2international.snowowl.snomed.core.request.ConceptSearchRequestSnomedTest;\n import com.b2international.snowowl.snomed.core.request.MemberSearchRequestSnomedTest;\n+import com.b2international.snowowl.snomed.core.request.SnomedConceptMapSearchRequestTest;\n import com.b2international.snowowl.snomed.core.rest.branches.SnomedBranchingApiTest;\n import com.b2international.snowowl.snomed.core.rest.branches.SnomedMergeApiTest;\n import com.b2international.snowowl.snomed.core.rest.branches.SnomedMergeConflictTest;\n import com.b2international.snowowl.snomed.core.rest.branches.SnomedReviewApiTest;\n import com.b2international.snowowl.snomed.core.rest.classification.SnomedClassificationApiTest;\n import com.b2international.snowowl.snomed.core.rest.compare.SnomedMapTypeReferenceSetCompareTest;\n-import com.b2international.snowowl.snomed.core.rest.components.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6df1f98dd4d800a633c01e22a9326bface1072"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyMTQ0MQ==", "bodyText": "Use test user configuration from RestExtensions.USER, never hardcode a user name into any test or function.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/693#discussion_r504221441", "createdAt": "2020-10-13T20:01:34Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.snomed.core.rest.tests/src/com/b2international/snowowl/snomed/core/request/SnomedConceptMapSearchRequestTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.snomed.core.request;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.UUID;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.b2international.snowowl.core.codesystem.CodeSystemRequests;\n+import com.b2international.snowowl.core.domain.ConceptMapMapping;\n+import com.b2international.snowowl.core.domain.ConceptMapMappings;\n+import com.b2international.snowowl.snomed.common.SnomedConstants;\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants;\n+import com.b2international.snowowl.snomed.core.domain.Acceptability;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.datastore.SnomedRefSetUtil;\n+import com.b2international.snowowl.snomed.datastore.request.SnomedDescriptionCreateRequestBuilder;\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRelationshipCreateRequestBuilder;\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests;\n+import com.b2international.snowowl.test.commons.Services;\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * @since 7.11\n+ */\n+public class SnomedConceptMapSearchRequestTest {\n+\t\n+\tprivate static final String CODESYSTEM = \"SNOMEDCT/LATEST\";\n+\t\n+\tprivate static final String REFERENCED_COMPONENT = Concepts.SUBSTANCE;\n+\t\n+\tprivate static final String ID = \"105590001\";\n+\tprivate static final String PT = \"Substance\";\n+\tprivate static final String FSN = \"Substance (substance)\";\n+\t\n+\tprivate static final String MAP_TARGET_1 = \"map_target_1\";\n+\tprivate static final String MAP_TARGET_2 = \"map_target_2\";\n+\n+\t\n+\t@Rule \n+\tpublic TestName testName = new TestName();\n+\t\n+\t@Test\n+\tpublic void filterByReferencedComponent() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_1);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t\t.filterByReferencedComponentId(REFERENCED_COMPONENT)\n+\t\t\t\t.setLocales(\"en\")\n+\t\t\t\t.build(CODESYSTEM)\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync();\n+\n+\t\tassertTrue(!conceptMaps.isEmpty());\n+\t\tconceptMaps.forEach(concepMap -> assertEquals(REFERENCED_COMPONENT, concepMap.getSourceComponentURI().identifier()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void filterByMapTarget() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_1);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t\t.filterByMapTarget(MAP_TARGET_1)\n+\t\t\t\t.setLocales(\"en\")\n+\t\t\t\t.build(CODESYSTEM)\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync();\n+\n+\t\tassertTrue(!conceptMaps.isEmpty());\n+\t\tconceptMaps.forEach(concepMap -> assertEquals(MAP_TARGET_1, concepMap.getTargetComponentURI().identifier()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void filterByComponent() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, Concepts.IS_A);\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, Concepts.IS_A);\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, Concepts.IS_A, REFERENCED_COMPONENT);\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, Concepts.IS_A, Concepts.IS_A);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t.filterByComponentId(REFERENCED_COMPONENT)\n+\t\t\t.setLocales(\"en\")\n+\t\t\t.build(CODESYSTEM)\n+\t\t\t.execute(Services.bus())\n+\t\t\t.getSync();\n+\n+\t\tassertTrue(!conceptMaps.isEmpty());\n+\t\tconceptMaps.forEach(concepMap -> assertTrue(\n+\t\t\t\tREFERENCED_COMPONENT.equals(concepMap.getSourceComponentURI().identifier()) || \n+\t\t\t\tREFERENCED_COMPONENT.equals(concepMap.getTargetComponentURI().identifier())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void filterByConceptMap() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_1);\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_2);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t\t.filterByConceptMap(refSetId)\n+\t\t\t\t.setLocales(\"en\")\n+\t\t\t\t.build(CODESYSTEM)\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync();\n+\n+\t\tassertEquals(2, conceptMaps.getTotal());\n+\t}\n+\t\n+\t@Test\n+\tpublic void useDefaultPreferredDisplay() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_1);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t\t.filterByConceptMap(refSetId)\n+\t\t\t\t.setLocales(\"en\")\n+\t\t\t\t.build(CODESYSTEM)\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync();\n+\n+\t\tassertEquals(1, conceptMaps.getTotal());\n+\t\tfinal ConceptMapMapping conceptMapMapping = conceptMaps.first().get();\n+\t\tassertEquals(ID, conceptMapMapping.getSourceTerm());\n+\t\tassertEquals(testName.getMethodName(), conceptMapMapping.getContainerTerm());\n+\t}\n+\t\n+\t@Test\n+\tpublic void setPreferredDisplayToPT() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_1);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t\t.filterByConceptMap(refSetId)\n+\t\t\t\t.setLocales(\"en\")\n+\t\t\t\t.setPreferredDisplay(\"PT\")\n+\t\t\t\t.build(CODESYSTEM)\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync();\n+\n+\t\tassertEquals(1, conceptMaps.getTotal());\n+\t\tfinal ConceptMapMapping conceptMapMapping = conceptMaps.first().get();\n+\t\tassertEquals(PT, conceptMapMapping.getSourceTerm());\n+\t\tassertEquals(testName.getMethodName(), conceptMapMapping.getContainerTerm());\n+\t}\n+\t\n+\t@Test\n+\tpublic void setPreferredDisplayToFSN() {\n+\t\tfinal String refSetId = createSimpleMapTypeRefSet();\n+\t\tcreateSimpleMapTypeRefSetMember(refSetId, REFERENCED_COMPONENT, MAP_TARGET_1);\n+\t\t\n+\t\tfinal ConceptMapMappings conceptMaps = CodeSystemRequests.prepareSearchConceptMapMappings()\n+\t\t\t\t.filterByConceptMap(refSetId)\n+\t\t\t\t.setPreferredDisplay(\"FSN\")\n+\t\t\t\t.setLocales(\"en\")\n+\t\t\t\t.build(CODESYSTEM)\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync();\n+\n+\t\tassertEquals(1, conceptMaps.getTotal());\n+\t\tfinal ConceptMapMapping conceptMapMapping = conceptMaps.first().get();\n+\t\tassertEquals(FSN, conceptMapMapping.getSourceTerm());\n+\t\tassertEquals(testName.getMethodName(), conceptMapMapping.getContainerTerm());\n+\t}\n+\t\n+\tprivate String createSimpleMapTypeRefSet() {\n+\t\treturn SnomedRequests.prepareNewConcept()\n+\t\t\t\t.setIdFromNamespace(Concepts.B2I_NAMESPACE)\n+\t\t\t\t.setActive(true)\n+\t\t\t\t.setModuleId(Concepts.MODULE_SCT_CORE)\n+\t\t\t\t.addDescription(createDescription(testName.getMethodName() + \" (foundation metadata concept)\", SnomedConstants.Concepts.FULLY_SPECIFIED_NAME))\n+\t\t\t\t.addDescription(createDescription(testName.getMethodName(), SnomedConstants.Concepts.SYNONYM))\n+\t\t\t\t.addRelationship(createIsaRelationship(Concepts.STATED_RELATIONSHIP, SnomedRefSetUtil.getParentConceptId(SnomedRefSetType.SIMPLE_MAP)))\n+\t\t\t\t.addRelationship(createIsaRelationship(Concepts.INFERRED_RELATIONSHIP, SnomedRefSetUtil.getParentConceptId(SnomedRefSetType.SIMPLE_MAP)))\n+\t\t\t\t.setRefSet(SnomedRequests.prepareNewRefSet()\n+\t\t\t\t\t\t.setReferencedComponentType(SnomedTerminologyComponentConstants.CONCEPT)\n+\t\t\t\t\t\t.setType(SnomedRefSetType.SIMPLE_MAP))\n+\t\t\t\t.build(CODESYSTEM, \"info@b2international.com\", \"New Reference Set\")\n+\t\t\t\t.execute(Services.bus())\n+\t\t\t\t.getSync()\n+\t\t\t\t.getResultAs(String.class);\n+\t}\n+\t\n+\tprivate static SnomedDescriptionCreateRequestBuilder createDescription(final String term, final String type) {\n+\t\treturn SnomedRequests.prepareNewDescription()\n+\t\t\t.setIdFromNamespace(Concepts.B2I_NAMESPACE)\n+\t\t\t.setActive(true)\n+\t\t\t.setModuleId(Concepts.MODULE_SCT_CORE)\n+\t\t\t.setLanguageCode(\"en\")\n+\t\t\t.setTypeId(type)\n+\t\t\t.setTerm(term)\n+\t\t\t.setCaseSignificanceId(Concepts.ENTIRE_TERM_CASE_INSENSITIVE)\n+\t\t\t.setAcceptability(ImmutableMap.of(SnomedConstants.Concepts.REFSET_LANGUAGE_TYPE_US, Acceptability.PREFERRED));\n+\t}\n+\t\n+\tprivate static SnomedRelationshipCreateRequestBuilder createIsaRelationship(final String characteristicTypeId, String destinationId) {\n+\t\treturn SnomedRequests.prepareNewRelationship() \n+\t\t\t.setIdFromNamespace(Concepts.B2I_NAMESPACE)\n+\t\t\t.setActive(true)\n+\t\t\t.setModuleId(Concepts.MODULE_SCT_CORE)\n+\t\t\t.setDestinationId(destinationId)\n+\t\t\t.setTypeId(Concepts.IS_A)\n+\t\t\t.setCharacteristicTypeId(characteristicTypeId)\n+\t\t\t.setModifierId(Concepts.EXISTENTIAL_RESTRICTION_MODIFIER);\n+\t}\n+\t\n+\tprivate void createSimpleMapTypeRefSetMember(final String rfId, final String sourceCode, final String targetCode) {\n+\t\tSnomedRequests.prepareNewMember()\n+\t\t\t.setId(UUID.randomUUID().toString())\n+\t\t\t.setReferenceSetId(rfId)\n+\t\t\t.setReferencedComponentId(sourceCode)\n+\t\t\t.setActive(true)\n+\t\t\t.setModuleId(Concepts.MODULE_SCT_CORE)\n+\t\t\t.setProperties(ImmutableMap.of(SnomedRf2Headers.FIELD_MAP_TARGET, targetCode))\n+\t\t\t.build(CODESYSTEM, \"info@b2international.com\", \"New Reference Set\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6df1f98dd4d800a633c01e22a9326bface1072"}, "originalPosition": 237}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "014e0a8e63435c2911e29455529e6bc705e95393", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/014e0a8e63435c2911e29455529e6bc705e95393", "committedDate": "2020-10-14T06:37:56Z", "message": "SO-4307: change back to * import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0454e4a138766f96b7670381a0dfb81b8de1f729", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/0454e4a138766f96b7670381a0dfb81b8de1f729", "committedDate": "2020-10-14T06:48:41Z", "message": "SO-4307: remove hard coded users"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b7d12d362cf51c607c0b21d54202e62f585904", "author": {"user": {"login": "kovacstomi", "name": "Tam\u00e1s Kov\u00e1cs"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/24b7d12d362cf51c607c0b21d54202e62f585904", "committedDate": "2020-10-14T06:56:02Z", "message": "Merge remote-tracking branch 'origin/7.x' into issue/so-4307-metadata-concepts-always-display-pt"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4904, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}