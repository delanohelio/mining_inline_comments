{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzMwMjI2", "number": 708, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowOTo0M1rOE27zcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozOToxN1rOE6HCIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDM4Mzg1OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/internal/validation/ValidationConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowOTo0M1rOHv_wag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowOTo0M1rOHv_wag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4OTcwNg==", "bodyText": "Why do you need both?", "url": "https://github.com/b2ihealthcare/snow-owl/pull/708#discussion_r520089706", "createdAt": "2020-11-09T20:09:43Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/internal/validation/ValidationConfiguration.java", "diffHunk": "@@ -29,6 +29,8 @@\n \tpublic static final String IS_UNPUBLISHED_ONLY = \"isUnpublishedOnly\";\n \tpublic static final String USE_FSN = \"useFsn\";\n \tpublic static final String LOCALES = \"extendedLocales\";\n+\tpublic static final String CODE_SYSTEMS = \"codeSystems\";\n+\tpublic static final String CODE_SYSTEM = \"codeSystem\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b5eea9882f1b0d0b2250c5f5b3fa07661d97d8d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDM4OTM3OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/validation/ValidateRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMTowOVrOHv_zqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMTowOVrOHv_zqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MDUzNw==", "bodyText": "Let's have a factory method on ComponentURI that receives a ComponentIdentifier, so it's easier to convert one from the other. Add it to the other PR #707", "url": "https://github.com/b2ihealthcare/snow-owl/pull/708#discussion_r520090537", "createdAt": "2020-11-09T20:11:09Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/validation/ValidateRequest.java", "diffHunk": "@@ -159,34 +155,29 @@ private ValidationResult doValidate(BranchContext context, Writer index) throws\n \t\t\t\t\t\tfinal Collection<ComponentIdentifier> ruleWhiteListEntries = whiteListedEntries.removeAll(ruleId);\n \t\t\t\t\t\tfinal String toolingId = rules.stream().filter(rule -> ruleId.equals(rule.getId())).findFirst().get().getToolingId();\n \t\t\t\t\t\tfor (ValidationIssueDetails issueDetails : ruleIssues.issueDetails) {\n+\t\t\t\t\t\t\tfinal ValidationIssue validationIssue;\n \t\t\t\t\t\t\tComponentIdentifier componentIdentifier = issueDetails.affectedComponentId;\n \t\t\t\t\t\t\t\n \t\t\t\t\t\t\tif (!existingIsssuesByComponentIdentifier.containsKey(componentIdentifier)) {\n-\t\t\t\t\t\t\t\tfinal ValidationIssue validationIssue = new ValidationIssue(\n+\t\t\t\t\t\t\t\tvalidationIssue = new ValidationIssue(\n \t\t\t\t\t\t\t\t\t\tUUID.randomUUID().toString(),\n \t\t\t\t\t\t\t\t\t\truleId,\n-\t\t\t\t\t\t\t\t\t\tbranchPath,\n-\t\t\t\t\t\t\t\t\t\tcomponentIdentifier,\n+\t\t\t\t\t\t\t\t\t\tComponentURI.of(codeSystemURI, componentIdentifier.getTerminologyComponentId(), componentIdentifier.getComponentId()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b5eea9882f1b0d0b2250c5f5b3fa07661d97d8d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDM5NjkwOnYy", "diffSide": "RIGHT", "path": "snomed/com.b2international.snowowl.validation.snomed/src/test/java/com/b2international/snowowl/validation/snomed/GenericValidationRuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMzoxMVrOHv_4LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMzoxMVrOHv_4LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MTY5Mw==", "bodyText": "This should be added to the core tests, it should not part of the SNOMED CT Validation Rule module.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/708#discussion_r520091693", "createdAt": "2020-11-09T20:13:11Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/test/java/com/b2international/snowowl/validation/snomed/GenericValidationRuleTest.java", "diffHunk": "@@ -59,6 +60,24 @@\n @RunWith(Parameterized.class)\n public class GenericValidationRuleTest extends BaseGenericValidationRuleTest {\n \t\n+\t@Test\n+\tpublic void codeSystemURITest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b5eea9882f1b0d0b2250c5f5b3fa07661d97d8d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjUyMzg5OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/validation/RepositoryValidationRestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NDo0NlrOH0zI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NDo0NlrOH0zI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNTg1MQ==", "bodyText": "No need to wrap into CodeSystemURI here.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/708#discussion_r525125851", "createdAt": "2020-11-17T12:44:46Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/validation/RepositoryValidationRestService.java", "diffHunk": "@@ -109,16 +110,16 @@ public RepositoryValidationRestService(String repositoryId) {\n \t\t\t@RequestBody \n \t\t\tfinal ValidationRestInput validationInput) {\n \n-\t\tfinal String uniqueJobId = ValidationRequests.createUniqueValidationJobKey(repositoryId, validationInput.getBranchPath());\n+\t\tfinal String uniqueJobId = ValidationRequests.createUniqueValidationJobKey(validationInput.getCodeSystemURI());\n \t\t\n \t\tfinal String jobId = ValidationRequests\n \t\t\t\t.prepareValidate()\n \t\t\t\t.setRuleParameters(ImmutableMap.of(\n \t\t\t\t\tValidationConfiguration.IS_UNPUBLISHED_ONLY, validationInput.isUnpublishedOnly()\n \t\t\t\t))\n \t\t\t\t.setRuleIds(validationInput.getRuleIds())\n-\t\t\t\t.build(repositoryId, validationInput.getBranchPath())\n-\t\t\t\t.runAsJobWithRestart(uniqueJobId, String.format(\"Validating branch '%s'\", validationInput.getBranchPath()))\n+\t\t\t\t.build(new CodeSystemURI(validationInput.getCodeSystemURI()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "588abbacf289e839b021e64c4ba24abc1ee53354"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjUzMzMyOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/validation/ValidationRestInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NzoyOFrOH0zOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0NzoyOFrOH0zOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzM1MA==", "bodyText": "This changes the API in a non-backward compatible manner, please keep the branchPath argument and make it deprecated.\nIntroduce a new resource argument instead of the codeSystemURI and mark it as a replacement of the branchPath.\nRead order should be, resource first, if that is empty then fall back to branchPath.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/708#discussion_r525127350", "createdAt": "2020-11-17T12:47:28Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/validation/ValidationRestInput.java", "diffHunk": "@@ -25,19 +25,19 @@\n public class ValidationRestInput {\n \n \t@NotEmpty\n-\tprivate String branchPath;\n+\tprivate String codeSystemURI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "588abbacf289e839b021e64c4ba24abc1ee53354"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzY4MDk5OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozOToxN1rOH0-WQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjozOToxN1rOH0-WQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwOTUwNA==", "bodyText": "Swap left and right of the equals check.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/708#discussion_r525309504", "createdAt": "2020-11-17T16:39:17Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java", "diffHunk": "@@ -104,18 +104,29 @@ public final ComponentIdentifier toComponentIdentifier() {\n \t\treturn ComponentIdentifier.of(terminologyComponentId(), identifier());\n \t}\n \n-\tprivate ComponentURI(CodeSystemURI codeSystem, short terminologyComponentId, String identifier) {\n-\t\tcheckNotNull(codeSystem, \"Codesystem argument should not be null.\");\n+\tprivate ComponentURI(CodeSystemURI codeSystemURI, short terminologyComponentId, String identifier) {\n+\t\tcheckNotNull(codeSystemURI, \"Codesystem argument should not be null.\");\n \t\tcheckArgument(terminologyComponentId >= TerminologyRegistry.UNSPECIFIED_NUMBER_SHORT,\n \t\t\t\t\"Terminology component id should be either unspecified (-1) or greater than zero. Got: '%s'.\", terminologyComponentId);\n-\t\tthis.codeSystemUri = codeSystem;\n+\t\tboolean isUnspecified = codeSystemURI.getCodeSystem().equals(TerminologyRegistry.UNSPECIFIED) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "588abbacf289e839b021e64c4ba24abc1ee53354"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1619, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}