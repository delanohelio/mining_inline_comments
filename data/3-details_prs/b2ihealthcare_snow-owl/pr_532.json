{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTkzNDMy", "number": 532, "title": "SO-4007 Restore effectiveTime during RF2 Delta imports", "bodyText": "This PR adds the ability to run the effectiveTime restore process during RF2 Delta imports.\nThis change will make sure that the effectiveTime field remains set to the proper latest released version effectiveTime even if an RF2 Delta import contains a row with the same properties but with the effectiveTime unset.", "createdAt": "2020-04-14T06:27:01Z", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532", "merged": true, "mergeCommit": {"oid": "5982b3334d4a0fcc4b95baff2837b766ff248331"}, "closed": true, "closedAt": "2020-04-14T12:33:17Z", "author": {"login": "cmark"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXdQxBAH2gAyNDAyOTkzNDMyOjI0NDM3NTdmZTkzNGE2NmE0NTYzYzFlZGZjNGFhYTcwNWE3NjlkOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXitI6gH2gAyNDAyOTkzNDMyOjIwOTY1YjIzOWEwMTBjY2FmYzVlOTQ0ODRlODBiZTVmOTE1ZTQ4OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2443757fe934a66a4563c1edfc4aaa705a769d95", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/2443757fe934a66a4563c1edfc4aaa705a769d95", "committedDate": "2020-04-14T06:11:54Z", "message": "SO-4007: support additional predicate when checking for running jobs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdfe761650917ec7003368b7fbad2061accff742", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/cdfe761650917ec7003368b7fbad2061accff742", "committedDate": "2020-04-14T06:12:42Z", "message": "SO-4007: rename RF2ReleaseType field `type` due to collision with...\n\n...`Request.getType()` method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/8cc0200df0c97f6c9ce859b1a9d28f4028f080c7", "committedDate": "2020-04-14T06:18:12Z", "message": "SO-4007 #resolve\n\nRun effectiveTime restore process during RF2 Delta imports."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjQ4NDYx", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#pullrequestreview-392648461", "createdAt": "2020-04-14T06:56:15Z", "commit": {"oid": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1NjoxNVrOGFAoRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1NjoxNVrOGFAoRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjM3Mw==", "bodyText": "The predicate is not applied to the current job.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r407906373", "createdAt": "2020-04-14T06:56:15Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +83,33 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param predicate - the predicate filter to further customize the search process\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<RemoteJobEntry> predicate) {\n+\t\tcheckNotNull(predicate, \"Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n \t\t\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "committedDate": "2020-04-14T10:27:04Z", "message": "SO-4007: use parametersPredicate instead of jobPredicate in...\n\n...ServiceProvider.isJobRunning() method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODM4NDU0", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#pullrequestreview-392838454", "createdAt": "2020-04-14T11:29:34Z", "commit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyOTozNVrOGFKSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMDowNFrOGFKTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDU2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param parametersPredice - the predicate to filter the job by its parameters\n          \n          \n            \n            \t * @return\n          \n          \n            \n            \t */\n          \n          \n            \n            \tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n          \n          \n            \n            \t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n          \n          \n            \n            \t * @param parametersPredicate - the predicate to filter the job by its parameters\n          \n          \n            \n            \t * @return\n          \n          \n            \n            \t */\n          \n          \n            \n            \tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredicate) {\n          \n          \n            \n            \t\tcheckNotNull(parametersPredicate, \"Parameters predicate should not be null\");", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064563", "createdAt": "2020-04-14T11:29:35Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n          \n          \n            \n            \t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredicate.test(job.get().getParameters(service(ObjectMapper.class)));", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064716", "createdAt": "2020-04-14T11:29:50Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.filter(parametersPredice)\n          \n          \n            \n            \t\t\t\t.filter(parametersPredicate)", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064836", "createdAt": "2020-04-14T11:30:04Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n \t\t}\n \n \t\t// if not inside a job context or running in non-job context check the jobs index\n-\t\treturn JobRequests.prepareSearch().one().filterByKey(jobKey).build().execute(this).first().map(RemoteJobEntry::isRunning).orElse(false);\n+\t\treturn JobRequests.prepareSearch().one()\n+\t\t\t\t.filterByKey(jobKey)\n+\t\t\t\t.build()\n+\t\t\t\t.execute(this)\n+\t\t\t\t.first()\n+\t\t\t\t.filter(RemoteJobEntry::isRunning)\n+\t\t\t\t.map(j -> j.getParameters(service(ObjectMapper.class)))\n+\t\t\t\t.filter(parametersPredice)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f38b2f5a706b8740d29848c9bfc639d52672d5da", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/f38b2f5a706b8740d29848c9bfc639d52672d5da", "committedDate": "2020-04-14T12:32:13Z", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdced8215af673e46c67fbf5043c5574863009d2", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/bdced8215af673e46c67fbf5043c5574863009d2", "committedDate": "2020-04-14T12:32:19Z", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20965b239a010ccafc5e94484e80be5f915e4892", "author": {"user": {"login": "cmark", "name": "Mark Czotter"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/20965b239a010ccafc5e94484e80be5f915e4892", "committedDate": "2020-04-14T12:32:25Z", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}