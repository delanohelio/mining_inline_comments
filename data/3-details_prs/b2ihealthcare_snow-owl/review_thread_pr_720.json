{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTczMjc5", "number": 720, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyOTozN1rOE9s4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTozNDowMVrOFBu-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTMzODk2OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyOTozN1rOH6h8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyNjoyOVrOH6l0bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNTU1NA==", "bodyText": "Are floating point dots/commas and negative signs allowed? Maybe E for powers of 10? \ud83d\ude03", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531135554", "createdAt": "2020-11-26T16:29:37Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.core.runtime.ISafeRunnable;\n+\n+import com.b2international.commons.StringUtils;\n+import com.b2international.snowowl.core.request.io.ImportDefect.ImportDefectType;\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.12 \n+ */\n+public final class ImportDefectAcceptor {\n+\n+\tprivate final String file;\n+\tprivate final List<ImportDefect> defects = Lists.newArrayList();\n+\n+\tpublic ImportDefectAcceptor(String file) {\n+\t\tthis.file = file;\n+\t}\n+\t\n+\tpublic List<ImportDefect> getDefects() {\n+\t\treturn defects;\n+\t}\n+\t\n+\tpublic void error(String message) {\n+\t\tnew ImportDefectBuilder().error(message);\n+\t}\n+\t\n+\tpublic void warn(String message) {\n+\t\tnew ImportDefectBuilder().warn(message);\n+\t}\n+\t\n+\tpublic void info(String message) {\n+\t\tnew ImportDefectBuilder().info(message);\n+\t}\n+\t\n+\tpublic ImportDefectBuilder on(String location) {\n+\t\treturn new ImportDefectBuilder().on(location);\n+\t}\n+\t\n+\t/**\n+\t * @since 7.12\n+\t */\n+\tpublic final class ImportDefectBuilder {\n+\t\t\n+\t\tprivate String location;\n+\t\tprivate Supplier<Boolean> when;\n+\n+\t\tpublic ImportDefectBuilder on(String location) {\n+\t\t\tthis.location = location;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ImportDefectBuilder whenThrows(ISafeRunnable runnable) {\n+\t\t\treturn when(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\trunnable.run();\n+\t\t\t\t\treturn false;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenEqual(Object a, Object b) {\n+\t\t\treturn when(Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNotEqual(Object a, Object b) {\n+\t\t\treturn when(!Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenBlank(String value) {\n+\t\t\treturn when(StringUtils.isEmpty(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNaN(String value) {\n+\t\t\treturn when(!CharMatcher.inRange('0', '9').matchesAllOf(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTA4NQ==", "bodyText": "Let's keep it simple for the initial release, but this would be great to support.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531199085", "createdAt": "2020-11-26T19:26:29Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.core.runtime.ISafeRunnable;\n+\n+import com.b2international.commons.StringUtils;\n+import com.b2international.snowowl.core.request.io.ImportDefect.ImportDefectType;\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.12 \n+ */\n+public final class ImportDefectAcceptor {\n+\n+\tprivate final String file;\n+\tprivate final List<ImportDefect> defects = Lists.newArrayList();\n+\n+\tpublic ImportDefectAcceptor(String file) {\n+\t\tthis.file = file;\n+\t}\n+\t\n+\tpublic List<ImportDefect> getDefects() {\n+\t\treturn defects;\n+\t}\n+\t\n+\tpublic void error(String message) {\n+\t\tnew ImportDefectBuilder().error(message);\n+\t}\n+\t\n+\tpublic void warn(String message) {\n+\t\tnew ImportDefectBuilder().warn(message);\n+\t}\n+\t\n+\tpublic void info(String message) {\n+\t\tnew ImportDefectBuilder().info(message);\n+\t}\n+\t\n+\tpublic ImportDefectBuilder on(String location) {\n+\t\treturn new ImportDefectBuilder().on(location);\n+\t}\n+\t\n+\t/**\n+\t * @since 7.12\n+\t */\n+\tpublic final class ImportDefectBuilder {\n+\t\t\n+\t\tprivate String location;\n+\t\tprivate Supplier<Boolean> when;\n+\n+\t\tpublic ImportDefectBuilder on(String location) {\n+\t\t\tthis.location = location;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ImportDefectBuilder whenThrows(ISafeRunnable runnable) {\n+\t\t\treturn when(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\trunnable.run();\n+\t\t\t\t\treturn false;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenEqual(Object a, Object b) {\n+\t\t\treturn when(Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNotEqual(Object a, Object b) {\n+\t\t\treturn when(!Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenBlank(String value) {\n+\t\t\treturn when(StringUtils.isEmpty(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNaN(String value) {\n+\t\t\treturn when(!CharMatcher.inRange('0', '9').matchesAllOf(value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNTU1NA=="}, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM0NTI2OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMTozMVrOH6iAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMTozMVrOH6iAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNjUxNA==", "bodyText": "Informational and warning messages could be let through here...", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531136514", "createdAt": "2020-11-26T16:31:31Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM0ODYwOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMjoyOFrOH6iB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMjoyOFrOH6iB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzAxOA==", "bodyText": "...and then it would make sense to return them along with the components imported.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137018", "createdAt": "2020-11-26T16:32:28Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM1MDM1OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMzowNlrOH6iDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMzowNlrOH6iDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzI5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.\n          \n          \n            \n            \t * Subclasses can optionally provide validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137297", "createdAt": "2020-11-26T16:33:06Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);\n+\t\t\t}\n+\t\t\t\n+\t\t} catch (ApiException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tString error = \"Unexpected error happened during the import of the source file: \" + attachment.getFileName();\n+\t\t\tcontext.log().error(error, e);\n+\t\t\treturn ImportResponse.error(error);\n+\t\t} finally {\n+\t\t\tcontext.log().info(\"Finished importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\t}\n+\t}\n+\n+//\t/**\n+//\t * Logs the import activity with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportActivity(final String message) {\n+//\t\tLogUtils.logImportActivity(context.log(), context.author(), context.path(), message);\n+//\t}\n+//\t\n+//\t/**\n+//\t * Logs the import warning with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportWarning(final String message) {\n+//\t\tLogUtils.logImportWarning(context.log(), context.author(), context.path(), message);\n+//\t}\n+\t\n+\t/**\n+\t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM1MjYxOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMzo1N1rOH6iEjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMzo1N1rOH6iEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzY3OA==", "bodyText": "There is no return value, the import defect collecting object consumes all messages instead.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137678", "createdAt": "2020-11-26T16:33:57Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);\n+\t\t\t}\n+\t\t\t\n+\t\t} catch (ApiException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tString error = \"Unexpected error happened during the import of the source file: \" + attachment.getFileName();\n+\t\t\tcontext.log().error(error, e);\n+\t\t\treturn ImportResponse.error(error);\n+\t\t} finally {\n+\t\t\tcontext.log().info(\"Finished importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\t}\n+\t}\n+\n+//\t/**\n+//\t * Logs the import activity with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportActivity(final String message) {\n+//\t\tLogUtils.logImportActivity(context.log(), context.author(), context.path(), message);\n+//\t}\n+//\t\n+//\t/**\n+//\t * Logs the import warning with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportWarning(final String message) {\n+//\t\tLogUtils.logImportWarning(context.log(), context.author(), context.path(), message);\n+//\t}\n+\t\n+\t/**\n+\t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.\n+\t * @param context - the context to run the validation on\n+\t * @param attachment - the file attachment to validate\n+\t * @param defectsAcceptor - the acceptor that collects {@link ImportDefect}s through a few helper methods\n+\t * @param monitor - the monitor that can be used to track progress\n+\t * @return a {@link List} of {@link ImportDefect} instances that can aid the user pinpoint and resolve the errors/issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM1NDYwOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozNDozM1rOH6iFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozNDozM1rOH6iFuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNzk3OQ==", "bodyText": "No return value in this method either.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r531137979", "createdAt": "2020-11-26T16:34:33Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportRequest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+\n+import com.b2international.commons.CompareUtils;\n+import com.b2international.commons.exceptions.ApiException;\n+import com.b2international.snowowl.core.attachments.Attachment;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.authorization.BranchAccessControl;\n+import com.b2international.snowowl.core.domain.TransactionContext;\n+import com.b2international.snowowl.core.identity.Permission;\n+import com.b2international.snowowl.core.internal.locks.DatastoreLockContextDescriptions;\n+import com.b2international.snowowl.core.request.LockRequest;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.12\n+ */\n+public abstract class ImportRequest extends LockRequest<TransactionContext, ImportResponse> implements BranchAccessControl {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t@NotNull\n+\tprivate Attachment attachment;\n+\t\n+\tpublic ImportRequest() {\n+\t\tsuper(DatastoreLockContextDescriptions.IMPORT);\n+\t}\n+\t\n+\tpublic ImportRequest(String lockContext, String parentLockContext) {\n+\t\tsuper(lockContext, parentLockContext);\n+\t}\n+\t\n+\tfinal void setAttachment(Attachment attachment) {\n+\t\tthis.attachment = attachment;\n+\t}\n+\t\n+\tprotected Attachment attachment() {\n+\t\treturn attachment;\n+\t}\n+\t\n+\t@Override\n+\tpublic final ImportResponse doExecute(TransactionContext context) {\n+\t\tcontext.log().info(\"Importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\ttry {\n+\t\t\tInternalAttachmentRegistry iar = (InternalAttachmentRegistry) context.service(AttachmentRegistry.class);\n+\t\t\tFile attachment = iar.getAttachment(this.attachment.getAttachmentId());\n+\t\t\t\n+\t\t\tImportDefectAcceptor defectsAcceptor = new ImportDefectAcceptor(this.attachment.getFileName());\n+\t\t\tdoValidate(context, attachment, defectsAcceptor, context.service(IProgressMonitor.class));\n+\t\t\t\n+\t\t\tfinal List<ImportDefect> defects = defectsAcceptor.getDefects();\n+\t\t\tif (!CompareUtils.isEmpty(defects)) {\n+\t\t\t\treturn ImportResponse.defects(defects);\n+\t\t\t} else {\n+\t\t\t\tfinal Set<ComponentURI> visitedComponents = Sets.newHashSet();\n+\t\t\t\tdoImport(context, attachment, visitedComponents::add, context.service(IProgressMonitor.class));\n+\t\t\t\treturn ImportResponse.success(visitedComponents);\n+\t\t\t}\n+\t\t\t\n+\t\t} catch (ApiException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tString error = \"Unexpected error happened during the import of the source file: \" + attachment.getFileName();\n+\t\t\tcontext.log().error(error, e);\n+\t\t\treturn ImportResponse.error(error);\n+\t\t} finally {\n+\t\t\tcontext.log().info(\"Finished importing components from source file '%s'.\", this.attachment.getFileName());\n+\t\t}\n+\t}\n+\n+//\t/**\n+//\t * Logs the import activity with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportActivity(final String message) {\n+//\t\tLogUtils.logImportActivity(context.log(), context.author(), context.path(), message);\n+//\t}\n+//\t\n+//\t/**\n+//\t * Logs the import warning with the given message.\n+//\t * \n+//\t * @param message the message to be logged.\n+//\t */\n+//\tprotected void logImportWarning(final String message) {\n+//\t\tLogUtils.logImportWarning(context.log(), context.author(), context.path(), message);\n+//\t}\n+\t\n+\t/**\n+\t * Subclasses optionally provider validation functionality to verify the integrity of the attachment before proceeding to the actual import in {@link #doImport(File, IProgressMonitor)}.\n+\t * @param context - the context to run the validation on\n+\t * @param attachment - the file attachment to validate\n+\t * @param defectsAcceptor - the acceptor that collects {@link ImportDefect}s through a few helper methods\n+\t * @param monitor - the monitor that can be used to track progress\n+\t * @return a {@link List} of {@link ImportDefect} instances that can aid the user pinpoint and resolve the errors/issues\n+\t * @throws Exception\n+\t */\n+\tprotected void doValidate(TransactionContext context, File attachment, ImportDefectAcceptor defectsAcceptor, IProgressMonitor monitor) throws Exception {\n+\t}\n+\n+\t/**\n+\t * Performs the import from the given file attachment.\n+\t * \n+\t * @param context - the context that can be used to commit changes\n+\t * @param attachment - the attachment file to import\n+\t * @param visitor - visitor that accepts visited component URIs\n+\t * @param monitor - the monitor that can be used to track progress\n+\t * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36799acb5d7c20c15e2829e6aab870222ffddcc"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzYyNDYzOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTozNDowMVrOIAifsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTozNDowMVrOIAifsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQzNjA4Mg==", "bodyText": "I suggest returning all defects from the API and limiting visualization on user interfaces instead.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/720#discussion_r537436082", "createdAt": "2020-12-07T11:34:01Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/io/ImportDefectAcceptor.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request.io;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.core.runtime.ISafeRunnable;\n+\n+import com.b2international.commons.StringUtils;\n+import com.b2international.snowowl.core.request.io.ImportDefect.ImportDefectType;\n+import com.google.common.base.CharMatcher;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.12 \n+ */\n+public final class ImportDefectAcceptor {\n+\n+\tprivate static final int DEFAULT_MAX_DEFECTS = 100_000;\n+\t\n+\tprivate final String file;\n+\tprivate final List<ImportDefect> defects = Lists.newArrayList();\n+\n+\tpublic ImportDefectAcceptor(String file) {\n+\t\tthis(file, DEFAULT_MAX_DEFECTS);\n+\t}\n+\t\n+\tpublic ImportDefectAcceptor(String file, int maxDefects) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<ImportDefect> getDefects() {\n+\t\treturn List.copyOf(defects);\n+\t}\n+\t\n+\tpublic void error(String message) {\n+\t\tnew ImportDefectBuilder().error(message);\n+\t}\n+\t\n+\tpublic void warn(String message) {\n+\t\tnew ImportDefectBuilder().warn(message);\n+\t}\n+\t\n+\tpublic void info(String message) {\n+\t\tnew ImportDefectBuilder().info(message);\n+\t}\n+\t\n+\tpublic ImportDefectBuilder on(String location) {\n+\t\treturn new ImportDefectBuilder().on(location);\n+\t}\n+\t\n+\t/**\n+\t * @since 7.12\n+\t */\n+\tpublic final class ImportDefectBuilder {\n+\t\t\n+\t\tprivate String location = \"\";\n+\t\tprivate Supplier<Boolean> when;\n+\n+\t\tpublic ImportDefectBuilder on(String location) {\n+\t\t\tthis.location = location;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ImportDefectBuilder whenThrows(ISafeRunnable runnable) {\n+\t\t\treturn when(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\trunnable.run();\n+\t\t\t\t\treturn false;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenEqual(Object a, Object b) {\n+\t\t\treturn when(Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNotEqual(Object a, Object b) {\n+\t\t\treturn when(!Objects.equals(a, b));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenBlank(String value) {\n+\t\t\treturn when(StringUtils.isEmpty(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder whenNaN(String value) {\n+\t\t\treturn when(!CharMatcher.inRange('0', '9').matchesAllOf(value));\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder when(Boolean when) {\n+\t\t\treturn when(() -> when);\n+\t\t}\n+\t\t\n+\t\tpublic ImportDefectBuilder when(Supplier<Boolean> when) {\n+\t\t\tthis.when = when;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic void error(String message, Object...args) {\n+\t\t\terror(String.format(message, args));\n+\t\t}\n+\t\t\n+\t\tpublic void error(String message) {\n+\t\t\tbuild(message, ImportDefectType.ERROR);\n+\t\t}\n+\t\t\n+\t\tpublic void warn(String message, Object...args) {\n+\t\t\twarn(String.format(message, args));\n+\t\t}\n+\t\t\n+\t\tpublic void warn(String message) {\n+\t\t\tbuild(message, ImportDefectType.WARNING);\n+\t\t}\n+\t\t\n+\t\tpublic void info(String message, Object...args) {\n+\t\t\tinfo(String.format(message, args));\n+\t\t}\n+\t\t\n+\t\tpublic void info(String message) {\n+\t\t\tbuild(message, ImportDefectType.INFO);\n+\t\t}\n+\t\t\n+\t\tprivate void build(String message, ImportDefectType type) {\n+\t\t\tif (when == null || when.get()) {\n+\t\t\t\tdefects.add(new ImportDefect(file, location, message, type));\n+\n+\t\t\t\t// Remove the earliest defect on overflow\n+\t\t\t\tif (defects.size() > DEFAULT_MAX_DEFECTS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a2a8a4c675a01d48300caf2fae38b2d3cad2f42"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1629, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}