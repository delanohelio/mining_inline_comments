{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMTg4MDA1", "number": 472, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMTo0OVrODckGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDoyMDoxOVrODclQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjc4MjIyOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/ControllerExceptionMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMTo0OVrOFkquow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyMTo0OVrOFkquow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MzEyMw==", "bodyText": "If anyone is wondering (I sure was): https://stackoverflow.com/questions/2621701/setting-log-level-of-message-at-runtime-in-slf4j/7829534\nQuick summary: there is no way to do this programmatically in SLF4j without a helper method.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/472#discussion_r373993123", "createdAt": "2020-02-03T09:21:49Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/ControllerExceptionMapper.java", "diffHunk": "@@ -50,11 +52,21 @@\n \t\tif (Throwables.getRootCause(ex).getMessage().toLowerCase().contains(\"broken pipe\")) {\n \t        return null; // socket is closed, cannot return any response    \n \t    } else {\n-\t    \tLOG.trace(\"Exception during request processing\", ex);\n+\t    \tif (PlatformUtil.isDevVersion()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd796efb130859d23b7e952e834a39f083dea6c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjgwMzE4OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/id/IDs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyODo0MVrOFkq69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyODo0MVrOFkq69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjI3OQ==", "bodyText": "\u26a0\ufe0f typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Generates a time-based UUID (similar to Flake IDs), which is preferred when generating an ID to be indexed into a Lucene index asprimary key. \n          \n          \n            \n            \t * Generates a time-based UUID (similar to Flake IDs), which is preferred when generating an ID to be indexed into a Lucene index as primary key.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/472#discussion_r373996279", "createdAt": "2020-02-03T09:28:41Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/id/IDs.java", "diffHunk": "@@ -13,25 +13,24 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.b2international.snowowl.snomed.core.rest.domain;\n+package com.b2international.snowowl.core.id;\n+\n+import org.elasticsearch.common.UUIDs;\n \n /**\n- * @since 1.0\n+ * Class to use to generate decentralized random UUIDs. \n+ * \n+ * @since 7.3\n  */\n-public class SnomedIdentifierResponse {\n+public class IDs {\n \n-\tprivate String id;\n-\t\n-\tpublic SnomedIdentifierResponse(String id) {\n-\t\tthis.id = id;\n-\t}\n-\n-\tpublic String getId() {\n-\t\treturn id;\n-\t}\n-\t\n-\tpublic void setId(String id) {\n-\t\tthis.id = id;\n+\t/**\n+\t * Generates a time-based UUID (similar to Flake IDs), which is preferred when generating an ID to be indexed into a Lucene index asprimary key. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd796efb130859d23b7e952e834a39f083dea6c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjgwNjY0OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/TransactionContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyOTo1M1rOFkq9Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo1ODo1NVrOFktjjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjgzMQ==", "bodyText": "Javadoc is half-true: the default implementation returns an identifier for CodeSystemEntry and CodeSystemVersionEntry instances as well.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/472#discussion_r373996831", "createdAt": "2020-02-03T09:29:53Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/TransactionContext.java", "diffHunk": "@@ -44,8 +44,9 @@\n \t * Adds the given {@link Object} to this transaction context as a completely new object. \n \t * \n \t * @param obj - the object to persist and add to the repository\n+\t * @return the identifier if the given object is an instanceof of {@link Revision} or <code>null</code> if the object is not a {@link Revision}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd796efb130859d23b7e952e834a39f083dea6c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NzkyMg==", "bodyText": "(Also, didn't add support indexing non-revision controlled documents before? Did this functionality disappear with 7.x, or does it only exist in my mind?)", "url": "https://github.com/b2ihealthcare/snow-owl/pull/472#discussion_r373997922", "createdAt": "2020-02-03T09:32:08Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/TransactionContext.java", "diffHunk": "@@ -44,8 +44,9 @@\n \t * Adds the given {@link Object} to this transaction context as a completely new object. \n \t * \n \t * @param obj - the object to persist and add to the repository\n+\t * @return the identifier if the given object is an instanceof of {@link Revision} or <code>null</code> if the object is not a {@link Revision}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjgzMQ=="}, "originalCommit": {"oid": "3dd796efb130859d23b7e952e834a39f083dea6c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTQzNw==", "bodyText": "Fixing it directly on 7.x after merging PR. Thanks!\nYeah, I think it did not, the StagingArea accepts any model, but the TransactionContext is primarily for RevisionDocuments.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/472#discussion_r374039437", "createdAt": "2020-02-03T10:58:55Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/TransactionContext.java", "diffHunk": "@@ -44,8 +44,9 @@\n \t * Adds the given {@link Object} to this transaction context as a completely new object. \n \t * \n \t * @param obj - the object to persist and add to the repository\n+\t * @return the identifier if the given object is an instanceof of {@link Revision} or <code>null</code> if the object is not a {@link Revision}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NjgzMQ=="}, "originalCommit": {"oid": "3dd796efb130859d23b7e952e834a39f083dea6c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjk3MDQ1OnYy", "diffSide": "RIGHT", "path": "snomed/com.b2international.snowowl.snomed.core.rest/src/com/b2international/snowowl/snomed/core/rest/domain/SnomedResourceRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDoyMDoxOVrOFksdvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDoyMDoxOVrOFksdvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyMTU2Ng==", "bodyText": "\ud83e\udd14", "url": "https://github.com/b2ihealthcare/snow-owl/pull/472#discussion_r374021566", "createdAt": "2020-02-03T10:20:19Z", "author": {"login": "apeteri"}, "path": "snomed/com.b2international.snowowl.snomed.core.rest/src/com/b2international/snowowl/snomed/core/rest/domain/SnomedResourceRequest.java", "diffHunk": "@@ -15,31 +15,27 @@\n  */\n package com.b2international.snowowl.snomed.core.rest.domain;\n \n-import com.b2international.snowowl.core.terminology.ComponentCategory;\n-\n+import com.b2international.snowowl.core.rest.domain.ResourceRequest;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n \n /**\n  * @since 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd796efb130859d23b7e952e834a39f083dea6c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1694, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}