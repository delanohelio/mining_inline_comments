{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzkxMTc0", "number": 580, "title": "SO-4103: New rule: Active descriptions on inactive concepts should have a single inactivation indicator member ", "bodyText": "", "createdAt": "2020-06-04T12:09:14Z", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580", "merged": true, "mergeCommit": {"oid": "d1f82403414abdd1c803973d70092779fa35ca73"}, "closed": true, "closedAt": "2020-06-17T10:21:00Z", "author": {"login": "molnarlaura"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn85FXgH2gAyNDI3NzkxMTc0OjkxNjg4MmM4NWZlZGVhNTJmMTkxM2YyZjBmYjgxZDk1YTViMzc1MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsHLt4gFqTQzMjI2MjU5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "916882c85fedea52f1913f2f0fb81d95a5b37517", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/916882c85fedea52f1913f2f0fb81d95a5b37517", "committedDate": "2020-06-04T12:05:47Z", "message": "SO-4103: add new validation rule for inactive members"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDg1ODky", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#pullrequestreview-427085892", "createdAt": "2020-06-09T12:23:51Z", "commit": {"oid": "916882c85fedea52f1913f2f0fb81d95a5b37517"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyMzo1MVrOGhGyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNToyNFrOGhG4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NzQ5Nw==", "bodyText": "Loading all members from that refset to memory will kill the process, please use scrolling.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r437367497", "createdAt": "2020-06-09T12:23:51Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,55 @@\n+package scripts;\n+\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n+}\n+\n+Map<String, SnomedRefSetMemberIndexEntry> members = Maps.newHashMap()\n+\n+Query<String> queryRefsetMembers =Query.select(SnomedRefSetMemberIndexEntry.class)\n+\t\t.from(SnomedRefSetMemberIndexEntry.class)\n+\t\t.where(SnomedRefSetMemberIndexEntry.Expressions.referenceSetId(Concepts.REFSET_CONCEPT_INACTIVITY_INDICATOR))\n+\t\t.limit(Integer.MAX_VALUE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "916882c85fedea52f1913f2f0fb81d95a5b37517"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2Nzc4NQ==", "bodyText": "Remove sysout.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r437367785", "createdAt": "2020-06-09T12:24:10Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,55 @@\n+package scripts;\n+\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n+}\n+\n+Map<String, SnomedRefSetMemberIndexEntry> members = Maps.newHashMap()\n+\n+Query<String> queryRefsetMembers =Query.select(SnomedRefSetMemberIndexEntry.class)\n+\t\t.from(SnomedRefSetMemberIndexEntry.class)\n+\t\t.where(SnomedRefSetMemberIndexEntry.Expressions.referenceSetId(Concepts.REFSET_CONCEPT_INACTIVITY_INDICATOR))\n+\t\t.limit(Integer.MAX_VALUE)\n+\t\t.build()\n+\n+searcher.search(queryRefsetMembers).forEach({SnomedRefSetMemberIndexEntry member ->\n+\tmembers.put(member.getReferencedComponentId(), member)\n+\n+})\n+\n+Query<String> queryConcepts = Query.select(SnomedConceptDocument.class)\n+\t\t.from(SnomedConceptDocument.class)\n+\t\t.where(filterExpressionBuilder.build())\n+\t\t.limit(Integer.MAX_VALUE)\n+\t\t.build()\n+\n+searcher.search(queryConcepts).forEach({SnomedConceptDocument concept ->\n+\tString inactivationIndicatorId = (String) members.get(concept.getId()).getProperties().get(SnomedRf2Headers.FIELD_VALUE_ID);\n+\tprintln(inactivationIndicatorId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "916882c85fedea52f1913f2f0fb81d95a5b37517"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2ODkzMQ==", "bodyText": "Always compare the constant to the variable, in all cases. Concepts.PENDING_MOVE.equals(myVar)", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r437368931", "createdAt": "2020-06-09T12:25:24Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,55 @@\n+package scripts;\n+\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n+}\n+\n+Map<String, SnomedRefSetMemberIndexEntry> members = Maps.newHashMap()\n+\n+Query<String> queryRefsetMembers =Query.select(SnomedRefSetMemberIndexEntry.class)\n+\t\t.from(SnomedRefSetMemberIndexEntry.class)\n+\t\t.where(SnomedRefSetMemberIndexEntry.Expressions.referenceSetId(Concepts.REFSET_CONCEPT_INACTIVITY_INDICATOR))\n+\t\t.limit(Integer.MAX_VALUE)\n+\t\t.build()\n+\n+searcher.search(queryRefsetMembers).forEach({SnomedRefSetMemberIndexEntry member ->\n+\tmembers.put(member.getReferencedComponentId(), member)\n+\n+})\n+\n+Query<String> queryConcepts = Query.select(SnomedConceptDocument.class)\n+\t\t.from(SnomedConceptDocument.class)\n+\t\t.where(filterExpressionBuilder.build())\n+\t\t.limit(Integer.MAX_VALUE)\n+\t\t.build()\n+\n+searcher.search(queryConcepts).forEach({SnomedConceptDocument concept ->\n+\tString inactivationIndicatorId = (String) members.get(concept.getId()).getProperties().get(SnomedRf2Headers.FIELD_VALUE_ID);\n+\tprintln(inactivationIndicatorId)\n+\tif (!(inactivationIndicatorId.equals(Concepts.PENDING_MOVE)|| inactivationIndicatorId.equals(Concepts.LIMITED) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "916882c85fedea52f1913f2f0fb81d95a5b37517"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4104a725ac75c6116b36b1e38711193d1fa912b0", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/4104a725ac75c6116b36b1e38711193d1fa912b0", "committedDate": "2020-06-09T12:44:35Z", "message": "SO-4103: remove sysout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31deb5bda808d104f81b21c3f1b17547c099d074", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/31deb5bda808d104f81b21c3f1b17547c099d074", "committedDate": "2020-06-09T12:46:27Z", "message": "SO-4103: change order of equation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2449f7c7f93fb3057f5147ab0956d03928488180", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/2449f7c7f93fb3057f5147ab0956d03928488180", "committedDate": "2020-06-11T15:09:17Z", "message": "SO-4103: fix rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/9d46e459801c3ac1385e44cfeec1ae31d4299b9a", "committedDate": "2020-06-11T16:06:03Z", "message": "SO-4103: add test for rule 671"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTAzMTgy", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#pullrequestreview-430503182", "createdAt": "2020-06-15T10:09:35Z", "commit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDowOTozNVrOGjrxag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoyMjozNlrOGjsL7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MDUwNg==", "bodyText": "The unpublished filter should be added to the inactivation indicator members query, not to the concept nor to the descriptions query.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r440070506", "createdAt": "2020-06-15T10:09:35Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,74 @@\n+package scripts;\n+\n+import com.b2international.index.Hits\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescription\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescriptions\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests\n+import com.google.common.collect.Lists\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MDk4NQ==", "bodyText": "Use Set for distinct values and when you don't actually need the index.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r440070985", "createdAt": "2020-06-15T10:10:31Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,74 @@\n+package scripts;\n+\n+import com.b2international.index.Hits\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescription\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescriptions\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests\n+import com.google.common.collect.Lists\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n+}\n+\n+List<String> inactiveIds = Lists.newArrayList()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MzU1Mw==", "bodyText": "This Map variable still references only a single indicator per description, which is okay, but due to the nature of authoring in Snow Owl, it is possible that two or more indicators exists. There is a rule that checks and reports duplications in refsets, so here you don't need another check, but you have to check all existing members for all descriptions.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r440073553", "createdAt": "2020-06-15T10:15:18Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,74 @@\n+package scripts;\n+\n+import com.b2international.index.Hits\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescription\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescriptions\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests\n+import com.google.common.collect.Lists\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n+}\n+\n+List<String> inactiveIds = Lists.newArrayList()\n+\n+searcher.scroll(Query.select(String.class)\n+\t\t.from(SnomedConceptDocument.class)\n+\t\t.fields(SnomedConceptDocument.Fields.ID)\n+\t\t.where(filterExpressionBuilder.build())\n+\t\t.limit(10_000)\n+\t\t.build())\n+\t\t.each({id ->\n+\t\t\tinactiveIds.add(id[0])\n+\t\t})\n+\n+Map<String, SnomedRefSetMemberIndexEntry> members = Maps.newHashMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NTI1NQ==", "bodyText": "Missing unpublished filter.\nIt would be much faster to construct a filter query instead of manually checking every 300.000 indicators each time we hit validate.\nYou can also execute two queries:\nOne for active descriptions where the value is not in the allowed set.\nAnother for inactive descriptions, where you don't have an indicator (hint: negate filter clauses).", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r440075255", "createdAt": "2020-06-15T10:18:34Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,74 @@\n+package scripts;\n+\n+import com.b2international.index.Hits\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescription\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescriptions\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests\n+import com.google.common.collect.Lists\n+import com.google.common.collect.Maps\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+\n+ExpressionBuilder filterExpressionBuilder = Expressions.builder()\n+\t\t.filter(SnomedConceptDocument.Expressions.inactive())\n+\n+if (params.isUnpublishedOnly) {\n+\tfilterExpressionBuilder.filter(SnomedConceptDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n+}\n+\n+List<String> inactiveIds = Lists.newArrayList()\n+\n+searcher.scroll(Query.select(String.class)\n+\t\t.from(SnomedConceptDocument.class)\n+\t\t.fields(SnomedConceptDocument.Fields.ID)\n+\t\t.where(filterExpressionBuilder.build())\n+\t\t.limit(10_000)\n+\t\t.build())\n+\t\t.each({id ->\n+\t\t\tinactiveIds.add(id[0])\n+\t\t})\n+\n+Map<String, SnomedRefSetMemberIndexEntry> members = Maps.newHashMap()\n+\n+searcher.scroll(Query.select(SnomedRefSetMemberIndexEntry.class)\n+\t\t.from(SnomedRefSetMemberIndexEntry.class)\n+\t\t.where(SnomedRefSetMemberIndexEntry.Expressions.referenceSetId(Concepts.REFSET_DESCRIPTION_INACTIVITY_INDICATOR))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NzI5Mw==", "bodyText": "There is no test for active description with incorrect indicator value in the refset.\nThere is no test for inactive description without any indicator value in the refset.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r440077293", "createdAt": "2020-06-15T10:22:36Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/test/java/com/b2international/snowowl/validation/snomed/GenericValidationRuleTest.java", "diffHunk": "@@ -499,5 +499,36 @@ public void rule670() throws Exception {\n \t\tassertAffectedComponents(issues, \n \t\t\t\tComponentIdentifier.of(SnomedTerminologyComponentConstants.CONCEPT_NUMBER, Concepts.IS_A));\n \t}\n+\n+\t@Test\n+\tpublic void rule671() throws Exception {\n+\t\tfinal String ruleId = \"671\";\n+\t\tindexRule(ruleId);\n+\t\t\n+\t\tString conceptId = generateConceptId();\n+\t\tSnomedDescriptionIndexEntry fsn = description(generateDescriptionId(), Concepts.FULLY_SPECIFIED_NAME, \"Fully specified name 3 (tag)\")\n+\t\t\t\t.conceptId(conceptId)\n+\t\t\t\t.acceptability(Concepts.REFSET_LANGUAGE_TYPE_ES, Acceptability.PREFERRED)\n+\t\t\t\t.build();\n+\t\tSnomedDescriptionIndexEntry pt = description(generateDescriptionId(), Concepts.SYNONYM, \"Preferred term 3\")\n+\t\t\t\t.acceptability(Concepts.REFSET_LANGUAGE_TYPE_ES, Acceptability.PREFERRED)\n+\t\t\t\t.conceptId(conceptId)\n+\t\t\t\t.build();\n+\t\tSnomedRefSetMemberIndexEntry ptMember = member(pt.getId(), SnomedTerminologyComponentConstants.DESCRIPTION_NUMBER, Concepts.REFSET_DESCRIPTION_INACTIVITY_INDICATOR).valueId(Concepts.CONCEPT_NON_CURRENT).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d46e459801c3ac1385e44cfeec1ae31d4299b9a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71070368d91f9558d5158f0601b765e64118bbc", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/c71070368d91f9558d5158f0601b765e64118bbc", "committedDate": "2020-06-16T09:50:24Z", "message": "SO-4103: add new cases for testing rule 671"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d13d7c23b4056e3f3f188886a2059733e60218f", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/7d13d7c23b4056e3f3f188886a2059733e60218f", "committedDate": "2020-06-16T10:14:23Z", "message": "SO-4103: change filtering logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc25cfa78ea555ff72754410a7f68cf1d8b6e86", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/8fc25cfa78ea555ff72754410a7f68cf1d8b6e86", "committedDate": "2020-06-16T13:18:27Z", "message": "SO-4103: fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e2695eb858b19268b50ff626e2139831b81e25", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/91e2695eb858b19268b50ff626e2139831b81e25", "committedDate": "2020-06-16T13:22:46Z", "message": "SO-4103: refactor script"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTkzOTQ4", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#pullrequestreview-432193948", "createdAt": "2020-06-17T08:53:14Z", "commit": {"oid": "91e2695eb858b19268b50ff626e2139831b81e25"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1MzoxNFrOGk8OtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1MzoxNFrOGk8OtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4ODcyNA==", "bodyText": "Rename this variable to activeDescriptionIndicatorIds.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#discussion_r441388724", "createdAt": "2020-06-17T08:53:14Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule671.groovy", "diffHunk": "@@ -0,0 +1,93 @@\n+package scripts;\n+\n+import com.b2international.index.query.Expressions\n+import com.b2international.index.query.Query\n+import com.b2international.index.query.Expressions.ExpressionBuilder\n+import com.b2international.index.revision.RevisionSearcher\n+import com.b2international.snowowl.core.ComponentIdentifier\n+import com.b2international.snowowl.core.date.EffectiveTimes\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescription\n+import com.b2international.snowowl.snomed.core.domain.SnomedDescriptions\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedConceptDocument\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedDescriptionIndexEntry\n+import com.b2international.snowowl.snomed.datastore.index.entry.SnomedRefSetMemberIndexEntry\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests\n+import com.google.common.collect.ArrayListMultimap\n+import com.google.common.collect.ImmutableList\n+import com.google.common.collect.Lists\n+import com.google.common.collect.Sets\n+\n+final Set<ComponentIdentifier> issues = Sets.newHashSet()\n+final RevisionSearcher searcher = ctx.service(RevisionSearcher.class)\n+final List<String> filterIndicatorIds = ImmutableList.of(Concepts.PENDING_MOVE, Concepts.LIMITED, Concepts.CONCEPT_NON_CURRENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e2695eb858b19268b50ff626e2139831b81e25"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b24f2413cda8b5c1ed87bd3f360110b0566e7b", "author": {"user": {"login": "molnarlaura", "name": "Laura Alexandra Moln\u00e1r"}}, "url": "https://github.com/b2ihealthcare/snow-owl/commit/c1b24f2413cda8b5c1ed87bd3f360110b0566e7b", "committedDate": "2020-06-17T08:59:10Z", "message": "SO-4103: rename variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjYyNTk5", "url": "https://github.com/b2ihealthcare/snow-owl/pull/580#pullrequestreview-432262599", "createdAt": "2020-06-17T10:20:53Z", "commit": {"oid": "c1b24f2413cda8b5c1ed87bd3f360110b0566e7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4993, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}