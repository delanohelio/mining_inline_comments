{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTkzNDMy", "number": 532, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1NjoxNVrODxgWRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMDowNFrODxmiqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjM2ODA1OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo1NjoxNVrOGFAoRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzozMTo1NFrOGFBt4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjM3Mw==", "bodyText": "The predicate is not applied to the current job.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r407906373", "createdAt": "2020-04-14T06:56:15Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +83,33 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param predicate - the predicate filter to further customize the search process\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<RemoteJobEntry> predicate) {\n+\t\tcheckNotNull(predicate, \"Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n \t\t\treturn true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNDE5Mg==", "bodyText": "Right, thanks! \ud83d\ude05", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r407924192", "createdAt": "2020-04-14T07:31:54Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +83,33 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param predicate - the predicate filter to further customize the search process\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<RemoteJobEntry> predicate) {\n+\t\tcheckNotNull(predicate, \"Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n \t\t\treturn true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjM3Mw=="}, "originalCommit": {"oid": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM4MTE2OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyOTozNVrOGFKSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyOTozNVrOGFKSMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDU2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param parametersPredice - the predicate to filter the job by its parameters\n          \n          \n            \n            \t * @return\n          \n          \n            \n            \t */\n          \n          \n            \n            \tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n          \n          \n            \n            \t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n          \n          \n            \n            \t * @param parametersPredicate - the predicate to filter the job by its parameters\n          \n          \n            \n            \t * @return\n          \n          \n            \n            \t */\n          \n          \n            \n            \tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredicate) {\n          \n          \n            \n            \t\tcheckNotNull(parametersPredicate, \"Parameters predicate should not be null\");", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064563", "createdAt": "2020-04-14T11:29:35Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM4MjAxOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyOTo1MFrOGFKSzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyOTo1MFrOGFKSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n          \n          \n            \n            \t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredicate.test(job.get().getParameters(service(ObjectMapper.class)));", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064716", "createdAt": "2020-04-14T11:29:50Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM4MjgwOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMDowNFrOGFKTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMDowNFrOGFKTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDgzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.filter(parametersPredice)\n          \n          \n            \n            \t\t\t\t.filter(parametersPredicate)", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064836", "createdAt": "2020-04-14T11:30:04Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n \t\t}\n \n \t\t// if not inside a job context or running in non-job context check the jobs index\n-\t\treturn JobRequests.prepareSearch().one().filterByKey(jobKey).build().execute(this).first().map(RemoteJobEntry::isRunning).orElse(false);\n+\t\treturn JobRequests.prepareSearch().one()\n+\t\t\t\t.filterByKey(jobKey)\n+\t\t\t\t.build()\n+\t\t\t\t.execute(this)\n+\t\t\t\t.first()\n+\t\t\t\t.filter(RemoteJobEntry::isRunning)\n+\t\t\t\t.map(j -> j.getParameters(service(ObjectMapper.class)))\n+\t\t\t\t.filter(parametersPredice)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1727, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}