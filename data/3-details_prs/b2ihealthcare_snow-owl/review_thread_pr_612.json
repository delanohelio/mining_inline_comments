{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNTkyNDI5", "number": 612, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMToxMzozN1rOERACDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMToxMzozN1rOERACDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjYxNzczOnYy", "diffSide": "RIGHT", "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule664.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMToxMzozN1rOG1d1ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMToxMzozN1rOG1d1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxNjUxNw==", "bodyText": "Hint: this can be used to check if a value is an unset effective time: com.b2international.snowowl.core.date.EffectiveTimes.isUnset(Object).", "url": "https://github.com/b2ihealthcare/snow-owl/pull/612#discussion_r458716517", "createdAt": "2020-07-22T11:13:37Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.validation.snomed/src/main/resources/scripts/rule664.groovy", "diffHunk": "@@ -39,23 +39,24 @@ ExpressionBuilder activeFsnExpression = Expressions.builder()\n \t\t.filter(SnomedDescriptionIndexEntry.Expressions.type(Concepts.FULLY_SPECIFIED_NAME))\n \t\t.filter(SnomedDescriptionIndexEntry.Expressions.concepts(activeConceptIds))\n \n-if (params.isUnpublishedOnly) {\n-\tactiveFsnExpression.filter(SnomedDocument.Expressions.effectiveTime(EffectiveTimes.UNSET_EFFECTIVE_TIME))\n-}\n-\n-Aggregation<String> activeDescriptionsByOriginalTerm = searcher\n-\t\t.aggregate(AggregationBuilder.bucket(\"ruleSnomedCommon2\", String.class, SnomedDescriptionIndexEntry.class)\n+Aggregation<String[]> activeDescriptionsByOriginalTerm = searcher\n+\t\t.aggregate(AggregationBuilder.bucket(\"ruleSnomedCommon2\", String[].class, SnomedDescriptionIndexEntry.class)\n \t\t.query(activeFsnExpression.build())\n \t\t.onFieldValue(SnomedDescriptionIndexEntry.Fields.ORIGINAL_TERM)\n-\t\t.fields(SnomedDescriptionIndexEntry.Fields.ID)\n+\t\t.fields(SnomedDescriptionIndexEntry.Fields.ID,\n+\t\t\tSnomedDescriptionIndexEntry.Fields.EFFECTIVE_TIME)\n \t\t.minBucketSize(2))\n \n-\t\t\n List<ComponentIdentifier> issues = Lists.newArrayList()\n \n activeDescriptionsByOriginalTerm.getBuckets().values().each({ bucket ->\n-\tbucket.each({ id ->\n-\t\tissues.add(ComponentIdentifier.of(SnomedTerminologyComponentConstants.DESCRIPTION_NUMBER, id))\n+\tbucket.each({ hit ->\n+\t\tdef id = hit[0]\n+\t\tdef effectiveTime = hit[1]\n+\t\t\n+\t\tif (!params.isUnpublishedOnly || Long.valueOf(effectiveTime).equals(EffectiveTimes.UNSET_EFFECTIVE_TIME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fb437c804cedfcdddcdd2dcc582ae4c42e7585"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1647, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}