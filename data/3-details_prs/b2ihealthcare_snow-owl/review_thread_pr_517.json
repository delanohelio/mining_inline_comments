{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzA1MDQ0", "number": 517, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo1ODowNFrODqY5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo0MDo1M1rODqbw-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc0NzA1OnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/branch/review/ConceptChangesGetRequestBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzo1ODowNFrOF6GnIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo1NzoxNFrOF6MIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MDA1MA==", "bodyText": "This class (ConceptChangesGetRequestBuilder) is the only one in its package that hasn't been renamed to include a Review prefix and match the request class name.\nPlease rename it to ReviewGetConceptChangesRequestBuilder for consistency! \ud83d\ude42", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396470050", "createdAt": "2020-03-23T13:58:04Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/branch/review/ConceptChangesGetRequestBuilder.java", "diffHunk": "@@ -34,7 +33,7 @@\n \t\n \t@Override\n \tprotected Request<RepositoryContext, ConceptChanges> doBuild() {\n-\t\treturn new ReadConceptChangesRequest(reviewId);\t\n+\t\treturn new ReviewGetConceptChangesRequest(reviewId);\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2MDQ3Nw==", "bodyText": "It was on my TODO list, but forgot to do it, thanks for reminding me. \ud83d\ude05", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396560477", "createdAt": "2020-03-23T15:57:14Z", "author": {"login": "cmark"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/branch/review/ConceptChangesGetRequestBuilder.java", "diffHunk": "@@ -34,7 +33,7 @@\n \t\n \t@Override\n \tprotected Request<RepositoryContext, ConceptChanges> doBuild() {\n-\t\treturn new ReadConceptChangesRequest(reviewId);\t\n+\t\treturn new ReviewGetConceptChangesRequest(reviewId);\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MDA1MA=="}, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzgwMDIxOnYy", "diffSide": "RIGHT", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/id/IDs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMDo0M1rOF6HJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoxMDo0M1rOF6HJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3ODc3Mg==", "bodyText": "Please indicate in the method name that it is going to be shorter than a regular SHA-1 hash.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396478772", "createdAt": "2020-03-23T14:10:43Z", "author": {"login": "apeteri"}, "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/id/IDs.java", "diffHunk": "@@ -17,20 +17,35 @@\n \n import org.elasticsearch.common.UUIDs;\n \n+import com.google.common.base.Charsets;\n+import com.google.common.hash.Hashing;\n+\n /**\n- * Class to use to generate decentralized random UUIDs. \n+ * Class to use to generate decentralized random UUIDs.\n  * \n  * @since 7.3\n  */\n public class IDs {\n \n \t/**\n-\t * Generates a time-based UUID (similar to Flake IDs), which is preferred when generating an ID to be indexed into a Lucene index as primary key. \n+\t * Generates a time-based UUID (similar to Flake IDs), which is preferred when generating an ID to be indexed into a Lucene index as primary key.\n+\t * \n \t * @return\n \t * @see UUIDs\n \t */\n \tpublic static final String base64UUID() {\n \t\treturn UUIDs.base64UUID();\n \t}\n-\t\n+\n+\t/**\n+\t * Create an SHA-1 hash digest from the given value and returns the first seven characters. Similar to how Git creates a unique shortened SHA-1\n+\t * commit for Git commits, this can be useful for ID generation in certain scenarios.\n+\t * \n+\t * @param value\n+\t * @return\n+\t */\n+\tpublic static String sha1(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA1MjU2OnYy", "diffSide": "RIGHT", "path": "snomed/com.b2international.snowowl.snomed.core.rest/src/com/b2international/snowowl/snomed/core/rest/SnomedRf2ExportRestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNTo1MlrOF6Jr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMzo0N1rOF6Mcbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDQ0NA==", "bodyText": "Can we wait for the results here? What is the currently configured timeout value?", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396520444", "createdAt": "2020-03-23T15:05:52Z", "author": {"login": "apeteri"}, "path": "snomed/com.b2international.snowowl.snomed.core.rest/src/com/b2international/snowowl/snomed/core/rest/SnomedRf2ExportRestService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.snomed.core.rest;\n+\n+import java.io.File;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import com.b2international.snowowl.core.ApplicationContext;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.domain.ExportResult;\n+import com.b2international.snowowl.snomed.core.domain.Rf2RefSetExportLayout;\n+import com.b2international.snowowl.snomed.core.rest.domain.SnomedRf2ExportConfiguration;\n+import com.b2international.snowowl.snomed.datastore.config.SnomedCoreConfiguration;\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+\n+/**\n+ * @since 7.5\n+ */\n+@Api(value = \"Export\", description=\"Export\", tags = \"export\")\n+@Controller\n+@RequestMapping(value=\"/{path:**}/export\")\n+public class SnomedRf2ExportRestService extends AbstractSnomedRestService {\n+\n+\t@Autowired\n+\tprivate AttachmentRegistry attachments;\n+\t\n+\t@ApiOperation(\n+\t\tvalue=\"Export SNOMED CT content to RF2\", \n+\t\tnotes=\"Exports SNOMED CT content from the given branch to RF2.\"\n+\t)\n+\t@ApiResponses({\n+\t\t@ApiResponse(code=200, message=\"OK\")\n+\t})\n+\t@GetMapping\n+\tpublic @ResponseBody ResponseEntity<?> export(\n+\t\t\t@ApiParam(value = \"The branch path\", required = true)\n+\t\t\t@PathVariable(value=\"path\")\n+\t\t\tfinal String branch,\n+\n+\t\t\tfinal SnomedRf2ExportConfiguration params,\n+\t\t\t\n+\t\t\t@ApiParam(value = \"Accepted language tags, in order of preference\")\n+\t\t\t@RequestHeader(value=HttpHeaders.ACCEPT_LANGUAGE, defaultValue=\"en-US;q=0.8,en-GB;q=0.6\", required=false) \n+\t\t\tfinal String acceptLanguage) {\n+\t\t\n+\t\tfinal Rf2RefSetExportLayout globalExportLayout = ApplicationContext.getServiceForClass(SnomedCoreConfiguration.class).getExport().getRefSetExportLayout();\n+\t\t\n+\t\tfinal ExportResult exportedFile = SnomedRequests.rf2().prepareExport()\n+\t\t\t.setReleaseType(params.getType())\n+\t\t\t.setExtensionOnly(params.isExtensionOnly())\n+\t\t\t.setLocales(acceptLanguage)\n+\t\t\t.setIncludePreReleaseContent(params.isIncludeUnpublished())\n+\t\t\t.setModules(params.getModuleIds())\n+\t\t\t.setRefSets(params.getRefSetIds())\n+\t\t\t.setCountryNamespaceElement(params.getNamespaceId())\n+\t\t\t// .setNamespaceFilter(namespaceFilter) is not supported on REST, yet\n+\t\t\t.setTransientEffectiveTime(params.getTransientEffectiveTime())\n+\t\t\t.setStartEffectiveTime(params.getStartEffectiveTime())\n+\t\t\t.setEndEffectiveTime(params.getEndEffectiveTime())\n+\t\t\t.setRefSetExportLayout(params.getRefSetLayout() == null ? globalExportLayout : params.getRefSetLayout())\n+\t\t\t.build(this.repositoryId, branch)\n+\t\t\t.execute(getBus())\n+\t\t\t.getSync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NTYxNA==", "bodyText": "No timeout value at the moment, we wait indefinitely.\nWe can best guess a proper timeout value based on the selected export configuration, but not sure if that's a good idea. Not sure if we can convert this to an async method either, my guess is that Spring needs the HTTP thread to finish the file download work.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396565614", "createdAt": "2020-03-23T16:03:47Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.snomed.core.rest/src/com/b2international/snowowl/snomed/core/rest/SnomedRf2ExportRestService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.snomed.core.rest;\n+\n+import java.io.File;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import com.b2international.snowowl.core.ApplicationContext;\n+import com.b2international.snowowl.core.attachments.AttachmentRegistry;\n+import com.b2international.snowowl.core.attachments.InternalAttachmentRegistry;\n+import com.b2international.snowowl.core.domain.ExportResult;\n+import com.b2international.snowowl.snomed.core.domain.Rf2RefSetExportLayout;\n+import com.b2international.snowowl.snomed.core.rest.domain.SnomedRf2ExportConfiguration;\n+import com.b2international.snowowl.snomed.datastore.config.SnomedCoreConfiguration;\n+import com.b2international.snowowl.snomed.datastore.request.SnomedRequests;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+\n+/**\n+ * @since 7.5\n+ */\n+@Api(value = \"Export\", description=\"Export\", tags = \"export\")\n+@Controller\n+@RequestMapping(value=\"/{path:**}/export\")\n+public class SnomedRf2ExportRestService extends AbstractSnomedRestService {\n+\n+\t@Autowired\n+\tprivate AttachmentRegistry attachments;\n+\t\n+\t@ApiOperation(\n+\t\tvalue=\"Export SNOMED CT content to RF2\", \n+\t\tnotes=\"Exports SNOMED CT content from the given branch to RF2.\"\n+\t)\n+\t@ApiResponses({\n+\t\t@ApiResponse(code=200, message=\"OK\")\n+\t})\n+\t@GetMapping\n+\tpublic @ResponseBody ResponseEntity<?> export(\n+\t\t\t@ApiParam(value = \"The branch path\", required = true)\n+\t\t\t@PathVariable(value=\"path\")\n+\t\t\tfinal String branch,\n+\n+\t\t\tfinal SnomedRf2ExportConfiguration params,\n+\t\t\t\n+\t\t\t@ApiParam(value = \"Accepted language tags, in order of preference\")\n+\t\t\t@RequestHeader(value=HttpHeaders.ACCEPT_LANGUAGE, defaultValue=\"en-US;q=0.8,en-GB;q=0.6\", required=false) \n+\t\t\tfinal String acceptLanguage) {\n+\t\t\n+\t\tfinal Rf2RefSetExportLayout globalExportLayout = ApplicationContext.getServiceForClass(SnomedCoreConfiguration.class).getExport().getRefSetExportLayout();\n+\t\t\n+\t\tfinal ExportResult exportedFile = SnomedRequests.rf2().prepareExport()\n+\t\t\t.setReleaseType(params.getType())\n+\t\t\t.setExtensionOnly(params.isExtensionOnly())\n+\t\t\t.setLocales(acceptLanguage)\n+\t\t\t.setIncludePreReleaseContent(params.isIncludeUnpublished())\n+\t\t\t.setModules(params.getModuleIds())\n+\t\t\t.setRefSets(params.getRefSetIds())\n+\t\t\t.setCountryNamespaceElement(params.getNamespaceId())\n+\t\t\t// .setNamespaceFilter(namespaceFilter) is not supported on REST, yet\n+\t\t\t.setTransientEffectiveTime(params.getTransientEffectiveTime())\n+\t\t\t.setStartEffectiveTime(params.getStartEffectiveTime())\n+\t\t\t.setEndEffectiveTime(params.getEndEffectiveTime())\n+\t\t\t.setRefSetExportLayout(params.getRefSetLayout() == null ? globalExportLayout : params.getRefSetLayout())\n+\t\t\t.build(this.repositoryId, branch)\n+\t\t\t.execute(getBus())\n+\t\t\t.getSync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDQ0NA=="}, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODE1MzY4OnYy", "diffSide": "RIGHT", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyNzozMFrOF6Kssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowNTo1NVrOF6Miwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNzAxMQ==", "bodyText": "Please move parsing to SnomedRf2ExportRequestBuilder#doBuild, if possible, so that we know that all parameters are valid by the time the request starts.", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396537011", "createdAt": "2020-03-23T15:27:30Z", "author": {"login": "apeteri"}, "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java", "diffHunk": "@@ -286,8 +262,8 @@ public ExportResult execute(final RepositoryContext context) {\n \n \t\t\tfinal Set<String> visitedComponentEffectiveTimes = newHashSet();\n \t\t\t\n-\t\t\tfinal long effectiveTimeStart = startEffectiveTime != null ? startEffectiveTime.getTime() : 0;\n-\t\t\tfinal long effectiveTimeEnd =  endEffectiveTime != null ? endEffectiveTime.getTime() : Long.MAX_VALUE;\n+\t\t\tfinal long effectiveTimeStart = startEffectiveTime != null ? EffectiveTimes.getEffectiveTime(startEffectiveTime, DateFormats.SHORT) : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NzIzNA==", "bodyText": "Good idea! \ud83d\udc4d", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396567234", "createdAt": "2020-03-23T16:05:55Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java", "diffHunk": "@@ -286,8 +262,8 @@ public ExportResult execute(final RepositoryContext context) {\n \n \t\t\tfinal Set<String> visitedComponentEffectiveTimes = newHashSet();\n \t\t\t\n-\t\t\tfinal long effectiveTimeStart = startEffectiveTime != null ? startEffectiveTime.getTime() : 0;\n-\t\t\tfinal long effectiveTimeEnd =  endEffectiveTime != null ? endEffectiveTime.getTime() : Long.MAX_VALUE;\n+\t\t\tfinal long effectiveTimeStart = startEffectiveTime != null ? EffectiveTimes.getEffectiveTime(startEffectiveTime, DateFormats.SHORT) : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNzAxMQ=="}, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODIxNjkxOnYy", "diffSide": "RIGHT", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/importer/Rf2TransactionContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo0MDo1M1rOF6LVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoyMjoxOFrOF6NTRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NzQ3MQ==", "bodyText": "Consider wrapping this part in a try-catch block (although not sure if we want to move forward with an import that has desynced from the CIS).", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396547471", "createdAt": "2020-03-23T15:40:53Z", "author": {"login": "apeteri"}, "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/importer/Rf2TransactionContext.java", "diffHunk": "@@ -111,25 +111,32 @@ public void clearContents() {\n \t\n \t@Override\n \tpublic long commit() {\n-\t\tthrow new UnsupportedOperationException(\"TODO implement me\");\n+\t\tthrow new UnsupportedOperationException(\"Use the single supported commit(String) method\");\n \t}\n \t\n \t@Override\n-\tpublic long commit(String userId, String commitComment, String parentContextDescription) {\n+\tpublic long commit(String commitComment) {\n \t\tfinal Set<String> idsToRegister = ImmutableSet.copyOf(newComponents.keySet().stream().filter(SnomedIdentifiers::isValid).iterator());\n-\t\ttry {\n-\t\t\t// clear local cache before executing commit\n-\t\t\tnewComponents = newHashMap();\n-\t\t\tLOG.info(\"Pushing changes: {}\", commitComment);\n-\t\t\tlong timestamp = getDelegate().commit(userId, commitComment, parentContextDescription);\n-\t\t\t// after successful commit register all commited IDs to CIS\n-\t\t\tfinal ISnomedIdentifierService cis = service(ISnomedIdentifierService.class);\n-\t\t\tif (cis.importSupported()) {\n-\t\t\t\tcis.register(idsToRegister);\n-\t\t\t}\n-\t\t\treturn timestamp;\n-\t\t} finally {\n+\t\t// clear local cache before executing commit\n+\t\tnewComponents = newHashMap();\n+\t\tLOG.info(\"Pushing changes: {}\", commitComment);\n+\t\tlong timestamp = getDelegate().commit(commitComment);\n+\t\t// after successful commit register all commited IDs to CIS\n+\t\tfinal ISnomedIdentifierService cis = service(ISnomedIdentifierService.class);\n+\t\tif (cis.importSupported()) {\n+\t\t\tcis.register(idsToRegister);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3OTY1NA==", "bodyText": "Well, yeah, that's something that should not happen, otherwise duplicate content will start appearing and that's always a bad sign. The CIS registration logic has been simplified greatly to allow as much ID as possible in, so I think we are safe for now. \ud83d\ude04", "url": "https://github.com/b2ihealthcare/snow-owl/pull/517#discussion_r396579654", "createdAt": "2020-03-23T16:22:18Z", "author": {"login": "cmark"}, "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/importer/Rf2TransactionContext.java", "diffHunk": "@@ -111,25 +111,32 @@ public void clearContents() {\n \t\n \t@Override\n \tpublic long commit() {\n-\t\tthrow new UnsupportedOperationException(\"TODO implement me\");\n+\t\tthrow new UnsupportedOperationException(\"Use the single supported commit(String) method\");\n \t}\n \t\n \t@Override\n-\tpublic long commit(String userId, String commitComment, String parentContextDescription) {\n+\tpublic long commit(String commitComment) {\n \t\tfinal Set<String> idsToRegister = ImmutableSet.copyOf(newComponents.keySet().stream().filter(SnomedIdentifiers::isValid).iterator());\n-\t\ttry {\n-\t\t\t// clear local cache before executing commit\n-\t\t\tnewComponents = newHashMap();\n-\t\t\tLOG.info(\"Pushing changes: {}\", commitComment);\n-\t\t\tlong timestamp = getDelegate().commit(userId, commitComment, parentContextDescription);\n-\t\t\t// after successful commit register all commited IDs to CIS\n-\t\t\tfinal ISnomedIdentifierService cis = service(ISnomedIdentifierService.class);\n-\t\t\tif (cis.importSupported()) {\n-\t\t\t\tcis.register(idsToRegister);\n-\t\t\t}\n-\t\t\treturn timestamp;\n-\t\t} finally {\n+\t\t// clear local cache before executing commit\n+\t\tnewComponents = newHashMap();\n+\t\tLOG.info(\"Pushing changes: {}\", commitComment);\n+\t\tlong timestamp = getDelegate().commit(commitComment);\n+\t\t// after successful commit register all commited IDs to CIS\n+\t\tfinal ISnomedIdentifierService cis = service(ISnomedIdentifierService.class);\n+\t\tif (cis.importSupported()) {\n+\t\t\tcis.register(idsToRegister);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NzQ3MQ=="}, "originalCommit": {"oid": "d2f7658ef8c3c1075e8e549940b7819ea21feab4"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1720, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}