{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODg0MTcx", "number": 467, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyNTowOFrOD1KPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxOTowMlrOD6FWWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDY4ODQ1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyNTowOFrOGKdDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0NzoyM1rOGP7MCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw==", "bodyText": "if these are public maybe we should move them to some more descriptive class name. Like Messages or something like that?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413615023", "createdAt": "2020-04-23T08:25:08Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "diffHunk": "@@ -48,15 +48,16 @@\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n+import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n public abstract class AbstractNodeVisitor extends AbstractVisitor {\n \n-    protected static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    protected static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    protected static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    protected static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    protected static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    protected static final String METADATA_EVENT_TYPE = \"EventType\";\n+    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n+    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n+    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n+    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n+    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n+    public static final String METADATA_EVENT_TYPE = \"EventType\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjE3NQ==", "bodyText": "Do you think a Metadata interface would be better? I thought putting these constants in the \"owner\" visitors or in the common ancestor if they are shared.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413632175", "createdAt": "2020-04-23T08:48:36Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "diffHunk": "@@ -48,15 +48,16 @@\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n+import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n public abstract class AbstractNodeVisitor extends AbstractVisitor {\n \n-    protected static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    protected static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    protected static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    protected static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    protected static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    protected static final String METADATA_EVENT_TYPE = \"EventType\";\n+    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n+    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n+    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n+    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n+    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n+    public static final String METADATA_EVENT_TYPE = \"EventType\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTU2Mg==", "bodyText": "Metadata interface/util class would be perfect!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351562", "createdAt": "2020-05-04T10:47:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "diffHunk": "@@ -48,15 +48,16 @@\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n+import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n public abstract class AbstractNodeVisitor extends AbstractVisitor {\n \n-    protected static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    protected static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    protected static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    protected static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    protected static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    protected static final String METADATA_EVENT_TYPE = \"EventType\";\n+    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n+    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n+    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n+    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n+    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n+    public static final String METADATA_EVENT_TYPE = \"EventType\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDY5MzQ0OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyNjowOVrOGKdGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyMzowOFrOGQOtrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ==", "bodyText": "could it be mis-read? I was thinking this was pointing to the \"parent\" of this node (i.e. another node).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413615785", "createdAt": "2020-04-23T08:26:09Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMDc5OA==", "bodyText": "I renamed it because some nodes have their own nodeContainer. Besides, whenever this method is used is assigned to a variable called parent and the attribute returned is parentNodeContainer.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413630798", "createdAt": "2020-04-23T08:46:38Z", "author": {"login": "ruromero"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MDMwMA==", "bodyText": "Hmm, if some nodes have their own nodeContainer, then getNodeContainer() should return \"their own nodeContainer\" or not?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419350300", "createdAt": "2020-05-04T10:44:40Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMzA3MQ==", "bodyText": "Only CompositeNode has its own nodeContainer? I mean it seems it is returning itself.\nWhy not just overriding the original getNodeContainer on  CompositeNode, or whatever node that has a different behavior other than returning the parent.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419613071", "createdAt": "2020-05-04T17:45:29Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MTQ2OA==", "bodyText": "Ah, I see now. CompositeNode has another NodeContainer named nodeContainer but this, until now, wasn't returned by any of the CompositeNode methods. So by calling getNodeContainer() the NodeContainer from the NodeImpl parent was returned and there was no option to obtain the NodeContainer of CompositeNode using a getter. Now, the getParentContainer() will return the one-level-above container (the one from NodeImpl) and getNodeContainer() will return the one from CompositeNode. In practice, these nodes can be nested into each other many times, but now it is possible to obtain just the container with nodes inside (\"belonging to\") the CompositeNode and the container which CompositeNode is in separately.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419671468", "createdAt": "2020-05-04T19:23:08Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDI4NzkzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0NjoyOFrOGP7KXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0NjoyOFrOGP7KXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTEzMg==", "bodyText": "Hmm, it seems you swapped these 2 tests :)\nHere the name of the test is time cycle but you are setting time duration and vice versa.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351132", "createdAt": "2020-05-04T10:46:28Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -116,7 +118,11 @@ public void testBoundaryTimerTimeCycle() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeCycle(\"1s###5s\").cancelActivity(false).done()\n+                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)\n+                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_DURATION, duration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDI4ODY1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0Njo0M1rOGP7Kzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0Njo0M1rOGP7Kzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTI0Ng==", "bodyText": "Here's the second test.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351246", "createdAt": "2020-05-04T10:46:43Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -165,7 +172,13 @@ public void testBoundaryTimerTimeDuration() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeDuration(\"1s\").cancelActivity(false).done()\n+                .boundaryEventNode(4)\n+                    .name(\"BoundaryTimerEvent\")\n+                    .attachedTo(2)\n+                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_CYCLE, timeCycle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDQ3NDY4OnYy", "diffSide": "LEFT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTo1MjoxMVrOGP89iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyNToxNlrOGQOybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg==", "bodyText": "Why where these helper methods removed? Or did you want to make the setup more explicit?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419380616", "createdAt": "2020-05-04T11:52:11Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "diffHunk": "@@ -118,24 +115,4 @@ public BoundaryEventNodeFactory eventType(String eventTypePrefix, String eventTy\n         super.eventFilter(filter);\n         return this;\n     }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        return metaData(METADATA_TIME_CYCLE, timeCycle);\n-    }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle, String language) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        metaData(METADATA_TIME_CYCLE, timeCycle);\n-        return metaData(METADATA_LANGUAGE, language);\n-    }\n-\n-    public BoundaryEventNodeFactory timeDuration(String timeDuration) {\n-        eventType(EVENT_TYPE_TIMER, timeDuration);\n-        return metaData(METADATA_TIME_DURATION, timeDuration);\n-    }\n-\n-    public BoundaryEventNodeFactory cancelActivity(boolean cancelActivity) {\n-        return metaData(METADATA_CANCEL_ACTIVITY, cancelActivity);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNDkyNg==", "bodyText": "The main reason is that Metadata attributes are copied in the VisitMetadata method so this seems redundant.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419404926", "createdAt": "2020-05-04T12:40:18Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "diffHunk": "@@ -118,24 +115,4 @@ public BoundaryEventNodeFactory eventType(String eventTypePrefix, String eventTy\n         super.eventFilter(filter);\n         return this;\n     }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        return metaData(METADATA_TIME_CYCLE, timeCycle);\n-    }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle, String language) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        metaData(METADATA_TIME_CYCLE, timeCycle);\n-        return metaData(METADATA_LANGUAGE, language);\n-    }\n-\n-    public BoundaryEventNodeFactory timeDuration(String timeDuration) {\n-        eventType(EVENT_TYPE_TIMER, timeDuration);\n-        return metaData(METADATA_TIME_DURATION, timeDuration);\n-    }\n-\n-    public BoundaryEventNodeFactory cancelActivity(boolean cancelActivity) {\n-        return metaData(METADATA_CANCEL_ACTIVITY, cancelActivity);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MjY4NQ==", "bodyText": "I see, so eventTypes and metaData are \"copied\" when bpmn is traversed anyway.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419672685", "createdAt": "2020-05-04T19:25:16Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "diffHunk": "@@ -118,24 +115,4 @@ public BoundaryEventNodeFactory eventType(String eventTypePrefix, String eventTy\n         super.eventFilter(filter);\n         return this;\n     }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        return metaData(METADATA_TIME_CYCLE, timeCycle);\n-    }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle, String language) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        metaData(METADATA_TIME_CYCLE, timeCycle);\n-        return metaData(METADATA_LANGUAGE, language);\n-    }\n-\n-    public BoundaryEventNodeFactory timeDuration(String timeDuration) {\n-        eventType(EVENT_TYPE_TIMER, timeDuration);\n-        return metaData(METADATA_TIME_DURATION, timeDuration);\n-    }\n-\n-    public BoundaryEventNodeFactory cancelActivity(boolean cancelActivity) {\n-        return metaData(METADATA_CANCEL_ACTIVITY, cancelActivity);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDQ5OTcxOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowMDoyM1rOGP9MqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyNjoxNlrOGQO0ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ==", "bodyText": "Hmm, what about calling it getParentNodeContainer()? This way it will be consistent, i.e. getNodeContainer() for getting this node's container and getParentNodeContainer() for getting the node container of this node parent :) Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419384489", "createdAt": "2020-05-04T12:00:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java", "diffHunk": "@@ -245,7 +245,7 @@ public Connection getTo() {\n         return getOutgoingConnections(org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n     }\n \n-    public NodeContainer getNodeContainer() {\n+    public NodeContainer getParentContainer() {\n         return parentNodeContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNDE5Mg==", "bodyText": "What about just getContainer and getParentContainer ? FYI not all nodes have their own container, only CompositeNode nodes have it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419404192", "createdAt": "2020-05-04T12:38:59Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java", "diffHunk": "@@ -245,7 +245,7 @@ public Connection getTo() {\n         return getOutgoingConnections(org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n     }\n \n-    public NodeContainer getNodeContainer() {\n+    public NodeContainer getParentContainer() {\n         return parentNodeContainer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MzI1MQ==", "bodyText": "Yes, +1.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419673251", "createdAt": "2020-05-04T19:26:16Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java", "diffHunk": "@@ -245,7 +245,7 @@ public Connection getTo() {\n         return getOutgoingConnections(org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n     }\n \n-    public NodeContainer getNodeContainer() {\n+    public NodeContainer getParentContainer() {\n         return parentNodeContainer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUwOTc2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowMzo0NlrOGP9Sxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowOTo0MFrOGQCHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NjA1NQ==", "bodyText": "So in this case the actionType key is not present in a map? In this case we should probably assert for null in the previous if condition, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419386055", "createdAt": "2020-05-04T12:03:46Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java", "diffHunk": "@@ -194,7 +197,7 @@ private static void assertActions(Node eNode, ExtendedNodeImpl expected, Extende\n             try {\n                 if (expected.getActions(actionType) == null) {\n                     assertNull(current.getActions(actionType));\n-                } else {\n+                } else if (!EVENT_NODE_ENTER.equals(actionType) && !EVENT_NODE_EXIT.equals(actionType)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NTA2MQ==", "bodyText": "As discussed, this is ok.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419465061", "createdAt": "2020-05-04T14:09:40Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java", "diffHunk": "@@ -194,7 +197,7 @@ private static void assertActions(Node eNode, ExtendedNodeImpl expected, Extende\n             try {\n                 if (expected.getActions(actionType) == null) {\n                     assertNull(current.getActions(actionType));\n-                } else {\n+                } else if (!EVENT_NODE_ENTER.equals(actionType) && !EVENT_NODE_EXIT.equals(actionType)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NjA1NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUxOTEzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/resources/org/kie/kogito/codegen/process/process-generation-test.skip.txt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowNjo1M1rOGP9YcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODozODowN1rOGQNHdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NzUwNQ==", "bodyText": "What is preventing us from testing these 3 cases specifically? You added many more and these are (presumably) tested.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419387505", "createdAt": "2020-05-04T12:06:53Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/resources/org/kie/kogito/codegen/process/process-generation-test.skip.txt", "diffHunk": "@@ -1,3 +1,6 @@\n+cases/ScriptRoleAssignmentCase.bpmn2\n+cases/UserTaskWithStageCase.bpmn2\n+cases/UserTaskWithStageCaseAutoStart.bpmn2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjk0Nw==", "bodyText": "The two UserTaskWithStageCase processes depend on custom model definition and are ignored like in other processes.\nThe ScriptRoleAssignmentCase should be removed once the case model supports caseAssignments or something equivalent and the process is updated.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419406947", "createdAt": "2020-05-04T12:43:59Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/resources/org/kie/kogito/codegen/process/process-generation-test.skip.txt", "diffHunk": "@@ -1,3 +1,6 @@\n+cases/ScriptRoleAssignmentCase.bpmn2\n+cases/UserTaskWithStageCase.bpmn2\n+cases/UserTaskWithStageCaseAutoStart.bpmn2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NzUwNQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0NTMwMQ==", "bodyText": "Ah, I see. And about the custom model - is there a plan to support it as well? Just curious.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419645301", "createdAt": "2020-05-04T18:38:07Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/resources/org/kie/kogito/codegen/process/process-generation-test.skip.txt", "diffHunk": "@@ -1,3 +1,6 @@\n+cases/ScriptRoleAssignmentCase.bpmn2\n+cases/UserTaskWithStageCase.bpmn2\n+cases/UserTaskWithStageCaseAutoStart.bpmn2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NzUwNQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY3NzY5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozNjowMVrOGQIeEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozNjowMVrOGQIeEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2OTE3MQ==", "bodyText": "just a formatting comment, it would be great to break all chained method calls into different lines.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419569171", "createdAt": "2020-05-04T16:36:01Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -116,7 +122,11 @@ public void testBoundaryTimerTimeCycle() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeCycle(\"1s###5s\").cancelActivity(false).done()\n+                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTcwNTY0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0Mjo1NlrOGQIvMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoyNDo0M1rOGQQzoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA==", "bodyText": "why not passing the function,body::addStatement  as a parameter to the visitCustomFields method and apply it on the method implementation, I mean to keep the same approach of other visit methods, or just change the method name to getCustomFields ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419573554", "createdAt": "2020-05-04T16:42:56Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java", "diffHunk": "@@ -71,6 +73,8 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n             visitVariableScope(getNodeId(node), variableScopeNode, body, new HashSet<>());\n         }\n \n+        visitCustomFields(compositeContextNode).forEach(body::addStatement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzA5MA==", "bodyText": "Probably the best option would be to pass body as another argument as with other visitors.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419653090", "createdAt": "2020-05-04T18:51:27Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java", "diffHunk": "@@ -71,6 +73,8 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n             visitVariableScope(getNodeId(node), variableScopeNode, body, new HashSet<>());\n         }\n \n+        visitCustomFields(compositeContextNode).forEach(body::addStatement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA=="}, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNTc2MA==", "bodyText": "why not passing the function,body::addStatement as a parameter to the visitCustomFields method and apply it on the method implementation, I mean to keep the same approach of other visit methods, or just change the method name to getCustomFields ?\n\nThat will make it look very different from the other visit methods.\n\nProbably the best option would be to pass body as another argument as with other visitors.\n\nI wanted to avoid passing an object to be modified as an argument. This is part of some refactoring I did everywhere that didn't require too big changes, like in visitNodes.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419705760", "createdAt": "2020-05-04T20:24:43Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java", "diffHunk": "@@ -71,6 +73,8 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n             visitVariableScope(getNodeId(node), variableScopeNode, body, new HashSet<>());\n         }\n \n+        visitCustomFields(compositeContextNode).forEach(body::addStatement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA=="}, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTcxNjMxOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0NToyMlrOGQI1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNTo0ODoxN1rOGQbM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NTE3Nw==", "bodyText": "isn't safer to check if node is instance of DynamicNode? Or maybe better to use Generics on AbstractNodeVisitor, to avoid the need for casting.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419575177", "createdAt": "2020-05-04T16:45:22Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n+import org.jbpm.ruleflow.core.factory.DynamicNodeFactory;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n+import org.jbpm.workflow.core.node.DynamicNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_ACTIVATION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_COMPLETION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_LANGUAGE;\n+\n+public class DynamicNodeVisitor extends CompositeContextNodeVisitor {\n+\n+    private static final String FACTORY_METHOD_NAME = \"dynamicNode\";\n+\n+    public DynamicNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+        super(nodesVisitors);\n+    }\n+\n+    @Override\n+    protected Class<? extends CompositeContextNodeFactory> factoryClass() {\n+        return DynamicNodeFactory.class;\n+    }\n+\n+    @Override\n+    protected String factoryMethod() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getDefaultName() {\n+        return \"Dynamic\";\n+    }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        Collection<MethodCallExpr> methods = new ArrayList<>();\n+        DynamicNode dynamicNode = (DynamicNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg3NjA4NA==", "bodyText": "I have refactored all the visitor classes to make them use generics, I think they look much better. Thanks for the suggestion.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419876084", "createdAt": "2020-05-05T05:48:17Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n+import org.jbpm.ruleflow.core.factory.DynamicNodeFactory;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n+import org.jbpm.workflow.core.node.DynamicNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_ACTIVATION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_COMPLETION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_LANGUAGE;\n+\n+public class DynamicNodeVisitor extends CompositeContextNodeVisitor {\n+\n+    private static final String FACTORY_METHOD_NAME = \"dynamicNode\";\n+\n+    public DynamicNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+        super(nodesVisitors);\n+    }\n+\n+    @Override\n+    protected Class<? extends CompositeContextNodeFactory> factoryClass() {\n+        return DynamicNodeFactory.class;\n+    }\n+\n+    @Override\n+    protected String factoryMethod() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getDefaultName() {\n+        return \"Dynamic\";\n+    }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        Collection<MethodCallExpr> methods = new ArrayList<>();\n+        DynamicNode dynamicNode = (DynamicNode) node;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NTE3Nw=="}, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc0NTU3OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo1MjoxNVrOGQJHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo1MjoxNVrOGQJHbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3OTc1OA==", "bodyText": "same here, check before casting, or better to use generics.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419579758", "createdAt": "2020-05-04T16:52:15Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "diffHunk": "@@ -38,8 +50,24 @@ protected String factoryMethod() {\n         return FACTORY_METHOD_NAME;\n     }\n \n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n     @Override\n     protected String getDefaultName() {\n         return \"Event Subprocess\";\n     }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTg2OTUwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyMzoxOVrOGQKT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoyMzoxOVrOGQKT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5OTMzMg==", "bodyText": "same here, to avoid the cast it could be used generics, maybe on AbstractNodeVisitor", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419599332", "createdAt": "2020-05-04T17:23:19Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.LongLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.workflow.core.node.MilestoneNode;\n+import org.kie.api.definition.process.Node;\n+\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n+\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor {\n+\n+    private static final String NODE_KEY = \"milestoneNode\";\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return NODE_KEY;\n+    }\n+\n+    @Override\n+    public void visitNode(String factoryField, Node node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        MilestoneNode milestoneNode = (MilestoneNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTkwNzYyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/Node.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMjozMFrOGQKrLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoxMjowOVrOGQQYnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw==", "bodyText": "why the static final was removed? Anyway, if it is not a constant anymore you can change the name to camel case.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419605293", "createdAt": "2020-05-04T17:32:30Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/Node.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n public interface Node extends org.kie.api.definition.process.Node, Contextable, Serializable {\n \n-    static final String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";\n+    String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4MTMxMg==", "bodyText": "On interfaces, every field is defined as static final and public so this is redundant.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419681312", "createdAt": "2020-05-04T19:40:19Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/Node.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n public interface Node extends org.kie.api.definition.process.Node, Contextable, Serializable {\n \n-    static final String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";\n+    String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw=="}, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5ODg0NQ==", "bodyText": "ooh this is an interface, yep you are right!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419698845", "createdAt": "2020-05-04T20:12:09Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/Node.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n public interface Node extends org.kie.api.definition.process.Node, Contextable, Serializable {\n \n-    static final String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";\n+    String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw=="}, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTIyNzcwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozOTo1OFrOGQp4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozOTo1OFrOGQp4iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNjYxNw==", "bodyText": "Generics now works but just because here we use unsafe casting. Without it the types in the call on line 44 visitor.visitNode(factoryField, node, body, variableScope, metadata); wouldn't match as U[] nodes is always array of Node (passed from the visitNode method) so U is Node but then we are passing this node variable of type Node to that method call on line 44. But given we did unsafe casting here, compiler is happy and it is ok after type erasure as during runtime the signature of abstractNodeVisitor visitNode() method has Node.\nIn short, I am not sure if this helped the hierarchy :) We also use raw types for Visitors in ProcessVisitor.java file.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r420116617", "createdAt": "2020-05-05T13:39:58Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java", "diffHunk": "@@ -17,21 +17,27 @@\n \n import com.github.javaparser.ast.stmt.BlockStmt;\n import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.kie.api.definition.process.Node;\n \n import java.util.Map;\n \n-public abstract class AbstractCompositeNodeVisitor extends AbstractNodeVisitor {\n+public abstract class AbstractCompositeNodeVisitor<T extends CompositeContextNode> extends AbstractNodeVisitor<T> {\n \n-    protected Map<Class<?>, AbstractNodeVisitor> nodesVisitors;\n+    protected Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors;\n \n-    public AbstractCompositeNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+    public AbstractCompositeNodeVisitor(Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors) {\n         this.nodesVisitors = nodesVisitors;\n     }\n \n-    protected void visitNodes(String factoryField, Node[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n-        for (Node node : nodes) {\n-            AbstractNodeVisitor visitor = nodesVisitors.get(node.getClass());\n+    @Override\n+    public void visitNode(T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        super.visitNode(node, body, variableScope, metadata);\n+    }\n+\n+    protected <U extends Node> void visitNodes(String factoryField, U[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        for (U node : nodes) {\n+            AbstractNodeVisitor<U> visitor = (AbstractNodeVisitor<U>) nodesVisitors.get(node.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcef3f83a431f4638d36ebbdaa04893f9aef164c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTIzMDA0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0MDoyN1rOGQp53Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0MDoyN1rOGQp53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNjk1Nw==", "bodyText": "Here we are using raw types for example.\nSame issue with unsafe calls now appeared in visitNodes method as well.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r420116957", "createdAt": "2020-05-05T13:40:27Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "diffHunk": "@@ -103,6 +105,9 @@ public ProcessVisitor(ClassLoader contextClassLoader) {\n         this.nodesVisitors.put(CompositeContextNode.class, new CompositeContextNodeVisitor(nodesVisitors));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcef3f83a431f4638d36ebbdaa04893f9aef164c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjE4OTg0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMjowMFrOGRsr4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxNTo1NVrOGR52iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg==", "bodyText": "@ruromero not sure we should introduce a new extension. Should these just be as regular .bpmn or .bpmn2 ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421211106", "createdAt": "2020-05-07T03:02:00Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ProcessCodegen.class);\n \n     private static final SemanticModules BPMN_SEMANTIC_MODULES = new SemanticModules();\n-    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\")));\n+    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\", \".bpmn-cm\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzUyNQ==", "bodyText": "bpmn-cm is a format introduced in jbpm7 for case modeler. It is compatible with bpmn2 and as we are adding functionalities for case management processes I think it's nice to have. Otherwise, processes created with the case modeler jbpm7.x will have to be renamed to work on Kogito.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421257525", "createdAt": "2020-05-07T06:00:25Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ProcessCodegen.class);\n \n     private static final SemanticModules BPMN_SEMANTIC_MODULES = new SemanticModules();\n-    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\")));\n+    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\", \".bpmn-cm\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNjgyNQ==", "bodyText": "@ruromero you do have a point but I believe that it should be discussed with the team to understand our overall strategy around it. At least to me, it is not clear if we want to promote that with Kogito.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421426825", "createdAt": "2020-05-07T11:15:55Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ProcessCodegen.class);\n \n     private static final SemanticModules BPMN_SEMANTIC_MODULES = new SemanticModules();\n-    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\")));\n+    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\", \".bpmn-cm\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIyODAyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoyNDo0NFrOGRtB7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoyNDo0NFrOGRtB7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNjc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421216751", "createdAt": "2020-05-07T03:24:44Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIzNjYzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/DynamicNodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozMDowNlrOGRtHAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMzoxN1rOGRvk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODA0OQ==", "bodyText": "@ruromero should these fields be moved to DynamicNodeVisitor?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218049", "createdAt": "2020-05-07T03:30:06Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/DynamicNodeFactory.java", "diffHunk": "@@ -25,6 +25,10 @@\n \n public class DynamicNodeFactory extends CompositeContextNodeFactory {\n \n+\tpublic static final String METHOD_LANGUAGE = \"language\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODQ1MQ==", "bodyText": "It's just a matter of taste, I considered the owner of the method should have the constant that will be used by the visitor to make it easier to maintain and remove/update as the methods are defined here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258451", "createdAt": "2020-05-07T06:03:17Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/DynamicNodeFactory.java", "diffHunk": "@@ -25,6 +25,10 @@\n \n public class DynamicNodeFactory extends CompositeContextNodeFactory {\n \n+\tpublic static final String METHOD_LANGUAGE = \"language\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODA0OQ=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIzNzkzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozMDo1M1rOGRtHxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMzoyMlrOGRvk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODI0Nw==", "bodyText": "similar here, move to EventSubprocessNodeVisitor?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218247", "createdAt": "2020-05-07T03:30:53Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -16,13 +16,16 @@\n \n package org.jbpm.ruleflow.core.factory;\n \n+import org.jbpm.process.core.event.EventTypeFilter;\n import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n import org.jbpm.workflow.core.NodeContainer;\n import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.jbpm.workflow.core.node.EventSubProcessNode;\n \n public class EventSubProcessNodeFactory extends CompositeContextNodeFactory {\n \n+    public static final String METHOD_KEEP_ACTIVE = \"keepActive\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODQ4NQ==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258485", "createdAt": "2020-05-07T06:03:22Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -16,13 +16,16 @@\n \n package org.jbpm.ruleflow.core.factory;\n \n+import org.jbpm.process.core.event.EventTypeFilter;\n import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n import org.jbpm.workflow.core.NodeContainer;\n import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.jbpm.workflow.core.node.EventSubProcessNode;\n \n public class EventSubProcessNodeFactory extends CompositeContextNodeFactory {\n \n+    public static final String METHOD_KEEP_ACTIVE = \"keepActive\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODI0Nw=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIzOTQ0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozMTo1MFrOGRtIqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNDoyMFrOGRvmWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODQ3NQ==", "bodyText": "@ruromero seems like method is not used, could it be removed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218475", "createdAt": "2020-05-07T03:31:50Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODg0Mw==", "bodyText": "It is used in the generated code. See EventSubprocessNodeVisitor#visitCustomFields", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258843", "createdAt": "2020-05-07T06:04:20Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODQ3NQ=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjI0MTU1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozMzoxNFrOGRtKAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNDo0M1rOGRvm5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODgxNg==", "bodyText": "same here, not used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218816", "createdAt": "2020-05-07T03:33:14Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {\n+        ((EventSubProcessNode) getCompositeNode()).setKeepActive(keepActive);\n+        return this;\n+    }\n+\n+    public EventSubProcessNodeFactory event(String event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODk4Mw==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421258983", "createdAt": "2020-05-07T06:04:43Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {\n+        ((EventSubProcessNode) getCompositeNode()).setKeepActive(keepActive);\n+        return this;\n+    }\n+\n+    public EventSubProcessNodeFactory event(String event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODgxNg=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjI0MjI5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/MilestoneNodeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozMzo0M1rOGRtKdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNTo1MVrOGRvoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODkzMg==", "bodyText": "move to MilestoneNodeVisitor?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218932", "createdAt": "2020-05-07T03:33:43Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/MilestoneNodeFactory.java", "diffHunk": "@@ -23,6 +23,9 @@\n \n public class MilestoneNodeFactory extends StateBasedNodeFactory {\n \n+    public static final String METHOD_CONSTRAINT = \"constraint\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTMzNQ==", "bodyText": "same as for the EventSubProcessNodeFactory I consider factories are the owners of the methods and these literals should be here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421259335", "createdAt": "2020-05-07T06:05:51Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/MilestoneNodeFactory.java", "diffHunk": "@@ -23,6 +23,9 @@\n \n public class MilestoneNodeFactory extends StateBasedNodeFactory {\n \n+    public static final String METHOD_CONSTRAINT = \"constraint\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODkzMg=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjI0MzE1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/StateBasedNodeFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozNDowNVrOGRtK6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMToxNzoxMFrOGR54-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ==", "bodyText": "not used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421219049", "createdAt": "2020-05-07T03:34:05Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/StateBasedNodeFactory.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public abstract class StateBasedNodeFactory extends ExtendedNodeFactory {\n \n+    public static final String METHOD_TIMER = \"timer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDkwMg==", "bodyText": "They're not used because timers have not yet been added to StateBasedNodeVisitor and its hierarchy. However as this method is not new I decided to add it. I can remove it or try to add timers to WorkItemNode, RuleSetNode, SubProcessNode, MilestoneNode and HumanTaskNode", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421260902", "createdAt": "2020-05-07T06:10:29Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/StateBasedNodeFactory.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public abstract class StateBasedNodeFactory extends ExtendedNodeFactory {\n \n+    public static final String METHOD_TIMER = \"timer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyNzQ1MA==", "bodyText": "np to leave it then", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421427450", "createdAt": "2020-05-07T11:17:10Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/StateBasedNodeFactory.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public abstract class StateBasedNodeFactory extends ExtendedNodeFactory {\n \n+    public static final String METHOD_TIMER = \"timer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ=="}, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjMxNDE2OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxNzo1N1rOGRtzUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxNzo1N1rOGRtzUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyOTM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {\n          \n          \n            \n            public class EventSubProcessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421229394", "createdAt": "2020-05-07T04:17:57Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "diffHunk": "@@ -15,16 +15,27 @@\n \n package org.jbpm.compiler.canonical;\n \n+import com.github.javaparser.ast.expr.BooleanLiteralExpr;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n import org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory;\n+import org.jbpm.workflow.core.node.EventSubProcessNode;\n+import org.kie.api.definition.process.Node;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Map;\n+import java.util.stream.Stream;\n \n-public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor {\n+import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_EVENT;\n+import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_KEEP_ACTIVE;\n+\n+public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjMxNjQxOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxOTowMlrOGRt0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxOTowMlrOGRt0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyOTY5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))\n          \n          \n            \n                    body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY, new LongLiteralExpr(node.getId())))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421229698", "createdAt": "2020-05-07T04:19:02Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.LongLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.workflow.core.node.MilestoneNode;\n+\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n+\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor<MilestoneNode> {\n+\n+    private static final String NODE_KEY = \"milestoneNode\";\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return NODE_KEY;\n+    }\n+\n+    @Override\n+    public void visitNode(String factoryField, MilestoneNode node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 256, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}