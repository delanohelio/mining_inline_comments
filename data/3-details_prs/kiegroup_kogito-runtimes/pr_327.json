{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzE4NTI1", "number": 327, "title": "KOGITO-1618: Runtime metrics for kogito (DMN and DRL) ", "bodyText": "Give the possibility to the developer to export some runtime metrics to Prometheus.\nDuring the code generation of the drl and dmn endpoints, grafana dashboards will be automatically created for each endpoint. Currently the dashboard contains:\n\nQuantiles - Elapsed time for each request (for drl and dmn)\nCount of requests on an endpoint (for drl and dmn)\nCount of the response status codes (for drl and dmn)\nException logging and count (for drl and dmn)\nDMN decision metrics (only DMN). In particular atm we will focus only on the decisions that output a built-in type (string, number or boolean).\n\nThe developer would enable the feature with the following dependency\n    <dependency>\n      <groupId>org.kie.kogito</groupId>\n      <artifactId>monitoring-prometheus-addon</artifactId>\n    </dependency>\n\nAnd extending this class in his/her project\nimport java.io.IOException;\n\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerResponseContext;\nimport javax.ws.rs.ext.Provider;\n\nimport org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n\n@Provider\npublic class MyInterceptor extends MetricsInterceptor {\n    @Override\n    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) throws IOException {\n        super.filter(requestContext, responseContext);\n    }\n}\nFind here https://github.com/r00ta/kogito-examples/tree/system-metrics-example/drools-quarkus-metrics an example of usage.\nModified modules:\n\nprometheus addons: exports the system metrics to prometheus\nkogito-codegen: it is composed by two parts, the dashboard generation and the injection of the code to export the metrics in the endpoints.\na) the dashboard generation export the dashboards to target/dashboards. First of all it reads a \"standard\" dashboard template and then it adds panels to it, depending on the type of the decisions and the endpoints.\nIn order to make it work, a jgrafana \"library\" is added to kogito-kodegen. This \"library\" is quite huge because it contains the DTO of grafana, needed to load the template, add panels and serialize it. Unfortunately the API of grafana sometimes are not documented at all, so this library contains a DTO that was inferred by trial and error approach -> i.e. export some dashboards and check what is inside.\nb) some statements that call the classes in the prometheus addons to export metrics are injected in the dmn/drl endpoints.", "createdAt": "2020-02-21T14:47:03Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327", "merged": true, "mergeCommit": {"oid": "f668f32a365a31a933e1710ce34957fc26a85d55"}, "closed": true, "closedAt": "2020-04-02T07:06:51Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 82, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcENeWrAH2gAyMzc4MzE4NTI1OjM0NzcxMGQwNDA1NGY3Yjk1MDQ3ZjJmYTk5ZmE3ZjM5YmJhYTY2MmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTXa8CgH2gAyMzc4MzE4NTI1OmEzYzZiMDljY2YyOGNiZWJhMWE4MGUyZTJjYjQ4OTljN2RjZjhiMmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "347710d04054f7b95047f2fa99fa7f39bbaa662e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/347710d04054f7b95047f2fa99fa7f39bbaa662e", "committedDate": "2020-02-14T11:03:42Z", "message": "add system metrics logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96041f32800d12aee674b05515a385586800efa6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/96041f32800d12aee674b05515a385586800efa6", "committedDate": "2020-02-19T11:54:58Z", "message": "add grafana dashboard generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f29bd3e89709484877b85bf5ae3cb1e431fe24a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1f29bd3e89709484877b85bf5ae3cb1e431fe24a", "committedDate": "2020-02-21T13:12:37Z", "message": "add dmn metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33ea6088f118f91b8aeab44696bccaedb4f4878d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/33ea6088f118f91b8aeab44696bccaedb4f4878d", "committedDate": "2020-02-21T14:25:43Z", "message": "change MetricsCollector name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59fe2ab14fe19f55eb51d3b1019094715264ada0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/59fe2ab14fe19f55eb51d3b1019094715264ada0", "committedDate": "2020-02-21T15:39:49Z", "message": "fix heatmap template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7b62848481839cbc461d14e79464e07f7ff80ce0", "committedDate": "2020-02-24T12:16:31Z", "message": "refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzU3ODAw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-363357800", "createdAt": "2020-02-24T12:36:19Z", "commit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNjoxOVrOFtfIZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyMDoxN1rOFtq22A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MDI5NA==", "bodyText": "I think you were looking for computeIfAbsent method, the whole method becomes:\nhistograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n                (key, value) -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n                .labels(handler).observe(elapsedTime)\n\nSame for the other methods of this class", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383240294", "createdAt": "2020-02-24T12:36:19Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector implements IMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        Counter counter;\n+        if (!counters.containsKey(CountersTypesEnum.REQUESTS_STATUS_CODE)){\n+            counter = Counter.build().name(\"api_http_response_code\").help(\"Request status code.\").labelNames(\"handler\", \"identifier\").register();\n+            counters.put(CountersTypesEnum.REQUESTS_STATUS_CODE, counter);\n+        }\n+        else{\n+            counter = counters.get(CountersTypesEnum.REQUESTS_STATUS_CODE);\n+        }\n+\n+        counter.labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        Histogram hist;\n+        if (!histograms.containsKey(HistogramTypes.ELAPSED_TIME)){\n+            hist = HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"});\n+            histograms.put(HistogramTypes.ELAPSED_TIME, hist);\n+        }\n+        else{\n+            hist = histograms.get(HistogramTypes.ELAPSED_TIME);\n+        }\n+\n+        hist.labels(handler).observe(elapsedTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MDg0Mg==", "bodyText": "Please move all constant strings to a class of constants", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383240842", "createdAt": "2020-02-24T12:37:37Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector implements IMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        Counter counter;\n+        if (!counters.containsKey(CountersTypesEnum.REQUESTS_STATUS_CODE)){\n+            counter = Counter.build().name(\"api_http_response_code\").help(\"Request status code.\").labelNames(\"handler\", \"identifier\").register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MTA2NA==", "bodyText": "Why do we need this marker interface?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383241064", "createdAt": "2020-02-24T12:38:11Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/IMetricsCollector.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+public interface IMetricsCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MTA0Nw==", "bodyText": "Please rename result to dmnResult and result1 to result", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383271047", "createdAt": "2020-02-24T13:43:20Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(String name){\n+        if (!counters.containsKey(name)){\n+            Counter tmp = Counter.build().name(name).help(\"Decision information\").labelNames(\"identifier\", \"handler\").register();\n+            counters.put(name, tmp);\n+        }\n+        return counters.get(name);\n+    }\n+\n+    public static void generateMetrics(String handler, DMNResult result){\n+        List<DMNDecisionResult> decisionResults = result.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults){\n+            Object result1 = decision.getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3ODk0Mg==", "bodyText": "Please use proper logger (debug level?)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383278942", "createdAt": "2020-02-24T13:58:40Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MTI1Mw==", "bodyText": "Add a comment to explain this metric", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383281253", "createdAt": "2020-02-24T14:02:55Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());\n+        List<String> matchedUris = requestContext.getUriInfo().getMatchedURIs();\n+        if (matchedUris.size() != 0){\n+            SystemMetricsCollector.RegisterStatusCodeRequest(matchedUris.get(0), String.valueOf(responseContext.getStatusInfo().getStatusCode()));\n+        }\n+        else\n+        {\n+            SystemMetricsCollector.RegisterStatusCodeRequest(\"\", String.valueOf(responseContext.getStatusInfo().getStatusCode()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng==", "bodyText": "I think we should not catch generic Exception in this way because we have no context at all (it could be related to a custom user method too)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383420056", "createdAt": "2020-02-24T17:54:39Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class PrometheusExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA==", "bodyText": "This should be moved to a different location", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383432408", "createdAt": "2020-02-24T18:20:17Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.redhat.developer.IJGrafana;\n+import com.redhat.developer.JGrafana;\n+import com.redhat.developer.model.panel.PanelType;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    public static String readStandardDashboard(){\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\" );\n+        return new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    public static boolean generateDashboardForEndpoint(String handlerName, int id){\n+        String template = readStandardDashboard();\n+        template = template.replaceAll(\"\\\\$handlerName\\\\$\", handlerName);\n+        template = template.replaceAll(\"\\\\$id\\\\$\", String.valueOf(id));\n+        template = template.replaceAll(\"\\\\$uid\\\\$\", UUID.randomUUID().toString());\n+\n+        try {\n+            File file = new File(\"/tmp/dashboard-endpoint-\" + handlerName + \".json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjU3MzEw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-363657310", "createdAt": "2020-02-24T19:52:25Z", "commit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyNVrOFttukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1OTo1NlrOFtt92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTQ0Mg==", "bodyText": "If this is going to be added to addons I\u2019d recommend to use addon as suffix of artefact id", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383479442", "createdAt": "2020-02-24T19:52:25Z", "author": {"login": "mswiderski"}, "path": "addons/pom.xml", "diffHunk": "@@ -18,6 +18,7 @@\n     <module>process-management-addon</module>\n     <module>jobs</module>\n     <module>predictions</module>\n+    <module>system-monitoring</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDAwMw==", "bodyText": "Why is this needed? I means isn\u2019t microprofile metrics or spring boot actuator would give such system metrics out of the box?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383480003", "createdAt": "2020-02-24T19:53:31Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDMxMg==", "bodyText": "Is this really needed? It makes this component useless in spring boot runtime...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383480312", "createdAt": "2020-02-24T19:54:08Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDUyMQ==", "bodyText": "Is this DMN specific? If so why?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383480521", "createdAt": "2020-02-24T19:54:35Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MTE4OQ==", "bodyText": "Fully agreed, furthermore why the class id called PrometheusExceptionMapper", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383481189", "createdAt": "2020-02-24T19:55:50Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class PrometheusExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MzM1Mg==", "bodyText": "Why this is even part of kogito codegen? Is this going to be used by runtime service? I mean the generated dashboard... sounds bit weird to me to have it as part of the runtime generation... I would see it more as separate maven plugin/goal.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383483352", "createdAt": "2020-02-24T19:59:56Z", "author": {"login": "mswiderski"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -132,5 +132,12 @@\n        <artifactId>javax.annotation-api</artifactId>\n        <scope>test</scope>\n      </dependency>\n+    <dependency>\n+        <groupId>com.redhat.developer</groupId>\n+        <artifactId>jgrafana</artifactId>\n+        <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a07994351789b761bac2eefa5e6d11f92a12405f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a07994351789b761bac2eefa5e6d11f92a12405f", "committedDate": "2020-02-25T09:04:27Z", "message": "fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1458b90d421c4cef08d2d9749264de04f4f19e67", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1458b90d421c4cef08d2d9749264de04f4f19e67", "committedDate": "2020-02-25T09:39:10Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99848763ef3fae54049e051e8ffc289d5e14ef54", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/99848763ef3fae54049e051e8ffc289d5e14ef54", "committedDate": "2020-02-25T16:54:10Z", "message": "make system monitoring optional in codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89350ea2e5e502bd1bd89fa66bbb1cc83414bb43", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89350ea2e5e502bd1bd89fa66bbb1cc83414bb43", "committedDate": "2020-02-26T12:04:58Z", "message": "make metrics codegen options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ab54851fa0d114ec75a1752f6ed63fd3c6e564", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/39ab54851fa0d114ec75a1752f6ed63fd3c6e564", "committedDate": "2020-02-27T09:11:44Z", "message": "fix optional monitoring in dmn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a796a953bd70f5329e91a2ca84846bd5a8fed330", "committedDate": "2020-03-02T00:08:44Z", "message": "merge system-monitoring package in monitoring-prometheus"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTg2OTk1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-366986995", "createdAt": "2020-03-02T07:17:23Z", "commit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNzoyNFrOFwVc5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNzoyNFrOFwVc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzQyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Counter GetCounter(){\n          \n          \n            \n                public static Counter getCounter(){\n          \n      \n    \n    \n  \n\nplease use lower case method names even for statics", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227428", "createdAt": "2020-03-02T07:17:24Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a5d6536cb1be3bc7a21c9c358dfdbadcc4049b7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3a5d6536cb1be3bc7a21c9c358dfdbadcc4049b7", "committedDate": "2020-03-02T08:50:46Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03d1e1b14889fe30fc708ab0cdf2df4959fffdc", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b03d1e1b14889fe30fc708ab0cdf2df4959fffdc", "committedDate": "2020-03-02T10:44:46Z", "message": "store grafana dashboard to target dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d3ac145dc8ef40520ff2c22f60aec4b6dadd70", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/84d3ac145dc8ef40520ff2c22f60aec4b6dadd70", "committedDate": "2020-03-02T10:47:01Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8582ddbbdd9576b559a24bc390c81a0c559ebe4a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8582ddbbdd9576b559a24bc390c81a0c559ebe4a", "committedDate": "2020-03-02T10:56:04Z", "message": "fix extensions for dashboards"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTg3MTE5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-366987119", "createdAt": "2020-03-02T07:17:50Z", "commit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNzo1MVrOFwVdNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjowMFrOFwtwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterStatusCodeRequest(String handler, String statusCode){\n          \n          \n            \n                public static void registerStatusCodeRequest(String handler, String statusCode){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227508", "createdAt": "2020-03-02T07:17:51Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n          \n          \n            \n                public static void registerElapsedTimeSampleMetrics(String handler, double elapsedTime){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227564", "createdAt": "2020-03-02T07:18:03Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzYxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterException(String handler, String stackTrace){\n          \n          \n            \n                public static void registerException(String handler, String stackTrace){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227619", "createdAt": "2020-03-02T07:18:13Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterProcessorsSample(int totalProcessors){\n          \n          \n            \n                public static void registerProcessorsSample(int totalProcessors){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227673", "createdAt": "2020-03-02T07:18:23Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){\n+        counters.computeIfAbsent(CountersTypesEnum.EXCEPTIONS,\n+                                 k -> Counter.build().name(MetricsConstants.EXCEPTIONS_NAME)\n+                                         .help(MetricsConstants.EXCEPTIONS_HELP)\n+                                         .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                .labels(handler, stackTrace).inc();\n+    }\n+\n+    public static void RegisterProcessorsSample(int totalProcessors){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzczMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterSystemMemorySample(double totalMemory, double freeMemory) {\n          \n          \n            \n                public static void registerSystemMemorySample(double totalMemory, double freeMemory) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227731", "createdAt": "2020-03-02T07:18:33Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){\n+        counters.computeIfAbsent(CountersTypesEnum.EXCEPTIONS,\n+                                 k -> Counter.build().name(MetricsConstants.EXCEPTIONS_NAME)\n+                                         .help(MetricsConstants.EXCEPTIONS_HELP)\n+                                         .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                .labels(handler, stackTrace).inc();\n+    }\n+\n+    public static void RegisterProcessorsSample(int totalProcessors){\n+        gauges.computeIfAbsent(GaugeTypesEnum.PROCESSORS,\n+                               k -> Gauge.build().name(MetricsConstants.PROCESSORS_NAME)\n+                                       .help(MetricsConstants.PROCESSORS_HELP)\n+                                       .labelNames().register())\n+                               .labels().set(totalProcessors);\n+    }\n+\n+    public static void RegisterSystemMemorySample(double totalMemory, double freeMemory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTc0Mg==", "bodyText": "I would not encode this type information here, it's better at this time to use some kind of generic description like \"resource\". I feel like dashboard is too specific. In this case, the sub-path /dashboard/ is enough to distinguish the type of resource", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386625742", "createdAt": "2020-03-02T20:16:00Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -29,7 +29,8 @@\n         MODEL,\n         CLASS,\n         MESSAGE_CONSUMER,\n-        MESSAGE_PRODUCER;\n+        MESSAGE_PRODUCER,\n+        DASHBOARD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8582ddbbdd9576b559a24bc390c81a0c559ebe4a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1283f07270777a1b1b940d7b972bb0393004bcc", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c1283f07270777a1b1b940d7b972bb0393004bcc", "committedDate": "2020-03-02T20:24:58Z", "message": "dmn type handling draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc51e363f836afa82e5a4314c06b20a6ad662a4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ecc51e363f836afa82e5a4314c06b20a6ad662a4", "committedDate": "2020-03-02T20:27:31Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf44baec697993ab51520758e2db12060034e784", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bf44baec697993ab51520758e2db12060034e784", "committedDate": "2020-03-03T10:07:17Z", "message": "manage different dmn decision types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd71b522b7ae49c56e864e61ef7f822a24549535", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd71b522b7ae49c56e864e61ef7f822a24549535", "committedDate": "2020-03-04T11:05:00Z", "message": "support different dmn built-in data types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ade6e7c2e942a5319d602417d86dc0106ab1b31", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2ade6e7c2e942a5319d602417d86dc0106ab1b31", "committedDate": "2020-03-04T16:37:46Z", "message": "add handler first tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4284869ee22953eb1f4e4d7f1e9eca109e9ee403", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4284869ee22953eb1f4e4d7f1e9eca109e9ee403", "committedDate": "2020-03-05T13:53:33Z", "message": "add codegen tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846c8ca62b66beb676b101ea2afb59004b9779c0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/846c8ca62b66beb676b101ea2afb59004b9779c0", "committedDate": "2020-03-05T14:24:42Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d8e75fb09a251f7cf27830df8177ecd8ba2b3df", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5d8e75fb09a251f7cf27830df8177ecd8ba2b3df", "committedDate": "2020-03-05T14:53:45Z", "message": "improve readability of some classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff071c6d75a77528afa17e1a92e77b4e731a7213", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ff071c6d75a77528afa17e1a92e77b4e731a7213", "committedDate": "2020-03-05T17:34:05Z", "message": "put jgrafana library into kogito for the time being"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df48bdec355d14bc39d5cb0840cd6da75f435f2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9df48bdec355d14bc39d5cb0840cd6da75f435f2", "committedDate": "2020-03-06T08:59:27Z", "message": "remove apache.io"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6d64f9c1f99712ea9d9183b7f8c60d487afddb", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3d6d64f9c1f99712ea9d9183b7f8c60d487afddb", "committedDate": "2020-03-06T12:51:13Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02697f9acc7556bf904f339c9f0fd870f454060", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e02697f9acc7556bf904f339c9f0fd870f454060", "committedDate": "2020-03-06T14:58:39Z", "message": "fix codequality checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "118d15406c70e78d10e5c79a56c0f52d3c592234", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/118d15406c70e78d10e5c79a56c0f52d3c592234", "committedDate": "2020-03-06T17:07:36Z", "message": "fix sonarcloud"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "876aa58e1dea101aa4f96d6f51d1545ba9e4f44a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/876aa58e1dea101aa4f96d6f51d1545ba9e4f44a", "committedDate": "2020-03-09T10:45:25Z", "message": "fix code quality and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d0b255aef46fc85f908ee0c302e00087c769a9", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/99d0b255aef46fc85f908ee0c302e00087c769a9", "committedDate": "2020-03-09T12:29:38Z", "message": "remove log statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "241ead3c11f783d0655a07ffc3acc0e83701ad36", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/241ead3c11f783d0655a07ffc3acc0e83701ad36", "committedDate": "2020-03-09T14:50:10Z", "message": "add drl exception logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db2de84854b57068bbbe47d46f8e69f688a3ada", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5db2de84854b57068bbbe47d46f8e69f688a3ada", "committedDate": "2020-03-10T09:14:48Z", "message": "refactoring codegen import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a12d4c2aca340faf7d48784c217f2cea1e13ec", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/36a12d4c2aca340faf7d48784c217f2cea1e13ec", "committedDate": "2020-03-10T10:32:19Z", "message": "add license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5157a7641a589048893cec26040068ac712f529", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b5157a7641a589048893cec26040068ac712f529", "committedDate": "2020-03-10T13:22:38Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7435377346d8875d5d5756b4e68e0efe62b9397f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7435377346d8875d5d5756b4e68e0efe62b9397f", "committedDate": "2020-03-10T13:27:39Z", "message": "refactoring and fix concurrenthashmap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eda7121bb91341db664b308fc24fa9357b94b9e7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/eda7121bb91341db664b308fc24fa9357b94b9e7", "committedDate": "2020-03-10T13:43:30Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44878d6f0252c596eb10fdbb50dd31f823fba9f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a44878d6f0252c596eb10fdbb50dd31f823fba9f", "committedDate": "2020-03-10T13:46:59Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e38b25ac72e3580eab451b6237e26bc9f2196f98", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e38b25ac72e3580eab451b6237e26bc9f2196f98", "committedDate": "2020-03-10T14:20:42Z", "message": "refactoring and fixs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a08d10530305872cb8f489d2960100d198ffa2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/70a08d10530305872cb8f489d2960100d198ffa2", "committedDate": "2020-03-11T08:33:40Z", "message": "restart jenkins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "committedDate": "2020-03-11T14:20:42Z", "message": "fix addon tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTMxODAw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-371131800", "createdAt": "2020-03-09T12:47:20Z", "commit": {"oid": "99d0b255aef46fc85f908ee0c302e00087c769a9"}, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODowODowNFrOF1C5ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoyMDoxMlrOF1DV1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NjMwOA==", "bodyText": "Please review this mechanism because we cannot assume decision name is unique in the whole project (it could contain multiple models)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391166308", "createdAt": "2020-03-11T18:08:04Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BigDecimalHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BooleanHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.StringHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.TypeHandler;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DMNResultMetricsBuilder.class);\n+\n+    private static final Map<Class, TypeHandler> handlers = generateHandlers();\n+\n+    private DMNResultMetricsBuilder() {\n+    }\n+\n+    private static Map<Class, TypeHandler> generateHandlers() {\n+        HashMap<Class, TypeHandler> handlers = new HashMap<>();\n+        handlers.put(String.class, new StringHandler(SupportedDecisionTypes.fromInternalToStandard(String.class)));\n+        handlers.put(Boolean.class, new BooleanHandler(SupportedDecisionTypes.fromInternalToStandard(Boolean.class)));\n+        handlers.put(BigDecimal.class, new BigDecimalHandler(SupportedDecisionTypes.fromInternalToStandard(BigDecimal.class)));\n+        return handlers;\n+    }\n+\n+    public static Map<Class, TypeHandler> getHandlers() {\n+        return handlers;\n+    }\n+\n+    public static void generateMetrics(DMNResult dmnResult) {\n+        if (dmnResult == null) {\n+            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n+            return;\n+        }\n+\n+        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults) {\n+            Object result = decision.getResult();\n+            if (SupportedDecisionTypes.isSupported(result.getClass())) {\n+                handlers.get(result.getClass()).record(decision.getDecisionName(), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Njg5Mw==", "bodyText": "Please remove both maps and define a field for each metric (and initialize it too)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391166893", "createdAt": "2020-03-11T18:09:08Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] HANDLER_LABEL = new String[]{\"handler\"};\n+\n+    private static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Map<CountersTypesEnum, Counter> counters = new HashMap<>();\n+\n+    private static final Map<SummaryTypes, Summary> summaries = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NzMzNg==", "bodyText": "Can you please add a comment to explain what is this?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391167336", "createdAt": "2020-03-11T18:10:02Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/dmnhandlers/DecisionConstants.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics.dmnhandlers;\n+\n+public class DecisionConstants {\n+\n+    public static final String DECISIONS_NAME_SUFFIX = \"_dmn_result\";\n+\n+    public static final String DECISIONS_HELP = \"Decision output.\";\n+\n+    public static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODU1Mg==", "bodyText": "I agree to keep a test that check this double mapping, just simplify the comment :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391168552", "createdAt": "2020-03-11T18:12:05Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/addons/monitoring/integration/DMNResultMetricsBuilderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.integration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.addons.monitoring.mocks.DMNDecisionResultMock;\n+import org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DMNResultMetricsBuilderTest {\n+\n+    CollectorRegistry registry;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = CollectorRegistry.defaultRegistry;\n+    }\n+\n+    @Test\n+    public void GivenADMNResult_WhenMetricsAreStored_ThenTheCollectorsAreProperlyWorking(){\n+        // Arrange\n+        DMNResult dmnResult = new DMNResult();\n+        List<DMNDecisionResultMock> decisions = new ArrayList<>();\n+        decisions.add(new DMNDecisionResultMock(\"AlphabetDecision\", \"A\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\", \"World\"));\n+\n+        dmnResult.setDecisionResults(decisions);\n+\n+        int expectedAlphabetDecisionA = 1;\n+        int expectedDictionaryDecisionHello = 2;\n+        int expectedDictionaryDecisionWorld = 1;\n+\n+        // Act\n+        DMNResultMetricsBuilder.generateMetrics(dmnResult);\n+\n+        // Assert\n+        assertEquals(expectedAlphabetDecisionA, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"AlphabetDecision\", \"A\"));\n+        assertEquals(expectedDictionaryDecisionHello, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"Hello\"));\n+        assertEquals(expectedDictionaryDecisionWorld, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"World\"));\n+\n+    }\n+\n+    // Given that atm the two modules are dependent and there is not a clear way to extend the code generation,\n+    // this test covers the fact that the two classes are aligned, i.e. if you add/remove a supported type, you\n+    // have to update the addon as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODc5NQ==", "bodyText": "You can replace it with findFirst() to avoid to iterate over the whole collection", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391168795", "createdAt": "2020-03-11T18:12:29Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTE3Ng==", "bodyText": "I think you should use asString instead of toString", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169176", "createdAt": "2020-03-11T18:13:05Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTU3Mw==", "bodyText": "Why isn't this import added in addMonitoringImports method as all the others? You can also get rid of all the imports just using the full canonical name of the classes when you use them", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169573", "createdAt": "2020-03-11T18:13:42Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMQ==", "bodyText": "Not needed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169701", "createdAt": "2020-03-11T18:13:55Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ==", "bodyText": "Can you please verify if this can happen? I expect getBody can be empty only if it is abstract or inside an interface", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170265", "createdAt": "2020-03-11T18:14:51Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA==", "bodyText": "I think it is better to add a placeholder to replace instead of rely on the current position of a statement", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170408", "createdAt": "2020-03-11T18:15:06Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        IfStmt ifStmt = body.findFirst(IfStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint. Template was modified.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA==", "bodyText": "You moved most of the methods so it is hard to understand the differences :)\nCan you quickly describe what you did here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170588", "createdAt": "2020-03-11T18:15:25Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDcwOA==", "bodyText": "Please move the string to a constant", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170708", "createdAt": "2020-03-11T18:15:37Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.model.v1_2.TDecision;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GrafanaConfigurationWriter.class);\n+\n+    private GrafanaConfigurationWriter() {\n+        // Intentionally left blank.\n+    }\n+\n+    public static String readStandardDashboard() {\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTAxMQ==", "bodyText": "Do we really need to decouple interface and implementation? Do we expect to have other impl? I think we could remove this abstraction for now", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391171011", "createdAt": "2020-03-11T18:16:04Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/IJGrafana.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import protostream.javassist.NotFoundException;\n+\n+public interface IJGrafana {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTkxMQ==", "bodyText": "I think you can move all Grafana API classes to a top level module named grafana-api because it is not related with codegen module in general", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391171911", "createdAt": "2020-03-11T18:17:28Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjAwMg==", "bodyText": "I think it could be nice to have a constructor with the id as parameter so I can provide mine", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172002", "createdAt": "2020-03-11T18:17:36Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.codegen.grafana.factories.GridPosFactory;\n+import org.kie.kogito.codegen.grafana.factories.PanelFactory;\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.ExprBuilder;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+\n+/**\n+ * Java configurator to create standard grafana dashboards\n+ */\n+public class JGrafana implements IJGrafana {\n+\n+    private GrafanaDashboard dashboard;\n+\n+    /**\n+     * Create a new JGrafana instance.\n+     *\n+     * @param title: The title of your dashboard.\n+     */\n+    public JGrafana(String title) {\n+        String uuid = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjIxMA==", "bodyText": "This could be moved to a dmn subpackage", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172210", "createdAt": "2020-03-11T18:17:55Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/SupportedDecisionTypes.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mjk1Mg==", "bodyText": "You can use SortedMap interface and TreeMap implementation and then just iterate over values", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172952", "createdAt": "2020-03-11T18:19:08Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/model/functions/ExprBuilder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.model.functions;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ExprBuilder {\n+\n+    private ExprBuilder() {\n+    }\n+\n+    public static String apply(String expr, Map<Integer, GrafanaFunction> functions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzA4NA==", "bodyText": "Please move to a dmn package", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173084", "createdAt": "2020-03-11T18:19:19Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/types/AbstractDmnType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.types;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ==", "bodyText": "Please can you explain what you have changed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173131", "createdAt": "2020-03-11T18:19:24Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzIwMg==", "bodyText": "Can you describe the changes here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173202", "createdAt": "2020-03-11T18:19:31Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -61,8 +68,9 @@\n     private final String endpointName;\n     private final String targetCanonicalName;\n     private final String generatedFilePath;\n+    private final boolean useMonitoring;\n \n-    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator ) {\n+    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator, boolean useMonitoring) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzU4OA==", "bodyText": "Please add systemMonitoring || or remove the property, now it is not used :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173588", "createdAt": "2020-03-11T18:20:12Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -172,11 +175,10 @@ private ApplicationGenerator createApplicationGenerator(\n         if (appPackageName.equals(ApplicationGenerator.DEFAULT_GROUP_ID)) {\n             appPackageName = ApplicationGenerator.DEFAULT_PACKAGE_NAME;\n         }\n+\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.addons.monitoring.rest.MetricsResource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71832892dcfc5fd33b5c8e50da2c68ce30e27c55", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/71832892dcfc5fd33b5c8e50da2c68ce30e27c55", "committedDate": "2020-03-12T00:48:01Z", "message": "resolve comments - refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce69f44a4c7851819203f6c772b524e567e65ac6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ce69f44a4c7851819203f6c772b524e567e65ac6", "committedDate": "2020-03-12T10:39:54Z", "message": "move grafana lib to another module, refactoring, solving comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb60001853d3e132b5441de8e114878f2dd5ff50", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bb60001853d3e132b5441de8e114878f2dd5ff50", "committedDate": "2020-03-12T13:01:04Z", "message": "improve template lookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba0b5c8012abf4f7be399908aea94dfcc2af637", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dba0b5c8012abf4f7be399908aea94dfcc2af637", "committedDate": "2020-03-12T15:18:08Z", "message": "fix typo in grafana template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4edd3bd9cedc459b71c3a8bf73bd67c92771b7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8a4edd3bd9cedc459b71c3a8bf73bd67c92771b7", "committedDate": "2020-03-13T08:40:25Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "740d27900b095a691c6c2f106da2a9b2fb7eea0c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/740d27900b095a691c6c2f106da2a9b2fb7eea0c", "committedDate": "2020-03-13T12:30:00Z", "message": "fix exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5159d47f123f42672ca5c5905ab0bb3c686b7d47", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5159d47f123f42672ca5c5905ab0bb3c686b7d47", "committedDate": "2020-03-13T13:24:26Z", "message": "fix grafana template for exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1779c5327a6f1117f49f1933c071711981d173e4", "committedDate": "2020-03-16T08:08:55Z", "message": "restart jenkins"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDYzOTkx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-375463991", "createdAt": "2020-03-16T18:03:36Z", "commit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMzozNlrOF2_7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMTo0NFrOF3AUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDgwMg==", "bodyText": "Can you add a README.md in this module?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393214802", "createdAt": "2020-03-16T18:03:36Z", "author": {"login": "danielezonca"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjY1Mg==", "bodyText": "Is this a general purpose dashboard template or it is specific to our addon? If it is specific I would prefer to have it in the addon module. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393216652", "createdAt": "2020-03-16T18:05:55Z", "author": {"login": "danielezonca"}, "path": "grafana-api/src/main/resources/grafana-dashboard-template/dashboard-template.json", "diffHunk": "@@ -0,0 +1,487 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzIyNA==", "bodyText": "Why do you need this dependency with test scope?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393217224", "createdAt": "2020-03-16T18:06:39Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -127,5 +131,10 @@\n       <artifactId>mockito-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+       <groupId>javax.annotation</groupId>\n+       <artifactId>javax.annotation-api</artifactId>\n+       <scope>test</scope>\n+     </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDgxMg==", "bodyText": "Please double check how path separator is managed in Kogito because if it will be concatenated with some OS specific values (i.e. File.separator) it might break", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393220812", "createdAt": "2020-03-16T18:11:04Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +99,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());\n+\n+        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(resourceGenerator.getNameURL(), decisions);\n+        generatedFiles.add(\n+                new org.kie.kogito.codegen.GeneratedFile(\n+                        org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                        \"/dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTIwMQ==", "bodyText": "Same comment about path separator", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393221201", "createdAt": "2020-03-16T18:11:44Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -297,6 +255,13 @@ public ApplicationSection section() {\n                 if (!queries.isEmpty()) {\n                     generatedFiles.add( new RuleUnitDTOSourceClass( ruleUnit.getRuleUnitDescription(), assignableChecker ).generateFile(org.kie.kogito.codegen.GeneratedFile.Type.RULE) );\n                     for (QueryEndpointGenerator query : queries) {\n+                        if (useMonitoring){\n+                            String dashboard = GrafanaConfigurationWriter.generateDashboardForEndpoint(query.getEndpointName());\n+                            generatedFiles.add(new org.kie.kogito.codegen.GeneratedFile(org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                                                                                        \"/dashboards/dashboard-endpoint-\" + query.getEndpointName() + \".json\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3d93f2505615b8c28816a73f774f38dc428c0dda", "committedDate": "2020-03-17T09:34:27Z", "message": "move template to codegen, add docs to grafana-api, resolve comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTU4MjA0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-375958204", "createdAt": "2020-03-17T11:43:35Z", "commit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTk0OTM0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-375994934", "createdAt": "2020-03-17T12:40:08Z", "commit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MDowOFrOF3aaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MToyOVrOF3adhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODgwMg==", "bodyText": "You should use org.kie.dmn.model.api.Decision that is version agnostic instead of TDecision that is 1.2 specific", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393648802", "createdAt": "2020-03-17T12:40:08Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +100,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0OTU0Mg==", "bodyText": "Are you sure about this change?\nThis is the kogito-codegen readme", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393649542", "createdAt": "2020-03-17T12:41:29Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/README.md", "diffHunk": "@@ -4,8 +4,7 @@ Kogito Codegen\n This repository contains the shared (Maven Plug-In, Quarkus Extension, ...)\n code generation logic for Kogito: processes, rules, decisions, etc.\n \n-- `ApplicationGenerator` is the main entry point. The fluent API allows to \n-configure its global behavior.\n+- `GrafanaConfigurationWriter` is the main entry point. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066ea880b0fcc4bb4f0f359e108aae6312ea5af3", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/066ea880b0fcc4bb4f0f359e108aae6312ea5af3", "committedDate": "2020-03-17T12:51:08Z", "message": "fix typo, use Decision instead of TDecision to find DMN Decisions during codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cbca84469e7423a3265f05eedd2ffefbb10b8ac", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9cbca84469e7423a3265f05eedd2ffefbb10b8ac", "committedDate": "2020-03-17T12:54:01Z", "message": "fix typo in readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e526191a82cca3a2be8dd9085cf72ad0d061b67", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8e526191a82cca3a2be8dd9085cf72ad0d061b67", "committedDate": "2020-03-17T14:40:31Z", "message": "set final properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c", "committedDate": "2020-03-17T16:16:30Z", "message": "improve logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4c513e93ba3fa92ca68cef7fed81e1a854dc12", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7e4c513e93ba3fa92ca68cef7fed81e1a854dc12", "committedDate": "2020-03-18T09:12:03Z", "message": "restart jenkins"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Njc3MjI2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-376677226", "createdAt": "2020-03-18T09:10:33Z", "commit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMDozM1rOF376zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToyNDo0NVrOF38bxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5NzcxMQ==", "bodyText": "why is this required?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394197711", "createdAt": "2020-03-18T09:10:33Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/pom.xml", "diffHunk": "@@ -34,11 +34,36 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>drools-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>grafana-api</artifactId>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.jboss.spec.javax.ws.rs</groupId>\n       <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n       <scope>provided</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-codegen</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5OTI0OQ==", "bodyText": "so here we are assuming that there will never be more than one instance of this per app. Might be worth documenting somewhere. I'd also consider using a @singleton or @ApplicationScope if possible (it's ok for now, just keep it in mind for later iterations)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394199249", "createdAt": "2020-03-18T09:13:05Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] ENDPOINT_LABEL = new String[]{\"endpoint\"};\n+\n+    private static final String[] ENDPOINT_INDENTIFIER_LABELS = new String[]{\"endpoint\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Counter REQUEST_STATUS_CODE_COUNTER =\n+            Counter.build().name(STATUS_CODE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDk3Ng==", "bodyText": "can you add some docs here? what's this for?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394200976", "createdAt": "2020-03-18T09:16:04Z", "author": {"login": "evacchi"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/model/functions/GrafanaFunction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.grafana.model.functions;\n+\n+public interface GrafanaFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMjMwOA==", "bodyText": "I am not sure how I feel about having a new root module just for this... Maybe we should add a new root module for kogito-codegen and put them together? or maybe put it under addons? wdyt", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394202308", "createdAt": "2020-03-18T09:18:23Z", "author": {"login": "evacchi"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMzk3Mg==", "bodyText": "I'd prefer keeping static factory methods at the top", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394203972", "createdAt": "2020-03-18T09:21:09Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjE1MA==", "bodyText": "this refactoring is even more confusing. The rationale should have been\n\nstatic properties at the top\nstatic factories following static properties\ninstance fields\nconstructors and instance methods\n\nnow, the rule might not have been followed 100%, and I do not necessarily disagree with this refactoring per-se, but if you want to do a refactoring you should at least open an ad-hoc PR, otherwise the PR becomes too massive and it's hard to understand the changes :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394206150", "createdAt": "2020-03-18T09:24:45Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991f5dd47317de20498b382aa4d20b7a945dd153", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/991f5dd47317de20498b382aa4d20b7a945dd153", "committedDate": "2020-03-18T10:13:52Z", "message": "remove dependency, backport original structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "262589ef60350ec6bb799b6a48e0ca357410dfc7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/262589ef60350ec6bb799b6a48e0ca357410dfc7", "committedDate": "2020-03-18T10:57:47Z", "message": "add javadoc for GrafanaFunction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ba736e8a59c30002e1246f42cff178199c7dc4d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ba736e8a59c30002e1246f42cff178199c7dc4d", "committedDate": "2020-03-18T12:50:27Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33fc8a127e6b48756085ddf74ed7e82f1007a3f3", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/33fc8a127e6b48756085ddf74ed7e82f1007a3f3", "committedDate": "2020-03-18T16:46:40Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60e35af1cd615f782259c097ee53b71bcc9dc4f2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/60e35af1cd615f782259c097ee53b71bcc9dc4f2", "committedDate": "2020-03-18T18:53:05Z", "message": "align with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03a78b7a5545a38bcfe2b568b66b8600661902f2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/03a78b7a5545a38bcfe2b568b66b8600661902f2", "committedDate": "2020-03-19T08:51:31Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "475c1a3f705dd31686682bca4d36229c81d75081", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/475c1a3f705dd31686682bca4d36229c81d75081", "committedDate": "2020-03-19T11:29:47Z", "message": "add monitoring addon to quarkus extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed278377ba3b4ea966692425a35780e6443afb7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ed278377ba3b4ea966692425a35780e6443afb7", "committedDate": "2020-03-19T12:49:26Z", "message": "fix path for generated resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ce25735f0a6ed1609b90c8e56da58441b6d32b6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3ce25735f0a6ed1609b90c8e56da58441b6d32b6", "committedDate": "2020-03-19T12:58:16Z", "message": "make properties final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Njk3NDEw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-377697410", "createdAt": "2020-03-19T13:04:23Z", "commit": {"oid": "3ce25735f0a6ed1609b90c8e56da58441b6d32b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyM1rOF4tbfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyM1rOF4tbfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODg5Mw==", "bodyText": "@danielezonca @evacchi This file has changed since your last review. I basically implemented the same logic of the maven plugin (GenerateModelMojo):\n\ninject useMonitoring variable in generators\nwrite resource files", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r395008893", "createdAt": "2020-03-19T13:04:23Z", "author": {"login": "r00ta"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -63,9 +63,13 @@\n import org.kie.kogito.codegen.process.ProcessCodegen;\n import org.kie.kogito.codegen.process.persistence.PersistenceGenerator;\n import org.kie.kogito.codegen.rules.IncrementalRuleCodegen;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class KogitoAssetsProcessor {\n \n+    private static final String generatedDashboardsDir = \"/target/resources/\";\n+    private static final Logger logger = LoggerFactory.getLogger(KogitoAssetsProcessor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce25735f0a6ed1609b90c8e56da58441b6d32b6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "865f0626a72cb2e34c0283b512d287bedae2fbb4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/865f0626a72cb2e34c0283b512d287bedae2fbb4", "committedDate": "2020-03-20T11:13:46Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4737ada0b85efd4ffa892ba657006baec1b3b753", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4737ada0b85efd4ffa892ba657006baec1b3b753", "committedDate": "2020-03-24T13:10:26Z", "message": "Merge branch 'master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30965a4216710feebd92cf19bba96e862cb8914f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/30965a4216710feebd92cf19bba96e862cb8914f", "committedDate": "2020-03-26T12:47:44Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9435713f2222606211c7ad51311c5efb3a95c8d4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9435713f2222606211c7ad51311c5efb3a95c8d4", "committedDate": "2020-03-26T19:08:47Z", "message": "fix logger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab15dc8e5e5c13c3cf2fe6986617c8265090115f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ab15dc8e5e5c13c3cf2fe6986617c8265090115f", "committedDate": "2020-03-26T19:27:20Z", "message": "remove dmn test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdc72a5f4c8aee2ea257f72b918671e3aab07fc2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cdc72a5f4c8aee2ea257f72b918671e3aab07fc2", "committedDate": "2020-03-30T14:50:15Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTM1ODI1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#pullrequestreview-383935825", "createdAt": "2020-03-30T14:51:57Z", "commit": {"oid": "ab15dc8e5e5c13c3cf2fe6986617c8265090115f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c6b09ccf28cbeba1a80e2e2cb4899c7dcf8b2c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a3c6b09ccf28cbeba1a80e2e2cb4899c7dcf8b2c", "committedDate": "2020-04-01T13:07:53Z", "message": "resolve conflicts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3740, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}