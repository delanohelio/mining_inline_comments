{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTc0NTMy", "number": 719, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjowNzoyOVrOEb6moQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjowODo1NlrOEeK-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzA3MTY5OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjowNzoyOVrOHGI29g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjowMjo0MFrOHINFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5ODY0Ng==", "bodyText": "My suggestion to simplify this without need for creating the TestWorkItem class\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    WorkItem[] tasks = given()\n          \n          \n            \n                        .when()\n          \n          \n            \n                        .get(\"/cinema/{pid}/tasks\", pid)\n          \n          \n            \n                        .then()\n          \n          \n            \n                        .statusCode(200)\n          \n          \n            \n                        .extract()\n          \n          \n            \n                        .body()\n          \n          \n            \n                        .as(TestWorkItem[].class);\n          \n          \n            \n                    assertEquals(1, tasks.length);\n          \n          \n            \n                    String taskId = given()\n          \n          \n            \n                            .when()\n          \n          \n            \n                            .get(\"/cinema/{pid}/tasks\", pid)\n          \n          \n            \n                            .then()\n          \n          \n            \n                            .statusCode(200)\n          \n          \n            \n                            .body(\"$.size\", is(1))\n          \n          \n            \n                            .body(\"[0].name\", is(\"ReviewRatingTask\"))\n          \n          \n            \n                            .extract()\n          \n          \n            \n                            .path(\"[0].id\");\n          \n          \n            \n            \n          \n          \n            \n                    Map<String, Object> reviewedRating = new HashMap<>();\n          \n          \n            \n                    reviewedRating.put(\"reviewedRating\", Rating.PG_13);\n          \n          \n            \n                    given()\n          \n          \n            \n                        .contentType(ContentType.JSON)\n          \n          \n            \n                        .when()\n          \n          \n            \n                        .body(reviewedRating)\n          \n          \n            \n                        .post(\"/cinema/{pid}/ReviewRatingTask/{taskId}\", pid, taskId)\n          \n          \n            \n                        .then()\n          \n          \n            \n                        .statusCode(200)\n          \n          \n            \n                        .body(\"movie.rating\", equalTo(Rating.PG_13.name()));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r476198646", "createdAt": "2020-08-25T06:07:29Z", "author": {"login": "cristianonicolai"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "diffHunk": "@@ -65,27 +66,27 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n-                .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n-                .then()\n-                    .statusCode(200)\n-                .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+        WorkItem[] tasks = given()\n+            .when()\n+            .get(\"/cinema/{pid}/tasks\", pid)\n+            .then()\n+            .statusCode(200)\n+            .extract()\n+            .body()\n+            .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115d29d80acef5f422ec4c220a196e7cc9f5ee8e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MTc5NA==", "bodyText": "I prefer to deserialize the whole workitem id to ensure they match.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r476281794", "createdAt": "2020-08-25T08:44:59Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "diffHunk": "@@ -65,27 +66,27 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n-                .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n-                .then()\n-                    .statusCode(200)\n-                .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+        WorkItem[] tasks = given()\n+            .when()\n+            .get(\"/cinema/{pid}/tasks\", pid)\n+            .then()\n+            .statusCode(200)\n+            .extract()\n+            .body()\n+            .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5ODY0Ng=="}, "originalCommit": {"oid": "115d29d80acef5f422ec4c220a196e7cc9f5ee8e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5Mjg4Mw==", "bodyText": "why not take advantage of RestAssured capabilities to check that the request actually matches using .body(\"[0].attribute\") for that? I find that easier to read and maintain, but that is just my point of view.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r476292883", "createdAt": "2020-08-25T09:01:28Z", "author": {"login": "cristianonicolai"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "diffHunk": "@@ -65,27 +66,27 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n-                .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n-                .then()\n-                    .statusCode(200)\n-                .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+        WorkItem[] tasks = given()\n+            .when()\n+            .get(\"/cinema/{pid}/tasks\", pid)\n+            .then()\n+            .statusCode(200)\n+            .extract()\n+            .body()\n+            .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5ODY0Ng=="}, "originalCommit": {"oid": "115d29d80acef5f422ec4c220a196e7cc9f5ee8e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTM4NA==", "bodyText": "Because I also wanted to check that the response do not contain any extra attribute that is not contemplated in WorkItem interface.\nIf workItem interface is changed, the test needs to be changed too, and using WorkItem this will be enforced by the compiler.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r476369384", "createdAt": "2020-08-25T11:17:05Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "diffHunk": "@@ -65,27 +66,27 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n-                .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n-                .then()\n-                    .statusCode(200)\n-                .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+        WorkItem[] tasks = given()\n+            .when()\n+            .get(\"/cinema/{pid}/tasks\", pid)\n+            .then()\n+            .statusCode(200)\n+            .extract()\n+            .body()\n+            .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5ODY0Ng=="}, "originalCommit": {"oid": "115d29d80acef5f422ec4c220a196e7cc9f5ee8e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk3NzA4NQ==", "bodyText": "yep, I see your point but I would be more concerned in checking that the attribute values returned are the expected ones, so if something changes as in value is not expected and attribute is removed, that would break the test. But adding a new attribute isn't much of concern I would say, we should be able to evolve the model without breaking existing code. That's why I think we have different ways to tackle this, but completely fine to have different opinions and approach right :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r476977085", "createdAt": "2020-08-26T02:06:03Z", "author": {"login": "cristianonicolai"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "diffHunk": "@@ -65,27 +66,27 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n-                .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n-                .then()\n-                    .statusCode(200)\n-                .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+        WorkItem[] tasks = given()\n+            .when()\n+            .get(\"/cinema/{pid}/tasks\", pid)\n+            .then()\n+            .statusCode(200)\n+            .extract()\n+            .body()\n+            .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5ODY0Ng=="}, "originalCommit": {"oid": "115d29d80acef5f422ec4c220a196e7cc9f5ee8e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NTAyMA==", "bodyText": "Ok, since we actually have two similar test, one for quarkus and one for springboot, lets took the salomonic approach, one will check only expected attributes (quarkus), the other (springboot) will check the whole item", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r478365020", "createdAt": "2020-08-27T12:02:40Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/EnumsTest.java", "diffHunk": "@@ -65,27 +66,27 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n-                .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n-                .then()\n-                    .statusCode(200)\n-                .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+        WorkItem[] tasks = given()\n+            .when()\n+            .get(\"/cinema/{pid}/tasks\", pid)\n+            .then()\n+            .statusCode(200)\n+            .extract()\n+            .body()\n+            .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5ODY0Ng=="}, "originalCommit": {"oid": "115d29d80acef5f422ec4c220a196e7cc9f5ee8e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDcxOTg2OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/BasicRestTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjowNjowMlrOHJrhMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo0Mzo0M1rOHN4fBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxMjI0Mw==", "bodyText": "As done in other changes as part of this PR, what about not copying the content in the array and assert the content directly doing:\n.body(\"$.size\", is(1))\n.body(\"[0].name\", is(\"Task\"));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r479912243", "createdAt": "2020-08-31T06:06:02Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/BasicRestTest.java", "diffHunk": "@@ -197,16 +198,16 @@ void testGetTasks() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n+        WorkItem[] tasks = given()\n                 .contentType(ContentType.JSON)\n             .when()\n                 .get(\"/AdHocFragments/{id}/tasks\", id)\n             .then()\n                 .statusCode(200)\n             .extract()\n                 .body()\n-                .as(Map.class);\n-        assertEquals(1, tasks.size());\n-        assertEquals(\"Task\", tasks.values().iterator().next());\n+                .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a39763737d82555601b0789e6c3b710b43a1c6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2OTE1NQ==", "bodyText": "As explained in previous discussion with Cristiano, I wanted a test that deserialize the whole work item.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r484269155", "createdAt": "2020-09-07T08:20:23Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/BasicRestTest.java", "diffHunk": "@@ -197,16 +198,16 @@ void testGetTasks() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n+        WorkItem[] tasks = given()\n                 .contentType(ContentType.JSON)\n             .when()\n                 .get(\"/AdHocFragments/{id}/tasks\", id)\n             .then()\n                 .statusCode(200)\n             .extract()\n                 .body()\n-                .as(Map.class);\n-        assertEquals(1, tasks.size());\n-        assertEquals(\"Task\", tasks.values().iterator().next());\n+                .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxMjI0Mw=="}, "originalCommit": {"oid": "f6a39763737d82555601b0789e6c3b710b43a1c6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDgxMg==", "bodyText": "Then, what about making the test purpose clearer? So nobody in the future can change it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r484274812", "createdAt": "2020-09-07T08:29:55Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/BasicRestTest.java", "diffHunk": "@@ -197,16 +198,16 @@ void testGetTasks() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n+        WorkItem[] tasks = given()\n                 .contentType(ContentType.JSON)\n             .when()\n                 .get(\"/AdHocFragments/{id}/tasks\", id)\n             .then()\n                 .statusCode(200)\n             .extract()\n                 .body()\n-                .as(Map.class);\n-        assertEquals(1, tasks.size());\n-        assertEquals(\"Task\", tasks.values().iterator().next());\n+                .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxMjI0Mw=="}, "originalCommit": {"oid": "f6a39763737d82555601b0789e6c3b710b43a1c6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxODk4MQ==", "bodyText": "I added a class implementation comment on TestWorkItem explaining the purpose of this class", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r484318981", "createdAt": "2020-09-07T09:43:43Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/BasicRestTest.java", "diffHunk": "@@ -197,16 +198,16 @@ void testGetTasks() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n+        WorkItem[] tasks = given()\n                 .contentType(ContentType.JSON)\n             .when()\n                 .get(\"/AdHocFragments/{id}/tasks\", id)\n             .then()\n                 .statusCode(200)\n             .extract()\n                 .body()\n-                .as(Map.class);\n-        assertEquals(1, tasks.size());\n-        assertEquals(\"Task\", tasks.values().iterator().next());\n+                .as(TestWorkItem[].class);\n+        assertEquals(1, tasks.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxMjI0Mw=="}, "originalCommit": {"oid": "f6a39763737d82555601b0789e6c3b710b43a1c6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDcyNjQ4OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/EnumsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjowODo1NlrOHJrksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyODowNFrOHN1uHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxMzEzOA==", "bodyText": "For sake of readability, maybe we could just use Collections.singletonMap(\"reviewedRating\", Rating.PG_13) instead of creating a separated HashMap.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r479913138", "createdAt": "2020-08-31T06:08:56Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/EnumsTest.java", "diffHunk": "@@ -63,27 +66,26 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n+        WorkItem task = given()\n                 .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n+                .get(\"/cinema/{pid}/tasks\", pid)\n                 .then()\n-                    .statusCode(200)\n+                .statusCode(200)\n+                .body(\"$.size\", is(1))\n                 .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+                .as(TestWorkItem[].class)[0];\n \n-        tasks.keySet().forEach(taskId -> {\n-            Map<String, Object> reviewedRating = new HashMap<>();\n-            reviewedRating.put(\"reviewedRating\", Rating.PG_13);\n-            given()\n-                    .contentType(ContentType.JSON)\n-                .when()\n-                    .body(reviewedRating)\n-                    .post(\"/cinema/{pid}/ReviewRatingTask/{taskId}\", pid, taskId)\n-                .then()\n-                    .statusCode(200)\n-                    .body(\"movie.rating\", equalTo(Rating.PG_13.name()));\n-        });\n-    }\n+        assertEquals(\"ReviewRatingTask\", task.getName());\n+\n+        Map<String, Object> reviewedRating = new HashMap<>();\n+        reviewedRating.put(\"reviewedRating\", Rating.PG_13);\n+        given()\n+            .contentType(ContentType.JSON)\n+            .when()\n+            .body(reviewedRating)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a39763737d82555601b0789e6c3b710b43a1c6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MzY5Mw==", "bodyText": "Ok, done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/719#discussion_r484273693", "createdAt": "2020-09-07T08:28:04Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/EnumsTest.java", "diffHunk": "@@ -63,27 +66,26 @@ void testSubmitMovie() {\n             .extract()\n                 .path(\"id\");\n \n-        Map<String, String> tasks = given()\n+        WorkItem task = given()\n                 .when()\n-                    .get(\"/cinema/{pid}/tasks\", pid)\n+                .get(\"/cinema/{pid}/tasks\", pid)\n                 .then()\n-                    .statusCode(200)\n+                .statusCode(200)\n+                .body(\"$.size\", is(1))\n                 .extract()\n-                    .body()\n-                    .as(Map.class);\n-        assertEquals(1, tasks.size());\n+                .as(TestWorkItem[].class)[0];\n \n-        tasks.keySet().forEach(taskId -> {\n-            Map<String, Object> reviewedRating = new HashMap<>();\n-            reviewedRating.put(\"reviewedRating\", Rating.PG_13);\n-            given()\n-                    .contentType(ContentType.JSON)\n-                .when()\n-                    .body(reviewedRating)\n-                    .post(\"/cinema/{pid}/ReviewRatingTask/{taskId}\", pid, taskId)\n-                .then()\n-                    .statusCode(200)\n-                    .body(\"movie.rating\", equalTo(Rating.PG_13.name()));\n-        });\n-    }\n+        assertEquals(\"ReviewRatingTask\", task.getName());\n+\n+        Map<String, Object> reviewedRating = new HashMap<>();\n+        reviewedRating.put(\"reviewedRating\", Rating.PG_13);\n+        given()\n+            .contentType(ContentType.JSON)\n+            .when()\n+            .body(reviewedRating)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkxMzEzOA=="}, "originalCommit": {"oid": "f6a39763737d82555601b0789e6c3b710b43a1c6"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4948, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}