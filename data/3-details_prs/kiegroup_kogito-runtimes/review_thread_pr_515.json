{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjE5MTY3", "number": 515, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1ODo0N1rOD9tCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo1Mzo0OVrOD9zyBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDI3NzAyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo1ODo0N1rOGXWsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMzo1NlrOGXXSmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjI2OA==", "bodyText": "not sure if this method is in use", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427142268", "createdAt": "2020-05-19T08:58:47Z", "author": {"login": "hellowdan"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "diffHunk": "@@ -33,7 +40,31 @@ public Object dmn(java.util.Map<String, Object> variables) {\n \n     private Object extractContextIfSucceded(DMNResult result){\n         if (!result.hasErrors()) {\n-            return result.getDmnContext();\n+            try {\n+                return objectMapper.writeValueAsString(result.getDmnContext());\n+            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            throw new DMNEvaluationErrorException(result);\n+        }\n+    }\n+    \n+    private static final com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper()\n+            .registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule())\n+            .registerModule(new com.fasterxml.jackson.databind.module.SimpleModule()\n+                            .addSerializer(org.kie.dmn.feel.lang.types.impl.ComparablePeriod.class,\n+                                           new org.kie.kogito.dmn.rest.DMNFEELComparablePeriodSerializer()))\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS);\n+\n+    private Object extractSingletonDSIfSucceded(DMNResult result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ffbb99d3e957669938461d71a4264b033fffc78"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjAyNQ==", "bodyText": "yes I confirm it is once codegenerated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427152025", "createdAt": "2020-05-19T09:13:56Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "diffHunk": "@@ -33,7 +40,31 @@ public Object dmn(java.util.Map<String, Object> variables) {\n \n     private Object extractContextIfSucceded(DMNResult result){\n         if (!result.hasErrors()) {\n-            return result.getDmnContext();\n+            try {\n+                return objectMapper.writeValueAsString(result.getDmnContext());\n+            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            throw new DMNEvaluationErrorException(result);\n+        }\n+    }\n+    \n+    private static final com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper()\n+            .registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule())\n+            .registerModule(new com.fasterxml.jackson.databind.module.SimpleModule()\n+                            .addSerializer(org.kie.dmn.feel.lang.types.impl.ComparablePeriod.class,\n+                                           new org.kie.kogito.dmn.rest.DMNFEELComparablePeriodSerializer()))\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS);\n+\n+    private Object extractSingletonDSIfSucceded(DMNResult result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjI2OA=="}, "originalCommit": {"oid": "4ffbb99d3e957669938461d71a4264b033fffc78"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTM3NDIxOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo1MjowNVrOGXhdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToyMjowM1rOGXlwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxODYzNQ==", "bodyText": "What about create a version.io.restassured.springboot property here instead? In this way it will be easily tracked", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427318635", "createdAt": "2020-05-19T13:52:05Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "diffHunk": "@@ -0,0 +1,77 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-springboot-it</artifactId>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${version.springboot}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- Manually ovverride to 3.3.0 because Spring boot uses rest-assured-common@3.3.0\n+         Otherwise error: The type io.restassured.common.mapper.TypeRef cannot be resolved. It is indirectly referenced from required .class files -->\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>\n+      <artifactId>rest-assured</artifactId>\n+      <version>3.3.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTEwOA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427389108", "createdAt": "2020-05-19T15:22:03Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "diffHunk": "@@ -0,0 +1,77 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-springboot-it</artifactId>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${version.springboot}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- Manually ovverride to 3.3.0 because Spring boot uses rest-assured-common@3.3.0\n+         Otherwise error: The type io.restassured.common.mapper.TypeRef cannot be resolved. It is indirectly referenced from required .class files -->\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>\n+      <artifactId>rest-assured</artifactId>\n+      <version>3.3.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxODYzNQ=="}, "originalCommit": {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTM4MDg2OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/DSCoercionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo1Mzo0NFrOGXhhkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToyMjowOVrOGXlw8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTY5OQ==", "bodyText": "I would prefer to Disabled it instead of comment it out. It will be easier to forget it. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427319699", "createdAt": "2020-05-19T13:53:44Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/DSCoercionTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class DSCoercionTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testWholeModel() {\n+        given()\n+               .contentType(ContentType.JSON)\n+           .when()\n+               .post(\"/DScoercion\")\n+           .then()\n+               .statusCode(200)\n+               .body(\"n\", is(47))\n+               .body(\"s\", is(\"Hello, World\"))\n+               .body(\"b\", is(true))\n+               .body(\"d\", is(\"2020-05-18\")) // as JSON is not schema aware, here we assert the RAW string\n+               .body(\"t\", is(\"12:34:56\"))\n+               .body(\"dt\", is(\"2020-05-18T12:34:56\"))\n+               // DROOLS-5344 .body(\"ymd\", is(\"P3Y\"))\n+               .body(\"dtd\", is(\"PT1H\"));\n+    }\n+\n+    @Test\n+    public void testDSn() {\n+        Number DSn = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSn\")\n+                            .getBody().as(Number.class);\n+        assertThat(DSn, is(47));\n+    }\n+\n+    @Test\n+    public void testDSs() {\n+        String DSs = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSs\")\n+                            .getBody().asString();\n+        assertThat(DSs, is(\"\\\"Hello, World\\\"\")); // we want to be sure the RAW response is a JSONValue string literal, ref http://ecma-international.org/ecma-262/5.1/#sec-15.12\n+    }\n+\n+    @Test\n+    public void testDSb() {\n+        Boolean DSb = given().contentType(ContentType.JSON)\n+                            .when()\n+                             .post(\"/DScoercion/DSb\")\n+                            .getBody().as(Boolean.class);\n+        assertThat(DSb, is(true));\n+    }\n+\n+    @Test\n+    public void testDSd() {\n+        LocalDate DSd = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSd\")\n+                               .getBody().as(LocalDate.class);\n+        assertThat(DSd, is(LocalDate.of(2020, 5, 18)));\n+    }\n+\n+    @Test\n+    public void testDSt() {\n+        LocalTime DSt = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSt\")\n+                               .getBody().as(LocalTime.class);\n+        assertThat(DSt, is(LocalTime.of(12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdt() {\n+        LocalDateTime DSdt = given().contentType(ContentType.JSON)\n+                                    .when()\n+                                    .post(\"/DScoercion/DSdt\")\n+                                    .getBody().as(LocalDateTime.class);\n+        assertThat(DSdt, is(LocalDateTime.of(2020, 5, 18, 12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdtd() {\n+        Duration DSdtd = given().contentType(ContentType.JSON)\n+                                .when()\n+                                .post(\"/DScoercion/DSdtd\")\n+                                .getBody().as(Duration.class);\n+        assertThat(DSdtd, is(Duration.parse(\"PT1H\")));\n+    }\n+\n+    // DROOLS-5344", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTE2OA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427389168", "createdAt": "2020-05-19T15:22:09Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/DSCoercionTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class DSCoercionTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testWholeModel() {\n+        given()\n+               .contentType(ContentType.JSON)\n+           .when()\n+               .post(\"/DScoercion\")\n+           .then()\n+               .statusCode(200)\n+               .body(\"n\", is(47))\n+               .body(\"s\", is(\"Hello, World\"))\n+               .body(\"b\", is(true))\n+               .body(\"d\", is(\"2020-05-18\")) // as JSON is not schema aware, here we assert the RAW string\n+               .body(\"t\", is(\"12:34:56\"))\n+               .body(\"dt\", is(\"2020-05-18T12:34:56\"))\n+               // DROOLS-5344 .body(\"ymd\", is(\"P3Y\"))\n+               .body(\"dtd\", is(\"PT1H\"));\n+    }\n+\n+    @Test\n+    public void testDSn() {\n+        Number DSn = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSn\")\n+                            .getBody().as(Number.class);\n+        assertThat(DSn, is(47));\n+    }\n+\n+    @Test\n+    public void testDSs() {\n+        String DSs = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSs\")\n+                            .getBody().asString();\n+        assertThat(DSs, is(\"\\\"Hello, World\\\"\")); // we want to be sure the RAW response is a JSONValue string literal, ref http://ecma-international.org/ecma-262/5.1/#sec-15.12\n+    }\n+\n+    @Test\n+    public void testDSb() {\n+        Boolean DSb = given().contentType(ContentType.JSON)\n+                            .when()\n+                             .post(\"/DScoercion/DSb\")\n+                            .getBody().as(Boolean.class);\n+        assertThat(DSb, is(true));\n+    }\n+\n+    @Test\n+    public void testDSd() {\n+        LocalDate DSd = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSd\")\n+                               .getBody().as(LocalDate.class);\n+        assertThat(DSd, is(LocalDate.of(2020, 5, 18)));\n+    }\n+\n+    @Test\n+    public void testDSt() {\n+        LocalTime DSt = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSt\")\n+                               .getBody().as(LocalTime.class);\n+        assertThat(DSt, is(LocalTime.of(12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdt() {\n+        LocalDateTime DSdt = given().contentType(ContentType.JSON)\n+                                    .when()\n+                                    .post(\"/DScoercion/DSdt\")\n+                                    .getBody().as(LocalDateTime.class);\n+        assertThat(DSdt, is(LocalDateTime.of(2020, 5, 18, 12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdtd() {\n+        Duration DSdtd = given().contentType(ContentType.JSON)\n+                                .when()\n+                                .post(\"/DScoercion/DSdtd\")\n+                                .getBody().as(Duration.class);\n+        assertThat(DSdtd, is(Duration.parse(\"PT1H\")));\n+    }\n+\n+    // DROOLS-5344", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTY5OQ=="}, "originalCommit": {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTM4MTE5OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/DSCoercionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo1Mzo0OVrOGXhh0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToyMjoxNVrOGXlxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTc2Mg==", "bodyText": "I would prefer to Disabled it instead of comment it out. It will be easier to forget it. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427319762", "createdAt": "2020-05-19T13:53:49Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/DSCoercionTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@QuarkusTest\n+public class DSCoercionTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testWholeModel() {\n+        given()\n+               .contentType(ContentType.JSON)\n+           .when()\n+               .post(\"/DScoercion\")\n+           .then()\n+               .statusCode(200)\n+               .body(\"n\", is(47))\n+               .body(\"s\", is(\"Hello, World\"))\n+               .body(\"b\", is(true))\n+               .body(\"d\", is(\"2020-05-18\")) // as JSON is not schema aware, here we assert the RAW string\n+               .body(\"t\", is(\"12:34:56\"))\n+               .body(\"dt\", is(\"2020-05-18T12:34:56\"))\n+               // DROOLS-5344 .body(\"ymd\", is(\"P3Y\"))\n+               .body(\"dtd\", is(\"PT1H\"));\n+    }\n+\n+    @Test\n+    public void testDSn() {\n+        Number DSn = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSn\")\n+                            .getBody().as(Number.class);\n+        assertThat(DSn, is(47));\n+    }\n+\n+    @Test\n+    public void testDSs() {\n+        String DSs = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSs\")\n+                            .getBody().asString();\n+        assertThat(DSs, is(\"\\\"Hello, World\\\"\")); // we want to be sure the RAW response is a JSONValue string literal, ref http://ecma-international.org/ecma-262/5.1/#sec-15.12\n+    }\n+\n+    @Test\n+    public void testDSb() {\n+        Boolean DSb = given().contentType(ContentType.JSON)\n+                            .when()\n+                             .post(\"/DScoercion/DSb\")\n+                            .getBody().as(Boolean.class);\n+        assertThat(DSb, is(true));\n+    }\n+\n+    @Test\n+    public void testDSd() {\n+        LocalDate DSd = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSd\")\n+                               .getBody().as(LocalDate.class);\n+        assertThat(DSd, is(LocalDate.of(2020, 5, 18)));\n+    }\n+\n+    @Test\n+    public void testDSt() {\n+        LocalTime DSt = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSt\")\n+                               .getBody().as(LocalTime.class);\n+        assertThat(DSt, is(LocalTime.of(12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdt() {\n+        LocalDateTime DSdt = given().contentType(ContentType.JSON)\n+                                    .when()\n+                                    .post(\"/DScoercion/DSdt\")\n+                                    .getBody().as(LocalDateTime.class);\n+        assertThat(DSdt, is(LocalDateTime.of(2020, 5, 18, 12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdtd() {\n+        Duration DSdtd = given().contentType(ContentType.JSON)\n+                                .when()\n+                                .post(\"/DScoercion/DSdtd\")\n+                                .getBody().as(Duration.class);\n+        assertThat(DSdtd, is(Duration.parse(\"PT1H\")));\n+    }\n+\n+    // DROOLS-5344", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTIzOQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427389239", "createdAt": "2020-05-19T15:22:15Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/DSCoercionTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@QuarkusTest\n+public class DSCoercionTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testWholeModel() {\n+        given()\n+               .contentType(ContentType.JSON)\n+           .when()\n+               .post(\"/DScoercion\")\n+           .then()\n+               .statusCode(200)\n+               .body(\"n\", is(47))\n+               .body(\"s\", is(\"Hello, World\"))\n+               .body(\"b\", is(true))\n+               .body(\"d\", is(\"2020-05-18\")) // as JSON is not schema aware, here we assert the RAW string\n+               .body(\"t\", is(\"12:34:56\"))\n+               .body(\"dt\", is(\"2020-05-18T12:34:56\"))\n+               // DROOLS-5344 .body(\"ymd\", is(\"P3Y\"))\n+               .body(\"dtd\", is(\"PT1H\"));\n+    }\n+\n+    @Test\n+    public void testDSn() {\n+        Number DSn = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSn\")\n+                            .getBody().as(Number.class);\n+        assertThat(DSn, is(47));\n+    }\n+\n+    @Test\n+    public void testDSs() {\n+        String DSs = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSs\")\n+                            .getBody().asString();\n+        assertThat(DSs, is(\"\\\"Hello, World\\\"\")); // we want to be sure the RAW response is a JSONValue string literal, ref http://ecma-international.org/ecma-262/5.1/#sec-15.12\n+    }\n+\n+    @Test\n+    public void testDSb() {\n+        Boolean DSb = given().contentType(ContentType.JSON)\n+                            .when()\n+                             .post(\"/DScoercion/DSb\")\n+                            .getBody().as(Boolean.class);\n+        assertThat(DSb, is(true));\n+    }\n+\n+    @Test\n+    public void testDSd() {\n+        LocalDate DSd = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSd\")\n+                               .getBody().as(LocalDate.class);\n+        assertThat(DSd, is(LocalDate.of(2020, 5, 18)));\n+    }\n+\n+    @Test\n+    public void testDSt() {\n+        LocalTime DSt = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSt\")\n+                               .getBody().as(LocalTime.class);\n+        assertThat(DSt, is(LocalTime.of(12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdt() {\n+        LocalDateTime DSdt = given().contentType(ContentType.JSON)\n+                                    .when()\n+                                    .post(\"/DScoercion/DSdt\")\n+                                    .getBody().as(LocalDateTime.class);\n+        assertThat(DSdt, is(LocalDateTime.of(2020, 5, 18, 12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdtd() {\n+        Duration DSdtd = given().contentType(ContentType.JSON)\n+                                .when()\n+                                .post(\"/DScoercion/DSdtd\")\n+                                .getBody().as(Duration.class);\n+        assertThat(DSdtd, is(Duration.parse(\"PT1H\")));\n+    }\n+\n+    // DROOLS-5344", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTc2Mg=="}, "originalCommit": {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 116, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}