{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTQ5NDI3", "number": 586, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjoxMzoyMFrOEIu6yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0OToxMFrOEKdgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTkyNzc3OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/MilestoneEventBody.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjoxMzoyMFrOGo337w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzozMzoyOVrOGpSngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTY2Mw==", "bodyText": "I see this pattern is used in other EventBody classes but why does the update method return a builder? It should update something, shouldn't it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445511663", "createdAt": "2020-06-25T12:13:20Z", "author": {"login": "ruromero"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/MilestoneEventBody.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+public class MilestoneEventBody {\n+\n+    private String id;\n+    private String name;\n+    private String status;\n+\n+    private MilestoneEventBody() {\n+    }\n+\n+    public static Builder create() {\n+        return new Builder(new MilestoneEventBody());\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MilestoneEventBody{\" +\n+                \"name='\" + name + '\\'' +\n+                \", status='\" + status + '\\'' +\n+                \", id='\" + id + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        MilestoneEventBody other = (MilestoneEventBody) obj;\n+        if (id == null) {\n+            if (other.id != null) {\n+                return false;\n+            }\n+        } else if (!id.equals(other.id)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public Builder update() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0OTgyNw==", "bodyText": "Is there so it allows updating the event as there are no setter methods.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445949827", "createdAt": "2020-06-26T03:33:29Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/MilestoneEventBody.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+public class MilestoneEventBody {\n+\n+    private String id;\n+    private String name;\n+    private String status;\n+\n+    private MilestoneEventBody() {\n+    }\n+\n+    public static Builder create() {\n+        return new Builder(new MilestoneEventBody());\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MilestoneEventBody{\" +\n+                \"name='\" + name + '\\'' +\n+                \", status='\" + status + '\\'' +\n+                \", id='\" + id + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        MilestoneEventBody other = (MilestoneEventBody) obj;\n+        if (id == null) {\n+            if (other.id != null) {\n+                return false;\n+            }\n+        } else if (!id.equals(other.id)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public Builder update() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTY2Mw=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTkyOTUzOnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBody.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjoxMzo1OFrOGo35GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjoxOTo0OVrOGpVAcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTk2MQ==", "bodyText": "Why does it need to be Linked? I don't think the insertion link is relevant", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445511961", "createdAt": "2020-06-25T12:13:58Z", "author": {"login": "ruromero"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBody.java", "diffHunk": "@@ -52,6 +52,8 @@\n     private ProcessErrorEventBody error;\n     \n     private List<String> roles;\n+\n+    private Set<MilestoneEventBody> milestones = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MDkxOQ==", "bodyText": "will replace with an empty set as this is overridden anyway.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445950919", "createdAt": "2020-06-26T03:39:16Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBody.java", "diffHunk": "@@ -52,6 +52,8 @@\n     private ProcessErrorEventBody error;\n     \n     private List<String> roles;\n+\n+    private Set<MilestoneEventBody> milestones = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTk2MQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MjA0NA==", "bodyText": "then why initialize it at all?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445982044", "createdAt": "2020-06-26T05:56:22Z", "author": {"login": "ruromero"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBody.java", "diffHunk": "@@ -52,6 +52,8 @@\n     private ProcessErrorEventBody error;\n     \n     private List<String> roles;\n+\n+    private Set<MilestoneEventBody> milestones = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTk2MQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODk3Ng==", "bodyText": "because is not overriden all the time :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445988976", "createdAt": "2020-06-26T06:19:49Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBody.java", "diffHunk": "@@ -52,6 +52,8 @@\n     private ProcessErrorEventBody error;\n     \n     private List<String> roles;\n+\n+    private Set<MilestoneEventBody> milestones = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTk2MQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTkzMjExOnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjoxNDo0NlrOGo36rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0MDoxNlrOGpSskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMjM2NA==", "bodyText": "can you format these lines a bit so they are easier to read?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445512364", "createdAt": "2020-06-25T12:14:46Z", "author": {"login": "ruromero"}, "path": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java", "diffHunk": "@@ -46,4 +53,20 @@ public void testServiceDefined() {\n         assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"travels\"))).isEqualTo(\"http://localhost:8080/travels\");\n         assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"demo.orders\"))).isEqualTo(\"http://localhost:8080/orders\");\n     }\n+\n+    @Test\n+    public void testMilestones() {\n+        ProcessInstanceEventBatch batch = new ProcessInstanceEventBatch(null, null);\n+\n+        WorkflowProcessInstance pi = mock(WorkflowProcessInstance.class);\n+\n+        when(pi.milestones()).thenReturn(null);\n+        assertThat(batch.createMilestones(pi)).isNull();\n+\n+        when(pi.milestones()).thenReturn(emptyList());\n+        assertThat(batch.createMilestones(pi)).isEmpty();\n+\n+        when(pi.milestones()).thenReturn(singleton(Milestone.builder().withId(\"id\").withName(\"name\").withStatus(Status.AVAILABLE).build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTEyMA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445951120", "createdAt": "2020-06-26T03:40:16Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java", "diffHunk": "@@ -46,4 +53,20 @@ public void testServiceDefined() {\n         assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"travels\"))).isEqualTo(\"http://localhost:8080/travels\");\n         assertThat(batch.extractRuntimeSource(singletonMap(PROCESS_ID_META_DATA, \"demo.orders\"))).isEqualTo(\"http://localhost:8080/orders\");\n     }\n+\n+    @Test\n+    public void testMilestones() {\n+        ProcessInstanceEventBatch batch = new ProcessInstanceEventBatch(null, null);\n+\n+        WorkflowProcessInstance pi = mock(WorkflowProcessInstance.class);\n+\n+        when(pi.milestones()).thenReturn(null);\n+        assertThat(batch.createMilestones(pi)).isNull();\n+\n+        when(pi.milestones()).thenReturn(emptyList());\n+        assertThat(batch.createMilestones(pi)).isEmpty();\n+\n+        when(pi.milestones()).thenReturn(singleton(Milestone.builder().withId(\"id\").withName(\"name\").withStatus(Status.AVAILABLE).build()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMjM2NA=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTk1OTAwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjoyMzowOFrOGo4LkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0MToyNVrOGpStZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxNjY4OQ==", "bodyText": "I prefer the expanded imports instead of the wildcard. Is that some IDE configuration?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445516689", "createdAt": "2020-06-25T12:23:08Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -28,53 +28,31 @@\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.jbpm.process.instance.InternalProcessRuntime;\n-import org.jbpm.ruleflow.core.Metadata;\n import org.jbpm.ruleflow.core.RuleFlowProcess;\n-import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n-import org.jbpm.workflow.core.node.BoundaryEventNode;\n-import org.jbpm.workflow.core.node.MilestoneNode;\n-import org.jbpm.workflow.core.node.StartNode;\n import org.jbpm.workflow.instance.NodeInstance;\n import org.jbpm.workflow.instance.NodeInstanceContainer;\n import org.jbpm.workflow.instance.WorkflowProcessInstance;\n import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n import org.jbpm.workflow.instance.node.WorkItemNodeInstance;\n import org.kie.api.definition.process.Node;\n-import org.kie.api.definition.process.NodeContainer;\n import org.kie.api.runtime.process.EventListener;\n import org.kie.api.runtime.process.ProcessRuntime;\n import org.kie.api.runtime.process.WorkItemNotFoundException;\n import org.kie.internal.process.CorrelationAwareProcessRuntime;\n import org.kie.internal.process.CorrelationKey;\n import org.kie.internal.process.CorrelationProperty;\n import org.kie.kogito.Model;\n-import org.kie.kogito.process.EventDescription;\n-import org.kie.kogito.process.MutableProcessInstances;\n-import org.kie.kogito.process.NodeInstanceNotFoundException;\n-import org.kie.kogito.process.NodeNotFoundException;\n import org.kie.kogito.process.Process;\n-import org.kie.kogito.process.ProcessError;\n-import org.kie.kogito.process.ProcessInstance;\n-import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n-import org.kie.kogito.process.ProcessInstanceNotFoundException;\n-import org.kie.kogito.process.Signal;\n-import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTMzNA==", "bodyText": "yeah, fixed my settings....", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445951334", "createdAt": "2020-06-26T03:41:25Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -28,53 +28,31 @@\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n \n import org.jbpm.process.instance.InternalProcessRuntime;\n-import org.jbpm.ruleflow.core.Metadata;\n import org.jbpm.ruleflow.core.RuleFlowProcess;\n-import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n-import org.jbpm.workflow.core.node.BoundaryEventNode;\n-import org.jbpm.workflow.core.node.MilestoneNode;\n-import org.jbpm.workflow.core.node.StartNode;\n import org.jbpm.workflow.instance.NodeInstance;\n import org.jbpm.workflow.instance.NodeInstanceContainer;\n import org.jbpm.workflow.instance.WorkflowProcessInstance;\n import org.jbpm.workflow.instance.impl.NodeInstanceImpl;\n import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n import org.jbpm.workflow.instance.node.WorkItemNodeInstance;\n import org.kie.api.definition.process.Node;\n-import org.kie.api.definition.process.NodeContainer;\n import org.kie.api.runtime.process.EventListener;\n import org.kie.api.runtime.process.ProcessRuntime;\n import org.kie.api.runtime.process.WorkItemNotFoundException;\n import org.kie.internal.process.CorrelationAwareProcessRuntime;\n import org.kie.internal.process.CorrelationKey;\n import org.kie.internal.process.CorrelationProperty;\n import org.kie.kogito.Model;\n-import org.kie.kogito.process.EventDescription;\n-import org.kie.kogito.process.MutableProcessInstances;\n-import org.kie.kogito.process.NodeInstanceNotFoundException;\n-import org.kie.kogito.process.NodeNotFoundException;\n import org.kie.kogito.process.Process;\n-import org.kie.kogito.process.ProcessError;\n-import org.kie.kogito.process.ProcessInstance;\n-import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n-import org.kie.kogito.process.ProcessInstanceNotFoundException;\n-import org.kie.kogito.process.Signal;\n-import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxNjY4OQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQyNDk1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNjoxNlrOGo8ytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0MzowOFrOGpSu0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjI0NQ==", "bodyText": "then why set the id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445592245", "createdAt": "2020-06-25T14:16:16Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -56,14 +56,14 @@ void testSimpleMilestone() throws Exception {\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());\n-        expected.add(new Milestone.Builder(\"\").withName(\"SimpleMilestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTY5Nw==", "bodyText": "removed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445951697", "createdAt": "2020-06-26T03:43:08Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -56,14 +56,14 @@ void testSimpleMilestone() throws Exception {\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());\n-        expected.add(new Milestone.Builder(\"\").withName(\"SimpleMilestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjI0NQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQyNjEyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNjozMFrOGo8zaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0Mzo1MlrOGpSvOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjQyNQ==", "bodyText": "no need to set the id there", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445592425", "createdAt": "2020-06-25T14:16:30Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -56,14 +56,14 @@ void testSimpleMilestone() throws Exception {\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());\n-        expected.add(new Milestone.Builder(\"\").withName(\"SimpleMilestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"SimpleMilestone\").withStatus(AVAILABLE).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTgwMA==", "bodyText": "removed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445951800", "createdAt": "2020-06-26T03:43:52Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -56,14 +56,14 @@ void testSimpleMilestone() throws Exception {\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());\n-        expected.add(new Milestone.Builder(\"\").withName(\"SimpleMilestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"AutoStartMilestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"SimpleMilestone\").withStatus(AVAILABLE).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjQyNQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQyNzc5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxNjo1MFrOGo80bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0Mzo1N1rOGpSvTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjY4Nw==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445592687", "createdAt": "2020-06-25T14:16:50Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -91,20 +91,20 @@ void testConditionalMilestone() throws Exception {\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"Milestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"Milestone\").withStatus(AVAILABLE).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTgyMw==", "bodyText": "removed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445951823", "createdAt": "2020-06-26T03:43:57Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -91,20 +91,20 @@ void testConditionalMilestone() throws Exception {\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"Milestone\").withStatus(AVAILABLE).build());\n+        expected.add(Milestone.builder().withId(\"\").withName(\"Milestone\").withStatus(AVAILABLE).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjY4Nw=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQzNDgwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/PublishEventTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoxODoyNlrOGo84_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDowMzoyMFrOGpS-3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5Mzg1NA==", "bodyText": "Try to avoid using the hardcoded node ids", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445593854", "createdAt": "2020-06-25T14:18:26Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/PublishEventTest.java", "diffHunk": "@@ -40,15 +38,59 @@\n import org.kie.kogito.services.event.ProcessInstanceDataEvent;\n import org.kie.kogito.services.event.UserTaskInstanceDataEvent;\n import org.kie.kogito.services.event.VariableInstanceDataEvent;\n+import org.kie.kogito.services.event.impl.MilestoneEventBody;\n import org.kie.kogito.services.event.impl.ProcessInstanceEventBody;\n import org.kie.kogito.services.event.impl.UserTaskInstanceEventBody;\n import org.kie.kogito.services.event.impl.VariableInstanceEventBody;\n import org.kie.kogito.services.identity.StaticIdentityProvider;\n import org.kie.kogito.uow.UnitOfWork;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.kie.kogito.process.flexible.ItemDescription.Status;\n \n public class PublishEventTest extends AbstractCodegenTest {\n \n+    @Test\n+    public void testProcessWithMilestoneEvents() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/milestones/SimpleMilestone.bpmn\");\n+\n+        assertThat(app).isNotNull();\n+        TestEventPublisher publisher = new TestEventPublisher();\n+        app.unitOfWorkManager().eventManager().setService(\"http://myhost\");\n+        app.unitOfWorkManager().eventManager().addPublisher(publisher);\n+\n+        UnitOfWork uow = app.unitOfWorkManager().newUnitOfWork();\n+        uow.start();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        ProcessInstance<?> processInstance = p.createInstance(p.createModel());\n+        processInstance.start();\n+\n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_COMPLETED);\n+\n+        uow.end();\n+\n+        List<DataEvent<?>> events = publisher.extract();\n+        assertThat(events).isNotNull().hasSize(1);\n+\n+        DataEvent<?> event = events.get(0);\n+        assertThat(event).isInstanceOf(ProcessInstanceDataEvent.class);\n+        ProcessInstanceDataEvent processDataEvent = (ProcessInstanceDataEvent) event;\n+        assertThat(processDataEvent.getKogitoProcessinstanceId()).isNotNull();\n+        assertThat(processDataEvent.getKogitoParentProcessinstanceId()).isNull();\n+        assertThat(processDataEvent.getKogitoRootProcessinstanceId()).isNull();\n+        assertThat(processDataEvent.getKogitoProcessId()).isEqualTo(\"TestCase.SimpleMilestone\");\n+        assertThat(processDataEvent.getKogitoProcessinstanceState()).isEqualTo(\"2\");\n+        assertThat(processDataEvent.getSource()).isEqualTo(\"http://myhost/SimpleMilestone\");\n+\n+        Set<MilestoneEventBody> milestones = ((ProcessInstanceDataEvent) event).getData().getMilestones();\n+        assertThat(milestones).hasSize(2).containsExactly(\n+                MilestoneEventBody.create().id(\"_18950AC4-664B-465E-B99E-766D38D362BF\").name(\"AutoStartMilestone\").status(Status.COMPLETED.name()).build(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NTgwNw==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445955807", "createdAt": "2020-06-26T04:03:20Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/PublishEventTest.java", "diffHunk": "@@ -40,15 +38,59 @@\n import org.kie.kogito.services.event.ProcessInstanceDataEvent;\n import org.kie.kogito.services.event.UserTaskInstanceDataEvent;\n import org.kie.kogito.services.event.VariableInstanceDataEvent;\n+import org.kie.kogito.services.event.impl.MilestoneEventBody;\n import org.kie.kogito.services.event.impl.ProcessInstanceEventBody;\n import org.kie.kogito.services.event.impl.UserTaskInstanceEventBody;\n import org.kie.kogito.services.event.impl.VariableInstanceEventBody;\n import org.kie.kogito.services.identity.StaticIdentityProvider;\n import org.kie.kogito.uow.UnitOfWork;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.kie.kogito.process.flexible.ItemDescription.Status;\n \n public class PublishEventTest extends AbstractCodegenTest {\n \n+    @Test\n+    public void testProcessWithMilestoneEvents() throws Exception {\n+        Application app = generateCodeProcessesOnly(\"cases/milestones/SimpleMilestone.bpmn\");\n+\n+        assertThat(app).isNotNull();\n+        TestEventPublisher publisher = new TestEventPublisher();\n+        app.unitOfWorkManager().eventManager().setService(\"http://myhost\");\n+        app.unitOfWorkManager().eventManager().addPublisher(publisher);\n+\n+        UnitOfWork uow = app.unitOfWorkManager().newUnitOfWork();\n+        uow.start();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        ProcessInstance<?> processInstance = p.createInstance(p.createModel());\n+        processInstance.start();\n+\n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_COMPLETED);\n+\n+        uow.end();\n+\n+        List<DataEvent<?>> events = publisher.extract();\n+        assertThat(events).isNotNull().hasSize(1);\n+\n+        DataEvent<?> event = events.get(0);\n+        assertThat(event).isInstanceOf(ProcessInstanceDataEvent.class);\n+        ProcessInstanceDataEvent processDataEvent = (ProcessInstanceDataEvent) event;\n+        assertThat(processDataEvent.getKogitoProcessinstanceId()).isNotNull();\n+        assertThat(processDataEvent.getKogitoParentProcessinstanceId()).isNull();\n+        assertThat(processDataEvent.getKogitoRootProcessinstanceId()).isNull();\n+        assertThat(processDataEvent.getKogitoProcessId()).isEqualTo(\"TestCase.SimpleMilestone\");\n+        assertThat(processDataEvent.getKogitoProcessinstanceState()).isEqualTo(\"2\");\n+        assertThat(processDataEvent.getSource()).isEqualTo(\"http://myhost/SimpleMilestone\");\n+\n+        Set<MilestoneEventBody> milestones = ((ProcessInstanceDataEvent) event).getData().getMilestones();\n+        assertThat(milestones).hasSize(2).containsExactly(\n+                MilestoneEventBody.create().id(\"_18950AC4-664B-465E-B99E-766D38D362BF\").name(\"AutoStartMilestone\").status(Status.COMPLETED.name()).build(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5Mzg1NA=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ0MTk5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyMDoxMFrOGo89lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjoxMTo1OVrOGpU3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTAyOQ==", "bodyText": "Why did you move it to the legacyProcessInstance? Shouldn't we avoid adding more functionality there?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445595029", "createdAt": "2020-06-25T14:20:10Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -391,63 +369,12 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n-                .map(n -> {\n-                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone.Builder(uid)\n-                            .withName(n.getName())\n-                            .withStatus(getStatus(uid))\n-                            .build();\n-                })\n-                .collect(Collectors.toList());\n+        return ((WorkflowProcessInstance) legacyProcessInstance).milestones();\n     }\n \n     @Override\n     public Collection<AdHocFragment> adHocFragments() {\n-        return getAdHocFragments(getProcessNodeContainer()).collect(Collectors.toList());\n-    }\n-\n-    private Stream<AdHocFragment> getAdHocFragments(NodeContainer container) {\n-        if(container == null || container.getNodes() == null) {\n-            return Stream.empty();\n-        }\n-        return Stream.of(container.getNodes())\n-                .filter(n -> !(n instanceof StartNode) && !(n instanceof BoundaryEventNode))\n-                .filter(n -> n.getIncomingConnections().isEmpty())\n-                .map(this::buildAdHocFragment);\n-    }\n-\n-    private AdHocFragment buildAdHocFragment(Node node) {\n-        return new AdHocFragment.Builder(node.getClass())\n-                .withName(node.getName())\n-                .withAutoStart(Boolean.parseBoolean((String) node.getMetaData().get(Metadata.CUSTOM_AUTO_START)))\n-                .build();\n-    }\n-\n-    private NodeContainer getProcessNodeContainer() {\n-        if (!(legacyProcessInstance instanceof RuleFlowProcessInstance)) {\n-            return null;\n-        }\n-        NodeInstanceContainer processInstance = ((NodeInstanceContainer) legacyProcessInstance);\n-        return processInstance.getNodeContainer();\n-    }\n-\n-    private <N extends Node> Stream<N> getNodes(NodeContainer container, Class<N> nodeClass) {\n-        if (container == null) {\n-            return Stream.empty();\n-        }\n-        return Stream.of(container.getNodes()).filter(nodeClass::isInstance).map(nodeClass::cast);\n-    }\n-\n-    private Status getStatus(String uid) {\n-        RuleFlowProcessInstance processInstance = ((RuleFlowProcessInstance) legacyProcessInstance);\n-        if (processInstance.getCompletedNodeIds().contains(uid)) {\n-            return COMPLETED;\n-        }\n-        if (processInstance.getActiveNodeIds().contains(uid)) {\n-            return ACTIVE;\n-        }\n-        return AVAILABLE;\n+        return ((WorkflowProcessInstance) legacyProcessInstance).adHocFragments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NjYyMg==", "bodyText": "WorkflowProcessInstance is still the core of the engine so it is completely fine to add things there. This api is just a wrapper to expose it to consumers to provide more modern api and to allow independent changes on the core classes.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445986622", "createdAt": "2020-06-26T06:11:59Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -391,63 +369,12 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n-                .map(n -> {\n-                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone.Builder(uid)\n-                            .withName(n.getName())\n-                            .withStatus(getStatus(uid))\n-                            .build();\n-                })\n-                .collect(Collectors.toList());\n+        return ((WorkflowProcessInstance) legacyProcessInstance).milestones();\n     }\n \n     @Override\n     public Collection<AdHocFragment> adHocFragments() {\n-        return getAdHocFragments(getProcessNodeContainer()).collect(Collectors.toList());\n-    }\n-\n-    private Stream<AdHocFragment> getAdHocFragments(NodeContainer container) {\n-        if(container == null || container.getNodes() == null) {\n-            return Stream.empty();\n-        }\n-        return Stream.of(container.getNodes())\n-                .filter(n -> !(n instanceof StartNode) && !(n instanceof BoundaryEventNode))\n-                .filter(n -> n.getIncomingConnections().isEmpty())\n-                .map(this::buildAdHocFragment);\n-    }\n-\n-    private AdHocFragment buildAdHocFragment(Node node) {\n-        return new AdHocFragment.Builder(node.getClass())\n-                .withName(node.getName())\n-                .withAutoStart(Boolean.parseBoolean((String) node.getMetaData().get(Metadata.CUSTOM_AUTO_START)))\n-                .build();\n-    }\n-\n-    private NodeContainer getProcessNodeContainer() {\n-        if (!(legacyProcessInstance instanceof RuleFlowProcessInstance)) {\n-            return null;\n-        }\n-        NodeInstanceContainer processInstance = ((NodeInstanceContainer) legacyProcessInstance);\n-        return processInstance.getNodeContainer();\n-    }\n-\n-    private <N extends Node> Stream<N> getNodes(NodeContainer container, Class<N> nodeClass) {\n-        if (container == null) {\n-            return Stream.empty();\n-        }\n-        return Stream.of(container.getNodes()).filter(nodeClass::isInstance).map(nodeClass::cast);\n-    }\n-\n-    private Status getStatus(String uid) {\n-        RuleFlowProcessInstance processInstance = ((RuleFlowProcessInstance) legacyProcessInstance);\n-        if (processInstance.getCompletedNodeIds().contains(uid)) {\n-            return COMPLETED;\n-        }\n-        if (processInstance.getActiveNodeIds().contains(uid)) {\n-            return ACTIVE;\n-        }\n-        return AVAILABLE;\n+        return ((WorkflowProcessInstance) legacyProcessInstance).adHocFragments();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTAyOQ=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ0Mzk0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyMDozM1rOGo8-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoyOTo1M1rOGpWnAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTMzMA==", "bodyText": "If the motivation of moving the methods to the legacyProcessInstance is because Events contains a ProcessInstance implementation (i.e. workflowProcessInstance) wouldn't it be more appropriate to have the events return a ProcessInstance meaning an AbstractProcessInstance? Based on the name of this attribute (legacyProcessInstance) I'd like to avoid adding more functionality.\nI haven't really looked into the implications of that, just asking your opinion.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445595330", "createdAt": "2020-06-25T14:20:33Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -391,63 +369,12 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n-                .map(n -> {\n-                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone.Builder(uid)\n-                            .withName(n.getName())\n-                            .withStatus(getStatus(uid))\n-                            .build();\n-                })\n-                .collect(Collectors.toList());\n+        return ((WorkflowProcessInstance) legacyProcessInstance).milestones();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1OTE1OA==", "bodyText": "Yeah, it's a good point, I had the same impression when reading the variable name legacy but it seems that in reality, we're just wrapping this with a new public API. So no using WorkflowProcessInstance for what is needed for this PR seemed just too big of a change to me. Fact is that the core is still heavily dependent on this internal implementation. For instance, all event listeners rely on that. Perhpas is something we need to consider moving forward, if we need a big change for that before we get into 1.0 or we will simply continue with the current approach.\n@mswiderski did you had any plans around that?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445959158", "createdAt": "2020-06-26T04:19:58Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -391,63 +369,12 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n-                .map(n -> {\n-                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone.Builder(uid)\n-                            .withName(n.getName())\n-                            .withStatus(getStatus(uid))\n-                            .build();\n-                })\n-                .collect(Collectors.toList());\n+        return ((WorkflowProcessInstance) legacyProcessInstance).milestones();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTMzMA=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NjI2Ng==", "bodyText": "I don't think it will be possible anytime soon to remove the WorkflowProcessInstance and everything around it. It was not even planned to do so... what was planned and is partially done to remove the need for ksession/kruntime for it.\nSo yeah, the name of the variable is really misleading as it is certainly not legacy. So might be worth renaming it here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445986266", "createdAt": "2020-06-26T06:10:46Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -391,63 +369,12 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n-                .map(n -> {\n-                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone.Builder(uid)\n-                            .withName(n.getName())\n-                            .withStatus(getStatus(uid))\n-                            .build();\n-                })\n-                .collect(Collectors.toList());\n+        return ((WorkflowProcessInstance) legacyProcessInstance).milestones();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTMzMA=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNTIzNA==", "bodyText": "renamed to processInstance :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r446015234", "createdAt": "2020-06-26T07:29:53Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -391,63 +369,12 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n \n     @Override\n     public Collection<Milestone> milestones() {\n-        return getNodes(getProcessNodeContainer(), MilestoneNode.class)\n-                .map(n -> {\n-                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n-                    return new Milestone.Builder(uid)\n-                            .withName(n.getName())\n-                            .withStatus(getStatus(uid))\n-                            .build();\n-                })\n-                .collect(Collectors.toList());\n+        return ((WorkflowProcessInstance) legacyProcessInstance).milestones();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTMzMA=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ0ODkwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyMTozNlrOGo9CEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDowNDoyOFrOGpS_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NjE3Ng==", "bodyText": "Can you update your IDE preferences?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445596176", "createdAt": "2020-06-25T14:21:36Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -16,21 +16,12 @@\n \n package org.jbpm.workflow.instance.impl;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.UUID;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NTk5NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445955994", "createdAt": "2020-06-26T04:04:28Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -16,21 +16,12 @@\n \n package org.jbpm.workflow.instance.impl;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.UUID;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NjE3Ng=="}, "originalCommit": {"oid": "660eb3295323515f6540df4ee4ef6f1969cd3207"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODg3MTE4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjowNjo0NlrOGpUxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoyNzoxOFrOGpWivQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NTEwNw==", "bodyText": "are you interested in only the first level (directly under process) or you would like to collect all milestones including those in subprocesses? If the later then you should use getNodesRecursively", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445985107", "createdAt": "2020-06-26T06:06:46Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -1089,6 +1099,46 @@ public void internalSetErrorMessage(String errorMessage) {\n         this.errorMessage = errorMessage;\n     }\n \n+    @Override\n+    public Collection<AdHocFragment> adHocFragments() {\n+        return Stream.of(getNodeContainer().getNodes())\n+                .filter(n -> !(n instanceof StartNode) && !(n instanceof BoundaryEventNode))\n+                .filter(n -> n.getIncomingConnections().isEmpty())\n+                .map(node -> new AdHocFragment.Builder(node.getClass())\n+                        .withName(node.getName())\n+                        .withAutoStart(Boolean.parseBoolean((String) node.getMetaData().get(Metadata.CUSTOM_AUTO_START)))\n+                        .build())\n+                .collect(Collectors.toSet());\n+    }\n+    \n+    @Override\n+    public Collection<Milestone> milestones() {\n+        return getNodesByType(MilestoneNode.class)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return Milestone.builder()\n+                            .withId(uid)\n+                            .withName(n.getName())\n+                            .withStatus(getMilestoneStatus(uid))\n+                            .build();\n+                })\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private <N extends Node> Stream<N> getNodesByType(Class<N> nodeClass) {\n+        return Stream.of(getNodeContainer().getNodes()).filter(nodeClass::isInstance).map(nodeClass::cast);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ae7165d452b0e0b9d2acd078db21655fc72ef9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MTQ0NA==", "bodyText": "hm, ok makes sense to me to get all", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r445991444", "createdAt": "2020-06-26T06:27:37Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -1089,6 +1099,46 @@ public void internalSetErrorMessage(String errorMessage) {\n         this.errorMessage = errorMessage;\n     }\n \n+    @Override\n+    public Collection<AdHocFragment> adHocFragments() {\n+        return Stream.of(getNodeContainer().getNodes())\n+                .filter(n -> !(n instanceof StartNode) && !(n instanceof BoundaryEventNode))\n+                .filter(n -> n.getIncomingConnections().isEmpty())\n+                .map(node -> new AdHocFragment.Builder(node.getClass())\n+                        .withName(node.getName())\n+                        .withAutoStart(Boolean.parseBoolean((String) node.getMetaData().get(Metadata.CUSTOM_AUTO_START)))\n+                        .build())\n+                .collect(Collectors.toSet());\n+    }\n+    \n+    @Override\n+    public Collection<Milestone> milestones() {\n+        return getNodesByType(MilestoneNode.class)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return Milestone.builder()\n+                            .withId(uid)\n+                            .withName(n.getName())\n+                            .withStatus(getMilestoneStatus(uid))\n+                            .build();\n+                })\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private <N extends Node> Stream<N> getNodesByType(Class<N> nodeClass) {\n+        return Stream.of(getNodeContainer().getNodes()).filter(nodeClass::isInstance).map(nodeClass::cast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NTEwNw=="}, "originalCommit": {"oid": "48ae7165d452b0e0b9d2acd078db21655fc72ef9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxNDE0MQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r446014141", "createdAt": "2020-06-26T07:27:18Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -1089,6 +1099,46 @@ public void internalSetErrorMessage(String errorMessage) {\n         this.errorMessage = errorMessage;\n     }\n \n+    @Override\n+    public Collection<AdHocFragment> adHocFragments() {\n+        return Stream.of(getNodeContainer().getNodes())\n+                .filter(n -> !(n instanceof StartNode) && !(n instanceof BoundaryEventNode))\n+                .filter(n -> n.getIncomingConnections().isEmpty())\n+                .map(node -> new AdHocFragment.Builder(node.getClass())\n+                        .withName(node.getName())\n+                        .withAutoStart(Boolean.parseBoolean((String) node.getMetaData().get(Metadata.CUSTOM_AUTO_START)))\n+                        .build())\n+                .collect(Collectors.toSet());\n+    }\n+    \n+    @Override\n+    public Collection<Milestone> milestones() {\n+        return getNodesByType(MilestoneNode.class)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return Milestone.builder()\n+                            .withId(uid)\n+                            .withName(n.getName())\n+                            .withStatus(getMilestoneStatus(uid))\n+                            .build();\n+                })\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private <N extends Node> Stream<N> getNodesByType(Class<N> nodeClass) {\n+        return Stream.of(getNodeContainer().getNodes()).filter(nodeClass::isInstance).map(nodeClass::cast);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NTEwNw=="}, "originalCommit": {"oid": "48ae7165d452b0e0b9d2acd078db21655fc72ef9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDA0NTY1OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/MilestoneEventBody.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0OToxMFrOGrg1Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNTo0MFrOGropkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3OTg2Mg==", "bodyText": "Entire IF statement can be simplified as:\nObjects.equals(id, other.id);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r448279862", "createdAt": "2020-07-01T10:49:10Z", "author": {"login": "hasys"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/MilestoneEventBody.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+public class MilestoneEventBody {\n+\n+    private String id;\n+    private String name;\n+    private String status;\n+\n+    private MilestoneEventBody() {\n+    }\n+\n+    public static Builder create() {\n+        return new Builder(new MilestoneEventBody());\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MilestoneEventBody{\" +\n+                \"name='\" + name + '\\'' +\n+                \", status='\" + status + '\\'' +\n+                \", id='\" + id + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        MilestoneEventBody other = (MilestoneEventBody) obj;\n+        if (id == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07cea1b49a9ab529b7af40892fec0c7e5ea719df"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNzk1Mg==", "bodyText": "@hasys thanks, change applied", "url": "https://github.com/kiegroup/kogito-runtimes/pull/586#discussion_r448407952", "createdAt": "2020-07-01T14:35:40Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/MilestoneEventBody.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+public class MilestoneEventBody {\n+\n+    private String id;\n+    private String name;\n+    private String status;\n+\n+    private MilestoneEventBody() {\n+    }\n+\n+    public static Builder create() {\n+        return new Builder(new MilestoneEventBody());\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"MilestoneEventBody{\" +\n+                \"name='\" + name + '\\'' +\n+                \", status='\" + status + '\\'' +\n+                \", id='\" + id + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        MilestoneEventBody other = (MilestoneEventBody) obj;\n+        if (id == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3OTg2Mg=="}, "originalCommit": {"oid": "07cea1b49a9ab529b7af40892fec0c7e5ea719df"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4991, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}