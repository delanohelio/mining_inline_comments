{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTMwMjE0", "number": 620, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTo1NjozMlrOENyRig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTo1OTo0MlrOENyVmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODkwNjM0OnYy", "diffSide": "RIGHT", "path": "addons/process-management/process-management-common/src/main/java/org/kie/kogito/process/management/BaseProcessInstanceManagementResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTo1NjozMlrOGwlXGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MzoxOFrOGx6o6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5Njk1NQ==", "bodyText": "what about creating a class to encapsulate the attributes instead of creating a Map.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/620#discussion_r453596955", "createdAt": "2020-07-13T11:56:32Z", "author": {"login": "tiagodolphine"}, "path": "addons/process-management/process-management-common/src/main/java/org/kie/kogito/process/management/BaseProcessInstanceManagementResource.java", "diffHunk": "@@ -48,6 +53,21 @@ public BaseProcessInstanceManagementResource(Processes processes, Application ap\n         this.application = application;\n     }\n \n+    public T doGetProcessNodes(String processId) {\n+        return executeOnProcess(processId, process -> {\n+            List<Node> nodes = ((WorkflowProcess) ((AbstractProcess<?>) process).process()).getNodesRecursively();\n+            List<Map<String, Object>> list = nodes.stream().map(n -> {\n+                Map<String, Object> data = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b4227e6079b59a3d5f731723a7d47aa1072dbb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDE1Mw==", "bodyText": "@tiagodolphine perhaps a bit overkill just for this transformation? if we have a need for more use of nodes or any consistency issues we can then review this.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/620#discussion_r454994153", "createdAt": "2020-07-15T11:53:18Z", "author": {"login": "cristianonicolai"}, "path": "addons/process-management/process-management-common/src/main/java/org/kie/kogito/process/management/BaseProcessInstanceManagementResource.java", "diffHunk": "@@ -48,6 +53,21 @@ public BaseProcessInstanceManagementResource(Processes processes, Application ap\n         this.application = application;\n     }\n \n+    public T doGetProcessNodes(String processId) {\n+        return executeOnProcess(processId, process -> {\n+            List<Node> nodes = ((WorkflowProcess) ((AbstractProcess<?>) process).process()).getNodesRecursively();\n+            List<Map<String, Object>> list = nodes.stream().map(n -> {\n+                Map<String, Object> data = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5Njk1NQ=="}, "originalCommit": {"oid": "34b4227e6079b59a3d5f731723a7d47aa1072dbb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODkxNjczOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/ManagementAddOnTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTo1OTo0MlrOGwldgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MjoxOVrOGx6m6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5ODU5NQ==", "bodyText": "maybe the @DirtiesContext could be removed, this will avoid recreating all the spring context per method, there was some discussion about this on kogito-examples.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/620#discussion_r453598595", "createdAt": "2020-07-13T11:59:42Z", "author": {"login": "tiagodolphine"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/ManagementAddOnTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34b4227e6079b59a3d5f731723a7d47aa1072dbb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MzY0Mg==", "bodyText": "@tiagodolphine removed from all tests", "url": "https://github.com/kiegroup/kogito-runtimes/pull/620#discussion_r454993642", "createdAt": "2020-07-15T11:52:19Z", "author": {"login": "cristianonicolai"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/ManagementAddOnTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5ODU5NQ=="}, "originalCommit": {"oid": "34b4227e6079b59a3d5f731723a7d47aa1072dbb"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 24, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}