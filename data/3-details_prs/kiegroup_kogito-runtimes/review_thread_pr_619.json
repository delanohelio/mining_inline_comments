{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NjQ4MDcw", "number": 619, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjo1MDozNVrOEMw5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjo1NDo1MFrOEMw-aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODE5NDI1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjo1MDozNlrOGvD5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1NTo0MlrOGvr82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMDAwNw==", "bodyText": "I prefer tiger \ud83e\udd23", "url": "https://github.com/kiegroup/kogito-runtimes/pull/619#discussion_r452000007", "createdAt": "2020-07-09T06:50:36Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessInstance.java", "diffHunk": "@@ -44,14 +44,14 @@\n     void setState(int state, String outcome, Object faultData);\n \n     void setErrorState(NodeInstance nodeInstanceInError, Exception e);\n-\n+    \n     void setKnowledgeRuntime(InternalKnowledgeRuntime kruntime);\n \n     InternalKnowledgeRuntime getKnowledgeRuntime();\n \n     void start();\n \n-    void start(String tigger);\n+    void start(String trigger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b575d01dbe0f9fd61fb08dd534751fdb8b885ea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NjM0NA==", "bodyText": "same here tigger (double g to make it stronger) makes a lot of sense :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/619#discussion_r452656344", "createdAt": "2020-07-10T06:55:42Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessInstance.java", "diffHunk": "@@ -44,14 +44,14 @@\n     void setState(int state, String outcome, Object faultData);\n \n     void setErrorState(NodeInstance nodeInstanceInError, Exception e);\n-\n+    \n     void setKnowledgeRuntime(InternalKnowledgeRuntime kruntime);\n \n     InternalKnowledgeRuntime getKnowledgeRuntime();\n \n     void start();\n \n-    void start(String tigger);\n+    void start(String trigger);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMDAwNw=="}, "originalCommit": {"oid": "1b575d01dbe0f9fd61fb08dd534751fdb8b885ea"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODIwMTA4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/NodeInstanceContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjo1Mjo0MlrOGvD89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozNzoyOFrOGvZHzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMTAxMg==", "bodyText": "why not just getByDefinitionId as it is the NodeInstanceContainer it can be assumed that the get will return a NodeInstance\nThe same could apply to the method above and call it just get", "url": "https://github.com/kiegroup/kogito-runtimes/pull/619#discussion_r452001012", "createdAt": "2020-07-09T06:52:42Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/NodeInstanceContainer.java", "diffHunk": "@@ -35,21 +37,39 @@\n     void addNodeInstance(NodeInstance nodeInstance);\n \n     void removeNodeInstance(NodeInstance nodeInstance);\n-    \n+\n     NodeContainer getNodeContainer();\n-    \n+\n     void nodeInstanceCompleted(NodeInstance nodeInstance, String outType);\n-    \n+\n     int getState();\n-    \n+\n     void setState(int state);\n-    \n+\n     int getLevelForNode(String uniqueID);\n-    \n-    void setCurrentLevel(int level);\n-    \n+\n     int getCurrentLevel();\n-    \n+\n+    void setCurrentLevel(int level);\n+\n     NodeInstance getNodeInstance(String nodeInstanceId, boolean recursive);\n \n+    default NodeInstance getNodeInstanceByNodeDefinitionId(final String nodeDefinitionId, NodeContainer nodeContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b575d01dbe0f9fd61fb08dd534751fdb8b885ea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0Nzg1NA==", "bodyText": "@ruromero renamed the new method to getByDefinitionId as suggested, but keeping old methods as is to avoid more unrelated changes.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/619#discussion_r452347854", "createdAt": "2020-07-09T16:37:28Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/NodeInstanceContainer.java", "diffHunk": "@@ -35,21 +37,39 @@\n     void addNodeInstance(NodeInstance nodeInstance);\n \n     void removeNodeInstance(NodeInstance nodeInstance);\n-    \n+\n     NodeContainer getNodeContainer();\n-    \n+\n     void nodeInstanceCompleted(NodeInstance nodeInstance, String outType);\n-    \n+\n     int getState();\n-    \n+\n     void setState(int state);\n-    \n+\n     int getLevelForNode(String uniqueID);\n-    \n-    void setCurrentLevel(int level);\n-    \n+\n     int getCurrentLevel();\n-    \n+\n+    void setCurrentLevel(int level);\n+\n     NodeInstance getNodeInstance(String nodeInstanceId, boolean recursive);\n \n+    default NodeInstance getNodeInstanceByNodeDefinitionId(final String nodeDefinitionId, NodeContainer nodeContainer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMTAxMg=="}, "originalCommit": {"oid": "1b575d01dbe0f9fd61fb08dd534751fdb8b885ea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODIwNzc2OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjo1NDo1MFrOGvEA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozNzo1NFrOGvZI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMjAyOQ==", "bodyText": "Why is this needed? Can you add a unit test to support it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/619#discussion_r452002029", "createdAt": "2020-07-09T06:54:50Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -380,6 +359,10 @@ public void setState(final int state, String outcome, Object faultData) {\n     @Override\n     public void setState(final int state, String outcome) {\n         // TODO move most of this to ProcessInstanceImpl\n+        if (state != ProcessInstance.STATE_ERROR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b575d01dbe0f9fd61fb08dd534751fdb8b885ea"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0ODEyOA==", "bodyText": "rollback change to not cause any behaviour change.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/619#discussion_r452348128", "createdAt": "2020-07-09T16:37:54Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -380,6 +359,10 @@ public void setState(final int state, String outcome, Object faultData) {\n     @Override\n     public void setState(final int state, String outcome) {\n         // TODO move most of this to ProcessInstanceImpl\n+        if (state != ProcessInstance.STATE_ERROR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAwMjAyOQ=="}, "originalCommit": {"oid": "1b575d01dbe0f9fd61fb08dd534751fdb8b885ea"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 22, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}