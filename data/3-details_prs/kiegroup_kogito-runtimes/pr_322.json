{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjQxMTQ0", "number": 322, "title": "KOGITO-1217 - Event Based Subprocess Support - signal start event", "bodyText": "@ge0ffrey @Christopher-Chianelli here is the support for signal event subprocess, please give it a go", "createdAt": "2020-02-19T15:58:55Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322", "merged": true, "mergeCommit": {"oid": "71d0e19df4fd1c24bfa33bcd6f4eec6446bf549a"}, "closed": true, "closedAt": "2020-02-26T16:12:43Z", "author": {"login": "mswiderski"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGKA47gBqjMwNTU3MTgxMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIFjtEAFqTM2NDg0NDYzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "400c27121b076e9cf16672001a73ecd02202c9c6", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/400c27121b076e9cf16672001a73ecd02202c9c6", "committedDate": "2020-02-19T15:58:04Z", "message": "KOGITO-1217 - Event Based Subprocess Support - signal start event"}, "afterCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b605e08a53abab03eca9b6d4d1783037d22aa677", "committedDate": "2020-02-20T12:09:21Z", "message": "KOGITO-1217 - Event Based Subprocess Support - signal start event"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzE1MzIx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#pullrequestreview-362715321", "createdAt": "2020-02-21T15:35:28Z", "commit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzg4NjY5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#pullrequestreview-362788669", "createdAt": "2020-02-21T17:19:30Z", "commit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzoxOTozMVrOFs-gGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzo0NjowM1rOFs_QAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNTY5MQ==", "bodyText": "Probably these constants could be unified with the ones used on StartEventHandler, wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#discussion_r382705691", "createdAt": "2020-02-21T17:19:31Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -17,17 +17,25 @@\n package org.jbpm.compiler.canonical;\n \n import java.util.Map;\n+import java.util.Map.Entry;\n \n+import org.jbpm.process.core.context.variable.Variable;\n import org.jbpm.process.core.context.variable.VariableScope;\n import org.jbpm.ruleflow.core.factory.StartNodeFactory;\n import org.jbpm.workflow.core.node.StartNode;\n import org.kie.api.definition.process.Node;\n \n+import com.github.javaparser.ast.expr.BooleanLiteralExpr;\n import com.github.javaparser.ast.expr.LongLiteralExpr;\n import com.github.javaparser.ast.expr.StringLiteralExpr;\n import com.github.javaparser.ast.stmt.BlockStmt;\n \n public class StartNodeVisitor extends AbstractVisitor {\n+    \n+    private static final String TRIGGER_REF = \"TriggerRef\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxNTE0NA==", "bodyText": "this block is being repeated, maybe it is better to unify on a method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#discussion_r382715144", "createdAt": "2020-02-21T17:40:08Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -315,13 +315,15 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n \n                 for (TriggerMetaData trigger : metaData.getTriggers()) {\n \n-                    MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                                            trigger)\n-                                                                  .withDependencyInjection(annotator);\n-                    mdegs.add(msgDataEventGenerator);\n+                    \n                     // generate message consumers for processes with message start events\n                     if (trigger.getType().equals(TriggerMetaData.TriggerType.ConsumeMessage)) {\n \n+                        MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxNjM4MA==", "bodyText": "if filters can be null, maybe it is worth to check.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#discussion_r382716380", "createdAt": "2020-02-21T17:42:42Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/RuleFlowProcessFactory.java", "diffHunk": "@@ -286,5 +292,43 @@ protected Node findNodeByIdOrUniqueIdInMetadata(NodeContainer nodeContainer, fin\n         }\n         return node;\n     }\n+    \n+    private void postProcessNodes(RuleFlowProcess process, NodeContainer container) {\n+        \n+        for (Node node: container.getNodes()) {\n+            if (node instanceof NodeContainer) {\n+                // prepare event sub process\n+                if (node instanceof EventSubProcessNode) {\n+                    EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) node;\n+\n+                    Node[] nodes = eventSubProcessNode.getNodes();\n+                    for (Node subNode : nodes) {\n+                        // avoids cyclomatic complexity\n+                        if (subNode instanceof StartNode) {\n+                         \n+                            processEventSubprocessStartNode(((StartNode) subNode), eventSubProcessNode);\n+                        }\n+                    }\n+                }\n+                postProcessNodes(process, (NodeContainer) node);\n+            } \n+        }     \n+    }\n+    \n+    private void processEventSubprocessStartNode(StartNode subNode, EventSubProcessNode eventSubProcessNode) {\n+        List<Trigger> triggers = subNode.getTriggers();\n+        if ( triggers != null ) {\n+                                   \n+            for ( Trigger trigger : triggers ) {\n+                if ( trigger instanceof EventTrigger ) {\n+                    final List<EventFilter> filters = ((EventTrigger) trigger).getEventFilters();\n+    \n+                    for ( EventFilter filter : filters ) {                        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxNzE1Ng==", "bodyText": "there is always a TRIGGER_TYPE on metaData? otherwise, this can lead to a NPE... maybe using String.valueOf() instead of casting is an option.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#discussion_r382717156", "createdAt": "2020-02-21T17:44:18Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -36,24 +44,51 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n         addFactoryMethodWithArgsWithAssignment(factoryField, body, StartNodeFactory.class, \"startNode\" + node.getId(), \"startNode\", new LongLiteralExpr(startNode.getId()));\n         addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"name\", new StringLiteralExpr(getOrDefault(startNode.getName(), \"Start\")));\n         \n+        addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"interrupting\", new BooleanLiteralExpr(startNode.isInterrupting()));\n+        \n         visitMetaData(startNode.getMetaData(), body, \"startNode\" + node.getId());\n         \n         addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"done\");\n         \n         if (startNode.getTriggers() != null && !startNode.getTriggers().isEmpty()) {\n             Map<String, Object> nodeMetaData = startNode.getMetaData();\n-            metadata.getTriggers().add(new TriggerMetaData((String)nodeMetaData.get(\"TriggerRef\"), \n-                                                           (String)nodeMetaData.get(\"TriggerType\"), \n-                                                           (String)nodeMetaData.get(\"MessageType\"), \n-                                                           (String)nodeMetaData.get(\"TriggerMapping\"),\n+            metadata.getTriggers().add(new TriggerMetaData((String)nodeMetaData.get(TRIGGER_REF), \n+                                                           (String)nodeMetaData.get(TRIGGER_TYPE), \n+                                                           (String)nodeMetaData.get(MESSAGE_TYPE), \n+                                                           (String)nodeMetaData.get(TRIGGER_MAPPING),\n                                                            String.valueOf(node.getId())).validate());\n             \n-            addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"trigger\", new StringLiteralExpr((String)nodeMetaData.get(\"TriggerRef\")),\n-                                                                                  new StringLiteralExpr(getOrDefault((String)nodeMetaData.get(\"TriggerMapping\"), \"\")));\n+            handleSignal(startNode, nodeMetaData, body, variableScope, metadata);\n+            \n+            addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"trigger\", new StringLiteralExpr((String)nodeMetaData.get(TRIGGER_REF)),\n+                                                                                  new StringLiteralExpr(getOrDefault((String)nodeMetaData.get(TRIGGER_MAPPING), \"\")));\n         } else {\n             // since there is start node without trigger then make sure it is startable\n             metadata.setStartable(true);\n         }\n         \n     }\n+    \n+    protected void handleSignal(StartNode startNode, Map<String, Object> nodeMetaData, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        if (\"signal\".equalsIgnoreCase((String)startNode.getMetaData(TRIGGER_TYPE))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxNzk1NA==", "bodyText": "there is always a TRIGGER_TYPE,...,  on metaData? otherwise, this can lead to a NPE... maybe using String.valueOf() instead of casting is an option.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#discussion_r382717954", "createdAt": "2020-02-21T17:46:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -36,24 +44,51 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n         addFactoryMethodWithArgsWithAssignment(factoryField, body, StartNodeFactory.class, \"startNode\" + node.getId(), \"startNode\", new LongLiteralExpr(startNode.getId()));\n         addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"name\", new StringLiteralExpr(getOrDefault(startNode.getName(), \"Start\")));\n         \n+        addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"interrupting\", new BooleanLiteralExpr(startNode.isInterrupting()));\n+        \n         visitMetaData(startNode.getMetaData(), body, \"startNode\" + node.getId());\n         \n         addFactoryMethodWithArgs(body, \"startNode\" + node.getId(), \"done\");\n         \n         if (startNode.getTriggers() != null && !startNode.getTriggers().isEmpty()) {\n             Map<String, Object> nodeMetaData = startNode.getMetaData();\n-            metadata.getTriggers().add(new TriggerMetaData((String)nodeMetaData.get(\"TriggerRef\"), \n-                                                           (String)nodeMetaData.get(\"TriggerType\"), \n-                                                           (String)nodeMetaData.get(\"MessageType\"), \n-                                                           (String)nodeMetaData.get(\"TriggerMapping\"),\n+            metadata.getTriggers().add(new TriggerMetaData((String)nodeMetaData.get(TRIGGER_REF), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c74bd0248d3842c63a0ad8e1307b22099d679b", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e2c74bd0248d3842c63a0ad8e1307b22099d679b", "committedDate": "2020-02-24T10:48:46Z", "message": "KOGITO-1217 - Event Based Subprocess Support - signal start event"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b605e08a53abab03eca9b6d4d1783037d22aa677", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b605e08a53abab03eca9b6d4d1783037d22aa677", "committedDate": "2020-02-20T12:09:21Z", "message": "KOGITO-1217 - Event Based Subprocess Support - signal start event"}, "afterCommit": {"oid": "e2c74bd0248d3842c63a0ad8e1307b22099d679b", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e2c74bd0248d3842c63a0ad8e1307b22099d679b", "committedDate": "2020-02-24T10:48:46Z", "message": "KOGITO-1217 - Event Based Subprocess Support - signal start event"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTczNTEz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#pullrequestreview-364173513", "createdAt": "2020-02-25T14:17:32Z", "commit": {"oid": "e2c74bd0248d3842c63a0ad8e1307b22099d679b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoxNzozMlrOFuHuGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoxNzozMlrOFuHuGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwNTMwNQ==", "bodyText": "back to the future? :D", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#discussion_r383905305", "createdAt": "2020-02-25T14:17:32Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c74bd0248d3842c63a0ad8e1307b22099d679b"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODQ0NjM2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/322#pullrequestreview-364844636", "createdAt": "2020-02-26T12:06:00Z", "commit": {"oid": "e2c74bd0248d3842c63a0ad8e1307b22099d679b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3730, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}