{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTExODcz", "number": 293, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDozOTozOFrODagZOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxNjoxNVrODbsH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTIwMzE0OnYy", "diffSide": "RIGHT", "path": "addons/persistence/infinispan-quarkus-health/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNDozOTozOFrOFhfs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToxNjozNVrOFh739g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NjcwNQ==", "bodyText": "The scope is also inherited?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r370666705", "createdAt": "2020-01-24T14:39:38Z", "author": {"login": "ricardozanini"}, "path": "addons/persistence/infinispan-quarkus-health/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>persistence</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>infinispan-quarkus-health</artifactId>\n+  <description>Infinispan Health Check for Quarkus</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.smallrye</groupId>\n+      <artifactId>smallrye-health</artifactId>\n+    </dependency>\n+\n+    <!-- test dependencies -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0820f1b1d97cb2dfda9bf6fa1eab5d0092e9e8b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyNjU5NQ==", "bodyText": "no, it should be test scope, great catch.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r371126595", "createdAt": "2020-01-27T09:12:47Z", "author": {"login": "tiagodolphine"}, "path": "addons/persistence/infinispan-quarkus-health/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>persistence</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>infinispan-quarkus-health</artifactId>\n+  <description>Infinispan Health Check for Quarkus</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.smallrye</groupId>\n+      <artifactId>smallrye-health</artifactId>\n+    </dependency>\n+\n+    <!-- test dependencies -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NjcwNQ=="}, "originalCommit": {"oid": "e0820f1b1d97cb2dfda9bf6fa1eab5d0092e9e8b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyODMxMA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r371128310", "createdAt": "2020-01-27T09:16:35Z", "author": {"login": "tiagodolphine"}, "path": "addons/persistence/infinispan-quarkus-health/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>persistence</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>infinispan-quarkus-health</artifactId>\n+  <description>Infinispan Health Check for Quarkus</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.smallrye</groupId>\n+      <artifactId>smallrye-health</artifactId>\n+    </dependency>\n+\n+    <!-- test dependencies -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NjcwNQ=="}, "originalCommit": {"oid": "e0820f1b1d97cb2dfda9bf6fa1eab5d0092e9e8b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzQ1MjAxOnYy", "diffSide": "RIGHT", "path": "addons/jobs/jobs-service/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODoyNjowNFrOFjS3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyODozOVrOFjmJgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MzY0OA==", "bodyText": "Isn't this overridden anyway when deploying to Openshift? Or is it for local testing?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372553648", "createdAt": "2020-01-29T18:26:04Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-service/src/main/resources/application.properties", "diffHunk": "@@ -64,8 +64,10 @@ kogito.service.url=http://localhost:8080\n kogito.jobs-service.events-support=false\n \n #enabled with the profile: 'events-support' (-Dquarkus.profile=events-support)\n+%events-support.quarkus.kafka.health.enabled=true\n+%events-support.quarkus.kafka.bootstrap-servers=localhost:9092", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNjU1MQ==", "bodyText": "yes, it must be overridden on openshift and it could be overridden in case, in your local testing you use a Kafka cluster on a different host other than the localhost, np.\nThis property is set with localhost just to make things easier, to see the property name and override, this does not affect any behavior just explicitly show the default is localhost:9092.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372806551", "createdAt": "2020-01-30T08:11:26Z", "author": {"login": "tiagodolphine"}, "path": "addons/jobs/jobs-service/src/main/resources/application.properties", "diffHunk": "@@ -64,8 +64,10 @@ kogito.service.url=http://localhost:8080\n kogito.jobs-service.events-support=false\n \n #enabled with the profile: 'events-support' (-Dquarkus.profile=events-support)\n+%events-support.quarkus.kafka.health.enabled=true\n+%events-support.quarkus.kafka.bootstrap-servers=localhost:9092", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MzY0OA=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2OTUwNg==", "bodyText": "ok, thanks", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372869506", "createdAt": "2020-01-30T10:28:39Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-service/src/main/resources/application.properties", "diffHunk": "@@ -64,8 +64,10 @@ kogito.service.url=http://localhost:8080\n kogito.jobs-service.events-support=false\n \n #enabled with the profile: 'events-support' (-Dquarkus.profile=events-support)\n+%events-support.quarkus.kafka.health.enabled=true\n+%events-support.quarkus.kafka.bootstrap-servers=localhost:9092", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MzY0OA=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzUwNjI3OnYy", "diffSide": "RIGHT", "path": "addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODo0Mzo1MFrOFjTanw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODowNjo0OFrOFjiNyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MjU5MQ==", "bodyText": "The name of the method suggests we will always return DOWN response, but it depends on the state parameter. Can we remain it to just buildReponse or buildHealthCheckResponse for the sake of readability?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372562591", "createdAt": "2020-01-29T18:43:50Z", "author": {"login": "MarianMacik"}, "path": "addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan.health;\n+\n+import java.net.SocketAddress;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.inject.Instance;\n+\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.Configuration;\n+import org.infinispan.client.hotrod.event.impl.ClientListenerNotifier;\n+import org.infinispan.client.hotrod.impl.operations.OperationsFactory;\n+import org.infinispan.client.hotrod.impl.operations.PingOperation;\n+import org.infinispan.client.hotrod.impl.operations.PingResponse;\n+import org.infinispan.client.hotrod.impl.protocol.Codec;\n+import org.infinispan.client.hotrod.impl.transport.netty.ChannelFactory;\n+\n+/**\n+ * This is a health check implementation for Infinispan Hot Rod Server, based on client and\n+ * {@link RemoteCacheManager}. Basically it executes a ping operation to all nodes and if all are down it responds as\n+ * Down, otherwise it responds as Up.\n+ */\n+public class InfinispanHealthCheck implements HealthCheck {\n+\n+    private Optional<RemoteCacheManager> cacheManagerOptional;\n+\n+    public InfinispanHealthCheck(Instance<RemoteCacheManager> cacheManagerInstance) {\n+        this.cacheManagerOptional = Optional.of(cacheManagerInstance)\n+                .filter(Instance::isResolvable)\n+                .map(Instance::get);\n+    }\n+\n+    @Override\n+    public HealthCheckResponse call() {\n+        return cacheManagerOptional.map(cacheManager -> {\n+\n+            final ChannelFactory channelFactory = cacheManager.getChannelFactory();\n+            final Codec codec = cacheManager.getCodec();\n+            final Configuration configuration = cacheManager.getConfiguration();\n+            final ClientListenerNotifier listenerNotifier = new ClientListenerNotifier(codec,\n+                                                                                       cacheManager.getMarshaller(),\n+                                                                                       channelFactory,\n+                                                                                       configuration);\n+            final OperationsFactory operationsFactory = new OperationsFactory(channelFactory,\n+                                                                              codec,\n+                                                                              listenerNotifier,\n+                                                                              configuration);\n+\n+            return Optional.of(channelFactory\n+                                       .getServers()\n+                                       .stream()\n+                                       .map(server -> invokePingOperation(channelFactory, operationsFactory, server)\n+                                               .thenApply(PingResponse::isSuccess)\n+                                               .exceptionally(ex -> false))\n+                                       .map(op -> {\n+                                           try {\n+                                               return op.get(500, TimeUnit.MILLISECONDS);\n+                                           } catch (Exception e) {\n+                                               return false;\n+                                           }\n+                                       })\n+                                       .allMatch(Boolean.FALSE::equals))\n+                    .map(allDown -> buildDownResponse(channelFactory, !allDown))\n+                    .orElse(buildDownResponse(channelFactory, false));\n+        }).orElse(null);\n+    }\n+\n+    private HealthCheckResponse buildDownResponse(ChannelFactory channelFactory, boolean state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNTA2Nw==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372805067", "createdAt": "2020-01-30T08:06:48Z", "author": {"login": "tiagodolphine"}, "path": "addons/persistence/infinispan-quarkus-health/src/main/java/org/kie/kogito/infinispan/health/InfinispanHealthCheck.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan.health;\n+\n+import java.net.SocketAddress;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.inject.Instance;\n+\n+import org.eclipse.microprofile.health.HealthCheck;\n+import org.eclipse.microprofile.health.HealthCheckResponse;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.configuration.Configuration;\n+import org.infinispan.client.hotrod.event.impl.ClientListenerNotifier;\n+import org.infinispan.client.hotrod.impl.operations.OperationsFactory;\n+import org.infinispan.client.hotrod.impl.operations.PingOperation;\n+import org.infinispan.client.hotrod.impl.operations.PingResponse;\n+import org.infinispan.client.hotrod.impl.protocol.Codec;\n+import org.infinispan.client.hotrod.impl.transport.netty.ChannelFactory;\n+\n+/**\n+ * This is a health check implementation for Infinispan Hot Rod Server, based on client and\n+ * {@link RemoteCacheManager}. Basically it executes a ping operation to all nodes and if all are down it responds as\n+ * Down, otherwise it responds as Up.\n+ */\n+public class InfinispanHealthCheck implements HealthCheck {\n+\n+    private Optional<RemoteCacheManager> cacheManagerOptional;\n+\n+    public InfinispanHealthCheck(Instance<RemoteCacheManager> cacheManagerInstance) {\n+        this.cacheManagerOptional = Optional.of(cacheManagerInstance)\n+                .filter(Instance::isResolvable)\n+                .map(Instance::get);\n+    }\n+\n+    @Override\n+    public HealthCheckResponse call() {\n+        return cacheManagerOptional.map(cacheManager -> {\n+\n+            final ChannelFactory channelFactory = cacheManager.getChannelFactory();\n+            final Codec codec = cacheManager.getCodec();\n+            final Configuration configuration = cacheManager.getConfiguration();\n+            final ClientListenerNotifier listenerNotifier = new ClientListenerNotifier(codec,\n+                                                                                       cacheManager.getMarshaller(),\n+                                                                                       channelFactory,\n+                                                                                       configuration);\n+            final OperationsFactory operationsFactory = new OperationsFactory(channelFactory,\n+                                                                              codec,\n+                                                                              listenerNotifier,\n+                                                                              configuration);\n+\n+            return Optional.of(channelFactory\n+                                       .getServers()\n+                                       .stream()\n+                                       .map(server -> invokePingOperation(channelFactory, operationsFactory, server)\n+                                               .thenApply(PingResponse::isSuccess)\n+                                               .exceptionally(ex -> false))\n+                                       .map(op -> {\n+                                           try {\n+                                               return op.get(500, TimeUnit.MILLISECONDS);\n+                                           } catch (Exception e) {\n+                                               return false;\n+                                           }\n+                                       })\n+                                       .allMatch(Boolean.FALSE::equals))\n+                    .map(allDown -> buildDownResponse(channelFactory, !allDown))\n+                    .orElse(buildDownResponse(channelFactory, false));\n+        }).orElse(null);\n+    }\n+\n+    private HealthCheckResponse buildDownResponse(ChannelFactory channelFactory, boolean state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MjU5MQ=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzUxMjk0OnYy", "diffSide": "RIGHT", "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODo0NjowNlrOFjTfPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODowMzo0NVrOFjiKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg==", "bodyText": "Just FYI, after this is merged we will have 3 almost identical InfinispanServerTestResource classes. Wdyt about unifying them? I can create a separate module for test resources/test classes in general so we won't duplicate things. Wdyt @cristianonicolai ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372563772", "createdAt": "2020-01-29T18:46:06Z", "author": {"login": "MarianMacik"}, "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class InfinispanServerTestResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NDY4NQ==", "bodyText": "+1 to unify, we need to create a shared module for these test resources.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372584685", "createdAt": "2020-01-29T19:27:12Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class InfinispanServerTestResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NTQ0NQ==", "bodyText": "I'm happy for that to be handled on another JIRA/PR.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372585445", "createdAt": "2020-01-29T19:28:42Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class InfinispanServerTestResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5MTU5MQ==", "bodyText": "Sure, I can probably plan something for next week/sprint.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372791591", "createdAt": "2020-01-30T07:24:30Z", "author": {"login": "MarianMacik"}, "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class InfinispanServerTestResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNDExMw==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372804113", "createdAt": "2020-01-30T08:03:45Z", "author": {"login": "tiagodolphine"}, "path": "addons/persistence/infinispan-quarkus-health/src/test/java/org/kie/kogito/infinispan/InfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.infinispan;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+public class InfinispanServerTestResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2Mzc3Mg=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzYxMDcxOnYy", "diffSide": "RIGHT", "path": "addons/persistence/pom.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToxNjoxNVrOFjUbbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOToxODozN1rOFkFZyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTE4Mw==", "bodyText": "Just an organizational question. Since this is really not an addon, rather a permanent part of jobs-service, wouldn't it make more sense to put it in the job-service module? Or do we want to include it into the Kogito generated app as well in the future? Then I guess it won't make sense for Spring Boot runtime.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372579183", "createdAt": "2020-01-29T19:16:15Z", "author": {"login": "MarianMacik"}, "path": "addons/persistence/pom.xml", "diffHunk": "@@ -11,5 +11,6 @@\n   <description>Kogito Persistence Implementations</description>\n   <modules>\n     <module>infinispan-persistence-addon</module>\n+    <module>infinispan-quarkus-health</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NDkyOQ==", "bodyText": "it will be included into data index as well.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372584929", "createdAt": "2020-01-29T19:27:41Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/pom.xml", "diffHunk": "@@ -11,5 +11,6 @@\n   <description>Kogito Persistence Implementations</description>\n   <modules>\n     <module>infinispan-persistence-addon</module>\n+    <module>infinispan-quarkus-health</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTE4Mw=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNDAyOA==", "bodyText": "the reason as Cristiano mentioned for this module, is to be shared with whatever service that uses infinispan. I chose this place to insert but we can move it to any other module.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372804028", "createdAt": "2020-01-30T08:03:28Z", "author": {"login": "tiagodolphine"}, "path": "addons/persistence/pom.xml", "diffHunk": "@@ -11,5 +11,6 @@\n   <description>Kogito Persistence Implementations</description>\n   <modules>\n     <module>infinispan-persistence-addon</module>\n+    <module>infinispan-quarkus-health</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTE4Mw=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MTE5OQ==", "bodyText": "OK, makes sense, then I would just make the name consistent with other addons, e.g. infinispan-quarkus-health-addon. Wdyt? So users can in future add it into the kogito app knowing it is an addon. I guess then we will provide code generation to expose the healthcheck endpoint in case addon is on classpath.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r372871199", "createdAt": "2020-01-30T10:32:05Z", "author": {"login": "MarianMacik"}, "path": "addons/persistence/pom.xml", "diffHunk": "@@ -11,5 +11,6 @@\n   <description>Kogito Persistence Implementations</description>\n   <modules>\n     <module>infinispan-persistence-addon</module>\n+    <module>infinispan-quarkus-health</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTE4Mw=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4MTU3OA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/293#discussion_r373381578", "createdAt": "2020-01-31T09:18:37Z", "author": {"login": "tiagodolphine"}, "path": "addons/persistence/pom.xml", "diffHunk": "@@ -11,5 +11,6 @@\n   <description>Kogito Persistence Implementations</description>\n   <modules>\n     <module>infinispan-persistence-addon</module>\n+    <module>infinispan-quarkus-health</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU3OTE4Mw=="}, "originalCommit": {"oid": "41465626566aeb0fb2c9cfc2e941990e646c4e9e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 280, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}