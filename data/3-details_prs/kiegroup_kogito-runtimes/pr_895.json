{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjkyMjEw", "number": 895, "title": "FAI-216: move DMN domain metrics generation inside DecisionModels", "bodyText": "Related Jira task\n\nGoal\nThis PR is related to the monitoring addon. The goal is to move the logic that generates the domain metrics from the codegenerated REST endpoint inside the DecisionModels implementation.\nThis allows the metrics data to be generated in every part of the framework that object is injected into. A good first use case are the processes that need to execute a DMN model (that will probably be implemented in a task following this one).\nImplementation details\nI moved the logic inside a dedicated class called MonitoringDecisionModel that implements DecisionModel and wraps another existing DecisionModel object supposed to contain the real logic.\nThis allows the addon to stay indipendent from whatever real implementation of DecisionModel needs to be monitored (e.g. DmnDecisionModel, contained in kogito-dmn package).", "createdAt": "2020-11-16T14:18:08Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895", "merged": true, "mergeCommit": {"oid": "9b2cf75227541fd386f26e80d1e5f03b50414b78"}, "closed": true, "closedAt": "2020-12-18T13:10:51Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcJEHEgH2gAyNTIxNjkyMjEwOjg4MTEyYmU2NmQ1MTk5ZmFhZGNmM2RmYTE4NGM5YTFiYmM0NDk3Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnWNvUAFqTU1NTQwMDYzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88112be66d5199faadcf3dfa184c9a1bbc449777", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/88112be66d5199faadcf3dfa184c9a1bbc449777", "committedDate": "2020-11-13T15:40:45Z", "message": "FAI-216: move domain metrics generation in MonitoringDecisionModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/473ec5a0b4b1d6afa763453803ccfc97cd0c1a86", "committedDate": "2020-11-16T14:00:33Z", "message": "FAI-216: add MonitoringDecisionModelTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDY5MTk5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-531469199", "createdAt": "2020-11-16T16:07:47Z", "commit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxMTozNFrOH0GAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxNTozNFrOH0GM3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NjQ2Ng==", "bodyText": "Just a side comment: what about MonitoredDecisionModel?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524386466", "createdAt": "2020-11-16T16:11:34Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA==", "bodyText": "Are both overloads needed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524387480", "createdAt": "2020-11-16T16:13:00Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTU5Nw==", "bodyText": "Just a side comment: what about originalModel or simply model?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524389597", "createdAt": "2020-11-16T16:15:34Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {\n+\n+    private final DecisionModel wrapped;\n+\n+    public MonitoringDecisionModel(DecisionModel wrapped) {\n+        this.wrapped = wrapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNTYxODI2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-531561826", "createdAt": "2020-11-16T17:47:57Z", "commit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0Nzo1OFrOH0KaLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo1MDowNlrOH0Kfag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODU0MQ==", "bodyText": "In this way you are hiding any possible error (i.e. template changed). What about preserve the optional and then if empty throws an error?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524458541", "createdAt": "2020-11-16T17:47:58Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,14 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class))\n+                    .ifPresent(rs -> rs.getExpression().ifPresent(rsExp ->\n+                            rs.setExpression(newObject(\"org.kie.kogito.monitoring.decision.MonitoringDecisionModel\", rsExp))\n+                    ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTg4Mg==", "bodyText": "Is this working with/without strongly typed extension?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524459882", "createdAt": "2020-11-16T17:50:06Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3b6f720cc85c7635bb981b66a2eb34a576761d", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ce3b6f720cc85c7635bb981b66a2eb34a576761d", "committedDate": "2020-11-17T09:19:53Z", "message": "FAI-216: renamed MonitoringDecisionModel into MonitoredDecisionModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09486a24913f9ed2a85ae6fd8ac3841173fc8ece", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/09486a24913f9ed2a85ae6fd8ac3841173fc8ece", "committedDate": "2020-11-19T08:20:24Z", "message": "FAI-216: clean DMNResultMetricsBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3bd6c33ac74203ef887ebd677b443c371c295744", "committedDate": "2020-11-19T08:37:36Z", "message": "FAI-216: Merge branch master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MjY0MTA4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-534264108", "createdAt": "2020-11-19T10:11:20Z", "commit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mjc2MDAy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-535276002", "createdAt": "2020-11-20T09:48:46Z", "commit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0ODo0NlrOH3Igvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo1Mzo0NVrOH3ItLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MzE4Mg==", "bodyText": "Would it be possible to manage this version in dependency management?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527573182", "createdAt": "2020-11-20T09:48:46Z", "author": {"login": "jiripetrlik"}, "path": "addons/monitoring-prometheus-addon/pom.xml", "diffHunk": "@@ -59,7 +59,8 @@\n     </dependency>\n     <dependency>\n       <groupId>org.mockito</groupId>\n-      <artifactId>mockito-core</artifactId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>${version.org.mockito}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA==", "bodyText": "Please check with Sonar cloud. We should probably check if the value is not null before using it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527576364", "createdAt": "2020-11-20T09:53:45Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89edd8661d19e85ee24a36096b4d71b6d19803ce", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89edd8661d19e85ee24a36096b4d71b6d19803ce", "committedDate": "2020-11-25T08:38:02Z", "message": "FAI-216: add mockito-inline to kogito-build-parent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12aa40ad0501482d05c01fe87a91705b51ce3cf3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/12aa40ad0501482d05c01fe87a91705b51ce3cf3", "committedDate": "2020-11-25T08:41:23Z", "message": "FAI-216: try to make SonarCloud happy"}, "afterCommit": {"oid": "ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "committedDate": "2020-11-25T09:20:24Z", "message": "FAI-216: try to make SonarCloud happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bec1e7819344ee11531abb264454a1b76838054", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1bec1e7819344ee11531abb264454a1b76838054", "committedDate": "2020-11-25T20:55:29Z", "message": "FAI-216: try to make SonarCloud happy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ad2be57d4e8d753dd23ae3f69dd2bad8d11653f7", "committedDate": "2020-11-25T09:20:24Z", "message": "FAI-216: try to make SonarCloud happy"}, "afterCommit": {"oid": "1bec1e7819344ee11531abb264454a1b76838054", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1bec1e7819344ee11531abb264454a1b76838054", "committedDate": "2020-11-25T20:55:29Z", "message": "FAI-216: try to make SonarCloud happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8820655a35f7e307544c4b5362264cd200dcef59", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8820655a35f7e307544c4b5362264cd200dcef59", "committedDate": "2020-11-25T21:11:03Z", "message": "FAI-216: Merge branch master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODE2MDU4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-541816058", "createdAt": "2020-12-01T11:44:37Z", "commit": {"oid": "8820655a35f7e307544c4b5362264cd200dcef59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5598b556f7b32a6c95d7ae2f45d5be81848d1eff", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5598b556f7b32a6c95d7ae2f45d5be81848d1eff", "committedDate": "2020-12-18T09:36:08Z", "message": "FAI-216: merge branch master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f997ed9db8afb1f269da775a7f15f2effc1254d", "committedDate": "2020-12-18T09:37:27Z", "message": "FAI-216: fix comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzM2ODcy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-555336872", "createdAt": "2020-12-18T09:39:21Z", "commit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTozOToyMlrOIIbv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MDo1M1rOIIby_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDE0MQ==", "bodyText": "@danielezonca here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714141", "createdAt": "2020-12-18T09:39:22Z", "author": {"login": "kostola"}, "path": "addons/monitoring/monitoring-core/monitoring-core-common/src/main/java/org/kie/kogito/monitoring/core/common/decision/MonitoredDecisionModelTransformer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.core.common.decision;\n+\n+import java.util.function.Function;\n+\n+import org.kie.kogito.decision.DecisionModel;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.monitoring.core.common.decision.MonitoredDecisionModelTransformer</code>\n+ * for code generation plugins to inject this class.\n+ */\n+public class MonitoredDecisionModelTransformer implements Function<DecisionModel, DecisionModel> {\n+\n+    @Override\n+    public DecisionModel apply(DecisionModel decisionModel) {\n+        return new MonitoredDecisionModel(decisionModel);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDY3Mw==", "bodyText": "@danielezonca here as well", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714673", "createdAt": "2020-12-18T09:40:24Z", "author": {"login": "kostola"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/AbstractDecisionModels.java", "diffHunk": "@@ -14,41 +14,49 @@\n  */\n package org.kie.kogito.dmn;\n \n+import java.io.Reader;\n+import java.util.function.Function;\n+\n import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.Application;\n import org.kie.kogito.ExecutionIdSupplier;\n import org.kie.kogito.decision.DecisionConfig;\n+import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.decision.DecisionModels;\n \n-import java.io.Reader;\n-import java.util.function.Function;\n-\n public abstract class AbstractDecisionModels implements DecisionModels {\n \n     private static final boolean CAN_PLATFORM_CLASSLOAD = org.kie.dmn.feel.util.ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD;\n     private static DMNRuntime dmnRuntime = null;\n     private static ExecutionIdSupplier execIdSupplier = null;\n+    private static Function<DecisionModel, DecisionModel> decisionModelTransformer = null;\n \n     protected static void init(Function<String, KieRuntimeFactory> sKieRuntimeFactoryFunction,\n                                ExecutionIdSupplier executionIdSupplier,\n+                               Function<DecisionModel, DecisionModel> decisionModelTransformerInit,\n                                Reader... readers) {\n         dmnRuntime = DMNKogito.createGenericDMNRuntime(sKieRuntimeFactoryFunction, readers);\n         execIdSupplier = executionIdSupplier;\n+        decisionModelTransformer = decisionModelTransformerInit;\n     }\n \n-    public org.kie.kogito.decision.DecisionModel getDecisionModel(String namespace, String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);\n+    public DecisionModel getDecisionModel(String namespace, String name) {\n+        DecisionModel model = new DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);\n+        return decisionModelTransformer == null\n+                ? model\n+                : decisionModelTransformer.apply(model);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDk0MQ==", "bodyText": "@danielezonca here as well", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714941", "createdAt": "2020-12-18T09:40:53Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -92,20 +111,32 @@ public CompilationUnit compilationUnit() {\n                         \"Missing init() method\"));\n \n         setupExecIdSupplierVariable(initMethod);\n+        setupDecisionModelTransformerVariable(initMethod);\n \n         for (CollectedResource resource : resources) {\n             MethodCallExpr getResAsStream = getReadResourceMethod(applicationClass, resource);\n             MethodCallExpr isr = new MethodCallExpr(\"readResource\").addArgument(getResAsStream);\n             initMethod.addArgument(isr);\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+\n+        }\n+\n         return compilationUnit;\n     }\n \n     private void setupExecIdSupplierVariable(MethodCallExpr initMethod) {\n         Expression execIdSupplier = addonsConfig.useTracing() ?\n-                newObject(DmnExecutionIdSupplier.class):\n+                newObject(DmnExecutionIdSupplier.class) :\n                 new NullLiteralExpr();\n         initMethod.addArgument(execIdSupplier);\n     }\n-}\n\\ No newline at end of file\n+\n+    private void setupDecisionModelTransformerVariable(MethodCallExpr initMethod) {\n+        Expression decisionModelTransformerExpr = addonsConfig.useMonitoring() ?\n+                newObject(\"org.kie.kogito.monitoring.core.common.decision.MonitoredDecisionModelTransformer\") :\n+                new NullLiteralExpr();\n+        initMethod.addArgument(decisionModelTransformerExpr);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2bd9ff7bf99195637f8df6709809198c3cbeb4ec", "committedDate": "2020-12-18T09:42:46Z", "message": "FAI-216: cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzYyNDE3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-555362417", "createdAt": "2020-12-18T10:16:35Z", "commit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxNjozNVrOIIdAiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxNjozNVrOIIdAiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg==", "bodyText": "You probably want to remove the commented block entirely?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545734792", "createdAt": "2020-12-18T10:16:35Z", "author": {"login": "manstis"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -42,6 +42,9 @@\n     private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringDecisionContainerTemplate.java\";\n     private static final String SECTION_CLASS_NAME = \"DecisionModels\";\n \n+//    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzYzMTE2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-555363116", "createdAt": "2020-12-18T10:17:34Z", "commit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793207cd5ed211213d641fb05b7af0b12d95aba0", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/793207cd5ed211213d641fb05b7af0b12d95aba0", "committedDate": "2020-12-18T10:29:08Z", "message": "FAI-216: cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzkzMjM2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-555393236", "createdAt": "2020-12-18T11:02:02Z", "commit": {"oid": "793207cd5ed211213d641fb05b7af0b12d95aba0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDAwNjM5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#pullrequestreview-555400639", "createdAt": "2020-12-18T11:13:12Z", "commit": {"oid": "793207cd5ed211213d641fb05b7af0b12d95aba0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3863, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}