{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTg0MzMz", "number": 404, "title": "KOGITO-1306 Error during code generation when using java reserved word on variable", "bodyText": "Allow using reserved words as variable names\nJackson annotation used to keep the variable name\nSanitized name on variables", "createdAt": "2020-03-31T20:33:17Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404", "merged": true, "mergeCommit": {"oid": "e7850962916d0c2ae3c356e04d672a6b27a49f8a"}, "closed": true, "closedAt": "2020-04-02T07:14:08Z", "author": {"login": "tiagodolphine"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTI-wlAH2gAyMzk2NTg0MzMzOmM1MjgxZWZmYWU2YTBkMjUzMWFhZmU5YTgwY2ZjMjMwNGYxZTc0ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTm9I8gFqTM4NjE1OTY0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c5281effae6a0d2531aafe9a80cfc2304f1e7481", "committedDate": "2020-03-31T20:18:26Z", "message": "KOGITO-1306 Error during code generation when using java reserved words on process variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjcxODQ3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#pullrequestreview-385271847", "createdAt": "2020-04-01T05:20:46Z", "commit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzA2MTI2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#pullrequestreview-385306126", "createdAt": "2020-04-01T06:50:33Z", "commit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1MDozNFrOF-y-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1ODo0MFrOF-zL7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MTMxMg==", "bodyText": "I think we can simplify this by just prepending a \"$\" sign or a mix of \"$\" sign and some other stuff. This will keep it readable and make it safe.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Optional.ofNullable(name)\n          \n          \n            \n                                    .filter(SourceVersion::isName)\n          \n          \n            \n                                    .orElseGet(() -> Optional.ofNullable(StringUtils.extractFirstIdentifier(name, 0))\n          \n          \n            \n                                            .filter(s -> !StringUtils.isEmpty(s))\n          \n          \n            \n                                            .filter(SourceVersion::isName)\n          \n          \n            \n                                            .orElseGet(() -> \"attribute\" + StringUtils.generateUUID()));\n          \n          \n            \n                   // prepend v$ in front of the variable name to prevent clashing with reserved keywords\n          \n          \n            \n                    return String.format(\"v$%s\", name);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401391312", "createdAt": "2020-04-01T06:50:34Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -64,6 +69,27 @@ public String getName() {\n \n     public void setName(final String name) {\n         this.name = name;\n+        this.sanitizedName = sanitizeIdentifier(name);\n+    }\n+\n+    public String getSanitizedName() {\n+        return sanitizedName;\n+    }\n+\n+    /**\n+     * Return a valid unique Java identifier based on the given @param name. It consider valid characters and\n+     * reserved words.\n+     * In case the input is valid it is returned itself otherwise a unique valid identifier is generated.\n+     * @param name the input\n+     * @return the output valid Java identifier\n+     */\n+    private static String sanitizeIdentifier(String name) {\n+        return Optional.ofNullable(name)\n+                        .filter(SourceVersion::isName)\n+                        .orElseGet(() -> Optional.ofNullable(StringUtils.extractFirstIdentifier(name, 0))\n+                                .filter(s -> !StringUtils.isEmpty(s))\n+                                .filter(SourceVersion::isName)\n+                                .orElseGet(() -> \"attribute\" + StringUtils.generateUUID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MjkxNw==", "bodyText": "because setters and getters are always prepended with get and set they can never be invalid. So maybe we can use the \"regular\" name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401392917", "createdAt": "2020-04-01T06:54:34Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();\n             String sourceField = e.getValue();\n             blockStmt.addStatement(\n                     dest.callSetter(destVarName, destField, dest.callGetter(sourceVarName, sourceField)));\n         }\n \n         return blockStmt;\n     }\n-    \n+\n     public MethodCallExpr callSetter(String targetVar, String destField, String value) {\n         if (value.startsWith(\"#{\")) {\n-            value = value.substring(2, value.length() -1);\n+            value = value.substring(2, value.length() - 1);\n         }\n-        \n+\n         return callSetter(targetVar, destField, new NameExpr(value));\n     }\n \n     public MethodCallExpr callSetter(String targetVar, String destField, Expression value) {\n+        String name = variableScope.getTypes().get(destField).getSanitizedName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MzkyMw==", "bodyText": "same here: if we call a getter, then the getter may retain its original name", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401393923", "createdAt": "2020-04-01T06:56:53Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NDY2OQ==", "bodyText": "If these accept params maybe we can override the name. If they don't it may be just enough to create the FD with the unsanitized name and then after these lines add fd.setName(sanitizedName)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401394669", "createdAt": "2020-04-01T06:58:40Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -175,36 +176,41 @@ private CompilationUnit compilationUnit() {\n             staticFromMap.addStatement(new AssignExpr(idField, new NameExpr(\"id\"), AssignExpr.Operator.ASSIGN));\n         }\n \n-        for (String vname : variableScope.getTypes().keySet()) {\n-            \n-            String vtype = variableScope.getType(vname);\n-            FieldDeclaration fd = declareField(vname, vtype);\n+        for (Map.Entry<String, Variable> variable : variableScope.getTypes().entrySet()) {\n+            String varName = variable.getValue().getName();\n+            String vtype = variable.getValue().getType().getStringType();\n+            String sanitizedName = variable.getValue().getSanitizedName();\n+\n+            FieldDeclaration fd = declareField(sanitizedName, vtype);\n             modelClass.addMember(fd);\n-            \n-            List<String> tags = variableScope.getTags(vname);\n+\n+            List<String> tags = variable.getValue().getTags();\n             fd.addAnnotation(new NormalAnnotationExpr(new Name(VariableInfo.class.getCanonicalName()), NodeList.nodeList(new MemberValuePair(\"tags\", new StringLiteralExpr(tags.stream().collect(Collectors.joining(\",\")))))));\n+            fd.addAnnotation(new NormalAnnotationExpr(new Name(JsonProperty.class.getCanonicalName()),\n+                                                      NodeList.nodeList(new MemberValuePair(\"value\",\n+                                                                                            new StringLiteralExpr(varName)))));\n \n             applyValidation(fd, tags);\n-            \n+\n             fd.createGetter();\n             fd.createSetter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzMxMDk0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#pullrequestreview-385731094", "createdAt": "2020-04-01T16:03:35Z", "commit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e847c41b3f027f05a77d7ef797cedbc21f11813f", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e847c41b3f027f05a77d7ef797cedbc21f11813f", "committedDate": "2020-04-01T18:20:59Z", "message": "Apply suggested sanitized variable generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTU5NjQ1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#pullrequestreview-386159645", "createdAt": "2020-04-02T07:13:49Z", "commit": {"oid": "e847c41b3f027f05a77d7ef797cedbc21f11813f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}