{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTI4NDQ3", "number": 718, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozNzo1MlrOEb8QIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozOTowMVrOEeNygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM0MTc3OnYy", "diffSide": "RIGHT", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozNzo1MlrOHGLX8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTowMjoyNFrOHIUkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzOTg1OQ==", "bodyText": "Small typo here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476239859", "createdAt": "2020-08-25T07:37:52Z", "author": {"login": "jomarko"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "diffHunk": "@@ -75,4 +85,11 @@ public static PMML4Result evaluate(PMMLRuntime pmmlRuntime, String modelName, Ma\n         return pmmlRuntime.evaluate(modelName, new PMMLContextImpl(pmmlRequestData));\n     }\n \n+    private static Map<KieBase, KieRuntimeFactory> commonCreateKieRuntimeFactorie(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzYyMA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487620", "createdAt": "2020-08-27T15:02:24Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/PMMLKogito.java", "diffHunk": "@@ -75,4 +85,11 @@ public static PMML4Result evaluate(PMMLRuntime pmmlRuntime, String modelName, Ma\n         return pmmlRuntime.evaluate(modelName, new PMMLContextImpl(pmmlRequestData));\n     }\n \n+    private static Map<KieBase, KieRuntimeFactory> commonCreateKieRuntimeFactorie(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzOTg1OQ=="}, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM1OTg1OnYy", "diffSide": "RIGHT", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0Mjo0NlrOHGLi4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTowMjoxOFrOHIUkDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjY1Ng==", "bodyText": "Could we please use import rather than FQN here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476242656", "createdAt": "2020-08-25T07:42:46Z", "author": {"login": "jomarko"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzU2Nw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487567", "createdAt": "2020-08-27T15:02:18Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjY1Ng=="}, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM2NTAzOnYy", "diffSide": "RIGHT", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0NDowNlrOHGLl8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTowMjoxNFrOHIUj0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MzQ0Mg==", "bodyText": "import vs. FQN", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476243442", "createdAt": "2020-08-25T07:44:06Z", "author": {"login": "jomarko"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzUwNQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487505", "createdAt": "2020-08-27T15:02:14Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MzQ0Mg=="}, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM2NzYwOnYy", "diffSide": "RIGHT", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0NDo1M1rOHGLnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTowMjowN1rOHIUjfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzg1Mg==", "bodyText": "Idea reports typo, initializing, please update all occurrences in this file.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476243852", "createdAt": "2020-08-25T07:44:53Z", "author": {"login": "jomarko"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .map(kieRuntimeFactories::get)\n+                    .findFirst()\n+                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzQyMw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487423", "createdAt": "2020-08-27T15:02:07Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .map(kieRuntimeFactories::get)\n+                    .findFirst()\n+                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzg1Mg=="}, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM3MjM1OnYy", "diffSide": "RIGHT", "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0NTo0OFrOHGLqJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTowMjowMVrOHIUjMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NDUxOQ==", "bodyText": "Is this really needed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r476244519", "createdAt": "2020-08-25T07:45:48Z", "author": {"login": "jomarko"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .map(kieRuntimeFactories::get)\n+                    .findFirst()\n+                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+        }\n+    }\n+\n+    private DMNRuntime initDmnRuntime() {\n+        Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = initPmmlKieRuntimeFactory();\n+\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            List<Resource> resources = fileStream.filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".dmn\"))\n+                    .peek(System.out::println)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NzM0Ng==", "bodyText": "Not really it was there for debug. Removed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r478487346", "createdAt": "2020-08-27T15:02:01Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-scenario-simulation/src/main/java/org/kogito/scenariosimulation/runner/KogitoDMNScenarioRunnerHelper.java", "diffHunk": "@@ -108,4 +92,44 @@ protected void loadInputData(List<InstanceGiven> dataToLoad, DMNContext dmnConte\n         }\n     }\n \n+    private Function<String, KieRuntimeFactory> initPmmlKieRuntimeFactory() {\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            Map<KieBase, KieRuntimeFactory> kieRuntimeFactories =\n+                    org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactoriesWithInMemoryCompilation(\n+                            fileStream\n+                                    .filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".pmml\"))\n+                                    .map(Path::toString)\n+                                    .toArray(String[]::new));\n+\n+            return s -> kieRuntimeFactories.keySet().stream()\n+                    .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+                    .map(kieRuntimeFactories::get)\n+                    .findFirst()\n+                    .orElseThrow(() -> new RuntimeException(\"Failed to fine KieRuntimeFactory for model \" + s));\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error initalizing KogitoDMNScenarioRunnerHelper\", e);\n+        }\n+    }\n+\n+    private DMNRuntime initDmnRuntime() {\n+        Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = initPmmlKieRuntimeFactory();\n+\n+        try (Stream<Path> fileStream = Files.walk(Paths.get(\".\"))) {\n+            List<Resource> resources = fileStream.filter(path -> Files.isRegularFile(path) && path.toString().endsWith(\".dmn\"))\n+                    .peek(System.out::println)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0NDUxOQ=="}, "originalCommit": {"oid": "d11169c8329eca6c271eeb26cb43b27538076c07"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE3NjAxOnYy", "diffSide": "RIGHT", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozNTo1MFrOHJvr8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo0MTo1M1rOHJ1Yyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MDUyOA==", "bodyText": "@danielezonca Why you moved java.util import in this way? Used checkstyle in kogito-runtimes requires this?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r479980528", "createdAt": "2020-08-31T08:35:50Z", "author": {"login": "yesamer"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "diffHunk": "@@ -38,11 +31,20 @@\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n+import org.kie.pmml.evaluator.assembler.service.PMMLCompilerService;\n+import org.kie.pmml.evaluator.assembler.service.PMMLLoaderService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.stream.Stream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58b050f682f86a0a71833e9cb7b6ab527e47262"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3MzkzMQ==", "bodyText": "I think I don't have any codestyle configured in kogito-* repos \ud83e\udd14", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r480073931", "createdAt": "2020-08-31T11:41:53Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "diffHunk": "@@ -38,11 +31,20 @@\n import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.evaluator.api.container.PMMLPackage;\n import org.kie.pmml.evaluator.assembler.container.PMMLPackageImpl;\n+import org.kie.pmml.evaluator.assembler.service.PMMLCompilerService;\n+import org.kie.pmml.evaluator.assembler.service.PMMLLoaderService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.stream.Stream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MDUyOA=="}, "originalCommit": {"oid": "c58b050f682f86a0a71833e9cb7b6ab527e47262"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE4NjU5OnYy", "diffSide": "RIGHT", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozOTowMlrOHJvyVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo0MTozNlrOHJ1YRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjE2NQ==", "bodyText": "@danielezonca Here, you changed the format only. Is it really necessary?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r479982165", "createdAt": "2020-08-31T08:39:02Z", "author": {"login": "yesamer"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "diffHunk": "@@ -73,8 +85,9 @@ private KieRuntimeFactoryBuilder() {\n                     internalKnowledgePackage = pkgReg.getPackage();\n                 }\n                 PMMLPackage pmmlPkg =\n-                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(ResourceType.PMML,\n-                                                                                           rtp -> new PMMLPackageImpl());\n+                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(\n+                                ResourceType.PMML,\n+                                rtp -> new PMMLPackageImpl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58b050f682f86a0a71833e9cb7b6ab527e47262"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3Mzc5OA==", "bodyText": "It is not really necessary but I find it more readable :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/718#discussion_r480073798", "createdAt": "2020-08-31T11:41:36Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/KieRuntimeFactoryBuilder.java", "diffHunk": "@@ -73,8 +85,9 @@ private KieRuntimeFactoryBuilder() {\n                     internalKnowledgePackage = pkgReg.getPackage();\n                 }\n                 PMMLPackage pmmlPkg =\n-                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(ResourceType.PMML,\n-                                                                                           rtp -> new PMMLPackageImpl());\n+                        internalKnowledgePackage.getResourceTypePackages().computeIfAbsent(\n+                                ResourceType.PMML,\n+                                rtp -> new PMMLPackageImpl());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjE2NQ=="}, "originalCommit": {"oid": "c58b050f682f86a0a71833e9cb7b6ab527e47262"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4943, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}