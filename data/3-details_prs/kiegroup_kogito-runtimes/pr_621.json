{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzExMDcw", "number": 621, "title": "FAI-215: Model definition endpoint - event publication", "bodyText": "See https://issues.redhat.com/browse/FAI-215\nSee kiegroup/kogito-apps#331 for changes required to kogito-apps following re-use (and refactoring) of CloudEventUtils.\nSee kiegroup/kogito-examples#298 for a runnable example demo'ing the process.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-07-10T08:45:21Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621", "merged": true, "mergeCommit": {"oid": "18ec525f530b1ff1bddcf18c0083f14f86aff171"}, "closed": true, "closedAt": "2020-07-29T13:09:36Z", "author": {"login": "manstis"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczfzabABqjM1MzMwMjEyOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5pZQ0ABqjM1OTg2MTM0NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9346e2a883106e7253f88c47fb0a87c83555eb9", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9346e2a883106e7253f88c47fb0a87c83555eb9", "committedDate": "2020-07-10T08:36:54Z", "message": "FAI-215: Model definition endpoint - preliminary work"}, "afterCommit": {"oid": "a9136d8ba877259aa88758b6c93df25ea2cb50e7", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a9136d8ba877259aa88758b6c93df25ea2cb50e7", "committedDate": "2020-07-10T08:59:13Z", "message": "FAI-215: Model definition endpoint - preliminary work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9136d8ba877259aa88758b6c93df25ea2cb50e7", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a9136d8ba877259aa88758b6c93df25ea2cb50e7", "committedDate": "2020-07-10T08:59:13Z", "message": "FAI-215: Model definition endpoint - preliminary work"}, "afterCommit": {"oid": "e64d8df2bb61d8394f54fb3b840476b6ec4008d4", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e64d8df2bb61d8394f54fb3b840476b6ec4008d4", "committedDate": "2020-07-10T09:02:40Z", "message": "FAI-215: Model definition endpoint - preliminary work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjQ4MTA2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446248106", "createdAt": "2020-07-10T09:12:42Z", "commit": {"oid": "e64d8df2bb61d8394f54fb3b840476b6ec4008d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMjo0MlrOGvwFCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMjo0MlrOGvwFCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMzk3OQ==", "bodyText": "What about using another topic and another DTO instead of the TraceEvent? Maybe I'm misunderstanding the comment and the intended next steps :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452723979", "createdAt": "2020-07-10T09:12:42Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingCollector.java", "diffHunk": "@@ -33,17 +34,28 @@\n @Singleton\n public class QuarkusDecisionTracingCollector {\n \n+    private final Application application;\n     private final PublishSubject<String> eventSubject;\n     private final DecisionTracingCollector collector;\n \n-    public QuarkusDecisionTracingCollector(BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n-        eventSubject = PublishSubject.create();\n-        collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n+    public QuarkusDecisionTracingCollector(Application application,\n+                                           BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n+        this.application = application;\n+        this.eventSubject = PublishSubject.create();\n+        this.collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n     }\n \n     @Inject\n     public QuarkusDecisionTracingCollector(Application application) {\n-        this(new ApplicationModelSupplier(application));\n+        this(application, new ApplicationModelSupplier(application));\n+    }\n+\n+    @PostConstruct\n+    public void publishDecisionModels() {\n+        application.decisionModels().resources().forEach(resource -> {\n+            //Fire a new TraceEvent containing the model, name and namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64d8df2bb61d8394f54fb3b840476b6ec4008d4"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzM1MTE1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446335115", "createdAt": "2020-07-10T11:43:12Z", "commit": {"oid": "1e901df5188807765d8b1b99c96d7ed9e0906cde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo0MzoxMlrOGv0QPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo0MzoxMlrOGv0QPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MjM4Mg==", "bodyText": "@r00ta FYI (further to your comment), I've started the event side of things now. I have extracted cloud event publishing from the collector classes to new EventEmitter classes. These classes are from where I will now also publish the model events (new event/subject/topic to follow).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452792382", "createdAt": "2020-07-10T11:43:12Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusEventEmitter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.Application;\n+import org.reactivestreams.Publisher;\n+\n+@Singleton\n+public class QuarkusEventEmitter extends EventEmitter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e901df5188807765d8b1b99c96d7ed9e0906cde"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzcyMzQy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446372342", "createdAt": "2020-07-10T12:47:54Z", "commit": {"oid": "86fa50435593e483b897e5d97eaf2a02e2a561f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Nzo1NFrOGv2Atw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Nzo1NFrOGv2Atw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTE3NQ==", "bodyText": "Refactor to ensure the InputStream is closed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452821175", "createdAt": "2020-07-10T12:47:54Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -63,7 +65,17 @@ public String getModelName() {\n             return modelName;\n         }\n \n-        protected String load(InputStream is) {\n+        @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fa50435593e483b897e5d97eaf2a02e2a561f0"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzcyNzQw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446372740", "createdAt": "2020-07-10T12:48:32Z", "commit": {"oid": "86fa50435593e483b897e5d97eaf2a02e2a561f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0ODozM1rOGv2B2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0ODozM1rOGv2B2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTQ2Nw==", "bodyText": "@r00ta FYI.. I'm now emitting CloudEvents for ModelEvent (all be them on the same topic/subject atm)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452821467", "createdAt": "2020-07-10T12:48:33Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootEventEmitter.java", "diffHunk": "@@ -44,9 +46,8 @@ public SpringBootEventEmitter(Application application,\n     @PostConstruct\n     public void publishDecisionModels() {\n         getApplication().decisionModels().resources().forEach(resource -> {\n-            //Fire a new TraceEvent containing the model, name and namespace\n-            System.out.println(resource.getNamespace() + \", \" + resource.getModelName());\n-            System.out.println(resource.get());\n+            //Fire a new ModelEvent containing the model, name and namespace\n+            emit(Json.encode(ModelCloudEventBuilder.from(resource.getModelName(), resource.getNamespace(), resource.get())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fa50435593e483b897e5d97eaf2a02e2a561f0"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDAwOTMy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446400932", "createdAt": "2020-07-10T13:28:47Z", "commit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoyODo0OFrOGv3XVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoyODo0OFrOGv3XVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ==", "bodyText": "@r00ta FYI I now support different topics/subjects for the different events.\nThis PR may need some rework when #583 is merged.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452843351", "createdAt": "2020-07-10T13:28:48Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDAyNzk5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446402799", "createdAt": "2020-07-10T13:31:08Z", "commit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTowOFrOGv3dAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTowOFrOGv3dAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0NDgwMw==", "bodyText": "Tracing topic is kogito-tracing-decision", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452844803", "createdAt": "2020-07-10T13:31:08Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootTraceEventEmitter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootTraceEventEmitter implements EventEmitter {\n+\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootTraceEventEmitter(final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-decision}\") String kafkaTopicName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDAzMTIw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-446403120", "createdAt": "2020-07-10T13:31:34Z", "commit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTozNFrOGv3d-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTozNFrOGv3d-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0NTA0OQ==", "bodyText": "Models topic is kogito-tracing-model", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452845049", "createdAt": "2020-07-10T13:31:34Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.annotation.PostConstruct;\n+\n+import io.cloudevents.json.Json;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.model.ModelCloudEventBuilder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootModelEventEmitter implements EventEmitter {\n+\n+    private final Application application;\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootModelEventEmitter(final Application application,\n+                                       final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MDUyMzMx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-447052331", "createdAt": "2020-07-13T08:50:29Z", "commit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1MDoyOVrOGwfDfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1MDoyOVrOGwfDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5MzYyOQ==", "bodyText": "Let's already use full resource identifier: GAV + resource type + resource identifier\nFor now it is not important that we don't have GAV to export but at least we can already use the \"abstraction\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453493629", "createdAt": "2020-07-13T08:50:29Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    @JsonProperty(\"name\")\n+    private final String name;\n+\n+    @JsonProperty(\"namespace\")\n+    private final String namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cce4b32de40b631d1eb3302370a713bb25ff1a82", "committedDate": "2020-07-10T13:26:26Z", "message": "Add support for different topic/subjects for different types of event"}, "afterCommit": {"oid": "cfa6637834178abd199b002a6672d6527f3bca2a", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cfa6637834178abd199b002a6672d6527f3bca2a", "committedDate": "2020-07-14T10:05:37Z", "message": "Add GAV, identifier and type to ModelEvent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfa6637834178abd199b002a6672d6527f3bca2a", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cfa6637834178abd199b002a6672d6527f3bca2a", "committedDate": "2020-07-14T10:05:37Z", "message": "Add GAV, identifier and type to ModelEvent"}, "afterCommit": {"oid": "b653a404a78648a99fc86537cf32a64d602227dd", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b653a404a78648a99fc86537cf32a64d602227dd", "committedDate": "2020-07-14T10:14:13Z", "message": "Add GAV, identifier and type to ModelEvent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b653a404a78648a99fc86537cf32a64d602227dd", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b653a404a78648a99fc86537cf32a64d602227dd", "committedDate": "2020-07-14T10:14:13Z", "message": "Add GAV, identifier and type to ModelEvent"}, "afterCommit": {"oid": "558dc2ec3dd61ab1ba49708af3cf8223ebbdb4be", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/558dc2ec3dd61ab1ba49708af3cf8223ebbdb4be", "committedDate": "2020-07-20T15:55:58Z", "message": "FAI-215: Model definition endpoint - preliminary work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "558dc2ec3dd61ab1ba49708af3cf8223ebbdb4be", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/558dc2ec3dd61ab1ba49708af3cf8223ebbdb4be", "committedDate": "2020-07-20T15:55:58Z", "message": "FAI-215: Model definition endpoint - preliminary work"}, "afterCommit": {"oid": "7c94f6e2959743fc26accc0c85da45884bd7d4a8", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7c94f6e2959743fc26accc0c85da45884bd7d4a8", "committedDate": "2020-07-20T21:01:13Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c94f6e2959743fc26accc0c85da45884bd7d4a8", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7c94f6e2959743fc26accc0c85da45884bd7d4a8", "committedDate": "2020-07-20T21:01:13Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}, "afterCommit": {"oid": "176a11a8d5980fd2d690fd27835830d39ecd2465", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/176a11a8d5980fd2d690fd27835830d39ecd2465", "committedDate": "2020-07-20T21:12:58Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "176a11a8d5980fd2d690fd27835830d39ecd2465", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/176a11a8d5980fd2d690fd27835830d39ecd2465", "committedDate": "2020-07-20T21:12:58Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}, "afterCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/564cff01e167f8597c98e1a83f034b65124530e3", "committedDate": "2020-07-21T21:03:38Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTUyODIz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-453552823", "createdAt": "2020-07-22T17:54:12Z", "commit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDoxM1rOG1twbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNTowNlrOG1ylPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzM4OQ==", "bodyText": "logger?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458977389", "createdAt": "2020-07-22T17:54:13Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzY1OA==", "bodyText": "logger?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458977658", "createdAt": "2020-07-22T17:54:39Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3OTA2Ng==", "bodyText": "just a minor question: what about moving these internal classes to separated files?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458979066", "createdAt": "2020-07-22T17:57:00Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDkzNQ==", "bodyText": "minor question: what about moving it to a separated file?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458980935", "createdAt": "2020-07-22T18:00:06Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.decision.DecisionModelType;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    private final GAV gav;\n+\n+    private final String name;\n+\n+    private final String namespace;\n+\n+    private final String identifier;\n+\n+    private final DecisionModelType type;\n+\n+    private final String definition;\n+\n+    public static class GAV {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NjQ0NA==", "bodyText": "Add TODO comment with jira ticket?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459056444", "createdAt": "2020-07-22T20:15:06Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -100,27 +91,91 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n             }\n         }\n+\n         if (addonsConfig.useTracing()) {\n-            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n-                    .map(x -> x.getVariable(0))\n-                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n-            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+            setupResourcesVariable(typeDeclaration);\n+            setupExecIdSupplierVariable(typeDeclaration);\n         }\n         return typeDeclaration;\n     }\n \n-    private MethodCallExpr getReadResourceMethod( ClassOrInterfaceType applicationClass, DMNResource resource ) {\n-        String source = resource.getDmnModel().getResource().getSourcePath();\n-        if (resource.getPath().toString().endsWith( \".jar\" )) {\n-            return new MethodCallExpr(\n-                      new MethodCallExpr( new NameExpr( IoUtils.class.getCanonicalName() + \".class\" ), \"getClassLoader\" ),\n-                    \"getResourceAsStream\").addArgument(new StringLiteralExpr(source));\n+    private void setupResourcesVariable(ClassOrInterfaceDeclaration typeDeclaration) {\n+        List<MethodDeclaration> getResourcesMethods = typeDeclaration.getMethodsBySignature(\"getResources\");\n+        if (getResourcesMethods.size() != 1) {\n+            throw (new RuntimeException(\"A \\\"getResourcePaths()\\\" method was not found in \" + TEMPLATE_JAVA));\n         }\n-        \n+        MethodDeclaration getResourcesMethod = getResourcesMethods.get(0);\n+        getResourcesMethod.getBody().ifPresent(body -> {\n+            VariableDeclarator variable = getResourcesMethod.findFirst(VariableDeclarator.class)\n+                    .orElseThrow(() -> new RuntimeException(\"Can't find a variable declaration in the \\\"getResourcePaths()\\\" method.\"));\n+            for (DMNResource resource : resources) {\n+                MethodCallExpr add = new MethodCallExpr(variable.getNameAsExpression(), \"add\");\n+                if (resource.getPath().toString().endsWith(\".jar\")) {\n+                    add.addArgument(newObject(DecisionModelJarResource.class,\n+                                              mockGAV(),\n+                                              new StringLiteralExpr(getDecisionModelJarResourcePath(resource)),\n+                                              new StringLiteralExpr(resource.getDmnModel().getNamespace()),\n+                                              new StringLiteralExpr(resource.getDmnModel().getName()),\n+                                              makeDMNIdentifier(resource),\n+                                              makeDMNType()));\n+                } else {\n+                    ClassOrInterfaceType applicationClass = StaticJavaParser.parseClassOrInterfaceType(applicationCanonicalName);\n+                    add.addArgument(newObject(DecisionModelRelativeResource.class,\n+                                              mockGAV(),\n+                                              new StringLiteralExpr(getDecisionModelRelativeResourcePath(resource)),\n+                                              new StringLiteralExpr(resource.getDmnModel().getNamespace()),\n+                                              new StringLiteralExpr(resource.getDmnModel().getName()),\n+                                              makeDMNIdentifier(resource),\n+                                              makeDMNType(),\n+                                              new FieldAccessExpr(applicationClass.getNameAsExpression(), \"class\")));\n+                }\n+                body.addStatement(body.getStatements().size() - 1, add);\n+            }\n+        });\n+    }\n+\n+    private ObjectCreationExpr mockGAV() {\n+        return newObject(GAV.class,\n+                         new StringLiteralExpr(\"dummy\"),\n+                         new StringLiteralExpr(\"dummy\"),\n+                         new StringLiteralExpr(\"0.0\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODc5MzI0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-453879324", "createdAt": "2020-07-23T07:06:27Z", "commit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowNjo0MlrOG1-iSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0NTowM1rOG2LNcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MjI5Ng==", "bodyText": "Why Async?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459252296", "createdAt": "2020-07-23T07:06:42Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.model.ModelEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootModelEventEmitter implements EventEmitter {\n+\n+    private final Application application;\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootModelEventEmitter(final Application application,\n+                                       final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName) {\n+        this.application = application;\n+        this.template = template;\n+        this.kafkaTopicName = kafkaTopicName;\n+    }\n+\n+    @Async", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NTkxNw==", "bodyText": "I know this should not happen but what about throw an exception if body is not available (for example if the template has been changed)? Otherwise the code will just skip the logic", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459255917", "createdAt": "2020-07-23T07:15:42Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -100,27 +91,91 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n             }\n         }\n+\n         if (addonsConfig.useTracing()) {\n-            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n-                    .map(x -> x.getVariable(0))\n-                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n-            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+            setupResourcesVariable(typeDeclaration);\n+            setupExecIdSupplierVariable(typeDeclaration);\n         }\n         return typeDeclaration;\n     }\n \n-    private MethodCallExpr getReadResourceMethod( ClassOrInterfaceType applicationClass, DMNResource resource ) {\n-        String source = resource.getDmnModel().getResource().getSourcePath();\n-        if (resource.getPath().toString().endsWith( \".jar\" )) {\n-            return new MethodCallExpr(\n-                      new MethodCallExpr( new NameExpr( IoUtils.class.getCanonicalName() + \".class\" ), \"getClassLoader\" ),\n-                    \"getResourceAsStream\").addArgument(new StringLiteralExpr(source));\n+    private void setupResourcesVariable(ClassOrInterfaceDeclaration typeDeclaration) {\n+        List<MethodDeclaration> getResourcesMethods = typeDeclaration.getMethodsBySignature(\"getResources\");\n+        if (getResourcesMethods.size() != 1) {\n+            throw (new RuntimeException(\"A \\\"getResourcePaths()\\\" method was not found in \" + TEMPLATE_JAVA));\n         }\n-        \n+        MethodDeclaration getResourcesMethod = getResourcesMethods.get(0);\n+        getResourcesMethod.getBody().ifPresent(body -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODc1Mw==", "bodyText": "This interface is not supposed to be used by users so what about move it to kogito-internal?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459258753", "createdAt": "2020-07-23T07:21:57Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODkwMw==", "bodyText": "What about move this class to kogito-dmn?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459258903", "createdAt": "2020-07-23T07:22:16Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1OTk1NA==", "bodyText": "I don't think we should expose this list in the public api. I'm thinking to hide the logic inside the codegenerated implementation of this interface:\n\nyou already generate the list to be returned\nif tracing is enable\ninject EventEmitter\nmove there @PostConstruct method (publishDecisionModels)\nadd @Startup annotation\n\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459459954", "createdAt": "2020-07-23T13:45:03Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            return sb.toString();\n+        }\n+    }\n+\n+    List<DecisionModelResource> resources();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 111}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/564cff01e167f8597c98e1a83f034b65124530e3", "committedDate": "2020-07-21T21:03:38Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}, "afterCommit": {"oid": "4f00b419ee0efb0f6793038965b6378e648fb125", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f00b419ee0efb0f6793038965b6378e648fb125", "committedDate": "2020-07-27T08:59:24Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d90883767f517ceb8bfbcc389759150b9fad2fe", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5d90883767f517ceb8bfbcc389759150b9fad2fe", "committedDate": "2020-07-28T07:30:47Z", "message": "WIP..."}, "afterCommit": {"oid": "d65ec4c025cd7557fb26e2577a1c2349fb6bd95b", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d65ec4c025cd7557fb26e2577a1c2349fb6bd95b", "committedDate": "2020-07-28T08:52:47Z", "message": "Updates following peer review."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d65ec4c025cd7557fb26e2577a1c2349fb6bd95b", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d65ec4c025cd7557fb26e2577a1c2349fb6bd95b", "committedDate": "2020-07-28T08:52:47Z", "message": "Updates following peer review."}, "afterCommit": {"oid": "8ece0114945187fa8fec3f4f3cd0f4a63453d5ec", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8ece0114945187fa8fec3f4f3cd0f4a63453d5ec", "committedDate": "2020-07-28T09:51:16Z", "message": "Updates following peer review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTMyMzkz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-456532393", "createdAt": "2020-07-28T11:14:26Z", "commit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTU1MTMx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-456555131", "createdAt": "2020-07-28T11:51:07Z", "commit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTU0MjU1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-456554255", "createdAt": "2020-07-28T11:49:40Z", "commit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo0OTo0MFrOG4I8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1Mzo1NlrOG4JD9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxOTkyOA==", "bodyText": "@manstis\nDo you plan to implement more decision types? Does this make sense with the only one option?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461519928", "createdAt": "2020-07-28T11:49:40Z", "author": {"login": "jiripetrlik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModelType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.decision;\n+\n+public enum DecisionModelType {\n+\n+    DMN(\"dmn\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDExMg==", "bodyText": "Remove empty line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461520112", "createdAt": "2020-07-28T11:50:03Z", "author": {"login": "jiripetrlik"}, "path": "api/kogito-internal/src/main/java/org/kie/internal/decision/DecisionModelResourcesProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.internal.decision;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public interface DecisionModelResourcesProvider extends Supplier<List<DecisionModelResource>> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDgwMw==", "bodyText": "Please rethrow this exception. It would be good to propagate exception details further and not log only log it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461520803", "createdAt": "2020-07-28T11:51:30Z", "author": {"login": "jiripetrlik"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.kie.api.management.GAV;\n+import org.kie.internal.decision.DecisionModelResource;\n+import org.kie.kogito.decision.DecisionModelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BaseDecisionModelResource.class);\n+\n+    protected final GAV gav;\n+    protected final String path;\n+    protected final String namespace;\n+    protected final String modelName;\n+    protected final String identifier;\n+    protected final DecisionModelType type;\n+\n+    protected BaseDecisionModelResource(GAV gav,\n+                                        String path,\n+                                        String namespace,\n+                                        String modelName,\n+                                        String identifier,\n+                                        DecisionModelType type) {\n+        this.gav = gav;\n+        this.path = path;\n+        this.namespace = namespace;\n+        this.modelName = modelName;\n+        this.identifier = identifier;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public GAV getGav() {\n+        return gav;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public DecisionModelType getModelType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String get() {\n+        try (InputStream is = getInputStream()) {\n+            return load(is);\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDg5Mw==", "bodyText": "Again please rethrow.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461520893", "createdAt": "2020-07-28T11:51:42Z", "author": {"login": "jiripetrlik"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.kie.api.management.GAV;\n+import org.kie.internal.decision.DecisionModelResource;\n+import org.kie.kogito.decision.DecisionModelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BaseDecisionModelResource.class);\n+\n+    protected final GAV gav;\n+    protected final String path;\n+    protected final String namespace;\n+    protected final String modelName;\n+    protected final String identifier;\n+    protected final DecisionModelType type;\n+\n+    protected BaseDecisionModelResource(GAV gav,\n+                                        String path,\n+                                        String namespace,\n+                                        String modelName,\n+                                        String identifier,\n+                                        DecisionModelType type) {\n+        this.gav = gav;\n+        this.path = path;\n+        this.namespace = namespace;\n+        this.modelName = modelName;\n+        this.identifier = identifier;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public GAV getGav() {\n+        return gav;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public DecisionModelType getModelType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String get() {\n+        try (InputStream is = getInputStream()) {\n+            return load(is);\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());\n+        }\n+        throw new RuntimeException(\"Failed to get model\");\n+    }\n+\n+    private String load(InputStream is) {\n+        StringBuilder sb = new StringBuilder();\n+        try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+             BufferedReader reader = new BufferedReader(isr)) {\n+            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                sb.append(line).append(\"\\n\");\n+            }\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTgzMg==", "bodyText": "Please split this line to make file more readable.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461521832", "createdAt": "2020-07-28T11:53:46Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.decision;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionModelResourcesProviderCodegenTest {\n+\n+    @Test\n+    public void generateDecisionModelResourcesProvider() throws Exception {\n+\n+        final GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n+\n+        final DecisionCodegen codeGenerator = DecisionCodegen.ofPath(Paths.get(\"src/test/resources/decision/models/vacationDays\").toAbsolutePath()).withAddons(new AddonsConfig().withTracing(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTkwOA==", "bodyText": "Please split.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461521908", "createdAt": "2020-07-28T11:53:56Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.decision;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionModelResourcesProviderCodegenTest {\n+\n+    @Test\n+    public void generateDecisionModelResourcesProvider() throws Exception {\n+\n+        final GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n+\n+        final DecisionCodegen codeGenerator = DecisionCodegen.ofPath(Paths.get(\"src/test/resources/decision/models/vacationDays\").toAbsolutePath()).withAddons(new AddonsConfig().withTracing(true));\n+        codeGenerator.setContext(context);\n+\n+        final List<GeneratedFile> generatedFiles = codeGenerator.generate();\n+        assertEquals(2, generatedFiles.size());\n+\n+        //A Rest endpoint is always generated per model.\n+        assertEquals(GeneratedFile.Type.REST, generatedFiles.get(0).getType());\n+        assertEquals(\"decision/VacationsResource.java\", generatedFiles.get(0).relativePath());\n+\n+        assertEquals(GeneratedFile.Type.CLASS, generatedFiles.get(1).getType());\n+        assertEquals(\"org/kie/kogito/app/DecisionModelResourcesProvider.java\", generatedFiles.get(1).relativePath());\n+\n+        final CompilationUnit compilationUnit = parse(new ByteArrayInputStream(generatedFiles.get(1).contents()));\n+\n+        final ClassOrInterfaceDeclaration classDeclaration = compilationUnit\n+                .findFirst(ClassOrInterfaceDeclaration.class)\n+                .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n+\n+        assertNotNull(classDeclaration);\n+\n+        final MethodDeclaration methodDeclaration = classDeclaration.findAll(MethodDeclaration.class, d -> d.getName().getIdentifier().equals(\"getResources\")).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDI1NjM0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#pullrequestreview-457425634", "createdAt": "2020-07-29T11:19:40Z", "commit": {"oid": "b0cf2daba258a110bdad0ad599dd26975db99e1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bbb98ad4c68d55c01126a18e0b19a3e05d333e4", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2bbb98ad4c68d55c01126a18e0b19a3e05d333e4", "committedDate": "2020-07-29T11:32:53Z", "message": "FAI-215: Model definition endpoint - ModelEvent publication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818df969589c9548b279ca57403bd555ecd0b30c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/818df969589c9548b279ca57403bd555ecd0b30c", "committedDate": "2020-07-29T11:33:15Z", "message": "Updates following peer review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "585f2a7458f382f028979a35ce805f9752981bbe", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/585f2a7458f382f028979a35ce805f9752981bbe", "committedDate": "2020-07-29T11:33:15Z", "message": "Fix major SonarCloud issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96092a4368a284d32c54576f1a7a6f77bd69bc8c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/96092a4368a284d32c54576f1a7a6f77bd69bc8c", "committedDate": "2020-07-29T11:33:15Z", "message": "Updates following QE peer review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0cf2daba258a110bdad0ad599dd26975db99e1f", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b0cf2daba258a110bdad0ad599dd26975db99e1f", "committedDate": "2020-07-28T14:51:01Z", "message": "Updates following QE peer review"}, "afterCommit": {"oid": "96092a4368a284d32c54576f1a7a6f77bd69bc8c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/96092a4368a284d32c54576f1a7a6f77bd69bc8c", "committedDate": "2020-07-29T11:33:15Z", "message": "Updates following QE peer review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4226, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}