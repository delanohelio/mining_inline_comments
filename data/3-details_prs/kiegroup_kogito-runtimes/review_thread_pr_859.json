{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMTQ5NzM2", "number": 859, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODowODowM1rOE3GvGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyMTo1NFrOE8rQhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjE3NDk3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODowODowM1rOHwQbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODowODowM1rOHwQbTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2MjgzMQ==", "bodyText": "Micrometer supports dynamic labels (i.e. we see a new process_id every time and a new measurement is created every time ), but it's somehow hidden by the api: we have to create the object every time and if a Counter with the same name and tags already exists, then the existing one is returned (see micrometer-metrics/micrometer#535 (comment)) .", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520362831", "createdAt": "2020-11-10T08:08:03Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.process;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.Tag;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.jbpm.workflow.instance.node.WorkItemNodeInstance;\n+import org.kie.api.event.process.DefaultProcessEventListener;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.kogito.monitoring.core.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ProcessEventListener extends DefaultProcessEventListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessEventListener.class);\n+    private static Map<String, AtomicInteger> gaugeMap = new HashMap<String, AtomicInteger>();\n+    private String identifier;\n+\n+    public ProcessEventListener(String identifier) {\n+        this.identifier = identifier;\n+    }\n+\n+    private static Counter getNumberOfProcessInstancesStartedCounter(String appId, String processId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde3bcf05d22a32fd1f5c18675cd12f450492334"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQxOTYyOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDowOFrOHwSvsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDowOFrOHwSvsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMDgxOA==", "bodyText": "This file is not new..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520400818", "createdAt": "2020-11-10T09:10:08Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c3ecbafce011c4dd3ceba67826dac0a48e199d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyMTY1OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/rule/RuleMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDozOFrOHwSw_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDozOFrOHwSw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTE1MA==", "bodyText": "This file is not new..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520401150", "createdAt": "2020-11-10T09:10:38Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/rule/RuleMetrics.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c3ecbafce011c4dd3ceba67826dac0a48e199d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyMjUyOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/SystemMetricsCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDo0OVrOHwSxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDo0OVrOHwSxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTI3OA==", "bodyText": "This file is not new..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520401278", "createdAt": "2020-11-10T09:10:49Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c3ecbafce011c4dd3ceba67826dac0a48e199d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyMzI5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/dmnhandlers/BooleanHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMTowMFrOHwSx-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMTowMFrOHwSx-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTQwMQ==", "bodyText": "This file is not new..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520401401", "createdAt": "2020-11-10T09:11:00Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/dmnhandlers/BooleanHandler.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c3ecbafce011c4dd3ceba67826dac0a48e199d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyNDUyOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/dmnhandlers/StringHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMToxOFrOHwSyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMToxOFrOHwSyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTYwMw==", "bodyText": "This file is not new..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520401603", "createdAt": "2020-11-10T09:11:18Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/dmnhandlers/StringHandler.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c3ecbafce011c4dd3ceba67826dac0a48e199d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjQyNTI4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/dmnhandlers/TypeHandlerWithSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMToyOVrOHwSzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMToyOVrOHwSzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTcxMw==", "bodyText": "This file is not new..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r520401713", "createdAt": "2020-11-10T09:11:29Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/system/metrics/dmnhandlers/TypeHandlerWithSummary.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c3ecbafce011c4dd3ceba67826dac0a48e199d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjM1NjE3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-prometheus-addon/.gitignore", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjoxNDoyNVrOHw46RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjoxNDoyNVrOHw46RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAyNjExNg==", "bodyText": "@r00ta we probably dont even need this file as the one the root level of the project should be enough.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r521026116", "createdAt": "2020-11-11T02:14:25Z", "author": {"login": "cristianonicolai"}, "path": "addons/monitoring-addon/monitoring-prometheus-addon/.gitignore", "diffHunk": "@@ -2,7 +2,7 @@\n /local\n \n # Eclipse, Netbeans and IntelliJ files\n-/.*\n+/.gitignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426bf4091613e122a89cdd9b215688079f17a9c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjM3NzUyOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjoxOTo0N1rOHw5H3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjoxOTo0N1rOHw5H3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAyOTU5OA==", "bodyText": "@r00ta could you avoid this inline add for the creation of the list? I would suggest maybe using Arrays.asList instead.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r521029598", "createdAt": "2020-11-11T02:19:47Z", "author": {"login": "cristianonicolai"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.process;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.Tag;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.jbpm.workflow.instance.node.WorkItemNodeInstance;\n+import org.kie.api.event.process.DefaultProcessEventListener;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.kogito.monitoring.core.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ProcessEventListener extends DefaultProcessEventListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessEventListener.class);\n+    private static Map<String, AtomicInteger> gaugeMap = new HashMap<String, AtomicInteger>();\n+    private String identifier;\n+\n+    public ProcessEventListener(String identifier) {\n+        this.identifier = identifier;\n+    }\n+\n+    private static Counter getNumberOfProcessInstancesStartedCounter(String appId, String processId) {\n+        List<Tag> tags = new ArrayList<Tag>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426bf4091613e122a89cdd9b215688079f17a9c9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzcxOTc5OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToxMTo0M1rOHx_WjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjowMTo0MFrOHyQCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4MDIzNg==", "bodyText": "Why this change?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r522180236", "createdAt": "2020-11-12T15:11:43Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -236,7 +236,8 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         }\n \n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n-        boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n+        boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\") ||\n+                hasClassOnClasspath(project, \"org.kie.kogito.monitoring.core.MonitoringRegistry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31cc5f226da469b0cb14d3c44ef3a3ee1334c1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0Nzc4Mw==", "bodyText": "Hi @danielezonca , now the user has two options:\n\nUse the monitoring-prometheus-addon\nUse the monitoring-core addon so to plug another micrometer meter registry\n\nWe'd like to enable the monitoring if any of these modules are used by the user, that's why we do this change.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r522447783", "createdAt": "2020-11-12T21:49:50Z", "author": {"login": "r00ta"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -236,7 +236,8 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         }\n \n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n-        boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n+        boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\") ||\n+                hasClassOnClasspath(project, \"org.kie.kogito.monitoring.core.MonitoringRegistry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4MDIzNg=="}, "originalCommit": {"oid": "a31cc5f226da469b0cb14d3c44ef3a3ee1334c1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1MzYyNg==", "bodyText": "I've just realized that the other important topic is that currently the queries in the grafana dashboards we generate are prometheus specific, so I think we should generate them only of the prometheus addon is enabled.\nI'll implement this change tomorrow.\nExtending the generation to grafana dashboards specific for each type of data source needs a quite big refactoring, and it's something that we have to discuss in case we want to go into that direction.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r522453626", "createdAt": "2020-11-12T22:01:40Z", "author": {"login": "r00ta"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -236,7 +236,8 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         }\n \n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n-        boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n+        boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\") ||\n+                hasClassOnClasspath(project, \"org.kie.kogito.monitoring.core.MonitoringRegistry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4MDIzNg=="}, "originalCommit": {"oid": "a31cc5f226da469b0cb14d3c44ef3a3ee1334c1c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzcwOTQ5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AddonsConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOToxNzozNFrOHymkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDoyODoyM1rOHyo8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyMjY3Nw==", "bodyText": "Let's name it withDashboardGeneration or similar, the fact that now we generate dashboards only if Prometheus is available is an impl detail", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r522822677", "createdAt": "2020-11-13T09:17:34Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AddonsConfig.java", "diffHunk": "@@ -21,12 +21,14 @@\n             .withPersistence(false)\n             .withTracing(false)\n             .withMonitoring(false)\n+            .withPrometheusMonitoring(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0acb83c8aa56b12c43ee6494fc5e60cce09f3c85"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MTY3OQ==", "bodyText": "I think it can be a bit misleading since we turn on this option if the prometheus module is included in the classpath. Unless we change how we activate this option (with a property.. or something else), I think we should keep it like this (and change it in the future if we will generate grafana dashboards for other data sources)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r522861679", "createdAt": "2020-11-13T10:28:23Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AddonsConfig.java", "diffHunk": "@@ -21,12 +21,14 @@\n             .withPersistence(false)\n             .withTracing(false)\n             .withMonitoring(false)\n+            .withPrometheusMonitoring(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyMjY3Nw=="}, "originalCommit": {"oid": "0acb83c8aa56b12c43ee6494fc5e60cce09f3c85"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDI2MzkxOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/rule/RuleMetricsDroolsListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyNjoyMFrOH45B8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyNjoyMFrOH45B8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxNjY4OQ==", "bodyText": "Why not to name it just RuleMetricListener. Because right now we have both Rule and Drools in the name, seems unnecessary.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r529416689", "createdAt": "2020-11-24T10:26:20Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/rule/RuleMetricsDroolsListener.java", "diffHunk": "@@ -25,12 +23,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class PrometheusMetricsDroolsListener extends DefaultAgendaEventListener {\n+public class RuleMetricsDroolsListener extends DefaultAgendaEventListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ccd96fb831ed5992c56d5ba145c08c9965b8bd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU2OTg3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/test/java/org/kie/kogito/monitoring/core/integration/DaysAndTimeDurationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxNzowMlrOH48IyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxNzowMlrOH48IyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2NzU5Mw==", "bodyText": "Expected value no longer used.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r529467593", "createdAt": "2020-11-24T11:17:02Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/src/test/java/org/kie/kogito/monitoring/core/integration/DaysAndTimeDurationHandlerTest.java", "diffHunk": "@@ -44,14 +45,12 @@ public void givenDurationMetricsWhenMetricsAreStoredThenTheQuantilesAreCorrect()\n         // Arrange\n         Integer expectedValue = 10000;\n         Duration duration = Duration.ofMillis(expectedValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ccd96fb831ed5992c56d5ba145c08c9965b8bd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU3Mzk5OnYy", "diffSide": "LEFT", "path": "addons/monitoring-addon/monitoring-core/src/test/java/org/kie/kogito/monitoring/core/integration/LocalDateHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxODowOVrOH48LSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxODowOVrOH48LSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2ODIzNA==", "bodyText": "Same here, the old expected values are not used.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r529468234", "createdAt": "2020-11-24T11:18:09Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/src/test/java/org/kie/kogito/monitoring/core/integration/LocalDateHandlerTest.java", "diffHunk": "@@ -50,9 +50,9 @@ public void givenLocalDateMetricsWhenMetricsAreStoredThenTheQuantilesAreCorrect(\n         // Act\n         handler.record(\"decision\", ENDPOINT_NAME, now);\n \n+\n         // Assert\n-        for (Double key : quantiles) {\n-            assertEquals(expectedValue, getQuantile(\"decision\", ENDPOINT_NAME + DecisionConstants.DECISIONS_NAME_SUFFIX, ENDPOINT_NAME, key), 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ccd96fb831ed5992c56d5ba145c08c9965b8bd"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU3NDY1OnYy", "diffSide": "LEFT", "path": "addons/monitoring-addon/monitoring-core/src/test/java/org/kie/kogito/monitoring/core/integration/LocalDateTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxODoxOVrOH48LsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToxODoxOVrOH48LsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ2ODMzNw==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r529468337", "createdAt": "2020-11-24T11:18:19Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/src/test/java/org/kie/kogito/monitoring/core/integration/LocalDateTimeHandlerTest.java", "diffHunk": "@@ -51,8 +51,7 @@ public void givenLocalDateTimeMetricsWhenMetricsAreStoredThenTheQuantilesAreCorr\n         handler.record(\"decision\", ENDPOINT_NAME, now);\n \n         // Assert\n-        for (Double key : quantiles) {\n-            assertEquals(expectedValue, getQuantile(\"decision\", ENDPOINT_NAME + DecisionConstants.DECISIONS_NAME_SUFFIX, ENDPOINT_NAME, key), 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ccd96fb831ed5992c56d5ba145c08c9965b8bd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDU4NzU3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyMTo1NFrOH48TvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyMTo1NFrOH48TvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MDM5Nw==", "bodyText": "Maybe it would be good to name it MetricsProcessEventListener or similar so it is easier to identify?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/859#discussion_r529470397", "createdAt": "2020-11-24T11:21:54Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/src/main/java/org/kie/kogito/monitoring/core/process/ProcessEventListener.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.process;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.Tag;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.jbpm.workflow.instance.node.WorkItemNodeInstance;\n+import org.kie.api.event.process.DefaultProcessEventListener;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.kogito.monitoring.core.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ProcessEventListener extends DefaultProcessEventListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07ccd96fb831ed5992c56d5ba145c08c9965b8bd"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4665, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}