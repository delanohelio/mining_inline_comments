{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MjQwMzM3", "number": 804, "title": "KOGITO-3540 DMN wire DT static analysis to Kogito Codegen", "bodyText": "https://issues.redhat.com/browse/KOGITO-3540\nRequires downstream PRs:\n\nkiegroup/kogito-examples#379\n\nDEMO\nby making a synthetic DMN basic model with 1 Decision Table with 1 Gap:\n\nwith Quarkus extension:\n\nwith SpringBoot maven plugin:", "createdAt": "2020-10-03T08:34:51Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804", "merged": true, "mergeCommit": {"oid": "989cadb6c448c2af37107400a1e5ec45bb100b6f"}, "closed": true, "closedAt": "2020-10-05T14:09:30Z", "author": {"login": "tarilabs"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPfyqzAFqTUwMTg0MjY0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPkYEJAFqTUwMjA5NDU1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxODQyNjQ3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#pullrequestreview-501842647", "createdAt": "2020-10-05T08:48:30Z", "commit": {"oid": "c3dce5303d4c26cfbc1d020e3dbfd5bc65625bc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxODY0ODIz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#pullrequestreview-501864823", "createdAt": "2020-10-05T09:16:13Z", "commit": {"oid": "c3dce5303d4c26cfbc1d020e3dbfd5bc65625bc0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxNjoxM1rOHcUS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo1Mjo0MVrOHcVskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NDY4Mw==", "bodyText": "What about rename the method to something more explicit like loadModelsAndValidate / loadAndValidate / parseModelsAndValidate?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#discussion_r499454683", "createdAt": "2020-10-05T09:16:13Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -102,11 +102,15 @@ public DecisionCodegen(List<CollectedResource> cResources) {\n \n     private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3dce5303d4c26cfbc1d020e3dbfd5bc65625bc0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NzY1MQ==", "bodyText": "What about rename it to something like extractMsgPrefix / getMsgPrefix or similar?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#discussion_r499477651", "createdAt": "2020-10-05T09:52:41Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionValidation.java", "diffHunk": "@@ -71,21 +82,21 @@ static void dmnValidateResources(GeneratorContext context, Collection<Resource>\n                                                                                            .map(DecisionValidation::resourceToReader)\n                                                                                            .collect(Collectors.toList())\n                                                                                            .toArray(new Reader[]{}));\n-        logValidationMessages(schemaModelValidations);\n-        List<DMNMessage> errors = schemaModelValidations.stream().filter(m -> m.getLevel() == Level.ERROR).collect(Collectors.toList());\n-        if (!errors.isEmpty()) {\n-            if (validateOption != ValidationOption.IGNORE) {\n-                StringBuilder sb = new StringBuilder(\"DMN Validation schema and model validation contained errors\").append(\"\\n\");\n-                sb.append(\"You may configure \").append(DecisionCodegen.VALIDATION_CONFIGURATION_KEY).append(\"=IGNORE to ignore validation errors\").append(\"\\n\");\n-                sb.append(\"DMN Validation errors:\").append(\"\\n\");\n-                sb.append(errors.stream().map(DMNMessage::getMessage).collect(Collectors.joining(\",\\n\")));\n-                LOG.error(sb.toString());\n-                throw new RuntimeException(sb.toString());\n-            } else {\n-                LOG.warn(\"DMN Validation encountered errors but validation configuration was set to IGNORE, continuing with no blocking error.\");\n-                return;\n+        logValidationMessages(schemaModelValidations, DecisionValidation::validateMsgPrefixer, DMNMessage::getText);\n+        processMessagesHandleErrors(validateOption, schemaModelValidations);\n+    }\n+\n+    private static String validateMsgPrefixer(DMNMessage msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3dce5303d4c26cfbc1d020e3dbfd5bc65625bc0"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc349ac0ef90978ec8639a2093bd9cb38e460d34", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc349ac0ef90978ec8639a2093bd9cb38e460d34", "committedDate": "2020-10-05T11:43:47Z", "message": "KOGITO-3540 DMN wire DT static analysis to Kogito Codegen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33db5498115e52ff5ffb569344eca2d4e90febed", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/33db5498115e52ff5ffb569344eca2d4e90febed", "committedDate": "2020-10-05T11:43:48Z", "message": "better handling of DT errors\n\nwhen codegen/validation is called as part of a non interactive build,\nalso DT errors are displayed as part of the exception thrown."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01d51e34da40a9ebc8de42369cdc6564f970a511", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/01d51e34da40a9ebc8de42369cdc6564f970a511", "committedDate": "2020-10-05T11:43:48Z", "message": "improve sonarcloud score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "committedDate": "2020-10-05T11:43:49Z", "message": "implement codereview feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed89d2a96e71ec0d64c1d2f733cfcd1ff48c4767", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ed89d2a96e71ec0d64c1d2f733cfcd1ff48c4767", "committedDate": "2020-10-05T09:57:35Z", "message": "implement codereview feedback"}, "afterCommit": {"oid": "d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "author": {"user": {"login": "tarilabs", "name": "Matteo Mortari"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe", "committedDate": "2020-10-05T11:43:49Z", "message": "implement codereview feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDk0NTUy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/804#pullrequestreview-502094552", "createdAt": "2020-10-05T14:08:58Z", "commit": {"oid": "d5f6ca8ea0d9c63c0ab1acb7d73b2dcb0cc7cbfe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3999, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}