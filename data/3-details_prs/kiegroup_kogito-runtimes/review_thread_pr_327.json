{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzE4NTI1", "number": 327, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNjoxOVrODiT5pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyM1rODpf3Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzA0MjMwOnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNjoxOVrOFtfIZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNjoxOVrOFtfIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MDI5NA==", "bodyText": "I think you were looking for computeIfAbsent method, the whole method becomes:\nhistograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n                (key, value) -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n                .labels(handler).observe(elapsedTime)\n\nSame for the other methods of this class", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383240294", "createdAt": "2020-02-24T12:36:19Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector implements IMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        Counter counter;\n+        if (!counters.containsKey(CountersTypesEnum.REQUESTS_STATUS_CODE)){\n+            counter = Counter.build().name(\"api_http_response_code\").help(\"Request status code.\").labelNames(\"handler\", \"identifier\").register();\n+            counters.put(CountersTypesEnum.REQUESTS_STATUS_CODE, counter);\n+        }\n+        else{\n+            counter = counters.get(CountersTypesEnum.REQUESTS_STATUS_CODE);\n+        }\n+\n+        counter.labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        Histogram hist;\n+        if (!histograms.containsKey(HistogramTypes.ELAPSED_TIME)){\n+            hist = HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"});\n+            histograms.put(HistogramTypes.ELAPSED_TIME, hist);\n+        }\n+        else{\n+            hist = histograms.get(HistogramTypes.ELAPSED_TIME);\n+        }\n+\n+        hist.labels(handler).observe(elapsedTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzA0NTc2OnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNzozN1rOFtfKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozNzozN1rOFtfKig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MDg0Mg==", "bodyText": "Please move all constant strings to a class of constants", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383240842", "createdAt": "2020-02-24T12:37:37Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector implements IMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        Counter counter;\n+        if (!counters.containsKey(CountersTypesEnum.REQUESTS_STATUS_CODE)){\n+            counter = Counter.build().name(\"api_http_response_code\").help(\"Request status code.\").labelNames(\"handler\", \"identifier\").register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzA0NzA2OnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/IMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozODoxMVrOFtfLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjozODoxMVrOFtfLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MTA2NA==", "bodyText": "Why do we need this marker interface?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383241064", "createdAt": "2020-02-24T12:38:11Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/IMetricsCollector.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+public interface IMetricsCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzI0NDMyOnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/DMNResultMetricsBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0MzoyMFrOFthAhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0MzoyMFrOFthAhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MTA0Nw==", "bodyText": "Please rename result to dmnResult and result1 to result", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383271047", "createdAt": "2020-02-24T13:43:20Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(String name){\n+        if (!counters.containsKey(name)){\n+            Counter tmp = Counter.build().name(name).help(\"Decision information\").labelNames(\"identifier\", \"handler\").register();\n+            counters.put(name, tmp);\n+        }\n+        return counters.get(name);\n+    }\n+\n+    public static void generateMetrics(String handler, DMNResult result){\n+        List<DMNDecisionResult> decisionResults = result.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults){\n+            Object result1 = decision.getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzI5NTMxOnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1ODo0MFrOFthfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1ODo0MFrOFthfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3ODk0Mg==", "bodyText": "Please use proper logger (debug level?)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383278942", "createdAt": "2020-02-24T13:58:40Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzMxMDc2OnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDowMjo1NVrOFthoZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTowNzo0MlrOFt9xTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MTI1Mw==", "bodyText": "Add a comment to explain this metric", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383281253", "createdAt": "2020-02-24T14:02:55Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());\n+        List<String> matchedUris = requestContext.getUriInfo().getMatchedURIs();\n+        if (matchedUris.size() != 0){\n+            SystemMetricsCollector.RegisterStatusCodeRequest(matchedUris.get(0), String.valueOf(responseContext.getStatusInfo().getStatusCode()));\n+        }\n+        else\n+        {\n+            SystemMetricsCollector.RegisterStatusCodeRequest(\"\", String.valueOf(responseContext.getStatusInfo().getStatusCode()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0MjI4Nw==", "bodyText": "This comment and the previous have been resolved", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383742287", "createdAt": "2020-02-25T09:07:42Z", "author": {"login": "r00ta"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());\n+        List<String> matchedUris = requestContext.getUriInfo().getMatchedURIs();\n+        if (matchedUris.size() != 0){\n+            SystemMetricsCollector.RegisterStatusCodeRequest(matchedUris.get(0), String.valueOf(responseContext.getStatusInfo().getStatusCode()));\n+        }\n+        else\n+        {\n+            SystemMetricsCollector.RegisterStatusCodeRequest(\"\", String.valueOf(responseContext.getStatusInfo().getStatusCode()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MTI1Mw=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDE5NTU4OnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo1NDozOVrOFtqGmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowODo1N1rOF0TSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng==", "bodyText": "I think we should not catch generic Exception in this way because we have no context at all (it could be related to a custom user method too)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383420056", "createdAt": "2020-02-24T17:54:39Z", "author": {"login": "danielezonca"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class PrometheusExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MTE4OQ==", "bodyText": "Fully agreed, furthermore why the class id called PrometheusExceptionMapper", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383481189", "createdAt": "2020-02-24T19:55:50Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class PrometheusExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NjMyNw==", "bodyText": "Resolved: now the exception handling/logging is managed directly in each endpoint (if the monitoring has been activated )", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r390386327", "createdAt": "2020-03-10T15:08:57Z", "author": {"login": "r00ta"}, "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class PrometheusExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI3MzY5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyMDoxN1rOFtq22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo0NToxNlrOFwbBUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA==", "bodyText": "This should be moved to a different location", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383432408", "createdAt": "2020-02-24T18:20:17Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.redhat.developer.IJGrafana;\n+import com.redhat.developer.JGrafana;\n+import com.redhat.developer.model.panel.PanelType;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    public static String readStandardDashboard(){\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\" );\n+        return new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    public static boolean generateDashboardForEndpoint(String handlerName, int id){\n+        String template = readStandardDashboard();\n+        template = template.replaceAll(\"\\\\$handlerName\\\\$\", handlerName);\n+        template = template.replaceAll(\"\\\\$id\\\\$\", String.valueOf(id));\n+        template = template.replaceAll(\"\\\\$uid\\\\$\", UUID.randomUUID().toString());\n+\n+        try {\n+            File file = new File(\"/tmp/dashboard-endpoint-\" + handlerName + \".json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyMzQyOQ==", "bodyText": "Thx for the comments! I will fix them today to turn this PR from draft to public, ready to be reviewed and merged afterwards", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383723429", "createdAt": "2020-02-25T08:30:42Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.redhat.developer.IJGrafana;\n+import com.redhat.developer.JGrafana;\n+import com.redhat.developer.model.panel.PanelType;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    public static String readStandardDashboard(){\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\" );\n+        return new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    public static boolean generateDashboardForEndpoint(String handlerName, int id){\n+        String template = readStandardDashboard();\n+        template = template.replaceAll(\"\\\\$handlerName\\\\$\", handlerName);\n+        template = template.replaceAll(\"\\\\$id\\\\$\", String.valueOf(id));\n+        template = template.replaceAll(\"\\\\$uid\\\\$\", UUID.randomUUID().toString());\n+\n+        try {\n+            File file = new File(\"/tmp/dashboard-endpoint-\" + handlerName + \".json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxODY3Mw==", "bodyText": "Resolved", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386318673", "createdAt": "2020-03-02T10:45:16Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.redhat.developer.IJGrafana;\n+import com.redhat.developer.JGrafana;\n+import com.redhat.developer.model.panel.PanelType;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    public static String readStandardDashboard(){\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\" );\n+        return new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    public static boolean generateDashboardForEndpoint(String handlerName, int id){\n+        String template = readStandardDashboard();\n+        template = template.replaceAll(\"\\\\$handlerName\\\\$\", handlerName);\n+        template = template.replaceAll(\"\\\\$id\\\\$\", String.valueOf(id));\n+        template = template.replaceAll(\"\\\\$uid\\\\$\", UUID.randomUUID().toString());\n+\n+        try {\n+            File file = new File(\"/tmp/dashboard-endpoint-\" + handlerName + \".json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDU3MDAxOnYy", "diffSide": "RIGHT", "path": "addons/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyNVrOFttukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MjoyNVrOFttukg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTQ0Mg==", "bodyText": "If this is going to be added to addons I\u2019d recommend to use addon as suffix of artefact id", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383479442", "createdAt": "2020-02-24T19:52:25Z", "author": {"login": "mswiderski"}, "path": "addons/pom.xml", "diffHunk": "@@ -18,6 +18,7 @@\n     <module>process-management-addon</module>\n     <module>jobs</module>\n     <module>predictions</module>\n+    <module>system-monitoring</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDU3MzU1OnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1MzozMVrOFttwww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozMDowM1rOF3WOSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDAwMw==", "bodyText": "Why is this needed? I means isn\u2019t microprofile metrics or spring boot actuator would give such system metrics out of the box?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383480003", "createdAt": "2020-02-24T19:53:31Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1ODk3OA==", "bodyText": "That's a good catch. Currently we are interested in two kind of metrics: operational metrics and domain specific metrics.\nFor the first one we will give a try at your suggestion, for the second we have to export some DMN/DRL specific metrics like the number of decisions that have been taken", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r384458978", "createdAt": "2020-02-26T12:24:21Z", "author": {"login": "r00ta"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDAwMw=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MDEwNw==", "bodyText": "We tested microprofile metrics and spring boot actuator and for sure they export cool information and they do it properly. However, different metrics are exported between microprofile and spring, and at the end there are only \"system metrics\". In addition to that, spring has a know issue opened 2 years ago that makes the feature almost useless for our purposes (the name of the endpoint can not be retrieved spring-projects/spring-boot#15390).\nWe decided that the developer can anyway use such libraries to monitor his endpoints, so we implemented the metrics we needed by ourselves, adding also domain specific metrics for DMN for example.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393580107", "createdAt": "2020-03-17T10:30:03Z", "author": {"login": "r00ta"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDAwMw=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDU3NTUzOnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1NDowOFrOFttx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MDo1MFrOFt-8wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDMxMg==", "bodyText": "Is this really needed? It makes this component useless in spring boot runtime...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383480312", "createdAt": "2020-02-24T19:54:08Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MTYwMg==", "bodyText": "Thx for the comments! It was not needed: fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383761602", "createdAt": "2020-02-25T09:40:50Z", "author": {"login": "r00ta"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDMxMg=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDU3Njc0OnYy", "diffSide": "RIGHT", "path": "addons/system-monitoring/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1NDozNVrOFttyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0MjoyN1rOFt_C-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDUyMQ==", "bodyText": "Is this DMN specific? If so why?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383480521", "createdAt": "2020-02-24T19:54:35Z", "author": {"login": "mswiderski"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MzE5Mw==", "bodyText": "Atm this module is implementing some logic to export some domain specific information about the DMN results: that's why we need this dependency", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383763193", "createdAt": "2020-02-25T09:42:27Z", "author": {"login": "r00ta"}, "path": "addons/system-monitoring/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>system-monitoring</artifactId>\n+  <name>System monitoring</name>\n+  <description>Monitoring system performances and status</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MDUyMQ=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDU5Mzk4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1OTo1NlrOFtt92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1ODo0N1rOFwXrnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MzM1Mg==", "bodyText": "Why this is even part of kogito codegen? Is this going to be used by runtime service? I mean the generated dashboard... sounds bit weird to me to have it as part of the runtime generation... I would see it more as separate maven plugin/goal.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383483352", "createdAt": "2020-02-24T19:59:56Z", "author": {"login": "mswiderski"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -132,5 +132,12 @@\n        <artifactId>javax.annotation-api</artifactId>\n        <scope>test</scope>\n      </dependency>\n+    <dependency>\n+        <groupId>com.redhat.developer</groupId>\n+        <artifactId>jgrafana</artifactId>\n+        <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2Mzk2NA==", "bodyText": "The idea is to generate a dashboard that is specific for the domain of the application. It means that we need some information available during the codegen (like the name of the handler, the types of decisions and so on). If we don't do that in the codegen, we would have to extract the info we need somehow from the generated application (like parsing the generated source code?). What was your original idea?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386263964", "createdAt": "2020-03-02T08:58:47Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -132,5 +132,12 @@\n        <artifactId>javax.annotation-api</artifactId>\n        <scope>test</scope>\n      </dependency>\n+    <dependency>\n+        <groupId>com.redhat.developer</groupId>\n+        <artifactId>jgrafana</artifactId>\n+        <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MzM1Mg=="}, "originalCommit": {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2NjcxOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNzoyNFrOFwVc5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo1MTo1M1rOFwXepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Counter GetCounter(){\n          \n          \n            \n                public static Counter getCounter(){\n          \n      \n    \n    \n  \n\nplease use lower case method names even for statics", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227428", "createdAt": "2020-03-02T07:17:24Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDY0NA==", "bodyText": "Thx for the catch! Resolved", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386260644", "createdAt": "2020-03-02T08:51:53Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzQyOA=="}, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2NzIzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNzo1MVrOFwVdNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNzo1MVrOFwVdNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterStatusCodeRequest(String handler, String statusCode){\n          \n          \n            \n                public static void registerStatusCodeRequest(String handler, String statusCode){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227508", "createdAt": "2020-03-02T07:17:51Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2NzUzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODowM1rOFwVdbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODowM1rOFwVdbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n          \n          \n            \n                public static void registerElapsedTimeSampleMetrics(String handler, double elapsedTime){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227564", "createdAt": "2020-03-02T07:18:03Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2Nzg4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODoxM1rOFwVdow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODoxM1rOFwVdow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterException(String handler, String stackTrace){\n          \n          \n            \n                public static void registerException(String handler, String stackTrace){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227619", "createdAt": "2020-03-02T07:18:13Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2ODE2OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODoyM1rOFwVd2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODoyM1rOFwVd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterProcessorsSample(int totalProcessors){\n          \n          \n            \n                public static void registerProcessorsSample(int totalProcessors){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227673", "createdAt": "2020-03-02T07:18:23Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){\n+        counters.computeIfAbsent(CountersTypesEnum.EXCEPTIONS,\n+                                 k -> Counter.build().name(MetricsConstants.EXCEPTIONS_NAME)\n+                                         .help(MetricsConstants.EXCEPTIONS_HELP)\n+                                         .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                .labels(handler, stackTrace).inc();\n+    }\n+\n+    public static void RegisterProcessorsSample(int totalProcessors){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2ODU4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODozM1rOFwVeEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxODozM1rOFwVeEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzczMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterSystemMemorySample(double totalMemory, double freeMemory) {\n          \n          \n            \n                public static void registerSystemMemorySample(double totalMemory, double freeMemory) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227731", "createdAt": "2020-03-02T07:18:33Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){\n+        counters.computeIfAbsent(CountersTypesEnum.EXCEPTIONS,\n+                                 k -> Counter.build().name(MetricsConstants.EXCEPTIONS_NAME)\n+                                         .help(MetricsConstants.EXCEPTIONS_HELP)\n+                                         .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                .labels(handler, stackTrace).inc();\n+    }\n+\n+    public static void RegisterProcessorsSample(int totalProcessors){\n+        gauges.computeIfAbsent(GaugeTypesEnum.PROCESSORS,\n+                               k -> Gauge.build().name(MetricsConstants.PROCESSORS_NAME)\n+                                       .help(MetricsConstants.PROCESSORS_HELP)\n+                                       .labelNames().register())\n+                               .labels().set(totalProcessors);\n+    }\n+\n+    public static void RegisterSystemMemorySample(double totalMemory, double freeMemory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAzNjgxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjowMFrOFwtwzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyNjowMlrOFwuDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTc0Mg==", "bodyText": "I would not encode this type information here, it's better at this time to use some kind of generic description like \"resource\". I feel like dashboard is too specific. In this case, the sub-path /dashboard/ is enough to distinguish the type of resource", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386625742", "createdAt": "2020-03-02T20:16:00Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -29,7 +29,8 @@\n         MODEL,\n         CLASS,\n         MESSAGE_CONSUMER,\n-        MESSAGE_PRODUCER;\n+        MESSAGE_PRODUCER,\n+        DASHBOARD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8582ddbbdd9576b559a24bc390c81a0c559ebe4a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMDUzNw==", "bodyText": "Resolved! atm I'm exporting the dashboards under /dashboards/ as you can see here \n  \n    \n      kogito-runtimes/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n    \n    \n         Line 150\n      in\n      8582ddb\n    \n    \n    \n    \n\n        \n          \n           \"/dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386630537", "createdAt": "2020-03-02T20:26:02Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -29,7 +29,8 @@\n         MODEL,\n         CLASS,\n         MESSAGE_CONSUMER,\n-        MESSAGE_PRODUCER;\n+        MESSAGE_PRODUCER,\n+        DASHBOARD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTc0Mg=="}, "originalCommit": {"oid": "8582ddbbdd9576b559a24bc390c81a0c559ebe4a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIwOTUwOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODowODowNFrOF1C5ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0Mzo1OVrOF1ZcOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NjMwOA==", "bodyText": "Please review this mechanism because we cannot assume decision name is unique in the whole project (it could contain multiple models)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391166308", "createdAt": "2020-03-11T18:08:04Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BigDecimalHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BooleanHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.StringHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.TypeHandler;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DMNResultMetricsBuilder.class);\n+\n+    private static final Map<Class, TypeHandler> handlers = generateHandlers();\n+\n+    private DMNResultMetricsBuilder() {\n+    }\n+\n+    private static Map<Class, TypeHandler> generateHandlers() {\n+        HashMap<Class, TypeHandler> handlers = new HashMap<>();\n+        handlers.put(String.class, new StringHandler(SupportedDecisionTypes.fromInternalToStandard(String.class)));\n+        handlers.put(Boolean.class, new BooleanHandler(SupportedDecisionTypes.fromInternalToStandard(Boolean.class)));\n+        handlers.put(BigDecimal.class, new BigDecimalHandler(SupportedDecisionTypes.fromInternalToStandard(BigDecimal.class)));\n+        return handlers;\n+    }\n+\n+    public static Map<Class, TypeHandler> getHandlers() {\n+        return handlers;\n+    }\n+\n+    public static void generateMetrics(DMNResult dmnResult) {\n+        if (dmnResult == null) {\n+            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n+            return;\n+        }\n+\n+        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults) {\n+            Object result = decision.getResult();\n+            if (SupportedDecisionTypes.isSupported(result.getClass())) {\n+                handlers.get(result.getClass()).record(decision.getDecisionName(), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTY3Mw==", "bodyText": "I've refactored it: now in the object we export the pair (endpoint, decision), so that the metric export is unique", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391535673", "createdAt": "2020-03-12T10:43:59Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BigDecimalHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BooleanHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.StringHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.TypeHandler;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DMNResultMetricsBuilder.class);\n+\n+    private static final Map<Class, TypeHandler> handlers = generateHandlers();\n+\n+    private DMNResultMetricsBuilder() {\n+    }\n+\n+    private static Map<Class, TypeHandler> generateHandlers() {\n+        HashMap<Class, TypeHandler> handlers = new HashMap<>();\n+        handlers.put(String.class, new StringHandler(SupportedDecisionTypes.fromInternalToStandard(String.class)));\n+        handlers.put(Boolean.class, new BooleanHandler(SupportedDecisionTypes.fromInternalToStandard(Boolean.class)));\n+        handlers.put(BigDecimal.class, new BigDecimalHandler(SupportedDecisionTypes.fromInternalToStandard(BigDecimal.class)));\n+        return handlers;\n+    }\n+\n+    public static Map<Class, TypeHandler> getHandlers() {\n+        return handlers;\n+    }\n+\n+    public static void generateMetrics(DMNResult dmnResult) {\n+        if (dmnResult == null) {\n+            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n+            return;\n+        }\n+\n+        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults) {\n+            Object result = decision.getResult();\n+            if (SupportedDecisionTypes.isSupported(result.getClass())) {\n+                handlers.get(result.getClass()).record(decision.getDecisionName(), result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NjMwOA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIxMzA4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODowOTowOFrOF1C7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1NDoxMlrOF1OE2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Njg5Mw==", "bodyText": "Please remove both maps and define a field for each metric (and initialize it too)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391166893", "createdAt": "2020-03-11T18:09:08Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] HANDLER_LABEL = new String[]{\"handler\"};\n+\n+    private static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Map<CountersTypesEnum, Counter> counters = new HashMap<>();\n+\n+    private static final Map<SummaryTypes, Summary> summaries = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTQ2NQ==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349465", "createdAt": "2020-03-12T00:54:12Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] HANDLER_LABEL = new String[]{\"handler\"};\n+\n+    private static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Map<CountersTypesEnum, Counter> counters = new HashMap<>();\n+\n+    private static final Map<SummaryTypes, Summary> summaries = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Njg5Mw=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIxNTc2OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/dmnhandlers/DecisionConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMDowMlrOF1C9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1NDowMlrOF1OEsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NzMzNg==", "bodyText": "Can you please add a comment to explain what is this?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391167336", "createdAt": "2020-03-11T18:10:02Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/dmnhandlers/DecisionConstants.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics.dmnhandlers;\n+\n+public class DecisionConstants {\n+\n+    public static final String DECISIONS_NAME_SUFFIX = \"_dmn_result\";\n+\n+    public static final String DECISIONS_HELP = \"Decision output.\";\n+\n+    public static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTQyNw==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349427", "createdAt": "2020-03-12T00:54:02Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/dmnhandlers/DecisionConstants.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics.dmnhandlers;\n+\n+public class DecisionConstants {\n+\n+    public static final String DECISIONS_NAME_SUFFIX = \"_dmn_result\";\n+\n+    public static final String DECISIONS_HELP = \"Decision output.\";\n+\n+    public static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NzMzNg=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIyMzQ2OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/addons/monitoring/integration/DMNResultMetricsBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMjowNVrOF1DCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1Mzo0OVrOF1OEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODU1Mg==", "bodyText": "I agree to keep a test that check this double mapping, just simplify the comment :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391168552", "createdAt": "2020-03-11T18:12:05Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/addons/monitoring/integration/DMNResultMetricsBuilderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.integration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.addons.monitoring.mocks.DMNDecisionResultMock;\n+import org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DMNResultMetricsBuilderTest {\n+\n+    CollectorRegistry registry;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = CollectorRegistry.defaultRegistry;\n+    }\n+\n+    @Test\n+    public void GivenADMNResult_WhenMetricsAreStored_ThenTheCollectorsAreProperlyWorking(){\n+        // Arrange\n+        DMNResult dmnResult = new DMNResult();\n+        List<DMNDecisionResultMock> decisions = new ArrayList<>();\n+        decisions.add(new DMNDecisionResultMock(\"AlphabetDecision\", \"A\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\", \"World\"));\n+\n+        dmnResult.setDecisionResults(decisions);\n+\n+        int expectedAlphabetDecisionA = 1;\n+        int expectedDictionaryDecisionHello = 2;\n+        int expectedDictionaryDecisionWorld = 1;\n+\n+        // Act\n+        DMNResultMetricsBuilder.generateMetrics(dmnResult);\n+\n+        // Assert\n+        assertEquals(expectedAlphabetDecisionA, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"AlphabetDecision\", \"A\"));\n+        assertEquals(expectedDictionaryDecisionHello, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"Hello\"));\n+        assertEquals(expectedDictionaryDecisionWorld, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"World\"));\n+\n+    }\n+\n+    // Given that atm the two modules are dependent and there is not a clear way to extend the code generation,\n+    // this test covers the fact that the two classes are aligned, i.e. if you add/remove a supported type, you\n+    // have to update the addon as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTM2OQ==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349369", "createdAt": "2020-03-12T00:53:49Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/addons/monitoring/integration/DMNResultMetricsBuilderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.integration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.addons.monitoring.mocks.DMNDecisionResultMock;\n+import org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DMNResultMetricsBuilderTest {\n+\n+    CollectorRegistry registry;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = CollectorRegistry.defaultRegistry;\n+    }\n+\n+    @Test\n+    public void GivenADMNResult_WhenMetricsAreStored_ThenTheCollectorsAreProperlyWorking(){\n+        // Arrange\n+        DMNResult dmnResult = new DMNResult();\n+        List<DMNDecisionResultMock> decisions = new ArrayList<>();\n+        decisions.add(new DMNDecisionResultMock(\"AlphabetDecision\", \"A\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\", \"World\"));\n+\n+        dmnResult.setDecisionResults(decisions);\n+\n+        int expectedAlphabetDecisionA = 1;\n+        int expectedDictionaryDecisionHello = 2;\n+        int expectedDictionaryDecisionWorld = 1;\n+\n+        // Act\n+        DMNResultMetricsBuilder.generateMetrics(dmnResult);\n+\n+        // Assert\n+        assertEquals(expectedAlphabetDecisionA, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"AlphabetDecision\", \"A\"));\n+        assertEquals(expectedDictionaryDecisionHello, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"Hello\"));\n+        assertEquals(expectedDictionaryDecisionWorld, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"World\"));\n+\n+    }\n+\n+    // Given that atm the two modules are dependent and there is not a clear way to extend the code generation,\n+    // this test covers the fact that the two classes are aligned, i.e. if you add/remove a supported type, you\n+    // have to update the addon as well.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODU1Mg=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIyNDg0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMjoyOVrOF1DDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1MzozOFrOF1OEUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODc5NQ==", "bodyText": "You can replace it with findFirst() to avoid to iterate over the whole collection", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391168795", "createdAt": "2020-03-11T18:12:29Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTMyOQ==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349329", "createdAt": "2020-03-12T00:53:38Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODc5NQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIyNzAxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzowNVrOF1DEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1MzoxOFrOF1OD_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTE3Ng==", "bodyText": "I think you should use asString instead of toString", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169176", "createdAt": "2020-03-11T18:13:05Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTI0NA==", "bodyText": "Switched to getNameAsString, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349244", "createdAt": "2020-03-12T00:53:18Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTE3Ng=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIyOTU5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzo0MlrOF1DGJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1MTo0N1rOF1OC3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTU3Mw==", "bodyText": "Why isn't this import added in addMonitoringImports method as all the others? You can also get rid of all the imports just using the full canonical name of the classes when you use them", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169573", "createdAt": "2020-03-11T18:13:42Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODk1Ng==", "bodyText": "Moved to addMonitoringImports, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348956", "createdAt": "2020-03-12T00:51:47Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTU3Mw=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzMDM4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzo1NVrOF1DGpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1MToyNVrOF1OCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMQ==", "bodyText": "Not needed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169701", "createdAt": "2020-03-11T18:13:55Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODg1OA==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348858", "createdAt": "2020-03-12T00:51:25Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzMzUyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNDo1MVrOF1DI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNzowMFrOF3js_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ==", "bodyText": "Can you please verify if this can happen? I expect getBody can be empty only if it is abstract or inside an interface", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170265", "createdAt": "2020-03-11T18:14:51Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NDk1Ng==", "bodyText": "Yes, I checked and you are right: it can happen in the case of an interface or an abstract class. I.e. in this particular case the body should always be present, 'cause our templates are simple concrete classes.\nShould we just leave the Throw just to suppress the warnings and also be more \"safe\" in the future (for sure nothing will change in the future, but yeah, **** happens)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391554956", "createdAt": "2020-03-12T11:21:20Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2MDk5NQ==", "bodyText": "In this case it is fine to throw an exception with a clear message like \"This method should be invoked only with concrete classes and not with abstract methods or interfaces\". Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393160995", "createdAt": "2020-03-16T16:42:26Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMDk1OQ==", "bodyText": "Thx! Fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393800959", "createdAt": "2020-03-17T16:17:00Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzNDI4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNTowNlrOF1DJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxNjowNFrOF3AeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA==", "bodyText": "I think it is better to add a placeholder to replace instead of rely on the current position of a statement", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170408", "createdAt": "2020-03-11T18:15:06Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        IfStmt ifStmt = body.findFirst(IfStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint. Template was modified.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwMzMxNQ==", "bodyText": "Fully agree. I had a quick look at the doc and in the findX functions the argument has to be a Statement, so it does not work with comments or other things.\nI have in mind we can achieve a kind of \"placeholding\" with the refactoring of the endpoints, splitting the responsabilities into methods (for example \"prologue\", \"act\", \"epilogue\" or something like this. And between each method there would be an object that we can set up during the codegeneration, adding properties as needed). And if somebody has to put new code into the codegen, at least we have some sections that he can modify.\nBut probably this refactoring is a bit out of scope from this PR (we can do that in another PR with a proper discussion), so right now I've just encapsulated the epilogue into a method, so that I can add what I need before the return statement:\n\nthe template becomes:\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Object dmn(java.util.Map<String, Object> variables) {\n        org.kie.kogito.decision.DecisionModel decision = application.decisionModels().getDecisionModel(\"$modelNamespace$\", \"$modelName$\");\n        org.kie.kogito.dmn.rest.DMNResult result = new org.kie.kogito.dmn.rest.DMNResult(decision.evaluateAll(decision.newContext(variables)));\n        return extractContextIfSucceded(result);\n    }\n\n    @javax.ws.rs.ext.Provider\n    public static class DMNEvaluationErrorExceptionMapper implements javax.ws.rs.ext.ExceptionMapper<org.kie.kogito.dmn.rest.DMNEvaluationErrorException> {\n        public javax.ws.rs.core.Response toResponse(org.kie.kogito.dmn.rest.DMNEvaluationErrorException e) {\n            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getResult()).build();\n        }\n    }\n\n    private Object extractContextIfSucceded(DMNResult result){\n        if (!result.hasErrors()) {\n            return result.getDmnContext();\n        } else {\n            throw new DMNEvaluationErrorException(result);\n        }\n    }\nAnd the section you commented:\n        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Return statement not found: can't add monitoring to endpoint. Template was modified.\"));\nWhat do you think?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391603315", "createdAt": "2020-03-12T13:00:00Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        IfStmt ifStmt = body.findFirst(IfStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint. Template was modified.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMzcxNw==", "bodyText": "I like this proposal and I agree to postpone this refactoring to another PR :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393223717", "createdAt": "2020-03-16T18:16:04Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        IfStmt ifStmt = body.findFirst(IfStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint. Template was modified.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzNTM4OnYy", "diffSide": "LEFT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNToyNVrOF1DKHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo0MToyNVrOF3_PSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA==", "bodyText": "You moved most of the methods so it is hard to understand the differences :)\nCan you quickly describe what you did here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170588", "createdAt": "2020-03-11T18:15:25Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NDU1Nw==", "bodyText": "Sure, I had to reorder the methods and the properties 'cause it was quite confusing.\n\nreordering of methods and properties\nadded useMonitoring property\nadded withMonitoring method (line 121)\ninject useMonitoring in the DMNRestResourceGenerators (line 170)\ngenerate a dashboard for each DMNRestResourceGenerator (line 176)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391574557", "createdAt": "2020-03-12T12:03:32Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMzk3Mg==", "bodyText": "I'd prefer keeping static factory methods at the top", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394203972", "createdAt": "2020-03-18T09:21:09Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MjEwNQ==", "bodyText": "No problem, I backported it. Personally I don't like it, but no matter", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394252105", "createdAt": "2020-03-18T10:41:25Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzNjA4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNTozN1rOF1DKlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0Mjo1NFrOF1ZZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDcwOA==", "bodyText": "Please move the string to a constant", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170708", "createdAt": "2020-03-11T18:15:37Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.model.v1_2.TDecision;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GrafanaConfigurationWriter.class);\n+\n+    private GrafanaConfigurationWriter() {\n+        // Intentionally left blank.\n+    }\n+\n+    public static String readStandardDashboard() {\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTAxOA==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391535018", "createdAt": "2020-03-12T10:42:54Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.model.v1_2.TDecision;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GrafanaConfigurationWriter.class);\n+\n+    private GrafanaConfigurationWriter() {\n+        // Intentionally left blank.\n+    }\n+\n+    public static String readStandardDashboard() {\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDcwOA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzODA4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/IJGrafana.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNjowNFrOF1DLww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0Mjo0M1rOF1ZZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTAxMQ==", "bodyText": "Do we really need to decouple interface and implementation? Do we expect to have other impl? I think we could remove this abstraction for now", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391171011", "createdAt": "2020-03-11T18:16:04Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/IJGrafana.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import protostream.javassist.NotFoundException;\n+\n+public interface IJGrafana {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDkxNQ==", "bodyText": "Removed, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391534915", "createdAt": "2020-03-12T10:42:43Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/IJGrafana.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import protostream.javassist.NotFoundException;\n+\n+public interface IJGrafana {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTAxMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI0Mzk1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNzoyOFrOF1DPRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MjozMVrOF1ZY0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTkxMQ==", "bodyText": "I think you can move all Grafana API classes to a top level module named grafana-api because it is not related with codegen module in general", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391171911", "createdAt": "2020-03-11T18:17:28Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDgwMw==", "bodyText": "I moved this kind of library to another  top level module. It looks more clean now, but I had to put the dmn type mapping inside this module 'cause otherwise this library would have a dependency on the kogito-codegen. It might be okeysh, let's have a call later anyway on that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391534803", "createdAt": "2020-03-12T10:42:31Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTkxMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI0NDQ5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNzozNlrOF1DPog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMDo0MDoxN1rOF1ZUTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjAwMg==", "bodyText": "I think it could be nice to have a constructor with the id as parameter so I can provide mine", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172002", "createdAt": "2020-03-11T18:17:36Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.codegen.grafana.factories.GridPosFactory;\n+import org.kie.kogito.codegen.grafana.factories.PanelFactory;\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.ExprBuilder;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+\n+/**\n+ * Java configurator to create standard grafana dashboards\n+ */\n+public class JGrafana implements IJGrafana {\n+\n+    private GrafanaDashboard dashboard;\n+\n+    /**\n+     * Create a new JGrafana instance.\n+     *\n+     * @param title: The title of your dashboard.\n+     */\n+    public JGrafana(String title) {\n+        String uuid = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMzY0NQ==", "bodyText": "Done, Thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391533645", "createdAt": "2020-03-12T10:40:17Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.codegen.grafana.factories.GridPosFactory;\n+import org.kie.kogito.codegen.grafana.factories.PanelFactory;\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.ExprBuilder;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+\n+/**\n+ * Java configurator to create standard grafana dashboards\n+ */\n+public class JGrafana implements IJGrafana {\n+\n+    private GrafanaDashboard dashboard;\n+\n+    /**\n+     * Create a new JGrafana instance.\n+     *\n+     * @param title: The title of your dashboard.\n+     */\n+    public JGrafana(String title) {\n+        String uuid = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjAwMg=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI0NTgyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/SupportedDecisionTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNzo1NVrOF1DQcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo1MDoyM1rOF1OBdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjIxMA==", "bodyText": "This could be moved to a dmn subpackage", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172210", "createdAt": "2020-03-11T18:17:55Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/SupportedDecisionTypes.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODU5OA==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348598", "createdAt": "2020-03-12T00:50:23Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/SupportedDecisionTypes.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjIxMA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI1MDQ5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/model/functions/ExprBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxOTowOFrOF1DTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo0OTo0NVrOF1OA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mjk1Mg==", "bodyText": "You can use SortedMap interface and TreeMap implementation and then just iterate over values", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172952", "createdAt": "2020-03-11T18:19:08Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/model/functions/ExprBuilder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.model.functions;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ExprBuilder {\n+\n+    private ExprBuilder() {\n+    }\n+\n+    public static String apply(String expr, Map<Integer, GrafanaFunction> functions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODQ1OQ==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348459", "createdAt": "2020-03-12T00:49:45Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/model/functions/ExprBuilder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.model.functions;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ExprBuilder {\n+\n+    private ExprBuilder() {\n+    }\n+\n+    public static String apply(String expr, Map<Integer, GrafanaFunction> functions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mjk1Mg=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI1MTI3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/types/AbstractDmnType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxOToxOVrOF1DT3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo0OTozNlrOF1OAzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzA4NA==", "bodyText": "Please move to a dmn package", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173084", "createdAt": "2020-03-11T18:19:19Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/types/AbstractDmnType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.types;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODQyOQ==", "bodyText": "Done, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348429", "createdAt": "2020-03-12T00:49:36Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/types/AbstractDmnType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.types;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzA4NA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI1MTU0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxOToyNFrOF1DUCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowMToyOVrOF3_7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ==", "bodyText": "Please can you explain what you have changed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173131", "createdAt": "2020-03-11T18:19:24Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1ODY1MQ==", "bodyText": "Sure, sorry for the reordering of the methods, but this class had a very confusing order of the properties.\n\nOrdered the properties and the methods.\nAdded a property useMonitoring.\nIn the creation of the RuleUnitGenerator inject the useMonitoring variable (line 220), so that the generator knows wheather it has to inject the monitoring statements in the endpoints.\nFor each QueryEndpointGenerator generate a grafana dashboard (line 255) and store it in the target/dashboards folder.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391558651", "createdAt": "2020-03-12T11:29:03Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjE1MA==", "bodyText": "this refactoring is even more confusing. The rationale should have been\n\nstatic properties at the top\nstatic factories following static properties\ninstance fields\nconstructors and instance methods\n\nnow, the rule might not have been followed 100%, and I do not necessarily disagree with this refactoring per-se, but if you want to do a refactoring you should at least open an ad-hoc PR, otherwise the PR becomes too massive and it's hard to understand the changes :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394206150", "createdAt": "2020-03-18T09:24:45Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MzQ4Mg==", "bodyText": "No problem, I backported it. Personally I don't like it, but no matter", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394263482", "createdAt": "2020-03-18T11:01:29Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI1MTkyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxOTozMVrOF1DUUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTozNDozOFrOF1a_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzIwMg==", "bodyText": "Can you describe the changes here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173202", "createdAt": "2020-03-11T18:19:31Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -61,8 +68,9 @@\n     private final String endpointName;\n     private final String targetCanonicalName;\n     private final String generatedFilePath;\n+    private final boolean useMonitoring;\n \n-    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator ) {\n+    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator, boolean useMonitoring) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2MTE0NA==", "bodyText": "Yeah, sorry again for refactoring this class. It contains\n\nSome basic refactoring (remove spaces here and there and new lines)\nadd new property useMonitoring\nset the return type in the endpoints (line 158). Previously the template returned directly the result without assigning it to a variable, but given that in the monitoring we have to record the elapsed time of the request we have to collect the result, measure the time and return the result -> this change is coupled with the change in the template.\nadd monitoring to the endpoints (line 165 and 170)\nintercept and log all the exception wrapping the endpoint with a try/catch and throwing the catched exception at the end", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391561144", "createdAt": "2020-03-12T11:34:38Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -61,8 +68,9 @@\n     private final String endpointName;\n     private final String targetCanonicalName;\n     private final String generatedFilePath;\n+    private final boolean useMonitoring;\n \n-    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator ) {\n+    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator, boolean useMonitoring) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzIwMg=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI1NDM1OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoyMDoxMlrOF1DV1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDo0OToxNVrOF1OAOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzU4OA==", "bodyText": "Please add systemMonitoring || or remove the property, now it is not used :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173588", "createdAt": "2020-03-11T18:20:12Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -172,11 +175,10 @@ private ApplicationGenerator createApplicationGenerator(\n         if (appPackageName.equals(ApplicationGenerator.DEFAULT_GROUP_ID)) {\n             appPackageName = ApplicationGenerator.DEFAULT_PACKAGE_NAME;\n         }\n+\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.addons.monitoring.rest.MetricsResource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODI4MA==", "bodyText": "Removed, thanks!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348280", "createdAt": "2020-03-12T00:49:15Z", "author": {"login": "r00ta"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -172,11 +175,10 @@ private ApplicationGenerator createApplicationGenerator(\n         if (appPackageName.equals(ApplicationGenerator.DEFAULT_GROUP_ID)) {\n             appPackageName = ApplicationGenerator.DEFAULT_PACKAGE_NAME;\n         }\n+\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.addons.monitoring.rest.MetricsResource\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzU4OA=="}, "originalCommit": {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM2NTQ5OnYy", "diffSide": "RIGHT", "path": "grafana-api/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMzozNlrOF2_7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTozNToxM1rOF3US7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDgwMg==", "bodyText": "Can you add a README.md in this module?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393214802", "createdAt": "2020-03-16T18:03:36Z", "author": {"login": "danielezonca"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0ODUyNg==", "bodyText": "Sure! Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393548526", "createdAt": "2020-03-17T09:35:13Z", "author": {"login": "r00ta"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDgwMg=="}, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM3NjU5OnYy", "diffSide": "RIGHT", "path": "grafana-api/src/main/resources/grafana-dashboard-template/dashboard-template.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowNTo1NVrOF3ACjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNTo1MFrOF3TRKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjY1Mg==", "bodyText": "Is this a general purpose dashboard template or it is specific to our addon? If it is specific I would prefer to have it in the addon module. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393216652", "createdAt": "2020-03-16T18:05:55Z", "author": {"login": "danielezonca"}, "path": "grafana-api/src/main/resources/grafana-dashboard-template/dashboard-template.json", "diffHunk": "@@ -0,0 +1,487 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMTY5MQ==", "bodyText": "Yep, I'll move it to the kogito-codegen, so that in the codegen it is possible to decide what template to use. For example we might use different templates for DMN and DRL", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393531691", "createdAt": "2020-03-17T09:05:50Z", "author": {"login": "r00ta"}, "path": "grafana-api/src/main/resources/grafana-dashboard-template/dashboard-template.json", "diffHunk": "@@ -0,0 +1,487 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjY1Mg=="}, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM4MDMwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowNjozOVrOF3AEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMTowMFrOF3SIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzIyNA==", "bodyText": "Why do you need this dependency with test scope?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393217224", "createdAt": "2020-03-16T18:06:39Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -127,5 +131,10 @@\n       <artifactId>mockito-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+       <groupId>javax.annotation</groupId>\n+       <artifactId>javax.annotation-api</artifactId>\n+       <scope>test</scope>\n+     </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMzA3NQ==", "bodyText": "Good catch, my bad", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393513075", "createdAt": "2020-03-17T08:31:00Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -127,5 +131,10 @@\n       <artifactId>mockito-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+       <groupId>javax.annotation</groupId>\n+       <artifactId>javax.annotation-api</artifactId>\n+       <scope>test</scope>\n+     </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzIyNA=="}, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQwMjcwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMTowNFrOF3ASzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODoyOTo1NVrOF3SGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDgxMg==", "bodyText": "Please double check how path separator is managed in Kogito because if it will be concatenated with some OS specific values (i.e. File.separator) it might break", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393220812", "createdAt": "2020-03-16T18:11:04Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +99,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());\n+\n+        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(resourceGenerator.getNameURL(), decisions);\n+        generatedFiles.add(\n+                new org.kie.kogito.codegen.GeneratedFile(\n+                        org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                        \"/dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMjU3NA==", "bodyText": "Yep I agree with you, I was wondering the same 'cause all the paths are hardcoded I don't know how this can work on other OS.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393512574", "createdAt": "2020-03-17T08:29:55Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +99,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());\n+\n+        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(resourceGenerator.getNameURL(), decisions);\n+        generatedFiles.add(\n+                new org.kie.kogito.codegen.GeneratedFile(\n+                        org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                        \"/dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDgxMg=="}, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQwNTM0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMTo0NFrOF3AUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMDo0MFrOF3SHxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTIwMQ==", "bodyText": "Same comment about path separator", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393221201", "createdAt": "2020-03-16T18:11:44Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -297,6 +255,13 @@ public ApplicationSection section() {\n                 if (!queries.isEmpty()) {\n                     generatedFiles.add( new RuleUnitDTOSourceClass( ruleUnit.getRuleUnitDescription(), assignableChecker ).generateFile(org.kie.kogito.codegen.GeneratedFile.Type.RULE) );\n                     for (QueryEndpointGenerator query : queries) {\n+                        if (useMonitoring){\n+                            String dashboard = GrafanaConfigurationWriter.generateDashboardForEndpoint(query.getEndpointName());\n+                            generatedFiles.add(new org.kie.kogito.codegen.GeneratedFile(org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                                                                                        \"/dashboards/dashboard-endpoint-\" + query.getEndpointName() + \".json\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMjkwMQ==", "bodyText": "Same as above, all paths are hardcoded in kogito", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393512901", "createdAt": "2020-03-17T08:30:40Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -297,6 +255,13 @@ public ApplicationSection section() {\n                 if (!queries.isEmpty()) {\n                     generatedFiles.add( new RuleUnitDTOSourceClass( ruleUnit.getRuleUnitDescription(), assignableChecker ).generateFile(org.kie.kogito.codegen.GeneratedFile.Type.RULE) );\n                     for (QueryEndpointGenerator query : queries) {\n+                        if (useMonitoring){\n+                            String dashboard = GrafanaConfigurationWriter.generateDashboardForEndpoint(query.getEndpointName());\n+                            generatedFiles.add(new org.kie.kogito.codegen.GeneratedFile(org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                                                                                        \"/dashboards/dashboard-endpoint-\" + query.getEndpointName() + \".json\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTIwMQ=="}, "originalCommit": {"oid": "1779c5327a6f1117f49f1933c071711981d173e4"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDA3MDU2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MDowOFrOF3aaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1MToyM1rOF3ayyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODgwMg==", "bodyText": "You should use org.kie.dmn.model.api.Decision that is version agnostic instead of TDecision that is 1.2 specific", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393648802", "createdAt": "2020-03-17T12:40:08Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +100,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1NDk4NA==", "bodyText": "Thanks! Fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393654984", "createdAt": "2020-03-17T12:51:23Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +100,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODgwMg=="}, "originalCommit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDA3NTMwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0MToyOVrOF3adhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo0ODozOVrOF3asvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0OTU0Mg==", "bodyText": "Are you sure about this change?\nThis is the kogito-codegen readme", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393649542", "createdAt": "2020-03-17T12:41:29Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/README.md", "diffHunk": "@@ -4,8 +4,7 @@ Kogito Codegen\n This repository contains the shared (Maven Plug-In, Quarkus Extension, ...)\n code generation logic for Kogito: processes, rules, decisions, etc.\n \n-- `ApplicationGenerator` is the main entry point. The fluent API allows to \n-configure its global behavior.\n+- `GrafanaConfigurationWriter` is the main entry point. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MzQzOA==", "bodyText": "My bad!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393653438", "createdAt": "2020-03-17T12:48:39Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/README.md", "diffHunk": "@@ -4,8 +4,7 @@ Kogito Codegen\n This repository contains the shared (Maven Plug-In, Quarkus Extension, ...)\n code generation logic for Kogito: processes, rules, decisions, etc.\n \n-- `ApplicationGenerator` is the main entry point. The fluent API allows to \n-configure its global behavior.\n+- `GrafanaConfigurationWriter` is the main entry point. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0OTU0Mg=="}, "originalCommit": {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQzNDEyOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMDozM1rOF376zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDowOToxM1rOF3-FEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5NzcxMQ==", "bodyText": "why is this required?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394197711", "createdAt": "2020-03-18T09:10:33Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/pom.xml", "diffHunk": "@@ -34,11 +34,36 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>drools-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>grafana-api</artifactId>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.jboss.spec.javax.ws.rs</groupId>\n       <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n       <scope>provided</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-codegen</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMzEwNQ==", "bodyText": "Thanks, i did refactor the structure in the last review and this is not needed anymore. Fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394233105", "createdAt": "2020-03-18T10:09:13Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/pom.xml", "diffHunk": "@@ -34,11 +34,36 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>drools-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>grafana-api</artifactId>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.jboss.spec.javax.ws.rs</groupId>\n       <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n       <scope>provided</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-codegen</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5NzcxMQ=="}, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQ0Mzc2OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxMzowNVrOF38A0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo0MDozNlrOF3_NGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5OTI0OQ==", "bodyText": "so here we are assuming that there will never be more than one instance of this per app. Might be worth documenting somewhere. I'd also consider using a @singleton or @ApplicationScope if possible (it's ok for now, just keep it in mind for later iterations)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394199249", "createdAt": "2020-03-18T09:13:05Z", "author": {"login": "evacchi"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] ENDPOINT_LABEL = new String[]{\"endpoint\"};\n+\n+    private static final String[] ENDPOINT_INDENTIFIER_LABELS = new String[]{\"endpoint\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Counter REQUEST_STATUS_CODE_COUNTER =\n+            Counter.build().name(STATUS_CODE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MTU0Ng==", "bodyText": "Yep, correct. Will keep in mind. Right now this structure follows the other monitoring addons already implemented", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394251546", "createdAt": "2020-03-18T10:40:36Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] ENDPOINT_LABEL = new String[]{\"endpoint\"};\n+\n+    private static final String[] ENDPOINT_INDENTIFIER_LABELS = new String[]{\"endpoint\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Counter REQUEST_STATUS_CODE_COUNTER =\n+            Counter.build().name(STATUS_CODE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5OTI0OQ=="}, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQ1Mzc0OnYy", "diffSide": "RIGHT", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/model/functions/GrafanaFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNjowNFrOF38HkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1ODoyMVrOF3_1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDk3Ng==", "bodyText": "can you add some docs here? what's this for?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394200976", "createdAt": "2020-03-18T09:16:04Z", "author": {"login": "evacchi"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/model/functions/GrafanaFunction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.grafana.model.functions;\n+\n+public interface GrafanaFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MTgwOQ==", "bodyText": "Done, let me know wdyt", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394261809", "createdAt": "2020-03-18T10:58:21Z", "author": {"login": "r00ta"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/model/functions/GrafanaFunction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.grafana.model.functions;\n+\n+public interface GrafanaFunction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDk3Ng=="}, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzQ2MTk1OnYy", "diffSide": "RIGHT", "path": "grafana-api/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxODoyM1rOF38MxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoyMjo1MFrOF5-_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMjMwOA==", "bodyText": "I am not sure how I feel about having a new root module just for this... Maybe we should add a new root module for kogito-codegen and put them together? or maybe put it under addons? wdyt", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394202308", "createdAt": "2020-03-18T09:18:23Z", "author": {"login": "evacchi"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MTc3Mg==", "bodyText": "For me the right place for this would be a separated library, but for the time being together with @danielezonca we thought to put it in the root. I would not put it under the addons because the kogito-codegen needs to use it (i.e. we would have a dep with the addons, which does not make sense).\nIf you prefer to put it together with kogito-codegen, it's fine for me", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394251772", "createdAt": "2020-03-18T10:40:53Z", "author": {"login": "r00ta"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMjMwOA=="}, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5NDkyOA==", "bodyText": "This module is almost completely unrelated to the project so we ca move it wherever we prefer. I think we can also move it at standalone in the future. Fine for me to move it in addon or codegen too :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394594928", "createdAt": "2020-03-18T19:39:47Z", "author": {"login": "danielezonca"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMjMwOA=="}, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0NTI4NA==", "bodyText": "@evacchi @danielezonca any update? Should we\nLeave as it is\nAdd a new root module for kogito-codegen like\n- kogito-codegen\n  - grafana-api\n      src\n      pom.xml\n  - codegen\n      src\n      pom.xml\n  pom.xml\n\nPut it in the kogito-codegen\n- kogito-codegen\n  -src\n    - main\n       - java\n         - org.kie.kogito.codegen\n           - grafana-api\n           - context\n           ..\n          ..\n\nI don't have any preference honestly, what do you prefer?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r396345284", "createdAt": "2020-03-23T10:22:50Z", "author": {"login": "r00ta"}, "path": "grafana-api/pom.xml", "diffHunk": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMjMwOA=="}, "originalCommit": {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQwMjY2OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyM1rOF4tbfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNDoyM1rOF4tbfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODg5Mw==", "bodyText": "@danielezonca @evacchi This file has changed since your last review. I basically implemented the same logic of the maven plugin (GenerateModelMojo):\n\ninject useMonitoring variable in generators\nwrite resource files", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r395008893", "createdAt": "2020-03-19T13:04:23Z", "author": {"login": "r00ta"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -63,9 +63,13 @@\n import org.kie.kogito.codegen.process.ProcessCodegen;\n import org.kie.kogito.codegen.process.persistence.PersistenceGenerator;\n import org.kie.kogito.codegen.rules.IncrementalRuleCodegen;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class KogitoAssetsProcessor {\n \n+    private static final String generatedDashboardsDir = \"/target/resources/\";\n+    private static final Logger logger = LoggerFactory.getLogger(KogitoAssetsProcessor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce25735f0a6ed1609b90c8e56da58441b6d32b6"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 316, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}