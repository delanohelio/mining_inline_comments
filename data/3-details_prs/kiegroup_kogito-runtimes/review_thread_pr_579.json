{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDYzNzU0", "number": 579, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozMjo0MFrOEIU_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozNDo0MVrOEIVBiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY3OTY3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozMjo0MFrOGoONww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMTo1NVrOGoT9Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTEyMw==", "bodyText": "What about throwing even an exception here? I think one warning can be lost in the logs and users can then expect a different schema version to be used than it actually is. Though I agree this is a matter of preference.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444829123", "createdAt": "2020-06-24T11:32:40Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -65,10 +71,22 @@ public Builder withGenSchemaPredicate(Predicate<? super Class<?>> shouldGenSchem\n             return this;\n         }\n \n+        public Builder withSchemaVersion(String schemaVersion) {\n+            this.schemaVersion = schemaVersion;\n+            return this;\n+        }\n+\n         public JsonSchemaGenerator build() {\n             JsonSchemaGenerator instance = new JsonSchemaGenerator(stream);\n             instance.getSchemaName = getSchemaName != null ? getSchemaName : JsonSchemaGenerator::getKey;\n             instance.shouldGenSchema = shouldGenSchema != null ? shouldGenSchema : JsonSchemaGenerator::isUserTaskClass;\n+            if (schemaVersion != null) {\n+                try {\n+                    instance.schemaVersion = SchemaVersion.valueOf(schemaVersion.trim().toUpperCase());\n+                } catch (IllegalArgumentException ex) {\n+                    logger.warn(\"Invalid value {} for schema version. Using default\", schemaVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830a7b842a75f94dc5ff50cc2a953a6cba4704db"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzIzOQ==", "bodyText": "Your approach is probably better, so changed ;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444923239", "createdAt": "2020-06-24T14:11:55Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -65,10 +71,22 @@ public Builder withGenSchemaPredicate(Predicate<? super Class<?>> shouldGenSchem\n             return this;\n         }\n \n+        public Builder withSchemaVersion(String schemaVersion) {\n+            this.schemaVersion = schemaVersion;\n+            return this;\n+        }\n+\n         public JsonSchemaGenerator build() {\n             JsonSchemaGenerator instance = new JsonSchemaGenerator(stream);\n             instance.getSchemaName = getSchemaName != null ? getSchemaName : JsonSchemaGenerator::getKey;\n             instance.shouldGenSchema = shouldGenSchema != null ? shouldGenSchema : JsonSchemaGenerator::isUserTaskClass;\n+            if (schemaVersion != null) {\n+                try {\n+                    instance.schemaVersion = SchemaVersion.valueOf(schemaVersion.trim().toUpperCase());\n+                } catch (IllegalArgumentException ex) {\n+                    logger.warn(\"Invalid value {} for schema version. Using default\", schemaVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTEyMw=="}, "originalCommit": {"oid": "830a7b842a75f94dc5ff50cc2a953a6cba4704db"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTY4NTIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozNDo0MVrOGoORLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMTozMVrOGoT8Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTk5OA==", "bodyText": "A little nitpick. The name of the tests could me more descriptive -> testJsonSchemaGeneratorNonExistingDraft.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444829998", "createdAt": "2020-06-24T11:34:41Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -84,7 +88,25 @@ public void testJsonSchemaGenerator() throws IOException {\n         assertEquals(1, files.size());\n         GeneratedFile file = files.iterator().next();\n         assertEquals(\"test_test.json\", file.relativePath());\n-        assertSchema(file);\n+        assertSchema(file, SchemaVersion.DRAFT_2019_09);\n+    }\n+    \n+    @Test\n+    public void testJsonSchemaGeneratorNonDraft() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830a7b842a75f94dc5ff50cc2a953a6cba4704db"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMjk0Nw==", "bodyText": "Good catch, I missed a word", "url": "https://github.com/kiegroup/kogito-runtimes/pull/579#discussion_r444922947", "createdAt": "2020-06-24T14:11:31Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -84,7 +88,25 @@ public void testJsonSchemaGenerator() throws IOException {\n         assertEquals(1, files.size());\n         GeneratedFile file = files.iterator().next();\n         assertEquals(\"test_test.json\", file.relativePath());\n-        assertSchema(file);\n+        assertSchema(file, SchemaVersion.DRAFT_2019_09);\n+    }\n+    \n+    @Test\n+    public void testJsonSchemaGeneratorNonDraft() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyOTk5OA=="}, "originalCommit": {"oid": "830a7b842a75f94dc5ff50cc2a953a6cba4704db"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4978, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}