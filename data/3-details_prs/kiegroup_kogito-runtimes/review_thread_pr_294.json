{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTI4NTM3", "number": 294, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozOToxN1rODdBjYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MDoyN1rODdBlHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYwNzM2OnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozOToxN1rOFlYyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozOToxN1rOFlYyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0Nzc4Mg==", "bodyText": "Replace this Optional with a plain value plus an enum to track in which of the possible 3 states UNINITALIZED, EMPTY, PRESENT.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r374747782", "createdAt": "2020-02-04T15:39:17Z", "author": {"login": "mariofusco"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.rules.units;\n+\n+import java.util.ArrayList;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.TerminalNode;\n+import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.spi.Activation;\n+import org.drools.core.util.bitmask.BitMask;\n+import org.kie.api.runtime.rule.FactHandle;\n+import org.kie.kogito.rules.DataHandle;\n+import org.kie.kogito.rules.DataProcessor;\n+import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.units.impl.DataHandleImpl;\n+\n+public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n+    private Optional<T> value = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e5111bfc2d733f5dc4fa00d193cb2c1854d675"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzYxMTgwOnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo0MDoyN1rOFlY1SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NjoxM1rOFnfiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODQ4OQ==", "bodyText": "Invoke insert only the first time and hold the handle. The subsequent times invoke update on that handle.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r374748489", "createdAt": "2020-02-04T15:40:27Z", "author": {"login": "mariofusco"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.rules.units;\n+\n+import java.util.ArrayList;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.TerminalNode;\n+import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.spi.Activation;\n+import org.drools.core.util.bitmask.BitMask;\n+import org.kie.api.runtime.rule.FactHandle;\n+import org.kie.kogito.rules.DataHandle;\n+import org.kie.kogito.rules.DataProcessor;\n+import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.units.impl.DataHandleImpl;\n+\n+public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n+    private Optional<T> value = null;\n+    private DataHandle handle = null;\n+\n+    private final List<EntryPointDataProcessor> entryPointSubscribers = new ArrayList<>();\n+    private final List<DataProcessor<T>> subscribers = new ArrayList<>();\n+\n+    public DataHandle set(T t) {\n+        value = Optional.of(t);\n+        handle = new DataHandleImpl( t );\n+        entryPointSubscribers.forEach(s -> internalInsert(handle, s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5e5111bfc2d733f5dc4fa00d193cb2c1854d675"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI4MDk4Ng==", "bodyText": "apparently DataHandle has no update() method \ud83e\udd14", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r375280986", "createdAt": "2020-02-05T14:19:28Z", "author": {"login": "evacchi"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.rules.units;\n+\n+import java.util.ArrayList;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.TerminalNode;\n+import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.spi.Activation;\n+import org.drools.core.util.bitmask.BitMask;\n+import org.kie.api.runtime.rule.FactHandle;\n+import org.kie.kogito.rules.DataHandle;\n+import org.kie.kogito.rules.DataProcessor;\n+import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.units.impl.DataHandleImpl;\n+\n+public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n+    private Optional<T> value = null;\n+    private DataHandle handle = null;\n+\n+    private final List<EntryPointDataProcessor> entryPointSubscribers = new ArrayList<>();\n+    private final List<DataProcessor<T>> subscribers = new ArrayList<>();\n+\n+    public DataHandle set(T t) {\n+        value = Optional.of(t);\n+        handle = new DataHandleImpl( t );\n+        entryPointSubscribers.forEach(s -> internalInsert(handle, s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODQ4OQ=="}, "originalCommit": {"oid": "e5e5111bfc2d733f5dc4fa00d193cb2c1854d675"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NTU2Mg==", "bodyText": "I have added a setObject to the DataHandle", "url": "https://github.com/kiegroup/kogito-runtimes/pull/294#discussion_r376955562", "createdAt": "2020-02-10T09:46:13Z", "author": {"login": "evacchi"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.rules.units;\n+\n+import java.util.ArrayList;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.TerminalNode;\n+import org.drools.core.ruleunit.InternalDataStore;\n+import org.drools.core.spi.Activation;\n+import org.drools.core.util.bitmask.BitMask;\n+import org.kie.api.runtime.rule.FactHandle;\n+import org.kie.kogito.rules.DataHandle;\n+import org.kie.kogito.rules.DataProcessor;\n+import org.kie.kogito.rules.SingletonDataStore;\n+import org.kie.kogito.rules.units.impl.DataHandleImpl;\n+\n+public class FieldDataStore<T> implements SingletonDataStore<T>, InternalDataStore<T> {\n+    private Optional<T> value = null;\n+    private DataHandle handle = null;\n+\n+    private final List<EntryPointDataProcessor> entryPointSubscribers = new ArrayList<>();\n+    private final List<DataProcessor<T>> subscribers = new ArrayList<>();\n+\n+    public DataHandle set(T t) {\n+        value = Optional.of(t);\n+        handle = new DataHandleImpl( t );\n+        entryPointSubscribers.forEach(s -> internalInsert(handle, s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0ODQ4OQ=="}, "originalCommit": {"oid": "e5e5111bfc2d733f5dc4fa00d193cb2c1854d675"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 283, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}