{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjUwNDA0", "number": 425, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozOTowOFrODwXnHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTo0MDoxM1rODwXoMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQ1MDg0OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozOTowOFrOGDVC5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MDo1NFrOGDcQgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MzcxOQ==", "bodyText": "could processId be null?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/425#discussion_r406143719", "createdAt": "2020-04-09T11:39:08Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatch.java", "diffHunk": "@@ -221,23 +215,19 @@ protected VariableInstanceEventBody create(ProcessVariableChangedEvent event) {\n                 .variableName(event.getVariableId())\n                 .variableValue(event.getNewValue())\n                 .variablePreviousValue(event.getOldValue());\n-        \n+\n         if (event.getNodeInstance() != null) {\n             eventBuilder\n-                .changedByNodeId(event.getNodeInstance().getNodeDefinitionId())\n-                .changedByNodeName(event.getNodeInstance().getNodeName())\n-                .changedByNodeType(event.getNodeInstance().getNode().getClass().getSimpleName());\n+                    .changedByNodeId(event.getNodeInstance().getNodeDefinitionId())\n+                    .changedByNodeName(event.getNodeInstance().getNodeName())\n+                    .changedByNodeType(event.getNodeInstance().getNode().getClass().getSimpleName());\n         }\n-        \n+\n         return eventBuilder.build();\n     }\n-    \n-    protected String extractProcessId(Map<String, String> metadata) {\n-        String processId = metadata.get(ProcessInstanceEventBody.PROCESS_ID_META_DATA);\n-        if (processId.contains(\".\")) {\n-            return processId.substring(processId.lastIndexOf('.') + 1);\n-        }\n \n-        return service + \"/\" + processId;\n+    protected String extractRuntimeSource(Map<String, String> metadata) {\n+        String processId = metadata.get(ProcessInstanceEventBody.PROCESS_ID_META_DATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde2d09026e32846717c9dcc555eda048b4e7dfc"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MTg4OA==", "bodyText": "it shouldnt but added a check anyway", "url": "https://github.com/kiegroup/kogito-runtimes/pull/425#discussion_r406261888", "createdAt": "2020-04-09T14:50:54Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatch.java", "diffHunk": "@@ -221,23 +215,19 @@ protected VariableInstanceEventBody create(ProcessVariableChangedEvent event) {\n                 .variableName(event.getVariableId())\n                 .variableValue(event.getNewValue())\n                 .variablePreviousValue(event.getOldValue());\n-        \n+\n         if (event.getNodeInstance() != null) {\n             eventBuilder\n-                .changedByNodeId(event.getNodeInstance().getNodeDefinitionId())\n-                .changedByNodeName(event.getNodeInstance().getNodeName())\n-                .changedByNodeType(event.getNodeInstance().getNode().getClass().getSimpleName());\n+                    .changedByNodeId(event.getNodeInstance().getNodeDefinitionId())\n+                    .changedByNodeName(event.getNodeInstance().getNodeName())\n+                    .changedByNodeType(event.getNodeInstance().getNode().getClass().getSimpleName());\n         }\n-        \n+\n         return eventBuilder.build();\n     }\n-    \n-    protected String extractProcessId(Map<String, String> metadata) {\n-        String processId = metadata.get(ProcessInstanceEventBody.PROCESS_ID_META_DATA);\n-        if (processId.contains(\".\")) {\n-            return processId.substring(processId.lastIndexOf('.') + 1);\n-        }\n \n-        return service + \"/\" + processId;\n+    protected String extractRuntimeSource(Map<String, String> metadata) {\n+        String processId = metadata.get(ProcessInstanceEventBody.PROCESS_ID_META_DATA);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MzcxOQ=="}, "originalCommit": {"oid": "bde2d09026e32846717c9dcc555eda048b4e7dfc"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQ1MzYzOnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTo0MDoxM1rOGDVEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MTowMVrOGDcQ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NDE5MA==", "bodyText": "in case processId is null you can add a test for it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/425#discussion_r406144190", "createdAt": "2020-04-09T11:40:13Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.kogito.services.event.impl.ProcessInstanceEventBody.PROCESS_ID_META_DATA;\n+\n+public class ProcessInstanceEventBatchTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde2d09026e32846717c9dcc555eda048b4e7dfc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MTk3MA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/425#discussion_r406261970", "createdAt": "2020-04-09T14:51:01Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-services/src/test/java/org/kie/kogito/services/event/impl/ProcessInstanceEventBatchTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.Collections.singletonMap;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.kogito.services.event.impl.ProcessInstanceEventBody.PROCESS_ID_META_DATA;\n+\n+public class ProcessInstanceEventBatchTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NDE5MA=="}, "originalCommit": {"oid": "bde2d09026e32846717c9dcc555eda048b4e7dfc"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 219, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}