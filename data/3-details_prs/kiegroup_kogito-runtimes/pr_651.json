{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mjg4MDM4", "number": 651, "title": "KOGITO-2741 Enrich TraceEvent with data types information", "bodyText": "Related JIRA ticket\nRelated PR in kogito-apps", "createdAt": "2020-07-24T13:29:27Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651", "merged": true, "mergeCommit": {"oid": "ed5069be0204e06704ed5061fb6a6bdbafb71616"}, "closed": true, "closedAt": "2020-08-19T16:36:02Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4Fpv5AFqTQ1NDk3NTM4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAY_xogBqjM2NzAxMTQ2MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTc1Mzg2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#pullrequestreview-454975386", "createdAt": "2020-07-24T15:20:20Z", "commit": {"oid": "ebfe07d563c618fd51c59d992d9440cb35937174"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyMDoyMFrOG2ziRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyMDo1MVrOG2zjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMDY0NA==", "bodyText": "Can you please create a ticket to review this code (it should be nice to use only interfaces)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460120644", "createdAt": "2020-07-24T15:20:20Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java", "diffHunk": "@@ -313,51 +327,64 @@ private static long computeDurationMillis(EvaluateEvent beginEvent, EvaluateEven\n         return Math.round((endEvent.getNanoTime() - beginEvent.getNanoTime()) / 1000000.0);\n     }\n \n-    private static TraceInputValue traceInputFrom(InputDataNode node, Map<String, Object> context) {\n-        JsonNode value = Optional.ofNullable(context.get(node.getName()))\n-                .<JsonNode>map(Json.MAPPER::valueToTree)\n-                .orElse(null);\n+    private static TraceInputValue traceInputFrom(String name, Object value) {\n+        return new TraceInputValue(null, name, EventUtils.typedVariableFrom(value), Collections.emptyList());\n+    }\n \n+    private static TraceInputValue traceInputFrom(InputDataNode node, Object value) {\n         return new TraceInputValue(\n                 node.getId(),\n                 node.getName(),\n-                EventUtils.traceTypeFrom(node.getType()),\n-                value,\n-                Collections.emptyList()\n-        );\n-    }\n-\n-    private static TraceInputValue traceInputFrom(Map.Entry<String, Object> contextEntry) {\n-        return new TraceInputValue(\n-                null,\n-                contextEntry.getKey(),\n-                null,\n-                Json.MAPPER.valueToTree(contextEntry.getValue()),\n+                EventUtils.typedVariableFrom(node.getType(), value),\n                 Collections.emptyList()\n         );\n     }\n \n-    private static TraceOutputValue traceOutputFrom(EvaluateDecisionResult decisionResult, DMNModel model) {\n-        TraceType type = Optional.ofNullable(model)\n+    private static TraceOutputValue traceOutputFrom(EvaluateDecisionResult decisionResult, DMNModel model, Map<String, Object> context) {\n+        DMNType type = Optional.ofNullable(model)\n                 .map(m -> m.getDecisionById(decisionResult.getDecisionId()))\n                 .map(DecisionNode::getResultType)\n-                .map(EventUtils::traceTypeFrom)\n                 .orElse(null);\n \n-        JsonNode value = Optional.ofNullable(decisionResult.getResult())\n-                .<JsonNode>map(Json.MAPPER::valueToTree)\n-                .orElse(null);\n+        // cast to DMNBaseNode here is required to have access to getDependencies method\n+        Map<String, DMNType> decisionInputTypes = Optional.ofNullable(model)\n+                .map(m -> m.getDecisionById(decisionResult.getDecisionId()))\n+                .filter(DMNBaseNode.class::isInstance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebfe07d563c618fd51c59d992d9440cb35937174"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMDk4MA==", "bodyText": "Can you please split this code in multiple methods to improve readability?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460120980", "createdAt": "2020-07-24T15:20:51Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/DefaultAggregator.java", "diffHunk": "@@ -138,10 +141,24 @@ private static URI buildSource(EvaluateEvent event) {\n     }\n \n     private static List<TraceInputValue> buildTraceInputValues(DMNModel model, EvaluateEvent firstEvent) {\n-        if (model == null) {\n-            return firstEvent.getContext().entrySet().stream()\n-                    .map(DefaultAggregator::traceInputFrom)\n-                    .collect(Collectors.toList());\n+        Map<String, InputDataNode> inputNodesMap = inputDataNodesFromFirstEvent(model, firstEvent).stream()\n+                .collect(Collectors.toMap(DMNNode::getName, Function.identity()));\n+\n+        return Stream.concat(\n+                firstEvent.getContext().entrySet().stream()\n+                        .map(entry -> inputNodesMap.containsKey(entry.getKey())\n+                                ? traceInputFrom(inputNodesMap.get(entry.getKey()), entry.getValue())\n+                                : traceInputFrom(entry.getKey(), entry.getValue())\n+                        ),\n+                inputNodesMap.entrySet().stream()\n+                        .filter(entry -> !firstEvent.getContext().containsKey(entry.getKey()))\n+                        .map(entry -> traceInputFrom(entry.getValue(), null))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebfe07d563c618fd51c59d992d9440cb35937174"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Njk4OTQ0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#pullrequestreview-455698944", "createdAt": "2020-07-27T11:32:09Z", "commit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTozMjowOVrOG3emnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjo1NjozMlrOG4LOmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNjI2OQ==", "bodyText": "@JsonIgnoreProperties(ignoreUnknown = true) ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r460826269", "createdAt": "2020-07-27T11:32:09Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/TypedVariable.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(\n+        use = JsonTypeInfo.Id.NAME,\n+        include = JsonTypeInfo.As.EXISTING_PROPERTY,\n+        defaultImpl = TypedVariable.Kind.class,\n+        property = \"kind\",\n+        visible = true\n+)\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(value = UnitVariable.class, name = \"UNIT\"),\n+        @JsonSubTypes.Type(value = CollectionVariable.class, name = \"COLLECTION\"),\n+        @JsonSubTypes.Type(value = StructureVariable.class, name = \"STRUCTURE\")\n+})\n+public abstract class TypedVariable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MDg0OQ==", "bodyText": "I think this is somehow redundant, since this will create something like\n{\n      \"id\": \"_1929CBD5-40E0-442D-B909-49CEDE0101DC\",\n      \"name\": \"Violation\",\n      \"value\": {\n        \"value\": {     <-------- another nesting that is not really informative\n          \"Type\": {\n            \"baseType\": \"string\",\n            \"value\": \"speed\",\n            \"kind\": \"UNIT\",\n            \"type\": \"Type\"\n          },\n          \"Speed Limit\": {\n            \"value\": 100,\n            \"kind\": \"UNIT\",\n            \"type\": \"number\"\n          },\n          \"Actual Speed\": {\n            \"value\": 105,\n            \"kind\": \"UNIT\",\n            \"type\": \"number\"\n          }\n        },\n        \"kind\": \"STRUCTURE\",\n        \"type\": \"tViolation\"\n      }\n    },\n\nwdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461550849", "createdAt": "2020-07-28T12:45:54Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Map;\n+\n+public class StructureVariable extends TypedVariable {\n+\n+    private Map<String, TypedVariable> value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzQ3MA==", "bodyText": "another nesting that is not really needed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461553470", "createdAt": "2020-07-28T12:50:04Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Collection;\n+\n+public class CollectionVariable extends TypedVariable {\n+\n+    private Collection<TypedVariable> value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzgzNw==", "bodyText": "use @JsonIgnoreProperties, otherwise the deserialization is broken if new unknown fields are added", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461553837", "createdAt": "2020-07-28T12:50:41Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Collection;\n+\n+public class CollectionVariable extends TypedVariable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NDQwMA==", "bodyText": "use @JsonIgnoreProperties, otherwise the deserialization is broken if new unknown fields are added", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461554400", "createdAt": "2020-07-28T12:51:38Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/StructureVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Map;\n+\n+public class StructureVariable extends TypedVariable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NDU5Mw==", "bodyText": "use @JsonIgnoreProperties, otherwise the deserialization is broken if new unknown fields are added", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461554593", "createdAt": "2020-07-28T12:51:57Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n+\n+public class UnitVariable extends TypedVariable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NzQwMw==", "bodyText": "I know it's more verbose, but could you use JsonProperty? My personal opinion is that this jackson feature is quite dangerous, since somebody might change the name of the variable and change directly the contract of the event. If we annotate the fields, it's clear that this class is going to be serialized/deserialized and it helps also in the understanding of the code imo.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461557403", "createdAt": "2020-07-28T12:56:32Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/UnitVariable.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n+\n+public class UnitVariable extends TypedVariable {\n+\n+    @JsonInclude(NON_NULL)\n+    private String baseType;\n+\n+    private JsonNode value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjExMDE4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#pullrequestreview-456611018", "createdAt": "2020-07-28T13:07:23Z", "commit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzowNzoyM1rOG4LpfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzowNzoyM1rOG4LpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU2NDI4NA==", "bodyText": "Could you add a complex test that is using collections and more complex scenarios like collections of structures?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#discussion_r461564284", "createdAt": "2020-07-28T13:07:23Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/variable/CollectionVariable.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.variable;\n+\n+import java.util.Collection;\n+\n+public class CollectionVariable extends TypedVariable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "667498eac6eedf203e4af33496d32649cdc9900b", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/667498eac6eedf203e4af33496d32649cdc9900b", "committedDate": "2020-07-24T16:08:57Z", "message": "[KOGITO-2741] Increase readability of DefaultAggregator"}, "afterCommit": {"oid": "1259105c0f1fbad21b60b6c91eea32d8903e2df3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1259105c0f1fbad21b60b6c91eea32d8903e2df3", "committedDate": "2020-08-11T08:07:38Z", "message": "[KOGITO-2741] Increase readability of DefaultAggregator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1259105c0f1fbad21b60b6c91eea32d8903e2df3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1259105c0f1fbad21b60b6c91eea32d8903e2df3", "committedDate": "2020-08-11T08:07:38Z", "message": "[KOGITO-2741] Increase readability of DefaultAggregator"}, "afterCommit": {"oid": "22b406fb48c0a65bf8e179e7679ee08a9a777cf3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/22b406fb48c0a65bf8e179e7679ee08a9a777cf3", "committedDate": "2020-08-13T14:43:48Z", "message": "[KOGITO-2741] Increase readability of DefaultAggregator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02aa21fd8933ff447c39aa8069d986129ca4e55f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/02aa21fd8933ff447c39aa8069d986129ca4e55f", "committedDate": "2020-08-17T13:51:59Z", "message": "[KOGITO-2741] Add jackson annotations to tracing-decision-api variable classes"}, "afterCommit": {"oid": "2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2868e9b831561a47456b31c6c8c8b43ff1ebf26e", "committedDate": "2020-08-18T08:36:18Z", "message": "[KOGITO-2741] Use Java 8 syntax in tracing decision addon"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca74db819cdd6696753cdb21e0be379b27d3ceda", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ca74db819cdd6696753cdb21e0be379b27d3ceda", "committedDate": "2020-08-18T13:20:58Z", "message": "[KOGITO-2741] Export serviceUrl"}, "afterCommit": {"oid": "1036041681881cd9b154f2aeb8b4a7b2536fc551", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1036041681881cd9b154f2aeb8b4a7b2536fc551", "committedDate": "2020-08-18T13:27:56Z", "message": "[KOGITO-2741] Export serviceUrl"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1036041681881cd9b154f2aeb8b4a7b2536fc551", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1036041681881cd9b154f2aeb8b4a7b2536fc551", "committedDate": "2020-08-18T13:27:56Z", "message": "[KOGITO-2741] Export serviceUrl"}, "afterCommit": {"oid": "c4df6a9e8acd807c89f6312f6ed684c2a3f68c3c", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c4df6a9e8acd807c89f6312f6ed684c2a3f68c3c", "committedDate": "2020-08-18T13:54:59Z", "message": "[KOGITO-2741] Export serviceUrl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NjE0MjMw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/651#pullrequestreview-469614230", "createdAt": "2020-08-18T16:15:30Z", "commit": {"oid": "1711d47a7ac65577e85b3029c26bee6b6d91d318"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59d529c1c14bdcf153d6ae277b6afff1cdb74a1", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b59d529c1c14bdcf153d6ae277b6afff1cdb74a1", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Add TypedVariable to TraceEvent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5e1530504ace3c38a1233191b184740ab43a15c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d5e1530504ace3c38a1233191b184740ab43a15c", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] TraceOutputValue inputs field is now a Map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a9c451ec56b7f7e5c90ad1ea66eb77121d7dbf", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/70a9c451ec56b7f7e5c90ad1ea66eb77121d7dbf", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Fix CollectionVariable value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c25cd7d3971422ff9db3a811095c493cba3fe6c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1c25cd7d3971422ff9db3a811095c493cba3fe6c", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Increase readability of DefaultAggregator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c95463c759f710780a76638b297d3322d4e0d4de", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c95463c759f710780a76638b297d3322d4e0d4de", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Add jackson annotations to tracing-decision-api variable classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecdea58f2355ca8635af005661756b24d1809a99", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ecdea58f2355ca8635af005661756b24d1809a99", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Use Java 8 syntax in tracing decision addon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c105ad2020f82d176469f3ea980536e74b62939", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7c105ad2020f82d176469f3ea980536e74b62939", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Export serviceUrl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc019f2439bca452e6e18c4d785ee0ccc4766227", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc019f2439bca452e6e18c4d785ee0ccc4766227", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Include serviceUrl in CloudEvent source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242a3e9d11897986f829ea245c4c7e1e910c6ab8", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/242a3e9d11897986f829ea245c4c7e1e910c6ab8", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Quarkus tracing decision addon: fix QuarkusExplainableResourceIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cc15a9948089b5186a500388a2a8b72a23a32d8", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3cc15a9948089b5186a500388a2a8b72a23a32d8", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Fix CdiConfigBeanTemplate in kogito-codegen"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "432818c0a45c560b4d9647d41ec4cb65e2b21998", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/432818c0a45c560b4d9647d41ec4cb65e2b21998", "committedDate": "2020-08-18T16:51:08Z", "message": "[KOGITO-2741] Fix CdiConfigBeanTemplate in kogito-codegen"}, "afterCommit": {"oid": "3cc15a9948089b5186a500388a2a8b72a23a32d8", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3cc15a9948089b5186a500388a2a8b72a23a32d8", "committedDate": "2020-08-19T10:22:15Z", "message": "[KOGITO-2741] Fix CdiConfigBeanTemplate in kogito-codegen"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4074, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}