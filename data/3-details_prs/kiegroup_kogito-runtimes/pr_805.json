{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NzQ1OTE2", "number": 805, "title": "KOGITO-3477 - Refactoring protobuf generation", "bodyText": "Jira: https://issues.redhat.com/browse/KOGITO-3477\nThis PR aims to refactor the generation of the proto files as static resources to be served by the webapp.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-10-05T10:16:09Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805", "merged": true, "mergeCommit": {"oid": "392f4cd7e4d10876713c4689a1ba054e3e843706"}, "closed": true, "closedAt": "2020-10-22T20:31:55Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPg_lpgH2gAyNDk3NzQ1OTE2OmFlZTE5YzAwMDNjYjZjYTk2NTY3NGI5NzIyZmNmYjk4MTJjOGI1MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVGxuHgH2gAyNDk3NzQ1OTE2OjMxMWRjNWQ0YjUxMmM1NjgzNjYzMmExMWMwM2YwMGRlOGJlNDU5MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aee19c0003cb6ca965674b9722fcfb9812c8b511", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/aee19c0003cb6ca965674b9722fcfb9812c8b511", "committedDate": "2020-10-05T10:12:31Z", "message": "refactoring protobuf generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a30cc8976777c2364e4781284001a998b0618ab", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7a30cc8976777c2364e4781284001a998b0618ab", "committedDate": "2020-10-05T12:22:33Z", "message": "add undertow dependency in generated project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/adf467b06e49fe4c8f39df2d430ab70d2e845bbe", "committedDate": "2020-10-05T12:33:59Z", "message": "refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDEwODgw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-502010880", "createdAt": "2020-10-05T12:37:47Z", "commit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNzo0N1rOHcbFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNzo0N1rOHcbFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2NTg4MQ==", "bodyText": "We have to keep writing this file directly to the FS since the protobuf generation code is a bit more complicated to be refactored (there are some procedures that need these files to be there before we really write the GeneratedFiles with the kogito file hanlder) and I'd like to do that in another dedicated ticket.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499565881", "createdAt": "2020-10-05T12:37:47Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n         String protoFileName = processId + \".proto\";\n-        List<Path> protoFilePaths = new ArrayList<>();\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName));\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH + protoFileName));\n-        for (Path protoFilePath : protoFilePaths) {\n-            Files.createDirectories(protoFilePath.getParent());\n-            Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n-        }\n+        List<GeneratedFile> protoFiles = new ArrayList<>();\n+\n+        protoFiles.add(new GeneratedFile(GeneratedFile.Type.GENERATED_CP_RESOURCE,\n+                                         GENERATED_PROTO_RES_PATH + protoFileName,\n+                                         modelProto.toString().getBytes(StandardCharsets.UTF_8))\n+        );\n+\n+        Path protoFilePath = Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDEyMTIx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-502012121", "createdAt": "2020-10-05T12:39:20Z", "commit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozOToyMFrOHcbIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozOToyMFrOHcbIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2Njc0Mw==", "bodyText": "As I've investigated here in the comments https://issues.redhat.com/browse/KOGITO-3477 quarkus does not register the generated static resources, that's why we need undertow in the final project.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499566743", "createdAt": "2020-10-05T12:39:20Z", "author": {"login": "r00ta"}, "path": "kogito-quarkus-extension/deployment/pom.xml", "diffHunk": "@@ -40,6 +40,11 @@\n             <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n             <version>${version.io.quarkus}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-undertow-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0933f9f474e4dc29fedd8f958b2dffce933fc805", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0933f9f474e4dc29fedd8f958b2dffce933fc805", "committedDate": "2020-10-05T14:07:53Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3477-protobuf-refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6427d4e188650c32c64d76ba851e4b1d5597961f", "committedDate": "2020-10-05T15:14:48Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTc5OTE2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-502179916", "createdAt": "2020-10-05T15:35:29Z", "commit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNToyOVrOHciqgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozODoyNlrOHciyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MDExMg==", "bodyText": "Maybe this is not a list? Since it's one protobuf file per process id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499690112", "createdAt": "2020-10-05T15:35:29Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjE2NQ==", "bodyText": "Is this safe? Won't make sense to do some checks first? I understand that's unlikely, but we could see ArrayBounds | NPE exceptions in the log that would be hard to track. :/", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499692165", "createdAt": "2020-10-05T15:38:26Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n         String protoFileName = processId + \".proto\";\n-        List<Path> protoFilePaths = new ArrayList<>();\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName));\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH + protoFileName));\n-        for (Path protoFilePath : protoFilePaths) {\n-            Files.createDirectories(protoFilePath.getParent());\n-            Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n-        }\n+        List<GeneratedFile> protoFiles = new ArrayList<>();\n+\n+        protoFiles.add(new GeneratedFile(GeneratedFile.Type.GENERATED_CP_RESOURCE,\n+                                         GENERATED_PROTO_RES_PATH + protoFileName,\n+                                         modelProto.toString().getBytes(StandardCharsets.UTF_8))\n+        );\n+\n+        Path protoFilePath = Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName);\n+        Files.createDirectories(protoFilePath.getParent());\n+        Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n+\n+        return protoFiles;\n     }\n \n     /**\n-     * Reads from the persistence directory and generates a listing file ({@link #LISTING_FILE}) from its content\n+     * Iterates over the generated files and extract all the proto files. Then it creates and add to the generated files collection\n+     * a listing file ({@link #LISTING_FILE}) from its content.\n      *\n-     * @param targetDirectory target directory generated by Maven\n+     * @param generatedFiles  The list of generated files.\n+     * @param targetDirectory target directory generated by Maven.\n      * @throws IOException if something wrong occurs during I/O\n      */\n-    public final void generateProtoListing(final String targetDirectory) throws IOException {\n-        final Path persistencePath = Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH);\n-        final List<String> fileList = new ArrayList<>();\n-        if (Files.isDirectory(persistencePath)) {\n-            for (final File protoFile : persistencePath.toFile().listFiles((dir, name) ->\n-                                                                                   name.toLowerCase().endsWith(PersistenceProtoFilesLabeler.PROTO_FILE_EXT))) {\n-                fileList.add(protoFile.getName());\n-            }\n+    public final Optional<GeneratedFile> generateProtoListingFile(Collection<GeneratedFile> generatedFiles, final String targetDirectory) throws IOException {\n+        List<String> fileNames = generatedFiles.stream()\n+                .filter(x -> x.relativePath().contains(GENERATED_PROTO_RES_PATH))\n+                .map(x -> x.relativePath().substring(x.relativePath().lastIndexOf(\"/\") + 1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab7f9a9715361c0a7c93eae55dbd0c9fb9c03be8", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ab7f9a9715361c0a7c93eae55dbd0c9fb9c03be8", "committedDate": "2020-10-06T08:06:04Z", "message": "filter non-class files in maven plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddc2a808d2070b877f601c4d76ae159e7d0734a7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ddc2a808d2070b877f601c4d76ae159e7d0734a7", "committedDate": "2020-10-06T08:22:22Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3477-protobuf-refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6c18e4963a8922960c0c0b2225ee2d945ed9a4f6", "committedDate": "2020-10-06T08:31:41Z", "message": "refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NjEzOTY0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-504613964", "createdAt": "2020-10-08T09:52:09Z", "commit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1MjowOVrOHeWwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjoyNjoxNVrOHecDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MjA2Ng==", "bodyText": "I don't like that this method now has both return value and side effect (add file to generatedFiles).\nI would prefer to remove the side effect from here and move it to infinispanBasedPersistence.\nWhat about make generateModelClassProto a public method that accept a Collection<Class<?>> input + targetDirectory and returns a Collection<GeneratedFile>?\nAfter these two changes we can remove generatedFiles parameter from extractDataClasses.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501592066", "createdAt": "2020-10-08T09:52:09Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/ReflectionProtoGenerator.java", "diffHunk": "@@ -83,9 +85,9 @@ public Proto generate(String messageComment, String fieldComment, String package\n                     dataModelClasses.add(propertyType);\n                 }\n \n-                generateModelClassProto(modelClazz, targetDirectory);\n+                generateModelClassProto(modelClazz, targetDirectory).ifPresent(generatedFiles::add);\n             }\n-            this.generateProtoListing(targetDirectory);\n+            this.generateProtoListingFile(generatedFiles, targetDirectory).ifPresent(generatedFiles::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NjUyOQ==", "bodyText": "Why does generatedFiles contain files that you need to filter out?\nIn any case, what about add some log information? For example I think it could make sense to log (as debug) the number of generated files before and after the filter", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501596529", "createdAt": "2020-10-08T09:59:16Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "diffHunk": "@@ -113,18 +114,17 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                         parameters.add(t.getTypeName());\n                     }\n                 }\n-                \n+\n                 GeneratorContext context = GeneratorContext.ofResourcePath(kieSourcesDirectory);\n                 context.withBuildContext(discoverKogitoRuntimeContext(project));\n-                \n+\n                 String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n                 PersistenceGenerator persistenceGenerator = new PersistenceGenerator(new File(project.getBuild().getDirectory()), modelClasses, !classes.isEmpty(), new ReflectionProtoGenerator(), cl, parameters, persistenceType);\n                 persistenceGenerator.setPackageName(appPackageName);\n                 persistenceGenerator.setDependencyInjection(discoverDependencyInjectionAnnotator(project));\n                 persistenceGenerator.setContext(context);\n                 Collection<GeneratedFile> generatedFiles = persistenceGenerator.generate();\n-\n-\n+                generatedFiles = generatedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNDAyOA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501604028", "createdAt": "2020-10-08T10:11:28Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/JandexProtoGenerator.java", "diffHunk": "@@ -205,18 +207,18 @@ private void addEnumField(FieldInfo field, ProtoEnum pEnum) {\n                     dataModelClasses.add(index.getClassByName(pd.type().name()));\n                 }\n \n-                generateModelClassProto(modelClazz, targetDirectory);\n+                generateModelClassProto(modelClazz, targetDirectory).ifPresent(generatedFiles::add);\n             }\n \n-            this.generateProtoListing(targetDirectory);\n+            this.generateProtoListingFile(generatedFiles, targetDirectory).ifPresent(generatedFiles::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTAyMA==", "bodyText": "I have mixed feeling about this code, what if getGeneratedPersistenceFiles generates a file that is not a CLASS nor a GENERATED_CP_RESOURCE?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501679020", "createdAt": "2020-10-08T12:26:15Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -288,12 +293,14 @@ private void generatePersistenceInfo(AppPaths appPaths, IndexView inputIndex) th\n         }\n         GeneratorContext context = buildContext(appPaths, index);\n         String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n-        Collection<GeneratedFile> generatedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceGeneratedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceClasses = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());\n+        Collection<GeneratedFile> persistenceProtoFiles = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.GENERATED_CP_RESOURCE)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9bd3cc9ece6334ac4168b3bfde88e71fd877c4b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9bd3cc9ece6334ac4168b3bfde88e71fd877c4b", "committedDate": "2020-10-09T07:54:02Z", "message": "refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODc5NDI0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-511879424", "createdAt": "2020-10-19T15:19:26Z", "commit": {"oid": "e9bd3cc9ece6334ac4168b3bfde88e71fd877c4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c41a4dcc98a35c673a99666c7fdfd3468275055d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c41a4dcc98a35c673a99666c7fdfd3468275055d", "committedDate": "2020-10-20T10:45:42Z", "message": "add check on generated persistence files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzg0NTM2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-512784536", "createdAt": "2020-10-20T14:31:36Z", "commit": {"oid": "c41a4dcc98a35c673a99666c7fdfd3468275055d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NDkwMTc5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#pullrequestreview-514490179", "createdAt": "2020-10-22T08:39:49Z", "commit": {"oid": "c41a4dcc98a35c673a99666c7fdfd3468275055d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9585e82d147cffad9d6dc8b9fa6db1a160fb27", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9c9585e82d147cffad9d6dc8b9fa6db1a160fb27", "committedDate": "2020-10-22T11:58:07Z", "message": "Merge branch 'master' into KOGITO-3477-protobuf-refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45570e131c8f42590e7dc20db467a8c86ad1d1eb", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/45570e131c8f42590e7dc20db467a8c86ad1d1eb", "committedDate": "2020-10-22T12:37:12Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-3477-protobuf-refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "311dc5d4b512c56836632a11c03f00de8be45917", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/311dc5d4b512c56836632a11c03f00de8be45917", "committedDate": "2020-10-22T19:03:23Z", "message": "Merge branch 'master' into KOGITO-3477-protobuf-refactoring"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}