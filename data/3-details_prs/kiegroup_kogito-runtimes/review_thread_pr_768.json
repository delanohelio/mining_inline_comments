{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NzI2NDA1", "number": 768, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxODo0NlrOEkE-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMjoyMFrOEww6iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjY1ODIyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxODo0NlrOHSzJuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoxODo0NlrOHSzJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NDQ5MQ==", "bodyText": "Is it safe to get the first index without checking it first?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r489474491", "createdAt": "2020-09-16T14:18:46Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -162,7 +165,7 @@ public EndNode messageEndNode(long id, String name, Workflow workflow, End state\n         endNode.setId(id);\n         endNode.setName(name);\n \n-        EventDefinition eventDef = ServerlessWorkflowUtils.getWorkflowEventFor(workflow, stateEnd.getProduceEvent().getEventRef());\n+        EventDefinition eventDef = ServerlessWorkflowUtils.getWorkflowEventFor(workflow, stateEnd.getProduceEvents().get(0).getEventRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd93ca63c58afec5ff52161bbdc50ad15df4592"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjY3NzE3OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoyMjo0N1rOHSzVcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoyMjo0N1rOHSzVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NzQ4OQ==", "bodyText": "Maybe this could be simpler? I don't know, I might be missing something.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((branch.getActions() == null || branch.getActions().size() < 1) || branch.getWorkflowId() == null) {\n          \n          \n            \n                                if (branch.getWorkflowId() == null) {\n          \n          \n            \n                                    return false;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            if ((branch.getActions() == null || branch.getActions().size() < 1) && branch.getWorkflowId() == null) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r489477489", "createdAt": "2020-09-16T14:22:47Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -118,13 +115,14 @@ public static boolean includesSupportedStates(Workflow workflow) {\n     }\n \n     public static boolean supportedParallelState(ParallelState parallelState) {\n-        // currently branches must exist and states included can\n-        // be single subflow states only\n+        // currently branches must exist and can include only actions\n         // this will be improved in future\n         if (parallelState.getBranches() != null && parallelState.getBranches().size() > 0) {\n             for (Branch branch : parallelState.getBranches()) {\n-                if (branch.getStates() == null || branch.getStates().size() != 1 || !(branch.getStates().get(0) instanceof SubflowState)) {\n-                    return false;\n+                if ((branch.getActions() == null || branch.getActions().size() < 1) || branch.getWorkflowId() == null) {\n+                    if (branch.getWorkflowId() == null) {\n+                        return false;\n+                    }\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd93ca63c58afec5ff52161bbdc50ad15df4592"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDA0Mzg1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyODozMVrOHTBK8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyODozMVrOHTBK8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNDE3OQ==", "bodyText": "Can we get rid of the commented code?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r489704179", "createdAt": "2020-09-16T19:28:31Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "diffHunk": "@@ -95,17 +95,22 @@ public Process parseWorkFlow(Reader workflowFile) throws JsonProcessingException\n         }\n \n         List<State> workflowStates = workflow.getStates();\n-        List<Function> workflowFunctions = workflow.getFunctions();\n+        List<FunctionDefinition> workflowFunctions = workflow.getFunctions();\n \n-        StartNode workflowStartNode;\n+        StartNode workflowStartNode = null;\n         Map<String, EndNode> workflowEndNodes = new HashMap<>();\n \n         State workflowStartState = ServerlessWorkflowUtils.getWorkflowStartState(workflow);\n \n-        if (workflowStartState.getType().equals(Type.EVENT)) {\n-            EventState startEventState = (EventState) workflowStartState;\n-            workflowStartNode = factory.messageStartNode(idCounter.getAndIncrement(), ServerlessWorkflowUtils.getWorkflowEventFor(workflow, startEventState.getEventsActions().get(0).getEventRefs().get(0)), process);\n-        } else {\n+//        if (workflowStartState.getType().equals(Type.EVENT)) {\n+//            EventState startEventState = (EventState) workflowStartState;\n+//            workflowStartNode = factory.messageStartNode(idCounter.getAndIncrement(), ServerlessWorkflowUtils.getWorkflowEventFor(workflow, startEventState.getOnEvents().get(0).getEventRefs().get(0)), process);\n+//        } else {\n+//            workflowStartNode = factory.startNode(idCounter.getAndIncrement(), NODE_START_NAME, process);\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dccb51d169c8fb0a2ccf15e73789d50a8085951e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDE0MzU0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/EventStateSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODozNzo1N1rOHkxE3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyMTo0NlrOHm5_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDg0NA==", "bodyText": "I am seeing a few of these imports java.io.IOException in these classes, but I don't think the exception is actually thrown, you can probably remove them.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508314844", "createdAt": "2020-10-20T08:37:57Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/EventStateSerializer.java", "diffHunk": "@@ -28,6 +22,8 @@\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n import org.jbpm.serverless.workflow.api.states.EventState;\n \n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODA2Ng==", "bodyText": "The Serializers \"serialize\" method throws IOException", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558066", "createdAt": "2020-10-23T02:21:46Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/EventStateSerializer.java", "diffHunk": "@@ -28,6 +22,8 @@\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n import org.jbpm.serverless.workflow.api.states.EventState;\n \n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDg0NA=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDE0NTM4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/ForEachStateSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODozODoyNVrOHkxGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyMjo0MlrOHm6AJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTE2NA==", "bodyText": "see eg. another here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508315164", "createdAt": "2020-10-20T08:38:25Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/ForEachStateSerializer.java", "diffHunk": "@@ -1,32 +1,28 @@\n /*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *   Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.jbpm.serverless.workflow.api.serializers;\n \n-import java.io.IOException;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-import org.jbpm.serverless.workflow.api.states.ForEachState;\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n+import org.jbpm.serverless.workflow.api.states.ForEachState;\n+\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI0Ng==", "bodyText": "Yeah BeanSerializerFactory.instance.createSerializer throws it and we just re-throw in serialize method that calls it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558246", "createdAt": "2020-10-23T02:22:42Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/ForEachStateSerializer.java", "diffHunk": "@@ -1,32 +1,28 @@\n /*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *   Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.jbpm.serverless.workflow.api.serializers;\n \n-import java.io.IOException;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-import org.jbpm.serverless.workflow.api.states.ForEachState;\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n+import org.jbpm.serverless.workflow.api.states.ForEachState;\n+\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTE2NA=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDE0NTg4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/InjectStateSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODozODozM1rOHkxGbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyMjo1OVrOHm6AWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTI0Ng==", "bodyText": "etc. etc. :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508315246", "createdAt": "2020-10-20T08:38:33Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/InjectStateSerializer.java", "diffHunk": "@@ -1,32 +1,28 @@\n /*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *   Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.jbpm.serverless.workflow.api.serializers;\n \n-import java.io.IOException;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-import org.jbpm.serverless.workflow.api.states.InjectState;\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n+import org.jbpm.serverless.workflow.api.states.InjectState;\n+\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI5OQ==", "bodyText": ":)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558299", "createdAt": "2020-10-23T02:22:59Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/InjectStateSerializer.java", "diffHunk": "@@ -1,32 +1,28 @@\n /*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *   Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.jbpm.serverless.workflow.api.serializers;\n \n-import java.io.IOException;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-import org.jbpm.serverless.workflow.api.states.InjectState;\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n+import org.jbpm.serverless.workflow.api.states.InjectState;\n+\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTI0Ng=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDE1MzI3OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwODo0MDoxMVrOHkxK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyMzozOVrOHm6A8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjM4OA==", "bodyText": "I wish we will be able to revisit some of this codegen in the near future. String concat is a bit error-prone this way", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508316388", "createdAt": "2020-10-20T08:40:11Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,32 +150,27 @@ public static String scriptFunctionScript(String script) {\n         return retStr;\n     }\n \n-    public static String conditionScript(String path, DataCondition.Operator operator, String value) {\n-        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n-\n-        if (path.startsWith(\"$.\")) {\n-            path = path.substring(2);\n-        } else if (path.indexOf(\".\") >= 0) {\n-            workflowVar = path.split(\"\\\\.\")[0];\n-            path = path.substring(workflowVar.length() + 1);\n+    public static String conditionScript(String conditionStr) {\n+        if (conditionStr.startsWith(\"{{\")) {\n+            conditionStr = conditionStr.substring(2);\n+        }\n+        if (conditionStr.endsWith(\"}}\")) {\n+            conditionStr = conditionStr.substring(0, conditionStr.length() - 2);\n         }\n \n-        String workflowDataToInteger = \"return java.lang.Integer.parseInt(\" + workflowVar + \".get(\\\"\";\n-\n-        String retStr = \"\";\n-        if (operator == DataCondition.Operator.EQUALS) {\n-            retStr += \"return \" + workflowVar + \".get(\\\"\" + path + \"\\\").textValue().equals(\\\"\" + value + \"\\\");\";\n-        } else if (operator == DataCondition.Operator.GREATERTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) > \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.GREATERTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) >= \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) < \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) <= \" + value + \";\";\n+        conditionStr = conditionStr.trim();\n+\n+        // check if we are calling a different workflow var\n+        String processVar = \"workflowdata\";\n+        String otherVar = conditionStr.substring(conditionStr.indexOf(\"$\") + 1, conditionStr.indexOf(\".\"));\n+\n+        if(otherVar.trim().length() > 0) {\n+            processVar = otherVar;\n+            conditionStr = conditionStr.replaceAll(otherVar, \"\");\n+\n         }\n \n-        return retStr;\n+        return \"return !((java.util.List<java.lang.String>) com.jayway.jsonpath.JsonPath.parse(((com.fasterxml.jackson.databind.JsonNode)kcontext.getVariable(\\\"\" + processVar + \"\\\")).toString()).read(\\\"\" + conditionStr + \"\\\")).isEmpty();\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MjA3Mg==", "bodyText": "+1, would be good to have some way to at least hide this inside a utility method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510142072", "createdAt": "2020-10-22T13:01:48Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,32 +150,27 @@ public static String scriptFunctionScript(String script) {\n         return retStr;\n     }\n \n-    public static String conditionScript(String path, DataCondition.Operator operator, String value) {\n-        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n-\n-        if (path.startsWith(\"$.\")) {\n-            path = path.substring(2);\n-        } else if (path.indexOf(\".\") >= 0) {\n-            workflowVar = path.split(\"\\\\.\")[0];\n-            path = path.substring(workflowVar.length() + 1);\n+    public static String conditionScript(String conditionStr) {\n+        if (conditionStr.startsWith(\"{{\")) {\n+            conditionStr = conditionStr.substring(2);\n+        }\n+        if (conditionStr.endsWith(\"}}\")) {\n+            conditionStr = conditionStr.substring(0, conditionStr.length() - 2);\n         }\n \n-        String workflowDataToInteger = \"return java.lang.Integer.parseInt(\" + workflowVar + \".get(\\\"\";\n-\n-        String retStr = \"\";\n-        if (operator == DataCondition.Operator.EQUALS) {\n-            retStr += \"return \" + workflowVar + \".get(\\\"\" + path + \"\\\").textValue().equals(\\\"\" + value + \"\\\");\";\n-        } else if (operator == DataCondition.Operator.GREATERTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) > \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.GREATERTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) >= \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) < \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) <= \" + value + \";\";\n+        conditionStr = conditionStr.trim();\n+\n+        // check if we are calling a different workflow var\n+        String processVar = \"workflowdata\";\n+        String otherVar = conditionStr.substring(conditionStr.indexOf(\"$\") + 1, conditionStr.indexOf(\".\"));\n+\n+        if(otherVar.trim().length() > 0) {\n+            processVar = otherVar;\n+            conditionStr = conditionStr.replaceAll(otherVar, \"\");\n+\n         }\n \n-        return retStr;\n+        return \"return !((java.util.List<java.lang.String>) com.jayway.jsonpath.JsonPath.parse(((com.fasterxml.jackson.databind.JsonNode)kcontext.getVariable(\\\"\" + processVar + \"\\\")).toString()).read(\\\"\" + conditionStr + \"\\\")).isEmpty();\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjM4OA=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODQ0OQ==", "bodyText": "ok", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558449", "createdAt": "2020-10-23T02:23:39Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,32 +150,27 @@ public static String scriptFunctionScript(String script) {\n         return retStr;\n     }\n \n-    public static String conditionScript(String path, DataCondition.Operator operator, String value) {\n-        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n-\n-        if (path.startsWith(\"$.\")) {\n-            path = path.substring(2);\n-        } else if (path.indexOf(\".\") >= 0) {\n-            workflowVar = path.split(\"\\\\.\")[0];\n-            path = path.substring(workflowVar.length() + 1);\n+    public static String conditionScript(String conditionStr) {\n+        if (conditionStr.startsWith(\"{{\")) {\n+            conditionStr = conditionStr.substring(2);\n+        }\n+        if (conditionStr.endsWith(\"}}\")) {\n+            conditionStr = conditionStr.substring(0, conditionStr.length() - 2);\n         }\n \n-        String workflowDataToInteger = \"return java.lang.Integer.parseInt(\" + workflowVar + \".get(\\\"\";\n-\n-        String retStr = \"\";\n-        if (operator == DataCondition.Operator.EQUALS) {\n-            retStr += \"return \" + workflowVar + \".get(\\\"\" + path + \"\\\").textValue().equals(\\\"\" + value + \"\\\");\";\n-        } else if (operator == DataCondition.Operator.GREATERTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) > \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.GREATERTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) >= \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) < \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) <= \" + value + \";\";\n+        conditionStr = conditionStr.trim();\n+\n+        // check if we are calling a different workflow var\n+        String processVar = \"workflowdata\";\n+        String otherVar = conditionStr.substring(conditionStr.indexOf(\"$\") + 1, conditionStr.indexOf(\".\"));\n+\n+        if(otherVar.trim().length() > 0) {\n+            processVar = otherVar;\n+            conditionStr = conditionStr.replaceAll(otherVar, \"\");\n+\n         }\n \n-        return retStr;\n+        return \"return !((java.util.List<java.lang.String>) com.jayway.jsonpath.JsonPath.parse(((com.fasterxml.jackson.databind.JsonNode)kcontext.getVariable(\\\"\" + processVar + \"\\\")).toString()).read(\\\"\" + conditionStr + \"\\\")).isEmpty();\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjM4OA=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTU5OTEwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/utils/WorkflowTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzowMzoyNlrOHmgqrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyNjowMFrOHm6DPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MzE0OQ==", "bodyText": "maybe do a more specific import?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510143149", "createdAt": "2020-10-22T13:03:26Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/utils/WorkflowTestUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jbpm.serverless.workflow.utils;\n+\n+\n+import org.jbpm.serverless.workflow.api.mapper.JsonObjectMapper;\n+import org.jbpm.serverless.workflow.api.mapper.YamlObjectMapper;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTAzOQ==", "bodyText": "ok", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510559039", "createdAt": "2020-10-23T02:26:00Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/utils/WorkflowTestUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jbpm.serverless.workflow.utils;\n+\n+\n+import org.jbpm.serverless.workflow.api.mapper.JsonObjectMapper;\n+import org.jbpm.serverless.workflow.api.mapper.YamlObjectMapper;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MzE0OQ=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTY4NTIzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/workflow/BaseWorkflow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyMjoyMFrOHmhfxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyOTozOFrOHm6Gcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1Njc0Mg==", "bodyText": "I think you can try something like the code below to avoid the roundtrip to String and back.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String jsonString = jsonObjectMapper.writeValueAsString(workflow);\n          \n          \n            \n                        JsonNode jsonNode = jsonObjectMapper.valueToTree(workflow)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510156742", "createdAt": "2020-10-22T13:22:20Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/workflow/BaseWorkflow.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.serverless.workflow.api.workflow;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import org.jbpm.serverless.workflow.api.Workflow;\n+import org.jbpm.serverless.workflow.api.mapper.JsonObjectMapper;\n+import org.jbpm.serverless.workflow.api.mapper.YamlObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base Workflow provides some extra functionality for the Workflow types\n+ */\n+public class BaseWorkflow {\n+\n+    private static JsonObjectMapper jsonObjectMapper = new JsonObjectMapper();\n+    private static YamlObjectMapper yamlObjectMapper = new YamlObjectMapper();\n+\n+    private static Logger logger = LoggerFactory.getLogger(BaseWorkflow.class);\n+\n+    public static Workflow fromSource(String source) {\n+        // try it as json markup first, if fails try yaml\n+        try {\n+            return jsonObjectMapper.readValue(source,\n+                    Workflow.class);\n+        } catch (Exception e) {\n+            try {\n+                return yamlObjectMapper.readValue(source,\n+                        Workflow.class);\n+            } catch (Exception ee) {\n+                throw new IllegalArgumentException(\"Could not convert markup to Workflow: \" + ee.getMessage());\n+            }\n+        }\n+    }\n+\n+    public static String toJson(Workflow workflow) {\n+        try {\n+            return jsonObjectMapper.writeValueAsString(workflow);\n+        } catch (JsonProcessingException e) {\n+            logger.error(\"Error mapping to json: {}\", e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    public static String toYaml(Workflow workflow) {\n+        try {\n+            String jsonString = jsonObjectMapper.writeValueAsString(workflow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTg1OQ==", "bodyText": "ok", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510559859", "createdAt": "2020-10-23T02:29:38Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/workflow/BaseWorkflow.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.serverless.workflow.api.workflow;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import org.jbpm.serverless.workflow.api.Workflow;\n+import org.jbpm.serverless.workflow.api.mapper.JsonObjectMapper;\n+import org.jbpm.serverless.workflow.api.mapper.YamlObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base Workflow provides some extra functionality for the Workflow types\n+ */\n+public class BaseWorkflow {\n+\n+    private static JsonObjectMapper jsonObjectMapper = new JsonObjectMapper();\n+    private static YamlObjectMapper yamlObjectMapper = new YamlObjectMapper();\n+\n+    private static Logger logger = LoggerFactory.getLogger(BaseWorkflow.class);\n+\n+    public static Workflow fromSource(String source) {\n+        // try it as json markup first, if fails try yaml\n+        try {\n+            return jsonObjectMapper.readValue(source,\n+                    Workflow.class);\n+        } catch (Exception e) {\n+            try {\n+                return yamlObjectMapper.readValue(source,\n+                        Workflow.class);\n+            } catch (Exception ee) {\n+                throw new IllegalArgumentException(\"Could not convert markup to Workflow: \" + ee.getMessage());\n+            }\n+        }\n+    }\n+\n+    public static String toJson(Workflow workflow) {\n+        try {\n+            return jsonObjectMapper.writeValueAsString(workflow);\n+        } catch (JsonProcessingException e) {\n+            logger.error(\"Error mapping to json: {}\", e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    public static String toYaml(Workflow workflow) {\n+        try {\n+            String jsonString = jsonObjectMapper.writeValueAsString(workflow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1Njc0Mg=="}, "originalCommit": {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4775, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}