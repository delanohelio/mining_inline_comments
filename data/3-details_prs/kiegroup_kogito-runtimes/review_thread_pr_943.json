{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDI5MDEy", "number": 943, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzowNjozNFrOFIJr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxOToxMFrOFIJ7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDkxNjIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AddonsConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzowNjozNFrOIJ6jAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowMzoyMVrOIJ8OqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2NzMyOQ==", "bodyText": "nitpicking but those methods return a value.\nWhen I see useXXX, I think that it will set the boolean to true.\nCould we rename those methods to something like isUsingXXX or hasXXX ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547267329", "createdAt": "2020-12-22T13:06:34Z", "author": {"login": "radtriste"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AddonsConfig.java", "diffHunk": "@@ -17,49 +17,29 @@\n \n public class AddonsConfig {\n \n-    public static final AddonsConfig DEFAULT = new AddonsConfig()\n+    public static final AddonsConfig DEFAULT = builder()\n             .withPersistence(false)\n             .withTracing(false)\n             .withMonitoring(false)\n             .withPrometheusMonitoring(false)\n             .withKnativeEventing(false)\n-            .withCloudEvents(false);\n+            .withCloudEvents(false)\n+            .build();\n \n-    private boolean usePersistence;\n-    private boolean useTracing;\n-    private boolean useMonitoring;\n-    private boolean usePrometheusMonitoring;\n-    private boolean useKnativeEventing;\n-    private boolean useCloudEvents;\n+    private final boolean usePersistence;\n+    private final boolean useTracing;\n+    private final boolean useMonitoring;\n+    private final boolean usePrometheusMonitoring;\n+    private final boolean useKnativeEventing;\n+    private final boolean useCloudEvents;\n \n-    public AddonsConfig withPersistence(boolean usePersistence) {\n+    private AddonsConfig(boolean usePersistence, boolean useTracing, boolean useMonitoring, boolean usePrometheusMonitoring, boolean useKnativeEventing, boolean useCloudEvents) {\n         this.usePersistence = usePersistence;\n-        return this;\n-    }\n-\n-    public AddonsConfig withTracing(boolean useTracing) {\n         this.useTracing = useTracing;\n-        return this;\n-    }\n-\n-    public AddonsConfig withMonitoring(boolean useMonitoring) {\n         this.useMonitoring = useMonitoring;\n-        return this;\n-    }\n-\n-    public AddonsConfig withPrometheusMonitoring(boolean usePrometheusMonitoring) {\n         this.usePrometheusMonitoring = usePrometheusMonitoring;\n-        return this;\n-    }\n-\n-    public AddonsConfig withKnativeEventing(boolean useKnativeEventing) {\n         this.useKnativeEventing = useKnativeEventing;\n-        return this;\n-    }\n-\n-    public AddonsConfig withCloudEvents(boolean useCloudEvents) {\n         this.useCloudEvents = useCloudEvents;\n-        return this;\n     }\n \n     public boolean usePersistence() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NDg4OA==", "bodyText": "Personally I would like to make AddonsConfig similar to Application/Config with a generic has(Class) method to make it extendable but I prefer to cover this with another ticket\nhttps://issues.redhat.com/browse/KOGITO-4071", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547294888", "createdAt": "2020-12-22T14:03:21Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AddonsConfig.java", "diffHunk": "@@ -17,49 +17,29 @@\n \n public class AddonsConfig {\n \n-    public static final AddonsConfig DEFAULT = new AddonsConfig()\n+    public static final AddonsConfig DEFAULT = builder()\n             .withPersistence(false)\n             .withTracing(false)\n             .withMonitoring(false)\n             .withPrometheusMonitoring(false)\n             .withKnativeEventing(false)\n-            .withCloudEvents(false);\n+            .withCloudEvents(false)\n+            .build();\n \n-    private boolean usePersistence;\n-    private boolean useTracing;\n-    private boolean useMonitoring;\n-    private boolean usePrometheusMonitoring;\n-    private boolean useKnativeEventing;\n-    private boolean useCloudEvents;\n+    private final boolean usePersistence;\n+    private final boolean useTracing;\n+    private final boolean useMonitoring;\n+    private final boolean usePrometheusMonitoring;\n+    private final boolean useKnativeEventing;\n+    private final boolean useCloudEvents;\n \n-    public AddonsConfig withPersistence(boolean usePersistence) {\n+    private AddonsConfig(boolean usePersistence, boolean useTracing, boolean useMonitoring, boolean usePrometheusMonitoring, boolean useKnativeEventing, boolean useCloudEvents) {\n         this.usePersistence = usePersistence;\n-        return this;\n-    }\n-\n-    public AddonsConfig withTracing(boolean useTracing) {\n         this.useTracing = useTracing;\n-        return this;\n-    }\n-\n-    public AddonsConfig withMonitoring(boolean useMonitoring) {\n         this.useMonitoring = useMonitoring;\n-        return this;\n-    }\n-\n-    public AddonsConfig withPrometheusMonitoring(boolean usePrometheusMonitoring) {\n         this.usePrometheusMonitoring = usePrometheusMonitoring;\n-        return this;\n-    }\n-\n-    public AddonsConfig withKnativeEventing(boolean useKnativeEventing) {\n         this.useKnativeEventing = useKnativeEventing;\n-        return this;\n-    }\n-\n-    public AddonsConfig withCloudEvents(boolean useCloudEvents) {\n         this.useCloudEvents = useCloudEvents;\n-        return this;\n     }\n \n     public boolean usePersistence() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2NzMyOQ=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk0MTE5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxNDo0MlrOIJ6xfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1ODoxOFrOIJ8ETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTAzOA==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547271038", "createdAt": "2020-12-22T13:14:42Z", "author": {"login": "radtriste"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -57,9 +58,9 @@ public void setUp() {\n     }\n \n     @Test\n-    void testCreateQuarkus(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getBuildContext()).thenReturn(new QuarkusKogitoBuildContext(p -> true));\n-        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n+    void testCreateQuarkus() {\n+        KogitoBuildContext buildContext = QuarkusKogitoBuildContext.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjIzNg==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547292236", "createdAt": "2020-12-22T13:58:18Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -57,9 +58,9 @@ public void setUp() {\n     }\n \n     @Test\n-    void testCreateQuarkus(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getBuildContext()).thenReturn(new QuarkusKogitoBuildContext(p -> true));\n-        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n+    void testCreateQuarkus() {\n+        KogitoBuildContext buildContext = QuarkusKogitoBuildContext.builder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTAzOA=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk0MTQ4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxNDo0N1rOIJ6xrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1ODoxNFrOIJ8EHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTA4NQ==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547271085", "createdAt": "2020-12-22T13:14:47Z", "author": {"login": "radtriste"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -69,11 +70,15 @@ void testCreateQuarkus(@Mock GeneratorContext generatorContext) {\n     }\n \n     @Test\n-    void testCreateQuarkusReactive(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getApplicationProperty(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP)).thenReturn(Optional.of(\"reactive\"));\n-        when(generatorContext.getBuildContext()).thenReturn(new QuarkusKogitoBuildContext(p -> true));\n+    void testCreateQuarkusReactive() {\n+        Properties properties = new Properties();\n+        properties.put(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP, \"reactive\");\n \n-        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n+        KogitoBuildContext buildContext = QuarkusKogitoBuildContext.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjE4OQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547292189", "createdAt": "2020-12-22T13:58:14Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -69,11 +70,15 @@ void testCreateQuarkus(@Mock GeneratorContext generatorContext) {\n     }\n \n     @Test\n-    void testCreateQuarkusReactive(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getApplicationProperty(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP)).thenReturn(Optional.of(\"reactive\"));\n-        when(generatorContext.getBuildContext()).thenReturn(new QuarkusKogitoBuildContext(p -> true));\n+    void testCreateQuarkusReactive() {\n+        Properties properties = new Properties();\n+        properties.put(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP, \"reactive\");\n \n-        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n+        KogitoBuildContext buildContext = QuarkusKogitoBuildContext.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTA4NQ=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk0MTU4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxNDo1MVrOIJ6xvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1ODoxMFrOIJ8D-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTEwMA==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547271100", "createdAt": "2020-12-22T13:14:51Z", "author": {"login": "radtriste"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -83,9 +88,9 @@ void testCreateQuarkusReactive(@Mock GeneratorContext generatorContext) {\n     }\n \n     @Test\n-    void testCreateSpring(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getBuildContext()).thenReturn(new SpringBootKogitoBuildContext(p -> true));\n-        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n+    void testCreateSpring() {\n+        KogitoBuildContext buildContext = SpringBootKogitoBuildContext.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjE1Mg==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547292152", "createdAt": "2020-12-22T13:58:10Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -83,9 +88,9 @@ void testCreateQuarkusReactive(@Mock GeneratorContext generatorContext) {\n     }\n \n     @Test\n-    void testCreateSpring(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getBuildContext()).thenReturn(new SpringBootKogitoBuildContext(p -> true));\n-        Optional<AbstractResourceGenerator> context = tested.create(generatorContext,\n+    void testCreateSpring() {\n+        KogitoBuildContext buildContext = SpringBootKogitoBuildContext.builder().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTEwMA=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk0MTc4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxNDo1NFrOIJ6x2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1ODowNVrOIJ8Dzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTEyOQ==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547271129", "createdAt": "2020-12-22T13:14:54Z", "author": {"login": "radtriste"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -95,11 +100,15 @@ void testCreateSpring(@Mock GeneratorContext generatorContext) {\n     }\n \n     @Test\n-    void testCreateSpringReactive(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getApplicationProperty(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP)).thenReturn(Optional.of(\"reactive\"));\n-        when(generatorContext.getBuildContext()).thenReturn(new SpringBootKogitoBuildContext(p -> true));\n+    void testCreateSpringReactive() {\n+        Properties properties = new Properties();\n+        properties.put(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP, \"reactive\");\n+\n+        KogitoBuildContext buildContext = SpringBootKogitoBuildContext.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjExMQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547292111", "createdAt": "2020-12-22T13:58:05Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ResourceGeneratorFactoryTest.java", "diffHunk": "@@ -95,11 +100,15 @@ void testCreateSpring(@Mock GeneratorContext generatorContext) {\n     }\n \n     @Test\n-    void testCreateSpringReactive(@Mock GeneratorContext generatorContext) {\n-        when(generatorContext.getApplicationProperty(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP)).thenReturn(Optional.of(\"reactive\"));\n-        when(generatorContext.getBuildContext()).thenReturn(new SpringBootKogitoBuildContext(p -> true));\n+    void testCreateSpringReactive() {\n+        Properties properties = new Properties();\n+        properties.put(GeneratorConfig.KOGITO_REST_RESOURCE_TYPE_PROP, \"reactive\");\n+\n+        KogitoBuildContext buildContext = SpringBootKogitoBuildContext.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MTEyOQ=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk1MTg2OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DMNCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxNzo0NVrOIJ63kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1ODowMVrOIJ8DnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MjU5Mg==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547272592", "createdAt": "2020-12-22T13:17:45Z", "author": {"login": "radtriste"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DMNCompilationProvider.java", "diffHunk": "@@ -35,9 +36,10 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) throws IOException {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) throws IOException {\n         Path path = context.getProjectDirectory().toPath().resolve(\"src\").resolve(\"main\").resolve(\"resources\");\n         return appGen.setupGenerator(DecisionCodegen.ofCollectedResources(\n+                buildContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjA2MA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547292060", "createdAt": "2020-12-22T13:58:01Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DMNCompilationProvider.java", "diffHunk": "@@ -35,9 +36,10 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) throws IOException {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) throws IOException {\n         Path path = context.getProjectDirectory().toPath().resolve(\"src\").resolve(\"main\").resolve(\"resources\");\n         return appGen.setupGenerator(DecisionCodegen.ofCollectedResources(\n+                buildContext,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MjU5Mg=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk1MjYwOnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DecisionTablesCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxODowMVrOIJ64Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1Nzo1N1rOIJ8DeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MjcxMQ==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547272711", "createdAt": "2020-12-22T13:18:01Z", "author": {"login": "radtriste"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DecisionTablesCompilationProvider.java", "diffHunk": "@@ -39,11 +40,12 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjAyNA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547292024", "createdAt": "2020-12-22T13:57:57Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DecisionTablesCompilationProvider.java", "diffHunk": "@@ -39,11 +40,12 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MjcxMQ=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk1NTA4OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxODo0NlrOIJ65ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1Nzo1M1rOIJ8DUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzA2Ng==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547273066", "createdAt": "2020-12-22T13:18:46Z", "author": {"login": "radtriste"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoCompilationProvider.java", "diffHunk": "@@ -60,14 +60,17 @@ public final void compile(Set<File> filesToCompile, Context context) {\n \n         File outputDirectory = context.getOutputDirectory();\n         try {\n-            GeneratorContext generationContext = GeneratorContext\n-                    .ofResourcePath(context.getProjectDirectory().toPath().resolve(\"src/main/resources\").toFile());\n-            generationContext\n-                    .withBuildContext(new QuarkusKogitoBuildContext(className -> hasClassOnClasspath(cl, className)));\n+            KogitoBuildContext buildContext = QuarkusKogitoBuildContext.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MTk4Nw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547291987", "createdAt": "2020-12-22T13:57:53Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoCompilationProvider.java", "diffHunk": "@@ -60,14 +60,17 @@ public final void compile(Set<File> filesToCompile, Context context) {\n \n         File outputDirectory = context.getOutputDirectory();\n         try {\n-            GeneratorContext generationContext = GeneratorContext\n-                    .ofResourcePath(context.getProjectDirectory().toPath().resolve(\"src/main/resources\").toFile());\n-            generationContext\n-                    .withBuildContext(new QuarkusKogitoBuildContext(className -> hasClassOnClasspath(cl, className)));\n+            KogitoBuildContext buildContext = QuarkusKogitoBuildContext.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzA2Ng=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk1NTM5OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxODo1M1rOIJ65lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1NzoyOVrOIJ8ClA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzEwOQ==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547273109", "createdAt": "2020-12-22T13:18:53Z", "author": {"login": "radtriste"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoCompilationProvider.java", "diffHunk": "@@ -102,7 +105,11 @@ public Path getSourcePath(Path classFilePath, Set<String> sourcePaths, String cl\n         return null;\n     }\n \n-    protected abstract Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl)\n+    protected abstract Generator addGenerator(ApplicationGenerator appGen,\n+                                              KogitoBuildContext buildContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MTc5Ng==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547291796", "createdAt": "2020-12-22T13:57:29Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoCompilationProvider.java", "diffHunk": "@@ -102,7 +105,11 @@ public Path getSourcePath(Path classFilePath, Set<String> sourcePaths, String cl\n         return null;\n     }\n \n-    protected abstract Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl)\n+    protected abstract Generator addGenerator(ApplicationGenerator appGen,\n+                                              KogitoBuildContext buildContext,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzEwOQ=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk1NTc0OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/ProcessCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxOTowMVrOIJ65zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1NzozOFrOIJ8C5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzE2NA==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547273164", "createdAt": "2020-12-22T13:19:01Z", "author": {"login": "radtriste"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/ProcessCompilationProvider.java", "diffHunk": "@@ -36,10 +37,12 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MTg3Nw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547291877", "createdAt": "2020-12-22T13:57:38Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/ProcessCompilationProvider.java", "diffHunk": "@@ -36,10 +37,12 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzE2NA=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDk1NjI0OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/RulesCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxOToxMFrOIJ66Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1Nzo0N1rOIJ8DKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzIyMw==", "bodyText": "rename to context", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547273223", "createdAt": "2020-12-22T13:19:10Z", "author": {"login": "radtriste"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/RulesCompilationProvider.java", "diffHunk": "@@ -35,11 +36,12 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MTk0Nw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/943#discussion_r547291947", "createdAt": "2020-12-22T13:57:47Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/RulesCompilationProvider.java", "diffHunk": "@@ -35,11 +36,12 @@\n     }\n \n     @Override\n-    protected Generator addGenerator(ApplicationGenerator appGen, Set<File> filesToCompile, Context context, ClassLoader cl) {\n+    protected Generator addGenerator(ApplicationGenerator appGen, KogitoBuildContext buildContext, Set<File> filesToCompile, Context context, ClassLoader cl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzIyMw=="}, "originalCommit": {"oid": "6e2bba490be9543f79262569ca8bf674c0b24944"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4747, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}