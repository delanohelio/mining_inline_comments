{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NzQ1OTE2", "number": 805, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNzo0N1rOEqTGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjoyNjoxNVrOErls5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzg4NjU1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNzo0N1rOHcbFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNzo0N1rOHcbFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2NTg4MQ==", "bodyText": "We have to keep writing this file directly to the FS since the protobuf generation code is a bit more complicated to be refactored (there are some procedures that need these files to be there before we really write the GeneratedFiles with the kogito file hanlder) and I'd like to do that in another dedicated ticket.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499565881", "createdAt": "2020-10-05T12:37:47Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n         String protoFileName = processId + \".proto\";\n-        List<Path> protoFilePaths = new ArrayList<>();\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName));\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH + protoFileName));\n-        for (Path protoFilePath : protoFilePaths) {\n-            Files.createDirectories(protoFilePath.getParent());\n-            Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n-        }\n+        List<GeneratedFile> protoFiles = new ArrayList<>();\n+\n+        protoFiles.add(new GeneratedFile(GeneratedFile.Type.GENERATED_CP_RESOURCE,\n+                                         GENERATED_PROTO_RES_PATH + protoFileName,\n+                                         modelProto.toString().getBytes(StandardCharsets.UTF_8))\n+        );\n+\n+        Path protoFilePath = Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzg5MTc1OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozOToyMFrOHcbIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozOToyMFrOHcbIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2Njc0Mw==", "bodyText": "As I've investigated here in the comments https://issues.redhat.com/browse/KOGITO-3477 quarkus does not register the generated static resources, that's why we need undertow in the final project.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499566743", "createdAt": "2020-10-05T12:39:20Z", "author": {"login": "r00ta"}, "path": "kogito-quarkus-extension/deployment/pom.xml", "diffHunk": "@@ -40,6 +40,11 @@\n             <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n             <version>${version.io.quarkus}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-undertow-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf467b06e49fe4c8f39df2d430ab70d2e845bbe"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY3MjIyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNToyOVrOHciqgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTowMjoxOVrOHc80hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MDExMg==", "bodyText": "Maybe this is not a list? Since it's one protobuf file per process id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499690112", "createdAt": "2020-10-05T15:35:29Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExODY2MQ==", "bodyText": "Refactored \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r500118661", "createdAt": "2020-10-06T09:02:19Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MDExMg=="}, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY4NTA4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozODoyNlrOHciyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoyNDowN1rOHc_wow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjE2NQ==", "bodyText": "Is this safe? Won't make sense to do some checks first? I understand that's unlikely, but we could see ArrayBounds | NPE exceptions in the log that would be hard to track. :/", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r499692165", "createdAt": "2020-10-05T15:38:26Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n         String protoFileName = processId + \".proto\";\n-        List<Path> protoFilePaths = new ArrayList<>();\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName));\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH + protoFileName));\n-        for (Path protoFilePath : protoFilePaths) {\n-            Files.createDirectories(protoFilePath.getParent());\n-            Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n-        }\n+        List<GeneratedFile> protoFiles = new ArrayList<>();\n+\n+        protoFiles.add(new GeneratedFile(GeneratedFile.Type.GENERATED_CP_RESOURCE,\n+                                         GENERATED_PROTO_RES_PATH + protoFileName,\n+                                         modelProto.toString().getBytes(StandardCharsets.UTF_8))\n+        );\n+\n+        Path protoFilePath = Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName);\n+        Files.createDirectories(protoFilePath.getParent());\n+        Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n+\n+        return protoFiles;\n     }\n \n     /**\n-     * Reads from the persistence directory and generates a listing file ({@link #LISTING_FILE}) from its content\n+     * Iterates over the generated files and extract all the proto files. Then it creates and add to the generated files collection\n+     * a listing file ({@link #LISTING_FILE}) from its content.\n      *\n-     * @param targetDirectory target directory generated by Maven\n+     * @param generatedFiles  The list of generated files.\n+     * @param targetDirectory target directory generated by Maven.\n      * @throws IOException if something wrong occurs during I/O\n      */\n-    public final void generateProtoListing(final String targetDirectory) throws IOException {\n-        final Path persistencePath = Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH);\n-        final List<String> fileList = new ArrayList<>();\n-        if (Files.isDirectory(persistencePath)) {\n-            for (final File protoFile : persistencePath.toFile().listFiles((dir, name) ->\n-                                                                                   name.toLowerCase().endsWith(PersistenceProtoFilesLabeler.PROTO_FILE_EXT))) {\n-                fileList.add(protoFile.getName());\n-            }\n+    public final Optional<GeneratedFile> generateProtoListingFile(Collection<GeneratedFile> generatedFiles, final String targetDirectory) throws IOException {\n+        List<String> fileNames = generatedFiles.stream()\n+                .filter(x -> x.relativePath().contains(GENERATED_PROTO_RES_PATH))\n+                .map(x -> x.relativePath().substring(x.relativePath().lastIndexOf(\"/\") + 1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5NTgzMw==", "bodyText": "In theory this is not possible since we first check that the relative path contains GENERATED_PROTO_RES_PATH, which contains slashes. If GENERATED_PROTO_RES_PATH will change to a string without slashes, yeah, there will be exceptions we will be caught by the tests.\nFor me it's ok to leave it as it is since the relative path is static and well known, but if you think we should make some checks anyway I'll do that. Let me know what you think @ricardozanini", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r500095833", "createdAt": "2020-10-06T08:27:21Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n         String protoFileName = processId + \".proto\";\n-        List<Path> protoFilePaths = new ArrayList<>();\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName));\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH + protoFileName));\n-        for (Path protoFilePath : protoFilePaths) {\n-            Files.createDirectories(protoFilePath.getParent());\n-            Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n-        }\n+        List<GeneratedFile> protoFiles = new ArrayList<>();\n+\n+        protoFiles.add(new GeneratedFile(GeneratedFile.Type.GENERATED_CP_RESOURCE,\n+                                         GENERATED_PROTO_RES_PATH + protoFileName,\n+                                         modelProto.toString().getBytes(StandardCharsets.UTF_8))\n+        );\n+\n+        Path protoFilePath = Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName);\n+        Files.createDirectories(protoFilePath.getParent());\n+        Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n+\n+        return protoFiles;\n     }\n \n     /**\n-     * Reads from the persistence directory and generates a listing file ({@link #LISTING_FILE}) from its content\n+     * Iterates over the generated files and extract all the proto files. Then it creates and add to the generated files collection\n+     * a listing file ({@link #LISTING_FILE}) from its content.\n      *\n-     * @param targetDirectory target directory generated by Maven\n+     * @param generatedFiles  The list of generated files.\n+     * @param targetDirectory target directory generated by Maven.\n      * @throws IOException if something wrong occurs during I/O\n      */\n-    public final void generateProtoListing(final String targetDirectory) throws IOException {\n-        final Path persistencePath = Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH);\n-        final List<String> fileList = new ArrayList<>();\n-        if (Files.isDirectory(persistencePath)) {\n-            for (final File protoFile : persistencePath.toFile().listFiles((dir, name) ->\n-                                                                                   name.toLowerCase().endsWith(PersistenceProtoFilesLabeler.PROTO_FILE_EXT))) {\n-                fileList.add(protoFile.getName());\n-            }\n+    public final Optional<GeneratedFile> generateProtoListingFile(Collection<GeneratedFile> generatedFiles, final String targetDirectory) throws IOException {\n+        List<String> fileNames = generatedFiles.stream()\n+                .filter(x -> x.relativePath().contains(GENERATED_PROTO_RES_PATH))\n+                .map(x -> x.relativePath().substring(x.relativePath().lastIndexOf(\"/\") + 1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjE2NQ=="}, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NjgxOQ==", "bodyText": "Oh don't mind. I just brought this up because I always fear the split with magic numbers combination! Hahaha", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r500166819", "createdAt": "2020-10-06T10:24:07Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGenerator.java", "diffHunk": "@@ -41,34 +43,43 @@ public AbstractProtoGenerator() {\n     }\n \n     /**\n-     * Flushes the generated proto files into the FileSystem\n+     * Generates the proto files from the given model.\n      */\n-    public final void writeFilesToFS(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n+    public final List<GeneratedFile> generateProtoFiles(final String processId, final String targetDirectory, final Proto modelProto) throws IOException {\n         String protoFileName = processId + \".proto\";\n-        List<Path> protoFilePaths = new ArrayList<>();\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName));\n-        protoFilePaths.add(Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH + protoFileName));\n-        for (Path protoFilePath : protoFilePaths) {\n-            Files.createDirectories(protoFilePath.getParent());\n-            Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n-        }\n+        List<GeneratedFile> protoFiles = new ArrayList<>();\n+\n+        protoFiles.add(new GeneratedFile(GeneratedFile.Type.GENERATED_CP_RESOURCE,\n+                                         GENERATED_PROTO_RES_PATH + protoFileName,\n+                                         modelProto.toString().getBytes(StandardCharsets.UTF_8))\n+        );\n+\n+        Path protoFilePath = Paths.get(targetDirectory, GENERATED_PROTO_PERSISTENCE_PATH + protoFileName);\n+        Files.createDirectories(protoFilePath.getParent());\n+        Files.write(protoFilePath, modelProto.toString().getBytes(StandardCharsets.UTF_8));\n+\n+        return protoFiles;\n     }\n \n     /**\n-     * Reads from the persistence directory and generates a listing file ({@link #LISTING_FILE}) from its content\n+     * Iterates over the generated files and extract all the proto files. Then it creates and add to the generated files collection\n+     * a listing file ({@link #LISTING_FILE}) from its content.\n      *\n-     * @param targetDirectory target directory generated by Maven\n+     * @param generatedFiles  The list of generated files.\n+     * @param targetDirectory target directory generated by Maven.\n      * @throws IOException if something wrong occurs during I/O\n      */\n-    public final void generateProtoListing(final String targetDirectory) throws IOException {\n-        final Path persistencePath = Paths.get(targetDirectory, GENERATED_PROTO_RES_PATH);\n-        final List<String> fileList = new ArrayList<>();\n-        if (Files.isDirectory(persistencePath)) {\n-            for (final File protoFile : persistencePath.toFile().listFiles((dir, name) ->\n-                                                                                   name.toLowerCase().endsWith(PersistenceProtoFilesLabeler.PROTO_FILE_EXT))) {\n-                fileList.add(protoFile.getName());\n-            }\n+    public final Optional<GeneratedFile> generateProtoListingFile(Collection<GeneratedFile> generatedFiles, final String targetDirectory) throws IOException {\n+        List<String> fileNames = generatedFiles.stream()\n+                .filter(x -> x.relativePath().contains(GENERATED_PROTO_RES_PATH))\n+                .map(x -> x.relativePath().substring(x.relativePath().lastIndexOf(\"/\") + 1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MjE2NQ=="}, "originalCommit": {"oid": "6427d4e188650c32c64d76ba851e4b1d5597961f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDg1NjcyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/ReflectionProtoGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1MjowOVrOHeWwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyNzo1NFrOHf-uyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MjA2Ng==", "bodyText": "I don't like that this method now has both return value and side effect (add file to generatedFiles).\nI would prefer to remove the side effect from here and move it to infinispanBasedPersistence.\nWhat about make generateModelClassProto a public method that accept a Collection<Class<?>> input + targetDirectory and returns a Collection<GeneratedFile>?\nAfter these two changes we can remove generatedFiles parameter from extractDataClasses.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501592066", "createdAt": "2020-10-08T09:52:09Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/ReflectionProtoGenerator.java", "diffHunk": "@@ -83,9 +85,9 @@ public Proto generate(String messageComment, String fieldComment, String package\n                     dataModelClasses.add(propertyType);\n                 }\n \n-                generateModelClassProto(modelClazz, targetDirectory);\n+                generateModelClassProto(modelClazz, targetDirectory).ifPresent(generatedFiles::add);\n             }\n-            this.generateProtoListing(targetDirectory);\n+            this.generateProtoListingFile(generatedFiles, targetDirectory).ifPresent(generatedFiles::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NTY5MQ==", "bodyText": "I've refactored it, let me know wdyt @danielezonca", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r503295691", "createdAt": "2020-10-12T13:27:54Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/proto/ReflectionProtoGenerator.java", "diffHunk": "@@ -83,9 +85,9 @@ public Proto generate(String messageComment, String fieldComment, String package\n                     dataModelClasses.add(propertyType);\n                 }\n \n-                generateModelClassProto(modelClazz, targetDirectory);\n+                generateModelClassProto(modelClazz, targetDirectory).ifPresent(generatedFiles::add);\n             }\n-            this.generateProtoListing(targetDirectory);\n+            this.generateProtoListingFile(generatedFiles, targetDirectory).ifPresent(generatedFiles::add);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MjA2Ng=="}, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDg4NDgyOnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1OToxNlrOHeXBcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzo0Nzo0NVrOHe-y1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NjUyOQ==", "bodyText": "Why does generatedFiles contain files that you need to filter out?\nIn any case, what about add some log information? For example I think it could make sense to log (as debug) the number of generated files before and after the filter", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501596529", "createdAt": "2020-10-08T09:59:16Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "diffHunk": "@@ -113,18 +114,17 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                         parameters.add(t.getTypeName());\n                     }\n                 }\n-                \n+\n                 GeneratorContext context = GeneratorContext.ofResourcePath(kieSourcesDirectory);\n                 context.withBuildContext(discoverKogitoRuntimeContext(project));\n-                \n+\n                 String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n                 PersistenceGenerator persistenceGenerator = new PersistenceGenerator(new File(project.getBuild().getDirectory()), modelClasses, !classes.isEmpty(), new ReflectionProtoGenerator(), cl, parameters, persistenceType);\n                 persistenceGenerator.setPackageName(appPackageName);\n                 persistenceGenerator.setDependencyInjection(discoverDependencyInjectionAnnotator(project));\n                 persistenceGenerator.setContext(context);\n                 Collection<GeneratedFile> generatedFiles = persistenceGenerator.generate();\n-\n-\n+                generatedFiles = generatedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0ODE0OA==", "bodyText": "Hi @danielezonca, I'll try to summarize a bit:\n\nBefore this refactoring all the proto files were stored directly to the FS, while in kogito is the main processor that collects all the files that have to be generated and then write them. Since we have to use the main processor to write the static resources to the right place, we now have to collect all those resources into GeneratedFile envelops.\nThe current function ProcessClassesMojo.execute first of all generates some java classes and now also some static resources, after some calculations it calls CompilationResult result = JAVA_COMPILER.compile(sources, srcMfs, trgMfs, cl, settings);, but it raises some exceptions given that it expects to get only java classes. That's why we have to filter out all the non-java classes like the persistence files.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r502248148", "createdAt": "2020-10-09T07:47:45Z", "author": {"login": "r00ta"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "diffHunk": "@@ -113,18 +114,17 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n                         parameters.add(t.getTypeName());\n                     }\n                 }\n-                \n+\n                 GeneratorContext context = GeneratorContext.ofResourcePath(kieSourcesDirectory);\n                 context.withBuildContext(discoverKogitoRuntimeContext(project));\n-                \n+\n                 String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n                 PersistenceGenerator persistenceGenerator = new PersistenceGenerator(new File(project.getBuild().getDirectory()), modelClasses, !classes.isEmpty(), new ReflectionProtoGenerator(), cl, parameters, persistenceType);\n                 persistenceGenerator.setPackageName(appPackageName);\n                 persistenceGenerator.setDependencyInjection(discoverDependencyInjectionAnnotator(project));\n                 persistenceGenerator.setContext(context);\n                 Collection<GeneratedFile> generatedFiles = persistenceGenerator.generate();\n-\n-\n+                generatedFiles = generatedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NjUyOQ=="}, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDkzMjk0OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/JandexProtoGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxMToyOFrOHeXevA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMDoxMToyOFrOHeXevA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNDAyOA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501604028", "createdAt": "2020-10-08T10:11:28Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/JandexProtoGenerator.java", "diffHunk": "@@ -205,18 +207,18 @@ private void addEnumField(FieldInfo field, ProtoEnum pEnum) {\n                     dataModelClasses.add(index.getClassByName(pd.type().name()));\n                 }\n \n-                generateModelClassProto(modelClazz, targetDirectory);\n+                generateModelClassProto(modelClazz, targetDirectory).ifPresent(generatedFiles::add);\n             }\n \n-            this.generateProtoListing(targetDirectory);\n+            this.generateProtoListingFile(generatedFiles, targetDirectory).ifPresent(generatedFiles::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTQxOTI1OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjoyNjoxNVrOHecDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0NTo1OFrOHk2L8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTAyMA==", "bodyText": "I have mixed feeling about this code, what if getGeneratedPersistenceFiles generates a file that is not a CLASS nor a GENERATED_CP_RESOURCE?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r501679020", "createdAt": "2020-10-08T12:26:15Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -288,12 +293,14 @@ private void generatePersistenceInfo(AppPaths appPaths, IndexView inputIndex) th\n         }\n         GeneratorContext context = buildContext(appPaths, index);\n         String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n-        Collection<GeneratedFile> generatedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceGeneratedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceClasses = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());\n+        Collection<GeneratedFile> persistenceProtoFiles = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.GENERATED_CP_RESOURCE)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1MTEyMw==", "bodyText": "Same as above: given that now we put some resource files in the generatedFiles so that the kogito main procedure will store them, in the next lines of this function\n            InMemoryCompiler inMemoryCompiler = new InMemoryCompiler(appPaths.classesPaths,\n                                                                     curateOutcomeBuildItem.getEffectiveModel().getUserDependencies());\n            inMemoryCompiler.compile(persistenceClasses);\n\na compiler is called and it expects to get only java classes, that's why we have to remove the non-java classes from the generated files.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r502251123", "createdAt": "2020-10-09T07:53:33Z", "author": {"login": "r00ta"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -288,12 +293,14 @@ private void generatePersistenceInfo(AppPaths appPaths, IndexView inputIndex) th\n         }\n         GeneratorContext context = buildContext(appPaths, index);\n         String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n-        Collection<GeneratedFile> generatedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceGeneratedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceClasses = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());\n+        Collection<GeneratedFile> persistenceProtoFiles = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.GENERATED_CP_RESOURCE)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTAyMA=="}, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyNzkwNw==", "bodyText": "What about add a similar check?\nif(persistenceGeneratedFiles.stream().anyMatch(x -> !x.getType().equals(GeneratedFile.Type.CLASS) && !x.getType().equals(GeneratedFile.Type.GENERATED_CP_RESOURCE))) {\n   throws new IllegalStateException(\"Only type CLASS and GENERATED_CP_RESOURCE expected here\");\n}", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r505427907", "createdAt": "2020-10-15T10:17:09Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -288,12 +293,14 @@ private void generatePersistenceInfo(AppPaths appPaths, IndexView inputIndex) th\n         }\n         GeneratorContext context = buildContext(appPaths, index);\n         String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n-        Collection<GeneratedFile> generatedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceGeneratedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceClasses = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());\n+        Collection<GeneratedFile> persistenceProtoFiles = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.GENERATED_CP_RESOURCE)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTAyMA=="}, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5ODU3OQ==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/805#discussion_r508398579", "createdAt": "2020-10-20T10:45:58Z", "author": {"login": "r00ta"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -288,12 +293,14 @@ private void generatePersistenceInfo(AppPaths appPaths, IndexView inputIndex) th\n         }\n         GeneratorContext context = buildContext(appPaths, index);\n         String persistenceType = context.getApplicationProperty(\"kogito.persistence.type\").orElse(PersistenceGenerator.DEFAULT_PERSISTENCE_TYPE);\n-        Collection<GeneratedFile> generatedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceGeneratedFiles = getGeneratedPersistenceFiles(appPaths, index, usePersistence, parameters, context, persistenceType);\n+        Collection<GeneratedFile> persistenceClasses = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.CLASS)).collect(Collectors.toList());\n+        Collection<GeneratedFile> persistenceProtoFiles = persistenceGeneratedFiles.stream().filter(x -> x.getType().equals(GeneratedFile.Type.GENERATED_CP_RESOURCE)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY3OTAyMA=="}, "originalCommit": {"oid": "6c18e4963a8922960c0c0b2225ee2d945ed9a4f6"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4827, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}