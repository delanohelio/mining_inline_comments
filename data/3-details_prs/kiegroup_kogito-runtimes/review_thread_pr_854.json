{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDU3NzE2", "number": 854, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDozNFrOEzWcDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNzo0MVrOE0Ve8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjgwNDYwOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDozNFrOHqhO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoxMzozNFrOHr-BRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg==", "bodyText": "@cristianonicolai this fails not sure why", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514346726", "createdAt": "2020-10-29T15:24:34Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTMzMg==", "bodyText": "@evacchi this is to ensure the subprocess was actually started with ping message. Not sure whats happening now but we need to ensure this use case works.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514635332", "createdAt": "2020-10-30T00:04:45Z", "author": {"login": "cristianonicolai"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, "originalCommit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxODA4NQ==", "bodyText": "Uhmmm I don't think that is working. On my machine I clearly see:\n     [INFO] message received: hello\n\nwhich means pong process has started and also is finishing. the validateSubProcess() call comes after that, so subprocess has already died out and the test fails, but if I comment it out, then the rest of the test passes on my machine; now why it is red on CI it's a different, fun challenge though :D", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514918085", "createdAt": "2020-10-30T07:42:16Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, "originalCommit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzOTkxNw==", "bodyText": "@cristianonicolai I have added a latch and a subscriber to the new Publisher, so that it checks that pong is being sent by the pong process (using the fancy cloud event envelope :) ) That should work more reliably -- that is green on my machine, let's hope for CI \ud83d\ude29", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514939917", "createdAt": "2020-10-30T08:32:54Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, "originalCommit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2Njk1MQ==", "bodyText": "I think the validate step works now", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515866951", "createdAt": "2020-11-02T10:13:34Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg=="}, "originalCommit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA2MzczOnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDo1ODowNFrOHr_nWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxODozNVrOHsASVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA==", "bodyText": "Back to debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515893080", "createdAt": "2020-11-02T10:58:04Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5ODE3OA==", "bodyText": "right! lost it during rebase!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515898178", "createdAt": "2020-11-02T11:07:26Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA=="}, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDA4Ng==", "bodyText": "+1 to leave as debug", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515904086", "createdAt": "2020-11-02T11:18:35Z", "author": {"login": "cristianonicolai"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA=="}, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA3MTM5OnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowMDowNFrOHr_rzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowNzowMlrOHr_6UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDIyMQ==", "bodyText": "Is this needed? As far as I can see this value should be the default\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Scope.html#scopeName--", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515894221", "createdAt": "2020-11-02T11:00:04Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NzkzNw==", "bodyText": "good point; well in this case I'd say it doesn't hurt to be explicit, this really has to be singleton (not just for the framework, but also for readers)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515897937", "createdAt": "2020-11-02T11:07:02Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDIyMQ=="}, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA3ODU3OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowMjowOFrOHr_wDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowODoxMlrOHr_84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NTMwOQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515895309", "createdAt": "2020-11-02T11:02:08Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -17,33 +17,55 @@\n package org.kie.kogito.integrationtests.springboot;\n \n import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n-import org.junit.jupiter.api.extension.ExtendWith;\n-import io.restassured.RestAssured;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import io.restassured.http.ContentType;\n import org.junit.jupiter.api.Test;\n-import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.reactivestreams.Publisher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import reactor.core.publisher.Flux;\n \n import static io.restassured.RestAssured.given;\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n-import org.junit.jupiter.api.Disabled;\n-\n-@Disabled(\"Must implement cloud event producer/emitter for Spring \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3408 \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3591\")\n @ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n public class PingPongMessageTest extends BaseRestTest {\n \n+    @Autowired\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    Publisher<String> publisher;\n+\n     @Test\n-    void testPingPongBetweenProcessInstances() {\n+    void testPingPongBetweenProcessInstances() throws InterruptedException {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Flux.from(publisher)\n+                .map(x -> {\n+                    try {\n+                        return (Map<String, String>) new ObjectMapper().readValue(x, Map.class);\n+                    } catch (JsonProcessingException e) {\n+                        throw new Error(e);\n+                    }\n+                })\n+                .filter(m -> \"hello world\".equals(m.get(\"data\")) &&\n+                        m.getOrDefault(\"source\", \"\").startsWith(\"/process/pong_message/\"))\n+                .log(\"Found message\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5ODU5Mg==", "bodyText": "not really, but it is redundant, so I can remove it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515898592", "createdAt": "2020-11-02T11:08:12Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -17,33 +17,55 @@\n package org.kie.kogito.integrationtests.springboot;\n \n import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n-import org.junit.jupiter.api.extension.ExtendWith;\n-import io.restassured.RestAssured;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import io.restassured.http.ContentType;\n import org.junit.jupiter.api.Test;\n-import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.reactivestreams.Publisher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import reactor.core.publisher.Flux;\n \n import static io.restassured.RestAssured.given;\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n-import org.junit.jupiter.api.Disabled;\n-\n-@Disabled(\"Must implement cloud event producer/emitter for Spring \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3408 \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3591\")\n @ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n public class PingPongMessageTest extends BaseRestTest {\n \n+    @Autowired\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    Publisher<String> publisher;\n+\n     @Test\n-    void testPingPongBetweenProcessInstances() {\n+    void testPingPongBetweenProcessInstances() throws InterruptedException {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Flux.from(publisher)\n+                .map(x -> {\n+                    try {\n+                        return (Map<String, String>) new ObjectMapper().readValue(x, Map.class);\n+                    } catch (JsonProcessingException e) {\n+                        throw new Error(e);\n+                    }\n+                })\n+                .filter(m -> \"hello world\".equals(m.get(\"data\")) &&\n+                        m.getOrDefault(\"source\", \"\").startsWith(\"/process/pong_message/\"))\n+                .log(\"Found message\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NTMwOQ=="}, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzExOTc3OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxMzozOVrOHsAItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxMzozOVrOHsAItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMTYyMQ==", "bodyText": "staring new process instance \ud83d\udc40", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515901621", "createdAt": "2020-11-02T11:13:39Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -75,7 +75,7 @@ public void consume(Application application, Process<M> process, String payload,\n                                     trigger);\n                     }\n                 } else {\n-                    logger.debug(\"Received message without reference id, staring new process instance with trigger '{}'\",\n+                    logger.debug(\"Received message without reference id, starting new process instance with trigger '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzEzMzkyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNzo0MVrOHsAQkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1NTozOVrOHsjOXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw==", "bodyText": "keep as debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515903633", "createdAt": "2020-11-02T11:17:41Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -61,7 +61,7 @@ public void consume(Application application, Process<M> process, String payload,\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk3MTMxOQ==", "bodyText": "I put it back to info as suggested by @danielezonca (on master it's info) -- as you guys prefer", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515971319", "createdAt": "2020-11-02T13:29:56Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -61,7 +61,7 @@ public void consume(Application application, Process<M> process, String payload,\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw=="}, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM1ODk1OA==", "bodyText": "@evacchi @danielezonca just thinking that logging every single message received might be quite verbose. thats why my preference to keep as debug.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r516358958", "createdAt": "2020-11-03T00:26:47Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -61,7 +61,7 @@ public void consume(Application application, Process<M> process, String payload,\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw=="}, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjUwOQ==", "bodyText": "restored debug", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r516476509", "createdAt": "2020-11-03T07:55:39Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -61,7 +61,7 @@ public void consume(Application application, Process<M> process, String payload,\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw=="}, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4658, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}