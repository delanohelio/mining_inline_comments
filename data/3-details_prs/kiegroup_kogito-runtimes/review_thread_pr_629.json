{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjI5NjEy", "number": 629, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0MDoyNVrOEOw8NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0NDoyNFrOEOxCNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTE3MzY1OnYy", "diffSide": "RIGHT", "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0MDoyNVrOGyGSfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozMDo1NVrOGyy_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NTAyMQ==", "bodyText": "why this changed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/629#discussion_r455185021", "createdAt": "2020-07-15T16:40:25Z", "author": {"login": "mswiderski"}, "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "diffHunk": "@@ -84,13 +83,12 @@ public void testBasicFlow() {\n         assertThat(processInstance.status()).isEqualTo(STATE_COMPLETED);\n \n         fileSystemBasedStorage = (FileSystemProcessInstances) process.instances();\n-        verify(fileSystemBasedStorage, times(2)).remove(any());\n+        verify(fileSystemBasedStorage, times(3)).remove(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14f24f95114d7e3399145019f523cf1d77e050d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNzM0MQ==", "bodyText": "fixed now, I missed a changed in the reload supplier https://github.com/kiegroup/kogito-runtimes/pull/629/files#diff-be94bd4c400c02c83293fd0cb5164e0cR160", "url": "https://github.com/kiegroup/kogito-runtimes/pull/629#discussion_r455917341", "createdAt": "2020-07-16T16:30:55Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "diffHunk": "@@ -84,13 +83,12 @@ public void testBasicFlow() {\n         assertThat(processInstance.status()).isEqualTo(STATE_COMPLETED);\n \n         fileSystemBasedStorage = (FileSystemProcessInstances) process.instances();\n-        verify(fileSystemBasedStorage, times(2)).remove(any());\n+        verify(fileSystemBasedStorage, times(3)).remove(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NTAyMQ=="}, "originalCommit": {"oid": "c14f24f95114d7e3399145019f523cf1d77e050d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTE4MDIzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0MjoxMVrOGyGWlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozMTowMlrOGyy_ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NjA3MQ==", "bodyText": "maybe make it protected so it can be adjusted by subclasses if needed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/629#discussion_r455186071", "createdAt": "2020-07-15T16:42:11Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -93,25 +93,24 @@ public AbstractProcessInstance(AbstractProcess<T> process, T variables, String b\n \n         Map<String, Object> map = bind(variables);\n         String processId = process.process().getId();\n-        this.processInstance = (WorkflowProcessInstance)((CorrelationAwareProcessRuntime) rt).createProcessInstance(processId, correlationKey, map);\n-        this.description = processInstance.getDescription();\n-        this.status = ProcessInstance.STATE_PENDING;\n+        reloadProcessInstance((WorkflowProcessInstance) ((CorrelationAwareProcessRuntime) rt).createProcessInstance(processId, correlationKey, map));\n     }\n \n-    // for marshaller/persistence only\n-    public void internalSetProcessInstance(WorkflowProcessInstance processInstance) {\n-        if (this.processInstance != null && this.status != ProcessInstance.STATE_PENDING) {\n-            throw new IllegalStateException(\"Impossible to override process instance that already exists\");\n+    public AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt, org.kie.api.runtime.process.WorkflowProcessInstance wpi) {\n+        this.process = process;\n+        this.rt = rt;\n+        this.variables = variables;\n+        reloadProcessInstance((WorkflowProcessInstance) wpi);\n+        reconnect();\n+    }\n+\n+    private void reconnect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14f24f95114d7e3399145019f523cf1d77e050d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNzQxMg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/629#discussion_r455917412", "createdAt": "2020-07-16T16:31:02Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -93,25 +93,24 @@ public AbstractProcessInstance(AbstractProcess<T> process, T variables, String b\n \n         Map<String, Object> map = bind(variables);\n         String processId = process.process().getId();\n-        this.processInstance = (WorkflowProcessInstance)((CorrelationAwareProcessRuntime) rt).createProcessInstance(processId, correlationKey, map);\n-        this.description = processInstance.getDescription();\n-        this.status = ProcessInstance.STATE_PENDING;\n+        reloadProcessInstance((WorkflowProcessInstance) ((CorrelationAwareProcessRuntime) rt).createProcessInstance(processId, correlationKey, map));\n     }\n \n-    // for marshaller/persistence only\n-    public void internalSetProcessInstance(WorkflowProcessInstance processInstance) {\n-        if (this.processInstance != null && this.status != ProcessInstance.STATE_PENDING) {\n-            throw new IllegalStateException(\"Impossible to override process instance that already exists\");\n+    public AbstractProcessInstance(AbstractProcess<T> process, T variables, ProcessRuntime rt, org.kie.api.runtime.process.WorkflowProcessInstance wpi) {\n+        this.process = process;\n+        this.rt = rt;\n+        this.variables = variables;\n+        reloadProcessInstance((WorkflowProcessInstance) wpi);\n+        reconnect();\n+    }\n+\n+    private void reconnect() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NjA3MQ=="}, "originalCommit": {"oid": "c14f24f95114d7e3399145019f523cf1d77e050d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTE4OTAwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjo0NDoyNFrOGyGb3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozMToxOVrOGyy_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NzQyMg==", "bodyText": "bit misleading method name ... maybe syncProcessInstanceState or similar so it indicates that the is no actual reloading of process instance here :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/629#discussion_r455187422", "createdAt": "2020-07-15T16:44:24Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -122,6 +121,37 @@ public void internalSetProcessInstance(WorkflowProcessInstance processInstance)\n         unbind(variables, processInstance.getVariables());\n     }\n \n+    private void addCompletionEventListener() {\n+        if (completionEventListener == null) {\n+            completionEventListener = new CompletionEventListener();\n+            processInstance.addEventListener(\"processInstanceCompleted:\" + id, completionEventListener, false);\n+        }\n+    }\n+\n+    private void removeCompletionListener() {\n+        if (completionEventListener != null) {\n+            processInstance.removeEventListener(\"processInstanceCompleted:\" + id, completionEventListener, false);\n+            completionEventListener = null;\n+        }\n+    }\n+\n+    private void disconnect() {\n+        if (processInstance == null) {\n+            return;\n+        }\n+\n+        processInstance.disconnect();\n+        processInstance.setMetaData(\"KogitoProcessInstance\", null);\n+    }\n+\n+    private void reloadProcessInstance(WorkflowProcessInstance wpi) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14f24f95114d7e3399145019f523cf1d77e050d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNzU2Mg==", "bodyText": "+1, renamed to syncProcessInstanceState", "url": "https://github.com/kiegroup/kogito-runtimes/pull/629#discussion_r455917562", "createdAt": "2020-07-16T16:31:19Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -122,6 +121,37 @@ public void internalSetProcessInstance(WorkflowProcessInstance processInstance)\n         unbind(variables, processInstance.getVariables());\n     }\n \n+    private void addCompletionEventListener() {\n+        if (completionEventListener == null) {\n+            completionEventListener = new CompletionEventListener();\n+            processInstance.addEventListener(\"processInstanceCompleted:\" + id, completionEventListener, false);\n+        }\n+    }\n+\n+    private void removeCompletionListener() {\n+        if (completionEventListener != null) {\n+            processInstance.removeEventListener(\"processInstanceCompleted:\" + id, completionEventListener, false);\n+            completionEventListener = null;\n+        }\n+    }\n+\n+    private void disconnect() {\n+        if (processInstance == null) {\n+            return;\n+        }\n+\n+        processInstance.disconnect();\n+        processInstance.setMetaData(\"KogitoProcessInstance\", null);\n+    }\n+\n+    private void reloadProcessInstance(WorkflowProcessInstance wpi) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NzQyMg=="}, "originalCommit": {"oid": "c14f24f95114d7e3399145019f523cf1d77e050d"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 38, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}