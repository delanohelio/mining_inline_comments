{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDc1MTk0", "number": 759, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjo1NzoxNVrOEi_JTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjo1ODoxM1rOEi_KNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTIxNjE0OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/integration-test-hot-reload/src/test/java/io/quarkus/it/kogito/decision/SimpleModifyHotReloadTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjo1NzoxNVrOHRGN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxMjowOVrOHRK16w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4OTY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final static QuarkusDevModeTest test = new QuarkusDevModeTest().setArchiveProducer(\n          \n          \n            \n                        new Supplier<JavaArchive>() {\n          \n          \n            \n            \n          \n          \n            \n                            @Override\n          \n          \n            \n                            public JavaArchive get() {\n          \n          \n            \n                                JavaArchive ja = ShrinkWrap.create(JavaArchive.class)\n          \n          \n            \n                                        .addAsResource(\"application.properties.stronglytyped\", \"/application.properties\")\n          \n          \n            \n                                        .addAsResource(\"TrafficViolation.txt\", DMN_RESOURCE_FILE);\n          \n          \n            \n                                return ja;\n          \n          \n            \n                            }\n          \n          \n            \n                        });\n          \n          \n            \n                final static QuarkusDevModeTest test = new QuarkusDevModeTest().setArchiveProducer(\n          \n          \n            \n                        () -> ShrinkWrap.create(JavaArchive.class)\n          \n          \n            \n                                        .addAsResource(\"application.properties.stronglytyped\", \"/application.properties\")\n          \n          \n            \n                                        .addAsResource(\"TrafficViolation.txt\", DMN_RESOURCE_FILE));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/759#discussion_r487689683", "createdAt": "2020-09-14T06:57:15Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/integration-test-hot-reload/src/test/java/io/quarkus/it/kogito/decision/SimpleModifyHotReloadTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.quarkus.it.kogito.decision;\n+\n+import java.util.function.Supplier;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+public class SimpleModifyHotReloadTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    private static final String PACKAGE = \"io.quarkus.it.kogito.decision\";\n+    private static final String RESOURCE_FILE_PATH = PACKAGE.replace( '.', '/' );\n+    private static final String DMN_RESOURCE_FILE = RESOURCE_FILE_PATH + \"/TrafficViolation.dmn\";\n+\n+    private static final String HTTP_TEST_PORT = \"65535\";\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest test = new QuarkusDevModeTest().setArchiveProducer(\n+            new Supplier<JavaArchive>() {\n+\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive ja = ShrinkWrap.create(JavaArchive.class)\n+                            .addAsResource(\"application.properties.stronglytyped\", \"/application.properties\")\n+                            .addAsResource(\"TrafficViolation.txt\", DMN_RESOURCE_FILE);\n+                    return ja;\n+                }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d28dc450f80e45ba8b15486b653c2d8e8af6a69"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NTQ4Mw==", "bodyText": "rejected, lambda here is useless, we do Quarkus style which is anonymous class ;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/759#discussion_r487765483", "createdAt": "2020-09-14T09:12:09Z", "author": {"login": "tarilabs"}, "path": "kogito-quarkus-extension/integration-test-hot-reload/src/test/java/io/quarkus/it/kogito/decision/SimpleModifyHotReloadTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.quarkus.it.kogito.decision;\n+\n+import java.util.function.Supplier;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+public class SimpleModifyHotReloadTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    private static final String PACKAGE = \"io.quarkus.it.kogito.decision\";\n+    private static final String RESOURCE_FILE_PATH = PACKAGE.replace( '.', '/' );\n+    private static final String DMN_RESOURCE_FILE = RESOURCE_FILE_PATH + \"/TrafficViolation.dmn\";\n+\n+    private static final String HTTP_TEST_PORT = \"65535\";\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest test = new QuarkusDevModeTest().setArchiveProducer(\n+            new Supplier<JavaArchive>() {\n+\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive ja = ShrinkWrap.create(JavaArchive.class)\n+                            .addAsResource(\"application.properties.stronglytyped\", \"/application.properties\")\n+                            .addAsResource(\"TrafficViolation.txt\", DMN_RESOURCE_FILE);\n+                    return ja;\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4OTY4Mw=="}, "originalCommit": {"oid": "0d28dc450f80e45ba8b15486b653c2d8e8af6a69"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTIxODQ3OnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjo1ODoxM1rOHRGPWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowNToxOVrOHROu6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5MDA3NA==", "bodyText": "What about a comment to explain this code?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/759#discussion_r487690074", "createdAt": "2020-09-14T06:58:13Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "diffHunk": "@@ -60,6 +61,7 @@ public static DMNRuntime createGenericDMNRuntime(Reader... readers) {\n \n     public static DMNRuntime createGenericDMNRuntime(Function<String, KieRuntimeFactory> kiePMMLRuntimeFactoryFunction, Reader... readers) {\n         List<Resource> resources = Stream.of(readers).map(ReaderResource::new).collect(Collectors.toList());\n+        EvalHelper.clearGenericAccessorCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d28dc450f80e45ba8b15486b653c2d8e8af6a69"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyOTIyNQ==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/759#discussion_r487829225", "createdAt": "2020-09-14T11:05:19Z", "author": {"login": "tarilabs"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "diffHunk": "@@ -60,6 +61,7 @@ public static DMNRuntime createGenericDMNRuntime(Reader... readers) {\n \n     public static DMNRuntime createGenericDMNRuntime(Function<String, KieRuntimeFactory> kiePMMLRuntimeFactoryFunction, Reader... readers) {\n         List<Resource> resources = Stream.of(readers).map(ReaderResource::new).collect(Collectors.toList());\n+        EvalHelper.clearGenericAccessorCache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5MDA3NA=="}, "originalCommit": {"oid": "0d28dc450f80e45ba8b15486b653c2d8e8af6a69"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}