{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODQ1MTk5", "number": 922, "title": "[KOGITO-3974] Make DecisionModels and PredictionModels injectable", "bodyText": "https://issues.redhat.com/browse/KOGITO-3974\nDetails:\n\nDecisionModels generation has now platform specific templates\nPredictionModels generation has now platform specific templates\nCreated AbstractDecisionModels to share common code\nCreated AbstractPredictionModels to share common code\nUpdated Application generation to use injection (where available) also for DecisionModels and PredictionModels\nNow all Applicatation templates correctly delegate to StaticApplication postponed to KOGITO-3975", "createdAt": "2020-12-07T17:54:49Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922", "merged": true, "mergeCommit": {"oid": "f6378373c0b7c4a4ba9e21c84369357f6a2ef9da"}, "closed": true, "closedAt": "2020-12-14T14:43:36Z", "author": {"login": "danielezonca"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj5RpfgH2gAyNTMzODQ1MTk5OjcwNjAwNWM0MDdkZjBmNWYzMjYxZDgyY2M2ODhmZmQzYTQ1ZmUzYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmGsBIAFqTU1MTQyNTAyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "706005c407df0f5f3261d82cc688ffd3a45fe3c4", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/706005c407df0f5f3261d82cc688ffd3a45fe3c4", "committedDate": "2020-12-07T17:48:27Z", "message": "[KOGITO-3974] PredictionModels and DecisionModels are now using templates + Created AbstractPredictionModels and AbstractDecisionModels with common code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc8b2778a2094e23cc5f739e69277481daf6355", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ccc8b2778a2094e23cc5f739e69277481daf6355", "committedDate": "2020-12-09T09:26:53Z", "message": "[KOGITO-3974] Revert ApplicationContainerGenerator changes and postpone ApplicationTemplate to a different PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b300a420b7fd675c3ef785d8611759c23aaefba", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0b300a420b7fd675c3ef785d8611759c23aaefba", "committedDate": "2020-12-09T10:54:54Z", "message": "[KOGITO-3974] Fix missing conf use case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c60dcc1182311a4f0fa990d8e6b5fc98a5b57b5", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2c60dcc1182311a4f0fa990d8e6b5fc98a5b57b5", "committedDate": "2020-12-09T18:32:54Z", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6756417b267b2b9e3ce52383983dc20b241e203e", "committedDate": "2020-12-09T18:49:47Z", "message": "[KOGITO-3974] Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTYxNDc5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-548961479", "createdAt": "2020-12-10T08:41:05Z", "commit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo0MTowNVrOIC9kYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo1MDo0MlrOIC99Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3NjgwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static boolean IS_NATIVE_IMAGE = System.getProperty(\"org.graalvm.nativeimage.imagecode\") != null;\n          \n          \n            \n                private final static boolean IS_NATIVE_IMAGE = org.kie.dmn.feel.util.ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539976801", "createdAt": "2020-12-10T08:41:05Z", "author": {"login": "tarilabs"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/AbstractDecisionModels.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.ExecutionIdSupplier;\n+import org.kie.kogito.decision.DecisionModels;\n+\n+public abstract class AbstractDecisionModels implements DecisionModels {\n+\n+    private final static boolean IS_NATIVE_IMAGE = System.getProperty(\"org.graalvm.nativeimage.imagecode\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3ODI4NA==", "bodyText": "isn't this \"pattern\" which I see repeated for processes and rules, a sympthom we don't have a clear API design at the Kogito platform level?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539978284", "createdAt": "2020-12-10T08:43:19Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.decision.DecisionModels;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectDecisionModels {\n+\n+    @Inject\n+    public InjectDecisionModels(DecisionModels decisionModels, Application application) {\n+        if(decisionModels != application.decisionModels()) {\n+            throw new IllegalStateException(\"DecisionModels should be injectable and same instance application.decisionModels()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTIxMg==", "bodyText": "I'm not sure I get this change, can you explain please?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539979212", "createdAt": "2020-12-10T08:44:44Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationContainerGenerator.java", "diffHunk": "@@ -73,8 +74,10 @@ public CompilationUnit getCompilationUnitOrThrow() {\n                         templatePath(),\n                         \"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        for (String section : sections) {\n-            replaceSectionPlaceHolder(cls, section);\n+        if (annotator == null) {\n+            for (String section : sections) {\n+                replaceSectionPlaceHolder(cls, section);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzEzOQ==", "bodyText": "since this change, and others below, shouldn't that reflect also on ALL the ...CompilationProvider classes??", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539983139", "createdAt": "2020-12-10T08:50:42Z", "author": {"login": "tarilabs"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -192,7 +193,7 @@ public void generateModel() throws IOException {\n                 new ApplicationGenerator(\n                         appPackageName,\n                         new File(appPaths.getFirstProjectPath().toFile(), \"target\"))\n-                        .withDependencyInjection(new CDIDependencyInjectionAnnotator())\n+                        .withDependencyInjection(dependencyInjectionAnnotator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTk5MDkz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-548999093", "createdAt": "2020-12-10T09:26:40Z", "commit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOToyNjo0MFrOIC_d0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozNDozM1rOIC_0rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNzg5MQ==", "bodyText": "@danielezonca\nMaybe just a leftover, but I guess better to use directly \"kieRuntimeFactoryFunction\" instead of the getter method.\nBeside that, as a side note, there is not null check/NPE protection.\nWould it be possible to put the \"kieRuntimeFactoryFunction\" in the constructor ?\nI see the setter is called in the template\npublic PredictionModels() { super(); setKieRuntimeFactoryFunction(sKieRuntimeFactoryFunction); } \nso - unless for other reasons - it would just be a matter of moving \"sKieRuntimeFactoryFunction\" inside the \"super\" invocation.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540007891", "createdAt": "2020-12-10T09:26:40Z", "author": {"login": "gitgabrio"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.kogito.prediction.PredictionModels;\n+\n+import java.util.function.Function;\n+\n+public abstract class AbstractPredictionModels implements PredictionModels {\n+\n+    private java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+\n+    public org.kie.kogito.prediction.PredictionModel getPredictionModel(java.lang.String modelName) {\n+        return new org.kie.kogito.pmml.PmmlPredictionModel(getPMMLRuntime(modelName), modelName);\n+    }\n+\n+    protected Function<String, KieRuntimeFactory> getKieRuntimeFactoryFunction() {\n+        return kieRuntimeFactoryFunction;\n+    }\n+\n+    protected void setKieRuntimeFactoryFunction(Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction) {\n+        this.kieRuntimeFactoryFunction = kieRuntimeFactoryFunction;\n+    }\n+\n+    private org.kie.pmml.api.runtime.PMMLRuntime getPMMLRuntime(java.lang.String modelName) {\n+        return getKieRuntimeFactoryFunction().apply(modelName).get(org.kie.pmml.api.runtime.PMMLRuntime.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxMzc0MQ==", "bodyText": "@danielezonca\nIf I'm not wrong, elsewhere in the code we have a strict naming convention.\nAs far as I see all this templates have the same schema: {context}{base model template} where \"context\" is \"Cdi\" or \"Spring\" and \"base model template\" is (for example) \"PredictionModelsTemplate\".\nWould not be easier to just pass the latter (e.g. \"PredictionModelsTemplate\") to the \"TemplatedGenerator\", and have it infer the Cdi/Spring ones ? This would also enforce consistence between models, that is a good thing (IMHO).\nBeside that, the only differences I see in the \"models\" templates, between different contexts, are the annotations on the class declaration (Cdi vs Spring ones). If/where this is true, I think it would be much better to remove all that useless duplications, have a \"plain\" template, and use JavaParser to dynamically add required annotation (Cdi/Spring) when needed.\nAll those templates are pretty cumbersome; whenever a modification is needed, it must be done twice; and, after all, they not really needed (again, IMVHO)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540013741", "createdAt": "2020-12-10T09:34:33Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionModelsGenerator.java", "diffHunk": "@@ -30,60 +26,87 @@\n import com.github.javaparser.ast.stmt.Statement;\n import org.kie.kogito.codegen.AbstractApplicationSection;\n import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.InvalidTemplateException;\n+import org.kie.kogito.codegen.TemplatedGenerator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n import org.kie.kogito.prediction.PredictionModels;\n \n+import java.util.List;\n+\n public class PredictionModelsGenerator extends AbstractApplicationSection {\n \n-    private static final String TEMPLATE_JAVA = \"/class-templates/PredictionModelsTemplate.java\";\n+    private static final String RESOURCE = \"/class-templates/PredictionModelsTemplate.java\";\n+    private static final String RESOURCE_CDI = \"/class-templates/CdiPredictionModelsTemplate.java\";\n+    private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringPredictionModelsTemplate.java\";\n+    private static final String SECTION_CLASS_NAME = \"PredictionModels\";\n \n-    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =\n-            new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n-    final List<PMMLResource> resources;\n-    final String applicationCanonicalName;\n-    AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n-    final List<String> predictionRulesMapperClasses = new ArrayList<>();\n+    protected final List<PMMLResource> resources;\n+    protected final String applicationCanonicalName;\n+    protected AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+    protected final TemplatedGenerator templatedGenerator;\n \n-    public PredictionModelsGenerator(String applicationCanonicalName, List<PMMLResource> resources) {\n-        super(\"PredictionModels\", \"predictionModels\", PredictionModels.class);\n+    public PredictionModelsGenerator(String packageName, String applicationCanonicalName, List<PMMLResource> resources) {\n+        super(SECTION_CLASS_NAME, \"predictionModels\", PredictionModels.class);\n         this.applicationCanonicalName = applicationCanonicalName;\n         this.resources = resources;\n+\n+        this.templatedGenerator = new TemplatedGenerator(\n+                packageName,\n+                SECTION_CLASS_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34c72010322a151e39c635f70bc36b19a6ef87cc", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/34c72010322a151e39c635f70bc36b19a6ef87cc", "committedDate": "2020-12-10T10:48:57Z", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e24f8c9e4112069783e4b58c4be11cb6cff4cdb", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e24f8c9e4112069783e4b58c4be11cb6cff4cdb", "committedDate": "2020-12-10T12:17:39Z", "message": "[KOGITO-3974] Reviewed DecisionModels/PredictionModels templates to move all the code to abstract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8130a635412afe82873d36750533f2c41133f4", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e8130a635412afe82873d36750533f2c41133f4", "committedDate": "2020-12-10T13:13:06Z", "message": "[KOGITO-3974] Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e6d6f868f9f869746263e9f8c0c9f3fa104b37", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/21e6d6f868f9f869746263e9f8c0c9f3fa104b37", "committedDate": "2020-12-10T13:46:10Z", "message": "[KOGITO-3975] Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "574cf923f0cce1da08ea0675c4a8ab3c9c0d8cea", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/574cf923f0cce1da08ea0675c4a8ab3c9c0d8cea", "committedDate": "2020-12-10T17:44:14Z", "message": "Fix DMN hot reload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a46411d39a7ea54008dd3956910383ead6ad619", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2a46411d39a7ea54008dd3956910383ead6ad619", "committedDate": "2020-12-11T08:46:49Z", "message": "Moved packageName, annotator and addonsConfig to AbstractGenerator + Renamed ApplicationGenerator.withGenerator as ApplicationGenerator.registerAndInitGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ece772c26ad38bfe561a46cea8b3ec0fdbe9e599", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ece772c26ad38bfe561a46cea8b3ec0fdbe9e599", "committedDate": "2020-12-11T08:47:14Z", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3769ea2644548e7e397cb39ee229c316bd759a2c", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3769ea2644548e7e397cb39ee229c316bd759a2c", "committedDate": "2020-12-11T08:49:18Z", "message": "Added comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTAxMzA1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-549901305", "createdAt": "2020-12-11T08:45:53Z", "commit": {"oid": "2e24f8c9e4112069783e4b58c4be11cb6cff4cdb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0NTo1NFrOIDuuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0NTo1NFrOIDuuoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MjI0MQ==", "bodyText": "@danielezonca\nNice refactoring. Out of curiosity: is it needed for this method to be \"static\" ? I see it invoked inside a constructor", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540782241", "createdAt": "2020-12-11T08:45:54Z", "author": {"login": "gitgabrio"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -14,28 +14,27 @@\n  */\n package org.kie.kogito.pmml;\n \n-import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionModels;\n \n-import java.util.function.Function;\n-\n public abstract class AbstractPredictionModels implements PredictionModels {\n \n-    private java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+    public static java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n \n-    public org.kie.kogito.prediction.PredictionModel getPredictionModel(java.lang.String modelName) {\n-        return new org.kie.kogito.pmml.PmmlPredictionModel(getPMMLRuntime(modelName), modelName);\n-    }\n+    protected static void init(String ... pmmlFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e24f8c9e4112069783e4b58c4be11cb6cff4cdb"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5212fe6aa74496f83876e6b009d6ffe5825cc4c", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b5212fe6aa74496f83876e6b009d6ffe5825cc4c", "committedDate": "2020-12-11T10:28:05Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTkyMjUw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-549992250", "createdAt": "2020-12-11T10:50:07Z", "commit": {"oid": "b5212fe6aa74496f83876e6b009d6ffe5825cc4c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab6757ed87ee6dfb7907f3f22e2848dc5b3f7fb1", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ab6757ed87ee6dfb7907f3f22e2848dc5b3f7fb1", "committedDate": "2020-12-11T11:13:08Z", "message": "Revert ApplicationGenerator.registerAndInitGenerator to ApplicationGenerator.withGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efd7579ee1a6c32b84a6ec1a3db9fb28af7e0177", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/efd7579ee1a6c32b84a6ec1a3db9fb28af7e0177", "committedDate": "2020-12-11T13:34:02Z", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject\n\n# Conflicts:\n#\tkogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n#\tkogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c94782d5455c081bfdfd09b93ea1682572d7655", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9c94782d5455c081bfdfd09b93ea1682572d7655", "committedDate": "2020-12-11T17:41:55Z", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject\n\n# Conflicts:\n#\tkogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java\n#\tkogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ae5bd440ea96f8b43bcdbd7bf004f77ccf00ec", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9ae5bd440ea96f8b43bcdbd7bf004f77ccf00ec", "committedDate": "2020-12-11T17:50:43Z", "message": "Postponing moduleGenerator initialization when used (compilationUnit() module) + ApplicationSection.classDeclaration renamed compilationUnit to return the whole template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b250167be698163d1bc9c608d24da4df13aac2", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/45b250167be698163d1bc9c608d24da4df13aac2", "committedDate": "2020-12-11T19:02:02Z", "message": "Minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de56f00f83a8fb69f677b4a05c26a75b73554106", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/de56f00f83a8fb69f677b4a05c26a75b73554106", "committedDate": "2020-12-14T08:26:51Z", "message": "Introduced static AtomicReference in AbstractPredictionModels to make DMN+PMML integration works even if DecisionModels is loaded first + Fix native-image check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6333968f476681bde3421f71b143573b68e42f37", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6333968f476681bde3421f71b143573b68e42f37", "committedDate": "2020-12-14T08:36:47Z", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMTU5MDM1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-551159035", "createdAt": "2020-12-14T08:57:42Z", "commit": {"oid": "de56f00f83a8fb69f677b4a05c26a75b73554106"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1Nzo0MlrOIFGEgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODo1Nzo0MlrOIFGEgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMzI0OQ==", "bodyText": "@danielezonca\nFine if it works.\nAnyway, all that still look as a painful workaround related to https://issues.redhat.com/browse/DROOLS-5724.\nIf I'm not wrong it all depends on the fact that DMN requires PMML for validation at building time (inside its Kogito-specific builder) even if NULL (as currently is), while model validation should be managed in previous step and should be model specific.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542213249", "createdAt": "2020-12-14T08:57:42Z", "author": {"login": "gitgabrio"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -14,20 +14,27 @@\n  */\n package org.kie.kogito.pmml;\n \n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionModels;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n \n public abstract class AbstractPredictionModels implements PredictionModels {\n \n-    public static java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+    private static final AtomicReference<Function<String, KieRuntimeFactory>> functionReference = new AtomicReference<>();\n+    public static final Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = s -> functionReference.get().apply(s);\n \n     protected static void init(String ... pmmlFiles) {\n-        final java.util.Map<org.kie.api.KieBase, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactories = org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactories(pmmlFiles);\n-        kieRuntimeFactoryFunction = s -> kieRuntimeFactories.keySet().stream()\n-                .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+        final java.util.Map<KieBase, KieRuntimeFactory> kieRuntimeFactories = PMMLKogito.createKieRuntimeFactories(pmmlFiles);\n+        final Function<String, KieRuntimeFactory> function = s -> kieRuntimeFactories.keySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de56f00f83a8fb69f677b4a05c26a75b73554106"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ec597cdb8e2299368064b06fa16a4097bc23f239", "committedDate": "2020-12-14T09:07:05Z", "message": "Added comment to clarify"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjY3ODA2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-551267806", "createdAt": "2020-12-14T11:11:38Z", "commit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMTozOVrOIFLhIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTozMTowOVrOIFMObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjQ5OQ==", "bodyText": "DecisionModels should be injectable and same instance application.decisionModels() - probably same instance as application.decisionModels()?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542302499", "createdAt": "2020-12-14T11:11:39Z", "author": {"login": "MarianMacik"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.decision.DecisionModels;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectDecisionModels {\n+\n+    @Inject\n+    public InjectDecisionModels(DecisionModels decisionModels, Application application) {\n+        if(decisionModels != application.decisionModels()) {\n+            throw new IllegalStateException(\"DecisionModels should be injectable and same instance application.decisionModels()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjcyMw==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542302723", "createdAt": "2020-12-14T11:12:02Z", "author": {"login": "MarianMacik"}, "path": "integration-tests/integration-tests-quarkus-predictions/src/main/java/org/kie/kogito/integrationtests/InjectPredictionModels.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.prediction.PredictionModels;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectPredictionModels {\n+\n+    @Inject\n+    public InjectPredictionModels(PredictionModels predictionModels, Application application) {\n+        if(predictionModels != application.predictionModels()) {\n+            throw new IllegalStateException(\"PredictionModels should be injectable and same instance application.predictionModels()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjk0Nw==", "bodyText": "And here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542302947", "createdAt": "2020-12-14T11:12:24Z", "author": {"login": "MarianMacik"}, "path": "integration-tests/integration-tests-quarkus-processes/src/main/java/org/kie/kogito/integrationtests/InjectProcesses.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.process.Processes;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectProcesses {\n+\n+    @Inject\n+    public InjectProcesses(Processes processes, Application application) {\n+        if(processes != application.processes()) {\n+            throw new IllegalStateException(\"Processes should be injectable and same instance application.processes()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzk1Mg==", "bodyText": "I know that generated code probably shouldn't be readable that much, but wouldn't it be better to leave the imports here to make it cleaner? If the class is moved in future to a different package, we will have to change the templates anyway.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542307952", "createdAt": "2020-12-14T11:20:35Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiApplicationTemplate.java", "diffHunk": "@@ -1,30 +1,16 @@\n package $Package$;\n \n-import org.kie.kogito.Config;\n-import org.kie.kogito.StaticApplication;\n-import org.kie.kogito.process.Processes;\n-import org.kie.kogito.rules.RuleUnits;\n-\n @javax.inject.Singleton\n-public class Application extends StaticApplication {\n+public class Application extends org.kie.kogito.StaticApplication {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNDA5Mw==", "bodyText": "So the static block is used because of the CDI as we have to have a no-arg constructor? (Otherwise we would use just parameters of the constructor...)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542314093", "createdAt": "2020-12-14T11:31:09Z", "author": {"login": "MarianMacik"}, "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.kogito.prediction.PredictionModels;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+public abstract class AbstractPredictionModels implements PredictionModels {\n+\n+    // This AtomicReference is needed to have a deterministic/stable value for kieRuntimeFactoryFunction.\n+    // DecisionModels statically refers kieRuntimeFactoryFunction but it can be loaded before PredictionModels (it depends\n+    // on dependency injection container initialisation) so it is not possible to make an assumption on the order.\n+    // It can be probably removed (and make kieRuntimeFactoryFunction private) after resolving https://issues.redhat.com/browse/DROOLS-5724\n+    private static final AtomicReference<Function<String, KieRuntimeFactory>> functionReference = new AtomicReference<>();\n+    public static final Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = s -> functionReference.get().apply(s);\n+\n+    protected static void init(String ... pmmlFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46e837b60769ffc4e7ddb1bfb19a40201298cc76", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/46e837b60769ffc4e7ddb1bfb19a40201298cc76", "committedDate": "2020-12-14T12:59:52Z", "message": "Fix DecisionModels when there are no prediction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDI1MDI4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#pullrequestreview-551425028", "createdAt": "2020-12-14T14:33:52Z", "commit": {"oid": "46e837b60769ffc4e7ddb1bfb19a40201298cc76"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3895, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}