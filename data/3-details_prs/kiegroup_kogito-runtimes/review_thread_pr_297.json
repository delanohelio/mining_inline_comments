{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTUzNDM5", "number": 297, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxMTo1MVrODdA1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxMTo1MVrODdA1mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzQ5MDE4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxMTo1MVrOFlXp9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxMTo1MVrOFlXp9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyOTIwNw==", "bodyText": "You should get the config from the map and override this is it is present.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/297#discussion_r374729207", "createdAt": "2020-02-04T15:11:51Z", "author": {"login": "mariofusco"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -295,31 +308,26 @@ public ApplicationSection section() {\n         return generatedFiles;\n     }\n \n-    private void addUnitConfToKieModule( RuleUnitDescription ruleUnitDescription ) {\n+    private void addUnitConfToKieModule(RuleUnitDescription ruleUnitDescription) {\n         KieBaseModel unitKieBaseModel = kieModuleModel.newKieBaseModel(ruleUnit2KieBaseName(ruleUnitDescription.getCanonicalName()));\n         unitKieBaseModel.setEventProcessingMode(org.kie.api.conf.EventProcessingOption.CLOUD);\n         unitKieBaseModel.addPackage(ruleUnitDescription.getPackageName());\n \n-        // fixme config should go in the description as well\n-        Class<?> ruleUnit = ruleUnitDescription.getRuleUnitClass();\n-        if (ruleUnit != null) {\n-            SessionsPool sessionsPoolAnn = ruleUnit.getAnnotation(SessionsPool.class);\n-            if (sessionsPoolAnn != null && sessionsPoolAnn.value() > 0) {\n-                unitKieBaseModel.setSessionsPool(SessionsPoolOption.get(sessionsPoolAnn.value()));\n-            }\n-            EventProcessing eventAnn = ruleUnit.getAnnotation(EventProcessing.class);\n-            if (eventAnn != null && eventAnn.value() == EventProcessing.Type.STREAM) {\n-                unitKieBaseModel.setEventProcessingMode(EventProcessingOption.STREAM);\n-            }\n+        RuleUnitConfig config = ruleUnitDescription.getConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa127697bfffde45ed04fe84704bbceb62b3e5"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 285, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}