{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODY1Mzc3", "number": 303, "title": "KOGITO-19 - Tagging of process variables", "bodyText": "@cristianonicolai @tiagodolphine @evacchi\nSupported/interpreted tags\n\ninternal - makes variable to not be exposed in the model and consider as process instance internal variable\nrequired - requires to be given to start process instance\nreadonly - can be set only once\ninput - marks given variable as an input of the process and by that not exposed in the returned data model\noutput - marks given variable as output and thus not expecting it on starting and will be included in the returned data model\n\nWhen variable is meant for both input and output no tag shall be assigned.\nThis also provides dedicated input and output model that is exposed on REST api and by that open api spec\n\nin the screenshot above\n\nname - is both input and output\ntraveller - is just input\nreview is just output\nid - is an extra field that represents unique id of the process instance", "createdAt": "2020-02-04T14:24:04Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303", "merged": true, "mergeCommit": {"oid": "43f4f3ce84331335b482568af4168a666464dae2"}, "closed": true, "closedAt": "2020-02-11T12:38:47Z", "author": {"login": "mswiderski"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBRfKlAFqTM1MzUxOTQwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDQhTrgBqjMwMjYyNjcxMzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTE5NDAy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#pullrequestreview-353519402", "createdAt": "2020-02-05T07:54:12Z", "commit": {"oid": "d4206811de5bfbae272741431e32ea33ab33f1df"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzo1NDoxMlrOFludNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODowMjoxN1rOFlundA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMjc3NQ==", "bodyText": "some minor code styling issues like this one.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r375102775", "createdAt": "2020-02-05T07:54:12Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -243,13 +253,13 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n             String classPrefix = StringUtils.capitalize(execModelGen.extractedProcessId());\n             WorkflowProcess workFlowProcess = execModelGen.process();\n             ModelClassGenerator modelClassGenerator =\n-                    processIdToModelGenerator.get(execModelGen.getProcessId());\n+                    processIdToModelGenerator.get(execModelGen.getProcessId());   \n \n             ProcessGenerator p = new ProcessGenerator(\n                     workFlowProcess,\n                     execModelGen,\n                     classPrefix,\n-                    modelClassGenerator.className(),\n+                    modelClassGenerator.className(),                    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4206811de5bfbae272741431e32ea33ab33f1df"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNDY1MQ==", "bodyText": "Should it throw some exception here? like what you done for internal variable or simply check that the field actually exists?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    modelClazz.getDeclaredField(\"decision\");\n          \n          \n            \n                     assertThrows(NoSuchFieldException.class, () -> modelClazz.getDeclaredField(\"decision\");\n          \n          \n            \n                     or \n          \n          \n            \n                     ssertNotNull(modelClazz.getDeclaredField(\"decision\"));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r375104651", "createdAt": "2020-02-05T07:59:55Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -675,4 +677,127 @@ public void testBasicUserTaskProcessClaimReleaseClaimAndCompletePhases() throws\n         processInstance.abort();\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n     }\n+    \n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Test\n+    public void testApprovalWithVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-readonly-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        \n+        Field approverField = resourceClazz.getDeclaredField(\"approver\");\n+        assertThat(approverField).isNotNull();\n+        assertThat(approverField.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"john\");\n+        m.fromMap(parameters);\n+        \n+        \n+        ProcessInstance processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+        \n+        final Model updates = p.createModel();\n+        parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"mary\");\n+        updates.fromMap(parameters);\n+        // updating readonly variable should fail\n+        assertThrows(VariableViolationException.class, () -> processInstance.updateVariables(updates));\n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+    \n+    @Test\n+    public void testApprovalWithInternalVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-internal-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        // internal variables are not exposed on the model\n+        assertThrows(NoSuchFieldException.class, () -> resourceClazz.getDeclaredField(\"approver\"));\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+\n+    @Test\n+    public void testApprovalWithRequiredVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-required-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        assertThrows(VariableViolationException.class, () -> {\n+            ProcessInstance<?> processInstance = p.createInstance(m);\n+            processInstance.start();\n+        });\n+ \n+    } \n+    \n+    @Test\n+    public void testApprovalWithIOVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-io-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> modelClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(modelClazz);\n+        // internal variables are not exposed on the model\n+        modelClazz.getDeclaredField(\"decision\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4206811de5bfbae272741431e32ea33ab33f1df"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNTM5Ng==", "bodyText": "perhaps can avoid changing this file completely", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r375105396", "createdAt": "2020-02-05T08:02:17Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/resources/usertask/approval.bpmn2", "diffHunk": "@@ -5,7 +5,7 @@\n   <bpmn2:itemDefinition id=\"ItemDefinition_1\" isCollection=\"false\" structureRef=\"java.lang.Integer\"/>\n   <bpmn2:itemDefinition id=\"ItemDefinition_2\" isCollection=\"false\" structureRef=\"java.lang.Boolean\"/>\n   <bpmn2:process id=\"approvals\" tns:packageName=\"org.acme.travels\" name=\"approvals\" isExecutable=\"true\" processType=\"Public\">\n-    <bpmn2:property id=\"approver\" itemSubjectRef=\"ItemDefinition_9\" name=\"approver\"/>\n+    <bpmn2:property id=\"approver\" itemSubjectRef=\"ItemDefinition_9\" name=\"approver\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4206811de5bfbae272741431e32ea33ab33f1df"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4206811de5bfbae272741431e32ea33ab33f1df", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d4206811de5bfbae272741431e32ea33ab33f1df", "committedDate": "2020-02-04T14:18:10Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "1a921ea33b6edc350b722ca9e989e2f2daab3250", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1a921ea33b6edc350b722ca9e989e2f2daab3250", "committedDate": "2020-02-05T10:16:03Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a921ea33b6edc350b722ca9e989e2f2daab3250", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1a921ea33b6edc350b722ca9e989e2f2daab3250", "committedDate": "2020-02-05T10:16:03Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "d7643ccf5417c9e1996d58173534c80b528b729d", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d7643ccf5417c9e1996d58173534c80b528b729d", "committedDate": "2020-02-05T11:20:28Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7643ccf5417c9e1996d58173534c80b528b729d", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d7643ccf5417c9e1996d58173534c80b528b729d", "committedDate": "2020-02-05T11:20:28Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4757140ed04032d84bbf1890a22df179a66f81d1", "committedDate": "2020-02-05T11:22:23Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzIyNDAx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#pullrequestreview-353722401", "createdAt": "2020-02-05T13:42:48Z", "commit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTMyNzU1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#pullrequestreview-355132755", "createdAt": "2020-02-07T12:47:57Z", "commit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo0Nzo1N1rOFm7-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo1NToxMlrOFm8JJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3MjkzNQ==", "bodyText": "I think there is a shorthand assertj method for this\n// \"name\" needs to be either a property or a field of the TolkienCharacter class\nassertThat(fellowshipOfTheRing).extracting(\"name\")\n                               .contains(\"Boromir\", \"Gandalf\", \"Frodo\", \"Legolas\")\n                               .doesNotContain(\"Sauron\", \"Elrond\");", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376372935", "createdAt": "2020-02-07T12:47:57Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -675,4 +677,129 @@ public void testBasicUserTaskProcessClaimReleaseClaimAndCompletePhases() throws\n         processInstance.abort();\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n     }\n+    \n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Test\n+    public void testApprovalWithVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-readonly-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        \n+        Field approverField = resourceClazz.getDeclaredField(\"approver\");\n+        assertThat(approverField).isNotNull();\n+        assertThat(approverField.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3NDc0NQ==", "bodyText": "I would move this Scope + Predicate method to VariableDeclarations static method; e.g. ofOutput", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376374745", "createdAt": "2020-02-07T12:52:57Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -155,7 +156,26 @@ public ModelMetaData generateModel(WorkflowProcess process) {\n         String name = extractModelClassName(process.getId());\n \n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)));\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG)),\n+                                 false);\n+    }\n+    \n+    public ModelMetaData generateInputModel(WorkflowProcess process) {\n+        String packageName = process.getPackageName();\n+        String name = extractModelClassName(process.getId()) + \"Input\";\n+\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.OUTPUT_TAG)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3NDc5MQ==", "bodyText": "I would move this Scope + Predicate method to VariableDeclarations static method; e.g. ofInput", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376374791", "createdAt": "2020-02-07T12:53:04Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -155,7 +156,26 @@ public ModelMetaData generateModel(WorkflowProcess process) {\n         String name = extractModelClassName(process.getId());\n \n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)));\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG)),\n+                                 false);\n+    }\n+    \n+    public ModelMetaData generateInputModel(WorkflowProcess process) {\n+        String packageName = process.getPackageName();\n+        String name = extractModelClassName(process.getId()) + \"Input\";\n+\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.OUTPUT_TAG)),\n+                                 true, \"/class-templates/ModelNoIDTemplate.java\");\n+    }\n+    \n+    public ModelMetaData generateOutputModel(WorkflowProcess process) {\n+        String packageName = process.getPackageName();\n+        String name = extractModelClassName(process.getId()) + \"Output\";\n+\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.INPUT_TAG)),\n+                                 true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3NTQ4OQ==", "bodyText": "maybe we can move this method entirely to InputModelClassGenerator ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376375489", "createdAt": "2020-02-07T12:54:57Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -155,7 +156,26 @@ public ModelMetaData generateModel(WorkflowProcess process) {\n         String name = extractModelClassName(process.getId());\n \n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)));\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG)),\n+                                 false);\n+    }\n+    \n+    public ModelMetaData generateInputModel(WorkflowProcess process) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3NTU5MQ==", "bodyText": "maybe we can move this method entirely to OutputModelClassGenerator ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376375591", "createdAt": "2020-02-07T12:55:12Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -155,7 +156,26 @@ public ModelMetaData generateModel(WorkflowProcess process) {\n         String name = extractModelClassName(process.getId());\n \n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)));\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG)),\n+                                 false);\n+    }\n+    \n+    public ModelMetaData generateInputModel(WorkflowProcess process) {\n+        String packageName = process.getPackageName();\n+        String name = extractModelClassName(process.getId()) + \"Input\";\n+\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n+                                 VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE), variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.OUTPUT_TAG)),\n+                                 true, \"/class-templates/ModelNoIDTemplate.java\");\n+    }\n+    \n+    public ModelMetaData generateOutputModel(WorkflowProcess process) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4757140ed04032d84bbf1890a22df179a66f81d1", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4757140ed04032d84bbf1890a22df179a66f81d1", "committedDate": "2020-02-05T11:22:23Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a46477b97e01c7e9cd7ad5b483c826746fc4f4d0", "committedDate": "2020-02-07T13:41:31Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjAzNzc0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#pullrequestreview-355203774", "createdAt": "2020-02-07T14:45:10Z", "commit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDo0NToxMVrOFm_SAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoyMzozOVrOFngxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzAwOA==", "bodyText": "Just an idea, why not tu use lambda here as well since we introduced them in the other 2 methods...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376427008", "createdAt": "2020-02-07T14:45:11Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/VariableDeclarations.java", "diffHunk": "@@ -26,6 +27,32 @@\n     public static VariableDeclarations of(VariableScope vscope) {\n         HashMap<String, String> vs = new HashMap<>();\n         for (Variable variable : vscope.getVariables()) {\n+            if (variable.hasTag(Variable.INTERNAL_TAG)) {\n+                continue;\n+            }\n+            \n+            vs.put(variable.getName(), variable.getType().getStringType());\n+        }\n+        return of(vs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzI4NQ==", "bodyText": "Here we can use lambdas too, would be probably easier to read than continue.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376427285", "createdAt": "2020-02-07T14:45:43Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/VariableDeclarations.java", "diffHunk": "@@ -26,6 +27,32 @@\n     public static VariableDeclarations of(VariableScope vscope) {\n         HashMap<String, String> vs = new HashMap<>();\n         for (Variable variable : vscope.getVariables()) {\n+            if (variable.hasTag(Variable.INTERNAL_TAG)) {\n+                continue;\n+            }\n+            \n+            vs.put(variable.getName(), variable.getType().getStringType());\n+        }\n+        return of(vs);\n+    }\n+    \n+    public static VariableDeclarations ofInput(VariableScope vscope) {\n+        \n+        return of(vscope, variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.OUTPUT_TAG));\n+    }\n+    \n+    public static VariableDeclarations ofOutput(VariableScope vscope) {\n+        \n+        return of(vscope, variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.INPUT_TAG));\n+    }\n+    \n+    public static VariableDeclarations of(VariableScope vscope, Predicate<Variable> filter) {\n+        HashMap<String, String> vs = new HashMap<>();\n+        for (Variable variable : vscope.getVariables()) {\n+            if (filter.test(variable)) {\n+                continue;\n+            }\n+            ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyODE0OA==", "bodyText": "This implies that we want variables which have internal or output tag. Can we at least change the name of the parameter in the of() method to filterOut? As the first time-reader it confused me for a while.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376428148", "createdAt": "2020-02-07T14:47:14Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/VariableDeclarations.java", "diffHunk": "@@ -26,6 +27,32 @@\n     public static VariableDeclarations of(VariableScope vscope) {\n         HashMap<String, String> vs = new HashMap<>();\n         for (Variable variable : vscope.getVariables()) {\n+            if (variable.hasTag(Variable.INTERNAL_TAG)) {\n+                continue;\n+            }\n+            \n+            vs.put(variable.getName(), variable.getType().getStringType());\n+        }\n+        return of(vs);\n+    }\n+    \n+    public static VariableDeclarations ofInput(VariableScope vscope) {\n+        \n+        return of(vscope, variable -> variable.hasTag(Variable.INTERNAL_TAG) || variable.hasTag(Variable.OUTPUT_TAG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyOTQxNA==", "bodyText": "We can use the Variable.VARIABLE_TAGS constant here for customTags literal.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376429414", "createdAt": "2020-02-07T14:49:36Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java", "diffHunk": "@@ -68,9 +69,10 @@ protected void visitVariableScope(String contextNode, VariableScope variableScop\n                 if (!visitedVariables.add(variable.getName())) {\n                     continue;\n                 }\n+                String tags = (String) variable.getMetaData(\"customTags\");\n                 ClassOrInterfaceType variableType = new ClassOrInterfaceType(null, ObjectDataType.class.getSimpleName());\n                 ObjectCreationExpr variableValue = new ObjectCreationExpr(null, variableType, new NodeList<>(new StringLiteralExpr(variable.getType().getStringType())));\n-                addFactoryMethodWithArgs(contextNode, body, \"variable\", new StringLiteralExpr(variable.getName()), variableValue);\n+                addFactoryMethodWithArgs(contextNode, body, \"variable\", new StringLiteralExpr(variable.getName()), variableValue, new StringLiteralExpr(\"customTags\"), (tags != null ? new StringLiteralExpr(tags) : new NullLiteralExpr()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzMTM1OA==", "bodyText": "We can use the Variable.VARIABLE_TAGS constant here for customTags literal.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376431358", "createdAt": "2020-02-07T14:53:00Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -234,9 +254,10 @@ private void visitVariableScope(VariableScope variableScope, BlockStmt body, Set\n                 if (!visitedVariables.add(variable.getName())) {\n                     continue;\n                 }\n+                String tags = (String) variable.getMetaData(\"customTags\");\n                 ClassOrInterfaceType variableType = new ClassOrInterfaceType(null, ObjectDataType.class.getSimpleName());\n                 ObjectCreationExpr variableValue = new ObjectCreationExpr(null, variableType, new NodeList<>(new StringLiteralExpr(variable.getType().getStringType())));\n-                addFactoryMethodWithArgs(FACTORY_FIELD_NAME, body, \"variable\", new StringLiteralExpr(variable.getName()), variableValue);\n+                addFactoryMethodWithArgs(FACTORY_FIELD_NAME, body, \"variable\", new StringLiteralExpr(variable.getName()), variableValue, new StringLiteralExpr(\"customTags\"), tags != null ? new StringLiteralExpr(tags) : new NullLiteralExpr());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzOTkwNg==", "bodyText": "Can tags be empty? The only way tags can be changed is either here or through setMetaData method. When setMetaData method is called with VARIABLE_TAGS name, tags are split and a map is populated. So when getTags method is called, tags cannot be empty, even if it was, doing splitting again would again produce an empty map. So I guess here we can just return tags and not do preprocessing again. Moreover, if I pass null to setMetaData, then getTags will produce NPE.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376439906", "createdAt": "2020-02-07T15:08:41Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -93,4 +110,16 @@ public Object getMetaData(String name) {\n     public String toString() {\n         return this.name;\n     }\n+    \n+    public List<String> getTags() {\n+        if (tags.isEmpty() && this.metaData.containsKey(VARIABLE_TAGS)) {\n+            tags = Arrays.asList(metaData.get(VARIABLE_TAGS).toString().split(\",\"));\n+            \n+        }\n+        return tags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTI4NQ==", "bodyText": "I guess this should be of type $Type$Input as well? Also the if above it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376971285", "createdAt": "2020-02-10T10:14:49Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -41,14 +41,14 @@\n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$> createResource_$name$($Type$ resource) {\n+    public CompletionStage<$Type$Output> createResource_$name$($Type$Input resource) {\n         if (resource == null) {\n             resource = new $Type$();\n         }\n         final $Type$ value = resource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3NDY1Mg==", "bodyText": "Maybe rename to *WithReadOnlyVariableTags", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376974652", "createdAt": "2020-02-10T10:21:32Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -675,4 +677,129 @@ public void testBasicUserTaskProcessClaimReleaseClaimAndCompletePhases() throws\n         processInstance.abort();\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n     }\n+    \n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Test\n+    public void testApprovalWithVariableTags() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3NTE4NA==", "bodyText": "But here they are exposed on the model. See assertNotNull.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376975184", "createdAt": "2020-02-10T10:22:35Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -675,4 +677,129 @@ public void testBasicUserTaskProcessClaimReleaseClaimAndCompletePhases() throws\n         processInstance.abort();\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n     }\n+    \n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Test\n+    public void testApprovalWithVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-readonly-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        \n+        Field approverField = resourceClazz.getDeclaredField(\"approver\");\n+        assertThat(approverField).isNotNull();\n+        assertThat(approverField.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"john\");\n+        m.fromMap(parameters);\n+        \n+        \n+        ProcessInstance processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+        \n+        final Model updates = p.createModel();\n+        parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"mary\");\n+        updates.fromMap(parameters);\n+        // updating readonly variable should fail\n+        assertThrows(VariableViolationException.class, () -> processInstance.updateVariables(updates));\n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+    \n+    @Test\n+    public void testApprovalWithInternalVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-internal-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        // internal variables are not exposed on the model\n+        assertThrows(NoSuchFieldException.class, () -> resourceClazz.getDeclaredField(\"approver\"));\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+\n+    @Test\n+    public void testApprovalWithRequiredVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-required-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        assertThrows(VariableViolationException.class, () -> {\n+            ProcessInstance<?> processInstance = p.createInstance(m);\n+            processInstance.start();\n+        });\n+ \n+    } \n+    \n+    @Test\n+    public void testApprovalWithIOVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-io-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> modelClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(modelClazz);\n+        // internal variables are not exposed on the model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3NTY2MA==", "bodyText": "Probably bad comment here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376975660", "createdAt": "2020-02-10T10:23:31Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -675,4 +677,129 @@ public void testBasicUserTaskProcessClaimReleaseClaimAndCompletePhases() throws\n         processInstance.abort();\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n     }\n+    \n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Test\n+    public void testApprovalWithVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-readonly-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        \n+        Field approverField = resourceClazz.getDeclaredField(\"approver\");\n+        assertThat(approverField).isNotNull();\n+        assertThat(approverField.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"john\");\n+        m.fromMap(parameters);\n+        \n+        \n+        ProcessInstance processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+        \n+        final Model updates = p.createModel();\n+        parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"mary\");\n+        updates.fromMap(parameters);\n+        // updating readonly variable should fail\n+        assertThrows(VariableViolationException.class, () -> processInstance.updateVariables(updates));\n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+    \n+    @Test\n+    public void testApprovalWithInternalVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-internal-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        // internal variables are not exposed on the model\n+        assertThrows(NoSuchFieldException.class, () -> resourceClazz.getDeclaredField(\"approver\"));\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+\n+    @Test\n+    public void testApprovalWithRequiredVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-required-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        assertThrows(VariableViolationException.class, () -> {\n+            ProcessInstance<?> processInstance = p.createInstance(m);\n+            processInstance.start();\n+        });\n+ \n+    } \n+    \n+    @Test\n+    public void testApprovalWithIOVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-io-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> modelClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(modelClazz);\n+        // internal variables are not exposed on the model\n+        assertNotNull(modelClazz.getDeclaredField(\"decision\"));\n+        assertNotNull(modelClazz.getDeclaredField(\"approver\"));\n+        \n+        Class<?> inputModelClazz = Class.forName(\"org.acme.travels.ApprovalsModelInput\", true, testClassLoader());\n+        assertNotNull(inputModelClazz);\n+        // internal variables are not exposed on the model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3NTc0NA==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r376975744", "createdAt": "2020-02-10T10:23:39Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -675,4 +677,129 @@ public void testBasicUserTaskProcessClaimReleaseClaimAndCompletePhases() throws\n         processInstance.abort();\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n     }\n+    \n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Test\n+    public void testApprovalWithVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-readonly-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        \n+        Field approverField = resourceClazz.getDeclaredField(\"approver\");\n+        assertThat(approverField).isNotNull();\n+        assertThat(approverField.getType().getCanonicalName()).isEqualTo(String.class.getCanonicalName());\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"john\");\n+        m.fromMap(parameters);\n+        \n+        \n+        ProcessInstance processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+        \n+        final Model updates = p.createModel();\n+        parameters = new HashMap<>();\n+        parameters.put(\"approver\", \"mary\");\n+        updates.fromMap(parameters);\n+        // updating readonly variable should fail\n+        assertThrows(VariableViolationException.class, () -> processInstance.updateVariables(updates));\n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+    \n+    @Test\n+    public void testApprovalWithInternalVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-internal-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> resourceClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(resourceClazz);\n+        // internal variables are not exposed on the model\n+        assertThrows(NoSuchFieldException.class, () -> resourceClazz.getDeclaredField(\"approver\"));\n+        \n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+        processInstance.start();\n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE, processInstance.status()); \n+\n+        processInstance.abort();\n+        \n+        assertEquals(org.kie.api.runtime.process.ProcessInstance.STATE_ABORTED, processInstance.status());\n+    } \n+\n+    @Test\n+    public void testApprovalWithRequiredVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-required-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"approvals\");\n+        \n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        \n+        assertThrows(VariableViolationException.class, () -> {\n+            ProcessInstance<?> processInstance = p.createInstance(m);\n+            processInstance.start();\n+        });\n+ \n+    } \n+    \n+    @Test\n+    public void testApprovalWithIOVariableTags() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"usertask/approval-with-io-variable-tags.bpmn2\");        \n+        assertThat(app).isNotNull();\n+                \n+        Class<?> modelClazz = Class.forName(\"org.acme.travels.ApprovalsModel\", true, testClassLoader());\n+        assertNotNull(modelClazz);\n+        // internal variables are not exposed on the model\n+        assertNotNull(modelClazz.getDeclaredField(\"decision\"));\n+        assertNotNull(modelClazz.getDeclaredField(\"approver\"));\n+        \n+        Class<?> inputModelClazz = Class.forName(\"org.acme.travels.ApprovalsModelInput\", true, testClassLoader());\n+        assertNotNull(inputModelClazz);\n+        // internal variables are not exposed on the model\n+        assertNotNull(inputModelClazz.getDeclaredField(\"approver\"));\n+        assertThrows(NoSuchFieldException.class, () -> inputModelClazz.getDeclaredField(\"decision\"));\n+        assertThrows(NoSuchFieldException.class, () -> inputModelClazz.getDeclaredField(\"id\"));\n+        \n+        Class<?> outputModelClazz = Class.forName(\"org.acme.travels.ApprovalsModelOutput\", true, testClassLoader());\n+        assertNotNull(outputModelClazz);\n+        // internal variables are not exposed on the model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 125}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a46477b97e01c7e9cd7ad5b483c826746fc4f4d0", "committedDate": "2020-02-07T13:41:31Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "ee00a1a1335f6cefd2d94d0fce3dd0e9c4cdaa3f", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ee00a1a1335f6cefd2d94d0fce3dd0e9c4cdaa3f", "committedDate": "2020-02-10T10:54:52Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee00a1a1335f6cefd2d94d0fce3dd0e9c4cdaa3f", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ee00a1a1335f6cefd2d94d0fce3dd0e9c4cdaa3f", "committedDate": "2020-02-10T10:54:52Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "c8a625002e355c93bb126fc69512ef6f319e8ff0", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c8a625002e355c93bb126fc69512ef6f319e8ff0", "committedDate": "2020-02-10T10:57:10Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTM5MDY1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#pullrequestreview-355939065", "createdAt": "2020-02-10T13:35:56Z", "commit": {"oid": "c8a625002e355c93bb126fc69512ef6f319e8ff0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozNTo1NlrOFnmN9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozNTo1NlrOFnmN9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NDk0OQ==", "bodyText": "Still holds, can you clarify?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/303#discussion_r377064949", "createdAt": "2020-02-10T13:35:56Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -93,4 +110,16 @@ public Object getMetaData(String name) {\n     public String toString() {\n         return this.name;\n     }\n+    \n+    public List<String> getTags() {\n+        if (tags.isEmpty() && this.metaData.containsKey(VARIABLE_TAGS)) {\n+            tags = Arrays.asList(metaData.get(VARIABLE_TAGS).toString().split(\",\"));\n+            \n+        }\n+        return tags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzOTkwNg=="}, "originalCommit": {"oid": "a46477b97e01c7e9cd7ad5b483c826746fc4f4d0"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921750be0d807e4ac3f69035e951e149c6b9d62d", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/921750be0d807e4ac3f69035e951e149c6b9d62d", "committedDate": "2020-02-11T12:02:34Z", "message": "KOGITO-19 - Tagging of process variables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8a625002e355c93bb126fc69512ef6f319e8ff0", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c8a625002e355c93bb126fc69512ef6f319e8ff0", "committedDate": "2020-02-10T10:57:10Z", "message": "KOGITO-19 - Tagging of process variables"}, "afterCommit": {"oid": "921750be0d807e4ac3f69035e951e149c6b9d62d", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/921750be0d807e4ac3f69035e951e149c6b9d62d", "committedDate": "2020-02-11T12:02:34Z", "message": "KOGITO-19 - Tagging of process variables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3712, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}