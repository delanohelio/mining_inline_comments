{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODU1MTg1", "number": 770, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDozMToyNVrOEj_j8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDozMToyNVrOEj_j8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTc3MDEwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionCodegenTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDozMToyNVrOHSqoAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjozNToxMlrOHTM8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNDc4Ng==", "bodyText": "agreed, or you can also consider this approach:\nhttps://github.com/kiegroup/kogito-runtimes/pull/762/files#diff-59003bc182a20b006a260bae9299342aR164\nwhat do you think?\nThat way, it should not detect enumeration somewhere else in the source code (for instance a field name) since the .* should not match line breaking character IIRC ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/770#discussion_r489334786", "createdAt": "2020-09-16T10:31:25Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionCodegenTest.java", "diffHunk": "@@ -161,7 +163,7 @@ public void testNSEW_positive() throws Exception {\n         List<GeneratedFile> generatedFiles = codeGenerator.generate();\n         assertThat(generatedFiles).anyMatch(x -> x.relativePath().endsWith(\"InputSet.java\"));\n         GeneratedFile inputSetFile = generatedFiles.stream().filter(x -> x.relativePath().endsWith(\"InputSet.java\")).findFirst().get();\n-        assertThat(new String(inputSetFile.contents())).contains(\"@org.eclipse.microprofile.openapi.annotations.media.Schema(enumeration\");\n+        assertThat(new String(inputSetFile.contents())).contains(\"@org.eclipse.microprofile.openapi.annotations.media.Schema(\", \"enumeration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "979d3d6d85fd15cd4c63ace57b996ac77851c8f9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg5NzExMA==", "bodyText": "Thank you! I'll follow your approach.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/770#discussion_r489897110", "createdAt": "2020-09-17T02:35:12Z", "author": {"login": "tkobayas"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionCodegenTest.java", "diffHunk": "@@ -161,7 +163,7 @@ public void testNSEW_positive() throws Exception {\n         List<GeneratedFile> generatedFiles = codeGenerator.generate();\n         assertThat(generatedFiles).anyMatch(x -> x.relativePath().endsWith(\"InputSet.java\"));\n         GeneratedFile inputSetFile = generatedFiles.stream().filter(x -> x.relativePath().endsWith(\"InputSet.java\")).findFirst().get();\n-        assertThat(new String(inputSetFile.contents())).contains(\"@org.eclipse.microprofile.openapi.annotations.media.Schema(enumeration\");\n+        assertThat(new String(inputSetFile.contents())).contains(\"@org.eclipse.microprofile.openapi.annotations.media.Schema(\", \"enumeration\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNDc4Ng=="}, "originalCommit": {"oid": "979d3d6d85fd15cd4c63ace57b996ac77851c8f9"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4778, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}