{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MTIxMDI1", "number": 692, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MzozNlrOEXfrcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNDo1N1rOEXf4QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDcxNzMwOnYy", "diffSide": "RIGHT", "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KafkaContainer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MzozNlrOG_UHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTo1NzozNVrOHAIQRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MzA4Mg==", "bodyText": "I named it KogitoKafkaContainer on purpose to distinguish from the one provided by testcontainers. If both are called the same, final user could have doubts about which one to use.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469043082", "createdAt": "2020-08-12T06:53:36Z", "author": {"login": "Sgitario"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KafkaContainer.java", "diffHunk": "@@ -18,26 +18,24 @@\n import org.kie.kogito.resources.TestResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.testcontainers.containers.KafkaContainer;\n import org.testcontainers.containers.output.Slf4jLogConsumer;\n \n /**\n  * Kafka Container for Kogito examples.\n  */\n-public class KogitoKafkaContainer extends KafkaContainer implements TestResource {\n+public class KafkaContainer extends org.testcontainers.containers.KafkaContainer implements TestResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTczOTU4Mg==", "bodyText": "so I think we should rename Infinispan and Keyckloack to Kogito* ? Its just that the naming is not consistent between these. I dont really have a strong preference for one way or another.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469739582", "createdAt": "2020-08-13T07:04:38Z", "author": {"login": "cristianonicolai"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KafkaContainer.java", "diffHunk": "@@ -18,26 +18,24 @@\n import org.kie.kogito.resources.TestResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.testcontainers.containers.KafkaContainer;\n import org.testcontainers.containers.output.Slf4jLogConsumer;\n \n /**\n  * Kafka Container for Kogito examples.\n  */\n-public class KogitoKafkaContainer extends KafkaContainer implements TestResource {\n+public class KafkaContainer extends org.testcontainers.containers.KafkaContainer implements TestResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MzA4Mg=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MDk5NA==", "bodyText": "I would rather to append Kogito to Infinispan and Keycloak test containers instead of having a name conflict with KafkaContainer. But that's only my feeling :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469740994", "createdAt": "2020-08-13T07:07:30Z", "author": {"login": "Sgitario"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KafkaContainer.java", "diffHunk": "@@ -18,26 +18,24 @@\n import org.kie.kogito.resources.TestResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.testcontainers.containers.KafkaContainer;\n import org.testcontainers.containers.output.Slf4jLogConsumer;\n \n /**\n  * Kafka Container for Kogito examples.\n  */\n-public class KogitoKafkaContainer extends KafkaContainer implements TestResource {\n+public class KafkaContainer extends org.testcontainers.containers.KafkaContainer implements TestResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MzA4Mg=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NzI4NA==", "bodyText": "np, added Kogito* as prefix for container names.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469897284", "createdAt": "2020-08-13T11:57:35Z", "author": {"login": "cristianonicolai"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KafkaContainer.java", "diffHunk": "@@ -18,26 +18,24 @@\n import org.kie.kogito.resources.TestResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.testcontainers.containers.KafkaContainer;\n import org.testcontainers.containers.output.Slf4jLogConsumer;\n \n /**\n  * Kafka Container for Kogito examples.\n  */\n-public class KogitoKafkaContainer extends KafkaContainer implements TestResource {\n+public class KafkaContainer extends org.testcontainers.containers.KafkaContainer implements TestResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MzA4Mg=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc0MDczOnYy", "diffSide": "RIGHT", "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusTestResource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowMTozOVrOG_UV0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTo1OTowMVrOHAITAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjczNw==", "bodyText": "There is an issue here. If the container is disabled by configuration, the start will be called, but the inner container won't be started.\nA possible solution to this could be:\n\nMake the start method \"final\" in ConditionalQuarkusTestResource and ConditionalSpringBootTestResource, so we won't allow to override it.\nAdd a new method preStart in ConditionalQuarkusTestResource and ConditionalSpringBootTestResource which is executed always when the test resource is enabled.\nThe new preStart method could return the map and the start method could join the maps.\n\nWhat do you think?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469046737", "createdAt": "2020-08-12T07:01:39Z", "author": {"login": "Sgitario"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusTestResource.java", "diffHunk": "@@ -40,12 +57,21 @@ protected String getKogitoPropertyValue() {\n         return String.format(\"http://localhost:%s/auth/realms/kogito\", getTestResource().getMappedPort());\n     }\n \n+    @Override\n+    public Map<String, String> start() {\n+        final Map<String, String> start = super.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MTAxNw==", "bodyText": "In that case start map would be empty so the entire logic here would be skipped. Am I missing something?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469741017", "createdAt": "2020-08-13T07:07:33Z", "author": {"login": "cristianonicolai"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusTestResource.java", "diffHunk": "@@ -40,12 +57,21 @@ protected String getKogitoPropertyValue() {\n         return String.format(\"http://localhost:%s/auth/realms/kogito\", getTestResource().getMappedPort());\n     }\n \n+    @Override\n+    public Map<String, String> start() {\n+        final Map<String, String> start = super.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjczNw=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MzUyNA==", "bodyText": "Well, we're relying on an underlying implementation detail: start() returns an empty map. Tomorrow, it might return an inmmutable map and this code would return an exception. Or maybe we could decide to inject the parameters in the start() method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469743524", "createdAt": "2020-08-13T07:12:53Z", "author": {"login": "Sgitario"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusTestResource.java", "diffHunk": "@@ -40,12 +57,21 @@ protected String getKogitoPropertyValue() {\n         return String.format(\"http://localhost:%s/auth/realms/kogito\", getTestResource().getMappedPort());\n     }\n \n+    @Override\n+    public Map<String, String> start() {\n+        final Map<String, String> start = super.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjczNw=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5Nzk4Ng==", "bodyText": "ok, for now I changed the implementation so that it doesnt matter if the returned map is immutable or not. Regarding future improvements, we can look into that as needed :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469897986", "createdAt": "2020-08-13T11:59:01Z", "author": {"login": "cristianonicolai"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusTestResource.java", "diffHunk": "@@ -40,12 +57,21 @@ protected String getKogitoPropertyValue() {\n         return String.format(\"http://localhost:%s/auth/realms/kogito\", getTestResource().getMappedPort());\n     }\n \n+    @Override\n+    public Map<String, String> start() {\n+        final Map<String, String> start = super.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0NjczNw=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDc1MDA4OnYy", "diffSide": "LEFT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzowNDo1N1rOG_UbmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzowNjozMFrOG_-rvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODIxNg==", "bodyText": "I was following the approach of having the arguments \"container.image.[COMPONENT].version\" (see this PR to consolidate the one in Infinispan).\nI don't mind to use either \"version.org.[COMPONENT]\" or \"container.image.[COMPONENT].version\" but let's use the same approach.\nIf you prefer using \"version.org.[COMPONENT]\", I would need to make some changes in some PRs (as it implies changes also in kogito-apps and kogito-examples).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469048216", "createdAt": "2020-08-12T07:04:57Z", "author": {"login": "Sgitario"}, "path": "pom.xml", "diffHunk": "@@ -154,8 +154,7 @@\n \n     <!-- container images for testing -->\n     <container.image.infinispan>quay.io/infinispan/server:${version.org.infinispan.image}</container.image.infinispan>\n-    <container.image.keycloak.version>8.0.1</container.image.keycloak.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTczOTk5NA==", "bodyText": "As discussed, we will prefer to use \"version.org.[COMPONENT]\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469739994", "createdAt": "2020-08-13T07:05:27Z", "author": {"login": "cristianonicolai"}, "path": "pom.xml", "diffHunk": "@@ -154,8 +154,7 @@\n \n     <!-- container images for testing -->\n     <container.image.infinispan>quay.io/infinispan/server:${version.org.infinispan.image}</container.image.infinispan>\n-    <container.image.keycloak.version>8.0.1</container.image.keycloak.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODIxNg=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MDQ3OQ==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/692#discussion_r469740479", "createdAt": "2020-08-13T07:06:30Z", "author": {"login": "Sgitario"}, "path": "pom.xml", "diffHunk": "@@ -154,8 +154,7 @@\n \n     <!-- container images for testing -->\n     <container.image.infinispan>quay.io/infinispan/server:${version.org.infinispan.image}</container.image.infinispan>\n-    <container.image.keycloak.version>8.0.1</container.image.keycloak.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODIxNg=="}, "originalCommit": {"oid": "a5d0a47060ac9f9ee650da96d75880c0b0b129b6"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4927, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}