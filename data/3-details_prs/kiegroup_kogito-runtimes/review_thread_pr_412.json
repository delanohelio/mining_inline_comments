{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTk3Mzg2", "number": 412, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNjoyOVrODuPcbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNTozN1rODwDG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE0MTI1OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNjoyOVrOGAIYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTozODoxM1rOGCnMvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDQ4NQ==", "bodyText": "@kostola\nHi! What's the need of the \"return this\" ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402790485", "createdAt": "2020-04-03T07:36:29Z", "author": {"login": "gitgabrio"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzM1Ng==", "bodyText": "this is unrelated to this PR. The API was supposed to allow chaining.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402913356", "createdAt": "2020-04-03T10:34:11Z", "author": {"login": "evacchi"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDQ4NQ=="}, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3OTUwMA==", "bodyText": "@evacchi\nYup, I saw it is not related to this PR.\nI'm asking because it seems to lead to something like\nnew CachedRuleEventListenerConfig(...).register(....).somethingelse(...) that looks a lot like a mixed pattern (maybe better avoided, IMHO)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402979500", "createdAt": "2020-04-03T12:46:44Z", "author": {"login": "gitgabrio"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDQ4NQ=="}, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5MjU3NQ==", "bodyText": "This is just a renaming. Let's discuss the API structure separately \ud83d\ude09", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405392575", "createdAt": "2020-04-08T09:38:13Z", "author": {"login": "kostola"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDQ4NQ=="}, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE0MjkxOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNjo1N1rOGAIZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTozODozMlrOGCnNkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDcyOA==", "bodyText": "@kostola\nSame question as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402790728", "createdAt": "2020-04-03T07:36:57Z", "author": {"login": "gitgabrio"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;\n     }\n-    \n+\n     public CachedRuleEventListenerConfig register(RuleRuntimeEventListener listener) {\n         ruleRuntimeListeners.add(listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5Mjc4Nw==", "bodyText": "Same answer as above \ud83d\ude04", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405392787", "createdAt": "2020-04-08T09:38:32Z", "author": {"login": "kostola"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;\n     }\n-    \n+\n     public CachedRuleEventListenerConfig register(RuleRuntimeEventListener listener) {\n         ruleRuntimeListeners.add(listener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDcyOA=="}, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE1Nzc4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0MToyMFrOGAIiEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTozOToxNVrOGCnPZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5Mjk3OQ==", "bodyText": "@kostola\nHi! It looks like the whole method could be a class in itself; splitting it would allow far easier testing, IMHO.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402792979", "createdAt": "2020-04-03T07:41:20Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -148,11 +151,11 @@ CompilationUnit compilationUnit() {\n             annotator.withInjection(configField);\n         } else {\n             configField = new FieldDeclaration()\n-                .addModifier(Modifier.Keyword.PROTECTED)\n-                .addVariable(new VariableDeclarator()\n-                                     .setType(Config.class.getCanonicalName())\n-                                     .setName(\"config\")\n-                                     .setInitializer(configGenerator.newInstance()));\n+                    .addModifier(Modifier.Keyword.PROTECTED)\n+                    .addVariable(new VariableDeclarator()\n+                            .setType(Config.class.getCanonicalName())\n+                            .setName(\"config\")\n+                            .setInitializer(new NullLiteralExpr() /* TODO: fix this - configGenerator.newInstance() */));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5MzI1NA==", "bodyText": "Resolving since this code is outdated after moving the refactoring out of this PR.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405393254", "createdAt": "2020-04-08T09:39:15Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -148,11 +151,11 @@ CompilationUnit compilationUnit() {\n             annotator.withInjection(configField);\n         } else {\n             configField = new FieldDeclaration()\n-                .addModifier(Modifier.Keyword.PROTECTED)\n-                .addVariable(new VariableDeclarator()\n-                                     .setType(Config.class.getCanonicalName())\n-                                     .setName(\"config\")\n-                                     .setInitializer(configGenerator.newInstance()));\n+                    .addModifier(Modifier.Keyword.PROTECTED)\n+                    .addVariable(new VariableDeclarator()\n+                            .setType(Config.class.getCanonicalName())\n+                            .setName(\"config\")\n+                            .setInitializer(new NullLiteralExpr() /* TODO: fix this - configGenerator.newInstance() */));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5Mjk3OQ=="}, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODcxOTQ4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToxOTowMVrOGANW-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTozOToyMlrOGCnPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3MjA1Nw==", "bodyText": "Is APPLICATION_CONFIG still used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402872057", "createdAt": "2020-04-03T09:19:01Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -23,6 +23,7 @@\n         APPLICATION,\n         APPLICATION_SECTION,\n         APPLICATION_CONFIG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5MzMzOA==", "bodyText": "Resolving since this code is outdated after moving the refactoring out of this PR.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405393338", "createdAt": "2020-04-08T09:39:22Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -23,6 +23,7 @@\n         APPLICATION,\n         APPLICATION_SECTION,\n         APPLICATION_CONFIG,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3MjA1Nw=="}, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjMzMjE3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/config/DecisionConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NjoyOVrOGCtiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToyMTozM1rOGD38Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjM1OA==", "bodyText": "I think most of the other classes use a dedicated method to perform this check (i.e. link ). What about change it to be consistent?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405496358", "createdAt": "2020-04-08T12:46:29Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/config/DecisionConfigGenerator.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.decision.config;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.BodyDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.decision.DecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.CachedDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.DefaultDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+\n+import static org.kie.kogito.codegen.CodegenUtils.field;\n+import static org.kie.kogito.codegen.CodegenUtils.genericType;\n+import static org.kie.kogito.codegen.CodegenUtils.newObject;\n+import static org.kie.kogito.codegen.CodegenUtils.parameter;\n+import static org.kie.kogito.codegen.CodegenUtils.privateField;\n+import static org.kie.kogito.codegen.CodegenUtils.privateMethod;\n+import static org.kie.kogito.codegen.ConfigGenerator.callMerge;\n+\n+public class DecisionConfigGenerator {\n+\n+    private static final String METHOD_EXTRACT_DECISION_EVENT_LISTENER_CONFIG = \"extract_decisionEventListenerConfig\";\n+    private static final String METHOD_MERGE_DECISION_EVENT_LISTENER_CONFIG = \"merge_decisionEventListenerConfig\";\n+    private static final String VAR_DECISION_EVENT_LISTENER_CONFIG = \"decisionEventListenerConfigs\";\n+    private static final String VAR_DEFAULT_DECISION_EVENT_LISTENER_CONFIG = \"defaultDecisionEventListenerConfig\";\n+    private static final String VAR_DMN_RUNTIME_EVENT_LISTENERS = \"dmnRuntimeEventListeners\";\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    private List<BodyDeclaration<?>> members = new ArrayList<>();\n+\n+    public ObjectCreationExpr newInstance() {\n+        if (annotator != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3OTk0Mw==", "bodyText": "@danielezonca all the *ConfigGenerator classes (and a few others) don't implement the useInjection method but checks directly for annotator != null.\nI agree that we should make it consistent.\nDo you want me to change everywhere (or at least all the *ConfigGenerator classes)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406679943", "createdAt": "2020-04-10T09:24:23Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/config/DecisionConfigGenerator.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.decision.config;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.BodyDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.decision.DecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.CachedDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.DefaultDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+\n+import static org.kie.kogito.codegen.CodegenUtils.field;\n+import static org.kie.kogito.codegen.CodegenUtils.genericType;\n+import static org.kie.kogito.codegen.CodegenUtils.newObject;\n+import static org.kie.kogito.codegen.CodegenUtils.parameter;\n+import static org.kie.kogito.codegen.CodegenUtils.privateField;\n+import static org.kie.kogito.codegen.CodegenUtils.privateMethod;\n+import static org.kie.kogito.codegen.ConfigGenerator.callMerge;\n+\n+public class DecisionConfigGenerator {\n+\n+    private static final String METHOD_EXTRACT_DECISION_EVENT_LISTENER_CONFIG = \"extract_decisionEventListenerConfig\";\n+    private static final String METHOD_MERGE_DECISION_EVENT_LISTENER_CONFIG = \"merge_decisionEventListenerConfig\";\n+    private static final String VAR_DECISION_EVENT_LISTENER_CONFIG = \"decisionEventListenerConfigs\";\n+    private static final String VAR_DEFAULT_DECISION_EVENT_LISTENER_CONFIG = \"defaultDecisionEventListenerConfig\";\n+    private static final String VAR_DMN_RUNTIME_EVENT_LISTENERS = \"dmnRuntimeEventListeners\";\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    private List<BodyDeclaration<?>> members = new ArrayList<>();\n+\n+    public ObjectCreationExpr newInstance() {\n+        if (annotator != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjM1OA=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxNTQ5NA==", "bodyText": "Ok so in this case it is fine to keep it. Can you please just create a new ticket to review/refactor this check?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406715494", "createdAt": "2020-04-10T11:21:33Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/config/DecisionConfigGenerator.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.decision.config;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.BodyDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.decision.DecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.CachedDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.DefaultDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+\n+import static org.kie.kogito.codegen.CodegenUtils.field;\n+import static org.kie.kogito.codegen.CodegenUtils.genericType;\n+import static org.kie.kogito.codegen.CodegenUtils.newObject;\n+import static org.kie.kogito.codegen.CodegenUtils.parameter;\n+import static org.kie.kogito.codegen.CodegenUtils.privateField;\n+import static org.kie.kogito.codegen.CodegenUtils.privateMethod;\n+import static org.kie.kogito.codegen.ConfigGenerator.callMerge;\n+\n+public class DecisionConfigGenerator {\n+\n+    private static final String METHOD_EXTRACT_DECISION_EVENT_LISTENER_CONFIG = \"extract_decisionEventListenerConfig\";\n+    private static final String METHOD_MERGE_DECISION_EVENT_LISTENER_CONFIG = \"merge_decisionEventListenerConfig\";\n+    private static final String VAR_DECISION_EVENT_LISTENER_CONFIG = \"decisionEventListenerConfigs\";\n+    private static final String VAR_DEFAULT_DECISION_EVENT_LISTENER_CONFIG = \"defaultDecisionEventListenerConfig\";\n+    private static final String VAR_DMN_RUNTIME_EVENT_LISTENERS = \"dmnRuntimeEventListeners\";\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    private List<BodyDeclaration<?>> members = new ArrayList<>();\n+\n+    public ObjectCreationExpr newInstance() {\n+        if (annotator != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjM1OA=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA1NTc3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyODowMVrOGC0m2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODozOTowM1rOGD0x3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMjI1MA==", "bodyText": "I am not in love with this class, starting with the name CodegenUtils, it easily makes it the target for a \"dump\" containing anything. I see that you only moved it, but the number of methods has grown a lot.\nIn general, I usually create \"topic\" modules like Fields, Types, etc...\nbut in this case I would argue that the constructors found in javaparser are in general more than enough.\nVariableDeclarator etc etc is definitely a bit boring to use, but then just add a shorthand for variable declarator :)\nbesides, I think that this code is mostly unused, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405612250", "createdAt": "2020-04-08T15:28:01Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTU1NQ==", "bodyText": "In my idea, this class is useful to make the code-generation code more readable, since a lot of common patterns in JavaParser are constantly repeated (e.g. creating a variable, a generic type definition, etc.).\nHere is a snippet in which some of those methods are used: https://github.com/kiegroup/kogito-runtimes/pull/412/files#diff-50ac5c7365b5b0682209e3695be81b51R105-R133\nI would like to keep this class. I agree with you on splitting it into several *Utils classes to avoid having a big dump of everything in the end, maybe moving all of them in a dedicated utils subpackage.\nI think I'm using all of these methods somehow, but not all the overloaded version, which could be cleaned up as well.\nIn addition, there was already a CodegenUtils class in the process subpackage that was instead used all around in rules and decisions as well. I moved those methods in this class.\nLet me know what you think about my suggestions.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406015555", "createdAt": "2020-04-09T07:43:42Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMjI1MA=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2MzY0Nw==", "bodyText": "I simplified CodegenUtils keeping only the meaningful methods.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406663647", "createdAt": "2020-04-10T08:39:03Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMjI1MA=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA2NjY4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMDoxOFrOGC0tvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODozOTo1OFrOGD0zPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDAxMw==", "bodyText": "I mean is this more readable than:\n        new FieldDeclaration()\n                .setModifiers(PUBLIC)\n                .addVariable(new VariableDeclarator(type, name))\nor even:\n        new FieldDeclaration(nodeList(PUBLIC, new VariableDeclarator(type, name))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405614013", "createdAt": "2020-04-08T15:30:18Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {\n+\n+    private static final Modifier.Keyword[] NONE = new Modifier.Keyword[]{};\n+    private static final Modifier.Keyword[] PUBLIC = new Modifier.Keyword[]{Modifier.Keyword.PUBLIC};\n+    private static final Modifier.Keyword[] PROTECTED = new Modifier.Keyword[]{Modifier.Keyword.PROTECTED};\n+    private static final Modifier.Keyword[] PRIVATE = new Modifier.Keyword[]{Modifier.Keyword.PRIVATE};\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, Class<?> inner) {\n+        return genericType(outer.getCanonicalName(), inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, Class<?> inner) {\n+        return genericType(outer, inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, String inner) {\n+        return genericType(outer.getCanonicalName(), inner);\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, String inner) {\n+        return new ClassOrInterfaceType(null, outer).setTypeArguments(new ClassOrInterfaceType(null, inner));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name, Expression expr) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name, expr));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Class<?> type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMTkyNw==", "bodyText": "Probably my knowledge of JavaParser APIs is not deep enough. I can clean this up if you want.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406021927", "createdAt": "2020-04-09T07:55:38Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {\n+\n+    private static final Modifier.Keyword[] NONE = new Modifier.Keyword[]{};\n+    private static final Modifier.Keyword[] PUBLIC = new Modifier.Keyword[]{Modifier.Keyword.PUBLIC};\n+    private static final Modifier.Keyword[] PROTECTED = new Modifier.Keyword[]{Modifier.Keyword.PROTECTED};\n+    private static final Modifier.Keyword[] PRIVATE = new Modifier.Keyword[]{Modifier.Keyword.PRIVATE};\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, Class<?> inner) {\n+        return genericType(outer.getCanonicalName(), inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, Class<?> inner) {\n+        return genericType(outer, inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, String inner) {\n+        return genericType(outer.getCanonicalName(), inner);\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, String inner) {\n+        return new ClassOrInterfaceType(null, outer).setTypeArguments(new ClassOrInterfaceType(null, inner));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name, Expression expr) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name, expr));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Class<?> type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDAxMw=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2Mzk5Ng==", "bodyText": "I removed this utils method to use JavaParser APIs directly as you suggested.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406663996", "createdAt": "2020-04-10T08:39:58Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {\n+\n+    private static final Modifier.Keyword[] NONE = new Modifier.Keyword[]{};\n+    private static final Modifier.Keyword[] PUBLIC = new Modifier.Keyword[]{Modifier.Keyword.PUBLIC};\n+    private static final Modifier.Keyword[] PROTECTED = new Modifier.Keyword[]{Modifier.Keyword.PROTECTED};\n+    private static final Modifier.Keyword[] PRIVATE = new Modifier.Keyword[]{Modifier.Keyword.PRIVATE};\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, Class<?> inner) {\n+        return genericType(outer.getCanonicalName(), inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, Class<?> inner) {\n+        return genericType(outer, inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, String inner) {\n+        return genericType(outer.getCanonicalName(), inner);\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, String inner) {\n+        return new ClassOrInterfaceType(null, outer).setTypeArguments(new ClassOrInterfaceType(null, inner));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name, Expression expr) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name, expr));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Class<?> type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDAxMw=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA5MTU5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/di/DependencyInjectionAnnotator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNTozN1rOGC09Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMjowOFrOGDzL8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzkyMg==", "bodyText": "I am not against this change per se, but why is it needed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405617922", "createdAt": "2020-04-08T15:35:37Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/di/DependencyInjectionAnnotator.java", "diffHunk": "@@ -42,140 +43,184 @@\n  */\n public interface DependencyInjectionAnnotator {\n \n+    /**\n+     * Annotates given node with name annotation e.g. Named, Qualifier\n+     *\n+     * @param node node to be annotated\n+     */\n+    <T extends NodeWithAnnotations<?>> T withNamed(T node, String name);\n+\n     /**\n      * Annotates given node with application level annotations e.g. ApplicationScoped, Component\n+     *\n      * @param node node to be annotated\n      */\n-    void withApplicationComponent(NodeWithAnnotations<?> node);\n-    \n+    <T extends NodeWithAnnotations<?>> T withApplicationComponent(T node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMTMyMg==", "bodyText": "This syntax allows to keep the old behavior but also chain calls together.\nI used it and I think it makes the code more concise, like this: https://github.com/kiegroup/kogito-runtimes/pull/412/files#diff-50ac5c7365b5b0682209e3695be81b51R74", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406011322", "createdAt": "2020-04-09T07:35:06Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/di/DependencyInjectionAnnotator.java", "diffHunk": "@@ -42,140 +43,184 @@\n  */\n public interface DependencyInjectionAnnotator {\n \n+    /**\n+     * Annotates given node with name annotation e.g. Named, Qualifier\n+     *\n+     * @param node node to be annotated\n+     */\n+    <T extends NodeWithAnnotations<?>> T withNamed(T node, String name);\n+\n     /**\n      * Annotates given node with application level annotations e.g. ApplicationScoped, Component\n+     *\n      * @param node node to be annotated\n      */\n-    void withApplicationComponent(NodeWithAnnotations<?> node);\n-    \n+    <T extends NodeWithAnnotations<?>> T withApplicationComponent(T node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzkyMg=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNzU1NA==", "bodyText": "ok thanks for the clarification. I don't think the self-recursive type is required unless you need to explicitly to access metods of the subtype, which I don't think is the case. Let's keep it, but FYI it can be simplified for readability", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r406637554", "createdAt": "2020-04-10T07:22:08Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/di/DependencyInjectionAnnotator.java", "diffHunk": "@@ -42,140 +43,184 @@\n  */\n public interface DependencyInjectionAnnotator {\n \n+    /**\n+     * Annotates given node with name annotation e.g. Named, Qualifier\n+     *\n+     * @param node node to be annotated\n+     */\n+    <T extends NodeWithAnnotations<?>> T withNamed(T node, String name);\n+\n     /**\n      * Annotates given node with application level annotations e.g. ApplicationScoped, Component\n+     *\n      * @param node node to be annotated\n      */\n-    void withApplicationComponent(NodeWithAnnotations<?> node);\n-    \n+    <T extends NodeWithAnnotations<?>> T withApplicationComponent(T node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzkyMg=="}, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 207, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}