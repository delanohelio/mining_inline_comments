{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MzkwNjE1", "number": 807, "title": "KOGITO-3408  CloudEvent Kafka Publisher+Emitter (Quarkus)", "bodyText": "https://issues.redhat.com/browse/KOGITO-3408\nrelated kiegroup/kogito-examples#386\n\ntemplated spring and cdi message consumers\nmodified cdi message generator to use Publisher\nadd quarkus ce subscriber\nfilter out messages on the receiving end (consumer) by checking the data type\nadd emitter for quarkus\nadd kafka emitter for spring -- but it needs work: it is still kafka-specific!\ntemporarily disabled kafka ping/pong example for quarkus and spring (*)\nall other integration tests build and pass\nevent-related examples should work\n\n(*)  not sure how to make it work, because the auto-generated name for the Event object is different, and filtering is name-based: Ping_messageMessageDataEvent_3 vs Ping_messageMessageDataEvent_4)\n\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-10-06T09:15:28Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807", "merged": true, "mergeCommit": {"oid": "6cceaa71ed323c49df69c1f405ea06f9a75dea92"}, "closed": true, "closedAt": "2020-10-27T13:08:17Z", "author": {"login": "evacchi"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ1tHMABqjM4NjAwMTg0ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWj8I2ABqjM5MjQ0MDAyNzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c59ad130de707871b149cdf6ac85cf2ba68a0a9", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2c59ad130de707871b149cdf6ac85cf2ba68a0a9", "committedDate": "2020-10-09T11:36:58Z", "message": "fix"}, "afterCommit": {"oid": "c6ca86a2a575966812aeef2e56023f2362860dc4", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c6ca86a2a575966812aeef2e56023f2362860dc4", "committedDate": "2020-10-09T12:41:29Z", "message": "fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "566367cfb79c11ccad69e20938017ef36a4d73b4", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/566367cfb79c11ccad69e20938017ef36a4d73b4", "committedDate": "2020-10-12T16:16:52Z", "message": "re-disable pingpong in spring too"}, "afterCommit": {"oid": "0eeb9b8eec9a06e20a71b12a2379cf5476f67f19", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0eeb9b8eec9a06e20a71b12a2379cf5476f67f19", "committedDate": "2020-10-13T06:23:00Z", "message": "re-disable pingpong in spring too"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3Njg0MjQx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#pullrequestreview-507684241", "createdAt": "2020-10-13T17:43:33Z", "commit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDc0MjY1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#pullrequestreview-507474265", "createdAt": "2020-10-13T14:06:33Z", "commit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowNjozM1rOHgolCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1Njo1NFrOHgy3lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MTMyMA==", "bodyText": "Can we assume the event.type is in fact the class name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r503981320", "createdAt": "2020-10-13T14:06:33Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,13 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MDI4MQ==", "bodyText": "I think Multi<String> events could be set as a parameter of the method.\nLike:\nMulti<String>  makeMulti(@Channel(\"kogito_incoming_stream\") Multi<String> events)...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504140281", "createdAt": "2020-10-13T17:40:43Z", "author": {"login": "tiagodolphine"}, "path": "kogito-shared/events-quarkus/src/main/java/org/kie/kogito/shared/events/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.quarkus;import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.runtime.Startup;\n+import io.smallrye.mutiny.Multi;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Takes a @Channel event stream and re-exposes it as a Multi\n+ * (a subclass of {@link Publisher})\n+ */\n+@Startup\n+public class QuarkusCloudEventPublisher {\n+    @Channel(\"kogito_incoming_stream\")\n+    Multi<String> events;\n+\n+    @Produces\n+    @Named(\"kogito_event_publisher\")\n+    public Multi<String> makeMulti() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MjYxNA==", "bodyText": "One suggestion would be to make async the method return like CompletionStage<Response> then you could do emitter.send(...).thenApply(Response.ok().build())", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504142614", "createdAt": "2020-10-13T17:45:08Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,33 +28,19 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n-    @javax.annotation.PostConstruct\n-    public void setup() {\n-        emitters = new HashMap<>();\n-        objectMapper.registerModule(JsonFormat.getCloudEventJacksonModule());\n-        /*\n-         * $repeat$\n-         * emitters.put(\"$channel$\", $emitter$);\n-         * $end_repeat$\n-         */\n-    }\n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")\n+    @javax.inject.Inject()\n+    Emitter<String> emitter;\n \n     @POST()\n     @Consumes({MediaType.APPLICATION_JSON, JsonFormat.CONTENT_TYPE})\n     @Produces(MediaType.APPLICATION_JSON)\n     public javax.ws.rs.core.Response cloudEventListener(CloudEvent event) {\n         try {\n             LOGGER.debug(\"CloudEvent received: {}\", Printer.beautify(event));\n-            if (emitters.get(event.getType()) != null) {\n-                // convert CloudEvent to JSON and send to internal channels\n-                emitters.get(event.getType()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else if (emitters.get(event.getSource().toString()) != null) { // try the source instead\n-                emitters.get(event.getSource().toString()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else {\n-                return Responses.channelNotBound(event.getType(), event);\n-            }\n+            // convert CloudEvent to JSON and send to internal channels\n+            emitter.send(objectMapper.writeValueAsString(event));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDc1MA==", "bodyText": "can't you just to r.completable() to be returned?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504144750", "createdAt": "2020-10-13T17:48:07Z", "author": {"login": "tiagodolphine"}, "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.spring;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.support.SendResult;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.concurrent.ListenableFuture;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+\n+/**\n+ * Spring implementation delegating to kafka template\n+ * TODO proper error handling\n+ */\n+@Component\n+public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+    @Autowired\n+    org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+\n+    public CompletionStage<Void> emit(String e) {\n+        ListenableFuture<SendResult<String, String>> r = emitter.send(\"kogito_outgoing_stream\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTkwOA==", "bodyText": "maybe it would be better to subscribe into a shared executor, like .runSubscriptionOn(executor).subscribe().... because in this way the subscription to receive/handle the events would be using a different thread pool, instead of the same thread as the one bootstrapping CDI, but I'm not sure, maybe it is worth to print the thread name in the log info call and check it when receiving events... wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504149908", "createdAt": "2020-10-13T17:56:54Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageConsumerTemplate.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package $Package$;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventConsumerFactory;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import io.smallrye.mutiny.Multi;\n+\n+@io.quarkus.runtime.Startup\n+public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    @javax.inject.Inject\n+    Application application;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"$ProcessName$\") Process<$Type$> process;\n+\n+    @javax.inject.Inject\n+    ConfigBean configBean;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"kogito_event_publisher\") Publisher<String> eventPublisher;\n+\n+    @javax.annotation.PostConstruct\n+    void init() {\n+        setParams(application,\n+              process,\n+              $DataType$.class,\n+              $DataEventType$.class,\n+              \"$Trigger$\",\n+              new DefaultEventConsumerFactory(),\n+              configBean.useCloudEvents());\n+\n+        Multi.createFrom().publisher(eventPublisher)\n+                .invoke(x -> logger.info(\"Received: {}\", x))\n+                .subscribe()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzQyODQz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#pullrequestreview-507742843", "createdAt": "2020-10-13T19:01:39Z", "commit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMTo0MFrOHg1Pow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToyOTo1MlrOHg2L7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4ODgzNQ==", "bodyText": "Can you please create ticket/add ticket id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504188835", "createdAt": "2020-10-13T19:01:40Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/PingPongMessageTest.java", "diffHunk": "@@ -31,6 +32,7 @@\n \n @QuarkusTest\n @QuarkusTestResource(KafkaQuarkusTestResource.class)\n+@Disabled(\"Must rewrite with cloud event support + must implement emitter!\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTM3MA==", "bodyText": "Can you please remove version?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504189370", "createdAt": "2020-10-13T19:02:40Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/pom.xml", "diffHunk": "@@ -65,6 +65,12 @@\n             <artifactId>kogito-springboot-starter</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.kie.kogito</groupId>\n+            <artifactId>kogito-shared-events-spring</artifactId>\n+            <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTYwMw==", "bodyText": "Can you please add Jira id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504189603", "createdAt": "2020-10-13T19:03:04Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -32,6 +32,9 @@\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n+import org.junit.jupiter.api.Disabled;\n+\n+@Disabled(\"Must implement cloud event producer/emitter for Spring\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTkyOQ==", "bodyText": "What about warn instead of debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504189929", "createdAt": "2020-10-13T19:03:39Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,14 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType()) && !cloudEventClass.getSimpleName().equals(cloudEvent.getSource())) {\n+                logger.debug(\"Consumer for CloudEvent type '{}': ignoring message with type '{}',  source '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MTY0MA==", "bodyText": "Can you please create a ticket about removing this deprecated class and link it here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504191640", "createdAt": "2020-10-13T19:06:46Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/events/CloudEventsMessageProducerGenerator.java", "diffHunk": "@@ -15,26 +15,84 @@\n \n package org.kie.kogito.codegen.process.events;\n \n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.Expression;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n import org.jbpm.compiler.canonical.TriggerMetaData;\n import org.kie.api.definition.process.WorkflowProcess;\n+import org.kie.kogito.codegen.BodyDeclarationComparator;\n import org.kie.kogito.codegen.process.MessageProducerGenerator;\n \n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.kie.kogito.codegen.CodegenUtils.interpolateTypes;\n+\n+/**\n+ * @deprecated now all messages are cloud events", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MzcxMw==", "bodyText": "Sorry for the question but why \"shared\"? As far as I can see it is the opposite: this module contains platform specific components", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504193713", "createdAt": "2020-10-13T19:10:37Z", "author": {"login": "danielezonca"}, "path": "kogito-shared/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<!--\n+  ~  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~        http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-build-parent</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <relativePath>../kogito-build-parent/pom.xml</relativePath>\n+  </parent>\n+  <artifactId>kogito-shared</artifactId>\n+  <packaging>pom</packaging>\n+  <name>Kogito :: Shared Runtime Components</name>\n+  <description>Shared Runtime Components</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDA4NA==", "bodyText": "What about a javadoc?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504194084", "createdAt": "2020-10-13T19:11:13Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/CloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.services.event;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+public interface CloudEventEmitter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDgyNw==", "bodyText": "Do we have a quarkis issue link to paste here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504194827", "createdAt": "2020-10-13T19:12:36Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import java.util.Optional;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventConsumerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractMessageConsumer<M extends Model, D, T extends AbstractProcessDataEvent<D>> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    private Process<M> process;\n+    private Application application;\n+    private EventConsumerFactory eventConsumerFactory;\n+    private Optional<Boolean> useCloudEvents;\n+    private String trigger;\n+    private Class<D> dataEventClass;\n+    private Class<T> cloudEventClass;\n+\n+    // in general we should favor the non-empty constructor\n+    // but there is an issue with Quarkus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NTA2OA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504195068", "createdAt": "2020-10-13T19:13:07Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageProducer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.EventConsumerFactory;\n+import org.kie.kogito.services.event.EventMarshaller;\n+\n+public abstract class AbstractMessageProducer<D, T extends AbstractProcessDataEvent<D>> {\n+\n+    private Optional<Boolean> useCloudEvents;\n+    private Class<D> dataEventClass;\n+    private Class<T> cloudEventClass;\n+    private EventMarshaller marshaller;\n+    private CloudEventEmitter emitter;\n+\n+    // in general we should favor the non-empty constructor\n+    // but there is an issue with Quarkus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5ODMzOQ==", "bodyText": "In MessageConsumerGenerator the same method returns\ngenerator.generatedFilePath();\nWhile here is different.\nCan you please verify?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504198339", "createdAt": "2020-10-13T19:19:09Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/MessageProducerGenerator.java", "diffHunk": "@@ -65,81 +70,52 @@ public MessageProducerGenerator(\n         this.resourceClazzName = classPrefix + \"MessageProducer_\" + trigger.getOwnerId();\n         this.relativePath = packageName.replace(\".\", \"/\") + \"/\" + resourceClazzName + \".java\";\n         this.messageDataEventClassName = messageDataEventClassName;\n+\n+        this.generator = new TemplatedGenerator(\n+                packageName,\n+                resourceClazzName,\n+                RESOURCE_CDI,\n+                RESOURCE_SPRING,\n+                RESOURCE);\n+\n     }\n \n     public MessageProducerGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n         this.annotator = annotator;\n+        generator.withDependencyInjection(annotator);\n         return this;\n     }\n \n-    public String className() {\n-        return resourceClazzName;\n-    }\n-\n-    public String generatedFilePath() {\n-        return relativePath;\n-    }\n-\n-    protected boolean useInjection() {\n-        return this.annotator != null;\n-    }\n-\n-    protected String getTemplate() {\n-        return CLASS_TEMPLATE;\n-    }\n-\n     public String generate() {\n-        CompilationUnit clazz = parse(\n-                this.getClass().getResourceAsStream(this.getTemplate()));\n+        CompilationUnit clazz = generator.compilationUnit()\n+                .orElseThrow(() -> new InvalidTemplateException(resourceClazzName, generator.templatePath(), \"Cannot generate message producer\"));\n         clazz.setPackageDeclaration(process.getPackageName());\n \n         ClassOrInterfaceDeclaration template = clazz.findFirst(ClassOrInterfaceDeclaration.class).get();\n         template.setName(resourceClazzName);\n+        template.findAll(ConstructorDeclaration.class).forEach(cd -> cd.setName(resourceClazzName));\n \n         template.findAll(ClassOrInterfaceType.class).forEach(cls -> interpolateTypes(cls, trigger.getDataType()));\n-        template.findAll(MethodDeclaration.class).stream().filter(md -> md.getNameAsString().equals(\"produce\")).forEach(md -> md.getParameters().stream().filter(p -> p.getNameAsString().equals(EVENT_DATA_VAR)).forEach(p -> p.setType(trigger.getDataType())));\n-        template.findAll(MethodDeclaration.class).stream().filter(md -> md.getNameAsString().equals(\"configure\")).forEach(md -> md.addAnnotation(\"javax.annotation.PostConstruct\"));\n-        template.findAll(MethodDeclaration.class).stream().filter(md -> md.getNameAsString().equals(\"marshall\")).forEach(md -> {\n-            md.getParameters().stream().filter(p -> p.getNameAsString().equals(EVENT_DATA_VAR)).forEach(p -> p.setType(trigger.getDataType()));\n-            md.findAll(StringLiteralExpr.class).forEach(s -> s.setString(s.getValue().replace(\"$channel$\", trigger.getName())));\n-            md.findAll(ClassOrInterfaceType.class).forEach(t -> t.setName(t.getNameAsString().replace(\"$DataEventType$\", messageDataEventClassName)));\n-        });\n-\n-        if (useInjection()) {\n-            annotator.withApplicationComponent(template);\n-\n-            FieldDeclaration emitterField = template.findFirst(FieldDeclaration.class)\n-                    .filter(fd -> fd.getVariables().stream().anyMatch(v -> v.getNameAsString().equals(\"emitter\")))\n-                    .orElseThrow(() -> new IllegalStateException(\"Cannot find emitter field in MessageProducerTemplate\"));\n-            annotator.withInjection(emitterField);\n-            annotator.withOutgoingMessage(emitterField, trigger.getName());\n-            emitterField.getVariable(0).setType(annotator.emitterType(\"String\"));\n-\n-            MethodDeclaration produceMethod = template.findAll(MethodDeclaration.class).stream()\n-                    .filter(md -> md.getNameAsString().equals(\"produce\"))\n-                    .findFirst().orElseThrow(() -> new IllegalStateException(\"Cannot find produce methods in MessageProducerTemplate\"));\n-\n-            MethodCallExpr sendMethodCall = new MethodCallExpr(new NameExpr(\"emitter\"), \"send\");\n-            annotator.withMessageProducer(\n-                    sendMethodCall,\n-                    trigger.getName(),\n-                    new MethodCallExpr(new ThisExpr(), \"marshall\")\n-                            .addArgument(new NameExpr(\"pi\"))\n-                            .addArgument(new NameExpr(EVENT_DATA_VAR)));\n-\n-            this.generateProduceMethodBody(produceMethod, sendMethodCall);\n-\n-            template.findAll(FieldDeclaration.class,\n-                             fd -> fd.getVariable(0).getNameAsString().equals(\"useCloudEvents\")).forEach(fd -> annotator.withConfigInjection(fd, \"kogito.messaging.as-cloudevents\"));\n-        }\n+        template.findAll(ClassOrInterfaceType.class).forEach(t -> t.setName(t.getNameAsString().replace(\"$DataEventType$\", messageDataEventClassName)));\n+        template.findAll(ClassOrInterfaceType.class).forEach(t -> t.setName(t.getNameAsString().replace(\"$DataType$\", trigger.getDataType())));\n+        template.findAll(StringLiteralExpr.class).forEach(s -> s.setString(s.getValue().replace(\"$channel$\", trigger.getName())));\n+        template.findAll(StringLiteralExpr.class).forEach(s -> s.setString(s.getValue().replace(\"$channel$\", trigger.getName())));\n+\n \n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n \n-    protected void generateProduceMethodBody(final MethodDeclaration produceMethod, final MethodCallExpr sendMethodCall) {\n-        BlockStmt body = new BlockStmt();\n-        body.addStatement(sendMethodCall);\n-        produceMethod.setBody(body);\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    public String generatedFilePath() {\n+        return relativePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5ODcwOA==", "bodyText": "Do we have a ticket for that to refer here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504198708", "createdAt": "2020-10-13T19:19:45Z", "author": {"login": "danielezonca"}, "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.spring;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.support.SendResult;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.concurrent.ListenableFuture;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+\n+/**\n+ * Spring implementation delegating to kafka template\n+ * TODO proper error handling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNDI2OQ==", "bodyText": "Is this class quarkus specific? If yes please rename with CDI prefix, otherwise I'm not sure we can use microprofile reactive messaging with Spring", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504204269", "createdAt": "2020-10-13T19:29:52Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,15 +28,13 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "813487288cd3104832607e7fe89430621ab6b728", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/813487288cd3104832607e7fe89430621ab6b728", "committedDate": "2020-10-14T18:27:34Z", "message": "cleanup"}, "afterCommit": {"oid": "4c9cac0bfb5b8d64b71d18c37dba4fa6cf1294a2", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4c9cac0bfb5b8d64b71d18c37dba4fa6cf1294a2", "committedDate": "2020-10-15T15:15:34Z", "message": "KOGITO-3408 CloudEvent Kafka Publisher/Emitter (Quarkus)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzYyNDAz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#pullrequestreview-511762403", "createdAt": "2020-10-19T13:31:15Z", "commit": {"oid": "7dd74a5c6b55d172cd0b611d9af4ab04c6d3ba2b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozMToxNVrOHkOdlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozMToxNVrOHkOdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NzczMw==", "bodyText": "Unused dependency?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r507747733", "createdAt": "2020-10-19T13:31:15Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -18,6 +18,7 @@\n import javax.ws.rs.core.MediaType;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.CompletionStage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd74a5c6b55d172cd0b611d9af4ab04c6d3ba2b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NjQ4NjM1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#pullrequestreview-515648635", "createdAt": "2020-10-23T13:07:34Z", "commit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzowNzozNFrOHnNEvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzowNzozNFrOHnNEvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MDcxNw==", "bodyText": "Is the Optional really needed ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r510870717", "createdAt": "2020-10-23T13:07:34Z", "author": {"login": "radtriste"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/conf/StaticConfigBean.java", "diffHunk": "@@ -14,21 +14,34 @@\n  */\n package org.kie.kogito.conf;\n \n+import java.util.Optional;\n+\n public class StaticConfigBean implements ConfigBean {\n \n     private String serviceUrl;\n+    private Optional<Boolean> useCloudEvents = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTg1NTU1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#pullrequestreview-516985555", "createdAt": "2020-10-26T16:55:44Z", "commit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NTo0NVrOHoZRmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NTo0NVrOHoZRmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExOTE5NA==", "bodyText": "the Optional is currently required at the use-sites @radtriste we can iterate and improve over this in further PRs though", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r512119194", "createdAt": "2020-10-26T16:55:45Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageProducerTemplate.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.kie.kogito.test;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventMarshaller;\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.impl.AbstractMessageProducer;\n+\n+@javax.enterprise.context.ApplicationScoped()\n+public class MessageProducer extends AbstractMessageProducer<$DataType$, $DataEventType$> {\n+\n+    @javax.inject.Inject()\n+    CloudEventEmitter emitter;\n+    @javax.inject.Inject()\n+    ConfigBean configBean;\n+\n+    @javax.annotation.PostConstruct\n+    public void init() {\n+        setParams(emitter,\n+                  new DefaultEventMarshaller(),\n+                  configBean.useCloudEvents());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f44650c953414f6602f60d8890eb8f06d64e98", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/57f44650c953414f6602f60d8890eb8f06d64e98", "committedDate": "2020-10-27T07:32:58Z", "message": "KOGITO-3408 CloudEvent Kafka Publisher/Emitter (Quarkus)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "115a504315c41fb229b028e97227cf4432b27f95", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/115a504315c41fb229b028e97227cf4432b27f95", "committedDate": "2020-10-27T07:32:58Z", "message": "renaming modules to addons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a54645cbf44b22749dfc87d38018ec0349b0540", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6a54645cbf44b22749dfc87d38018ec0349b0540", "committedDate": "2020-10-27T07:32:58Z", "message": "rm unused dep"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/920c27b7e7ecb8d1b884f0fa33280b55924ac88c", "committedDate": "2020-10-20T10:19:33Z", "message": "rm unused dep"}, "afterCommit": {"oid": "6a54645cbf44b22749dfc87d38018ec0349b0540", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6a54645cbf44b22749dfc87d38018ec0349b0540", "committedDate": "2020-10-27T07:32:58Z", "message": "rm unused dep"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4010, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}