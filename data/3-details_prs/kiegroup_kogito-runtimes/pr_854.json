{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDU3NzE2", "number": 854, "title": "KOGITO-3723 Use trigger name as cloud event type in producer", "bodyText": "https://issues.redhat.com/browse/KOGITO-3723\nThis fixes the ping pong examples for Quarkus and Spring Boot.\nCaveats:\n\nthe \"verify()\" method in the test has been commented out. I am not sure what it was testing @cristianonicolai\nthe semantics may vary slightly: now the message field is also used to filter out the incoming messages: the cloud event type of the outgoing message is set to the trigger; while incoming messages are checked against their envelope to see if their message matches the expected type\nthere is a bug where messages of the wrong type cause an exception to be thrown: we should rather first unmarshall the cloud event envelope, check the type, then unmarshall the payload. For now, if a consumer throws I am just logging a warning. See https://issues.redhat.com/browse/KOGITO-3724 as a follow up\n\n\n\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-10-28T10:57:14Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854", "merged": true, "mergeCommit": {"oid": "a35efd32c0653287ea5f466a065cc0a996227196"}, "closed": true, "closedAt": "2020-11-05T15:23:13Z", "author": {"login": "evacchi"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXSQCTABqjM5MzYzNTIwNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZf9-3AFqTUyNDEzMTc1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a933a1288b180d5022824c0523e966f5631620ac", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a933a1288b180d5022824c0523e966f5631620ac", "committedDate": "2020-10-28T10:44:59Z", "message": "fix test, producer template, kafka publisher"}, "afterCommit": {"oid": "7f5a73b561e02f4865d9cd8293b8ff1d11821732", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7f5a73b561e02f4865d9cd8293b8ff1d11821732", "committedDate": "2020-10-29T13:33:04Z", "message": "KOGITO-3723 Use trigger name as cloud event type in producer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Nzg1NTY2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-519785566", "createdAt": "2020-10-29T15:24:34Z", "commit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDozNFrOHqhO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyNDozNFrOHqhO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjcyNg==", "bodyText": "@cristianonicolai this fails not sure why", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r514346726", "createdAt": "2020-10-29T15:24:34Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -52,7 +49,7 @@ void testPingPongBetweenProcessInstances() {\n                 .statusCode(201)\n                 .extract().body().path(\"id\");\n \n-        validateSubProcess();\n+        // validateSubProcess(); // fixme this fails?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96eda63dcf0cfe7f6120e72d4b695c59dd432861"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07b5186e24d8c7140ac664d1477fc1dcfadbc1c8", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/07b5186e24d8c7140ac664d1477fc1dcfadbc1c8", "committedDate": "2020-10-30T08:30:18Z", "message": "Subscribe to Kafka publisher and add latch to reliably check for pong"}, "afterCommit": {"oid": "cfa605b0f648f77744901b506830a4ee39891218", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cfa605b0f648f77744901b506830a4ee39891218", "committedDate": "2020-10-30T10:00:41Z", "message": "Subscribe to Kafka publisher and add latch to reliably check for pong"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTIxNDc4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-521521478", "createdAt": "2020-11-02T10:50:50Z", "commit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTI2NzUz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-521526753", "createdAt": "2020-11-02T10:58:04Z", "commit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDo1ODowNFrOHr_nWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowMjowOFrOHr_wDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA==", "bodyText": "Back to debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515893080", "createdAt": "2020-11-02T10:58:04Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDIyMQ==", "bodyText": "Is this needed? As far as I can see this value should be the default\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Scope.html#scopeName--", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515894221", "createdAt": "2020-11-02T11:00:04Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NTMwOQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515895309", "createdAt": "2020-11-02T11:02:08Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -17,33 +17,55 @@\n package org.kie.kogito.integrationtests.springboot;\n \n import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n-import org.junit.jupiter.api.extension.ExtendWith;\n-import io.restassured.RestAssured;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import io.restassured.http.ContentType;\n import org.junit.jupiter.api.Test;\n-import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.reactivestreams.Publisher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import reactor.core.publisher.Flux;\n \n import static io.restassured.RestAssured.given;\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n-import org.junit.jupiter.api.Disabled;\n-\n-@Disabled(\"Must implement cloud event producer/emitter for Spring \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3408 \" +\n-          \"https://issues.redhat.com/browse/KOGITO-3591\")\n @ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n public class PingPongMessageTest extends BaseRestTest {\n \n+    @Autowired\n+    @Qualifier(KogitoEventStreams.PUBLISHER)\n+    Publisher<String> publisher;\n+\n     @Test\n-    void testPingPongBetweenProcessInstances() {\n+    void testPingPongBetweenProcessInstances() throws InterruptedException {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Flux.from(publisher)\n+                .map(x -> {\n+                    try {\n+                        return (Map<String, String>) new ObjectMapper().readValue(x, Map.class);\n+                    } catch (JsonProcessingException e) {\n+                        throw new Error(e);\n+                    }\n+                })\n+                .filter(m -> \"hello world\".equals(m.get(\"data\")) &&\n+                        m.getOrDefault(\"source\", \"\").startsWith(\"/process/pong_message/\"))\n+                .log(\"Found message\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTM3NDQ2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-521537446", "createdAt": "2020-11-02T11:13:39Z", "commit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxMzozOVrOHsAItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxMzozOVrOHsAItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMTYyMQ==", "bodyText": "staring new process instance \ud83d\udc40", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515901621", "createdAt": "2020-11-02T11:13:39Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -75,7 +75,7 @@ public void consume(Application application, Process<M> process, String payload,\n                                     trigger);\n                     }\n                 } else {\n-                    logger.debug(\"Received message without reference id, staring new process instance with trigger '{}'\",\n+                    logger.debug(\"Received message without reference id, starting new process instance with trigger '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTQwMDcy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-521540072", "createdAt": "2020-11-02T11:17:41Z", "commit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNzo0MVrOHsAQkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxODozNVrOHsASVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzYzMw==", "bodyText": "keep as debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515903633", "createdAt": "2020-11-02T11:17:41Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -61,7 +61,7 @@ public void consume(Application application, Process<M> process, String payload,\n             }\n             UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n                 if (cloudEvent.getKogitoReferenceId() != null) {\n-                    logger.debug(\"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                    logger.info(\"Received message with reference id '{}' going to use it to send signal '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778a45115e4167e8b50713424c952c4590e243c2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNDA4Ng==", "bodyText": "+1 to leave as debug", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#discussion_r515904086", "createdAt": "2020-11-02T11:18:35Z", "author": {"login": "cristianonicolai"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -64,16 +66,16 @@ public SpringKafkaCloudEventPublisher(\n     }\n \n     @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)\n     @Qualifier(KogitoEventStreams.PUBLISHER)\n     public Flux<String> makeConsumer() {\n         ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n                 .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n                 .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n-        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n \n-        return kafkaFlux.map(record -> {\n+        ConnectableFlux<String> broadcast = KafkaReceiver.create(options).receive().map(record -> {\n             ReceiverOffset offset = record.receiverOffset();\n-            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+            log.info(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5MzA4MA=="}, "originalCommit": {"oid": "dc3c92a09fe6e88ae097b5bd75173e1290d11997"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNDQwNTA4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-522440508", "createdAt": "2020-11-03T12:19:17Z", "commit": {"oid": "156c71e745ad8388b163fb30841b3889c253b767"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d71551f54beeb7cc5b4980ed7e70e263198fec5a", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d71551f54beeb7cc5b4980ed7e70e263198fec5a", "committedDate": "2020-11-05T07:36:34Z", "message": "KOGITO-3723 Use trigger name as cloud event type in producer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08bf23992f47f86580874713dbea03688f103bea", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/08bf23992f47f86580874713dbea03688f103bea", "committedDate": "2020-11-05T07:37:41Z", "message": "misisng extra config files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9056c89dafd2954b085eb73720775d8bd66198b0", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9056c89dafd2954b085eb73720775d8bd66198b0", "committedDate": "2020-11-05T07:37:41Z", "message": "Subscribe to Kafka publisher and add latch to reliably check for pong"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "510692645c8af9ccaa8aacfcd5e9d8c7b7beccf4", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/510692645c8af9ccaa8aacfcd5e9d8c7b7beccf4", "committedDate": "2020-11-05T07:37:41Z", "message": "check latch at the end"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d39846d71f6c6c2ae7295380a369975df2d24ef", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7d39846d71f6c6c2ae7295380a369975df2d24ef", "committedDate": "2020-11-05T07:37:41Z", "message": "readd validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19f90258b979dd2afa54f6e1146440545a8b77c", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c19f90258b979dd2afa54f6e1146440545a8b77c", "committedDate": "2020-11-05T07:37:41Z", "message": "debug-wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32fc9735c91fa65a0582abc1e048dc9b00b838f", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b32fc9735c91fa65a0582abc1e048dc9b00b838f", "committedDate": "2020-11-05T07:37:41Z", "message": "restore original test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9707273be82a968a4f6ac34569fcf305893d2f", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc9707273be82a968a4f6ac34569fcf305893d2f", "committedDate": "2020-11-05T07:37:58Z", "message": "restore validation, topic names (quarkus too)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a0cf6358656277e6965d4f4e7fa0c98d4be45da", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4a0cf6358656277e6965d4f4e7fa0c98d4be45da", "committedDate": "2020-11-05T07:38:01Z", "message": "remove debug mode from invoker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa2eca356130c13a8843763e4cff5afc3e999faa", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fa2eca356130c13a8843763e4cff5afc3e999faa", "committedDate": "2020-11-05T07:38:01Z", "message": "include review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b8ace9d82c4624b1be4a4fab2bc523c367c553", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/02b8ace9d82c4624b1be4a4fab2bc523c367c553", "committedDate": "2020-11-05T07:38:01Z", "message": "restore debug log"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "156c71e745ad8388b163fb30841b3889c253b767", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/156c71e745ad8388b163fb30841b3889c253b767", "committedDate": "2020-11-03T07:55:38Z", "message": "restore debug log"}, "afterCommit": {"oid": "02b8ace9d82c4624b1be4a4fab2bc523c367c553", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/02b8ace9d82c4624b1be4a4fab2bc523c367c553", "committedDate": "2020-11-05T07:38:01Z", "message": "restore debug log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTMxNzU0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/854#pullrequestreview-524131754", "createdAt": "2020-11-05T10:40:06Z", "commit": {"oid": "02b8ace9d82c4624b1be4a4fab2bc523c367c553"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3792, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}