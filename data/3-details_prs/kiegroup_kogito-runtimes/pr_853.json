{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMDg3NTYw", "number": 853, "title": "[KOGITO-3610] - Updating TopicsResource to reflect Topics and CloudEv\u2026", "bodyText": "\u2026ents structure\nSee: https://issues.redhat.com/browse/KOGITO-3610\nThe idea is to have something like this:\n[\n   {\n      \"name\":\"kogito_incoming_stream\",\n      \"type\":\"INCOMING\",\n      \"eventsMeta\":[\n         {\n            \"kind\":\"CONSUMED\",\n            \"type\":\"travellers\"\n         }\n      ]\n   },\n   {\n      \"name\":\"kogito_outgoing_stream\",\n      \"type\":\"OUTGOING\",\n      \"eventsMeta\":[\n         {\n            \"kind\":\"PRODUCED\",\n            \"type\":\"process.examples.processedvisa\"\n         }\n      ]\n   }\n]\nWondering if we should also add the prefix process.<processId> in the CONSUMED events. \ud83e\udd14\nSigned-off-by: Ricardo Zanini zanini@redhat.com\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains a link to the JIRA issue\n Pull Request contains a link to any dependent or related Pull Request\n Pull Request contains a description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-10-27T21:29:55Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853", "merged": true, "mergeCommit": {"oid": "57f18a14f10f5dbbd6f9e89c8337811f8592bee5"}, "closed": true, "closedAt": "2020-11-04T22:22:04Z", "author": {"login": "ricardozanini"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXHsYHAFqTUxOTI2NDkzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZTvregFqTUyMzcwODc4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjY0OTMy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#pullrequestreview-519264932", "createdAt": "2020-10-29T01:15:18Z", "commit": {"oid": "cac711e57c95b4c878863259548e236adb14dea8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzMzNzkw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#pullrequestreview-519733790", "createdAt": "2020-10-29T14:36:53Z", "commit": {"oid": "cac711e57c95b4c878863259548e236adb14dea8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozNjo1NFrOHqe6Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozNjo1NFrOHqe6Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwODY4Mw==", "bodyText": "there are now constants in org.kie.kogito.event.KogitoEventStreams you can use", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r514308683", "createdAt": "2020-10-29T14:36:54Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.quarkus;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.event.EventKind;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@ApplicationScoped\n+@Priority(0)\n+public class QuarkusTopicDiscovery implements TopicDiscovery {\n+\n+    private static final String OUTGOING_PREFIX = \"mp.messaging.outgoing.\";\n+    private static final String INCOMING_PREFIX = \"mp.messaging.incoming.\";\n+    private static final String DEFAULT_OUTGOING_CHANNEL_NAME = \"kogito_outgoing_stream\";\n+    private static final String DEFAULT_INCOMING_CHANNEL_NAME = \"kogito_incoming_stream\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac711e57c95b4c878863259548e236adb14dea8"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cac711e57c95b4c878863259548e236adb14dea8", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cac711e57c95b4c878863259548e236adb14dea8", "committedDate": "2020-10-28T17:37:53Z", "message": "Finishing implementation\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "4bec581b8b876cc01627967ea1e9e496877e6909", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4bec581b8b876cc01627967ea1e9e496877e6909", "committedDate": "2020-10-29T16:15:13Z", "message": "Including Spring and fixing injection failures\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "407a2d12aeaab6baae267eadeede5b884c9290dc", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/407a2d12aeaab6baae267eadeede5b884c9290dc", "committedDate": "2020-10-29T20:23:04Z", "message": "Debug information for topics\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "70631489eae32b36a419f0e048f20290025c7be2", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/70631489eae32b36a419f0e048f20290025c7be2", "committedDate": "2020-10-30T13:30:11Z", "message": "[KOGITO-3610] - Updating TopicsResource to reflect Topics and CloudEvents structure\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzgyNzg0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#pullrequestreview-521382784", "createdAt": "2020-11-02T07:32:31Z", "commit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDYyMTk5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#pullrequestreview-518462199", "createdAt": "2020-10-28T09:23:00Z", "commit": {"oid": "2580138d2122b4417932a9122804ed9842eacee0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMzowMFrOHpgzcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzoyNjo0M1rOHsuqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTEyMA==", "bodyText": "Why do you need explicit priority? Do you expect to have multiple bean of this type in the classpath?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r513291120", "createdAt": "2020-10-28T09:23:00Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.quarkus;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.event.EventKind;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@ApplicationScoped\n+@Priority(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2580138d2122b4417932a9122804ed9842eacee0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MTM5Nw==", "bodyText": "What's the reason of this change?\nIf you look at the provided examples in the spec it contains\n/cloudevents/spec/pull/123\nThat seems to me similar to the existing code", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r513461397", "createdAt": "2020-10-28T13:54:21Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -42,10 +42,11 @@\n     public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n     /**\n      * String format for Kogito CloudEvents source fields.\n-     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelagency\n+     * See more about the source format: https://github.com/cloudevents/spec/blob/v1.0/spec.md#source-1\n      */\n-    public static final String SOURCE_FORMAT = \"/process/%s/%s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fad1f112289934fae19f5e0f290395fdedf3b0e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NzcyNQ==", "bodyText": "What about extract a private method with OUTGOING_PREFIX, KogitoEventStreams.OUTGOING and ChannelType.OUTGOING as parameters? This could be used for both branches", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516647725", "createdAt": "2020-11-03T12:59:40Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.quarkus;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.impl.AbstractTopicDiscovery;\n+\n+@ApplicationScoped\n+@Priority(0)\n+public class QuarkusTopicDiscovery extends AbstractTopicDiscovery {\n+\n+    private static final String OUTGOING_PREFIX = \"mp.messaging.outgoing.\";\n+    private static final String INCOMING_PREFIX = \"mp.messaging.incoming.\";\n+    private static final String TOPIC_SUFFIX = \".topic\";\n+\n+    protected List<Topic> getTopics() {\n+        final List<Topic> topics = new ArrayList<>();\n+        ConfigProvider.getConfig().getPropertyNames().forEach(n -> {\n+            if (n.startsWith(OUTGOING_PREFIX)) {\n+                final String topicName = this.extractChannelName(n, OUTGOING_PREFIX, KogitoEventStreams.OUTGOING);\n+                if (topics.stream().noneMatch(t -> t.getName().equals(topicName) && t.getType() == ChannelType.OUTGOING)) {\n+                    final Topic topic = new Topic();\n+                    topic.setType(ChannelType.OUTGOING);\n+                    topic.setName(topicName);\n+                    topics.add(topic);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0OTgxOQ==", "bodyText": "Isn't this a sort of duplication? Are EventKind and ChannelType different?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516649819", "createdAt": "2020-11-03T13:03:21Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/EventKind.java", "diffHunk": "@@ -15,7 +15,7 @@\n \n package org.kie.kogito.event;\n \n-public enum TopicType {\n-    PRODUCED,\n-    CONSUMED;\n+public enum EventKind {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MDU4NA==", "bodyText": "I'm not a fan of kogito-services module, it contains both API and impl of many different aspects like jobs, events etc. I would like to split in more self contained modules in the future and or migrate as addonds (events is definitely a good candidate because it is sort of in both addond and kogito-services)\nI'm not sure if I like to have interfaces but at least we can start from impl.\nNow specifically to this PR what about start moving this impl class in a -common of cloudevents addon that both specific versions (Quarkus/Springboot) imports. i don't see any benefit from always have this abstract class in the classpath even if I don't have the addon.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516660584", "createdAt": "2020-11-03T13:21:22Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.event.EventKind;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+/**\n+ * Base class for events Topic Discovery\n+ */\n+public abstract class AbstractTopicDiscovery implements TopicDiscovery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MTAyNg==", "bodyText": "If we move AbstractTopicDiscovery to a -common module as suggested above here you can check that class to have a common checkpoint for all the platforms", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516661026", "createdAt": "2020-11-03T13:22:06Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -239,12 +239,15 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n         boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.extensions.KogitoProcessExtension\");\n+        boolean useCloudEvents = hasClassOnClasspath(project, \"org.kie.kogito.addon.cloudevents.spring.SpringKafkaCloudEventEmitter\") ||\n+                hasClassOnClasspath(project, \"org.kie.kogito.addon.cloudevents.quarkus.QuarkusCloudEventEmitter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MzkxMw==", "bodyText": "I would prefer to instantiate NoOp impl here in the else branch so that we can remove the if == null from method body. That if is more error prone because we will have to remember to nullcheck all the future usages (if any). Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516663913", "createdAt": "2020-11-03T13:26:43Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/events/TopicsInformationResourceGenerator.java", "diffHunk": "@@ -59,38 +70,55 @@ public String generate() {\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n         template.setName(CLASS_NAME);\n-        this.addTopics(template);\n+        this.addEventsMeta(template);\n+\n+        // in case we don't have the bean in the classpath, just ignore the injection that the generated class will use NoOp instead\n+        if (annotator != null && addonsConfig.useCloudEvents()) {\n+            annotator.withApplicationComponent(template);\n+            template.findAll(FieldDeclaration.class, fd -> fd.getVariables().get(0).getNameAsString().contains(\"discovery\"))\n+                    .forEach(annotator::withInjection);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3fdabae9597963a1909788a8a69b87f5043b99", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0c3fdabae9597963a1909788a8a69b87f5043b99", "committedDate": "2020-11-04T16:48:38Z", "message": "[KOGITO-3610] - Updating TopicsResource to reflect Topics and CloudEvents structure\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94fe4815d0a98613de2fcf69012062e31f8e825c", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/94fe4815d0a98613de2fcf69012062e31f8e825c", "committedDate": "2020-11-04T16:48:38Z", "message": "reverting condition error\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5497a5a6004469e83a5b4dda981073de68f44e", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3e5497a5a6004469e83a5b4dda981073de68f44e", "committedDate": "2020-11-04T16:48:38Z", "message": "Fixing integration test to reflect testcontainers application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948cdf63e90082db080e2028c1d4e0000d2f307d", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/948cdf63e90082db080e2028c1d4e0000d2f307d", "committedDate": "2020-11-04T19:56:09Z", "message": "Incorporating reviews and creating -common module\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "committedDate": "2020-10-30T15:08:51Z", "message": "Fixing integration test to reflect testcontainers application"}, "afterCommit": {"oid": "948cdf63e90082db080e2028c1d4e0000d2f307d", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/948cdf63e90082db080e2028c1d4e0000d2f307d", "committedDate": "2020-11-04T19:56:09Z", "message": "Incorporating reviews and creating -common module\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzA4Nzg4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#pullrequestreview-523708788", "createdAt": "2020-11-04T20:25:37Z", "commit": {"oid": "948cdf63e90082db080e2028c1d4e0000d2f307d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}