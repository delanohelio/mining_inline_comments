{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDc1NDg4", "number": 737, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NDo0MlrOEffmuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNDowM1rOEhpMyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU5MTI4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NDo0MlrOHLzHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzo1NToyM1rOHMU8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMzkyMQ==", "bodyText": "Can you please add a log message?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482133921", "createdAt": "2020-09-02T14:54:42Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,23 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODA1Ng==", "bodyText": "@danielezonca\ndone", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688056", "createdAt": "2020-09-03T03:55:23Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,23 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMzkyMQ=="}, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU5MjIyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NDo1MVrOHLzIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzo1NTozM1rOHMU8Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDA1NQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482134055", "createdAt": "2020-09-02T14:54:51Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,23 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());\n+        }\n         List<PMMLResource> dmnResources = resources.stream()\n                 .filter(r -> r.resource().getResourceType() == ResourceType.PMML)\n-                .flatMap(r -> parsePredictions(r.basePath(), Collections.singletonList(r.resource())).stream())\n+                .flatMap(r -> parsePredictions(r.basePath(),\n+                                               Collections.singletonList(r.resource())).stream())\n                 .collect(toList());\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODA4Ng==", "bodyText": "@danielezonca\nSame as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688086", "createdAt": "2020-09-03T03:55:33Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,23 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());\n+        }\n         List<PMMLResource> dmnResources = resources.stream()\n                 .filter(r -> r.resource().getResourceType() == ResourceType.PMML)\n-                .flatMap(r -> parsePredictions(r.basePath(), Collections.singletonList(r.resource())).stream())\n+                .flatMap(r -> parsePredictions(r.basePath(),\n+                                               Collections.singletonList(r.resource())).stream())\n                 .collect(toList());\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDA1NQ=="}, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU5MzExOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NDo1OVrOHLzIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzo1NTozOFrOHMU8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDE5Mw==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482134193", "createdAt": "2020-09-02T14:54:59Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -119,7 +129,10 @@ public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n         return ofPredictions(pmmlResources);\n     }\n \n-    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+    public static PredictionCodegen ofPath(boolean isJPMMLAvailable, Path... paths) throws IOException {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODExOA==", "bodyText": "@danielezonca\nSame as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688118", "createdAt": "2020-09-03T03:55:38Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -119,7 +129,10 @@ public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n         return ofPredictions(pmmlResources);\n     }\n \n-    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n+    public static PredictionCodegen ofPath(boolean isJPMMLAvailable, Path... paths) throws IOException {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDE5Mw=="}, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDU5NDA4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NTowOVrOHLzJOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzo1NTo0MlrOHMU8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDMzMA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482134330", "createdAt": "2020-09-02T14:55:09Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -133,7 +146,10 @@ public static PredictionCodegen ofPath(Path... paths) throws IOException {\n         return ofPredictions(resources);\n     }\n \n-    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+    public static PredictionCodegen ofFiles(boolean isJPMMLAvailable, Path basePath, List<File> files) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODEzNA==", "bodyText": "@danielezonca\nSame as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r482688134", "createdAt": "2020-09-03T03:55:42Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -133,7 +146,10 @@ public static PredictionCodegen ofPath(Path... paths) throws IOException {\n         return ofPredictions(resources);\n     }\n \n-    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n+    public static PredictionCodegen ofFiles(boolean isJPMMLAvailable, Path basePath, List<File> files) {\n+        if (isJPMMLAvailable) {\n+            return ofPredictions(Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNDMzMA=="}, "originalCommit": {"oid": "c4edb4708d1450d4203226f16bc1cbc19b338f24"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzE2MzE2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDowNzo1OFrOHOe9NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1NjowOFrOHOhL8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTMwMQ==", "bodyText": "I would advise merging #741 before. Most of these factory methods have been deleted for good", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484949301", "createdAt": "2020-09-08T14:07:58Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,25 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n+            return ofPredictions(Collections.emptyList());\n+        }\n         List<PMMLResource> dmnResources = resources.stream()\n                 .filter(r -> r.resource().getResourceType() == ResourceType.PMML)\n-                .flatMap(r -> parsePredictions(r.basePath(), Collections.singletonList(r.resource())).stream())\n+                .flatMap(r -> parsePredictions(r.basePath(),\n+                                               Collections.singletonList(r.resource())).stream())\n                 .collect(toList());\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NTg0Mw==", "bodyText": "@evacchi\n\ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484985843", "createdAt": "2020-09-08T14:56:08Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -88,15 +90,25 @@ public PredictionCodegen(List<PMMLResource> resources) {\n         this.moduleGenerator = new PredictionContainerGenerator(applicationCanonicalName, resources);\n     }\n \n-    public static PredictionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+    public static PredictionCodegen ofCollectedResources(boolean isJPMMLAvailable,\n+                                                         Collection<CollectedResource> resources) {\n+        if (isJPMMLAvailable) {\n+            logger.info(\"jpmml libraries available on classpath, skipping kie-pmml parsing and compilation\");\n+            return ofPredictions(Collections.emptyList());\n+        }\n         List<PMMLResource> dmnResources = resources.stream()\n                 .filter(r -> r.resource().getResourceType() == ResourceType.PMML)\n-                .flatMap(r -> parsePredictions(r.basePath(), Collections.singletonList(r.resource())).stream())\n+                .flatMap(r -> parsePredictions(r.basePath(),\n+                                               Collections.singletonList(r.resource())).stream())\n                 .collect(toList());\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n+    public static PredictionCodegen ofJar(boolean isJPMMLAvailable, Path... jarPaths) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTMwMQ=="}, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzE2NzExOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDowODo1MVrOHOe_0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1NDo0M1rOHOhHuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTk2OQ==", "bodyText": "is the rest of this file just being reformatted or...?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484949969", "createdAt": "2020-09-08T14:08:51Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -198,14 +217,15 @@ public PredictionContainerGenerator moduleGenerator() {\n         if (resources.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n-                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>(KogitoPackageSources::dumpSources,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDc2MQ==", "bodyText": "@evacchi\nYup", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484984761", "createdAt": "2020-09-08T14:54:43Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -198,14 +217,15 @@ public PredictionContainerGenerator moduleGenerator() {\n         if (resources.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n-                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>(KogitoPackageSources::dumpSources,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTk2OQ=="}, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzE3MDk2OnYy", "diffSide": "RIGHT", "path": "kogito-build-parent/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDowOTo0NVrOHOfCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo0MDowMlrOHOjJJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MDU5Nw==", "bodyText": "let's merge after 7.43.0 is Final", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484950597", "createdAt": "2020-09-08T14:09:45Z", "author": {"login": "evacchi"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -129,7 +129,8 @@\n     <version.org.keycloak>11.0.0</version.org.keycloak>\n     <version.org.mockito>3.3.3</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.43.0.t20200824</version.org.kie7>\n+<!--    <version.org.kie7>7.43.0.t20200824</version.org.kie7>-->\n+    <version.org.kie7>7.43.0-SNAPSHOT</version.org.kie7>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjIzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484976231", "createdAt": "2020-09-08T14:43:26Z", "author": {"login": "gitgabrio"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -129,7 +129,8 @@\n     <version.org.keycloak>11.0.0</version.org.keycloak>\n     <version.org.mockito>3.3.3</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.43.0.t20200824</version.org.kie7>\n+<!--    <version.org.kie7>7.43.0.t20200824</version.org.kie7>-->\n+    <version.org.kie7>7.43.0-SNAPSHOT</version.org.kie7>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MDU5Nw=="}, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNzg5NA==", "bodyText": "Except for this line, thank you for keeping me in the loop Gabriele, lgtm", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r485017894", "createdAt": "2020-09-08T15:40:02Z", "author": {"login": "tarilabs"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -129,7 +129,8 @@\n     <version.org.keycloak>11.0.0</version.org.keycloak>\n     <version.org.mockito>3.3.3</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.43.0.t20200824</version.org.kie7>\n+<!--    <version.org.kie7>7.43.0.t20200824</version.org.kie7>-->\n+    <version.org.kie7>7.43.0-SNAPSHOT</version.org.kie7>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MDU5Nw=="}, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzE3NDY2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDoxMDozMFrOHOfEcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NDoxMlrOHOgorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MTE1NA==", "bodyText": "all the remaining changes in this file are just whitespace changes right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484951154", "createdAt": "2020-09-08T14:10:30Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -198,14 +217,15 @@ public PredictionContainerGenerator moduleGenerator() {\n         if (resources.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n-                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>(KogitoPackageSources::dumpSources,\n+                                                                                     new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false);\n         CompositeKnowledgeBuilder batch = modelBuilder.batch();\n         for (PMMLResource resource : resources) {\n             List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n             for (KiePMMLModel model : kiepmmlModels) {\n                 if (model.getName() == null || model.getName().isEmpty()) {\n-                    String errorMessage = String.format(\"Model name should not be empty inside %s\", resource.getModelPath());\n+                    String errorMessage = String.format(\"Model name should not be empty inside %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjgxNA==", "bodyText": "@evacchi\nYes", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r484976814", "createdAt": "2020-09-08T14:44:12Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -198,14 +217,15 @@ public PredictionContainerGenerator moduleGenerator() {\n         if (resources.isEmpty()) {\n             return Collections.emptyList();\n         }\n-        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>( KogitoPackageSources::dumpSources,\n-                new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false );\n+        ModelBuilderImpl<KogitoPackageSources> modelBuilder = new ModelBuilderImpl<>(KogitoPackageSources::dumpSources,\n+                                                                                     new KnowledgeBuilderConfigurationImpl(getClass().getClassLoader()), new ReleaseIdImpl(\"dummy:dummy:0.0.0\"), true, false);\n         CompositeKnowledgeBuilder batch = modelBuilder.batch();\n         for (PMMLResource resource : resources) {\n             List<KiePMMLModel> kiepmmlModels = resource.getKiePmmlModels();\n             for (KiePMMLModel model : kiepmmlModels) {\n                 if (model.getName() == null || model.getName().isEmpty()) {\n-                    String errorMessage = String.format(\"Model name should not be empty inside %s\", resource.getModelPath());\n+                    String errorMessage = String.format(\"Model name should not be empty inside %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1MTE1NA=="}, "originalCommit": {"oid": "faaacf0d4d7cfc51981ffd4618ea1ea68fa4077b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzEzNDgwOnYy", "diffSide": "RIGHT", "path": "drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNDowM1rOHPEaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxOToxN1rOHPEmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzAwMQ==", "bodyText": "Why this new line?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r485563001", "createdAt": "2020-09-09T12:14:03Z", "author": {"login": "jiripetrlik"}, "path": "drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java", "diffHunk": "@@ -93,6 +94,7 @@ private static PMMLRuntime getPMMLRuntime() {\n             public PMML4Result evaluate(String s, PMMLContext pmmlContext) {\n                 return PMML_4_RESULT;\n             }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473a4fb1d5be8eff6b9d395790145ad4d2802a12"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NTk2NA==", "bodyText": "@jiripetrlik\nRemoved", "url": "https://github.com/kiegroup/kogito-runtimes/pull/737#discussion_r485565964", "createdAt": "2020-09-09T12:19:17Z", "author": {"login": "gitgabrio"}, "path": "drools/kogito-pmml/src/test/java/org/kie/kogito/pmml/PmmlPredictionModelTest.java", "diffHunk": "@@ -93,6 +94,7 @@ private static PMMLRuntime getPMMLRuntime() {\n             public PMML4Result evaluate(String s, PMMLContext pmmlContext) {\n                 return PMML_4_RESULT;\n             }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzAwMQ=="}, "originalCommit": {"oid": "473a4fb1d5be8eff6b9d395790145ad4d2802a12"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}