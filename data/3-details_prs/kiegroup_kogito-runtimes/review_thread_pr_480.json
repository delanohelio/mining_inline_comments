{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODY5OTU1", "number": 480, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjowMTowM1rOD3CHUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoxMzoxM1rOD5zzUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDMyOTE1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjowMTowM1rOGND6ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjozODowNVrOGNE41A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else if {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416348830", "createdAt": "2020-04-28T06:01:03Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,16 +156,22 @@ public static String scriptFunctionScript(String script) {\n     }\n \n     public static String conditionScript(String path, DefaultChoice.Operator operator, String value) {\n+        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n \n         if (path.startsWith(\"$.\")) {\n             path = path.substring(2);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d56ee5980a3f480e3b1c6327767252588daa1e7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDc1Ng==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416364756", "createdAt": "2020-04-28T06:38:05Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,16 +156,22 @@ public static String scriptFunctionScript(String script) {\n     }\n \n     public static String conditionScript(String path, DefaultChoice.Operator operator, String value) {\n+        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n \n         if (path.startsWith(\"$.\")) {\n             path = path.substring(2);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODgzMA=="}, "originalCommit": {"oid": "3d56ee5980a3f480e3b1c6327767252588daa1e7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDMzOTU0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/WorkflowFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjowNDo0MFrOGNEAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjozODoxMVrOGNE5FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDMwNQ==", "bodyText": "My personal preference here would be to simply create a new HashMap and assign a variable, as this style endups creating an inner class.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416350305", "createdAt": "2020-04-28T06:04:40Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/WorkflowFactoryTest.java", "diffHunk": "@@ -232,4 +232,73 @@ public void testJoinNode() {\n         assertThat(join.getType()).isEqualTo(Join.TYPE_XOR);\n         assertThat(join.getMetaData().get(\"UniqueId\")).isEqualTo(\"1\");\n     }\n+\n+    @Test\n+    public void testProcessVar() {\n+        RuleFlowProcess process = new RuleFlowProcess();\n+        testFactory.processVar(\"testVar\", JsonNode.class, process);\n+\n+        assertThat(process.getVariableScope()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables().size()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testHumanTaskNode() {\n+        TestNodeContainer nodeContainer = new TestNodeContainer();\n+        RuleFlowProcess process = new RuleFlowProcess();\n+\n+        Function function = new Function().withName(\"testfunction1\").withMetadata(\n+                new HashMap() {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d56ee5980a3f480e3b1c6327767252588daa1e7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDgyMQ==", "bodyText": "ok. updated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416364821", "createdAt": "2020-04-28T06:38:11Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/WorkflowFactoryTest.java", "diffHunk": "@@ -232,4 +232,73 @@ public void testJoinNode() {\n         assertThat(join.getType()).isEqualTo(Join.TYPE_XOR);\n         assertThat(join.getMetaData().get(\"UniqueId\")).isEqualTo(\"1\");\n     }\n+\n+    @Test\n+    public void testProcessVar() {\n+        RuleFlowProcess process = new RuleFlowProcess();\n+        testFactory.processVar(\"testVar\", JsonNode.class, process);\n+\n+        assertThat(process.getVariableScope()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables().size()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testHumanTaskNode() {\n+        TestNodeContainer nodeContainer = new TestNodeContainer();\n+        RuleFlowProcess process = new RuleFlowProcess();\n+\n+        Function function = new Function().withName(\"testfunction1\").withMetadata(\n+                new HashMap() {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDMwNQ=="}, "originalCommit": {"oid": "3d56ee5980a3f480e3b1c6327767252588daa1e7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTQzODA4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoxMjozMFrOGRSRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoyNjowOFrOGRdlQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODI4Ng==", "bodyText": "what about using\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\n.orElse(processVariableScope.findVariable(entry.getValue()));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420778286", "createdAt": "2020-05-06T13:12:30Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -160,7 +162,10 @@ private CompilationUnit compilationUnitInput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (input) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzY1MQ==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420963651", "createdAt": "2020-05-06T17:26:08Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -160,7 +162,10 @@ private CompilationUnit compilationUnitInput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (input) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODI4Ng=="}, "originalCommit": {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTQ0MTQ0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoxMzoxM1rOGRSTOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoyNjowMFrOGRdk_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODgwOA==", "bodyText": "what about using\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\n.orElse(processVariableScope.findVariable(entry.getValue()));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420778808", "createdAt": "2020-05-06T13:13:13Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -251,15 +256,18 @@ private CompilationUnit compilationUnitOutput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                // check if given mapping is an expression\n-                Matcher matcher = PatternConstants.PARAMETER_MATCHER.matcher(entry.getValue());\n-                if (matcher.find()) {                    \n-                    Map<String, String> dataOutputs = (Map<String, String>) humanTaskNode.getMetaData(\"DataOutputs\");\n-                    variable = new Variable();\n-                    variable.setName(entry.getKey());\n-                    variable.setType(new ObjectDataType(dataOutputs.get(entry.getKey())));\n-                } else {\n-                    throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (output) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzU4Mw==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420963583", "createdAt": "2020-05-06T17:26:00Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -251,15 +256,18 @@ private CompilationUnit compilationUnitOutput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                // check if given mapping is an expression\n-                Matcher matcher = PatternConstants.PARAMETER_MATCHER.matcher(entry.getValue());\n-                if (matcher.find()) {                    \n-                    Map<String, String> dataOutputs = (Map<String, String>) humanTaskNode.getMetaData(\"DataOutputs\");\n-                    variable = new Variable();\n-                    variable.setName(entry.getKey());\n-                    variable.setType(new ObjectDataType(dataOutputs.get(entry.getKey())));\n-                } else {\n-                    throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (output) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODgwOA=="}, "originalCommit": {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 68, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}