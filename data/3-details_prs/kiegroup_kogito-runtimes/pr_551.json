{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzQyMTc3", "number": 551, "title": "[KOGITO-1063] Generate task schema for form rendering", "bodyText": "Generating json schema for spring boot\nhttps://issues.redhat.com/browse/KOGITO-1063", "createdAt": "2020-06-10T09:53:33Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551", "merged": true, "mergeCommit": {"oid": "d4d9729750297ab616efcc1ee17e933042064818"}, "closed": true, "closedAt": "2020-06-18T15:49:17Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp3EmlgBqjM0Mjg5Njc5MTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsgelTgFqTQzMzQxOTAxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24e4af0de583d45d2fb353d643aa8cd2981fa60d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/24e4af0de583d45d2fb353d643aa8cd2981fa60d", "committedDate": "2020-06-10T09:51:45Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "215613ed0c9c6e337e6d727732cbb70e7ee271ae", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/215613ed0c9c6e337e6d727732cbb70e7ee271ae", "committedDate": "2020-06-10T10:26:12Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "215613ed0c9c6e337e6d727732cbb70e7ee271ae", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/215613ed0c9c6e337e6d727732cbb70e7ee271ae", "committedDate": "2020-06-10T10:26:12Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "97f528ad27d7d949d928653e76c7e87a44bcc466", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/97f528ad27d7d949d928653e76c7e87a44bcc466", "committedDate": "2020-06-10T11:24:51Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97f528ad27d7d949d928653e76c7e87a44bcc466", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/97f528ad27d7d949d928653e76c7e87a44bcc466", "committedDate": "2020-06-10T11:24:51Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "593f799c11a82af2245fa59e59c7ed7b97c6b6e6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/593f799c11a82af2245fa59e59c7ed7b97c6b6e6", "committedDate": "2020-06-10T17:41:32Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "593f799c11a82af2245fa59e59c7ed7b97c6b6e6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/593f799c11a82af2245fa59e59c7ed7b97c6b6e6", "committedDate": "2020-06-10T17:41:32Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "f3a468e2d37e399cd2793302173f808e32d00198", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f3a468e2d37e399cd2793302173f808e32d00198", "committedDate": "2020-06-10T20:32:47Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3a468e2d37e399cd2793302173f808e32d00198", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f3a468e2d37e399cd2793302173f808e32d00198", "committedDate": "2020-06-10T20:32:47Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "079f3538958a7599eeeb4fc5ee4ff06b6d4e548b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/079f3538958a7599eeeb4fc5ee4ff06b6d4e548b", "committedDate": "2020-06-11T09:54:06Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "079f3538958a7599eeeb4fc5ee4ff06b6d4e548b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/079f3538958a7599eeeb4fc5ee4ff06b6d4e548b", "committedDate": "2020-06-11T09:54:06Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "60072041efe83c8f23a263f6e60f8fbceb1f2b85", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/60072041efe83c8f23a263f6e60f8fbceb1f2b85", "committedDate": "2020-06-11T11:47:23Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60072041efe83c8f23a263f6e60f8fbceb1f2b85", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/60072041efe83c8f23a263f6e60f8fbceb1f2b85", "committedDate": "2020-06-11T11:47:23Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "f1d2e4c8a99da5474a31f1c1e226cd611cf6c48e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f1d2e4c8a99da5474a31f1c1e226cd611cf6c48e", "committedDate": "2020-06-11T12:37:53Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1d2e4c8a99da5474a31f1c1e226cd611cf6c48e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f1d2e4c8a99da5474a31f1c1e226cd611cf6c48e", "committedDate": "2020-06-11T12:37:53Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "01e033774c10bdc857fd58031b942218b592c2fa", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/01e033774c10bdc857fd58031b942218b592c2fa", "committedDate": "2020-06-11T12:42:12Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01e033774c10bdc857fd58031b942218b592c2fa", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/01e033774c10bdc857fd58031b942218b592c2fa", "committedDate": "2020-06-11T12:42:12Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "9f1d23009ad8852bf5931d9677dd248ecab095ed", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9f1d23009ad8852bf5931d9677dd248ecab095ed", "committedDate": "2020-06-11T14:47:55Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f1d23009ad8852bf5931d9677dd248ecab095ed", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9f1d23009ad8852bf5931d9677dd248ecab095ed", "committedDate": "2020-06-11T14:47:55Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "4082b609348baf9b26d48a97834cc2330c05e3de", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4082b609348baf9b26d48a97834cc2330c05e3de", "committedDate": "2020-06-11T15:30:10Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4082b609348baf9b26d48a97834cc2330c05e3de", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4082b609348baf9b26d48a97834cc2330c05e3de", "committedDate": "2020-06-11T15:30:10Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "291b3cbcaf39ed10de16a7165396696665df7996", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/291b3cbcaf39ed10de16a7165396696665df7996", "committedDate": "2020-06-11T17:12:48Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "291b3cbcaf39ed10de16a7165396696665df7996", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/291b3cbcaf39ed10de16a7165396696665df7996", "committedDate": "2020-06-11T17:12:48Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a16695e6fe134002d320eee097fc8c145aae8ad8", "committedDate": "2020-06-15T12:26:09Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a16695e6fe134002d320eee097fc8c145aae8ad8", "committedDate": "2020-06-15T12:26:09Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/882a38c9eb6e721a59a2338a1417b3d229c55cad", "committedDate": "2020-06-15T13:19:14Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjMwNDAz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-430630403", "createdAt": "2020-06-15T13:14:05Z", "commit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNDowNVrOGjxl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNToyN1rOGjybRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NTg3Nw==", "bodyText": "I think this should be true: REST is customizable so json schema should change too.\n@evacchi WDYT?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440165877", "createdAt": "2020-06-15T13:14:05Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -35,7 +35,8 @@\n         CLASS( false ),\n         MESSAGE_CONSUMER( false ),\n         MESSAGE_PRODUCER( false ),\n-        RESOURCE( false );\n+        RESOURCE(false),\n+        JSON_SCHEMA(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg==", "bodyText": "Is this actually possible?\nI think we should throw an exception in this case instead of mute the error.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440169012", "createdAt": "2020-06-15T13:19:01Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NTA0Mw==", "bodyText": "What about expose (with a different constructor?) the possibility to plug a different logic here?\nFrom what I can see it should be possible to reuse this class for other JSON schema generation usages just changing these functions:\n\ngetKey is just the identifier of the schema and could default to c.getCanonicalName()\nisUserTaskClass is a predicate to identify if the class should be used\nisNotUserTaskParam is a predicate to skip fields", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440175043", "createdAt": "2020-06-15T13:28:47Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTUyNQ==", "bodyText": "Can you please add a test with a third annotated class with a different taskName to verify that it will be not merged?\nSame with a field without UserTaskParam annotation", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440179525", "createdAt": "2020-06-15T13:35:27Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JSonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JSonSchemaGeneratorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/882a38c9eb6e721a59a2338a1417b3d229c55cad", "committedDate": "2020-06-15T13:19:14Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "b51d788faa6761f895c8684ce6221737344eff53", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b51d788faa6761f895c8684ce6221737344eff53", "committedDate": "2020-06-15T14:24:24Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b51d788faa6761f895c8684ce6221737344eff53", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b51d788faa6761f895c8684ce6221737344eff53", "committedDate": "2020-06-15T14:24:24Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "98c8c85316016b634c67c991bafb7d243a9d5335", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/98c8c85316016b634c67c991bafb7d243a9d5335", "committedDate": "2020-06-15T14:28:30Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98c8c85316016b634c67c991bafb7d243a9d5335", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/98c8c85316016b634c67c991bafb7d243a9d5335", "committedDate": "2020-06-15T14:28:30Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "494529885a83da935ecea019822b884bd6b30b84", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/494529885a83da935ecea019822b884bd6b30b84", "committedDate": "2020-06-15T15:48:05Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "494529885a83da935ecea019822b884bd6b30b84", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/494529885a83da935ecea019822b884bd6b30b84", "committedDate": "2020-06-15T15:48:05Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "347e043411f0456281c46cb434560a7f0c401829", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/347e043411f0456281c46cb434560a7f0c401829", "committedDate": "2020-06-15T18:20:31Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "347e043411f0456281c46cb434560a7f0c401829", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/347e043411f0456281c46cb434560a7f0c401829", "committedDate": "2020-06-15T18:20:31Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "de7456b94dbdca5c573bb3337f37c6b33d04cd36", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/de7456b94dbdca5c573bb3337f37c6b33d04cd36", "committedDate": "2020-06-15T18:21:35Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de7456b94dbdca5c573bb3337f37c6b33d04cd36", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/de7456b94dbdca5c573bb3337f37c6b33d04cd36", "committedDate": "2020-06-15T18:21:35Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bea883077a6f51dc7468f41fe3e3eb2ff9886115", "committedDate": "2020-06-15T19:52:15Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzMzODM4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-431733838", "createdAt": "2020-06-16T17:27:53Z", "commit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyNzo1M1rOGklyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyNzo1M1rOGklyUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTAxMA==", "bodyText": "Is this code really copied from SO?\nTo be honest I don't know if this is ok from a license perspective (see link 1, link 2)\nBtw if it is fine can you please move this comment as javadoc for the class instead of here before package declaration?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441021010", "createdAt": "2020-06-16T17:27:53Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// code copied from https://stackoverflow.com/questions/9895041/merging-two-json-documents-using-jackson", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDI5NjUw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-432029650", "createdAt": "2020-06-17T03:16:08Z", "commit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoxNjowOVrOGk0LEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowOToxOFrOGk07TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NjcyMA==", "bodyText": "Maybe simply Type or ParamType ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441256720", "createdAt": "2020-06-17T03:16:09Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTaskParam.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+\n+@Retention(RUNTIME)\n+@Target(FIELD)\n+public @interface UserTaskParam {\n+\n+    TaskType value();\n+\n+    public enum TaskType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1Njk1MA==", "bodyText": "please review format", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441256950", "createdAt": "2020-06-17T03:17:03Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -67,6 +67,12 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>kogito-dmn</artifactId> <!-- depend on the utility wrapper module to avoid repeating dependency exclusions -->\n     </dependency>\n+    <!-- Json schema generator -->  \n+    <dependency>\n+   \t  <groupId>com.github.victools</groupId>\n+      <artifactId>jsonschema-generator</artifactId>\n+\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzY1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            else\n          \n          \n            \n                            else {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441257651", "createdAt": "2020-06-17T03:20:02Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzY4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (merged == null)\n          \n          \n            \n                            if (merged == null) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441257683", "createdAt": "2020-06-17T03:20:09Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk3Mw==", "bodyText": "@fjtirado do we need to merge with a previously generated version? Why not simply overwrite it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441258973", "createdAt": "2020-06-17T03:25:21Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1OTYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n          \n          \n            \n                        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441259625", "createdAt": "2020-06-17T03:28:13Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1OTkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testJsonSchemaGenerator() throws IOException\n          \n          \n            \n                public void testJsonSchemaGenerator() throws IOException {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441259934", "createdAt": "2020-06-17T03:29:40Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private String name;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private Address address;\n+    }\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonOutputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private String name;\n+\n+        @SuppressWarnings(\"unused\")\n+        private String ignored;\n+    }\n+\n+    private static class Address {\n+        @SuppressWarnings(\"unused\")\n+        private String street;\n+    }\n+\n+    private static class IgnoredClass {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+    }\n+\n+    @Test\n+    public void testJsonSchemaGenerator() throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MDE4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testMerge()\n          \n          \n            \n                public void testMerge() {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441260187", "createdAt": "2020-06-17T03:30:43Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/json/JSonUtilsTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.json;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JSonUtilsTest {\n+\n+    @Test\n+    public void testMerge()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MDgwOA==", "bodyText": "can you add an example with both input and output?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441260808", "createdAt": "2020-06-17T03:33:06Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTgxNA==", "bodyText": "@fjtirado I would be surprised if we dont have a utils method in the codebase already to do similar thing, have you had a quick look?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441265814", "createdAt": "2020-06-17T03:54:56Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NzQyNA==", "bodyText": "Perhaps you should check if the test task classes where found?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441267424", "createdAt": "2020-06-17T04:01:53Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private String name;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private Address address;\n+    }\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonOutputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private String name;\n+\n+        @SuppressWarnings(\"unused\")\n+        private String ignored;\n+    }\n+\n+    private static class Address {\n+        @SuppressWarnings(\"unused\")\n+        private String street;\n+    }\n+\n+    private static class IgnoredClass {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+    }\n+\n+    @Test\n+    public void testJsonSchemaGenerator() throws IOException\n+    {\n+        Collection<GeneratedFile> files = new JsonSchemaGenerator(Stream.of(PersonInputParams.class, PersonOutputParams.class, IgnoredClass.class)).generate();\n+        assertEquals(1, files.size());\n+        GeneratedFile file = files.iterator().next();\n+        assertEquals(\"test_test.json\", file.relativePath());\n+        ObjectReader reader = new ObjectMapper().reader();\n+        JsonNode node = reader.readTree(file.contents());\n+        assertEquals(\"https://json-schema.org/draft/2019-09/schema\", node.get(\"$schema\").asText());\n+        assertEquals(\"object\", node.get(\"type\").asText());\n+        JsonNode properties = node.get(\"properties\");\n+        assertEquals(3, properties.size());\n+        assertEquals(\"integer\", properties.get(\"age\").get(\"type\").asText());\n+        assertEquals(\"string\", properties.get(\"name\").get(\"type\").asText());\n+        JsonNode address = properties.get(\"address\");\n+        assertEquals(\"object\", address.get(\"type\").asText());\n+        assertEquals(\"string\", address.get(\"properties\").get(\"street\").get(\"type\").asText());\n+    }\n+\n+    @Test\n+    void testStreamPathToClass() throws IOException {\n+        assertEquals(JsonSchemaGenerator.class, JsonSchemaGenerator.getClassStream(Paths.get(\"target\", \"classes\"), JsonSchemaGenerator.class.getClassLoader()).filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODY0Nw==", "bodyText": "could be interesting to log the name/path of the created files", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441268647", "createdAt": "2020-06-17T04:07:18Z", "author": {"login": "cristianonicolai"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.maven.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.JsonSchemaGenerator;\n+import org.kie.kogito.maven.plugin.util.MojoUtil;\n+\n+\n+@Mojo(name = \"generate-json-schema\",\n+      requiresDependencyResolution = ResolutionScope.COMPILE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_CLASSES)\n+public class GenerateJsonSchemaMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            Path path = Paths.get(project.getBuild().getOutputDirectory());\n+            ClassLoader cl = MojoUtil\n+                                     .createProjectClassLoader(this\n+                                                                   .getClass()\n+                                                                   .getClassLoader(),\n+                                                               project,\n+                                                               path.toFile(),\n+                                                               null);\n+            Collection<GeneratedFile> files;\n+            try (Stream<Class<?>> stream = JsonSchemaGenerator.getClassStream(path, cl)) {\n+                files = new JsonSchemaGenerator(stream).generate();\n+            }\n+\n+            Path parentPath = path.resolve(\"META-INF\").resolve(\"jsonSchema\");\n+            Files.createDirectories(parentPath);\n+            for (GeneratedFile file : files) {\n+                Files.write(parentPath.resolve(file.relativePath()), file.contents());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2OTA2OQ==", "bodyText": "we could have other failures here. So maybe keep it more generic like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new MojoExecutionException(\"Error retrieving children classes\", e);\n          \n          \n            \n                        throw new MojoExecutionException(\"Error generating JSON Schema for tasks\", e);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441269069", "createdAt": "2020-06-17T04:09:18Z", "author": {"login": "cristianonicolai"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.maven.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.JsonSchemaGenerator;\n+import org.kie.kogito.maven.plugin.util.MojoUtil;\n+\n+\n+@Mojo(name = \"generate-json-schema\",\n+      requiresDependencyResolution = ResolutionScope.COMPILE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_CLASSES)\n+public class GenerateJsonSchemaMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            Path path = Paths.get(project.getBuild().getOutputDirectory());\n+            ClassLoader cl = MojoUtil\n+                                     .createProjectClassLoader(this\n+                                                                   .getClass()\n+                                                                   .getClassLoader(),\n+                                                               project,\n+                                                               path.toFile(),\n+                                                               null);\n+            Collection<GeneratedFile> files;\n+            try (Stream<Class<?>> stream = JsonSchemaGenerator.getClassStream(path, cl)) {\n+                files = new JsonSchemaGenerator(stream).generate();\n+            }\n+\n+            Path parentPath = path.resolve(\"META-INF\").resolve(\"jsonSchema\");\n+            Files.createDirectories(parentPath);\n+            for (GeneratedFile file : files) {\n+                Files.write(parentPath.resolve(file.relativePath()), file.contents());\n+            }\n+\n+        } catch (IOException e) {\n+            throw new MojoExecutionException(\"Error retrieving children classes\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDU4NzA0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-432058704", "createdAt": "2020-06-17T04:58:54Z", "commit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo1ODo1NFrOGk1o7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo1ODo1NFrOGk1o7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MDc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            className.append(str.substring(0, str.length() - \".class\".length()));\n          \n          \n            \n                            className.append(str, 0, str.length() - \".class\".length());", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441280751", "createdAt": "2020-06-17T04:58:54Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;\n+            }\n+        }).filter(Objects::nonNull);\n+\n+    }\n+\n+    private static String getClassNameFromPath(Path path) {\n+        StringBuilder className = new StringBuilder();\n+        Iterator<Path> iter = path.iterator();\n+        while (iter.hasNext()) {\n+            String str = iter.next().toString();\n+            if (iter.hasNext()) {\n+                className.append(str).append('.');\n+            } else {\n+                className.append(str.substring(0, str.length() - \".class\".length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTE1NzU4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-432115758", "createdAt": "2020-06-17T07:08:37Z", "commit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzowODozN1rOGk4dLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzoxNjowOFrOGk4rsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyNjg5NA==", "bodyText": "FYI: this is only required if the plug-in is configured with true", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441326894", "createdAt": "2020-06-17T07:08:37Z", "author": {"login": "evacchi"}, "path": "kogito-maven-plugin/src/main/resources/META-INF/plexus/components.xml", "diffHunk": "@@ -12,7 +12,7 @@\n                     <compile>org.apache.maven.plugins:maven-compiler-plugin:compile,org.kie.kogito:kogito-maven-plugin:generateModel,org.apache.maven.plugins:maven-compiler-plugin:compile</compile>\n                     <!-- proces-classes does not have a default plug-in binding for JAR/KJAR, accordingly to https://maven.apache.org/ref/3-LATEST/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging\n                          so can directly declare the inject reactive bytecode goal -->\n-                    <process-classes>org.kie.kogito:kogito-maven-plugin:process-model-classes</process-classes>\n+                    <process-classes>org.kie.kogito:kogito-maven-plugin:process-model-classes,org.kie.kogito:kogito-maven-plugin:generate-json-schema</process-classes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzMDYxMA==", "bodyText": "I think this is the first time I see these annotations (i.e. I haven't seen a rationale for using them), can we add some documentation somewhere?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441330610", "createdAt": "2020-06-17T07:16:08Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTask.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+\n+@Retention(RUNTIME)\n+@Target(TYPE)\n+public @interface UserTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bea883077a6f51dc7468f41fe3e3eb2ff9886115", "committedDate": "2020-06-15T19:52:15Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "89845d8e0de871c30c069a83c7f59bf887c39840", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89845d8e0de871c30c069a83c7f59bf887c39840", "committedDate": "2020-06-17T09:39:25Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89845d8e0de871c30c069a83c7f59bf887c39840", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89845d8e0de871c30c069a83c7f59bf887c39840", "committedDate": "2020-06-17T09:39:25Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}, "afterCommit": {"oid": "363e5145c9a3264f77a0b67a88d2ceb06ee6f589", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/363e5145c9a3264f77a0b67a88d2ceb06ee6f589", "committedDate": "2020-06-17T11:15:38Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzI2OTUw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-432326950", "createdAt": "2020-06-17T11:57:24Z", "commit": {"oid": "363e5145c9a3264f77a0b67a88d2ceb06ee6f589"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7168c946792d4b697090209982b0929e306b1917", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7168c946792d4b697090209982b0929e306b1917", "committedDate": "2020-06-17T14:08:10Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "d64cd17330c4e44e444654e4b3ac6f7728114556", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d64cd17330c4e44e444654e4b3ac6f7728114556", "committedDate": "2020-06-17T14:32:29Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d64cd17330c4e44e444654e4b3ac6f7728114556", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d64cd17330c4e44e444654e4b3ac6f7728114556", "committedDate": "2020-06-17T14:32:29Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "0d03eae3f81d8187abf6fb298f549d9126f02937", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0d03eae3f81d8187abf6fb298f549d9126f02937", "committedDate": "2020-06-17T17:03:39Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d03eae3f81d8187abf6fb298f549d9126f02937", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0d03eae3f81d8187abf6fb298f549d9126f02937", "committedDate": "2020-06-17T17:03:39Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "66e033bdd8b078586e92f8cc9ad9bec09963d421", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/66e033bdd8b078586e92f8cc9ad9bec09963d421", "committedDate": "2020-06-17T18:14:08Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66e033bdd8b078586e92f8cc9ad9bec09963d421", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/66e033bdd8b078586e92f8cc9ad9bec09963d421", "committedDate": "2020-06-17T18:14:08Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "fc22fd86d274320fef6317ba18b657a26263212b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc22fd86d274320fef6317ba18b657a26263212b", "committedDate": "2020-06-17T18:16:24Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc22fd86d274320fef6317ba18b657a26263212b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc22fd86d274320fef6317ba18b657a26263212b", "committedDate": "2020-06-17T18:16:24Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "3bb0c080fafc3272e4107bcb426d1a981b199b95", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3bb0c080fafc3272e4107bcb426d1a981b199b95", "committedDate": "2020-06-17T18:22:24Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bb0c080fafc3272e4107bcb426d1a981b199b95", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3bb0c080fafc3272e4107bcb426d1a981b199b95", "committedDate": "2020-06-17T18:22:24Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "c025eb5fe00ff140f05fb96b1915d6d7b1b87fc7", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c025eb5fe00ff140f05fb96b1915d6d7b1b87fc7", "committedDate": "2020-06-17T19:44:16Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fe96f1d86a742a26d35fe8bc74e9a6836f6e867", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6fe96f1d86a742a26d35fe8bc74e9a6836f6e867", "committedDate": "2020-06-18T09:50:51Z", "message": "[KOGITO-1063] Generate task schema endpoints for form rendering\n\nDefining new mojo for Spring boot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af357ee186fc34af6d4fdfc7c881f137325b348", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2af357ee186fc34af6d4fdfc7c881f137325b348", "committedDate": "2020-06-18T09:50:54Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c025eb5fe00ff140f05fb96b1915d6d7b1b87fc7", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c025eb5fe00ff140f05fb96b1915d6d7b1b87fc7", "committedDate": "2020-06-17T19:44:16Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}, "afterCommit": {"oid": "2af357ee186fc34af6d4fdfc7c881f137325b348", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2af357ee186fc34af6d4fdfc7c881f137325b348", "committedDate": "2020-06-18T09:50:54Z", "message": "KOGITO-1063\n\nAlternative approach that reuses existing MOJO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjEwMDY1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-433210065", "createdAt": "2020-06-18T11:59:01Z", "commit": {"oid": "2af357ee186fc34af6d4fdfc7c881f137325b348"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDE5MDE0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#pullrequestreview-433419014", "createdAt": "2020-06-18T15:49:07Z", "commit": {"oid": "2af357ee186fc34af6d4fdfc7c881f137325b348"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3552, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}