{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzQyMTc3", "number": 551, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNDowNVrOEFh84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzoxNjowOFrOEGOUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM0NTkzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNDowNVrOGjxl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo1MTo0OVrOGjzHFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NTg3Nw==", "bodyText": "I think this should be true: REST is customizable so json schema should change too.\n@evacchi WDYT?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440165877", "createdAt": "2020-06-15T13:14:05Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -35,7 +35,8 @@\n         CLASS( false ),\n         MESSAGE_CONSUMER( false ),\n         MESSAGE_PRODUCER( false ),\n-        RESOURCE( false );\n+        RESOURCE(false),\n+        JSON_SCHEMA(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5MDc0MA==", "bodyText": "Yes, need to review the current usage of this flag. Currently JsonSchema is not customizable, but in future it will be, so it makes sense to change this to true", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440190740", "createdAt": "2020-06-15T13:51:49Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -35,7 +35,8 @@\n         CLASS( false ),\n         MESSAGE_CONSUMER( false ),\n         MESSAGE_PRODUCER( false ),\n-        RESOURCE( false );\n+        RESOURCE(false),\n+        JSON_SCHEMA(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NTg3Nw=="}, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM2NjAyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxOTowMVrOGjxyNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTo0MDozNVrOGk-CQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg==", "bodyText": "Is this actually possible?\nI think we should throw an exception in this case instead of mute the error.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440169012", "createdAt": "2020-06-15T13:19:01Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5MDE1MA==", "bodyText": "Yes, you are right, a class file should contain a class that can be uploaded by the passed classloader.\nIn inicial implementation I was using a custom class loader that potentially might not found some of the classe, but this can be safely removed now.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440190150", "createdAt": "2020-06-15T13:51:00Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg=="}, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyNDk4Mw==", "bodyText": "Hmmm, after a second thought, even if there is a mistmatch between the classloader and the path provided, I think is safer to silently ignore this (consequence being not schema is generated) rather than breaking the whole generation procedure. More opinions on that are welcome.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440224983", "createdAt": "2020-06-15T14:39:56Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg=="}, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjgyNQ==", "bodyText": "Is this phase considered as optional?\nWhat about add a property to GenerateJsonSchemaMojo like failsafe with true as default for now and propagate this option to JSonSchemaGenerator?\nIt could be overkill so up to you :)\nIn any case please add some logging information (warning or error level)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441012825", "createdAt": "2020-06-16T17:14:07Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg=="}, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwODY2Ng==", "bodyText": "Yes, this is smarter, I will do that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441108666", "createdAt": "2020-06-16T20:01:34Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg=="}, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxODMwNA==", "bodyText": "Exception is now thrown from the lambda.\nAll exceptions are catched by Mojo and rethrown as MavenFailure (not MavenExecution), so it can be ignored using proper flags when invoking maven", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441418304", "createdAt": "2020-06-17T09:40:35Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTAxMg=="}, "originalCommit": {"oid": "a16695e6fe134002d320eee097fc8c145aae8ad8"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjQwMzc2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyODo0N1rOGjyJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNzoxNFrOGj0ozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NTA0Mw==", "bodyText": "What about expose (with a different constructor?) the possibility to plug a different logic here?\nFrom what I can see it should be possible to reuse this class for other JSON schema generation usages just changing these functions:\n\ngetKey is just the identifier of the schema and could default to c.getCanonicalName()\nisUserTaskClass is a predicate to identify if the class should be used\nisNotUserTaskParam is a predicate to skip fields", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440175043", "createdAt": "2020-06-15T13:28:47Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIwODk0MA==", "bodyText": "hmmm, I just put that logic wrapped into private method to avoid the use of anonymous class (a performance trick for streams), but lets analyze them one by one to see if it make sense to expose them.\nThe name of the file, as discussed with Pere, should be process+task name. I actually made a trick here to avoid adding two attributes to the annotation and delegate that responsibility to compound the name to the UserTask class generator, so whatever is assigned to the UserTask annotatation is used as file name. Rethinking about it, thats probably wrong, so I would add \"Process name\" attribute to UserTask annotation and expose this function in constructor.\nisUserTaskClass is fine to expose as it is, since, as you indicate is a predicate to identify if the class should be used to generate a json or not.\nisNotUserTaskParam predicate paremeter depends on the 3pt tool we are using (parameter is a class that belong to JsonSchemaGenerator), so we cannot really expose it in the API. And it is very likely that a different generator will use a different approach to identify which fields should be included in the schema or not, so I think it is ok to not expose it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440208940", "createdAt": "2020-06-15T14:17:31Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NTA0Mw=="}, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNTc1Ng==", "bodyText": "PR updated, please check", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440215756", "createdAt": "2020-06-15T14:27:14Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JSonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+\n+public class JSonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+\n+    public JSonSchemaGenerator(Stream<Class<?>> stream) {\n+        this.stream = stream;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(this::isUserTaskClass).collect(Collectors.groupingBy(this::getKey));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    merged.setAll(read);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private String getKey(Class<?> c) {\n+        return c.getAnnotation(UserTask.class).taskName();\n+    }\n+\n+    private boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return !fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) || fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3NTA0Mw=="}, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjQzMTgyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JSonSchemaGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNToyN1rOGjybRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDoyNzowMVrOGj0oKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTUyNQ==", "bodyText": "Can you please add a test with a third annotated class with a different taskName to verify that it will be not merged?\nSame with a field without UserTaskParam annotation", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440179525", "createdAt": "2020-06-15T13:35:27Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JSonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JSonSchemaGeneratorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNTU5Mw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r440215593", "createdAt": "2020-06-15T14:27:01Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JSonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JSonSchemaGeneratorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTUyNQ=="}, "originalCommit": {"oid": "882a38c9eb6e721a59a2338a1417b3d229c55cad"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzY2NjY4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyNzo1M1rOGklyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTo0Mzo1N1rOGlB-zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTAxMA==", "bodyText": "Is this code really copied from SO?\nTo be honest I don't know if this is ok from a license perspective (see link 1, link 2)\nBtw if it is fine can you please move this comment as javadoc for the class instead of here before package declaration?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441021010", "createdAt": "2020-06-16T17:27:53Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// code copied from https://stackoverflow.com/questions/9895041/merging-two-json-documents-using-jackson", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwODM4MA==", "bodyText": "Well, this was originally copied, but now it is quite different from the original, because I modified it to fix a couple of issues and change the style.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441108380", "createdAt": "2020-06-16T20:00:58Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// code copied from https://stackoverflow.com/questions/9895041/merging-two-json-documents-using-jackson", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTAxMA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MTQ1NA==", "bodyText": "Can I put \"inspired by\" rather than \"copy\"? (I guess is fair to mention that fact) will it be license compliant?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441381454", "createdAt": "2020-06-17T08:42:09Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// code copied from https://stackoverflow.com/questions/9895041/merging-two-json-documents-using-jackson", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTAxMA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4Mjk1OQ==", "bodyText": "From what I can see in link 2\nYou can rewrite \u201cideas\u201d that are expressed through a source code snippet, but you cannot copy snippets of code via Fair Use, regardless of the number of lines you are copying.\n\nso it should be fine just to mention inspired by", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441482959", "createdAt": "2020-06-17T11:43:57Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// code copied from https://stackoverflow.com/questions/9895041/merging-two-json-documents-using-jackson", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTAxMA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE0MzA1OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTaskParam.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoxNjowOVrOGk0LEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODozODowOFrOGk7oHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NjcyMA==", "bodyText": "Maybe simply Type or ParamType ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441256720", "createdAt": "2020-06-17T03:16:09Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTaskParam.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+\n+@Retention(RUNTIME)\n+@Target(FIELD)\n+public @interface UserTaskParam {\n+\n+    TaskType value();\n+\n+    public enum TaskType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3ODg0Nw==", "bodyText": "good catch, this was copied from UserTask annotation and I forgot to change tha name to a proper one.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441378847", "createdAt": "2020-06-17T08:38:08Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTaskParam.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+\n+@Retention(RUNTIME)\n+@Target(FIELD)\n+public @interface UserTaskParam {\n+\n+    TaskType value();\n+\n+    public enum TaskType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NjcyMA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE0NDQ1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoxNzowM1rOGk0L9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1NDowN1rOGk8RVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1Njk1MA==", "bodyText": "please review format", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441256950", "createdAt": "2020-06-17T03:17:03Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -67,6 +67,12 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>kogito-dmn</artifactId> <!-- depend on the utility wrapper module to avoid repeating dependency exclusions -->\n     </dependency>\n+    <!-- Json schema generator -->  \n+    <dependency>\n+   \t  <groupId>com.github.victools</groupId>\n+      <artifactId>jsonschema-generator</artifactId>\n+\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4OTM5Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441389396", "createdAt": "2020-06-17T08:54:07Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/pom.xml", "diffHunk": "@@ -67,6 +67,12 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>kogito-dmn</artifactId> <!-- depend on the utility wrapper module to avoid repeating dependency exclusions -->\n     </dependency>\n+    <!-- Json schema generator -->  \n+    <dependency>\n+   \t  <groupId>com.github.victools</groupId>\n+      <artifactId>jsonschema-generator</artifactId>\n+\t</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1Njk1MA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE0ODk4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyMDowMlrOGk0Osw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1NTowOFrOGk8UDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            else\n          \n          \n            \n                            else {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441257651", "createdAt": "2020-06-17T03:20:02Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MDA5NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441390094", "createdAt": "2020-06-17T08:55:08Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzY1MQ=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE0OTIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyMDowOVrOGk0O0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo1NTowMFrOGk8Tng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (merged == null)\n          \n          \n            \n                            if (merged == null) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441257683", "createdAt": "2020-06-17T03:20:09Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4OTk4Mg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441389982", "createdAt": "2020-06-17T08:55:00Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1NzY4Mw=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE1NzE4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyNToyMVrOGk0T3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTozMToxOVrOGlBmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk3Mw==", "bodyText": "@fjtirado do we need to merge with a previously generated version? Why not simply overwrite it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441258973", "createdAt": "2020-06-17T03:25:21Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NzY4NQ==", "bodyText": "We need a deep merge or we will be losing information.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441367685", "createdAt": "2020-06-17T08:19:45Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk3Mw=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2OTM2NA==", "bodyText": "hm, maybe I'm missing something, but arent we generating the file with all the information every time the goal is executed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441469364", "createdAt": "2020-06-17T11:15:39Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk3Mw=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NjcxNA==", "bodyText": "The algorithm I believe we should use is:\nScan all UserTask annotated files, which basically are *InputTask and *OutputTask,\ngenerate json schema for each of them\ngroup these schemas by task form name (composition of process and task name), normally they will be two per form (_InputTask and OutputTask).\nmerge them into one single json schema file for the form\n(in maven plugin & quarkus extension) override the existing json schema file, if any.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441476714", "createdAt": "2020-06-17T11:31:19Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1ODk3Mw=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE2MTIzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyODoxM1rOGk0WaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyODoxM1rOGk0WaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1OTYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n          \n          \n            \n                        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441259625", "createdAt": "2020-06-17T03:28:13Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE2MzEzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyOTo0MFrOGk0Xng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzoyOTo0MFrOGk0Xng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI1OTkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testJsonSchemaGenerator() throws IOException\n          \n          \n            \n                public void testJsonSchemaGenerator() throws IOException {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441259934", "createdAt": "2020-06-17T03:29:40Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private String name;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private Address address;\n+    }\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonOutputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private String name;\n+\n+        @SuppressWarnings(\"unused\")\n+        private String ignored;\n+    }\n+\n+    private static class Address {\n+        @SuppressWarnings(\"unused\")\n+        private String street;\n+    }\n+\n+    private static class IgnoredClass {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+    }\n+\n+    @Test\n+    public void testJsonSchemaGenerator() throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE2NDY0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/json/JSonUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzozMDo0M1rOGk0Ymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzozMDo0M1rOGk0Ymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MDE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testMerge()\n          \n          \n            \n                public void testMerge() {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441260187", "createdAt": "2020-06-17T03:30:43Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/json/JSonUtilsTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.json;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JSonUtilsTest {\n+\n+    @Test\n+    public void testMerge()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE2ODQwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzozMzowNlrOGk0bCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzozMzowNlrOGk0bCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MDgwOA==", "bodyText": "can you add an example with both input and output?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441260808", "createdAt": "2020-06-17T03:33:06Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIwMDM5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo1NDo1NlrOGk0ulg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMToyMTo1OVrOGlBVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTgxNA==", "bodyText": "@fjtirado I would be surprised if we dont have a utils method in the codebase already to do similar thing, have you had a quick look?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441265814", "createdAt": "2020-06-17T03:54:56Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxOTM1NA==", "bodyText": "I checked  CodeGenUtils and do not find anything similar, maybe it is worthy to move this method there?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441419354", "createdAt": "2020-06-17T09:42:20Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTgxNA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODc4Mg==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441468782", "createdAt": "2020-06-17T11:14:28Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTgxNA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3MjI5OA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441472298", "createdAt": "2020-06-17T11:21:59Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NTgxNA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIxMTAyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowMTo1M1rOGk004A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTowMzoyNFrOGk8n2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NzQyNA==", "bodyText": "Perhaps you should check if the test task classes where found?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441267424", "createdAt": "2020-06-17T04:01:53Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private String name;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private Address address;\n+    }\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonOutputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private String name;\n+\n+        @SuppressWarnings(\"unused\")\n+        private String ignored;\n+    }\n+\n+    private static class Address {\n+        @SuppressWarnings(\"unused\")\n+        private String street;\n+    }\n+\n+    private static class IgnoredClass {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+    }\n+\n+    @Test\n+    public void testJsonSchemaGenerator() throws IOException\n+    {\n+        Collection<GeneratedFile> files = new JsonSchemaGenerator(Stream.of(PersonInputParams.class, PersonOutputParams.class, IgnoredClass.class)).generate();\n+        assertEquals(1, files.size());\n+        GeneratedFile file = files.iterator().next();\n+        assertEquals(\"test_test.json\", file.relativePath());\n+        ObjectReader reader = new ObjectMapper().reader();\n+        JsonNode node = reader.readTree(file.contents());\n+        assertEquals(\"https://json-schema.org/draft/2019-09/schema\", node.get(\"$schema\").asText());\n+        assertEquals(\"object\", node.get(\"type\").asText());\n+        JsonNode properties = node.get(\"properties\");\n+        assertEquals(3, properties.size());\n+        assertEquals(\"integer\", properties.get(\"age\").get(\"type\").asText());\n+        assertEquals(\"string\", properties.get(\"name\").get(\"type\").asText());\n+        JsonNode address = properties.get(\"address\");\n+        assertEquals(\"object\", address.get(\"type\").asText());\n+        assertEquals(\"string\", address.get(\"properties\").get(\"street\").get(\"type\").asText());\n+    }\n+\n+    @Test\n+    void testStreamPathToClass() throws IOException {\n+        assertEquals(JsonSchemaGenerator.class, JsonSchemaGenerator.getClassStream(Paths.get(\"target\", \"classes\"), JsonSchemaGenerator.class.getClassLoader()).filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5NTE2MA==", "bodyText": "That was my first idea, but then I though thatn since we are testing JSonSchemaGenerator, it will be nicer to search for that class..", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441395160", "createdAt": "2020-06-17T09:03:24Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen;\n+\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaGeneratorTest {\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonInputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private String name;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.INPUT)\n+        private Address address;\n+    }\n+\n+    @UserTask(taskName = \"test\", processName = \"test\")\n+    private static class PersonOutputParams {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private String name;\n+\n+        @SuppressWarnings(\"unused\")\n+        private String ignored;\n+    }\n+\n+    private static class Address {\n+        @SuppressWarnings(\"unused\")\n+        private String street;\n+    }\n+\n+    private static class IgnoredClass {\n+\n+        @UserTaskParam(UserTaskParam.TaskType.OUTPUT)\n+        private int age;\n+    }\n+\n+    @Test\n+    public void testJsonSchemaGenerator() throws IOException\n+    {\n+        Collection<GeneratedFile> files = new JsonSchemaGenerator(Stream.of(PersonInputParams.class, PersonOutputParams.class, IgnoredClass.class)).generate();\n+        assertEquals(1, files.size());\n+        GeneratedFile file = files.iterator().next();\n+        assertEquals(\"test_test.json\", file.relativePath());\n+        ObjectReader reader = new ObjectMapper().reader();\n+        JsonNode node = reader.readTree(file.contents());\n+        assertEquals(\"https://json-schema.org/draft/2019-09/schema\", node.get(\"$schema\").asText());\n+        assertEquals(\"object\", node.get(\"type\").asText());\n+        JsonNode properties = node.get(\"properties\");\n+        assertEquals(3, properties.size());\n+        assertEquals(\"integer\", properties.get(\"age\").get(\"type\").asText());\n+        assertEquals(\"string\", properties.get(\"name\").get(\"type\").asText());\n+        JsonNode address = properties.get(\"address\");\n+        assertEquals(\"object\", address.get(\"type\").asText());\n+        assertEquals(\"string\", address.get(\"properties\").get(\"street\").get(\"type\").asText());\n+    }\n+\n+    @Test\n+    void testStreamPathToClass() throws IOException {\n+        assertEquals(JsonSchemaGenerator.class, JsonSchemaGenerator.getClassStream(Paths.get(\"target\", \"classes\"), JsonSchemaGenerator.class.getClassLoader()).filter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NzQyNA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIxODU3OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowNzoxOFrOGk05pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMjowNlrOGk7CHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODY0Nw==", "bodyText": "could be interesting to log the name/path of the created files", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441268647", "createdAt": "2020-06-17T04:07:18Z", "author": {"login": "cristianonicolai"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.maven.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.JsonSchemaGenerator;\n+import org.kie.kogito.maven.plugin.util.MojoUtil;\n+\n+\n+@Mojo(name = \"generate-json-schema\",\n+      requiresDependencyResolution = ResolutionScope.COMPILE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_CLASSES)\n+public class GenerateJsonSchemaMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            Path path = Paths.get(project.getBuild().getOutputDirectory());\n+            ClassLoader cl = MojoUtil\n+                                     .createProjectClassLoader(this\n+                                                                   .getClass()\n+                                                                   .getClassLoader(),\n+                                                               project,\n+                                                               path.toFile(),\n+                                                               null);\n+            Collection<GeneratedFile> files;\n+            try (Stream<Class<?>> stream = JsonSchemaGenerator.getClassStream(path, cl)) {\n+                files = new JsonSchemaGenerator(stream).generate();\n+            }\n+\n+            Path parentPath = path.resolve(\"META-INF\").resolve(\"jsonSchema\");\n+            Files.createDirectories(parentPath);\n+            for (GeneratedFile file : files) {\n+                Files.write(parentPath.resolve(file.relativePath()), file.contents());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2OTExOQ==", "bodyText": "yes, Ill do that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441369119", "createdAt": "2020-06-17T08:22:06Z", "author": {"login": "fjtirado"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.maven.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.JsonSchemaGenerator;\n+import org.kie.kogito.maven.plugin.util.MojoUtil;\n+\n+\n+@Mojo(name = \"generate-json-schema\",\n+      requiresDependencyResolution = ResolutionScope.COMPILE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_CLASSES)\n+public class GenerateJsonSchemaMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            Path path = Paths.get(project.getBuild().getOutputDirectory());\n+            ClassLoader cl = MojoUtil\n+                                     .createProjectClassLoader(this\n+                                                                   .getClass()\n+                                                                   .getClassLoader(),\n+                                                               project,\n+                                                               path.toFile(),\n+                                                               null);\n+            Collection<GeneratedFile> files;\n+            try (Stream<Class<?>> stream = JsonSchemaGenerator.getClassStream(path, cl)) {\n+                files = new JsonSchemaGenerator(stream).generate();\n+            }\n+\n+            Path parentPath = path.resolve(\"META-INF\").resolve(\"jsonSchema\");\n+            Files.createDirectories(parentPath);\n+            for (GeneratedFile file : files) {\n+                Files.write(parentPath.resolve(file.relativePath()), file.contents());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODY0Nw=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTIyMTIwOnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDowOToxOFrOGk07TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMjozNlrOGk7DSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2OTA2OQ==", "bodyText": "we could have other failures here. So maybe keep it more generic like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new MojoExecutionException(\"Error retrieving children classes\", e);\n          \n          \n            \n                        throw new MojoExecutionException(\"Error generating JSON Schema for tasks\", e);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441269069", "createdAt": "2020-06-17T04:09:18Z", "author": {"login": "cristianonicolai"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.maven.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.JsonSchemaGenerator;\n+import org.kie.kogito.maven.plugin.util.MojoUtil;\n+\n+\n+@Mojo(name = \"generate-json-schema\",\n+      requiresDependencyResolution = ResolutionScope.COMPILE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_CLASSES)\n+public class GenerateJsonSchemaMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            Path path = Paths.get(project.getBuild().getOutputDirectory());\n+            ClassLoader cl = MojoUtil\n+                                     .createProjectClassLoader(this\n+                                                                   .getClass()\n+                                                                   .getClassLoader(),\n+                                                               project,\n+                                                               path.toFile(),\n+                                                               null);\n+            Collection<GeneratedFile> files;\n+            try (Stream<Class<?>> stream = JsonSchemaGenerator.getClassStream(path, cl)) {\n+                files = new JsonSchemaGenerator(stream).generate();\n+            }\n+\n+            Path parentPath = path.resolve(\"META-INF\").resolve(\"jsonSchema\");\n+            Files.createDirectories(parentPath);\n+            for (GeneratedFile file : files) {\n+                Files.write(parentPath.resolve(file.relativePath()), file.contents());\n+            }\n+\n+        } catch (IOException e) {\n+            throw new MojoExecutionException(\"Error retrieving children classes\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2OTQxNg==", "bodyText": "yes, copy paste message ;), Ill fix that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441369416", "createdAt": "2020-06-17T08:22:36Z", "author": {"login": "fjtirado"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateJsonSchemaMojo.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.maven.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.JsonSchemaGenerator;\n+import org.kie.kogito.maven.plugin.util.MojoUtil;\n+\n+\n+@Mojo(name = \"generate-json-schema\",\n+      requiresDependencyResolution = ResolutionScope.COMPILE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_CLASSES)\n+public class GenerateJsonSchemaMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            Path path = Paths.get(project.getBuild().getOutputDirectory());\n+            ClassLoader cl = MojoUtil\n+                                     .createProjectClassLoader(this\n+                                                                   .getClass()\n+                                                                   .getClassLoader(),\n+                                                               project,\n+                                                               path.toFile(),\n+                                                               null);\n+            Collection<GeneratedFile> files;\n+            try (Stream<Class<?>> stream = JsonSchemaGenerator.getClassStream(path, cl)) {\n+                files = new JsonSchemaGenerator(stream).generate();\n+            }\n+\n+            Path parentPath = path.resolve(\"META-INF\").resolve(\"jsonSchema\");\n+            Files.createDirectories(parentPath);\n+            for (GeneratedFile file : files) {\n+                Files.write(parentPath.resolve(file.relativePath()), file.contents());\n+            }\n+\n+        } catch (IOException e) {\n+            throw new MojoExecutionException(\"Error retrieving children classes\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2OTA2OQ=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI5Nzg3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo1ODo1NFrOGk1o7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyMzoxMFrOGk7ErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MDc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            className.append(str.substring(0, str.length() - \".class\".length()));\n          \n          \n            \n                            className.append(str, 0, str.length() - \".class\".length());", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441280751", "createdAt": "2020-06-17T04:58:54Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;\n+            }\n+        }).filter(Objects::nonNull);\n+\n+    }\n+\n+    private static String getClassNameFromPath(Path path) {\n+        StringBuilder className = new StringBuilder();\n+        Iterator<Path> iter = path.iterator();\n+        while (iter.hasNext()) {\n+            String str = iter.next().toString();\n+            if (iter.hasNext()) {\n+                className.append(str).append('.');\n+            } else {\n+                className.append(str.substring(0, str.length() - \".class\".length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2OTc3Mg==", "bodyText": "good catch!!!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441369772", "createdAt": "2020-06-17T08:23:10Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.github.victools.jsonschema.generator.FieldScope;\n+import com.github.victools.jsonschema.generator.OptionPreset;\n+import com.github.victools.jsonschema.generator.SchemaGenerator;\n+import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\n+import com.github.victools.jsonschema.generator.SchemaVersion;\n+import org.kie.kogito.UserTask;\n+import org.kie.kogito.UserTaskParam;\n+import org.kie.kogito.codegen.GeneratedFile.Type;\n+import org.kie.kogito.codegen.json.JsonUtils;\n+\n+public class JsonSchemaGenerator {\n+\n+    private Stream<Class<?>> stream;\n+    private Function<? super Class<?>, String> getSchemaName;\n+    private Predicate<? super Class<?>> shouldGenSchema;\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream) {\n+        this(stream, JsonSchemaGenerator::getKey, JsonSchemaGenerator::isUserTaskClass);\n+    }\n+\n+    public JsonSchemaGenerator(Stream<Class<?>> stream, Function<Class<?>, String> getSchemaName, Predicate<Class<?>> shouldGenSchema) {\n+        this.stream = stream;\n+        this.getSchemaName = getSchemaName;\n+        this.shouldGenSchema = shouldGenSchema;\n+    }\n+\n+    public Collection<GeneratedFile> generate() throws IOException {\n+        SchemaGeneratorConfigBuilder builder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2019_09, OptionPreset.PLAIN_JSON);\n+        builder.forFields().withIgnoreCheck(this::isNotUserTaskParam);\n+        SchemaGenerator generator = new SchemaGenerator(builder.build());\n+        ObjectWriter writer = new ObjectMapper().writer();\n+        Map<String, List<Class<?>>> map = stream.filter(shouldGenSchema).collect(Collectors.groupingBy(getSchemaName));\n+        Collection<GeneratedFile> files = new ArrayList<>();\n+        for (Map.Entry<String, List<Class<?>>> entry : map.entrySet()) {\n+            ObjectNode merged = null;\n+            for (Class<?> c : entry.getValue()) {\n+                ObjectNode read = generator.generateSchema(c);\n+                if (merged == null)\n+                    merged = read;\n+                else\n+                    JsonUtils.merge(read, merged);\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            writer.writeValue(outputStream, merged);\n+            files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+        }\n+        return files;\n+    }\n+\n+\n+    private static String getKey(Class<?> c) {\n+        UserTask userTask = c.getAnnotation(UserTask.class);\n+        return userTask.processName() + \"_\" + userTask.taskName();\n+    }\n+\n+    private static boolean isUserTaskClass(Class<?> c) {\n+        return c.isAnnotationPresent(UserTask.class);\n+    }\n+\n+    private boolean isNotUserTaskParam(FieldScope fieldScope) {\n+        return fieldScope.getDeclaringType().getErasedType().isAnnotationPresent(UserTask.class) && fieldScope.getAnnotation(UserTaskParam.class) == null;\n+    }\n+\n+    public static final Stream<Class<?>> getClassStream(Path parentPath, ClassLoader cl) throws IOException {\n+        return Files.walk(parentPath).filter(p -> p.toString().endsWith(\".class\")).map(parentPath::relativize).map(p -> {\n+            try {\n+                return cl.loadClass(getClassNameFromPath(p));\n+            } catch (ClassNotFoundException e) {\n+                return (Class<?>) null;\n+            }\n+        }).filter(Objects::nonNull);\n+\n+    }\n+\n+    private static String getClassNameFromPath(Path path) {\n+        StringBuilder className = new StringBuilder();\n+        Iterator<Path> iter = path.iterator();\n+        while (iter.hasNext()) {\n+            String str = iter.next().toString();\n+            if (iter.hasNext()) {\n+                className.append(str).append('.');\n+            } else {\n+                className.append(str.substring(0, str.length() - \".class\".length()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MDc1MQ=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTU5MTkxOnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/resources/META-INF/plexus/components.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzowODozN1rOGk4dLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0MDo1MlrOGk7vAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyNjg5NA==", "bodyText": "FYI: this is only required if the plug-in is configured with true", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441326894", "createdAt": "2020-06-17T07:08:37Z", "author": {"login": "evacchi"}, "path": "kogito-maven-plugin/src/main/resources/META-INF/plexus/components.xml", "diffHunk": "@@ -12,7 +12,7 @@\n                     <compile>org.apache.maven.plugins:maven-compiler-plugin:compile,org.kie.kogito:kogito-maven-plugin:generateModel,org.apache.maven.plugins:maven-compiler-plugin:compile</compile>\n                     <!-- proces-classes does not have a default plug-in binding for JAR/KJAR, accordingly to https://maven.apache.org/ref/3-LATEST/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging\n                          so can directly declare the inject reactive bytecode goal -->\n-                    <process-classes>org.kie.kogito:kogito-maven-plugin:process-model-classes</process-classes>\n+                    <process-classes>org.kie.kogito:kogito-maven-plugin:process-model-classes,org.kie.kogito:kogito-maven-plugin:generate-json-schema</process-classes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDYxMA==", "bodyText": "Thanks for the info ;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441380610", "createdAt": "2020-06-17T08:40:52Z", "author": {"login": "fjtirado"}, "path": "kogito-maven-plugin/src/main/resources/META-INF/plexus/components.xml", "diffHunk": "@@ -12,7 +12,7 @@\n                     <compile>org.apache.maven.plugins:maven-compiler-plugin:compile,org.kie.kogito:kogito-maven-plugin:generateModel,org.apache.maven.plugins:maven-compiler-plugin:compile</compile>\n                     <!-- proces-classes does not have a default plug-in binding for JAR/KJAR, accordingly to https://maven.apache.org/ref/3-LATEST/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging\n                          so can directly declare the inject reactive bytecode goal -->\n-                    <process-classes>org.kie.kogito:kogito-maven-plugin:process-model-classes</process-classes>\n+                    <process-classes>org.kie.kogito:kogito-maven-plugin:process-model-classes,org.kie.kogito:kogito-maven-plugin:generate-json-schema</process-classes>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyNjg5NA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTYxNTIwOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzoxNjowOFrOGk4rsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODoyNzo1M1rOGk7P0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzMDYxMA==", "bodyText": "I think this is the first time I see these annotations (i.e. I haven't seen a rationale for using them), can we add some documentation somewhere?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441330610", "createdAt": "2020-06-17T07:16:08Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTask.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+\n+@Retention(RUNTIME)\n+@Target(TYPE)\n+public @interface UserTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MjYyNg==", "bodyText": "UserTask is to identify the files generated for user task and do not rely on the currently generated name (they finish with TaskImport and TaskOuput suffix)\nWithin these generated files, there are some fields that does not need to be included in the json schema, thats the rationale for the introduction of UserTaskParam", "url": "https://github.com/kiegroup/kogito-runtimes/pull/551#discussion_r441372626", "createdAt": "2020-06-17T08:27:53Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/UserTask.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+\n+@Retention(RUNTIME)\n+@Target(TYPE)\n+public @interface UserTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzMDYxMA=="}, "originalCommit": {"oid": "bea883077a6f51dc7468f41fe3e3eb2ff9886115"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 155, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}