{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDkwNjQ3", "number": 741, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMTo0MVrOEhI8NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1Nzo0M1rOEhScyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTg0OTQ5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/io/CollectedResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMTo0MVrOHOSe4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozNToxMlrOHOSoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDkyOA==", "bodyText": "not sure where this method is used, but I would consider if meaningful for this method to check basePath is in fact a valid parent of each files?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484744928", "createdAt": "2020-09-08T08:31:41Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/io/CollectedResource.java", "diffHunk": "@@ -102,6 +107,22 @@\n         return resources;\n     }\n \n+    /**\n+     * Returns a collection of CollectedResource from the given files\n+     */\n+    public static Collection<CollectedResource> fromFiles(Path basePath, File... files) {\n+        Collection<CollectedResource> resources = new ArrayList<>();\n+        try (Stream<File> paths = Arrays.stream(files)) {\n+            paths.filter(File::isFile)\n+                    .map(f -> new FileSystemResource(f)\n+                            .setResourceType(determineResourceType(f.getName())))\n+                    .map(f -> new CollectedResource(basePath, f))\n+                    .forEach(resources::add);\n+        }\n+        return resources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b784b0803a476ca29ae58f0531172e85b7336f9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NzI3OA==", "bodyText": "good point. added as an invariant check on the costructor 2eb4ad1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484747278", "createdAt": "2020-09-08T08:35:12Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/io/CollectedResource.java", "diffHunk": "@@ -102,6 +107,22 @@\n         return resources;\n     }\n \n+    /**\n+     * Returns a collection of CollectedResource from the given files\n+     */\n+    public static Collection<CollectedResource> fromFiles(Path basePath, File... files) {\n+        Collection<CollectedResource> resources = new ArrayList<>();\n+        try (Stream<File> paths = Arrays.stream(files)) {\n+            paths.filter(File::isFile)\n+                    .map(f -> new FileSystemResource(f)\n+                            .setResourceType(determineResourceType(f.getName())))\n+                    .map(f -> new CollectedResource(basePath, f))\n+                    .forEach(resources::add);\n+        }\n+        return resources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDkyOA=="}, "originalCommit": {"oid": "6b784b0803a476ca29ae58f0531172e85b7336f9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTg1MzY3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozMjozMVrOHOShQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODozNDowMlrOHOSlBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTUzNg==", "bodyText": "difficult to understand why this change is required, but if all the tests are passing I guess it's super fine for me", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484745536", "createdAt": "2020-09-08T08:32:31Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -91,8 +93,13 @@ private String getDecisionModelJarResourcePath(CollectedResource resource) {\n \n     private String getDecisionModelRelativeResourcePath(CollectedResource resource) {\n         String source = getDecisionModelJarResourcePath(resource);\n-        Path relativizedPath = resource.basePath().relativize(Paths.get(source));\n-        return \"/\" + relativizedPath.toString().replace(File.separatorChar, '/');\n+        try {\n+            Path sourcePath = Paths.get(source).toAbsolutePath().toRealPath();\n+            Path relativizedPath = resource.basePath().toAbsolutePath().toRealPath().relativize(sourcePath);\n+            return \"/\" + relativizedPath.toString().replace(File.separatorChar, '/');\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b784b0803a476ca29ae58f0531172e85b7336f9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NjUwMA==", "bodyText": "toRealPath() throws a checked IOException, the reason for the change is the issue when codegen is invoked in symlinked directory :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484746500", "createdAt": "2020-09-08T08:34:02Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -91,8 +93,13 @@ private String getDecisionModelJarResourcePath(CollectedResource resource) {\n \n     private String getDecisionModelRelativeResourcePath(CollectedResource resource) {\n         String source = getDecisionModelJarResourcePath(resource);\n-        Path relativizedPath = resource.basePath().relativize(Paths.get(source));\n-        return \"/\" + relativizedPath.toString().replace(File.separatorChar, '/');\n+        try {\n+            Path sourcePath = Paths.get(source).toAbsolutePath().toRealPath();\n+            Path relativizedPath = resource.basePath().toAbsolutePath().toRealPath().relativize(sourcePath);\n+            return \"/\" + relativizedPath.toString().replace(File.separatorChar, '/');\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTUzNg=="}, "originalCommit": {"oid": "6b784b0803a476ca29ae58f0531172e85b7336f9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzQwNjE5OnYy", "diffSide": "LEFT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1NzozM1rOHOhTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozNjoxN1rOHOi_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc2Mw==", "bodyText": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484987763", "createdAt": "2020-09-08T14:57:33Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -96,55 +83,10 @@ public static PredictionCodegen ofCollectedResources(Collection<CollectedResourc\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cb85eb920a34146f608dbce761952eccdc4696"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNTQwMw==", "bodyText": "I knew you would have liked this PR :P", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r485015403", "createdAt": "2020-09-08T15:36:17Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -96,55 +83,10 @@ public static PredictionCodegen ofCollectedResources(Collection<CollectedResourc\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc2Mw=="}, "originalCommit": {"oid": "15cb85eb920a34146f608dbce761952eccdc4696"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzQwNzQ3OnYy", "diffSide": "LEFT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1Nzo0M1rOHOhUUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1Nzo0M1rOHOhUUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzk4Ng==", "bodyText": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484987986", "createdAt": "2020-09-08T14:57:43Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -96,55 +83,10 @@ public static PredictionCodegen ofCollectedResources(Collection<CollectedResourc\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n-        List<PMMLResource> pmmlResources = new ArrayList<>();\n-        for (Path jarPath : jarPaths) {\n-            List<Resource> resources = new ArrayList<>();\n-            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n-                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n-                while (entries.hasMoreElements()) {\n-                    ZipEntry entry = entries.nextElement();\n-                    ResourceType resourceType = determineResourceType(entry.getName());\n-                    if (resourceType == ResourceType.PMML) {\n-                        InternalResource resource =\n-                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n-                        resource.setResourceType(resourceType);\n-                        resource.setSourcePath(entry.getName());\n-                        resources.add(resource);\n-                    }\n-                }\n-            }\n-            pmmlResources.addAll(parsePredictions(jarPath, resources));\n-        }\n-        return ofPredictions(pmmlResources);\n-    }\n-\n-    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n-        List<PMMLResource> resources = new ArrayList<>();\n-        for (Path path : paths) {\n-            Path srcPath = Paths.get(path.toString());\n-            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n-                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n-                        .map(Path::toFile)\n-                        .collect(Collectors.toList());\n-                resources.addAll(parseFiles(srcPath, files));\n-            }\n-        }\n-        return ofPredictions(resources);\n-    }\n-\n-    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n-        return ofPredictions(parseFiles(basePath, files));\n-    }\n-\n     private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n         return new PredictionCodegen(resources);\n     }\n \n-    private static List<PMMLResource> parseFiles(Path path, List<File> files) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cb85eb920a34146f608dbce761952eccdc4696"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}