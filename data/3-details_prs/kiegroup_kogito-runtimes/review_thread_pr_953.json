{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTk0ODA5", "number": 953, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1MzozMVrOFINQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo0Mzo1OVrOFLOyVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTUwMDYxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1MzozMVrOIJ_7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1MzozMVrOIJ_7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NTQyMg==", "bodyText": "Now that we are refactoring, one thing I lacked when using GeneratedFile was a constructor that accepts directly a Path object rather than a String, this will allwo to directly pass here JsonSchemaUtil.getJsonDir().resolve(JsonSchemaUtil.getFilaName(name)).\nAnd, in general, will feel more \"modern\", wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r547355422", "createdAt": "2020-12-22T15:53:31Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -164,7 +164,7 @@ private JsonSchemaGenerator(Map<String, List<Class<?>>> map, SchemaVersion schem\n             }\n             try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n                 writer.writeValue(outputStream, merged);\n-                files.add(new GeneratedFile(Type.JSON_SCHEMA, JsonSchemaUtil.getFileName(entry.getKey()), outputStream.toByteArray()));\n+                files.add(new GeneratedFile(Type.JSON_SCHEMA, pathFor(entry.getKey()), outputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a22560153e9d9fc041fe043721b757d049c62983"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0OTUxOTE5OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxNjoxODozMlrOILLa8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowNDo0MFrOINtshg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU5MjM2OQ==", "bodyText": "Lets do this\ngeneratedResources.forEach(this::writeGeneratedFile);\ngenerateJsonSchema(reflections).stream().map(gf -> new GeneratedFile(GENERATED_CP_RESOURCE, gf.relativePath(), gf.contents()).forEach(this::writeGeneratedFile);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r548592369", "createdAt": "2020-12-24T16:18:32Z", "author": {"login": "fjtirado"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "diffHunk": "@@ -135,7 +135,12 @@ public void execute() throws MojoExecutionException {\n                 compileAndWriteClasses(generatedClasses, cl, settings);\n \n                 // Json schema generation\n-                Collection<GeneratedFile> jsonSchemaFiles = generateJsonSchema(reflections);\n+                Collection<GeneratedFile> jsonSchemaFiles = generateJsonSchema(reflections)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d102608b37035b737b5f3b67c3f15e92c40a89"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MTA3OA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r551251078", "createdAt": "2021-01-04T11:04:40Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/ProcessClassesMojo.java", "diffHunk": "@@ -135,7 +135,12 @@ public void execute() throws MojoExecutionException {\n                 compileAndWriteClasses(generatedClasses, cl, settings);\n \n                 // Json schema generation\n-                Collection<GeneratedFile> jsonSchemaFiles = generateJsonSchema(reflections);\n+                Collection<GeneratedFile> jsonSchemaFiles = generateJsonSchema(reflections)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU5MjM2OQ=="}, "originalCommit": {"oid": "36d102608b37035b737b5f3b67c3f15e92c40a89"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODgwOTQ5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTowNzozNFrOINqAGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxNDoyM1rOINsFng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MDU1Mg==", "bodyText": "is it intended we are losing the temp dir?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r551190552", "createdAt": "2021-01-04T09:07:34Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGeneratorTest.java", "diffHunk": "@@ -16,25 +16,23 @@\n package org.kie.kogito.codegen.process.persistence.proto;\n \n import java.io.IOException;\n-import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.io.TempDir;\n import org.kie.kogito.codegen.GeneratedFile;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n class AbstractProtoGeneratorTest {\n     @Test\n-    void checkGeneratedProtoBufAndListing(@TempDir Path tmpTargetDir) throws IOException {\n+    void checkGeneratedProtoBufAndListing() throws IOException {\n         final ReflectionProtoGenerator generator = new ReflectionProtoGenerator();\n         List<GeneratedFile> generatedFiles = new ArrayList<>();\n         for (int i = 0; i < 5; i++) {\n             final Proto proto = new Proto(\"org.acme.test\");\n-            generatedFiles.add(generator.generateProtoFiles(\"protofile.\" + i, tmpTargetDir.toString(), proto));\n+            generatedFiles.add(generator.generateProtoFiles(\"protofile.\" + i, proto));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d102608b37035b737b5f3b67c3f15e92c40a89"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNDczNA==", "bodyText": "Well, there was no assertion/check based on tmpTargetDir and moreover that variable was annotated with @TempDir. This means that is a random tmp folder removed at the end of test execution (see TempDir javadoc). I think it was there only because of generateProtoFiles signature and now it is no more needed so removed it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r551224734", "createdAt": "2021-01-04T10:14:23Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/persistence/proto/AbstractProtoGeneratorTest.java", "diffHunk": "@@ -16,25 +16,23 @@\n package org.kie.kogito.codegen.process.persistence.proto;\n \n import java.io.IOException;\n-import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.io.TempDir;\n import org.kie.kogito.codegen.GeneratedFile;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n class AbstractProtoGeneratorTest {\n     @Test\n-    void checkGeneratedProtoBufAndListing(@TempDir Path tmpTargetDir) throws IOException {\n+    void checkGeneratedProtoBufAndListing() throws IOException {\n         final ReflectionProtoGenerator generator = new ReflectionProtoGenerator();\n         List<GeneratedFile> generatedFiles = new ArrayList<>();\n         for (int i = 0; i < 5; i++) {\n             final Proto proto = new Proto(\"org.acme.test\");\n-            generatedFiles.add(generator.generateProtoFiles(\"protofile.\" + i, tmpTargetDir.toString(), proto));\n+            generatedFiles.add(generator.generateProtoFiles(\"protofile.\" + i, proto));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MDU1Mg=="}, "originalCommit": {"oid": "36d102608b37035b737b5f3b67c3f15e92c40a89"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODgyMTM4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/utils/GeneratedFileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOToxMDo1MFrOINqGlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowMDowOVrOINtkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MjIxMg==", "bodyText": "I dislike \"utils\" because they tend to become a dump. if this is intended for validation-related methods, we can call it \"GeneratedFileValidation\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r551192212", "createdAt": "2021-01-04T09:10:50Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/utils/GeneratedFileUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.utils;\n+\n+import org.kie.kogito.codegen.GeneratedFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+public class GeneratedFileUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d102608b37035b737b5f3b67c3f15e92c40a89"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0OTA0OA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r551249048", "createdAt": "2021-01-04T11:00:09Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/utils/GeneratedFileUtils.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.utils;\n+\n+import org.kie.kogito.codegen.GeneratedFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+public class GeneratedFileUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MjIxMg=="}, "originalCommit": {"oid": "36d102608b37035b737b5f3b67c3f15e92c40a89"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzIwOTE2OnYy", "diffSide": "LEFT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo0Mzo1OVrOIOSbRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoxNzozOVrOIOiEWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1Mjg2OA==", "bodyText": "Just a note that now in the GenerateModelMojo it is not able to change the sources directory location, before it was possible. Maybe it was not desired even before.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r551852868", "createdAt": "2021-01-05T10:43:59Z", "author": {"login": "MarianMacik"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -67,30 +63,6 @@\n \n     public static final PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n \n-    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n-    private File targetDirectory;\n-\n-    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n-    private File projectDir;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n-    private File testDir;\n-\n-    @Parameter\n-    private Map<String, String> properties;\n-\n-    @Parameter(required = true, defaultValue = \"${project}\")\n-    private MavenProject project;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n-    private File outputDirectory;\n-\n-    @Parameter(property = \"kogito.codegen.sources.directory\", defaultValue = \"${project.build.directory}/generated-sources/kogito\")\n-    private File customizableSources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5137d425f4b4b4b8ecf18373593ae36ca2bc3f6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwOTE0Nw==", "bodyText": "You are right, I don't know exactly the expected behavior is I restored master one \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/953#discussion_r552109147", "createdAt": "2021-01-05T18:17:39Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -67,30 +63,6 @@\n \n     public static final PathMatcher drlFileMatcher = FileSystems.getDefault().getPathMatcher(\"glob:**.drl\");\n \n-    @Parameter(required = true, defaultValue = \"${project.build.directory}\")\n-    private File targetDirectory;\n-\n-    @Parameter(required = true, defaultValue = \"${project.basedir}\")\n-    private File projectDir;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.testSourceDirectory}\")\n-    private File testDir;\n-\n-    @Parameter\n-    private Map<String, String> properties;\n-\n-    @Parameter(required = true, defaultValue = \"${project}\")\n-    private MavenProject project;\n-\n-    @Parameter(required = true, defaultValue = \"${project.build.outputDirectory}\")\n-    private File outputDirectory;\n-\n-    @Parameter(property = \"kogito.codegen.sources.directory\", defaultValue = \"${project.build.directory}/generated-sources/kogito\")\n-    private File customizableSources;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1Mjg2OA=="}, "originalCommit": {"oid": "e5137d425f4b4b4b8ecf18373593ae36ca2bc3f6"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4641, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}