{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0Nzg5OTY2", "number": 756, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1OTowMFrOEijhwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoxNToyOFrOEimzew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY5MTIxOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot-kafka/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1OTowMFrOHQgBqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowMTo1N1rOHQgI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2Mzk3OQ==", "bodyText": "mmm I think we'll have to remove this since it is already in the other suite", "url": "https://github.com/kiegroup/kogito-runtimes/pull/756#discussion_r487063979", "createdAt": "2020-09-11T13:59:00Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot-kafka/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n+@ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n+public class PingPongMessageTest extends BaseRestTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce816cdca94d142fd996f63e244e4341a751f6e6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2NTgzOA==", "bodyText": "misread the path forget it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/756#discussion_r487065838", "createdAt": "2020-09-11T14:01:57Z", "author": {"login": "evacchi"}, "path": "integration-tests/integration-tests-springboot-kafka/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;\n+import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n+@ContextConfiguration(initializers =  { KafkaSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class })\n+public class PingPongMessageTest extends BaseRestTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2Mzk3OQ=="}, "originalCommit": {"oid": "ce816cdca94d142fd996f63e244e4341a751f6e6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzIyODExOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/DefaultEventMarshaller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoxNToyOFrOHQlOQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMjo1MToyNlrOHQx-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0OTEyMg==", "bodyText": "is this really needed? I mean, I know formatting is critical (although apparently not enough to align Intellij and Eclipse one ;)) , but in this case I think we can save a change in a file", "url": "https://github.com/kiegroup/kogito-runtimes/pull/756#discussion_r487149122", "createdAt": "2020-09-11T16:15:28Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/DefaultEventMarshaller.java", "diffHunk": "@@ -28,8 +28,9 @@\n     private static final Logger logger = LoggerFactory.getLogger(DefaultEventMarshaller.class);\n \n     @Override\n-    public <T, P extends AbstractProcessDataEvent<T>> String marshall(T dataEvent, Function<T, P> cloudFunction,\n-            Optional<Boolean> isCloudEvent) {\n+    public <T, P extends AbstractProcessDataEvent<T>> String marshall(T dataEvent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce816cdca94d142fd996f63e244e4341a751f6e6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1ODA4OA==", "bodyText": "just a minor tweak to make more readable in my opinion... we can check the reason why both formatters are not aligned later on.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/756#discussion_r487358088", "createdAt": "2020-09-12T02:51:26Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/DefaultEventMarshaller.java", "diffHunk": "@@ -28,8 +28,9 @@\n     private static final Logger logger = LoggerFactory.getLogger(DefaultEventMarshaller.class);\n \n     @Override\n-    public <T, P extends AbstractProcessDataEvent<T>> String marshall(T dataEvent, Function<T, P> cloudFunction,\n-            Optional<Boolean> isCloudEvent) {\n+    public <T, P extends AbstractProcessDataEvent<T>> String marshall(T dataEvent,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0OTEyMg=="}, "originalCommit": {"oid": "ce816cdca94d142fd996f63e244e4341a751f6e6"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4760, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}