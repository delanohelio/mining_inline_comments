{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNDgwMzY1", "number": 890, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxNjoxOVrOE-AvPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoxNTo1OVrOFAJAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDU5MjYzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxNjoxOVrOH6_59g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowNDowOVrOH8jyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyNjQ4Ng==", "bodyText": "Why do you need this dependency?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r531626486", "createdAt": "2020-11-27T14:16:19Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-common/pom.xml", "diffHunk": "@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Api</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <artifactId>monitoring-core-common</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>jbpm-flow</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>drools-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>grafana-api</artifactId>\n+    </dependency>\n+    <!-- https://mvnrepository.com/artifact/javax.enterprise/cdi-api -->\n+    <dependency>\n+      <groupId>javax.enterprise</groupId>\n+      <artifactId>cdi-api</artifactId>\n+      <version>2.0.SP1</version>\n+      <scope>provided</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2MjkwMQ==", "bodyText": "Removed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533262901", "createdAt": "2020-12-01T10:04:09Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-common/pom.xml", "diffHunk": "@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Api</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <artifactId>monitoring-core-common</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>jbpm-flow</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>drools-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>grafana-api</artifactId>\n+    </dependency>\n+    <!-- https://mvnrepository.com/artifact/javax.enterprise/cdi-api -->\n+    <dependency>\n+      <groupId>javax.enterprise</groupId>\n+      <artifactId>cdi-api</artifactId>\n+      <version>2.0.SP1</version>\n+      <scope>provided</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyNjQ4Ng=="}, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzM2NjMxOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMToyNjozMFrOH8Of7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowNDozM1rOH8j0IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNDE1OA==", "bodyText": "Can you please use a constant? Please use a shorter property name, I think something like kogito.monitoring.rule.useDefault could be enough. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r532914158", "createdAt": "2020-11-30T21:26:30Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.rule.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2MzM5Mg==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533263392", "createdAt": "2020-12-01T10:04:33Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.rule.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNDE1OA=="}, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQwMTkwOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTozODowM1rOH8O2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowNDoxNFrOH8jylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxOTg3OQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r532919879", "createdAt": "2020-11-30T21:38:03Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.rule.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.process.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2Mjk5OA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533262998", "createdAt": "2020-12-01T10:04:14Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.rule.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.process.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxOTg3OQ=="}, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQwOTU3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0MDozMFrOH8O7FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowNDoyMVrOH8jzFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMTEwOQ==", "bodyText": "Where is it used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r532921109", "createdAt": "2020-11-30T21:40:30Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Springboot</name>\n+  <artifactId>monitoring-core-springboot</artifactId>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${version.springboot}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.annotation</groupId>\n+      <artifactId>javax.annotation-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2MzEyNQ==", "bodyText": "Removed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533263125", "createdAt": "2020-12-01T10:04:21Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Springboot</name>\n+  <artifactId>monitoring-core-springboot</artifactId>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${version.springboot}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.annotation</groupId>\n+      <artifactId>javax.annotation-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMTEwOQ=="}, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ2MTA1OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo1NTo1OFrOH8Palw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDowNDoyN1rOH8jzsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyOTE3NQ==", "bodyText": "Please move rest to platform specific modules: we are reviewing rest dep to use spring/quarkus specific (see #891 ). You can keep here an abstract if needed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r532929175", "createdAt": "2020-11-30T21:55:58Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-common/pom.xml", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-prometheus-addon</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>monitoring-prometheus-common</artifactId>\n+  <name>Kogito :: Add-Ons :: Monitoring Prometheus Common</name>\n+\n+  <description>Prometheus monitoring for a kogito application</description>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>monitoring-core-common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.micrometer</groupId>\n+      <artifactId>micrometer-registry-prometheus</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2MzI4MQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533263281", "createdAt": "2020-12-01T10:04:27Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-common/pom.xml", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-prometheus-addon</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>monitoring-prometheus-common</artifactId>\n+  <name>Kogito :: Add-Ons :: Monitoring Prometheus Common</name>\n+\n+  <description>Prometheus monitoring for a kogito application</description>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>monitoring-core-common</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.micrometer</groupId>\n+      <artifactId>micrometer-registry-prometheus</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyOTE3NQ=="}, "originalCommit": {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk4NzMzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowMjoxMFrOH8nbmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzo0NzoyMlrOH8tR2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMjY1MQ==", "bodyText": "This should not be added here that is a common module but in the platform specific", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533322651", "createdAt": "2020-12-01T11:02:10Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-common/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Api</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxODQ1OA==", "bodyText": "Thanks for the catch!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533418458", "createdAt": "2020-12-01T13:47:22Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-common/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Api</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMjY1MQ=="}, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk5MjExOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowMzozMFrOH8nekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowMzozMFrOH8nekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for process monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for process monitoring.\");", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323411", "createdAt": "2020-12-01T11:03:30Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.springboot;\n+\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ConditionalOnProperty(\n+        value = Constants.MONITORING_PROCESS_USE_DEFAULT,\n+        havingValue = \"true\",\n+        matchIfMissing = true)\n+public class SpringbootProcessEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SpringbootProcessEventListenerFactory.class);\n+\n+    @Bean\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.info(\"Producing default listener for process monitoring.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk5MjY4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootRuleEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowMzo0NFrOH8nfBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowMzo0NFrOH8nfBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzUyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for rule monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for rule monitoring.\");", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323524", "createdAt": "2020-12-01T11:03:44Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootRuleEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.springboot;\n+\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ConditionalOnProperty(\n+        value = Constants.MONITORING_RULE_USE_DEFAULT,\n+        havingValue = \"true\",\n+        matchIfMissing = true)\n+public class SpringbootRuleEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SpringbootRuleEventListenerFactory.class);\n+\n+    @Bean\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk5MzU4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNDowMlrOH8nfpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNDowMlrOH8nfpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzY4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for rule monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for rule monitoring.\");", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323684", "createdAt": "2020-12-01T11:04:02Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk5Mzk3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNDoxMlrOH8nf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNDoxMlrOH8nf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for process monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for process monitoring.\");", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323764", "createdAt": "2020-12-01T11:04:12Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.info(\"Producing default listener for process monitoring.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjAwMDcwOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/pom.xml~HEAD", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNjowNFrOH8nkLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzo0ODoyOFrOH8tU2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNDg0Ng==", "bodyText": "This file is probably the output of a merge conflict addons/monitoring-addon/monitoring-core/pom.xml~HEAD", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533324846", "createdAt": "2020-12-01T11:06:04Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/pom.xml~HEAD", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxOTIyNg==", "bodyText": "wooops! Thanks for the catch!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533419226", "createdAt": "2020-12-01T13:48:28Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/pom.xml~HEAD", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNDg0Ng=="}, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjAwMjA0OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/pom.xml~upstream_master", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNjoyM1rOH8nk7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzo0ODoyM1rOH8tUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNTAzNg==", "bodyText": "This file is probably the output of a merge conflict addons/monitoring-addon/monitoring-core/pom.xml~upstream_master", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533325036", "createdAt": "2020-12-01T11:06:23Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/pom.xml~upstream_master", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxOTE3Mw==", "bodyText": "wooops! Thanks for the catch!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533419173", "createdAt": "2020-12-01T13:48:23Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/pom.xml~upstream_master", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNTAzNg=="}, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjA1NzUzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-quarkus/src/main/resources/META-INF/kogito.addon", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyMTo0NFrOH8oG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyMTo0NFrOH8oG_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzc1Nw==", "bodyText": "I'm not completely sure we need to decouple monitoring and prometheus-monitoring addons but it is probably fine", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533333757", "createdAt": "2020-12-01T11:21:44Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-quarkus/src/main/resources/META-INF/kogito.addon", "diffHunk": "@@ -0,0 +1 @@\n+prometheus-monitoring", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9510e79ee4349476668effe431385fe87e5965b8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjM1NzQ3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozNDo0OFrOH9juRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozNDo0OFrOH9juRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMDQ2OQ==", "bodyText": "I think this is also possible to be put on the bean method, so you could combine it into one class I think.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534310469", "createdAt": "2020-12-02T16:34:48Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.springboot;\n+\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ConditionalOnProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjM3MzYzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozODoxNVrOH9j4NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozODoxNVrOH9j4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMzAxMg==", "bodyText": "Shouldn't just resteasy and monitoring-core-common be enough? As it is not needed for spring boot version.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534313012", "createdAt": "2020-12-02T16:38:15Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>monitoring-core-quarkus</artifactId>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Quarkus</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>monitoring-core-common</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>jbpm-flow</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjUwODM5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzowNjoyOVrOH9lLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzowNjoyOVrOH9lLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNDI3MQ==", "bodyText": "It would be good to put here quarkus-resteasy as well because we use it directly to define the QuarkusMetricsResource. Same thing is done with spring boot prometheus addon. It is always better to declare dependencies which are used and not rely on the transitive ones I think.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534334271", "createdAt": "2020-12-02T17:06:29Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-prometheus-addon/monitoring-prometheus-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-prometheus-addon</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>monitoring-prometheus-quarkus</artifactId>\n+  <name>Kogito :: Add-Ons :: Monitoring Prometheus Quarkus</name>\n+\n+  <description>Prometheus monitoring for Quarkus</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>monitoring-prometheus-common</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>monitoring-core-quarkus</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU0NjM2OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNTowOVrOH9li5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1NjowMVrOH-c1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA==", "bodyText": "Just ony hypothetical question. If I add 2 addons with listeners (for example in future), will I have to solve this wiring myself? As then I need to somehow combine 2 listener configs into one, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534340324", "createdAt": "2020-12-02T17:15:09Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk3MjE2Mg==", "bodyText": "The user can add any number of listeners without any limitation. We also give the possibility to disable this listener using the config property Constants.MONITORING_PROCESS_USE_DEFAULT = false, is this what you mean?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534972162", "createdAt": "2020-12-03T09:04:02Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA1MTc0Mg==", "bodyText": "So in case I need to combine listeners from more than one addon, I set that property to false and add listeners manually, did I get it right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535051742", "createdAt": "2020-12-03T10:13:48Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4MTE5Mg==", "bodyText": "The idea is to let user disable default behavior and provide a different impl. All the listeners in general are wired using CDI and user can already add as many listeners as he wants (without the need to disable the default behavior).\nHere the idea is just to opt-out default metric listeners", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535181192", "createdAt": "2020-12-03T12:18:32Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MTcyNQ==", "bodyText": "I see, so I can add listeners via CDI even if I go for MonitoringProcessEventListenerConfig, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535241725", "createdAt": "2020-12-03T13:49:46Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NjIxNw==", "bodyText": "Yes, all listeners are collected and registered, this is just another one :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535246217", "createdAt": "2020-12-03T13:56:01Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, "originalCommit": {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjkxODE5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoxNTo1OVrOH-RHfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoxOToyOVrOH-RWzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA1NDIwNw==", "bodyText": "I think kogito-api is also not needed here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535054207", "createdAt": "2020-12-03T10:15:59Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>monitoring-core-quarkus</artifactId>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Quarkus</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-api</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76fb931ccc33e75f525cac7cc501a5763546cb18"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA1ODEyNA==", "bodyText": "Sorry, my bad, actually the DefaultProcessEventListenerConfig is coming from the jbpm-flow, so that one should be there, but I would leave it as is now :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535058124", "createdAt": "2020-12-03T10:19:29Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>monitoring-core</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>monitoring-core-quarkus</artifactId>\n+  <name>Kogito :: Add-Ons :: Monitoring Core Quarkus</name>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-api</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA1NDIwNw=="}, "originalCommit": {"oid": "76fb931ccc33e75f525cac7cc501a5763546cb18"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}