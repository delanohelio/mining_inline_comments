{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDk1NzEw", "number": 750, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo0ODozM1rOEhaPcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMjo1N1rOEjF3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDY4NDAxOnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo0ODozM1rOHOtgEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1Mzo0N1rOHO5MAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4NzYwMw==", "bodyText": "I believe there are one more place:\nkogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java:235:        boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");\nDammit we need to refactor this ASAP @evacchi", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r485187603", "createdAt": "2020-09-08T20:48:33Z", "author": {"login": "ricardozanini"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -104,7 +104,7 @@\n     private static final DotName persistenceFactoryClass = DotName.createSimple(\"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n     private static final DotName metricsClass = DotName.createSimple(\"org.kie.kogito.monitoring.rest.MetricsResource\");\n     private static final DotName tracingClass = DotName.createSimple(\"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n-    private static final DotName knativeEventingClass = DotName.createSimple(\"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");\n+    private static final DotName knativeEventingClass = DotName.createSimple(\"org.kie.kogito.events.knative.ce.extensions.KogitoProcessExtension\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3OTA3NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r485379075", "createdAt": "2020-09-09T06:53:47Z", "author": {"login": "ruromero"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -104,7 +104,7 @@\n     private static final DotName persistenceFactoryClass = DotName.createSimple(\"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n     private static final DotName metricsClass = DotName.createSimple(\"org.kie.kogito.monitoring.rest.MetricsResource\");\n     private static final DotName tracingClass = DotName.createSimple(\"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n-    private static final DotName knativeEventingClass = DotName.createSimple(\"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");\n+    private static final DotName knativeEventingClass = DotName.createSimple(\"org.kie.kogito.events.knative.ce.extensions.KogitoProcessExtension\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4NzYwMw=="}, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTg3NTc3OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoyNDo0M1rOHO4Ylw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjo1MDoyNlrOHO5FvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NTkxMQ==", "bodyText": "this is only fixing capitalization, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r485365911", "createdAt": "2020-09-09T06:24:43Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -53,35 +53,35 @@\n                     PROCESS_INSTANCE_STATE, REF_ID));\n \n     private final Map<String, Object> innerValues;\n-    private String kogitoProcessinstanceId;\n-    private String kogitoRootProcessinstanceId;\n+    private String kogitoProcessInstanceId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NzQ2OA==", "bodyText": "yes", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r485377468", "createdAt": "2020-09-09T06:50:26Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -53,35 +53,35 @@\n                     PROCESS_INSTANCE_STATE, REF_ID));\n \n     private final Map<String, Object> innerValues;\n-    private String kogitoProcessinstanceId;\n-    private String kogitoRootProcessinstanceId;\n+    private String kogitoProcessInstanceId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NTkxMQ=="}, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTg3ODMwOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/CloudEventConverterTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjoyNToyNVrOHO4aBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo1MzoxOFrOHQdmvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NjI3OA==", "bodyText": "new String ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r485366278", "createdAt": "2020-09-09T06:25:25Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/CloudEventConverterTest.java", "diffHunk": "@@ -47,14 +48,12 @@ void verifyBasicCloudEventConversion() {\n                         .withData(payload.getBytes())\n                         .build();\n \n-        final String ceJson = CloudEventConverter.toJson(cloudEvent);\n-        assertThat(ceJson).isNotEmpty().contains(\"Oi Mundo!\");\n+        final String ceJson = new String(cloudEvent.getData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3ODU4NQ==", "bodyText": "Yes, the getData() method is a byte[] representing the String", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r485378585", "createdAt": "2020-09-09T06:52:47Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/CloudEventConverterTest.java", "diffHunk": "@@ -47,14 +48,12 @@ void verifyBasicCloudEventConversion() {\n                         .withData(payload.getBytes())\n                         .build();\n \n-        final String ceJson = CloudEventConverter.toJson(cloudEvent);\n-        assertThat(ceJson).isNotEmpty().contains(\"Oi Mundo!\");\n+        final String ceJson = new String(cloudEvent.getData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NjI3OA=="}, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMzU1Mg==", "bodyText": "oh ok. you may want to pass in a charset encoding then", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r486813552", "createdAt": "2020-09-11T06:59:29Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/CloudEventConverterTest.java", "diffHunk": "@@ -47,14 +48,12 @@ void verifyBasicCloudEventConversion() {\n                         .withData(payload.getBytes())\n                         .build();\n \n-        final String ceJson = CloudEventConverter.toJson(cloudEvent);\n-        assertThat(ceJson).isNotEmpty().contains(\"Oi Mundo!\");\n+        final String ceJson = new String(cloudEvent.getData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NjI3OA=="}, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDMxOQ==", "bodyText": "Actually this doesn't test anything. I have replaced it by a simple Json object", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487024319", "createdAt": "2020-09-11T12:53:18Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/CloudEventConverterTest.java", "diffHunk": "@@ -47,14 +48,12 @@ void verifyBasicCloudEventConversion() {\n                         .withData(payload.getBytes())\n                         .build();\n \n-        final String ceJson = CloudEventConverter.toJson(cloudEvent);\n-        assertThat(ceJson).isNotEmpty().contains(\"Oi Mundo!\");\n+        final String ceJson = new String(cloudEvent.getData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NjI3OA=="}, "originalCommit": {"oid": "5383338bebcb72ef140e6b3fa85b401e76980a1d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM3NDk0OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/resources/META-INF/services/javax.ws.rs.ext.Providers", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjozMzowN1rOHQc8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoyMDo0NFrOHRTb_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMzU2Nw==", "bodyText": "Can you please verify if this code works in native mode? As far as I remember this resource should be added to resources-config.json or similar to have it at runtime (also CloudEventsProvider could have similar problem to prevent class removal)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487013567", "createdAt": "2020-09-11T12:33:07Z", "author": {"login": "danielezonca"}, "path": "addons/events/knative-eventing-addon/src/main/resources/META-INF/services/javax.ws.rs.ext.Providers", "diffHunk": "@@ -0,0 +1 @@\n+io.cloudevents.http.restful.ws.CloudEventsProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b506a42b907d5e9b48aff1c29bf09434f8d5b40"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNjMwMA==", "bodyText": "Yes, this code works in native mode. Actually it will allow any other library using the addon to have the CloudEventsProvider injected without any additional configuration.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487906300", "createdAt": "2020-09-14T13:20:44Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/main/resources/META-INF/services/javax.ws.rs.ext.Providers", "diffHunk": "@@ -0,0 +1 @@\n+io.cloudevents.http.restful.ws.CloudEventsProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMzU2Nw=="}, "originalCommit": {"oid": "6b506a42b907d5e9b48aff1c29bf09434f8d5b40"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMwNDQ4OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTo1ODo1N1rOHRQXTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDoyMDo1OFrOHR7AaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTk0OQ==", "bodyText": "Can you please verify if this is needed? Do we use jandex in the tests (and only in the tests)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487855949", "createdAt": "2020-09-14T11:58:57Z", "author": {"login": "danielezonca"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -1 +1,4 @@\n-quarkus.log.level=INFO\n\\ No newline at end of file\n+quarkus.log.level=INFO\n+\n+quarkus.index-dependency.cloudevents.group-id=io.cloudevents\n+quarkus.index-dependency.cloudevents.artifact-id=cloudevents-http-restful-ws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNTU2MQ==", "bodyText": "No, it's not needed. With the service file it's enough to have the provider injected and available in other projects depending on this addon", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487905561", "createdAt": "2020-09-14T13:19:45Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -1 +1,4 @@\n-quarkus.log.level=INFO\n\\ No newline at end of file\n+quarkus.log.level=INFO\n+\n+quarkus.index-dependency.cloudevents.group-id=io.cloudevents\n+quarkus.index-dependency.cloudevents.artifact-id=cloudevents-http-restful-ws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTk0OQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMzQ0Nw==", "bodyText": "Ok so it is not clear to me why you had to add this configuration only for the test. Shouldn't be possible to use service mechanism here too?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487933447", "createdAt": "2020-09-14T13:49:25Z", "author": {"login": "danielezonca"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -1 +1,4 @@\n-quarkus.log.level=INFO\n\\ No newline at end of file\n+quarkus.log.level=INFO\n+\n+quarkus.index-dependency.cloudevents.group-id=io.cloudevents\n+quarkus.index-dependency.cloudevents.artifact-id=cloudevents-http-restful-ws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTk0OQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwNjcyNA==", "bodyText": "Yes, I deleted it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r488006724", "createdAt": "2020-09-14T15:07:05Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -1 +1,4 @@\n-quarkus.log.level=INFO\n\\ No newline at end of file\n+quarkus.log.level=INFO\n+\n+quarkus.index-dependency.cloudevents.group-id=io.cloudevents\n+quarkus.index-dependency.cloudevents.artifact-id=cloudevents-http-restful-ws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTk0OQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU1NDYwMQ==", "bodyText": "I temporarily added it back and can be removed in cloudevents-2.0.0-milestone3\nsee cloudevents/sdk-java#233", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r488554601", "createdAt": "2020-09-15T10:20:58Z", "author": {"login": "ruromero"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -1 +1,4 @@\n-quarkus.log.level=INFO\n\\ No newline at end of file\n+quarkus.log.level=INFO\n+\n+quarkus.index-dependency.cloudevents.group-id=io.cloudevents\n+quarkus.index-dependency.cloudevents.artifact-id=cloudevents-http-restful-ws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NTk0OQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMxMDc4OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMDo0M1rOHRQbCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjo1NDoxNlrOHUAXHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ==", "bodyText": "I don't think we should \"hide\" a serialization exception in an empty result. What about propagate the exception?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487856905", "createdAt": "2020-09-14T12:00:43Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3Mzk1NQ==", "bodyText": "Propagate the exception up to where? I need advise here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487873955", "createdAt": "2020-09-14T12:31:04Z", "author": {"login": "ruromero"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMTczNQ==", "bodyText": "@kostola\nCan you please support? What if an event is impossible to be serialized? (same question for comment below)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487931735", "createdAt": "2020-09-14T13:47:45Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NDE2Ng==", "bodyText": "With the previous API the data field was typed, so there's no particular error handling for serialization errors.\nImho sending a CloudEvent with null data, as I see here, is not very useful. I would avoid that.\nI would rather log a more detailed error (possibly with the payload that triggered the error somehow) so that in a production environment it's possible to investigate by grabbing the logs of the services.\nWdyt @danielezonca @ruromero ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r489464166", "createdAt": "2020-09-16T14:04:58Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0MTg2Mw==", "bodyText": "Fine for me a more detailed log but what else? Error propagation until where?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r489741863", "createdAt": "2020-09-16T20:41:47Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzNjkwMg==", "bodyText": "I would catch the exception, log the message without sending a CloudEvent with null data and then that's it in the code. It seems to me a very rare error but correct me if I'm wrong.\nThen the best way imho to catch those errors in a prod environment would be to setup a log management system (e.g. Graylog) that ingests all the logs and allows custom triggers on specific messages to be configured.\nDoes this seem reasonable to you?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r490036902", "createdAt": "2020-09-17T07:42:34Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTIwOA==", "bodyText": "Probably the best solution for this method would be to return a Optional<CloudEvent> and let the caller decide how to handle the serialization failure with something like ifPresentOrElse (which in my case would be to simply log the error without sending anything as I wrote above).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r490089208", "createdAt": "2020-09-17T09:06:14Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MDM5Nw==", "bodyText": "@ruromero\nCan you please verify if the proposed approach can be implemented? Return Optional and log error in caller if empty", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r490090397", "createdAt": "2020-09-17T09:08:11Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczOTQ4Ng==", "bodyText": "@kostola logging the payload won't be of much help as it is an array of bytes representing anything (a Json object, a String, a serialized object in any language, etc.). In this case we expect an object of type E but if decoding failed you don't know how to represent the data content.\nI think the log is fine as it is. It's an error saying the CloudEvent data cannot be deserialized with the stacktrace.\nRegarding the Optional propagation. There are 2 chains of invocations:\n\nBaseModelEventEmitter#publishDecisionModels. In this case it's simple, we decide whether to emit the event or not.\nDefaultAggregator#aggregate: There are 2 invocations and for these cases the event is always created right before the invocation so it doesn't make sense to expect an error. If for some reason such error occurs I will throw an unchecked exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r490739486", "createdAt": "2020-09-18T06:54:16Z", "author": {"login": "ruromero"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NjkwNQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMxMjcxOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMToxOFrOHRQcTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMzowMlrOHRRiXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NzIzMQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487857231", "createdAt": "2020-09-14T12:01:18Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();\n     }\n \n-    public static <E> String encode(CloudEventImpl<E> event) {\n-        return Json.encode(event);\n+    public static String encode(CloudEvent event) {\n+        try {\n+            return OBJECT_MAPPER.writeValueAsString(event);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to encode CloudEvent\", e);\n+            return null;\n+        }\n     }\n \n-    public static <E> CloudEventImpl<E> decode(String json, TypeReference<CloudEventImpl<E>> ref) {\n-        return Json.decodeValue(json, ref);\n+    public static CloudEvent decode(String json) {\n+        try {\n+            return OBJECT_MAPPER.readValue(json, CloudEvent.class);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to decode CloudEvent\", e);\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTE2NA==", "bodyText": "I tried to propagate it but I didn't know up to where or where to really deal with it. Any advise?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487875164", "createdAt": "2020-09-14T12:33:02Z", "author": {"login": "ruromero"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/CloudEventUtils.java", "diffHunk": "@@ -21,31 +21,53 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import io.cloudevents.json.Json;\n-import io.cloudevents.v1.CloudEventBuilder;\n-import io.cloudevents.v1.CloudEventImpl;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.builder.CloudEventBuilder;\n+import io.cloudevents.jackson.JsonFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class CloudEventUtils {\n \n-    public static <E> CloudEventImpl<E> build(String id,\n-                                              URI source,\n-                                              E data,\n-                                              Class<E> dataType) {\n-        return CloudEventBuilder.<E>builder()\n+    private static final Logger LOG = LoggerFactory.getLogger(CloudEventUtils.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    public static <E> CloudEvent build(String id,\n+                                       URI source,\n+                                       E data,\n+                                       Class<E> dataType) {\n+        byte[] bytes = null;\n+        try {\n+            bytes = OBJECT_MAPPER.writeValueAsBytes(data);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to serialize CloudEvent data\", e);\n+        }\n+        return CloudEventBuilder.v1()\n                 .withType(dataType.getName())\n                 .withId(id)\n                 .withSource(source)\n-                .withData(data)\n+                .withData(bytes)\n                 .build();\n     }\n \n-    public static <E> String encode(CloudEventImpl<E> event) {\n-        return Json.encode(event);\n+    public static String encode(CloudEvent event) {\n+        try {\n+            return OBJECT_MAPPER.writeValueAsString(event);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to encode CloudEvent\", e);\n+            return null;\n+        }\n     }\n \n-    public static <E> CloudEventImpl<E> decode(String json, TypeReference<CloudEventImpl<E>> ref) {\n-        return Json.decodeValue(json, ref);\n+    public static CloudEvent decode(String json) {\n+        try {\n+            return OBJECT_MAPPER.readValue(json, CloudEvent.class);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"Unable to decode CloudEvent\", e);\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1NzIzMQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjMxODE1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjowMjo1N1rOHRQfmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNjo1MlrOHRTRpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1ODA3NQ==", "bodyText": "What is this module used for?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487858075", "createdAt": "2020-09-14T12:02:57Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/pom.xml", "diffHunk": "@@ -43,6 +43,16 @@\n       <artifactId>mockito-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.datatype</groupId>\n+      <artifactId>jackson-datatype-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzY1NQ==", "bodyText": "It's not needed. I added it by mistake. Thanks", "url": "https://github.com/kiegroup/kogito-runtimes/pull/750#discussion_r487903655", "createdAt": "2020-09-14T13:16:52Z", "author": {"login": "ruromero"}, "path": "addons/tracing/tracing-decision-common/pom.xml", "diffHunk": "@@ -43,6 +43,16 @@\n       <artifactId>mockito-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.datatype</groupId>\n+      <artifactId>jackson-datatype-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1ODA3NQ=="}, "originalCommit": {"oid": "f1c512f41b7f0d76e582295dd02b512952b5fe90"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4758, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}