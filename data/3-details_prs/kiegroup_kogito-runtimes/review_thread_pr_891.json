{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNTMyNzI3", "number": 891, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1NDoxN1rOE5f2iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMDo0MlrOFAVViQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzI2MTU1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1NDoxN1rOHz_tUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxMDoxN1rOH05h2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA==", "bodyText": "why this modification is needed, resulting in a non-encoded String? (was: %20 proposed:  )", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r524283218", "createdAt": "2020-11-16T13:54:17Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -79,16 +84,18 @@ public DecisionRestResourceGenerator(DMNModel model, String appCanonicalName) {\n         this.packageName = CodegenStringUtil.escapeIdentifier(model.getNamespace());\n         this.decisionId = model.getDefinitions().getId();\n         this.decisionName = CodegenStringUtil.escapeIdentifier(model.getName());\n-        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \"%20\");\n+        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NDMyMg==", "bodyText": "@tarilabs I didn't spend to much time, but the issue after migrating to spring web apis, the tests were returning 404, I don't know if spring already applies the encoding to the string on the path...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r525174322", "createdAt": "2020-11-17T13:58:26Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -79,16 +84,18 @@ public DecisionRestResourceGenerator(DMNModel model, String appCanonicalName) {\n         this.packageName = CodegenStringUtil.escapeIdentifier(model.getNamespace());\n         this.decisionId = model.getDefinitions().getId();\n         this.decisionName = CodegenStringUtil.escapeIdentifier(model.getName());\n-        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \"%20\");\n+        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \" \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA=="}, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMDU1Mg==", "bodyText": "understood, but can you file a JIRA for this issue, please?\nIt seems a difference between JAX-RS and <whatever SB uses>", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r525230552", "createdAt": "2020-11-17T15:10:17Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -79,16 +84,18 @@ public DecisionRestResourceGenerator(DMNModel model, String appCanonicalName) {\n         this.packageName = CodegenStringUtil.escapeIdentifier(model.getNamespace());\n         this.decisionId = model.getDefinitions().getId();\n         this.decisionName = CodegenStringUtil.escapeIdentifier(model.getName());\n-        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \"%20\");\n+        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \" \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA=="}, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzI2NTA2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/DecisionRestResourceTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1NTowNVrOHz_vag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDowNjo1M1rOH02eJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4Mzc1NA==", "bodyText": "what would be the valorization for \"whole-model\", please?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r524283754", "createdAt": "2020-11-16T13:55:05Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/resources/class-templates/DecisionRestResourceTemplate.java", "diffHunk": "@@ -25,6 +25,7 @@\n     private org.jboss.resteasy.spi.HttpResponse httpResponse;\n \n     @POST\n+    @Path(\"/$dmnMethodUrl$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4MDQ1Mw==", "bodyText": "I added the path annotation in the template and handled it to be replaced by proper values into the DecisionRestResourceGenerator, https://github.com/tiagodolphine/kogito-runtimes/blob/93bfcb24f99b85a6080efbea3300b476cf32d936/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java before the annotation was being inserted programmatically and hard-coded with @Path but this changes in case we use Spring API (https://github.com/tiagodolphine/kogito-runtimes/blob/0ae1643808a1fd7175606cd8b8f26a3bc043f1f6/kogito-codegen/src/main/resources/class-templates/spring/SpringDecisionRestResourceTemplate.java#L37), so what I did is basically to replace the value on the path annotation to the same values that were added programmatically before... In the end, the generated code for the class should be the same.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r525180453", "createdAt": "2020-11-17T14:06:53Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/DecisionRestResourceTemplate.java", "diffHunk": "@@ -25,6 +25,7 @@\n     private org.jboss.resteasy.spi.HttpResponse httpResponse;\n \n     @POST\n+    @Path(\"/$dmnMethodUrl$\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4Mzc1NA=="}, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTYwNjcwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/events/SpringTopicsInformationResourceTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMDozOToxNFrOH7JTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMDozOToxNFrOH7JTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4MDUxNw==", "bodyText": "Thanks! \u2764\ufe0f", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r531780517", "createdAt": "2020-11-27T20:39:14Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/resources/class-templates/events/SpringTopicsInformationResourceTemplate.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.kie.kogito.app;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.kogito.event.Topic;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.http.ResponseEntity;\n+\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@RestController\n+@RequestMapping(\"/messaging/topics\")\n+public class TopicsInformationResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ4NTY0OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowMzo0MVrOH8PpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowMzo0MVrOH8PpsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMzA0MA==", "bodyText": "Unused", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r532933040", "createdAt": "2020-11-30T22:03:41Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java", "diffHunk": "@@ -27,16 +27,15 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.springframework.beans.factory.annotation.Value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzUyMDIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjoxNDozN1rOH8P-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjoxNDozN1rOH8P-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzODM1Ng==", "bodyText": "Unused?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r532938356", "createdAt": "2020-11-30T22:14:37Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -44,10 +44,13 @@\n import com.github.javaparser.ast.type.Type;\n import org.drools.compiler.compiler.DroolsError;\n import org.drools.modelcompiler.builder.QueryModel;\n+import org.kie.api.definition.rule.Query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkzNDg2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowOTo1OFrOH-kcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozNjoxOVrOH-xOcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDg1Ng==", "bodyText": "I think we should leave the checkError() call here to notify about possible issues with start of the task.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535370856", "createdAt": "2020-12-03T16:09:58Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MDI3NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535580274", "createdAt": "2020-12-03T20:36:19Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDg1Ng=="}, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkzNjYyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMDoxNlrOH-kddA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozNjoxNVrOH-xOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTEyNA==", "bodyText": "Same here, checkError() is missing.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535371124", "createdAt": "2020-12-03T16:10:16Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());\n                         }\n                         return new ResponseEntity<$Type$Output>(HttpStatus.NOT_FOUND);\n                     })\n                     .orElseGet(() -> ResponseEntity.notFound().build()));\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+            consumes = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> completeTask(@PathVariable(\"id\") final String id,\n-                                     @PathVariable(\"workItemId\") final String workItemId,\n-                                     @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n-                                     @RequestParam(value = \"user\", required = false) final String user,\n-                                     @RequestParam(value = \"group\", required = false) final List<String> groups,\n-                                     @RequestBody final $TaskOutput$ model) {\n+                                                     @PathVariable(\"workItemId\") final String workItemId,\n+                                                     @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                             \"complete\") final String phase,\n+                                                     @RequestParam(value = \"user\", required = false) final String user,\n+                                                     @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups,\n+                                                     @RequestBody(required = false) final $TaskOutput$ model) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withModel(phase, model, Policies.of(user,\n+                                                                                                            groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MDE5Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535580197", "createdAt": "2020-12-03T20:36:15Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());\n                         }\n                         return new ResponseEntity<$Type$Output>(HttpStatus.NOT_FOUND);\n                     })\n                     .orElseGet(() -> ResponseEntity.notFound().build()));\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+            consumes = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> completeTask(@PathVariable(\"id\") final String id,\n-                                     @PathVariable(\"workItemId\") final String workItemId,\n-                                     @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n-                                     @RequestParam(value = \"user\", required = false) final String user,\n-                                     @RequestParam(value = \"group\", required = false) final List<String> groups,\n-                                     @RequestBody final $TaskOutput$ model) {\n+                                                     @PathVariable(\"workItemId\") final String workItemId,\n+                                                     @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                             \"complete\") final String phase,\n+                                                     @RequestParam(value = \"user\", required = false) final String user,\n+                                                     @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups,\n+                                                     @RequestBody(required = false) final $TaskOutput$ model) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withModel(phase, model, Policies.of(user,\n+                                                                                                            groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTEyNA=="}, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODkzODk3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMDo0MlrOH-ke1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozNjowN1rOH-xNqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTQ3Ng==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535371476", "createdAt": "2020-12-03T16:10:42Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -105,23 +109,24 @@\n \n     @DeleteMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> abortTask(@PathVariable(\"id\") final String id,\n-                                  @PathVariable(\"workItemId\") final String workItemId,\n-                                  @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n-                                  @RequestParam(value = \"user\", required = false) final String user,\n-                                  @RequestParam(value = \"group\", required = false) final List<String> groups) {\n+                                                  @PathVariable(\"workItemId\") final String workItemId,\n+                                                  @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                          \"abort\") final String phase,\n+                                                  @RequestParam(value = \"user\", required = false) final String user,\n+                                                  @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        return ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MDA3Mw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535580073", "createdAt": "2020-12-03T20:36:07Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -105,23 +109,24 @@\n \n     @DeleteMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> abortTask(@PathVariable(\"id\") final String id,\n-                                  @PathVariable(\"workItemId\") final String workItemId,\n-                                  @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n-                                  @RequestParam(value = \"user\", required = false) final String user,\n-                                  @RequestParam(value = \"group\", required = false) final List<String> groups) {\n+                                                  @PathVariable(\"workItemId\") final String workItemId,\n+                                                  @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                          \"abort\") final String phase,\n+                                                  @RequestParam(value = \"user\", required = false) final String user,\n+                                                  @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        return ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTQ3Ng=="}, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}