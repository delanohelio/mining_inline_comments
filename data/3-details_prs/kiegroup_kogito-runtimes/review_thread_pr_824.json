{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzU1NTk0", "number": 824, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxNDo0NFrOEv6pCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowMVrOEx9kgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njc5MzA1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxNDo0NFrOHlK9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0OToxMFrOHljn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczODg5NA==", "bodyText": "can we skip the .getMetaData(HIDDEN)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508738894", "createdAt": "2020-10-20T18:14:44Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "diffHunk": "@@ -255,14 +261,25 @@ private void visitInterfaces(org.kie.api.definition.process.Node[] nodes, BlockS\n     }\n \n     private void visitConnection(Connection connection, BlockStmt body) {\n-        // if the connection is a hidden one (compensations), don't dump\n-        Object hidden = ((ConnectionImpl) connection).getMetaData(HIDDEN);\n-        if (hidden != null && ((Boolean) hidden)) {\n-            return;\n+        String method = METHOD_CONNECTION;\n+        Object association = ((ConnectionImpl) connection).getMetaData(ASSOCIATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MzAzNA==", "bodyText": "Actually it's the same, an association is a hidden connection so both statements are always true but to me it makes more sense to use association than hidden connection. But in this case we're adding an association-type connection in the code generation.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r509143034", "createdAt": "2020-10-21T09:49:10Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "diffHunk": "@@ -255,14 +261,25 @@ private void visitInterfaces(org.kie.api.definition.process.Node[] nodes, BlockS\n     }\n \n     private void visitConnection(Connection connection, BlockStmt body) {\n-        // if the connection is a hidden one (compensations), don't dump\n-        Object hidden = ((ConnectionImpl) connection).getMetaData(HIDDEN);\n-        if (hidden != null && ((Boolean) hidden)) {\n-            return;\n+        String method = METHOD_CONNECTION;\n+        Object association = ((ConnectionImpl) connection).getMetaData(ASSOCIATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczODg5NA=="}, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzAwNTg3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/resources/logback-test.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTowNjo1NFrOHlNBfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0MDo0MFrOHljSYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjczMg==", "bodyText": "should it be changed to debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508772732", "createdAt": "2020-10-20T19:06:54Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/test/resources/logback-test.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n   <!--  <logger name=\"org.kie.kogito.codegen\" level=\"debug\"/>-->\n \n-  <root level=\"info\">\n+  <root level=\"debug\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk0MTU0MQ==", "bodyText": "+1 to revert", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508941541", "createdAt": "2020-10-21T01:52:41Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/resources/logback-test.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n   <!--  <logger name=\"org.kie.kogito.codegen\" level=\"debug\"/>-->\n \n-  <root level=\"info\">\n+  <root level=\"debug\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjczMg=="}, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNzUwNQ==", "bodyText": "oh, yes, thanks for noticing", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r509137505", "createdAt": "2020-10-21T09:40:40Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/resources/logback-test.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n   <!--  <logger name=\"org.kie.kogito.codegen\" level=\"debug\"/>-->\n \n-  <root level=\"info\">\n+  <root level=\"debug\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjczMg=="}, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzA1MTU1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/CompensationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToyMDoxOVrOHlNd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToyMDoxOVrOHlNd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3OTk4NA==", "bodyText": "why not adding this test under https://github.com/kiegroup/kogito-runtimes/tree/3e7f93289ccce36edd457dd535b87fe263b59bdb/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508779984", "createdAt": "2020-10-20T19:20:19Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/CompensationTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.kie.kogito.process.impl.ProcessTestUtils.assertState;\n+\n+class CompensationTest extends AbstractCodegenTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDY2Njc3OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1MDozNlrOHnROdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDowMjoxNVrOHoIYWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzODc0Mw==", "bodyText": "I think this warning also says that we are overriding the isForCompensation to true if it was false. Which is not what we are doing, right? In case it is false (not null), we don't change it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510938743", "createdAt": "2020-10-23T14:50:36Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzM1Mg==", "bodyText": "Yes it defaults to true when the type is \"Compensation\" and \"isForCompensation\" is missing.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511493352", "createdAt": "2020-10-24T17:11:09Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzODc0Mw=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5NDk2Nw==", "bodyText": "So in that case shouldn't we change the message and remove or false from it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511794967", "createdAt": "2020-10-26T08:43:31Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzODc0Mw=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MjM5NQ==", "bodyText": "Yes, good point", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511842395", "createdAt": "2020-10-26T10:02:15Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzODc0Mw=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDczOTA5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowNzoyNFrOHnR68A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MjozNVrOHoVw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDEyOA==", "bodyText": "AFAIK according to specs only completed activities (nodes) or subprocesses can be compensated. When we have a dynamic process (case), then it is still not finished, so why do we allow compensation at the process level? Just because we want to have this flexibility and because it is technically possible? Then I think also compensate event subprocess in \"normal\" process at process-level is possible - we can just run it when the compensate event is thrown, the compensate event subprocess is started and it can for example throw various compensate events for more nodes on the process level. So I think this really comes down to if we want to run compensate event subprocess even though the enclosing process is not yet finished... What do you think?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510950128", "createdAt": "2020-10-23T15:07:24Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");\n-                                            } \n-                                            if( subProcess instanceof RuleFlowProcess ) { \n-                                                // If jBPM deletes the process (instance) as soon as the process completes.. \n-                                                // ..how do you expect to signal compensation on the completed process (instance)?!?\n-                                                throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");\n                                             }\n-                                            parentSubProcess = ((Node) subProcess).getParentContainer();\n-\n+                                            String compensationHandlerId = \"\";\n+                                            if( subProcess instanceof RuleFlowProcess) {\n+                                                if(!process.isDynamic()) {\n+                                                    // If jBPM deletes the process (instance) as soon as the process completes..\n+                                                    // ..how do you expect to signal compensation on the completed process (instance)?!?\n+                                                    throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDUxMQ==", "bodyText": "A dynamic process is not finished when one end node is reached. A dynamic process is only completed when the terminate end node is done.\nRegarding whether subprocesses could be compensated within a non-dynamic process. I prefer @cristianonicolai to answer that.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511494511", "createdAt": "2020-10-24T17:24:23Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");\n-                                            } \n-                                            if( subProcess instanceof RuleFlowProcess ) { \n-                                                // If jBPM deletes the process (instance) as soon as the process completes.. \n-                                                // ..how do you expect to signal compensation on the completed process (instance)?!?\n-                                                throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");\n                                             }\n-                                            parentSubProcess = ((Node) subProcess).getParentContainer();\n-\n+                                            String compensationHandlerId = \"\";\n+                                            if( subProcess instanceof RuleFlowProcess) {\n+                                                if(!process.isDynamic()) {\n+                                                    // If jBPM deletes the process (instance) as soon as the process completes..\n+                                                    // ..how do you expect to signal compensation on the completed process (instance)?!?\n+                                                    throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDEyOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MTA1OQ==", "bodyText": "My point was that if we even can compensate unfinished process instance as a whole (no matter if it is dynamic or nor). As based on the spec I think only completed actions can be compensated and this part compensates a dynamic process which is not completed yet, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511791059", "createdAt": "2020-10-26T08:36:31Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");\n-                                            } \n-                                            if( subProcess instanceof RuleFlowProcess ) { \n-                                                // If jBPM deletes the process (instance) as soon as the process completes.. \n-                                                // ..how do you expect to signal compensation on the completed process (instance)?!?\n-                                                throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");\n                                             }\n-                                            parentSubProcess = ((Node) subProcess).getParentContainer();\n-\n+                                            String compensationHandlerId = \"\";\n+                                            if( subProcess instanceof RuleFlowProcess) {\n+                                                if(!process.isDynamic()) {\n+                                                    // If jBPM deletes the process (instance) as soon as the process completes..\n+                                                    // ..how do you expect to signal compensation on the completed process (instance)?!?\n+                                                    throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDEyOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMTEwNA==", "bodyText": "looking at the code, it seems this specific use case, is related to Compensation Event Sub-Process (where we can execute a sub-process to compensate a parent sub-process), not other kinds of sub-processes in general. And at least looking at the spec it seems the Compensation Event Sub-Proces should be inside a parent sub-process not on the root let's say. So, I'm not sure if we should check the process isDynamic, I mean I don't think if it makes sense for this specific case. WDYT?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511931104", "createdAt": "2020-10-26T12:44:19Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");\n-                                            } \n-                                            if( subProcess instanceof RuleFlowProcess ) { \n-                                                // If jBPM deletes the process (instance) as soon as the process completes.. \n-                                                // ..how do you expect to signal compensation on the completed process (instance)?!?\n-                                                throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");\n                                             }\n-                                            parentSubProcess = ((Node) subProcess).getParentContainer();\n-\n+                                            String compensationHandlerId = \"\";\n+                                            if( subProcess instanceof RuleFlowProcess) {\n+                                                if(!process.isDynamic()) {\n+                                                    // If jBPM deletes the process (instance) as soon as the process completes..\n+                                                    // ..how do you expect to signal compensation on the completed process (instance)?!?\n+                                                    throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDEyOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MTY3NA==", "bodyText": "Yep, that was my point I tried to make \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r512061674", "createdAt": "2020-10-26T15:42:35Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");\n-                                            } \n-                                            if( subProcess instanceof RuleFlowProcess ) { \n-                                                // If jBPM deletes the process (instance) as soon as the process completes.. \n-                                                // ..how do you expect to signal compensation on the completed process (instance)?!?\n-                                                throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");\n                                             }\n-                                            parentSubProcess = ((Node) subProcess).getParentContainer();\n-\n+                                            String compensationHandlerId = \"\";\n+                                            if( subProcess instanceof RuleFlowProcess) {\n+                                                if(!process.isDynamic()) {\n+                                                    // If jBPM deletes the process (instance) as soon as the process completes..\n+                                                    // ..how do you expect to signal compensation on the completed process (instance)?!?\n+                                                    throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDEyOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDc3NjA2OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToxNjozMVrOHnSRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODo1NzowM1rOHoF9PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTk1NQ==", "bodyText": "I know it's unrelated, just noticed this here. This is removed just so we don't process the same node twice?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510955955", "createdAt": "2020-10-23T15:16:31Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -973,14 +980,14 @@ protected void handleIntermediateOrEndThrowCompensationEvent(ExtendedNodeImpl th\n         if( throwEventNode.getMetaData(\"compensation-activityRef\") != null ) { \n             String activityRef = (String) throwEventNode.getMetaData().remove(\"compensation-activityRef\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDA1NQ==", "bodyText": "If I understood the code correctly, this is added to the node's metadata when processing the compensateEventDefinition during the xml parsing in order to be able to set up the compensation event later on.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511494055", "createdAt": "2020-10-24T17:19:02Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -973,14 +980,14 @@ protected void handleIntermediateOrEndThrowCompensationEvent(ExtendedNodeImpl th\n         if( throwEventNode.getMetaData(\"compensation-activityRef\") != null ) { \n             String activityRef = (String) throwEventNode.getMetaData().remove(\"compensation-activityRef\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTk1NQ=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MTc2MA==", "bodyText": "OK, so then it is not needed anymore and removed basically?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511791760", "createdAt": "2020-10-26T08:37:48Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -973,14 +980,14 @@ protected void handleIntermediateOrEndThrowCompensationEvent(ExtendedNodeImpl th\n         if( throwEventNode.getMetaData(\"compensation-activityRef\") != null ) { \n             String activityRef = (String) throwEventNode.getMetaData().remove(\"compensation-activityRef\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTk1NQ=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwMjY4NA==", "bodyText": "It is needed for code generation as an intermediate step", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511802684", "createdAt": "2020-10-26T08:57:03Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -973,14 +980,14 @@ protected void handleIntermediateOrEndThrowCompensationEvent(ExtendedNodeImpl th\n         if( throwEventNode.getMetaData(\"compensation-activityRef\") != null ) { \n             String activityRef = (String) throwEventNode.getMetaData().remove(\"compensation-activityRef\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTk1NQ=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDg1NzAxOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozNDowNVrOHnTEVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNDozNVrOHoG84g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2ODkxOA==", "bodyText": "Can it happen that triggers are not empty but nodeMetaData.get(TRIGGER_TYPE) returns null?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510968918", "createdAt": "2020-10-23T15:34:05Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,26 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NDIwOA==", "bodyText": "If so, the buildTriggerMetadata function will return null and the trigger will not be added.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511494208", "createdAt": "2020-10-24T17:20:48Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,26 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2ODkxOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc5MzgzNQ==", "bodyText": "The question was more about if the check on the line 77 is even needed as we know triggers on the node are not empty :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511793835", "createdAt": "2020-10-26T08:41:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,26 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2ODkxOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxODk3OA==", "bodyText": "Maybe not. I can remove the check.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r511818978", "createdAt": "2020-10-26T09:24:35Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,26 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2ODkxOA=="}, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODI0NDQ4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowMVrOHoVsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowMVrOHoVsSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDQ5MQ==", "bodyText": "Hmm, now the triggerMetaData is always not null, so we can get rid of this check :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r512060491", "createdAt": "2020-10-26T15:41:01Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,23 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);\n+            if (triggerMetaData != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347aed09b75baf990f61bc34ba3926a963ab0998"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4847, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}