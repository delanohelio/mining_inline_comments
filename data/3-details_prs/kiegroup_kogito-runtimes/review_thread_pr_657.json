{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzEyNzY1", "number": 657, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo1Njo0NFrOETsLwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjowNDo1NlrOEUCH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDgyMzA2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo1Njo0NFrOG5kMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1MjowNVrOG5rkzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNDkxNA==", "bodyText": "What about document this feature in the README somewhere else?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463014914", "createdAt": "2020-07-30T13:56:44Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,72 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n+    /**\n+     * @deprecated used only in tests?\n+     */\n+    @Deprecated\n     public void addFactoryMethods(Collection<MethodDeclaration> decls) {\n         factoryMethods.addAll(decls);\n     }\n \n     CompilationUnit compilationUnit() {\n         CompilationUnit compilationUnit =\n-                parse(this.getClass().getResourceAsStream(RESOURCE))\n-                        .setPackageDeclaration(packageName);\n+                templatedGenerator.compilationUnit()\n+                        .orElseThrow(() -> new IllegalArgumentException(\"Cannot find template for \" + APPLICATION_CLASS_NAME));\n \n         ClassOrInterfaceDeclaration cls = compilationUnit\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        VariableDeclarator eventPublishersDeclarator;\n-        FieldDeclaration eventPublishersFieldDeclaration = new FieldDeclaration();\n-\n-        FieldDeclaration kogitoServiceField = new FieldDeclaration().addVariable(new VariableDeclarator()\n-                                                                                .setType(new ClassOrInterfaceType(null, new SimpleName(Optional.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, String.class.getCanonicalName()))))\n-                                                                                .setName(\"kogitoService\"));\n-\n-        cls.addMember(eventPublishersFieldDeclaration);\n-        cls.addMember(kogitoServiceField);\n-        if (useInjection()) {\n-            annotator.withSingletonComponent(cls);\n-\n-            cls.findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\")).\n-            orElseThrow(() -> new RuntimeException(\"setup method template not found\"))\n-            .addAnnotation(\"javax.annotation.PostConstruct\");\n-\n-            annotator.withOptionalInjection(eventPublishersFieldDeclaration);\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(annotator.multiInstanceInjectionType()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-\n-            annotator.withConfigInjection(kogitoServiceField, \"kogito.service.url\");\n-        } else {\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(List.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-            kogitoServiceField.getVariable(0).setInitializer(new MethodCallExpr(new NameExpr(Optional.class.getCanonicalName()), \"empty\"));\n-        }\n+        factoryMethods.forEach(cls::addMember);\n \n-        eventPublishersFieldDeclaration.addVariable(eventPublishersDeclarator);\n-\n-        FieldDeclaration configField = null;\n-        if (useInjection()) {\n-            configField = new FieldDeclaration()\n-                    .addVariable(new VariableDeclarator()\n-                                         .setType(Config.class.getCanonicalName())\n-                                         .setName(\"config\"));\n-            annotator.withInjection(configField);\n-        } else {\n-            configField = new FieldDeclaration()\n-                    .addModifier(Modifier.Keyword.PROTECTED)\n-                    .addVariable(new VariableDeclarator()\n-                            .setType(Config.class.getCanonicalName())\n-                            .setName(\"config\")\n-                            .setInitializer(configGenerator.newInstance()));\n-        }\n-        cls.addMember(configField);\n+        initializeSectionsExplicitly(cls);\n \n-        factoryMethods.forEach(cls::addMember);\n+        cls.getMembers().sort(new BodyDeclarationComparator());\n+        return compilationUnit;\n+    }\n \n-        Optional<BlockStmt> optSetupBody = cls\n-                .findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\"))\n-                .flatMap(MethodDeclaration::getBody);\n+    private void initializeSectionsExplicitly(ClassOrInterfaceDeclaration cls) {\n         for (Generator generator : generators) {\n             ApplicationSection section = generator.section();\n-            if (section == null) {\n-                continue;\n+            if (section != null) {\n+                replaceSectionPlaceHolder(cls, section);\n             }\n-            cls.addMember(section.fieldDeclaration());\n-            cls.addMember(section.factoryMethod());\n-            optSetupBody.ifPresent(b -> section.setupStatements().forEach(b::addStatement));\n         }\n-        cls.getMembers().sort(new BodyDeclarationComparator());\n-        return compilationUnit;\n+    }\n+\n+    private void replaceSectionPlaceHolder(ClassOrInterfaceDeclaration cls, ApplicationSection section) {\n+        // look for an expression of the form: foo = ... /* $SectionName$ */ ;\n+        //      e.g.: this.processes = null /* $Processes$ */;\n+        // and replaces the entire expression with an initializer; e.g.:\n+        //      e.g.: this.processes = new Processes(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1NjExMw==", "bodyText": "what do you mean? this is just a usage pattern in a private method where would you like to document it? maybe you mean adding it to #655 ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463056113", "createdAt": "2020-07-30T14:53:10Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,72 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n+    /**\n+     * @deprecated used only in tests?\n+     */\n+    @Deprecated\n     public void addFactoryMethods(Collection<MethodDeclaration> decls) {\n         factoryMethods.addAll(decls);\n     }\n \n     CompilationUnit compilationUnit() {\n         CompilationUnit compilationUnit =\n-                parse(this.getClass().getResourceAsStream(RESOURCE))\n-                        .setPackageDeclaration(packageName);\n+                templatedGenerator.compilationUnit()\n+                        .orElseThrow(() -> new IllegalArgumentException(\"Cannot find template for \" + APPLICATION_CLASS_NAME));\n \n         ClassOrInterfaceDeclaration cls = compilationUnit\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        VariableDeclarator eventPublishersDeclarator;\n-        FieldDeclaration eventPublishersFieldDeclaration = new FieldDeclaration();\n-\n-        FieldDeclaration kogitoServiceField = new FieldDeclaration().addVariable(new VariableDeclarator()\n-                                                                                .setType(new ClassOrInterfaceType(null, new SimpleName(Optional.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, String.class.getCanonicalName()))))\n-                                                                                .setName(\"kogitoService\"));\n-\n-        cls.addMember(eventPublishersFieldDeclaration);\n-        cls.addMember(kogitoServiceField);\n-        if (useInjection()) {\n-            annotator.withSingletonComponent(cls);\n-\n-            cls.findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\")).\n-            orElseThrow(() -> new RuntimeException(\"setup method template not found\"))\n-            .addAnnotation(\"javax.annotation.PostConstruct\");\n-\n-            annotator.withOptionalInjection(eventPublishersFieldDeclaration);\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(annotator.multiInstanceInjectionType()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-\n-            annotator.withConfigInjection(kogitoServiceField, \"kogito.service.url\");\n-        } else {\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(List.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-            kogitoServiceField.getVariable(0).setInitializer(new MethodCallExpr(new NameExpr(Optional.class.getCanonicalName()), \"empty\"));\n-        }\n+        factoryMethods.forEach(cls::addMember);\n \n-        eventPublishersFieldDeclaration.addVariable(eventPublishersDeclarator);\n-\n-        FieldDeclaration configField = null;\n-        if (useInjection()) {\n-            configField = new FieldDeclaration()\n-                    .addVariable(new VariableDeclarator()\n-                                         .setType(Config.class.getCanonicalName())\n-                                         .setName(\"config\"));\n-            annotator.withInjection(configField);\n-        } else {\n-            configField = new FieldDeclaration()\n-                    .addModifier(Modifier.Keyword.PROTECTED)\n-                    .addVariable(new VariableDeclarator()\n-                            .setType(Config.class.getCanonicalName())\n-                            .setName(\"config\")\n-                            .setInitializer(configGenerator.newInstance()));\n-        }\n-        cls.addMember(configField);\n+        initializeSectionsExplicitly(cls);\n \n-        factoryMethods.forEach(cls::addMember);\n+        cls.getMembers().sort(new BodyDeclarationComparator());\n+        return compilationUnit;\n+    }\n \n-        Optional<BlockStmt> optSetupBody = cls\n-                .findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\"))\n-                .flatMap(MethodDeclaration::getBody);\n+    private void initializeSectionsExplicitly(ClassOrInterfaceDeclaration cls) {\n         for (Generator generator : generators) {\n             ApplicationSection section = generator.section();\n-            if (section == null) {\n-                continue;\n+            if (section != null) {\n+                replaceSectionPlaceHolder(cls, section);\n             }\n-            cls.addMember(section.fieldDeclaration());\n-            cls.addMember(section.factoryMethod());\n-            optSetupBody.ifPresent(b -> section.setupStatements().forEach(b::addStatement));\n         }\n-        cls.getMembers().sort(new BodyDeclarationComparator());\n-        return compilationUnit;\n+    }\n+\n+    private void replaceSectionPlaceHolder(ClassOrInterfaceDeclaration cls, ApplicationSection section) {\n+        // look for an expression of the form: foo = ... /* $SectionName$ */ ;\n+        //      e.g.: this.processes = null /* $Processes$ */;\n+        // and replaces the entire expression with an initializer; e.g.:\n+        //      e.g.: this.processes = new Processes(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNDkxNA=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNTk0OA==", "bodyText": "My bad, I considered this \"rewrite\" mechanism like a reusable feature for all TemplatedGenerator based classes but it is not :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463135948", "createdAt": "2020-07-30T16:52:05Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,72 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n+    /**\n+     * @deprecated used only in tests?\n+     */\n+    @Deprecated\n     public void addFactoryMethods(Collection<MethodDeclaration> decls) {\n         factoryMethods.addAll(decls);\n     }\n \n     CompilationUnit compilationUnit() {\n         CompilationUnit compilationUnit =\n-                parse(this.getClass().getResourceAsStream(RESOURCE))\n-                        .setPackageDeclaration(packageName);\n+                templatedGenerator.compilationUnit()\n+                        .orElseThrow(() -> new IllegalArgumentException(\"Cannot find template for \" + APPLICATION_CLASS_NAME));\n \n         ClassOrInterfaceDeclaration cls = compilationUnit\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        VariableDeclarator eventPublishersDeclarator;\n-        FieldDeclaration eventPublishersFieldDeclaration = new FieldDeclaration();\n-\n-        FieldDeclaration kogitoServiceField = new FieldDeclaration().addVariable(new VariableDeclarator()\n-                                                                                .setType(new ClassOrInterfaceType(null, new SimpleName(Optional.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, String.class.getCanonicalName()))))\n-                                                                                .setName(\"kogitoService\"));\n-\n-        cls.addMember(eventPublishersFieldDeclaration);\n-        cls.addMember(kogitoServiceField);\n-        if (useInjection()) {\n-            annotator.withSingletonComponent(cls);\n-\n-            cls.findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\")).\n-            orElseThrow(() -> new RuntimeException(\"setup method template not found\"))\n-            .addAnnotation(\"javax.annotation.PostConstruct\");\n-\n-            annotator.withOptionalInjection(eventPublishersFieldDeclaration);\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(annotator.multiInstanceInjectionType()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-\n-            annotator.withConfigInjection(kogitoServiceField, \"kogito.service.url\");\n-        } else {\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(List.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-            kogitoServiceField.getVariable(0).setInitializer(new MethodCallExpr(new NameExpr(Optional.class.getCanonicalName()), \"empty\"));\n-        }\n+        factoryMethods.forEach(cls::addMember);\n \n-        eventPublishersFieldDeclaration.addVariable(eventPublishersDeclarator);\n-\n-        FieldDeclaration configField = null;\n-        if (useInjection()) {\n-            configField = new FieldDeclaration()\n-                    .addVariable(new VariableDeclarator()\n-                                         .setType(Config.class.getCanonicalName())\n-                                         .setName(\"config\"));\n-            annotator.withInjection(configField);\n-        } else {\n-            configField = new FieldDeclaration()\n-                    .addModifier(Modifier.Keyword.PROTECTED)\n-                    .addVariable(new VariableDeclarator()\n-                            .setType(Config.class.getCanonicalName())\n-                            .setName(\"config\")\n-                            .setInitializer(configGenerator.newInstance()));\n-        }\n-        cls.addMember(configField);\n+        initializeSectionsExplicitly(cls);\n \n-        factoryMethods.forEach(cls::addMember);\n+        cls.getMembers().sort(new BodyDeclarationComparator());\n+        return compilationUnit;\n+    }\n \n-        Optional<BlockStmt> optSetupBody = cls\n-                .findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\"))\n-                .flatMap(MethodDeclaration::getBody);\n+    private void initializeSectionsExplicitly(ClassOrInterfaceDeclaration cls) {\n         for (Generator generator : generators) {\n             ApplicationSection section = generator.section();\n-            if (section == null) {\n-                continue;\n+            if (section != null) {\n+                replaceSectionPlaceHolder(cls, section);\n             }\n-            cls.addMember(section.fieldDeclaration());\n-            cls.addMember(section.factoryMethod());\n-            optSetupBody.ifPresent(b -> section.setupStatements().forEach(b::addStatement));\n         }\n-        cls.getMembers().sort(new BodyDeclarationComparator());\n-        return compilationUnit;\n+    }\n+\n+    private void replaceSectionPlaceHolder(ClassOrInterfaceDeclaration cls, ApplicationSection section) {\n+        // look for an expression of the form: foo = ... /* $SectionName$ */ ;\n+        //      e.g.: this.processes = null /* $Processes$ */;\n+        // and replaces the entire expression with an initializer; e.g.:\n+        //      e.g.: this.processes = new Processes(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNDkxNA=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDgyODEzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ApplicationGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo1Nzo0NFrOG5kPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1Mjo1MFrOG6JYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTcwMA==", "bodyText": "Can you please create a ticket for that?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463015700", "createdAt": "2020-07-30T13:57:44Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ApplicationGeneratorTest.java", "diffHunk": "@@ -49,6 +50,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+@Disabled(\"Review these tests as some are outdated\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1NzM2MQ==", "bodyText": "Thanks, I actually forgot about this, I meant to re-enable before un-drafting. Will take a look now.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463057361", "createdAt": "2020-07-30T14:54:56Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ApplicationGeneratorTest.java", "diffHunk": "@@ -49,6 +50,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+@Disabled(\"Review these tests as some are outdated\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTcwMA=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4MDE2Mg==", "bodyText": "In case it is still disabled, a JIRA would be beneficial here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463580162", "createdAt": "2020-07-31T12:26:31Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ApplicationGeneratorTest.java", "diffHunk": "@@ -49,6 +50,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+@Disabled(\"Review these tests as some are outdated\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTcwMA=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDMxOQ==", "bodyText": "I have restored that and removed old tests", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463624319", "createdAt": "2020-07-31T13:52:50Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/ApplicationGeneratorTest.java", "diffHunk": "@@ -49,6 +50,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+@Disabled(\"Review these tests as some are outdated\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNTcwMA=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDk5MzE1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozMzo0MlrOG5lz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTowMTo1OVrOG5nGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTUyMw==", "bodyText": "Is there any reason why TemplatedGenerator is used as class to extend in many cases and as delegate in others?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463041523", "createdAt": "2020-07-30T14:33:42Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ConfigGenerator.java", "diffHunk": "@@ -76,6 +69,11 @@ public ConfigGenerator(String packageName) {\n         this.targetTypeName = \"ApplicationConfig\";\n         this.targetCanonicalName = this.packageName + \".\" + targetTypeName;\n         this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n+        this.templatedGenerator = new TemplatedGenerator(packageName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MjY1OQ==", "bodyText": "when it's \"more convenient\" it is extended; in this case it's used as a delegate as it would break the contract of some APIs (compilationUnit() returns an Option in TemplatedGenerator and here it doesn't). In other cases it's because the class is already extending another abstract class.\nThe delegate version is a little more error-prone, as you have to remember to call withDependencyInjection() explicitly.\nI think this generator will disappear at some point, if we get more strict about naming conventions, so I wouldn't care too much about the usage patterns, but we can make it a force delegate by making it final, if we really care. In that case I would open a new Jira. But I like that most classes can inherit for brevity.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463062659", "createdAt": "2020-07-30T15:01:59Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ConfigGenerator.java", "diffHunk": "@@ -76,6 +69,11 @@ public ConfigGenerator(String packageName) {\n         this.targetTypeName = \"ApplicationConfig\";\n         this.targetCanonicalName = this.packageName + \".\" + targetTypeName;\n         this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n+        this.templatedGenerator = new TemplatedGenerator(packageName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MTUyMw=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTAxNDM0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNzo1NFrOG5mAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNzo1NFrOG5mAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0NDgxNQ==", "bodyText": "To be removed? This override has been removed from DecisionContainerGenerator so I expect it can be removed here too", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463044815", "createdAt": "2020-07-30T14:37:54Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionContainerGenerator.java", "diffHunk": "@@ -67,23 +60,6 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n         return typeDeclaration;\n     }\n \n-    @Override\n-    public List<Statement> setupStatements() {\n-        return Collections.singletonList(\n-                new IfStmt(\n-                        new BinaryExpr(\n-                                new MethodCallExpr(new MethodCallExpr(null, \"config\"), \"prediction\"),\n-                                new NullLiteralExpr(),\n-                                BinaryExpr.Operator.NOT_EQUALS\n-                        ),\n-                        new BlockStmt().addStatement(new ExpressionStmt(new MethodCallExpr(\n-                                new NameExpr(\"predictionModels\"), \"init\", NodeList.nodeList(new ThisExpr())\n-                        ))),\n-                        null\n-                )\n-        );\n-    }\n-\n     @Override\n     protected boolean useApplication() {\n         return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTAyNDAxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo0MDowNlrOG5mG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo1NjozNFrOG5m2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0NjM4Mw==", "bodyText": "Can you please create a ticket to verify this?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463046383", "createdAt": "2020-07-30T14:40:06Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,72 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n+    /**\n+     * @deprecated used only in tests?\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1ODU2Nw==", "bodyText": "I think I'll re-check and delete it altogether if it's not necessary", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463058567", "createdAt": "2020-07-30T14:56:34Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,72 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n+    /**\n+     * @deprecated used only in tests?\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0NjM4Mw=="}, "originalCommit": {"oid": "0da4398b54f9772423bc586e157b5be3e68ea4fe"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI3OTIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxMTozMFrOG6E3pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1MzozOFrOG6JaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MDM3Mw==", "bodyText": "What does fae mean? Something like Found AssignExpr? Maybe the name could be more descriptive.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463550373", "createdAt": "2020-07-31T11:11:30Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,54 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n-    public void addFactoryMethods(Collection<MethodDeclaration> decls) {\n-        factoryMethods.addAll(decls);\n-    }\n-\n     CompilationUnit compilationUnit() {\n         CompilationUnit compilationUnit =\n-                parse(this.getClass().getResourceAsStream(RESOURCE))\n-                        .setPackageDeclaration(packageName);\n+                templatedGenerator.compilationUnit()\n+                        .orElseThrow(() -> new IllegalArgumentException(\"Cannot find template for \" + APPLICATION_CLASS_NAME));\n \n         ClassOrInterfaceDeclaration cls = compilationUnit\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        VariableDeclarator eventPublishersDeclarator;\n-        FieldDeclaration eventPublishersFieldDeclaration = new FieldDeclaration();\n-\n-        FieldDeclaration kogitoServiceField = new FieldDeclaration().addVariable(new VariableDeclarator()\n-                                                                                .setType(new ClassOrInterfaceType(null, new SimpleName(Optional.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, String.class.getCanonicalName()))))\n-                                                                                .setName(\"kogitoService\"));\n-\n-        cls.addMember(eventPublishersFieldDeclaration);\n-        cls.addMember(kogitoServiceField);\n-        if (useInjection()) {\n-            annotator.withSingletonComponent(cls);\n-\n-            cls.findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\")).\n-            orElseThrow(() -> new RuntimeException(\"setup method template not found\"))\n-            .addAnnotation(\"javax.annotation.PostConstruct\");\n-\n-            annotator.withOptionalInjection(eventPublishersFieldDeclaration);\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(annotator.multiInstanceInjectionType()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-\n-            annotator.withConfigInjection(kogitoServiceField, \"kogito.service.url\");\n-        } else {\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(List.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-            kogitoServiceField.getVariable(0).setInitializer(new MethodCallExpr(new NameExpr(Optional.class.getCanonicalName()), \"empty\"));\n-        }\n+        factoryMethods.forEach(cls::addMember);\n \n-        eventPublishersFieldDeclaration.addVariable(eventPublishersDeclarator);\n-\n-        FieldDeclaration configField = null;\n-        if (useInjection()) {\n-            configField = new FieldDeclaration()\n-                    .addVariable(new VariableDeclarator()\n-                                         .setType(Config.class.getCanonicalName())\n-                                         .setName(\"config\"));\n-            annotator.withInjection(configField);\n-        } else {\n-            configField = new FieldDeclaration()\n-                    .addModifier(Modifier.Keyword.PROTECTED)\n-                    .addVariable(new VariableDeclarator()\n-                            .setType(Config.class.getCanonicalName())\n-                            .setName(\"config\")\n-                            .setInitializer(configGenerator.newInstance()));\n-        }\n-        cls.addMember(configField);\n+        initializeSectionsExplicitly(cls);\n \n-        factoryMethods.forEach(cls::addMember);\n+        cls.getMembers().sort(new BodyDeclarationComparator());\n+        return compilationUnit;\n+    }\n \n-        Optional<BlockStmt> optSetupBody = cls\n-                .findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\"))\n-                .flatMap(MethodDeclaration::getBody);\n+    private void initializeSectionsExplicitly(ClassOrInterfaceDeclaration cls) {\n         for (Generator generator : generators) {\n             ApplicationSection section = generator.section();\n-            if (section == null) {\n-                continue;\n+            if (section != null) {\n+                replaceSectionPlaceHolder(cls, section);\n             }\n-            cls.addMember(section.fieldDeclaration());\n-            cls.addMember(section.factoryMethod());\n-            optSetupBody.ifPresent(b -> section.setupStatements().forEach(b::addStatement));\n         }\n-        cls.getMembers().sort(new BodyDeclarationComparator());\n-        return compilationUnit;\n+    }\n+\n+    private void replaceSectionPlaceHolder(ClassOrInterfaceDeclaration cls, ApplicationSection section) {\n+        // look for an expression of the form: foo = ... /* $SectionName$ */ ;\n+        //      e.g.: this.processes = null /* $Processes$ */;\n+        // and replaces the entire expression with an initializer; e.g.:\n+        //      e.g.: this.processes = new Processes(this);\n+\n+        Optional<AssignExpr> fae = cls.findFirst(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDc4NA==", "bodyText": "it was a FieldAccessExpression before :P good point.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463624784", "createdAt": "2020-07-31T13:53:38Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -103,84 +108,54 @@ private String getFilePath(String className) {\n         return (this.packageName + \".\" + className).replace('.', '/') + \".java\";\n     }\n \n-    public void addFactoryMethods(Collection<MethodDeclaration> decls) {\n-        factoryMethods.addAll(decls);\n-    }\n-\n     CompilationUnit compilationUnit() {\n         CompilationUnit compilationUnit =\n-                parse(this.getClass().getResourceAsStream(RESOURCE))\n-                        .setPackageDeclaration(packageName);\n+                templatedGenerator.compilationUnit()\n+                        .orElseThrow(() -> new IllegalArgumentException(\"Cannot find template for \" + APPLICATION_CLASS_NAME));\n \n         ClassOrInterfaceDeclaration cls = compilationUnit\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        VariableDeclarator eventPublishersDeclarator;\n-        FieldDeclaration eventPublishersFieldDeclaration = new FieldDeclaration();\n-\n-        FieldDeclaration kogitoServiceField = new FieldDeclaration().addVariable(new VariableDeclarator()\n-                                                                                .setType(new ClassOrInterfaceType(null, new SimpleName(Optional.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, String.class.getCanonicalName()))))\n-                                                                                .setName(\"kogitoService\"));\n-\n-        cls.addMember(eventPublishersFieldDeclaration);\n-        cls.addMember(kogitoServiceField);\n-        if (useInjection()) {\n-            annotator.withSingletonComponent(cls);\n-\n-            cls.findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\")).\n-            orElseThrow(() -> new RuntimeException(\"setup method template not found\"))\n-            .addAnnotation(\"javax.annotation.PostConstruct\");\n-\n-            annotator.withOptionalInjection(eventPublishersFieldDeclaration);\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(annotator.multiInstanceInjectionType()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-\n-            annotator.withConfigInjection(kogitoServiceField, \"kogito.service.url\");\n-        } else {\n-            eventPublishersDeclarator = new VariableDeclarator(new ClassOrInterfaceType(null, new SimpleName(List.class.getCanonicalName()), NodeList.nodeList(new ClassOrInterfaceType(null, EventPublisher.class.getCanonicalName()))), \"eventPublishers\");\n-            kogitoServiceField.getVariable(0).setInitializer(new MethodCallExpr(new NameExpr(Optional.class.getCanonicalName()), \"empty\"));\n-        }\n+        factoryMethods.forEach(cls::addMember);\n \n-        eventPublishersFieldDeclaration.addVariable(eventPublishersDeclarator);\n-\n-        FieldDeclaration configField = null;\n-        if (useInjection()) {\n-            configField = new FieldDeclaration()\n-                    .addVariable(new VariableDeclarator()\n-                                         .setType(Config.class.getCanonicalName())\n-                                         .setName(\"config\"));\n-            annotator.withInjection(configField);\n-        } else {\n-            configField = new FieldDeclaration()\n-                    .addModifier(Modifier.Keyword.PROTECTED)\n-                    .addVariable(new VariableDeclarator()\n-                            .setType(Config.class.getCanonicalName())\n-                            .setName(\"config\")\n-                            .setInitializer(configGenerator.newInstance()));\n-        }\n-        cls.addMember(configField);\n+        initializeSectionsExplicitly(cls);\n \n-        factoryMethods.forEach(cls::addMember);\n+        cls.getMembers().sort(new BodyDeclarationComparator());\n+        return compilationUnit;\n+    }\n \n-        Optional<BlockStmt> optSetupBody = cls\n-                .findFirst(MethodDeclaration.class, md -> md.getNameAsString().equals(\"setup\"))\n-                .flatMap(MethodDeclaration::getBody);\n+    private void initializeSectionsExplicitly(ClassOrInterfaceDeclaration cls) {\n         for (Generator generator : generators) {\n             ApplicationSection section = generator.section();\n-            if (section == null) {\n-                continue;\n+            if (section != null) {\n+                replaceSectionPlaceHolder(cls, section);\n             }\n-            cls.addMember(section.fieldDeclaration());\n-            cls.addMember(section.factoryMethod());\n-            optSetupBody.ifPresent(b -> section.setupStatements().forEach(b::addStatement));\n         }\n-        cls.getMembers().sort(new BodyDeclarationComparator());\n-        return compilationUnit;\n+    }\n+\n+    private void replaceSectionPlaceHolder(ClassOrInterfaceDeclaration cls, ApplicationSection section) {\n+        // look for an expression of the form: foo = ... /* $SectionName$ */ ;\n+        //      e.g.: this.processes = null /* $Processes$ */;\n+        // and replaces the entire expression with an initializer; e.g.:\n+        //      e.g.: this.processes = new Processes(this);\n+\n+        Optional<AssignExpr> fae = cls.findFirst(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MDM3Mw=="}, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI4NjE2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxNDo0NFrOG6E7_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NzowMFrOG6JiAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTQ4NQ==", "bodyText": "Maybe this TemplatedGenerator could also be extracted into its own type as with ConfigBeanGenerator? As those resource files URLs are not needed in this class, just in the TemplatedGenerator itself.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463551485", "createdAt": "2020-07-31T11:14:44Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -89,6 +87,13 @@ public ApplicationGenerator(String packageName, File targetDirectory) {\n         this.targetDirectory = targetDirectory;\n         this.factoryMethods = new ArrayList<>();\n         this.configGenerator = new ConfigGenerator(packageName);\n+\n+        this.templatedGenerator = new TemplatedGenerator(\n+                packageName,\n+                APPLICATION_CLASS_NAME,\n+                RESOURCE_CDI,\n+                RESOURCE_SPRING,\n+                RESOURCE_DEFAULT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNjc1NQ==", "bodyText": "it's just used as a delegate instead of inheriting. But you have a point, let me see.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463626755", "createdAt": "2020-07-31T13:57:00Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -89,6 +87,13 @@ public ApplicationGenerator(String packageName, File targetDirectory) {\n         this.targetDirectory = targetDirectory;\n         this.factoryMethods = new ArrayList<>();\n         this.configGenerator = new ConfigGenerator(packageName);\n+\n+        this.templatedGenerator = new TemplatedGenerator(\n+                packageName,\n+                APPLICATION_CLASS_NAME,\n+                RESOURCE_CDI,\n+                RESOURCE_SPRING,\n+                RESOURCE_DEFAULT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTQ4NQ=="}, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMzMjE0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/TemplatedGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTozMzowMlrOG6FWzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzoxNjo1NlrOG6unxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1ODM1MA==", "bodyText": "This implies that first we have to call compilationUnit(). Wouldn't it be better for selectResource() to have the return value and call it also here and in compilationUnit every time? It would be less stateless...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463558350", "createdAt": "2020-07-31T11:33:02Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/TemplatedGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.text.MessageFormat;\n+import java.util.Optional;\n+\n+import javax.lang.model.SourceVersion;\n+\n+import com.github.javaparser.ParseProblemException;\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class TemplatedGenerator {\n+\n+    private final String packageName;\n+    private final String sourceFilePath;\n+\n+    private final String resourceCdi;\n+    private final String resourceSpring;\n+    private final String resourceDefault;\n+\n+    private DependencyInjectionAnnotator annotator;\n+    private String targetTypeName;\n+    private String selectedResource;\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring,\n+            String resourceDefault) {\n+        if (packageName == null) {\n+            throw new IllegalArgumentException(\"Package name cannot be undefined (null), please specify a package name!\");\n+        }\n+        if (!SourceVersion.isName(packageName)) {\n+            throw new IllegalArgumentException(\n+                    MessageFormat.format(\n+                            \"Package name \\\"{0}\\\" is not valid. It should be a valid Java package name.\", packageName));\n+        }\n+\n+        this.packageName = packageName;\n+        this.targetTypeName = targetTypeName;\n+        String targetCanonicalName = this.packageName + \".\" + this.targetTypeName;\n+        this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n+        this.resourceCdi = resourceCdi;\n+        this.resourceSpring = resourceSpring;\n+        this.resourceDefault = resourceDefault;\n+    }\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring) {\n+        this(packageName,\n+             targetTypeName,\n+             resourceCdi,\n+             resourceSpring,\n+             null);\n+    }\n+\n+    public String generatedFilePath() {\n+        return sourceFilePath;\n+    }\n+\n+    public String templatePath() {\n+        return selectedResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTI5MQ==", "bodyText": "correct. I thought about adding selectResource() here too, I can do that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463625291", "createdAt": "2020-07-31T13:54:29Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/TemplatedGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.text.MessageFormat;\n+import java.util.Optional;\n+\n+import javax.lang.model.SourceVersion;\n+\n+import com.github.javaparser.ParseProblemException;\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class TemplatedGenerator {\n+\n+    private final String packageName;\n+    private final String sourceFilePath;\n+\n+    private final String resourceCdi;\n+    private final String resourceSpring;\n+    private final String resourceDefault;\n+\n+    private DependencyInjectionAnnotator annotator;\n+    private String targetTypeName;\n+    private String selectedResource;\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring,\n+            String resourceDefault) {\n+        if (packageName == null) {\n+            throw new IllegalArgumentException(\"Package name cannot be undefined (null), please specify a package name!\");\n+        }\n+        if (!SourceVersion.isName(packageName)) {\n+            throw new IllegalArgumentException(\n+                    MessageFormat.format(\n+                            \"Package name \\\"{0}\\\" is not valid. It should be a valid Java package name.\", packageName));\n+        }\n+\n+        this.packageName = packageName;\n+        this.targetTypeName = targetTypeName;\n+        String targetCanonicalName = this.packageName + \".\" + this.targetTypeName;\n+        this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n+        this.resourceCdi = resourceCdi;\n+        this.resourceSpring = resourceSpring;\n+        this.resourceDefault = resourceDefault;\n+    }\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring) {\n+        this(packageName,\n+             targetTypeName,\n+             resourceCdi,\n+             resourceSpring,\n+             null);\n+    }\n+\n+    public String generatedFilePath() {\n+        return sourceFilePath;\n+    }\n+\n+    public String templatePath() {\n+        return selectedResource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1ODM1MA=="}, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3NTMzOQ==", "bodyText": "So we don't want selectResource() to return the selected resource as the return value? Then we wouldn't need the selectedResource field at all. As we will always call selectResource() anyway.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463775339", "createdAt": "2020-07-31T18:50:27Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/TemplatedGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.text.MessageFormat;\n+import java.util.Optional;\n+\n+import javax.lang.model.SourceVersion;\n+\n+import com.github.javaparser.ParseProblemException;\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class TemplatedGenerator {\n+\n+    private final String packageName;\n+    private final String sourceFilePath;\n+\n+    private final String resourceCdi;\n+    private final String resourceSpring;\n+    private final String resourceDefault;\n+\n+    private DependencyInjectionAnnotator annotator;\n+    private String targetTypeName;\n+    private String selectedResource;\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring,\n+            String resourceDefault) {\n+        if (packageName == null) {\n+            throw new IllegalArgumentException(\"Package name cannot be undefined (null), please specify a package name!\");\n+        }\n+        if (!SourceVersion.isName(packageName)) {\n+            throw new IllegalArgumentException(\n+                    MessageFormat.format(\n+                            \"Package name \\\"{0}\\\" is not valid. It should be a valid Java package name.\", packageName));\n+        }\n+\n+        this.packageName = packageName;\n+        this.targetTypeName = targetTypeName;\n+        String targetCanonicalName = this.packageName + \".\" + this.targetTypeName;\n+        this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n+        this.resourceCdi = resourceCdi;\n+        this.resourceSpring = resourceSpring;\n+        this.resourceDefault = resourceDefault;\n+    }\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring) {\n+        this(packageName,\n+             targetTypeName,\n+             resourceCdi,\n+             resourceSpring,\n+             null);\n+    }\n+\n+    public String generatedFilePath() {\n+        return sourceFilePath;\n+    }\n+\n+    public String templatePath() {\n+        return selectedResource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1ODM1MA=="}, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNDQzOQ==", "bodyText": "done. Don't love it, I actually intended the selection to be cached (but of course I was not really doing it), but we can optimize later, and indeed the code is clearer this way", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r464234439", "createdAt": "2020-08-03T07:16:56Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/TemplatedGenerator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.text.MessageFormat;\n+import java.util.Optional;\n+\n+import javax.lang.model.SourceVersion;\n+\n+import com.github.javaparser.ParseProblemException;\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class TemplatedGenerator {\n+\n+    private final String packageName;\n+    private final String sourceFilePath;\n+\n+    private final String resourceCdi;\n+    private final String resourceSpring;\n+    private final String resourceDefault;\n+\n+    private DependencyInjectionAnnotator annotator;\n+    private String targetTypeName;\n+    private String selectedResource;\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring,\n+            String resourceDefault) {\n+        if (packageName == null) {\n+            throw new IllegalArgumentException(\"Package name cannot be undefined (null), please specify a package name!\");\n+        }\n+        if (!SourceVersion.isName(packageName)) {\n+            throw new IllegalArgumentException(\n+                    MessageFormat.format(\n+                            \"Package name \\\"{0}\\\" is not valid. It should be a valid Java package name.\", packageName));\n+        }\n+\n+        this.packageName = packageName;\n+        this.targetTypeName = targetTypeName;\n+        String targetCanonicalName = this.packageName + \".\" + this.targetTypeName;\n+        this.sourceFilePath = targetCanonicalName.replace('.', '/') + \".java\";\n+        this.resourceCdi = resourceCdi;\n+        this.resourceSpring = resourceSpring;\n+        this.resourceDefault = resourceDefault;\n+    }\n+\n+    public TemplatedGenerator(\n+            String packageName,\n+            String targetTypeName,\n+            String resourceCdi,\n+            String resourceSpring) {\n+        this(packageName,\n+             targetTypeName,\n+             resourceCdi,\n+             resourceSpring,\n+             null);\n+    }\n+\n+    public String generatedFilePath() {\n+        return sourceFilePath;\n+    }\n+\n+    public String templatePath() {\n+        return selectedResource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1ODM1MA=="}, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMzNjI5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTozNDo0M1rOG6FZWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTozNDo0M1rOG6FZWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1OTAwMA==", "bodyText": "Same here, maybe a separate type as with ConfigBeanGenerator would be cleaner?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463559000", "createdAt": "2020-07-31T11:34:43Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessContainerGenerator.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.process;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.BodyDeclaration;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.NullLiteralExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import org.kie.kogito.codegen.AbstractApplicationSection;\n+import org.kie.kogito.codegen.InvalidTemplateException;\n+import org.kie.kogito.codegen.TemplatedGenerator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.process.Processes;\n+\n+public class ProcessContainerGenerator extends AbstractApplicationSection {\n+\n+    private static final String RESOURCE = \"/class-templates/ProcessContainerTemplate.java\";\n+    private static final String RESOURCE_CDI = \"/class-templates/CdiProcessContainerTemplate.java\";\n+    private static final String RESOURCE_SPRING = \"/class-templates/SpringProcessContainerTemplate.java\";\n+    public static final String SECTION_CLASS_NAME = \"Processes\";\n+\n+    private final String packageName;\n+    private final List<ProcessGenerator> processes;\n+    private final List<BodyDeclaration<?>> factoryMethods;\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    private BlockStmt byProcessIdBody = new BlockStmt();\n+    private BlockStmt processesBody = new BlockStmt();\n+    private final TemplatedGenerator templatedGenerator;\n+\n+    public ProcessContainerGenerator(String packageName) {\n+        super(SECTION_CLASS_NAME, \"processes\", Processes.class);\n+        this.packageName = packageName;\n+        this.processes = new ArrayList<>();\n+        this.factoryMethods = new ArrayList<>();\n+\n+        this.templatedGenerator = new TemplatedGenerator(\n+                packageName,\n+                SECTION_CLASS_NAME,\n+                RESOURCE_CDI,\n+                RESOURCE_SPRING,\n+                RESOURCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDQxNzczOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/SpringApplicationTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjowNDo1NlrOG6GIaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzo1NToyOFrOG6JepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU3MTA1MQ==", "bodyText": "Maybe a check that only one Processes bean is present wouldn't be bad, or?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463571051", "createdAt": "2020-07-31T12:04:56Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringApplicationTemplate.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package $Package$;\n+\n+import org.kie.kogito.Config;\n+import org.kie.kogito.StaticApplication;\n+import org.kie.kogito.process.Processes;\n+\n+@org.springframework.stereotype.Component\n+@org.springframework.web.context.annotation.ApplicationScope\n+public class Application extends StaticApplication {\n+\n+    @org.springframework.beans.factory.annotation.Autowired()\n+    public Application(\n+            Config config,\n+            java.util.Collection<Processes> processes/*,\n+            java.util.Collection<RuleUnits> ruleUnits,\n+            java.util.Collection<DecisionModels> decisionModels,\n+            java.util.Collection<PredictionModels> predictionModels,\n+            */) {\n+        this.config = config;\n+        this.processes = orNull(processes);\n+        this.ruleUnits = null /* $RuleUnits$ */;\n+        this.decisionModels = null /* $DecisionModels$ */;\n+        this.predictionModels = null /* $PredictionModels$ */;\n+\n+        if (config().process() != null) {\n+            unitOfWorkManager().eventManager().setAddons(config().addons());\n+        }\n+    }\n+\n+    private static <T> T orNull(java.util.Collection<T> collection) {\n+        if (collection.isEmpty()) {\n+            return null;\n+        } else {\n+            return collection.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTg5Mg==", "bodyText": "sure let's do that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/657#discussion_r463625892", "createdAt": "2020-07-31T13:55:28Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringApplicationTemplate.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package $Package$;\n+\n+import org.kie.kogito.Config;\n+import org.kie.kogito.StaticApplication;\n+import org.kie.kogito.process.Processes;\n+\n+@org.springframework.stereotype.Component\n+@org.springframework.web.context.annotation.ApplicationScope\n+public class Application extends StaticApplication {\n+\n+    @org.springframework.beans.factory.annotation.Autowired()\n+    public Application(\n+            Config config,\n+            java.util.Collection<Processes> processes/*,\n+            java.util.Collection<RuleUnits> ruleUnits,\n+            java.util.Collection<DecisionModels> decisionModels,\n+            java.util.Collection<PredictionModels> predictionModels,\n+            */) {\n+        this.config = config;\n+        this.processes = orNull(processes);\n+        this.ruleUnits = null /* $RuleUnits$ */;\n+        this.decisionModels = null /* $DecisionModels$ */;\n+        this.predictionModels = null /* $PredictionModels$ */;\n+\n+        if (config().process() != null) {\n+            unitOfWorkManager().eventManager().setAddons(config().addons());\n+        }\n+    }\n+\n+    private static <T> T orNull(java.util.Collection<T> collection) {\n+        if (collection.isEmpty()) {\n+            return null;\n+        } else {\n+            return collection.iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU3MTA1MQ=="}, "originalCommit": {"oid": "271d5ef3ddedb42ab2a5e4efd38087960f00fd7c"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4904, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}