{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Nzg1MTM0", "number": 839, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODozODo1NFrOEys_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxOToyMFrOEzL_6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjAxMzcyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODozODo1NFrOHpfJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjozMToxNFrOHpntbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2Mzg4Ng==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513263886", "createdAt": "2020-10-28T08:38:54Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n               $DataEventType$.class,\n               \"$Trigger$\",\n               new DefaultEventConsumerFactory(),\n               configBean.useCloudEvents());\n-    }\n \n-    @org.springframework.kafka.annotation.KafkaListener(topics = \"$Trigger$\")\n-    public void consume(String payload) {\n-        super.consume(payload);\n+        Flux.from(eventPublisher)\n+            .log()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDI2OA==", "bodyText": "+1 to remove, or at least map the log explicitly as a debug.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404268", "createdAt": "2020-10-28T12:31:14Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n               $DataEventType$.class,\n               \"$Trigger$\",\n               new DefaultEventConsumerFactory(),\n               configBean.useCloudEvents());\n-    }\n \n-    @org.springframework.kafka.annotation.KafkaListener(topics = \"$Trigger$\")\n-    public void consume(String payload) {\n-        super.consume(payload);\n+        Flux.from(eventPublisher)\n+            .log()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2Mzg4Ng=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjAyNTUxOnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo0MTo1NFrOHpfP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTo0OTo1OVrOHpw-XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ==", "bodyText": "Shouldn't we check the result and log the error (if any)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513265621", "createdAt": "2020-10-28T08:41:54Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {\n+                }); // discard return to comply with the signature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDQyMg==", "bodyText": "I think the completable() method does something already with the failed future, I will check", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404422", "createdAt": "2020-10-28T12:31:31Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {\n+                }); // discard return to comply with the signature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU1NjA2MA==", "bodyText": "I have added a log to AbstractMessageProducer. This just propagates the CompletableFuture (which may be completed exceptionally) and discards the return value to comply with the signature (I 100% agree we should not just throw this away, but let's at least make it work now)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513556060", "createdAt": "2020-10-28T15:49:59Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {\n+                }); // discard return to comply with the signature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjc3MTU2OnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTo1MjoxNFrOHpmX-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjozMDo1N1rOHpns0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw==", "bodyText": "What do you mean with demo?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513382393", "createdAt": "2020-10-28T11:52:14Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5NzM5MA==", "bodyText": "and I think it would be better using camelCase for the method name, and something indicating you are creating a bean, that would be similar to the @Producer on CDI.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513397390", "createdAt": "2020-10-28T12:19:11Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDExMw==", "bodyText": "\ud83d\ude05 copy paste", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404113", "createdAt": "2020-10-28T12:30:57Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjg1MjEzOnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoxNDo0MVrOHpnIyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoxNDo0MVrOHpnIyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5NDg4OA==", "bodyText": "I think using .thenApply(() -> null) would be better, because it would be similar to .map(...)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513394888", "createdAt": "2020-10-28T12:14:41Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjg4OTM5OnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyNTowM1rOHpnfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo1NDozNFrOHqP73Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ==", "bodyText": "we could revisit this in the future, but in some way, we should give the flexibility to let the consumer ack the received message, like after executing some computation successfully or whatever, and not ack in case of failure, this would the same for quarkus approach.. anyway just a comment for us to think as a future improvement.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513400745", "createdAt": "2020-10-28T12:25:03Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {\n+        return makeConsumer();\n+    }\n+\n+    private Flux<String> makeConsumer() {\n+        ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n+                .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n+                .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n+        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n+\n+        return kafkaFlux.map(record -> {\n+            ReceiverOffset offset = record.receiverOffset();\n+            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+                      offset.topicPartition(),\n+                      offset.offset(),\n+                      dateFormat.format(new Date(record.timestamp())),\n+                      record.key(),\n+                      record.value());\n+            offset.acknowledge();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2NjY5Mw==", "bodyText": "yes, good point", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513466693", "createdAt": "2020-10-28T14:00:54Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {\n+        return makeConsumer();\n+    }\n+\n+    private Flux<String> makeConsumer() {\n+        ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n+                .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n+                .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n+        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n+\n+        return kafkaFlux.map(record -> {\n+            ReceiverOffset offset = record.receiverOffset();\n+            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+                      offset.topicPartition(),\n+                      offset.offset(),\n+                      dateFormat.format(new Date(record.timestamp())),\n+                      record.key(),\n+                      record.value());\n+            offset.acknowledge();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MzMyNQ==", "bodyText": "filed https://issues.redhat.com/browse/KOGITO-3733", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514063325", "createdAt": "2020-10-29T07:54:34Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {\n+        return makeConsumer();\n+    }\n+\n+    private Flux<String> makeConsumer() {\n+        ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n+                .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n+                .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n+        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n+\n+        return kafkaFlux.map(record -> {\n+            ReceiverOffset offset = record.receiverOffset();\n+            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+                      offset.topicPartition(),\n+                      offset.offset(),\n+                      dateFormat.format(new Date(record.timestamp())),\n+                      record.key(),\n+                      record.value());\n+            offset.acknowledge();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjkwMjQzOnYy", "diffSide": "RIGHT", "path": "kogito-build-parent/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyODozOFrOHpnn4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTo1NTozNVrOHpxP_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjg0OQ==", "bodyText": "just a comment, could we use import the versions from the bom:\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n\nin this way, we could be in sync with all spring related dependencies... and avoid the need to update one by one...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513402849", "createdAt": "2020-10-28T12:28:38Z", "author": {"login": "tiagodolphine"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -138,6 +138,8 @@\n     <version.resteasy.springboot>4.6.0.Final</version.resteasy.springboot>\n     <version.springboot>2.3.1.RELEASE</version.springboot>\n     <version.spring.kafka>2.5.2.RELEASE</version.spring.kafka>\n+    <version.spring.reactor>3.3.6.RELEASE</version.spring.reactor>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2NjAzNg==", "bodyText": "\ud83e\udd14  so maybe I can import this in the addon ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513466036", "createdAt": "2020-10-28T14:00:04Z", "author": {"login": "evacchi"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -138,6 +138,8 @@\n     <version.resteasy.springboot>4.6.0.Final</version.resteasy.springboot>\n     <version.springboot>2.3.1.RELEASE</version.springboot>\n     <version.spring.kafka>2.5.2.RELEASE</version.spring.kafka>\n+    <version.spring.reactor>3.3.6.RELEASE</version.spring.reactor>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjg0OQ=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MDU3NQ==", "bodyText": "let's file a jira for that I am not sure how to do it right now https://issues.redhat.com/browse/KOGITO-3731", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513560575", "createdAt": "2020-10-28T15:55:35Z", "author": {"login": "evacchi"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -138,6 +138,8 @@\n     <version.resteasy.springboot>4.6.0.Final</version.resteasy.springboot>\n     <version.springboot>2.3.1.RELEASE</version.springboot>\n     <version.spring.kafka>2.5.2.RELEASE</version.spring.kafka>\n+    <version.spring.reactor>3.3.6.RELEASE</version.spring.reactor>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjg0OQ=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjkwNzI2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyOTo1OVrOHpnqvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyOTo1OVrOHpnqvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMzU4Mw==", "bodyText": "what about using a constant for \"kogito_event_publisher\" to centralize the name, in this way it would be easier to change if necessary in the future.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513403583", "createdAt": "2020-10-28T12:29:59Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTY2NjU5OnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDozMDoxMFrOHqCTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTowMDowN1rOHsyzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA==", "bodyText": "@evacchi Im just afraid that we end up limiting the options that can be tweaked for the receiver with this new approach. Having in the application.properties in a way that all kafka properties could be used allows great flexibility.\n@MarianMacik have you had to tweak these in your tests? Just wondering as an example about how this is important.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513840054", "createdAt": "2020-10-29T00:30:10Z", "author": {"login": "cristianonicolai"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTg2Ng==", "bodyText": "not sure what you mean. this is mapped to application.properties, and the config option is the same that is used by the \"plain\" spring boot kafka connector. If you mean having different kafkas for each topic then AFAIK this worked the same even before this PR (only 1 broker)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514061866", "createdAt": "2020-10-29T07:51:15Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjY1MA==", "bodyText": "@evacchi my point is about setting up the consumer config properties. Kafka exposes a set of other configurations, not only the groupid and bootstrap server as used in here. See https://kafka.apache.org/documentation/#consumerconfigs\nMy concern is that in some situation, these properties will need to be tweaked, and I think we would allow that with this new approach.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514636650", "createdAt": "2020-10-30T00:09:48Z", "author": {"login": "cristianonicolai"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU5MDQwNg==", "bodyText": "Sorry, just read it now. Not sure about the cloud events here (I guess something Kafka-related), but there are properties which may need to be tweaked theoretically. So do I get it right that this consumes events from external kafka but then publishes them in something called Kogito Event Streams, i.e. in Kogito ecosystem? Hence the name of the class ending in Publisher I guess....", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r516590406", "createdAt": "2020-11-03T11:13:42Z", "author": {"login": "MarianMacik"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2NzYyNQ==", "bodyText": "@cristianonicolai ^^", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r516667625", "createdAt": "2020-11-03T13:32:45Z", "author": {"login": "MarianMacik"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjczMTY1Mg==", "bodyText": "I have created https://issues.redhat.com/browse/KOGITO-3760 because we can probably reuse the reactive template, which supports standard spring config while retaining the nonblocking API", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r516731652", "createdAt": "2020-11-03T15:00:07Z", "author": {"login": "evacchi"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA=="}, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTA4NTU5OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxNzowOFrOHqQnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxNzowOFrOHqQnYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3NDQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n          \n          \n            \n                    logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514074465", "createdAt": "2020-10-29T08:17:08Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "diffHunk": "@@ -82,6 +82,7 @@ public void setParams(\n     }\n \n     public void consume(String payload) {\n+        logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTA5NDE5OnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxOToyMFrOHqQsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxOToyMFrOHqQsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3NTcyNg==", "bodyText": "Ticket to remove this method?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514075726", "createdAt": "2020-10-29T08:19:20Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -19,25 +19,32 @@\n \n import java.util.concurrent.CompletionStage;\n \n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4867, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}