{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDM3NDE4", "number": 475, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowMzo1NlrOD3RM4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowMzo1NlrOD3RM4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjgwMDk4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowMzo1NlrOGNbj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyMDowNVrOGNcRcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNjIyOA==", "bodyText": "What is our current code style? Somewhere it is one param per line, somewhere it is all on one line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/475#discussion_r416736228", "createdAt": "2020-04-28T16:03:56Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessRuntimeImpl.java", "diffHunk": "@@ -77,219 +77,211 @@\n import org.kie.services.time.impl.CommandServiceTimerJobFactoryManager;\n \n public class ProcessRuntimeImpl implements InternalProcessRuntime {\n-\t\n-\tprivate InternalKnowledgeRuntime kruntime;\n-\t\n-\tprivate ProcessInstanceManager processInstanceManager;\n-\tprivate SignalManager signalManager;\n-\tprivate JobsService jobService;\n-\tprivate ProcessEventSupport processEventSupport;\n-\tprivate UnitOfWorkManager unitOfWorkManager;\n-\n-\tpublic ProcessRuntimeImpl(InternalKnowledgeRuntime kruntime) {\n-\t\tthis.kruntime = kruntime;\n+\n+    private InternalKnowledgeRuntime kruntime;\n+    private ProcessInstanceManager processInstanceManager;\n+    private SignalManager signalManager;\n+    private JobsService jobService;\n+    private ProcessEventSupport processEventSupport;\n+    private UnitOfWorkManager unitOfWorkManager;\n+\n+    public ProcessRuntimeImpl(InternalKnowledgeRuntime kruntime) {\n+        this.kruntime = kruntime;\n         TimerService timerService = kruntime.getTimerService();\n-        if ( !(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager) ) {\n-            timerService.setTimerJobFactoryManager( new ThreadSafeTrackableTimeJobFactoryManager() );\n+        if (!(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager)) {\n+            timerService.setTimerJobFactoryManager(new ThreadSafeTrackableTimeJobFactoryManager());\n         }\n \n-\t\t((CompositeClassLoader) getRootClassLoader()).addClassLoader( getClass().getClassLoader() );\n-\t\tinitProcessInstanceManager();\n-\t\tinitSignalManager();\t\t\n-\t\tunitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-\t\tjobService = new InMemoryJobService(this, unitOfWorkManager);\n+        ((CompositeClassLoader) getRootClassLoader()).addClassLoader(getClass().getClassLoader());\n+        initProcessInstanceManager();\n+        initSignalManager();\n+        unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n+        jobService = new InMemoryJobService(this, unitOfWorkManager);\n         processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n         if (isActive()) {\n-            initProcessEventListeners();                   \n+            initProcessEventListeners();\n             initStartTimers();\n         }\n-        initProcessActivationListener(); \n-\t}\n-\t\n-\tpublic void initStartTimers() {\n-\t    KieBase kbase = kruntime.getKieBase();\n+        initProcessActivationListener();\n+    }\n+\n+    public ProcessRuntimeImpl(InternalWorkingMemory workingMemory) {\n+        TimerService timerService = workingMemory.getTimerService();\n+        if (!(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager)) {\n+            timerService.setTimerJobFactoryManager(new ThreadSafeTrackableTimeJobFactoryManager());\n+        }\n+\n+        this.kruntime = (InternalKnowledgeRuntime) workingMemory.getKnowledgeRuntime();\n+        initProcessInstanceManager();\n+        initSignalManager();\n+        unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n+        jobService = new InMemoryJobService(this, unitOfWorkManager);\n+        processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n+        if (isActive()) {\n+            initProcessEventListeners();\n+            initStartTimers();\n+        }\n+        initProcessActivationListener();\n+    }\n+\n+    public void initStartTimers() {\n+        KieBase kbase = kruntime.getKieBase();\n         Collection<Process> processes = kbase.getProcesses();\n         for (Process process : processes) {\n             RuleFlowProcess p = (RuleFlowProcess) process;\n             List<StartNode> startNodes = p.getTimerStart();\n             if (startNodes != null && !startNodes.isEmpty()) {\n-                \n+\n                 for (StartNode startNode : startNodes) {\n                     if (startNode != null && startNode.getTimer() != null) {\n-                                               \n-                        jobService.scheduleProcessJob(ProcessJobDescription.of(createTimerInstance(startNode.getTimer(), kruntime), p.getId()));                       \n+                        jobService.scheduleProcessJob(ProcessJobDescription.of(createTimerInstance(startNode.getTimer(), kruntime), p.getId()));\n                     }\n                 }\n             }\n         }\n     }\n \n-\tpublic ProcessRuntimeImpl(InternalWorkingMemory workingMemory) {\n-        TimerService timerService = workingMemory.getTimerService();\n-        if ( !(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager) ) {\n-            timerService.setTimerJobFactoryManager( new ThreadSafeTrackableTimeJobFactoryManager() );\n-        }\n-\t\t\n-\t\tthis.kruntime = (InternalKnowledgeRuntime) workingMemory.getKnowledgeRuntime();\n-\t\tinitProcessInstanceManager();\n-\t\tinitSignalManager();\t\t\n-\t\tunitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-\t\tjobService = new InMemoryJobService(this, unitOfWorkManager);\n-        processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n-        if (isActive()) {\n-            initProcessEventListeners();                   \n-            initStartTimers();\n+    private void initProcessInstanceManager() {\n+        processInstanceManager = new DefaultProcessInstanceManagerFactory().createProcessInstanceManager(kruntime);\n+    }\n+\n+    private void initSignalManager() {\n+        signalManager = new DefaultSignalManagerFactory().createSignalManager(kruntime);\n+    }\n+\n+    private ClassLoader getRootClassLoader() {\n+        KieBase kbase = ((InternalKnowledgeBase) kruntime.getKieBase());\n+        if (kbase != null) {\n+            return ((InternalKnowledgeBase) kbase).getRootClassLoader();\n         }\n-        initProcessActivationListener();\n-\t}\n-\t\n-\tprivate void initProcessInstanceManager() {\n-\t\tprocessInstanceManager = new DefaultProcessInstanceManagerFactory().createProcessInstanceManager(kruntime);\n-\t\t\n-\t}\n-\t\n-\tprivate void initSignalManager() {\t\n-\t\tsignalManager = new DefaultSignalManagerFactory().createSignalManager(kruntime);\n-\t\t\n-\t}\n-\t\n-\tprivate ClassLoader getRootClassLoader() {\n-\t\tKieBase kbase = ((InternalKnowledgeBase) kruntime.getKieBase());\n-\t\tif (kbase != null) {\n-\t\t\treturn ((InternalKnowledgeBase) kbase).getRootClassLoader();\n-\t\t}\n-\t\tCompositeClassLoader result = new CompositeClassLoader();\n-\t\tresult.addClassLoader(Thread.currentThread().getContextClassLoader());\n-\t\treturn result;\n-\t}\n-\t\n+        CompositeClassLoader result = new CompositeClassLoader();\n+        result.addClassLoader(Thread.currentThread().getContextClassLoader());\n+        return result;\n+    }\n+\n     public ProcessInstance startProcess(final String processId) {\n         return startProcess(processId, null);\n     }\n \n     public ProcessInstance startProcess(String processId,\n                                         Map<String, Object> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f364b98765c05b8c8b5ed1b3caa06a42e5f9188"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0MTc2OA==", "bodyText": "this is a leftover from a previous style, we used to enforce one parameter per line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/475#discussion_r416741768", "createdAt": "2020-04-28T16:11:39Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessRuntimeImpl.java", "diffHunk": "@@ -77,219 +77,211 @@\n import org.kie.services.time.impl.CommandServiceTimerJobFactoryManager;\n \n public class ProcessRuntimeImpl implements InternalProcessRuntime {\n-\t\n-\tprivate InternalKnowledgeRuntime kruntime;\n-\t\n-\tprivate ProcessInstanceManager processInstanceManager;\n-\tprivate SignalManager signalManager;\n-\tprivate JobsService jobService;\n-\tprivate ProcessEventSupport processEventSupport;\n-\tprivate UnitOfWorkManager unitOfWorkManager;\n-\n-\tpublic ProcessRuntimeImpl(InternalKnowledgeRuntime kruntime) {\n-\t\tthis.kruntime = kruntime;\n+\n+    private InternalKnowledgeRuntime kruntime;\n+    private ProcessInstanceManager processInstanceManager;\n+    private SignalManager signalManager;\n+    private JobsService jobService;\n+    private ProcessEventSupport processEventSupport;\n+    private UnitOfWorkManager unitOfWorkManager;\n+\n+    public ProcessRuntimeImpl(InternalKnowledgeRuntime kruntime) {\n+        this.kruntime = kruntime;\n         TimerService timerService = kruntime.getTimerService();\n-        if ( !(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager) ) {\n-            timerService.setTimerJobFactoryManager( new ThreadSafeTrackableTimeJobFactoryManager() );\n+        if (!(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager)) {\n+            timerService.setTimerJobFactoryManager(new ThreadSafeTrackableTimeJobFactoryManager());\n         }\n \n-\t\t((CompositeClassLoader) getRootClassLoader()).addClassLoader( getClass().getClassLoader() );\n-\t\tinitProcessInstanceManager();\n-\t\tinitSignalManager();\t\t\n-\t\tunitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-\t\tjobService = new InMemoryJobService(this, unitOfWorkManager);\n+        ((CompositeClassLoader) getRootClassLoader()).addClassLoader(getClass().getClassLoader());\n+        initProcessInstanceManager();\n+        initSignalManager();\n+        unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n+        jobService = new InMemoryJobService(this, unitOfWorkManager);\n         processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n         if (isActive()) {\n-            initProcessEventListeners();                   \n+            initProcessEventListeners();\n             initStartTimers();\n         }\n-        initProcessActivationListener(); \n-\t}\n-\t\n-\tpublic void initStartTimers() {\n-\t    KieBase kbase = kruntime.getKieBase();\n+        initProcessActivationListener();\n+    }\n+\n+    public ProcessRuntimeImpl(InternalWorkingMemory workingMemory) {\n+        TimerService timerService = workingMemory.getTimerService();\n+        if (!(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager)) {\n+            timerService.setTimerJobFactoryManager(new ThreadSafeTrackableTimeJobFactoryManager());\n+        }\n+\n+        this.kruntime = (InternalKnowledgeRuntime) workingMemory.getKnowledgeRuntime();\n+        initProcessInstanceManager();\n+        initSignalManager();\n+        unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n+        jobService = new InMemoryJobService(this, unitOfWorkManager);\n+        processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n+        if (isActive()) {\n+            initProcessEventListeners();\n+            initStartTimers();\n+        }\n+        initProcessActivationListener();\n+    }\n+\n+    public void initStartTimers() {\n+        KieBase kbase = kruntime.getKieBase();\n         Collection<Process> processes = kbase.getProcesses();\n         for (Process process : processes) {\n             RuleFlowProcess p = (RuleFlowProcess) process;\n             List<StartNode> startNodes = p.getTimerStart();\n             if (startNodes != null && !startNodes.isEmpty()) {\n-                \n+\n                 for (StartNode startNode : startNodes) {\n                     if (startNode != null && startNode.getTimer() != null) {\n-                                               \n-                        jobService.scheduleProcessJob(ProcessJobDescription.of(createTimerInstance(startNode.getTimer(), kruntime), p.getId()));                       \n+                        jobService.scheduleProcessJob(ProcessJobDescription.of(createTimerInstance(startNode.getTimer(), kruntime), p.getId()));\n                     }\n                 }\n             }\n         }\n     }\n \n-\tpublic ProcessRuntimeImpl(InternalWorkingMemory workingMemory) {\n-        TimerService timerService = workingMemory.getTimerService();\n-        if ( !(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager) ) {\n-            timerService.setTimerJobFactoryManager( new ThreadSafeTrackableTimeJobFactoryManager() );\n-        }\n-\t\t\n-\t\tthis.kruntime = (InternalKnowledgeRuntime) workingMemory.getKnowledgeRuntime();\n-\t\tinitProcessInstanceManager();\n-\t\tinitSignalManager();\t\t\n-\t\tunitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-\t\tjobService = new InMemoryJobService(this, unitOfWorkManager);\n-        processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n-        if (isActive()) {\n-            initProcessEventListeners();                   \n-            initStartTimers();\n+    private void initProcessInstanceManager() {\n+        processInstanceManager = new DefaultProcessInstanceManagerFactory().createProcessInstanceManager(kruntime);\n+    }\n+\n+    private void initSignalManager() {\n+        signalManager = new DefaultSignalManagerFactory().createSignalManager(kruntime);\n+    }\n+\n+    private ClassLoader getRootClassLoader() {\n+        KieBase kbase = ((InternalKnowledgeBase) kruntime.getKieBase());\n+        if (kbase != null) {\n+            return ((InternalKnowledgeBase) kbase).getRootClassLoader();\n         }\n-        initProcessActivationListener();\n-\t}\n-\t\n-\tprivate void initProcessInstanceManager() {\n-\t\tprocessInstanceManager = new DefaultProcessInstanceManagerFactory().createProcessInstanceManager(kruntime);\n-\t\t\n-\t}\n-\t\n-\tprivate void initSignalManager() {\t\n-\t\tsignalManager = new DefaultSignalManagerFactory().createSignalManager(kruntime);\n-\t\t\n-\t}\n-\t\n-\tprivate ClassLoader getRootClassLoader() {\n-\t\tKieBase kbase = ((InternalKnowledgeBase) kruntime.getKieBase());\n-\t\tif (kbase != null) {\n-\t\t\treturn ((InternalKnowledgeBase) kbase).getRootClassLoader();\n-\t\t}\n-\t\tCompositeClassLoader result = new CompositeClassLoader();\n-\t\tresult.addClassLoader(Thread.currentThread().getContextClassLoader());\n-\t\treturn result;\n-\t}\n-\t\n+        CompositeClassLoader result = new CompositeClassLoader();\n+        result.addClassLoader(Thread.currentThread().getContextClassLoader());\n+        return result;\n+    }\n+\n     public ProcessInstance startProcess(final String processId) {\n         return startProcess(processId, null);\n     }\n \n     public ProcessInstance startProcess(String processId,\n                                         Map<String, Object> parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNjIyOA=="}, "originalCommit": {"oid": "3f364b98765c05b8c8b5ed1b3caa06a42e5f9188"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0Nzg4OA==", "bodyText": "thanks", "url": "https://github.com/kiegroup/kogito-runtimes/pull/475#discussion_r416747888", "createdAt": "2020-04-28T16:20:05Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/ProcessRuntimeImpl.java", "diffHunk": "@@ -77,219 +77,211 @@\n import org.kie.services.time.impl.CommandServiceTimerJobFactoryManager;\n \n public class ProcessRuntimeImpl implements InternalProcessRuntime {\n-\t\n-\tprivate InternalKnowledgeRuntime kruntime;\n-\t\n-\tprivate ProcessInstanceManager processInstanceManager;\n-\tprivate SignalManager signalManager;\n-\tprivate JobsService jobService;\n-\tprivate ProcessEventSupport processEventSupport;\n-\tprivate UnitOfWorkManager unitOfWorkManager;\n-\n-\tpublic ProcessRuntimeImpl(InternalKnowledgeRuntime kruntime) {\n-\t\tthis.kruntime = kruntime;\n+\n+    private InternalKnowledgeRuntime kruntime;\n+    private ProcessInstanceManager processInstanceManager;\n+    private SignalManager signalManager;\n+    private JobsService jobService;\n+    private ProcessEventSupport processEventSupport;\n+    private UnitOfWorkManager unitOfWorkManager;\n+\n+    public ProcessRuntimeImpl(InternalKnowledgeRuntime kruntime) {\n+        this.kruntime = kruntime;\n         TimerService timerService = kruntime.getTimerService();\n-        if ( !(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager) ) {\n-            timerService.setTimerJobFactoryManager( new ThreadSafeTrackableTimeJobFactoryManager() );\n+        if (!(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager)) {\n+            timerService.setTimerJobFactoryManager(new ThreadSafeTrackableTimeJobFactoryManager());\n         }\n \n-\t\t((CompositeClassLoader) getRootClassLoader()).addClassLoader( getClass().getClassLoader() );\n-\t\tinitProcessInstanceManager();\n-\t\tinitSignalManager();\t\t\n-\t\tunitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-\t\tjobService = new InMemoryJobService(this, unitOfWorkManager);\n+        ((CompositeClassLoader) getRootClassLoader()).addClassLoader(getClass().getClassLoader());\n+        initProcessInstanceManager();\n+        initSignalManager();\n+        unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n+        jobService = new InMemoryJobService(this, unitOfWorkManager);\n         processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n         if (isActive()) {\n-            initProcessEventListeners();                   \n+            initProcessEventListeners();\n             initStartTimers();\n         }\n-        initProcessActivationListener(); \n-\t}\n-\t\n-\tpublic void initStartTimers() {\n-\t    KieBase kbase = kruntime.getKieBase();\n+        initProcessActivationListener();\n+    }\n+\n+    public ProcessRuntimeImpl(InternalWorkingMemory workingMemory) {\n+        TimerService timerService = workingMemory.getTimerService();\n+        if (!(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager)) {\n+            timerService.setTimerJobFactoryManager(new ThreadSafeTrackableTimeJobFactoryManager());\n+        }\n+\n+        this.kruntime = (InternalKnowledgeRuntime) workingMemory.getKnowledgeRuntime();\n+        initProcessInstanceManager();\n+        initSignalManager();\n+        unitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n+        jobService = new InMemoryJobService(this, unitOfWorkManager);\n+        processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n+        if (isActive()) {\n+            initProcessEventListeners();\n+            initStartTimers();\n+        }\n+        initProcessActivationListener();\n+    }\n+\n+    public void initStartTimers() {\n+        KieBase kbase = kruntime.getKieBase();\n         Collection<Process> processes = kbase.getProcesses();\n         for (Process process : processes) {\n             RuleFlowProcess p = (RuleFlowProcess) process;\n             List<StartNode> startNodes = p.getTimerStart();\n             if (startNodes != null && !startNodes.isEmpty()) {\n-                \n+\n                 for (StartNode startNode : startNodes) {\n                     if (startNode != null && startNode.getTimer() != null) {\n-                                               \n-                        jobService.scheduleProcessJob(ProcessJobDescription.of(createTimerInstance(startNode.getTimer(), kruntime), p.getId()));                       \n+                        jobService.scheduleProcessJob(ProcessJobDescription.of(createTimerInstance(startNode.getTimer(), kruntime), p.getId()));\n                     }\n                 }\n             }\n         }\n     }\n \n-\tpublic ProcessRuntimeImpl(InternalWorkingMemory workingMemory) {\n-        TimerService timerService = workingMemory.getTimerService();\n-        if ( !(timerService.getTimerJobFactoryManager() instanceof CommandServiceTimerJobFactoryManager) ) {\n-            timerService.setTimerJobFactoryManager( new ThreadSafeTrackableTimeJobFactoryManager() );\n-        }\n-\t\t\n-\t\tthis.kruntime = (InternalKnowledgeRuntime) workingMemory.getKnowledgeRuntime();\n-\t\tinitProcessInstanceManager();\n-\t\tinitSignalManager();\t\t\n-\t\tunitOfWorkManager = new DefaultUnitOfWorkManager(new CollectingUnitOfWorkFactory());\n-\t\tjobService = new InMemoryJobService(this, unitOfWorkManager);\n-        processEventSupport = new ProcessEventSupport(unitOfWorkManager);\n-        if (isActive()) {\n-            initProcessEventListeners();                   \n-            initStartTimers();\n+    private void initProcessInstanceManager() {\n+        processInstanceManager = new DefaultProcessInstanceManagerFactory().createProcessInstanceManager(kruntime);\n+    }\n+\n+    private void initSignalManager() {\n+        signalManager = new DefaultSignalManagerFactory().createSignalManager(kruntime);\n+    }\n+\n+    private ClassLoader getRootClassLoader() {\n+        KieBase kbase = ((InternalKnowledgeBase) kruntime.getKieBase());\n+        if (kbase != null) {\n+            return ((InternalKnowledgeBase) kbase).getRootClassLoader();\n         }\n-        initProcessActivationListener();\n-\t}\n-\t\n-\tprivate void initProcessInstanceManager() {\n-\t\tprocessInstanceManager = new DefaultProcessInstanceManagerFactory().createProcessInstanceManager(kruntime);\n-\t\t\n-\t}\n-\t\n-\tprivate void initSignalManager() {\t\n-\t\tsignalManager = new DefaultSignalManagerFactory().createSignalManager(kruntime);\n-\t\t\n-\t}\n-\t\n-\tprivate ClassLoader getRootClassLoader() {\n-\t\tKieBase kbase = ((InternalKnowledgeBase) kruntime.getKieBase());\n-\t\tif (kbase != null) {\n-\t\t\treturn ((InternalKnowledgeBase) kbase).getRootClassLoader();\n-\t\t}\n-\t\tCompositeClassLoader result = new CompositeClassLoader();\n-\t\tresult.addClassLoader(Thread.currentThread().getContextClassLoader());\n-\t\treturn result;\n-\t}\n-\t\n+        CompositeClassLoader result = new CompositeClassLoader();\n+        result.addClassLoader(Thread.currentThread().getContextClassLoader());\n+        return result;\n+    }\n+\n     public ProcessInstance startProcess(final String processId) {\n         return startProcess(processId, null);\n     }\n \n     public ProcessInstance startProcess(String processId,\n                                         Map<String, Object> parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNjIyOA=="}, "originalCommit": {"oid": "3f364b98765c05b8c8b5ed1b3caa06a42e5f9188"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 55, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}