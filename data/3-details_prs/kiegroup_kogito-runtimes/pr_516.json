{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMTAzNDU2", "number": 516, "title": "KOGITO-2215 - generate operational and domain specific grafana dashboards", "bodyText": "Jira link: https://issues.redhat.com/browse/KOGITO-2215\nAt the moment, when the prometheus-addon-monitoring addon is on, only one big dashboard is generated.\nFor dmn endpoints it contains both operational and domain specific metrics graphs.\nFor rules endpoints it contains only operational metrics.\nAs requested in the jira issue, it's better to generate two separated dashboards: one for the operational metrics and one for the domain specific metrics. Some other pull requests will follow in the future, since we will add more metrics in both.\nWith this PR, the grafana portal looks like this (using the kogito-app in kogito-examples/dmn-drools-metrics-example):\n\nThe domain specific dashboard:\n\nAnd the operational one:", "createdAt": "2020-05-19T13:00:02Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516", "merged": true, "mergeCommit": {"oid": "88f70ebe3cab85203bcf260e992cebfa6ee5a3e1"}, "closed": true, "closedAt": "2020-05-22T12:45:05Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciz7MJgH2gAyNDIwMTAzNDU2OjAyMDU4ZTg1MmUwOTBkM2YwYWQzOGQ2YmFjNjZkNzQwNTMwZTMwYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjvK7DAFqTQxNjc4NzQ2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/02058e852e090d3f0ad38d6bac66d740530e30a6", "committedDate": "2020-05-19T12:49:19Z", "message": "generate operational and domain specific grafana dashboards"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDUwNzU3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#pullrequestreview-414450757", "createdAt": "2020-05-19T13:35:02Z", "commit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozNTowMlrOGXgtlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozNTowMlrOGXgtlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNjM4OQ==", "bodyText": "is this intended?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427306389", "createdAt": "2020-05-19T13:35:02Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/grafana-dashboard-template/operational-dashboard-template.json", "diffHunk": "@@ -481,7 +481,7 @@\n     ]\n   },\n   \"timezone\": \"\",\n-  \"title\": \"$handlerName$ endpoint metrics\",\n+  \"title\": \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MjQ4Mjg1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#pullrequestreview-415248285", "createdAt": "2020-05-20T11:43:09Z", "commit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0MzowOVrOGYHlgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0OTowOFrOGYHxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzI5Nw==", "bodyText": "Is it possible to have a null type?\nCan you please log (warning?) the node ID in this case?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427943297", "createdAt": "2020-05-20T11:43:09Z", "author": {"login": "danielezonca"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -39,60 +41,52 @@ private GrafanaConfigurationWriter() {\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates an operational grafana dashboard based on a given template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param handlerName: The name of the endpoint.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param handlerName:  The name of the endpoint.\n      * @return: The template customized for the endpoint.\n      */\n-    public static String generateDashboardForEndpoint(String templatePath, String handlerName) {\n+    public static String generateOperationalDashboard(String templatePath, String handlerName) throws IOException {\n         String template = readStandardDashboard(templatePath);\n-        return customizeTemplate(template, handlerName);\n+        template = customizeTemplate(template, handlerName);\n+        JGrafana jgrafana;\n+        jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint operational dashboard\", handlerName));\n+\n+        return jgrafana.serialize();\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates domain specific dashboard from a given dashboard template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param endpoint: The name of the endpoint.\n-     * @param decisions: The decisions in the DMN model.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param endpoint:     The name of the endpoint.\n+     * @param decisions:    The decisions in the DMN model.\n      * @return: The customized template containing also specific panels for the DMN decisions that have been specified in the arguments.\n      */\n-    public static String generateDashboardForDMNEndpoint(String templatePath, String endpoint, List<Decision> decisions) {\n+    public static String generateDomainSpecificDMNDashboard(String templatePath, String endpoint, List<Decision> decisions) throws IOException {\n         String template = readStandardDashboard(templatePath);\n         template = customizeTemplate(template, endpoint);\n \n-        JGrafana jgrafana;\n-        try {\n-            jgrafana = JGrafana.parse(template);\n-        } catch (IOException e) {\n-            logger.warn(\"Could not read the grafana dashboard template.\", e);\n-            return null;\n-        }\n+        JGrafana jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint domain specific dashboard\", endpoint));\n \n         for (Decision decision : decisions) {\n-            String type = decision.getVariable().getTypeRef().getLocalPart();\n-            if (SupportedDecisionTypes.isSupported(type)) {\n+            QName type = decision.getVariable().getTypeRef();\n+            if (type != null && SupportedDecisionTypes.isSupported(type.getLocalPart())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDIyNw==", "bodyText": "I think error fit better", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427944227", "createdAt": "2020-05-20T11:44:59Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -168,16 +171,29 @@ public DecisionContainerGenerator moduleGenerator() {\n         return generatedFiles;\n     }\n \n-    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+    private void generateAndStoreGrafanaDashboards(DMNRestResourceGenerator resourceGenerator) {\n         Definitions definitions = resourceGenerator.getDmnModel().getDefinitions();\n         List<Decision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof Decision).map(x -> (Decision) x).collect(Collectors.toList());\n \n-        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(grafanaTemplatePath, resourceGenerator.getNameURL(), decisions);\n+        String operationalDashboard = null;\n+        String domainDashboard = null;\n+\n+        try {\n+            operationalDashboard = GrafanaConfigurationWriter.generateOperationalDashboard(operationalDashboardDmnTemplate, resourceGenerator.getNameURL());\n+            domainDashboard = GrafanaConfigurationWriter.generateDomainSpecificDMNDashboard(domainDashboardDmnTemplate, resourceGenerator.getNameURL(), decisions);\n+        } catch (IOException e) {\n+            logger.warn(\"Could not create the grafana dashboards for the endpoint \" + resourceGenerator.getNameURL(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDQwNg==", "bodyText": "Can you please format both method invocation in the same way?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427944406", "createdAt": "2020-05-20T11:45:23Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -168,16 +171,29 @@ public DecisionContainerGenerator moduleGenerator() {\n         return generatedFiles;\n     }\n \n-    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+    private void generateAndStoreGrafanaDashboards(DMNRestResourceGenerator resourceGenerator) {\n         Definitions definitions = resourceGenerator.getDmnModel().getDefinitions();\n         List<Decision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof Decision).map(x -> (Decision) x).collect(Collectors.toList());\n \n-        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(grafanaTemplatePath, resourceGenerator.getNameURL(), decisions);\n+        String operationalDashboard = null;\n+        String domainDashboard = null;\n+\n+        try {\n+            operationalDashboard = GrafanaConfigurationWriter.generateOperationalDashboard(operationalDashboardDmnTemplate, resourceGenerator.getNameURL());\n+            domainDashboard = GrafanaConfigurationWriter.generateDomainSpecificDMNDashboard(domainDashboardDmnTemplate, resourceGenerator.getNameURL(), decisions);\n+        } catch (IOException e) {\n+            logger.warn(\"Could not create the grafana dashboards for the endpoint \" + resourceGenerator.getNameURL(), e);\n+            return;\n+        }\n+\n+        generatedFiles.add(new org.kie.kogito.codegen.GeneratedFile( org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                                                                     \"dashboards/operational-dashboard-\" + resourceGenerator.getNameURL() + \".json\",\n+                                                                     operationalDashboard));\n         generatedFiles.add(\n                 new org.kie.kogito.codegen.GeneratedFile(\n                         org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n-                        \"dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",\n-                        dashboard));\n+                        \"dashboards/domain-dashboard-\" + resourceGenerator.getNameURL() + \".json\",\n+                        domainDashboard));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTg3NQ==", "bodyText": "Can you please try-catch the checked exception, log it and propagate a runtime exception?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427945875", "createdAt": "2020-05-20T11:48:18Z", "author": {"login": "danielezonca"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -39,60 +41,52 @@ private GrafanaConfigurationWriter() {\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates an operational grafana dashboard based on a given template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param handlerName: The name of the endpoint.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param handlerName:  The name of the endpoint.\n      * @return: The template customized for the endpoint.\n      */\n-    public static String generateDashboardForEndpoint(String templatePath, String handlerName) {\n+    public static String generateOperationalDashboard(String templatePath, String handlerName) throws IOException {\n         String template = readStandardDashboard(templatePath);\n-        return customizeTemplate(template, handlerName);\n+        template = customizeTemplate(template, handlerName);\n+        JGrafana jgrafana;\n+        jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint operational dashboard\", handlerName));\n+\n+        return jgrafana.serialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NjI3MQ==", "bodyText": "Why have you decided to propagate IOException? I prefer the previous code :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427946271", "createdAt": "2020-05-20T11:49:08Z", "author": {"login": "danielezonca"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -39,60 +41,52 @@ private GrafanaConfigurationWriter() {\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates an operational grafana dashboard based on a given template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param handlerName: The name of the endpoint.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param handlerName:  The name of the endpoint.\n      * @return: The template customized for the endpoint.\n      */\n-    public static String generateDashboardForEndpoint(String templatePath, String handlerName) {\n+    public static String generateOperationalDashboard(String templatePath, String handlerName) throws IOException {\n         String template = readStandardDashboard(templatePath);\n-        return customizeTemplate(template, handlerName);\n+        template = customizeTemplate(template, handlerName);\n+        JGrafana jgrafana;\n+        jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint operational dashboard\", handlerName));\n+\n+        return jgrafana.serialize();\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates domain specific dashboard from a given dashboard template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param endpoint: The name of the endpoint.\n-     * @param decisions: The decisions in the DMN model.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param endpoint:     The name of the endpoint.\n+     * @param decisions:    The decisions in the DMN model.\n      * @return: The customized template containing also specific panels for the DMN decisions that have been specified in the arguments.\n      */\n-    public static String generateDashboardForDMNEndpoint(String templatePath, String endpoint, List<Decision> decisions) {\n+    public static String generateDomainSpecificDMNDashboard(String templatePath, String endpoint, List<Decision> decisions) throws IOException {\n         String template = readStandardDashboard(templatePath);\n         template = customizeTemplate(template, endpoint);\n \n-        JGrafana jgrafana;\n-        try {\n-            jgrafana = JGrafana.parse(template);\n-        } catch (IOException e) {\n-            logger.warn(\"Could not read the grafana dashboard template.\", e);\n-            return null;\n-        }\n+        JGrafana jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint domain specific dashboard\", endpoint));\n \n         for (Decision decision : decisions) {\n-            String type = decision.getVariable().getTypeRef().getLocalPart();\n-            if (SupportedDecisionTypes.isSupported(type)) {\n+            QName type = decision.getVariable().getTypeRef();\n+            if (type != null && SupportedDecisionTypes.isSupported(type.getLocalPart())) {\n                 jgrafana.addPanel(PanelType.GRAPH,\n                                   \"Decision \" + decision.getName(),\n                                   String.format(\"%s_dmn_result{endpoint = \\\"%s\\\", decision = \\\"%s\\\"}\",\n                                                 type,\n                                                 endpoint,\n                                                 decision.getName()),\n-                                  SupportedDecisionTypes.getGrafanaFunction(type));\n+                                  SupportedDecisionTypes.getGrafanaFunction(type.getLocalPart()));\n             }\n         }\n \n-        try {\n-            return jgrafana.serialize();\n-        } catch (IOException e) {\n-            logger.warn(\"Could not serialize the grafana dashboard template.\", e);\n-            return null;\n-        }\n+        return jgrafana.serialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9ba96ef3e718fb2a9eecb715ea5161f0f54e3c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ec9ba96ef3e718fb2a9eecb715ea5161f0f54e3c", "committedDate": "2020-05-20T12:14:52Z", "message": "Move to unchecked exceptions and fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MjcyNDEx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#pullrequestreview-415272411", "createdAt": "2020-05-20T12:17:36Z", "commit": {"oid": "ec9ba96ef3e718fb2a9eecb715ea5161f0f54e3c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3487f2596ed7bb47e38e676baaf1720fd07e83ff", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3487f2596ed7bb47e38e676baaf1720fd07e83ff", "committedDate": "2020-05-21T08:09:16Z", "message": "Merge branch 'master' into KOGITO-2215-split-dashboards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68914eb3f1a1d40cf12d788276c6e023edb14c34", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/68914eb3f1a1d40cf12d788276c6e023edb14c34", "committedDate": "2020-05-21T13:07:56Z", "message": "Merge branch 'master' into KOGITO-2215-split-dashboards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ba588cb8e99a07aa2d678d35e26b32ca4ff8ac", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e3ba588cb8e99a07aa2d678d35e26b32ca4ff8ac", "committedDate": "2020-05-21T13:16:59Z", "message": "update dmn dashboard test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Nzg3NDY2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#pullrequestreview-416787466", "createdAt": "2020-05-22T09:50:54Z", "commit": {"oid": "e3ba588cb8e99a07aa2d678d35e26b32ca4ff8ac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3503, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}