{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNTMyNzI3", "number": 891, "title": "[KOGITO-3700] [KOGITO-3699] Migration to Spring Web API", "bodyText": "Centralize all changes regarding migration to Spring Web APIs\nRelated:\nkiegroup/kogito-apps#538\nkiegroup/kogito-examples#455\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-11-13T11:46:09Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891", "merged": true, "mergeCommit": {"oid": "97903f9abb6afe51820871e3cd73f8685b4656a5"}, "closed": true, "closedAt": "2020-12-04T13:12:59Z", "author": {"login": "tiagodolphine"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddFWyJgFqTUzMTMzOTE0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi0WTUgFqTU0NDc4OTkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMzM5MTQz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-531339143", "createdAt": "2020-11-16T13:54:17Z", "commit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1NDoxN1rOHz_tUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzo1NTowNVrOHz_vag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4MzIxOA==", "bodyText": "why this modification is needed, resulting in a non-encoded String? (was: %20 proposed:  )", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r524283218", "createdAt": "2020-11-16T13:54:17Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -79,16 +84,18 @@ public DecisionRestResourceGenerator(DMNModel model, String appCanonicalName) {\n         this.packageName = CodegenStringUtil.escapeIdentifier(model.getNamespace());\n         this.decisionId = model.getDefinitions().getId();\n         this.decisionName = CodegenStringUtil.escapeIdentifier(model.getName());\n-        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \"%20\");\n+        this.nameURL = URLEncoder.encode(model.getName()).replace(\"+\", \" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4Mzc1NA==", "bodyText": "what would be the valorization for \"whole-model\", please?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r524283754", "createdAt": "2020-11-16T13:55:05Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/resources/class-templates/DecisionRestResourceTemplate.java", "diffHunk": "@@ -25,6 +25,7 @@\n     private org.jboss.resteasy.spi.HttpResponse httpResponse;\n \n     @POST\n+    @Path(\"/$dmnMethodUrl$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df99ce3b0b705a2399a4fab19b4fb1188892dfea", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/df99ce3b0b705a2399a4fab19b4fb1188892dfea", "committedDate": "2020-11-12T19:49:04Z", "message": "fix PMMLRestResourceGeneratorTest"}, "afterCommit": {"oid": "5e4aa33486613b2053d2205761563394907605ad", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5e4aa33486613b2053d2205761563394907605ad", "committedDate": "2020-11-16T17:36:29Z", "message": "fix PMMLRestResourceGeneratorTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b244b2f0b208cf97db6942e565e77567988477c", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0b244b2f0b208cf97db6942e565e77567988477c", "committedDate": "2020-11-18T17:34:45Z", "message": "trying to fix broken test on CI"}, "afterCommit": {"oid": "368b27877f51d0bf2e50831524d7e19067171aa1", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/368b27877f51d0bf2e50831524d7e19067171aa1", "committedDate": "2020-11-18T18:35:50Z", "message": "trying to fix broken test on CI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a084c0b75a78c24598091d59ba5138d75e5c18d", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7a084c0b75a78c24598091d59ba5138d75e5c18d", "committedDate": "2020-11-19T12:31:12Z", "message": "update TopicInformationResourceTest for springboot"}, "afterCommit": {"oid": "2bd92e97b90d7a34de13b1a87bcad8a5d7b5f6bb", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2bd92e97b90d7a34de13b1a87bcad8a5d7b5f6bb", "committedDate": "2020-11-26T14:05:36Z", "message": "migrate rules endpoints to use spring apis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTg1NzY0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-540185764", "createdAt": "2020-11-27T20:39:14Z", "commit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMDozOToxNFrOH7JTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMDozOToxNFrOH7JTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4MDUxNw==", "bodyText": "Thanks! \u2764\ufe0f", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r531780517", "createdAt": "2020-11-27T20:39:14Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/resources/class-templates/events/SpringTopicsInformationResourceTemplate.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.kie.kogito.app;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.kogito.event.Topic;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.http.ResponseEntity;\n+\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@RestController\n+@RequestMapping(\"/messaging/topics\")\n+public class TopicsInformationResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTg2MzQx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-540186341", "createdAt": "2020-11-27T20:42:01Z", "commit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTA3NTQ0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-540907544", "createdAt": "2020-11-30T13:29:53Z", "commit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzMxNzIy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-541331722", "createdAt": "2020-11-30T22:03:41Z", "commit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowMzo0MVrOH8PpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjoxNDozN1rOH8P-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMzA0MA==", "bodyText": "Unused", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r532933040", "createdAt": "2020-11-30T22:03:41Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/OASTest.java", "diffHunk": "@@ -27,16 +27,15 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.springframework.beans.factory.annotation.Value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzODM1Ng==", "bodyText": "Unused?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r532938356", "createdAt": "2020-11-30T22:14:37Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -44,10 +44,13 @@\n import com.github.javaparser.ast.type.Type;\n import org.drools.compiler.compiler.DroolsError;\n import org.drools.modelcompiler.builder.QueryModel;\n+import org.kie.api.definition.rule.Query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjA0NTQ0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-542604544", "createdAt": "2020-12-02T08:41:44Z", "commit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a93c61ed9104ac16a7e8a56106a6680a60f89d57", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a93c61ed9104ac16a7e8a56106a6680a60f89d57", "committedDate": "2020-11-26T18:09:11Z", "message": "Fix SpringDecisionRestResourceTemplate to insert response headers properly"}, "afterCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/81e01a972a9fb6e1eec9870b390a036f9806c0be", "committedDate": "2020-12-02T19:50:04Z", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTI0MzM3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-544124337", "createdAt": "2020-12-03T16:09:58Z", "commit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowOTo1OFrOH-kcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoxMDo0MlrOH-ke1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MDg1Ng==", "bodyText": "I think we should leave the checkError() call here to notify about possible issues with start of the task.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535370856", "createdAt": "2020-12-03T16:09:58Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTEyNA==", "bodyText": "Same here, checkError() is missing.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535371124", "createdAt": "2020-12-03T16:10:16Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -36,45 +36,49 @@\n                             .filter(wi -> wi.getName().equals(\"$taskName$\"))\n                             .findFirst();\n                         if (task.isPresent()) {\n-                            UriComponents uriComponents = uriComponentsBuilder.path(\"/{taskId}\").buildAndExpand(task.get().getId());\n+                            UriComponents uriComponents =\n+                                    uriComponentsBuilder.path(\"/$name$/{id}/$taskName$/{taskId}\")\n+                                            .buildAndExpand(id, task.get().getId());\n                             URI location = uriComponents.toUri();\n                             return ResponseEntity.created(location)\n-                                    .body(pi.checkError().variables().toOutput());\n+                                    .body(pi.variables().toOutput());\n                         }\n                         return new ResponseEntity<$Type$Output>(HttpStatus.NOT_FOUND);\n                     })\n                     .orElseGet(() -> ResponseEntity.notFound().build()));\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+            consumes = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> completeTask(@PathVariable(\"id\") final String id,\n-                                     @PathVariable(\"workItemId\") final String workItemId,\n-                                     @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n-                                     @RequestParam(value = \"user\", required = false) final String user,\n-                                     @RequestParam(value = \"group\", required = false) final List<String> groups,\n-                                     @RequestBody final $TaskOutput$ model) {\n+                                                     @PathVariable(\"workItemId\") final String workItemId,\n+                                                     @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                             \"complete\") final String phase,\n+                                                     @RequestParam(value = \"user\", required = false) final String user,\n+                                                     @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups,\n+                                                     @RequestBody(required = false) final $TaskOutput$ model) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withModel(phase, model, Policies.of(user,\n+                                                                                                            groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3MTQ3Ng==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#discussion_r535371476", "createdAt": "2020-12-03T16:10:42Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -105,23 +109,24 @@\n \n     @DeleteMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<$Type$Output> abortTask(@PathVariable(\"id\") final String id,\n-                                  @PathVariable(\"workItemId\") final String workItemId,\n-                                  @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n-                                  @RequestParam(value = \"user\", required = false) final String user,\n-                                  @RequestParam(value = \"group\", required = false) final List<String> groups) {\n+                                                  @PathVariable(\"workItemId\") final String workItemId,\n+                                                  @RequestParam(value = \"phase\", required = false, defaultValue =\n+                                                          \"abort\") final String phase,\n+                                                  @RequestParam(value = \"user\", required = false) final String user,\n+                                                  @RequestParam(value = \"group\", required = false, defaultValue = \"\") final List<String> groups) {\n         return UnitOfWorkExecutor\n-            .executeInUnitOfWork(\n-                application.unitOfWorkManager(),\n-                () -> process\n-                    .instances()\n-                    .findById(id)\n-                    .map(pi -> {\n-                        pi\n-                            .transitionWorkItem(\n-                                workItemId,\n-                                HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n-                        return ResponseEntity.ok(pi.checkError().variables().toOutput());\n-                    })\n-                    .orElseGet(() -> ResponseEntity.notFound().build()));\n+                .executeInUnitOfWork(\n+                        application.unitOfWorkManager(),\n+                        () -> process\n+                                .instances()\n+                                .findById(id)\n+                                .map(pi -> {\n+                                    pi\n+                                            .transitionWorkItem(\n+                                                    workItemId,\n+                                                    HumanTaskTransition.withoutModel(phase, Policies.of(user, groups)));\n+                                    return ResponseEntity.ok(pi.variables().toOutput());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0274b44e42a9e85155fe7a2daaeb2559e61238ac", "committedDate": "2020-12-03T20:35:08Z", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports\n\napply checkError on SpringRestResourceUserTaskTemplate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81e01a972a9fb6e1eec9870b390a036f9806c0be", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/81e01a972a9fb6e1eec9870b390a036f9806c0be", "committedDate": "2020-12-02T19:50:04Z", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports"}, "afterCommit": {"oid": "0274b44e42a9e85155fe7a2daaeb2559e61238ac", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0274b44e42a9e85155fe7a2daaeb2559e61238ac", "committedDate": "2020-12-03T20:35:08Z", "message": "Update and Activate Spring MVC templates for Processes\n\nUpdate and Activate Spring MVC templates for Processes\n\nskiping topics endpoint generation from spring\n\nDMN spring web migration\n\nDMN spring web migration\n\nadd comment to fix IncrementalRuleCodegen\n\nadding pmml spring templates for endpoints\n\nadding profile and feature toggle for spring web apis\n\ninserting feature toggle for spring apis\n\nmoving feature toggle to kogito internal\n\nfix broken tests\n\nRemoving feature toggle for spring api\n\nexplainability-addon to use spring web api\n\nfix PMMLRestResourceGeneratorTest\n\nKOGITO-3750 Management AddOn SpringBoot migration\n\nAdding topic information endpoints for springboot\n\nKOGITO-3750 Management AddOn SpringBoot test fixes\n\nKOGITO-3750 Use empty list for group membership to replicate same behaviour as Quarkus\n\nAdding topic information endpoints for springboot\n\nCloudEventsResourceGenerator fix\n\nfix CloudEventsResourceGenerator\n\nremoving unused profile from the spring boot integration tests\n\nfix tests with persistence enabled\n\nfix broken infinispan test\n\ntrying to fix broken test on CI\n\ntrying to fix broken test on CI\n\nupdate TopicInformationResourceTest for springboot\n\nKOGITO-3752 Add Rules REST Templated endpoint for Spring MVC support\n\nmigrate rules endpoints to use spring apis\n\nFix SpringDecisionRestResourceTemplate to insert response headers properly\n\nremoving unsued imports\n\napply checkError on SpringRestResourceUserTaskTemplate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzg5OTM2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/891#pullrequestreview-544789936", "createdAt": "2020-12-04T09:30:05Z", "commit": {"oid": "0274b44e42a9e85155fe7a2daaeb2559e61238ac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3855, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}