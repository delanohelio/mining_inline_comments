{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDM0Nzcx", "number": 389, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxOToxNFrODrQz0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToyODoxNVrODrRFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjkwNzcxOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxOToxNFrOF7gPIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxNTo0OVrOF77dtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzODQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testServiceTaskWithAccessoWorkItemInfo() throws Exception {\n          \n          \n            \n                public void testServiceTaskWithAccessToWorkItemInfo() throws Exception {\n          \n      \n    \n    \n  \n\nis that what you mean?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r397938465", "createdAt": "2020-03-25T15:19:14Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -966,6 +1002,29 @@ public void testServiceTask() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n         assertEquals(\"Hello john!\", processInstance.getVariable(\"s\"));\n     }\n+    \n+    @Test\n+    public void testServiceTaskWithAccessoWorkItemInfo() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTc4Ng==", "bodyText": "yes, indeed that was what I meant, will update", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r397975786", "createdAt": "2020-03-25T16:05:19Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -966,6 +1002,29 @@ public void testServiceTask() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n         assertEquals(\"Hello john!\", processInstance.getVariable(\"s\"));\n     }\n+    \n+    @Test\n+    public void testServiceTaskWithAccessoWorkItemInfo() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzODQ2NQ=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDU2NA==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r398384564", "createdAt": "2020-03-26T08:15:49Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ActivityTest.java", "diffHunk": "@@ -966,6 +1002,29 @@ public void testServiceTask() throws Exception {\n         assertProcessInstanceFinished(processInstance, ksession);\n         assertEquals(\"Hello john!\", processInstance.getVariable(\"s\"));\n     }\n+    \n+    @Test\n+    public void testServiceTaskWithAccessoWorkItemInfo() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzODQ2NQ=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjkyOTkzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToyMzozNVrOF7gdFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxNTo0NFrOF77dfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MjAzNg==", "bodyText": "Do we need this var? doesnt seem to be used.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r397942036", "createdAt": "2020-03-25T15:23:35Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "diffHunk": "@@ -41,6 +52,10 @@\n     protected final ProcessRuntimeServiceProvider services;\n \n     protected CompletionEventListener completionEventListener = new CompletionEventListener();\n+    \n+    protected boolean started;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjM3MA==", "bodyText": "I left it here as it might become useful if we want to restrict the access to certain features by the extending classes since this is just abstract so the actual lasses can make use of it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r397976370", "createdAt": "2020-03-25T16:06:07Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "diffHunk": "@@ -41,6 +52,10 @@\n     protected final ProcessRuntimeServiceProvider services;\n \n     protected CompletionEventListener completionEventListener = new CompletionEventListener();\n+    \n+    protected boolean started;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MjAzNg=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyNDQ0MQ==", "bodyText": "np", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r398324441", "createdAt": "2020-03-26T05:24:36Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "diffHunk": "@@ -41,6 +52,10 @@\n     protected final ProcessRuntimeServiceProvider services;\n \n     protected CompletionEventListener completionEventListener = new CompletionEventListener();\n+    \n+    protected boolean started;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MjAzNg=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDUwOA==", "bodyText": "renamed it to activated as it is more aligned with the methods (activate/deactivate)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r398384508", "createdAt": "2020-03-26T08:15:44Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "diffHunk": "@@ -41,6 +52,10 @@\n     protected final ProcessRuntimeServiceProvider services;\n \n     protected CompletionEventListener completionEventListener = new CompletionEventListener();\n+    \n+    protected boolean started;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0MjAzNg=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njk1MjU3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/TimerEventTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToyODoxNVrOF7grvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxNToyNFrOF77c3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0NTc5MA==", "bodyText": "for these two tests, could be possible to verify that cancelJob was called x number of times?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r397945790", "createdAt": "2020-03-25T15:28:15Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/TimerEventTest.java", "diffHunk": "@@ -208,4 +209,78 @@ public void testBoundaryDurationTimerEventOnSubprocess() throws Exception {\n      \n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_COMPLETED);\n     }\n+    \n+    @Test\n+    public void testStartTimerEvent() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"timer/StartTimerDuration.bpmn2\");        \n+        assertThat(app).isNotNull();\n+        \n+        NodeLeftCountDownProcessEventListener listener = new NodeLeftCountDownProcessEventListener(\"timer fired\", 1);\n+        ((DefaultProcessEventListenerConfig)app.config().process().processEventListeners()).register(listener);\n+                \n+        Process<? extends Model> p = app.processes().processById(\"defaultPackage.TimerProcess\");\n+        // activate to schedule timers\n+        p.activate();\n+        \n+        boolean completed = listener.waitTillCompleted(5000);\n+        assertThat(completed).isTrue();\n+        \n+        Collection<?> instances = p.instances().values();\n+        assertThat(instances).hasSize(1);\n+        \n+        ProcessInstance<?> processInstance = (ProcessInstance<?>) instances.iterator().next();\n+        assertThat(processInstance).isNotNull();\n+        \n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        \n+        processInstance.abort();\n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n+        \n+        instances = p.instances().values();\n+        assertThat(instances).hasSize(0);\n+        \n+        p.deactivate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NzA2OQ==", "bodyText": "will have a look into that... though not sure we currently support any events on the JobService ... the one used by default.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r397977069", "createdAt": "2020-03-25T16:06:58Z", "author": {"login": "mswiderski"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/TimerEventTest.java", "diffHunk": "@@ -208,4 +209,78 @@ public void testBoundaryDurationTimerEventOnSubprocess() throws Exception {\n      \n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_COMPLETED);\n     }\n+    \n+    @Test\n+    public void testStartTimerEvent() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"timer/StartTimerDuration.bpmn2\");        \n+        assertThat(app).isNotNull();\n+        \n+        NodeLeftCountDownProcessEventListener listener = new NodeLeftCountDownProcessEventListener(\"timer fired\", 1);\n+        ((DefaultProcessEventListenerConfig)app.config().process().processEventListeners()).register(listener);\n+                \n+        Process<? extends Model> p = app.processes().processById(\"defaultPackage.TimerProcess\");\n+        // activate to schedule timers\n+        p.activate();\n+        \n+        boolean completed = listener.waitTillCompleted(5000);\n+        assertThat(completed).isTrue();\n+        \n+        Collection<?> instances = p.instances().values();\n+        assertThat(instances).hasSize(1);\n+        \n+        ProcessInstance<?> processInstance = (ProcessInstance<?>) instances.iterator().next();\n+        assertThat(processInstance).isNotNull();\n+        \n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        \n+        processInstance.abort();\n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n+        \n+        instances = p.instances().values();\n+        assertThat(instances).hasSize(0);\n+        \n+        p.deactivate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0NTc5MA=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMyNDQwMg==", "bodyText": "ok, if not maybe using something like spy from Mockito could help?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r398324402", "createdAt": "2020-03-26T05:24:24Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/TimerEventTest.java", "diffHunk": "@@ -208,4 +209,78 @@ public void testBoundaryDurationTimerEventOnSubprocess() throws Exception {\n      \n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_COMPLETED);\n     }\n+    \n+    @Test\n+    public void testStartTimerEvent() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"timer/StartTimerDuration.bpmn2\");        \n+        assertThat(app).isNotNull();\n+        \n+        NodeLeftCountDownProcessEventListener listener = new NodeLeftCountDownProcessEventListener(\"timer fired\", 1);\n+        ((DefaultProcessEventListenerConfig)app.config().process().processEventListeners()).register(listener);\n+                \n+        Process<? extends Model> p = app.processes().processById(\"defaultPackage.TimerProcess\");\n+        // activate to schedule timers\n+        p.activate();\n+        \n+        boolean completed = listener.waitTillCompleted(5000);\n+        assertThat(completed).isTrue();\n+        \n+        Collection<?> instances = p.instances().values();\n+        assertThat(instances).hasSize(1);\n+        \n+        ProcessInstance<?> processInstance = (ProcessInstance<?>) instances.iterator().next();\n+        assertThat(processInstance).isNotNull();\n+        \n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        \n+        processInstance.abort();\n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n+        \n+        instances = p.instances().values();\n+        assertThat(instances).hasSize(0);\n+        \n+        p.deactivate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0NTc5MA=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDM0OA==", "bodyText": "this was actually not needed here are the test uses timer duration meaning it's one time timer execution. so removed it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/389#discussion_r398384348", "createdAt": "2020-03-26T08:15:24Z", "author": {"login": "mswiderski"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/TimerEventTest.java", "diffHunk": "@@ -208,4 +209,78 @@ public void testBoundaryDurationTimerEventOnSubprocess() throws Exception {\n      \n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_COMPLETED);\n     }\n+    \n+    @Test\n+    public void testStartTimerEvent() throws Exception {\n+        \n+        Application app = generateCodeProcessesOnly(\"timer/StartTimerDuration.bpmn2\");        \n+        assertThat(app).isNotNull();\n+        \n+        NodeLeftCountDownProcessEventListener listener = new NodeLeftCountDownProcessEventListener(\"timer fired\", 1);\n+        ((DefaultProcessEventListenerConfig)app.config().process().processEventListeners()).register(listener);\n+                \n+        Process<? extends Model> p = app.processes().processById(\"defaultPackage.TimerProcess\");\n+        // activate to schedule timers\n+        p.activate();\n+        \n+        boolean completed = listener.waitTillCompleted(5000);\n+        assertThat(completed).isTrue();\n+        \n+        Collection<?> instances = p.instances().values();\n+        assertThat(instances).hasSize(1);\n+        \n+        ProcessInstance<?> processInstance = (ProcessInstance<?>) instances.iterator().next();\n+        assertThat(processInstance).isNotNull();\n+        \n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        \n+        processInstance.abort();\n+        assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ABORTED);\n+        \n+        instances = p.instances().values();\n+        assertThat(instances).hasSize(0);\n+        \n+        p.deactivate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0NTc5MA=="}, "originalCommit": {"oid": "144bd5fd3433bbd3f72b11f0b8a57bdf84bc1cc9"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 191, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}