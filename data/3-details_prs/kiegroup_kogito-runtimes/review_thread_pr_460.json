{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDAxMDcz", "number": 460, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToyMzowOVrODzrXGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoyNzoyMVrODzs3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTE0Mzk0OnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToyMzowOVrOGIPtWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoyMDo1NFrOGIRtiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTE2MA==", "bodyText": "my preference would be to @Override this so it is available up in Kogito API's DecisionModel\ndo you concur @mswiderski ? :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/460#discussion_r411299160", "createdAt": "2020-04-20T11:23:09Z", "author": {"login": "tarilabs"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "diffHunk": "@@ -26,19 +26,22 @@ public DMNContext newContext(Map<String, Object> variables) {\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNModel dmnModel = dmnRuntime.getModel(namespace, name);\n-        if (dmnModel == null) {\n-            throw new IllegalArgumentException(\"DMN model '\" + name + \"' not found with namespace '\" + namespace + \"'\");\n-        }\n+        DMNModel dmnModel = getDMNModel();\n         return dmnRuntime.evaluateAll(dmnModel, context);\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n+        DMNModel dmnModel = getDMNModel();\n+        return dmnRuntime.evaluateDecisionService(dmnModel, context, decisionServiceName);\n+    }\n+\n+    public DMNModel getDMNModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fddfaa0d0be3bd7165f0995298e0dd49876a3e2c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMwMzc5Mg==", "bodyText": "+1 to expose it on DecisionModel if possible", "url": "https://github.com/kiegroup/kogito-runtimes/pull/460#discussion_r411303792", "createdAt": "2020-04-20T11:31:25Z", "author": {"login": "mswiderski"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "diffHunk": "@@ -26,19 +26,22 @@ public DMNContext newContext(Map<String, Object> variables) {\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNModel dmnModel = dmnRuntime.getModel(namespace, name);\n-        if (dmnModel == null) {\n-            throw new IllegalArgumentException(\"DMN model '\" + name + \"' not found with namespace '\" + namespace + \"'\");\n-        }\n+        DMNModel dmnModel = getDMNModel();\n         return dmnRuntime.evaluateAll(dmnModel, context);\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n+        DMNModel dmnModel = getDMNModel();\n+        return dmnRuntime.evaluateDecisionService(dmnModel, context, decisionServiceName);\n+    }\n+\n+    public DMNModel getDMNModel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTE2MA=="}, "originalCommit": {"oid": "fddfaa0d0be3bd7165f0995298e0dd49876a3e2c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzMTk3OQ==", "bodyText": "done with 49dbda4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/460#discussion_r411331979", "createdAt": "2020-04-20T12:20:54Z", "author": {"login": "tarilabs"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "diffHunk": "@@ -26,19 +26,22 @@ public DMNContext newContext(Map<String, Object> variables) {\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNModel dmnModel = dmnRuntime.getModel(namespace, name);\n-        if (dmnModel == null) {\n-            throw new IllegalArgumentException(\"DMN model '\" + name + \"' not found with namespace '\" + namespace + \"'\");\n-        }\n+        DMNModel dmnModel = getDMNModel();\n         return dmnRuntime.evaluateAll(dmnModel, context);\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n+        DMNModel dmnModel = getDMNModel();\n+        return dmnRuntime.evaluateDecisionService(dmnModel, context, decisionServiceName);\n+    }\n+\n+    public DMNModel getDMNModel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5OTE2MA=="}, "originalCommit": {"oid": "fddfaa0d0be3bd7165f0995298e0dd49876a3e2c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTM5MTk2OnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoyNzoyMVrOGIR9CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoyNzoyMVrOGIR9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzNTk0NA==", "bodyText": "I would prefer to do it in the constructor and store it as field. Is there any reason to keep this get lazy?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/460#discussion_r411335944", "createdAt": "2020-04-20T12:27:21Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "diffHunk": "@@ -26,19 +26,23 @@ public DMNContext newContext(Map<String, Object> variables) {\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        DMNModel dmnModel = dmnRuntime.getModel(namespace, name);\n-        if (dmnModel == null) {\n-            throw new IllegalArgumentException(\"DMN model '\" + name + \"' not found with namespace '\" + namespace + \"'\");\n-        }\n+        DMNModel dmnModel = getDMNModel();\n         return dmnRuntime.evaluateAll(dmnModel, context);\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n+        DMNModel dmnModel = getDMNModel();\n+        return dmnRuntime.evaluateDecisionService(dmnModel, context, decisionServiceName);\n+    }\n+\n+    @Override\n+    public DMNModel getDMNModel() {\n         DMNModel dmnModel = dmnRuntime.getModel(namespace, name);\n         if (dmnModel == null) {\n-            throw new IllegalArgumentException(\"DMN model '\" + name + \"' not found with namespace '\" + namespace + \"'\");\n+            throw new IllegalStateException(\"DMN model '\" + name + \"' not found with namespace '\" + namespace + \"' in the inherent DMNRuntime.\");\n         }\n-        return dmnRuntime.evaluateDecisionService(dmnModel, context, decisionServiceName);\n+        return dmnModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dbda406dc34d687bafc1236aa9e9df7c189716"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 247, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}