{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODIzNDY0", "number": 642, "title": "[KOGITO-2745] - Introducing CloudEvent processing through HTTP", "bodyText": "Jul 29th Updates\nFirst integration tests are OK. We can send CloudEvent messages to a given process through HTTP, having the correct headers. Outcoming is a problem right now since smallrye-http does not add Content-Type. Also the producer are ignoring type and source, unfortunately they are required by the spec. The target service are rejecting our produced events.\nJul 30th Updates\nFinished the decoration work for HTTP CloudEvents messages outcoming from smallrye infra. I'm not 100% happy with this implementation since we are lacking some refactoring in the code-gen side. Should do the trick now, and we can come back to this later once @evacchi's work is finished. The decoration worked and now the outcoming messages have the correct content-type. The messages are being sent without source and type attributes, being rejected by Knative Serving. I'll assume /process/< processinstance> for source and type being the channel name.\nJul 31th Updates\nFinished the CE SDK migration, but the Resteasy integration on Quarkus is not working, need more work and a clean reproducer to figure out why. I guess that the providers are not being registered, plus an extension might be need. With the smallrye work upcoming, I'd rather to wait and go with the approach I took in this PR: manually call their converters/builders. Is working fine.\nNow I need to clear the clutter, figure why CI is failing, fix Sonar issues and write the technical docs for my friends to review this PR.\nThis is how an event processed by our engine looks like on Knative:\n\u2601\ufe0f  cloudevents.Event\nValidation: valid\nContext Attributes,\n  specversion: 1.0\n  type: process.travelers.processedtravellers\n  source: /process/Travelers/f4533dca-f09d-4701-a61f-7f096fadd694\n  id: 3cec97b9-78c0-4aa3-b8fd-c9506fa29b3f\n  time: 2020-07-31T23:21:34.874877Z\nExtensions,\n  kogitoprocessid: Travelers\n  kogitoprocessinstanceid: f4533dca-f09d-4701-a61f-7f096fadd694\n  kogitoprocessinstancestate: 1\nData,\n  {\"firstName\":\"Hello World!!\",\"lastName\":null,\"email\":null,\"nationality\":null,\"processed\":true}\n\nNow we have context on type and source. Also a custom extension. :)\nI believe that in the future refactoring work, we could trim the attributes we have in this extension and use the ones provided by the spec instead.\nAug 3rd Updates\nClean up Sonar issues, need to increase unit test a little bit since some files I've changed there's no test at all.\nTODO:\n\n - Decorate the outcome message to include HttpResponseMetadata with the correct header (cloudevents+json) since we are sending everything in the payload\n - Fill type and sourceattributes in the outcoming messages\n - Upgrade the CloudEvent SDK to 2.0.0-Milestone1 since we won't send CloudEvent messages with smallrye (but plain JSON). This way we avoid libraries conflicts\n - Write the docs for the example we are working for\n\nSee:  https://issues.redhat.com/browse/KOGITO-2745\nSigned-off-by: Ricardo Zanini zanini@redhat.com\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-07-20T20:47:12Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642", "merged": true, "mergeCommit": {"oid": "feac027c28b084164546cdd3031fbb9e72e56778"}, "closed": true, "closedAt": "2020-08-07T13:45:24Z", "author": {"login": "ricardozanini"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5Cx08AFqTQ1NTg0MTMyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8aEd8gFqTQ2Mjk3NzMyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODQxMzI3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-455841327", "createdAt": "2020-07-27T14:33:34Z", "commit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMzozNVrOG3lRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMzozNVrOG3lRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNTQ5OQ==", "bodyText": "we are keeping static \"constructor\" methods at the top", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r460935499", "createdAt": "2020-07-27T14:33:35Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -198,31 +219,6 @@ private static Process parseWorkflowFile(Resource r, String parser) {\n         }\n     }\n \n-    private String applicationCanonicalName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODU1OTk0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-455855994", "createdAt": "2020-07-27T14:48:59Z", "commit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo0ODo1OVrOG3l-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo0ODo1OVrOG3l-PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NzAwNA==", "bodyText": "minor nitpick (since this is a REST endpoint it's not a big deal) why does it need to be @PostConstruct ? can it be a plain constructor? (notice you can also use an anonymous constructor { ... })", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r460947004", "createdAt": "2020-07-27T14:48:59Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventListenerResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.kie.kogito.app;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.kie.kogito.events.knative.ce.ExtMediaType;\n+import org.kie.kogito.events.knative.ce.RestEasyHttpRequestConverter;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Path(\"/\")\n+public class CloudEventListenerResource {\n+\n+    private RestEasyHttpRequestConverter httpRequestConverter = new RestEasyHttpRequestConverter();\n+\n+    private Map<String, Emitter<String>> emitters;\n+\n+    @javax.annotation.PostConstruct\n+    public void setup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e8420afd28b9332d484b16647928e15ac1e90676", "committedDate": "2020-07-24T21:14:22Z", "message": "small refactoring to reuse annotator\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "8b04ab8ead80b5f92e4dbe0ec8830fcced11d202", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8b04ab8ead80b5f92e4dbe0ec8830fcced11d202", "committedDate": "2020-07-27T21:11:24Z", "message": "Reverting to smallrye types / utilities on knative-addon\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f80e716318220306ece53a10b9ee475f4c6c741", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5f80e716318220306ece53a10b9ee475f4c6c741", "committedDate": "2020-07-29T21:19:48Z", "message": "Adjusting DataEvent for CE spec 1.0, playing around outcomming messages\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "fc327c03a6c386fc3b219c1950bf9c767b09730c", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc327c03a6c386fc3b219c1950bf9c767b09730c", "committedDate": "2020-07-29T21:29:37Z", "message": "Adjusting DataEvent for CE spec 1.0, playing around outcomming messages\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e77fd57d06a2b98ba707b1e139f4ae2cc0825cd0", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e77fd57d06a2b98ba707b1e139f4ae2cc0825cd0", "committedDate": "2020-07-30T21:38:55Z", "message": "Decorating CloudEvents outcoming messages\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "178ceff006cd941b22072e9a5c69eb16856bbde5", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/178ceff006cd941b22072e9a5c69eb16856bbde5", "committedDate": "2020-07-30T21:55:24Z", "message": "Decorating CloudEvents outcoming messages\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "178ceff006cd941b22072e9a5c69eb16856bbde5", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/178ceff006cd941b22072e9a5c69eb16856bbde5", "committedDate": "2020-07-30T21:55:24Z", "message": "Decorating CloudEvents outcoming messages\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "5412a149293edea28b65350bc9952f6cc0292de7", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5412a149293edea28b65350bc9952f6cc0292de7", "committedDate": "2020-07-31T23:22:30Z", "message": "Upgrade to CE SDK 2.x, fix source and type problem\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5412a149293edea28b65350bc9952f6cc0292de7", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5412a149293edea28b65350bc9952f6cc0292de7", "committedDate": "2020-07-31T23:22:30Z", "message": "Upgrade to CE SDK 2.x, fix source and type problem\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "21a23047cbd1289160f308e1ff8c736e29815951", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/21a23047cbd1289160f308e1ff8c736e29815951", "committedDate": "2020-08-03T15:48:14Z", "message": "Cleaning up smell code\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ece6315b5935a3e46f729eab2644f5c2cda28f6", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ece6315b5935a3e46f729eab2644f5c2cda28f6", "committedDate": "2020-08-03T19:17:17Z", "message": "Increasing unit test coverage, sonar issues\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc147855588b54d94c791c230832ba72f2714954", "committedDate": "2020-08-03T21:40:30Z", "message": "[KOGITO-2745] - Introducing CloudEvent processing over HTTP\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDc5Nzcw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-460479770", "createdAt": "2020-08-04T03:59:38Z", "commit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo1OTozOVrOG7QNpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxNTozN1rOG7QdVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NDgwNw==", "bodyText": "maybe just comment out to commit?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464784807", "createdAt": "2020-08-04T03:59:39Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie\".level=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NjAwNw==", "bodyText": "can we unify that? Same for smallrye so ideally moving the dependency management part to root pom.xml", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464786007", "createdAt": "2020-08-04T04:04:38Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/pom.xml", "diffHunk": "@@ -0,0 +1,135 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>events</artifactId>\n+        <version>8.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>knative-eventing-addon</artifactId>\n+    <name>Kogito :: Add-Ons :: Events :: Knative Eventing</name>\n+    <description>Kogito Events handling for Knative Eventing AddOn</description>\n+\n+    <properties>\n+        <!-- aligned with smallrye -->\n+        <!-- TODO: send a PR to SmallRye Reactive Messaging to upgrade to SDK 2.x -->\n+        <!-- Fixme: we do have this already set in the Kogito Runtimes BOM, but using 1.3.0 version -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4Nzk2MA==", "bodyText": "@ricardozanini cant we reuse the ProcessInstanceDataEvent as it seems to be the exact same event?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464787960", "createdAt": "2020-08-04T04:12:20Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;\n+\n+import io.cloudevents.CloudEventExtensions;\n+import io.cloudevents.Extension;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+// The size of this extension could be reevaluated since we could make use of `type`, `source` and `subject` for processId, referenceId and instanceState\n+\n+/**\n+ * CloudEvent extension for Kogito Process.\n+ */\n+public class KogitoProcessExtension implements Extension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODEwMQ==", "bodyText": "missing headers :D", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788101", "createdAt": "2020-08-04T04:12:54Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODUzNA==", "bodyText": "small comment to perhaps use import static for most use of Assertions", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788534", "createdAt": "2020-08-04T04:14:34Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/http/ResponsesTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.kie.kogito.events.knative.ce.http;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+class ResponsesTest {\n+\n+    @Test\n+    void errorProcessingCloudEvent() {\n+        final Response response = Responses.errorProcessingCloudEvent(new IllegalArgumentException(\"Fail!\"));\n+        Assertions.assertThat(response).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String datacontenttype;\n          \n          \n            \n                private String dataContentType;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788780", "createdAt": "2020-08-04T04:15:27Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODgyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String dataschema;\n          \n          \n            \n                private String dataSchema;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788820", "createdAt": "2020-08-04T04:15:37Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;\n+    private String dataschema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODE0NTEz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-460814513", "createdAt": "2020-08-04T13:31:09Z", "commit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozMTowOVrOG7gfwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0NjoyNFrOG7hGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTU4NQ==", "bodyText": "Is it really mutually exclusive? I mean, can't we have both at the same time, in the same project we may have one or N processes where we cloud have cloud events being received through kafka in some topic and other events using the HTTP endpoint?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465051585", "createdAt": "2020-08-04T13:31:09Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -379,21 +381,33 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n                                 applicationCanonicalName,\n                                 msgDataEventGenerator.className(),\n                                 trigger)\n-                                .withDependencyInjection(annotator));\n+                                         .withDependencyInjection(annotator));\n                     } else if (trigger.getType().equals(TriggerMetaData.TriggerType.ProduceMessage)) {\n \n                         MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                trigger)\n+                                                                                                        trigger)\n                                 .withDependencyInjection(annotator);\n                         mdegs.add(msgDataEventGenerator);\n \n-                        mpgs.add(new MessageProducerGenerator(\n-                                workFlowProcess,\n-                                modelClassGenerator.className(),\n-                                execModelGen.className(),\n-                                msgDataEventGenerator.className(),\n-                                trigger)\n-                                .withDependencyInjection(annotator));\n+                        // this is not cool, we should have a way to process addons\n+                        // generators without adding conditions to the main generators\n+                        if (addonsConfig.useKnativeEventing()) {\n+                            mpgs.add(new CloudEventsMessageProducerGenerator(\n+                                    workFlowProcess,\n+                                    modelClassGenerator.className(),\n+                                    execModelGen.className(),\n+                                    msgDataEventGenerator.className(),\n+                                    trigger)\n+                                             .withDependencyInjection(annotator));\n+                        } else {\n+                            mpgs.add(new MessageProducerGenerator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2MTQ2Ng==", "bodyText": "can't we keep just one template for MessageProducer? I mean instead of CloudEventsMessageProducerTemplate.java and MessageProducerTemplate.java centralize just in one? they seem to be quite similar.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465061466", "createdAt": "2020-08-04T13:46:24Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsMessageProducerTemplate.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.myspace.demo;\n+\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.events.knative.ce.decorators.Decorator;\n+import org.kie.kogito.events.knative.ce.decorators.DecoratorFactory;\n+import org.kie.kogito.services.event.DataEventAttrBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Optional;\n+import java.util.TimeZone;\n+\n+public class MessageProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc147855588b54d94c791c230832ba72f2714954", "committedDate": "2020-08-03T21:40:30Z", "message": "[KOGITO-2745] - Introducing CloudEvent processing over HTTP\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "8d8c649de4621f86052b328696017674f1f60ca2", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8d8c649de4621f86052b328696017674f1f60ca2", "committedDate": "2020-08-04T14:27:16Z", "message": "Review comments\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d8c649de4621f86052b328696017674f1f60ca2", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8d8c649de4621f86052b328696017674f1f60ca2", "committedDate": "2020-08-04T14:27:16Z", "message": "Review comments\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "9b1c546440ea0cbc4b68873a0e7a9fb0cef2e853", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9b1c546440ea0cbc4b68873a0e7a9fb0cef2e853", "committedDate": "2020-08-04T19:44:49Z", "message": "Review comments\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzg5NTQw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-461389540", "createdAt": "2020-08-05T06:58:43Z", "commit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1ODo0NFrOG78t9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxMDo1NlrOG79D2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMzk3NA==", "bodyText": "licence everywhere?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465513974", "createdAt": "2020-08-05T06:58:44Z", "author": {"login": "r00ta"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDk0NA==", "bodyText": "Very minor comment: what about a less generic name like MessageDecorator?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465514944", "createdAt": "2020-08-05T07:00:46Z", "author": {"login": "r00ta"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/Decorator.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.kie.kogito.events.knative.ce.decorators;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * {@link Decorator}s decorates the {@link Message} envelope with metadata and additional information in a given context.\n+ */\n+public interface Decorator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNjk3NQ==", "bodyText": "isnt't redundant?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465516975", "createdAt": "2020-08-05T07:05:18Z", "author": {"login": "r00ta"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxOTU3Nw==", "bodyText": "If you use Jackson, I would suggest to be a bit more verbose and use @JsonProperty. In some months somebody will see that the variable is all lower case and will change it, changing the implicit contract as well. Maybe it's just me, but I always have had very bad opinion on that dangerous Jackson behaviour :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465519577", "createdAt": "2020-08-05T07:10:56Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzkyMjMz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-461392233", "createdAt": "2020-08-05T07:03:33Z", "commit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxNjowMlrOG79NPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyOTowMFrOG79mdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMTk4Mg==", "bodyText": "suggestion for future improvement. If I understand correctly this is only used in templates; so, could we avoid the run-time classpath inspection, and instead perform it at compile-time? i.e., replace a placeholder in the template with the \"right\" code branch?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465521982", "createdAt": "2020-08-05T07:16:02Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/DecoratorFactory.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.kie.kogito.events.knative.ce.decorators;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Decorator Factory\n+ */\n+public final class DecoratorFactory {\n+\n+    private static final String SMALLRYE_HTTP_METADATA_CLASS = \"io.smallrye.reactive.messaging.http.HttpResponseMetadata\";\n+\n+    private DecoratorFactory() {\n+    }\n+\n+    /**\n+     * Builds a new {@link Decorator} depending on the implementation being presented in the classpath.\n+     *\n+     * @return an {@link Optional} instance of {@link Decorator}\n+     */\n+    public static Optional<Decorator> newInstance() {\n+        try {\n+            Class.forName(SMALLRYE_HTTP_METADATA_CLASS, false, DecoratorFactory.class.getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMjMxMg==", "bodyText": "link to PR/JIRA ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465522312", "createdAt": "2020-08-05T07:16:41Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/http/ExtMediaType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.kie.kogito.events.knative.ce.http;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Extends {@link MediaType} to CloudEvents support\n+ */\n+// this shouldn't be provided by the CE SDK? Send a PR.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNDQxNg==", "bodyText": "is keeping this file intended?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465524416", "createdAt": "2020-08-05T07:20:57Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie\".level=INFO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNTAxMQ==", "bodyText": "nothing in contrary with the change, but just wondering why is it necessary?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465525011", "createdAt": "2020-08-05T07:22:08Z", "author": {"login": "evacchi"}, "path": "addons/events/kogito-events-reactive-messaging-addon/src/main/java/org/kie/kogito/events/rm/ReactiveMessagingEventPublisher.java", "diffHunk": "@@ -32,8 +32,8 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n-import io.smallrye.reactive.messaging.annotations.Channel;\n-import io.smallrye.reactive.messaging.annotations.Emitter;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNzY3Mw==", "bodyText": "agreed :) add a link to a JIRA maybe? KOGITO-1767 Propose mechanism to extend codegen with addons has sat there for quite a while", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465527673", "createdAt": "2020-08-05T07:27:24Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -379,21 +381,33 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n                                 applicationCanonicalName,\n                                 msgDataEventGenerator.className(),\n                                 trigger)\n-                                .withDependencyInjection(annotator));\n+                                         .withDependencyInjection(annotator));\n                     } else if (trigger.getType().equals(TriggerMetaData.TriggerType.ProduceMessage)) {\n \n                         MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                trigger)\n+                                                                                                        trigger)\n                                 .withDependencyInjection(annotator);\n                         mdegs.add(msgDataEventGenerator);\n \n-                        mpgs.add(new MessageProducerGenerator(\n-                                workFlowProcess,\n-                                modelClassGenerator.className(),\n-                                execModelGen.className(),\n-                                msgDataEventGenerator.className(),\n-                                trigger)\n-                                .withDependencyInjection(annotator));\n+                        // this is not cool, we should have a way to process addons\n+                        // generators without adding conditions to the main generators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODQzNw==", "bodyText": "see here re: DecoratorFactory -- the check is already there", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465528437", "createdAt": "2020-08-05T07:29:00Z", "author": {"login": "evacchi"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -232,11 +232,13 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n+        boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNDQ4NDMz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-461448433", "createdAt": "2020-08-05T08:26:50Z", "commit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyNjo1MFrOG7_iyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyNjo1MFrOG7_iyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MDI2Nw==", "bodyText": "There is already a similar class.\nPerhaps they could be consolidated at some point?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465560267", "createdAt": "2020-08-05T08:26:50Z", "author": {"login": "manstis"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.format.EventFormat;\n+import io.cloudevents.core.provider.EventFormatProvider;\n+import io.cloudevents.jackson.JsonFormat;\n+\n+/**\n+ * Simple utility class to convert from CloudEvents objects to a Json String.\n+ * Wraps invocation to the CE SDK, so we can safely change the inner implementation without impacting callers.\n+ */\n+public final class CloudEventConverter {\n+\n+    private static final EventFormat format = EventFormatProvider.getInstance().resolveFormat(JsonFormat.CONTENT_TYPE);\n+\n+    private CloudEventConverter() {\n+    }\n+\n+    public static String toJson(final CloudEvent cloudEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzMwNTEz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-461730513", "createdAt": "2020-08-05T14:39:24Z", "commit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozOToyNFrOG8Mu6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozOToyNFrOG8Mu6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjM2MA==", "bodyText": "wouldn't that conflict with #676 ?\n@evacchi @ricardozanini", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465776360", "createdAt": "2020-08-05T14:39:24Z", "author": {"login": "radtriste"}, "path": "pom.xml", "diffHunk": "@@ -692,6 +692,11 @@\n         <artifactId>smallrye-reactive-messaging-provider</artifactId>\n         <version>${version.io.smallrye.reactive}</version>\n       </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4cb82001c100acc61b4cecca56aac56ff68dea0", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a4cb82001c100acc61b4cecca56aac56ff68dea0", "committedDate": "2020-08-06T13:34:12Z", "message": "[KOGITO-2745] - Introducing CloudEvent processing over HTTP\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25910da358302685f5268caf0aa19e0baa40c5b", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d25910da358302685f5268caf0aa19e0baa40c5b", "committedDate": "2020-08-06T13:34:12Z", "message": "Review comments\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043af1ec0f8d3d3db4286f64a464d7092902030e", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/043af1ec0f8d3d3db4286f64a464d7092902030e", "committedDate": "2020-08-06T13:34:12Z", "message": "Cleaning up pom.xml\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f116214724a78a44c5623d00feb45526e2a36a", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/27f116214724a78a44c5623d00feb45526e2a36a", "committedDate": "2020-08-06T13:34:12Z", "message": "Minor review changes and pom version update\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63b77af700a671e1d0c17b7df750c0cd43342a35", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/63b77af700a671e1d0c17b7df750c0cd43342a35", "committedDate": "2020-08-06T13:34:12Z", "message": "Adding JsonProperties to AbstractDataEvent\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTY0NjI5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-462564629", "createdAt": "2020-08-06T14:19:11Z", "commit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822f02de87f810e8ac33c6971632b96f4517c410", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/822f02de87f810e8ac33c6971632b96f4517c410", "committedDate": "2020-08-06T14:50:14Z", "message": "Removing unnecessary dependencies for smallrye\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b94b82e1a354895f2816f937644f7b8d2834745a", "committedDate": "2020-08-05T13:33:16Z", "message": "Adding JsonProperties to AbstractDataEvent\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "822f02de87f810e8ac33c6971632b96f4517c410", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/822f02de87f810e8ac33c6971632b96f4517c410", "committedDate": "2020-08-06T14:50:14Z", "message": "Removing unnecessary dependencies for smallrye\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTc3MzIw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#pullrequestreview-462977320", "createdAt": "2020-08-07T01:23:57Z", "commit": {"oid": "822f02de87f810e8ac33c6971632b96f4517c410"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4059, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}