{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjUzNzEz", "number": 674, "title": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint", "bodyText": "Model interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)", "createdAt": "2020-08-04T09:43:33Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674", "merged": true, "mergeCommit": {"oid": "4204fd29053e2d74948898532c3196af7497bf86"}, "closed": true, "closedAt": "2020-08-10T10:43:16Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7joI4ABqjM2MTk0OTUxMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9djrogFqTQ2NDAyNDE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3cc4adf67642e3aff27160fd9f76fd32b63df93", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c3cc4adf67642e3aff27160fd9f76fd32b63df93", "committedDate": "2020-08-04T09:42:49Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "cb36b7961c4ee4ce0c9cb72d5ed156b0043cdd25", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb36b7961c4ee4ce0c9cb72d5ed156b0043cdd25", "committedDate": "2020-08-04T09:57:55Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb36b7961c4ee4ce0c9cb72d5ed156b0043cdd25", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb36b7961c4ee4ce0c9cb72d5ed156b0043cdd25", "committedDate": "2020-08-04T09:57:55Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "6aa77f2ce70b0d3344ccc3efd42e6e1515ddccf6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6aa77f2ce70b0d3344ccc3efd42e6e1515ddccf6", "committedDate": "2020-08-04T10:12:32Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6aa77f2ce70b0d3344ccc3efd42e6e1515ddccf6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6aa77f2ce70b0d3344ccc3efd42e6e1515ddccf6", "committedDate": "2020-08-04T10:12:32Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "51fe0dcd84f5ac0fc3c833ee5684f9e7c9b36b10", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/51fe0dcd84f5ac0fc3c833ee5684f9e7c9b36b10", "committedDate": "2020-08-04T17:19:21Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51fe0dcd84f5ac0fc3c833ee5684f9e7c9b36b10", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/51fe0dcd84f5ac0fc3c833ee5684f9e7c9b36b10", "committedDate": "2020-08-04T17:19:21Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "27c2678b2f0171feb2f1f6c200ce1ad8c75a5eca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/27c2678b2f0171feb2f1f6c200ce1ad8c75a5eca", "committedDate": "2020-08-04T17:29:49Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27c2678b2f0171feb2f1f6c200ce1ad8c75a5eca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/27c2678b2f0171feb2f1f6c200ce1ad8c75a5eca", "committedDate": "2020-08-04T17:29:49Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "8f1166d078c7f4d16aa5fb09e037a173c3326c31", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8f1166d078c7f4d16aa5fb09e037a173c3326c31", "committedDate": "2020-08-04T19:28:10Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f1166d078c7f4d16aa5fb09e037a173c3326c31", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8f1166d078c7f4d16aa5fb09e037a173c3326c31", "committedDate": "2020-08-04T19:28:10Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5effce28561ce34a084c989b6624d51e789fd8c9", "committedDate": "2020-08-05T07:43:44Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNDE5NjI1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-461419625", "createdAt": "2020-08-05T07:47:17Z", "commit": {"oid": "8f1166d078c7f4d16aa5fb09e037a173c3326c31"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0NzozN1rOG7-LzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDo0MlrOG7-bIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzk5Ng==", "bodyText": "OutputModel", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465537996", "createdAt": "2020-08-05T07:47:37Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can express its internal information as a Map\n+ */\n+public interface MapOutput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODEyOQ==", "bodyText": "I'd propose to call it InputModel", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465538129", "createdAt": "2020-08-05T07:47:49Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can be populated from a Map\n+ */\n+public interface MapInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODI0OQ==", "bodyText": "I am not sure I like making all these methods fluent. The reason is that if we wanted at some point in the future to make any of those to return a value then we won't be able. We can make the code just as concise by using { pi.start(); pi.something() } etc. (notice the semicolon)\nI know my original bug report included some fluent interfaces :P but not sure I want it for all. I am not sure I want it for some either at this point, because it would make the API asymmetrical.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465538249", "createdAt": "2020-08-05T07:48:05Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -47,30 +47,30 @@\n     /**\n      * Starts process instance\n      */\n-    void start();\n+    ProcessInstance<T> start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDI3NQ==", "bodyText": "I don't like the ternary operator here\nwhat if we let startFromNode accept null => invoke start() internally?.\nlet's put checkError() on its line, and make it void for now (see comment above)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465540275", "createdAt": "2020-08-05T07:51:42Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDYxMQ==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465540611", "createdAt": "2020-08-05T07:52:16Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();\n+        }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(\n+                                                                                                                                                                                                                      null)));\n     }\n-    \n+\n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.updateVariables(resource);\n-                    return mapOutput(new $Type$Output(), pi.variables());\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.updateVariables(resource).toOutput()).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDY5Mg==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465540692", "createdAt": "2020-08-05T07:52:25Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();\n+        }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTA5MQ==", "bodyText": "same comment about ternary operator and making checkError() void", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541091", "createdAt": "2020-08-05T07:53:09Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -44,29 +49,19 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n     public $Type$Output createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-            ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n             String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-\n-            if (startFromNode != null) {\n-                pi.startFrom(startFromNode);\n-            } else {\n-                pi.start();\n-            }\n-            return getModel(pi);\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTE3Mw==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541173", "createdAt": "2020-08-05T07:53:18Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -76,29 +71,23 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTIwNA==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541204", "createdAt": "2020-08-05T07:53:21Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -76,29 +71,23 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(null));\n     }\n \n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.updateVariables(resource);\n-            return mapOutput(new $Type$Output(), pi.variables());\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.updateVariables(resource).toOutput()).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTM5Mg==", "bodyText": "check the formatting here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541392", "createdAt": "2020-08-05T07:53:43Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -76,9 +78,10 @@\n                                   @QueryParam(\"phase\") @DefaultValue(\"abort\") final String phase,\n                                   @QueryParam(\"user\") final String user,\n                                   @QueryParam(\"group\") final List<String> groups) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withoutModel(phase, policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTU3Ng==", "bodyText": "same comment on ternary + void checkError()", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541576", "createdAt": "2020-08-05T07:54:03Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceTemplate.java", "diffHunk": "@@ -51,100 +58,65 @@\n \n     Application application;\n \n-    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes =\n-            MediaType.APPLICATION_JSON_VALUE)\n+    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)\n     public $Type$Output createResource_$name$(@RequestHeader HttpHeaders httpHeaders,\n                                               @RequestParam(value = \"businessKey\", required = false) String businessKey,\n                                               @RequestBody $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-            ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n             String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-\n-            if (startFromNode != null) {\n-                pi.startFrom(startFromNode);\n-            } else {\n-                pi.start();\n-            }\n-            return getModel(pi);\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTc2OA==", "bodyText": "add newline before .body", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541768", "createdAt": "2020-08-05T07:54:24Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -18,41 +18,45 @@\n public class $Type$Resource {\n \n     @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n-    public org.springframework.http.ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n         return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n                 java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n                 if (task.isPresent()) {\n-                    return javax.ws.rs.core.Response.ok(getModel(pi))\n-                                                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n-                                                    .build();\n+                    return ResponseEntity.status(HttpStatus.OK)\n+                                         .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\").body(pi.variables().toOutput())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTg0MA==", "bodyText": "check formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541840", "createdAt": "2020-08-05T07:54:34Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -18,41 +18,45 @@\n public class $Type$Resource {\n \n     @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n-    public org.springframework.http.ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n         return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n                 java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n                 if (task.isPresent()) {\n-                    return javax.ws.rs.core.Response.ok(getModel(pi))\n-                                                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n-                                                    .build();\n+                    return ResponseEntity.status(HttpStatus.OK)\n+                                         .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\").body(pi.variables().toOutput())\n+                                         .build();\n                 }\n-                return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.NOT_FOUND).build();\n+                return ResponseEntity.notFound().build();\n             }).orElse(null);\n         });\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n     public $Type$Output completeTask(@PathVariable(\"id\") final String id,\n                                      @PathVariable(\"workItemId\") final String workItemId,\n                                      @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n                                      @RequestParam(value = \"user\", required = false) final String user,\n                                      @RequestParam(value = \"group\", required = false) final List<String> groups,\n                                      @RequestBody final $TaskOutput$ model) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withModel(phase, model.toMap(), policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTkyMw==", "bodyText": "check formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541923", "createdAt": "2020-08-05T07:54:42Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -71,9 +75,10 @@ public JsonSchema getSchemaAndPhases(@PathParam(\"id\") final String id, @PathPara\n                                   @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n                                   @RequestParam(value = \"user\", required = false) final String user,\n                                   @RequestParam(value = \"group\", required = false) final List<String> groups) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withoutModel(phase, policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5effce28561ce34a084c989b6624d51e789fd8c9", "committedDate": "2020-08-05T07:43:44Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "33cb2688f35b2fa830fb9ae3c6ed83b721d0c4e3", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/33cb2688f35b2fa830fb9ae3c6ed83b721d0c4e3", "committedDate": "2020-08-05T07:58:20Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33cb2688f35b2fa830fb9ae3c6ed83b721d0c4e3", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/33cb2688f35b2fa830fb9ae3c6ed83b721d0c4e3", "committedDate": "2020-08-05T07:58:20Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "a2c77a10e22b1964eeb56501108f8d9175dc8940", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a2c77a10e22b1964eeb56501108f8d9175dc8940", "committedDate": "2020-08-05T07:59:53Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2c77a10e22b1964eeb56501108f8d9175dc8940", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a2c77a10e22b1964eeb56501108f8d9175dc8940", "committedDate": "2020-08-05T07:59:53Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "b7994327a0fe4d297a371d004aeb46cfbda44a51", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b7994327a0fe4d297a371d004aeb46cfbda44a51", "committedDate": "2020-08-05T10:02:06Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7994327a0fe4d297a371d004aeb46cfbda44a51", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b7994327a0fe4d297a371d004aeb46cfbda44a51", "committedDate": "2020-08-05T10:02:06Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "3799592a41a8e19b16b90f412e679aae2f19e3c5", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3799592a41a8e19b16b90f412e679aae2f19e3c5", "committedDate": "2020-08-05T10:04:05Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3799592a41a8e19b16b90f412e679aae2f19e3c5", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3799592a41a8e19b16b90f412e679aae2f19e3c5", "committedDate": "2020-08-05T10:04:05Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "993cbdf7092cd10ded32d2c3ee8e698892248b64", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/993cbdf7092cd10ded32d2c3ee8e698892248b64", "committedDate": "2020-08-05T10:06:09Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjcxOTc4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-461671978", "createdAt": "2020-08-05T13:38:22Z", "commit": {"oid": "993cbdf7092cd10ded32d2c3ee8e698892248b64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "993cbdf7092cd10ded32d2c3ee8e698892248b64", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/993cbdf7092cd10ded32d2c3ee8e698892248b64", "committedDate": "2020-08-05T10:06:09Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd chechError to ProcessInstance\nstart, startFrom, transition and abort methods on ProcessInstance now\nreturns ProcessInstance to allow fluent usage\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "761108efce510434e7ce550a38be07a11d34f7d8", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/761108efce510434e7ce550a38be07a11d34f7d8", "committedDate": "2020-08-05T13:52:09Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "761108efce510434e7ce550a38be07a11d34f7d8", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/761108efce510434e7ce550a38be07a11d34f7d8", "committedDate": "2020-08-05T13:52:09Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "a662858279aca19b431dfb62af411491411aa882", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a662858279aca19b431dfb62af411491411aa882", "committedDate": "2020-08-05T15:47:52Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a662858279aca19b431dfb62af411491411aa882", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a662858279aca19b431dfb62af411491411aa882", "committedDate": "2020-08-05T15:47:52Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "eea243441f1f7665bb7d9a93cefacc920949dfcc", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/eea243441f1f7665bb7d9a93cefacc920949dfcc", "committedDate": "2020-08-05T15:54:55Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eea243441f1f7665bb7d9a93cefacc920949dfcc", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/eea243441f1f7665bb7d9a93cefacc920949dfcc", "committedDate": "2020-08-05T15:54:55Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "5c5c75104895e9addb7e29ee37e6f5b6237b111d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5c5c75104895e9addb7e29ee37e6f5b6237b111d", "committedDate": "2020-08-06T15:55:24Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c5c75104895e9addb7e29ee37e6f5b6237b111d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5c5c75104895e9addb7e29ee37e6f5b6237b111d", "committedDate": "2020-08-06T15:55:24Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "b84ffe5c781eabd3bbe88c67eaba291349f26276", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b84ffe5c781eabd3bbe88c67eaba291349f26276", "committedDate": "2020-08-06T16:04:43Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b84ffe5c781eabd3bbe88c67eaba291349f26276", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b84ffe5c781eabd3bbe88c67eaba291349f26276", "committedDate": "2020-08-06T16:04:43Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/957bcf3f2b547753307b6bca5f554ccc129813c8", "committedDate": "2020-08-06T16:32:00Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTc1Nzc2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-462975776", "createdAt": "2020-08-07T01:18:57Z", "commit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzQ5NDQ2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-463349446", "createdAt": "2020-08-07T14:17:06Z", "commit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxNzowNlrOG9bpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxNzowNlrOG9bpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2OTE4NQ==", "bodyText": "Just one question: aren't we using $token$ format? Just asking because XXX seems something different.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467069185", "createdAt": "2020-08-07T14:17:06Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-flow-builder/src/main/resources/class-templates/TaskInputTemplate.java", "diffHunk": "@@ -24,7 +24,7 @@ public String getName() {\n         return this._name;\n     }\n \n-    public static XXXTaskInput fromMap(org.kie.kogito.process.WorkItem workItem) {\n+    public static XXXTaskInput from(org.kie.kogito.process.WorkItem workItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjc4NTQz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-463278543", "createdAt": "2020-08-07T12:40:15Z", "commit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDoxNVrOG9YTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0OToyMFrOG9c2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDQ0Mg==", "bodyText": "This can be on one line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467014442", "createdAt": "2020-08-07T12:40:15Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(), inputVars, true,\n+                                 \"/class-templates/ModelNoIDTemplate.java\", new AddMethodConsumer(\"toModel\", modelName,\n+                                                                                                  inputVars, false));\n     }\n \n     public ModelMetaData generateOutputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId()) + \"Output\";\n-\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofOutput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true);\n+                                 VariableDeclarations.ofOutput(getVariableScope(process)), true);\n+    }\n+\n+    private static VariableScope getVariableScope(WorkflowProcess process) {\n+        return (VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(\n+                                                                                           VariableScope.VARIABLE_SCOPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNjA1OQ==", "bodyText": "Maybe do the same with generateModel, it is much easier to read.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467016059", "createdAt": "2020-08-07T12:43:38Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNzY5Mg==", "bodyText": "Do we need here a type parameter? I think we would be fine with just MapOutput data, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467027692", "createdAt": "2020-08-07T13:06:08Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/humantask/HumanTaskTransition.java", "diffHunk": "@@ -36,8 +37,8 @@\n     private Map<String, Object> data;\n     private List<Policy<?>> policies = new ArrayList<>();\n     \n-    public static HumanTaskTransition withModel(String phase, Map<String, Object> data, Policy<?>... policies) {\n-        return new HumanTaskTransition(phase, data, policies);\n+    public static <T extends MapOutput> HumanTaskTransition withModel(String phase, T data, Policy<?>... policies) {\n+        return new HumanTaskTransition(phase, data.toMap(), policies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTEzOQ==", "bodyText": "Please format this, ideally as before.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467035139", "createdAt": "2020-08-07T13:19:53Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTUzOA==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467035538", "createdAt": "2020-08-07T13:20:38Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id, ProcessInstanceReadMode.READ_ONLY)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> {\n+                                                                                                           pi.abort();\n+                                                                                                           return pi.variables()\n+                                                                                                                    .toOutput();\n+                                                                                                       }).orElse(\n+                                                                                                                 null)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNjgzNg==", "bodyText": "Some methods here have each argument on a separate line, some of them don't. Can we maybe unify it? I think all can fit on one line here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467036836", "createdAt": "2020-08-07T13:22:58Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id, ProcessInstanceReadMode.READ_ONLY)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> {\n+                                                                                                           pi.abort();\n+                                                                                                           return pi.variables()\n+                                                                                                                    .toOutput();\n+                                                                                                       }).orElse(\n+                                                                                                                 null)));\n     }\n-    \n+\n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.updateVariables(resource);\n-                    return mapOutput(new $Type$Output(), pi.variables());\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> pi.updateVariables(resource)\n+                                                                                                                    .toOutput())\n+                                                                                                       .orElse(null)));\n     }\n-    \n+\n     @GET()\n     @Path(\"/{id}/tasks\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id, @QueryParam(\"user\") final String user, @QueryParam(\"group\") final List<String> groups) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> pi.workItems(policies(user, groups)))\n-                    .map(l -> l.stream().collect(Collectors.toMap(WorkItem::getId, WorkItem::getName)))\n-                    .orElse(null);\n-        });\n-    }\n-    \n-    protected $Type$Output getModel(ProcessInstance<$Type$> pi) {\n-        if (pi.status() == ProcessInstance.STATE_ERROR && pi.error().isPresent()) {\n-            throw new ProcessInstanceExecutionException(pi.id(), pi.error().get().failedNodeId(), pi.error().get().errorMessage());\n-        }\n-        \n-        return mapOutput(new $Type$Output(), pi.variables());\n+    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id,\n+                                                                @QueryParam(\"user\") final String user,\n+                                                                @QueryParam(\"group\") final List<String> groups) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2Nzc3Mw==", "bodyText": "Missing checkError().", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467067773", "createdAt": "2020-08-07T14:14:48Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "diffHunk": "@@ -32,10 +32,10 @@\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output signal(@PathParam(\"id\") final String id, final $signalType$ data) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$signalName$\", data));\n-                return getModel(pi);\n+                return pi.variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2ODQ5Nw==", "bodyText": "Probably missing checkError() also here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467068497", "createdAt": "2020-08-07T14:15:56Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -77,68 +79,61 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                      application.unitOfWorkManager(),\n+                                                      () -> process\n+                                                                   .instances()\n+                                                                   .findById(id)\n+                                                                   .map(pi -> {\n+                                                                       pi.abort();\n+                                                                       return pi.variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTA3MQ==", "bodyText": "Why not to leverage already existing fromMap() and toMap() methods on all 3 models (ModelInput, Model, ModelOutput).\nThen in ModelInput it would look something like:\npublic OrdersModel toModel() {\n        OrdersModel result = new OrdersModel();\n        result.fromMap(toMap());\n        return result;\n}\nOf course in case some variables are not available, they will be just set to null in the result.fromMap() call, but that's OK.\nAnd for Model:\npublic OrdersModelOutput toOutput() {\n        OrdersModelOutput result = new OrdersModelOutput();\n        result.fromMap(getId(), toMap());\n        return result;\n}\nAgain, ModelOutput will take only what it needs from the Model map so it should be OK.\nMy main point is to have as little code generation code as possible as it is much less readable in general than the actual runtime code. Otherwise the method duo (fromMap(), toMap()) will be now just used to bind and unbind variables I guess.\nAlso in case of a lot of variable, the code can be less verbose. I know it is a generated code but I think everybody has to look at it from time to time :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467089071", "createdAt": "2020-08-07T14:49:20Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(), inputVars, true,\n+                                 \"/class-templates/ModelNoIDTemplate.java\", new AddMethodConsumer(\"toModel\", modelName,\n+                                                                                                  inputVars, false));\n     }\n \n     public ModelMetaData generateOutputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId()) + \"Output\";\n-\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofOutput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true);\n+                                 VariableDeclarations.ofOutput(getVariableScope(process)), true);\n+    }\n+\n+    private static VariableScope getVariableScope(WorkflowProcess process) {\n+        return (VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(\n+                                                                                           VariableScope.VARIABLE_SCOPE);\n+    }\n+\n+    private static class AddMethodConsumer implements Consumer<CompilationUnit> {\n+\n+        private String methodName;\n+        private String returnClassName;\n+        private VariableDeclarations vars;\n+        private boolean includeId;\n+\n+        public AddMethodConsumer(String methodName, String returnClassName, VariableDeclarations vars, boolean includeId) {\n+            this.methodName = methodName;\n+            this.returnClassName = returnClassName;\n+            this.vars = vars;\n+            this.includeId = includeId;\n+        }\n+\n+        @Override\n+        public void accept(CompilationUnit cu) {\n+            Optional<ClassOrInterfaceDeclaration> clazz = cu.findFirst(ClassOrInterfaceDeclaration.class);\n+            if (!clazz.isPresent()) {\n+                throw new NoSuchElementException(\"Cannot find class declaration in the template\");\n+            }\n+            ClassOrInterfaceType type = parseClassOrInterfaceType(returnClassName);\n+            final String resultVarName = \"result\";\n+            MethodDeclaration method = clazz.get().addMethod(methodName, Modifier.Keyword.PUBLIC).setType(type);\n+            BlockStmt body = new BlockStmt();\n+            VariableDeclarationExpr returnVar = new VariableDeclarationExpr(type, resultVarName);\n+            body.addStatement(new AssignExpr(returnVar, new ObjectCreationExpr(null, type, NodeList.nodeList()),\n+                                             AssignExpr.Operator.ASSIGN));\n+            NameExpr returnName = new NameExpr(resultVarName);\n+            // fill id\n+            if (includeId) {\n+                body.addStatement(new MethodCallExpr(returnName, \"setId\").addArgument(new MethodCallExpr(null,\n+                                                                                                         \"getId\")));\n+            }\n+            for (Variable var : vars.getTypes().values()) {\n+                final String fieldName = StringUtils.ucFirst(var.getSanitizedName());\n+                body.addStatement(new MethodCallExpr(returnName, \"set\" + fieldName).addArgument(new MethodCallExpr(null,\n+                                                                                                                   \"get\" +\n+                                                                                                                         fieldName)));\n+            }\n+            body.addStatement(new ReturnStmt(returnName));\n+            method.setBody(body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 152}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/957bcf3f2b547753307b6bca5f554ccc129813c8", "committedDate": "2020-08-06T16:32:00Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "0d6c2fa30bad84a17311c86dd1464caec0391cd7", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0d6c2fa30bad84a17311c86dd1464caec0391cd7", "committedDate": "2020-08-07T16:12:45Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "430aa47ed1472406321395896add1f2e4e4f9900", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/430aa47ed1472406321395896add1f2e4e4f9900", "committedDate": "2020-08-07T16:19:50Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d6c2fa30bad84a17311c86dd1464caec0391cd7", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0d6c2fa30bad84a17311c86dd1464caec0391cd7", "committedDate": "2020-08-07T16:12:45Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}, "afterCommit": {"oid": "430aa47ed1472406321395896add1f2e4e4f9900", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/430aa47ed1472406321395896add1f2e4e4f9900", "committedDate": "2020-08-07T16:19:50Z", "message": "[KOGITO-2753] Processes: Remove model transformations from REST endpoint\n\nModel interface extends MapOutput and MapInput interfaces\nxxxTaskOutput classes implements MapOutput (generated code does not\nlonger need to invoke toMap when building HumanTaskTransition)\nNew methods toModel on InputModel and toOutput on Model\nAdd checkError to ProcessInstance\nModification on templates to use them (removing mapInput, mapOutput and\ngetModel)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTc4Njc3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-463578677", "createdAt": "2020-08-07T20:01:31Z", "commit": {"oid": "430aa47ed1472406321395896add1f2e4e4f9900"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDI0MTkz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#pullrequestreview-464024193", "createdAt": "2020-08-10T08:01:41Z", "commit": {"oid": "430aa47ed1472406321395896add1f2e4e4f9900"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4092, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}