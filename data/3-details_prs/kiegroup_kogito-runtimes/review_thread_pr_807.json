{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MzkwNjE1", "number": 807, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowNjozM1rOEtDsGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NTo0NVrOEx_z1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjgxODE5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowNjozM1rOHgolCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0NzowOVrOHhLDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MTMyMA==", "bodyText": "Can we assume the event.type is in fact the class name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r503981320", "createdAt": "2020-10-13T14:06:33Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,13 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNDI1MA==", "bodyText": "This should be changed, the engine is using the message node id as the type, not the domain class.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504214250", "createdAt": "2020-10-13T19:48:40Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,13 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MTMyMA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMTg2Mw==", "bodyText": "made this choice to do the filtering, let's file a jira to fix it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504431863", "createdAt": "2020-10-14T06:30:43Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,13 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MTMyMA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NjI0OA==", "bodyText": "I have added an additional filter to allow the trigger name. https://issues.redhat.com/browse/KOGITO-3591", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504546248", "createdAt": "2020-10-14T09:47:09Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,13 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MTMyMA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzgxNTQxOnYy", "diffSide": "RIGHT", "path": "kogito-shared/events-quarkus/src/main/java/org/kie/kogito/shared/events/quarkus/QuarkusCloudEventPublisher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0MDo0M1rOHgyR-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjowNDo0NFrOHkLCHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MDI4MQ==", "bodyText": "I think Multi<String> events could be set as a parameter of the method.\nLike:\nMulti<String>  makeMulti(@Channel(\"kogito_incoming_stream\") Multi<String> events)...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504140281", "createdAt": "2020-10-13T17:40:43Z", "author": {"login": "tiagodolphine"}, "path": "kogito-shared/events-quarkus/src/main/java/org/kie/kogito/shared/events/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.quarkus;import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.runtime.Startup;\n+import io.smallrye.mutiny.Multi;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Takes a @Channel event stream and re-exposes it as a Multi\n+ * (a subclass of {@link Publisher})\n+ */\n+@Startup\n+public class QuarkusCloudEventPublisher {\n+    @Channel(\"kogito_incoming_stream\")\n+    Multi<String> events;\n+\n+    @Produces\n+    @Named(\"kogito_event_publisher\")\n+    public Multi<String> makeMulti() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMTk3Ng==", "bodyText": "good point", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504431976", "createdAt": "2020-10-14T06:30:55Z", "author": {"login": "evacchi"}, "path": "kogito-shared/events-quarkus/src/main/java/org/kie/kogito/shared/events/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.quarkus;import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.runtime.Startup;\n+import io.smallrye.mutiny.Multi;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Takes a @Channel event stream and re-exposes it as a Multi\n+ * (a subclass of {@link Publisher})\n+ */\n+@Startup\n+public class QuarkusCloudEventPublisher {\n+    @Channel(\"kogito_incoming_stream\")\n+    Multi<String> events;\n+\n+    @Produces\n+    @Named(\"kogito_event_publisher\")\n+    public Multi<String> makeMulti() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MDI4MQ=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NjY3Ng==", "bodyText": "although I am not 100% sure @Channels can be given as param names. let's try...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504546676", "createdAt": "2020-10-14T09:47:45Z", "author": {"login": "evacchi"}, "path": "kogito-shared/events-quarkus/src/main/java/org/kie/kogito/shared/events/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.quarkus;import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.runtime.Startup;\n+import io.smallrye.mutiny.Multi;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Takes a @Channel event stream and re-exposes it as a Multi\n+ * (a subclass of {@link Publisher})\n+ */\n+@Startup\n+public class QuarkusCloudEventPublisher {\n+    @Channel(\"kogito_incoming_stream\")\n+    Multi<String> events;\n+\n+    @Produces\n+    @Named(\"kogito_event_publisher\")\n+    public Multi<String> makeMulti() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MDI4MQ=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5MTU1MA==", "bodyText": "I kept it as-is because it is working and I am not sure @Channel works in params, let's refine this iteratively :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r507691550", "createdAt": "2020-10-19T12:04:44Z", "author": {"login": "evacchi"}, "path": "kogito-shared/events-quarkus/src/main/java/org/kie/kogito/shared/events/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.quarkus;import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.runtime.Startup;\n+import io.smallrye.mutiny.Multi;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Takes a @Channel event stream and re-exposes it as a Multi\n+ * (a subclass of {@link Publisher})\n+ */\n+@Startup\n+public class QuarkusCloudEventPublisher {\n+    @Channel(\"kogito_incoming_stream\")\n+    Multi<String> events;\n+\n+    @Produces\n+    @Named(\"kogito_event_publisher\")\n+    public Multi<String> makeMulti() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MDI4MQ=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzgyOTk4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0NTowOFrOHgybFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0ODozMlrOHkIisA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MjYxNA==", "bodyText": "One suggestion would be to make async the method return like CompletionStage<Response> then you could do emitter.send(...).thenApply(Response.ok().build())", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504142614", "createdAt": "2020-10-13T17:45:08Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,33 +28,19 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n-    @javax.annotation.PostConstruct\n-    public void setup() {\n-        emitters = new HashMap<>();\n-        objectMapper.registerModule(JsonFormat.getCloudEventJacksonModule());\n-        /*\n-         * $repeat$\n-         * emitters.put(\"$channel$\", $emitter$);\n-         * $end_repeat$\n-         */\n-    }\n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")\n+    @javax.inject.Inject()\n+    Emitter<String> emitter;\n \n     @POST()\n     @Consumes({MediaType.APPLICATION_JSON, JsonFormat.CONTENT_TYPE})\n     @Produces(MediaType.APPLICATION_JSON)\n     public javax.ws.rs.core.Response cloudEventListener(CloudEvent event) {\n         try {\n             LOGGER.debug(\"CloudEvent received: {}\", Printer.beautify(event));\n-            if (emitters.get(event.getType()) != null) {\n-                // convert CloudEvent to JSON and send to internal channels\n-                emitters.get(event.getType()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else if (emitters.get(event.getSource().toString()) != null) { // try the source instead\n-                emitters.get(event.getSource().toString()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else {\n-                return Responses.channelNotBound(event.getType(), event);\n-            }\n+            // convert CloudEvent to JSON and send to internal channels\n+            emitter.send(objectMapper.writeValueAsString(event));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNjM1Mw==", "bodyText": "tried but then e.g. knative example hangs. Keeping it simple for now. let's file a JIRA for improvements", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504716353", "createdAt": "2020-10-14T14:19:07Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,33 +28,19 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n-    @javax.annotation.PostConstruct\n-    public void setup() {\n-        emitters = new HashMap<>();\n-        objectMapper.registerModule(JsonFormat.getCloudEventJacksonModule());\n-        /*\n-         * $repeat$\n-         * emitters.put(\"$channel$\", $emitter$);\n-         * $end_repeat$\n-         */\n-    }\n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")\n+    @javax.inject.Inject()\n+    Emitter<String> emitter;\n \n     @POST()\n     @Consumes({MediaType.APPLICATION_JSON, JsonFormat.CONTENT_TYPE})\n     @Produces(MediaType.APPLICATION_JSON)\n     public javax.ws.rs.core.Response cloudEventListener(CloudEvent event) {\n         try {\n             LOGGER.debug(\"CloudEvent received: {}\", Printer.beautify(event));\n-            if (emitters.get(event.getType()) != null) {\n-                // convert CloudEvent to JSON and send to internal channels\n-                emitters.get(event.getType()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else if (emitters.get(event.getSource().toString()) != null) { // try the source instead\n-                emitters.get(event.getSource().toString()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else {\n-                return Responses.channelNotBound(event.getType(), event);\n-            }\n+            // convert CloudEvent to JSON and send to internal channels\n+            emitter.send(objectMapper.writeValueAsString(event));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MjYxNA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY1MDczNg==", "bodyText": "ok +1, we can improve it later, running some performance tests with some profilier to check how it behaves.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r507650736", "createdAt": "2020-10-19T10:48:32Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,33 +28,19 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n-    @javax.annotation.PostConstruct\n-    public void setup() {\n-        emitters = new HashMap<>();\n-        objectMapper.registerModule(JsonFormat.getCloudEventJacksonModule());\n-        /*\n-         * $repeat$\n-         * emitters.put(\"$channel$\", $emitter$);\n-         * $end_repeat$\n-         */\n-    }\n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")\n+    @javax.inject.Inject()\n+    Emitter<String> emitter;\n \n     @POST()\n     @Consumes({MediaType.APPLICATION_JSON, JsonFormat.CONTENT_TYPE})\n     @Produces(MediaType.APPLICATION_JSON)\n     public javax.ws.rs.core.Response cloudEventListener(CloudEvent event) {\n         try {\n             LOGGER.debug(\"CloudEvent received: {}\", Printer.beautify(event));\n-            if (emitters.get(event.getType()) != null) {\n-                // convert CloudEvent to JSON and send to internal channels\n-                emitters.get(event.getType()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else if (emitters.get(event.getSource().toString()) != null) { // try the source instead\n-                emitters.get(event.getSource().toString()).send(objectMapper.writeValueAsString(event));\n-                return javax.ws.rs.core.Response.ok().build();\n-            } else {\n-                return Responses.channelNotBound(event.getType(), event);\n-            }\n+            // convert CloudEvent to JSON and send to internal channels\n+            emitter.send(objectMapper.writeValueAsString(event));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MjYxNA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg0NDk3OnYy", "diffSide": "RIGHT", "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0ODowN1rOHgyjbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjozMToxNlrOHhEF6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDc1MA==", "bodyText": "can't you just to r.completable() to be returned?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504144750", "createdAt": "2020-10-13T17:48:07Z", "author": {"login": "tiagodolphine"}, "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.spring;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.support.SendResult;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.concurrent.ListenableFuture;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+\n+/**\n+ * Spring implementation delegating to kafka template\n+ * TODO proper error handling\n+ */\n+@Component\n+public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+    @Autowired\n+    org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+\n+    public CompletionStage<Void> emit(String e) {\n+        ListenableFuture<SendResult<String, String>> r = emitter.send(\"kogito_outgoing_stream\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMjEwNA==", "bodyText": "\ud83e\udd2f", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504432104", "createdAt": "2020-10-14T06:31:16Z", "author": {"login": "evacchi"}, "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.spring;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.support.SendResult;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.concurrent.ListenableFuture;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+\n+/**\n+ * Spring implementation delegating to kafka template\n+ * TODO proper error handling\n+ */\n+@Component\n+public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+    @Autowired\n+    org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+\n+    public CompletionStage<Void> emit(String e) {\n+        ListenableFuture<SendResult<String, String>> r = emitter.send(\"kogito_outgoing_stream\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDc1MA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg3ODY0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageConsumerTemplate.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1Njo1NFrOHgy3lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0OTozN1rOHkIlOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTkwOA==", "bodyText": "maybe it would be better to subscribe into a shared executor, like .runSubscriptionOn(executor).subscribe().... because in this way the subscription to receive/handle the events would be using a different thread pool, instead of the same thread as the one bootstrapping CDI, but I'm not sure, maybe it is worth to print the thread name in the log info call and check it when receiving events... wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504149908", "createdAt": "2020-10-13T17:56:54Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageConsumerTemplate.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package $Package$;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventConsumerFactory;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import io.smallrye.mutiny.Multi;\n+\n+@io.quarkus.runtime.Startup\n+public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    @javax.inject.Inject\n+    Application application;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"$ProcessName$\") Process<$Type$> process;\n+\n+    @javax.inject.Inject\n+    ConfigBean configBean;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"kogito_event_publisher\") Publisher<String> eventPublisher;\n+\n+    @javax.annotation.PostConstruct\n+    void init() {\n+        setParams(application,\n+              process,\n+              $DataType$.class,\n+              $DataEventType$.class,\n+              \"$Trigger$\",\n+              new DefaultEventConsumerFactory(),\n+              configBean.useCloudEvents());\n+\n+        Multi.createFrom().publisher(eventPublisher)\n+                .invoke(x -> logger.info(\"Received: {}\", x))\n+                .subscribe()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMjE4MA==", "bodyText": "\ud83d\udc4d great point", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504432180", "createdAt": "2020-10-14T06:31:29Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageConsumerTemplate.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package $Package$;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventConsumerFactory;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import io.smallrye.mutiny.Multi;\n+\n+@io.quarkus.runtime.Startup\n+public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    @javax.inject.Inject\n+    Application application;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"$ProcessName$\") Process<$Type$> process;\n+\n+    @javax.inject.Inject\n+    ConfigBean configBean;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"kogito_event_publisher\") Publisher<String> eventPublisher;\n+\n+    @javax.annotation.PostConstruct\n+    void init() {\n+        setParams(application,\n+              process,\n+              $DataType$.class,\n+              $DataEventType$.class,\n+              \"$Trigger$\",\n+              new DefaultEventConsumerFactory(),\n+              configBean.useCloudEvents());\n+\n+        Multi.createFrom().publisher(eventPublisher)\n+                .invoke(x -> logger.info(\"Received: {}\", x))\n+                .subscribe()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTkwOA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNTczMQ==", "bodyText": "I tried but I got some errors, and I don't want to put too much at stake in this PR. reverted to this (which is mostly how it was done on master). Let's open a jira for improvements", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504715731", "createdAt": "2020-10-14T14:18:20Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageConsumerTemplate.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package $Package$;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventConsumerFactory;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import io.smallrye.mutiny.Multi;\n+\n+@io.quarkus.runtime.Startup\n+public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    @javax.inject.Inject\n+    Application application;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"$ProcessName$\") Process<$Type$> process;\n+\n+    @javax.inject.Inject\n+    ConfigBean configBean;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"kogito_event_publisher\") Publisher<String> eventPublisher;\n+\n+    @javax.annotation.PostConstruct\n+    void init() {\n+        setParams(application,\n+              process,\n+              $DataType$.class,\n+              $DataEventType$.class,\n+              \"$Trigger$\",\n+              new DefaultEventConsumerFactory(),\n+              configBean.useCloudEvents());\n+\n+        Multi.createFrom().publisher(eventPublisher)\n+                .invoke(x -> logger.info(\"Received: {}\", x))\n+                .subscribe()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTkwOA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY1MTM4Ng==", "bodyText": "ok +1, we can improve it later, running some performance tests with some profilier to check how it behaves.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r507651386", "createdAt": "2020-10-19T10:49:37Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageConsumerTemplate.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package $Package$;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventConsumerFactory;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import io.smallrye.mutiny.Multi;\n+\n+@io.quarkus.runtime.Startup\n+public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    @javax.inject.Inject\n+    Application application;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"$ProcessName$\") Process<$Type$> process;\n+\n+    @javax.inject.Inject\n+    ConfigBean configBean;\n+\n+    @javax.inject.Inject\n+    @javax.inject.Named(\"kogito_event_publisher\") Publisher<String> eventPublisher;\n+\n+    @javax.annotation.PostConstruct\n+    void init() {\n+        setParams(application,\n+              process,\n+              $DataType$.class,\n+              $DataEventType$.class,\n+              \"$Trigger$\",\n+              new DefaultEventConsumerFactory(),\n+              configBean.useCloudEvents());\n+\n+        Multi.createFrom().publisher(eventPublisher)\n+                .invoke(x -> logger.info(\"Received: {}\", x))\n+                .subscribe()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0OTkwOA=="}, "originalCommit": {"oid": "7aaca315ee2b1ea44e1afb359c7de717d8c1b37b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODEyMjk3OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/PingPongMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMTo0MFrOHg1Pow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMTo0MFrOHg1Pow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4ODgzNQ==", "bodyText": "Can you please create ticket/add ticket id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504188835", "createdAt": "2020-10-13T19:01:40Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/PingPongMessageTest.java", "diffHunk": "@@ -31,6 +32,7 @@\n \n @QuarkusTest\n @QuarkusTestResource(KafkaQuarkusTestResource.class)\n+@Disabled(\"Must rewrite with cloud event support + must implement emitter!\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODEyNjMyOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMjo0MFrOHg1Rug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMjo0MFrOHg1Rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTM3MA==", "bodyText": "Can you please remove version?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504189370", "createdAt": "2020-10-13T19:02:40Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/pom.xml", "diffHunk": "@@ -65,6 +65,12 @@\n             <artifactId>kogito-springboot-starter</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.kie.kogito</groupId>\n+            <artifactId>kogito-shared-events-spring</artifactId>\n+            <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODEyNzc1OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMzowNFrOHg1Sow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMzowNFrOHg1Sow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTYwMw==", "bodyText": "Can you please add Jira id?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504189603", "createdAt": "2020-10-13T19:03:04Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/src/test/java/org/kie/kogito/integrationtests/springboot/PingPongMessageTest.java", "diffHunk": "@@ -32,6 +32,9 @@\n import static org.awaitility.Awaitility.await;\n import static org.hamcrest.CoreMatchers.equalTo;\n \n+import org.junit.jupiter.api.Disabled;\n+\n+@Disabled(\"Must implement cloud event producer/emitter for Spring\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODEyOTg1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowMzozOVrOHg1T6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjoyODo1OVrOHhECGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTkyOQ==", "bodyText": "What about warn instead of debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504189929", "createdAt": "2020-10-13T19:03:39Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,14 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType()) && !cloudEventClass.getSimpleName().equals(cloudEvent.getSource())) {\n+                logger.debug(\"Consumer for CloudEvent type '{}': ignoring message with type '{}',  source '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMTEyOQ==", "bodyText": "this may overflow your console if you have many consumers. I know debug it's not great though (bit me a few times already)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504431129", "createdAt": "2020-10-14T06:28:59Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -47,6 +49,14 @@ public void consume(Application application, Process<M> process, String payload,\n         try {\n             T cloudEvent = mapper.readValue(payload, cloudEventClass);\n             M model = function.apply(cloudEvent.getData());\n+            // currently we filter out messages on the receiving end\n+            if (!cloudEventClass.getSimpleName().equals(cloudEvent.getType()) && !cloudEventClass.getSimpleName().equals(cloudEvent.getSource())) {\n+                logger.debug(\"Consumer for CloudEvent type '{}': ignoring message with type '{}',  source '{}'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE4OTkyOQ=="}, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE0MDQ0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/events/CloudEventsMessageProducerGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNjo0NlrOHg1amA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNjo0NlrOHg1amA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MTY0MA==", "bodyText": "Can you please create a ticket about removing this deprecated class and link it here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504191640", "createdAt": "2020-10-13T19:06:46Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/events/CloudEventsMessageProducerGenerator.java", "diffHunk": "@@ -15,26 +15,84 @@\n \n package org.kie.kogito.codegen.process.events;\n \n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.Expression;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n import org.jbpm.compiler.canonical.TriggerMetaData;\n import org.kie.api.definition.process.WorkflowProcess;\n+import org.kie.kogito.codegen.BodyDeclarationComparator;\n import org.kie.kogito.codegen.process.MessageProducerGenerator;\n \n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.kie.kogito.codegen.CodegenUtils.interpolateTypes;\n+\n+/**\n+ * @deprecated now all messages are cloud events", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE1MzU5OnYy", "diffSide": "RIGHT", "path": "kogito-shared/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMDozN1rOHg1isQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjowNTowM1rOHkLC2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MzcxMw==", "bodyText": "Sorry for the question but why \"shared\"? As far as I can see it is the opposite: this module contains platform specific components", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504193713", "createdAt": "2020-10-13T19:10:37Z", "author": {"login": "danielezonca"}, "path": "kogito-shared/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<!--\n+  ~  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~        http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-build-parent</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <relativePath>../kogito-build-parent/pom.xml</relativePath>\n+  </parent>\n+  <artifactId>kogito-shared</artifactId>\n+  <packaging>pom</packaging>\n+  <name>Kogito :: Shared Runtime Components</name>\n+  <description>Shared Runtime Components</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMzM5Mg==", "bodyText": "I was going after a better name than \"utils\" :D but in all seriousness, the reasoning was that the top-level may contain also \"common\" deps when needed as in  \"X-common\"  \"X-quarkus\"  \"X-spring\"\ndo propose a different name if you can think of something better. And please let it not be \"soup.\" :P", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504433392", "createdAt": "2020-10-14T06:34:25Z", "author": {"login": "evacchi"}, "path": "kogito-shared/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<!--\n+  ~  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~        http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-build-parent</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <relativePath>../kogito-build-parent/pom.xml</relativePath>\n+  </parent>\n+  <artifactId>kogito-shared</artifactId>\n+  <packaging>pom</packaging>\n+  <name>Kogito :: Shared Runtime Components</name>\n+  <description>Shared Runtime Components</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MzcxMw=="}, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2MjMzNQ==", "bodyText": "I don't know what we plan to add here in the future but in general I would suggest this hierarchy\n- kogito-platform-specific-components`\n  - events\n    - events-quarkus\n    - events-springboot\n    - events-common (if needed)\n\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504462335", "createdAt": "2020-10-14T07:33:59Z", "author": {"login": "danielezonca"}, "path": "kogito-shared/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<!--\n+  ~  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~        http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-build-parent</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <relativePath>../kogito-build-parent/pom.xml</relativePath>\n+  </parent>\n+  <artifactId>kogito-shared</artifactId>\n+  <packaging>pom</packaging>\n+  <name>Kogito :: Shared Runtime Components</name>\n+  <description>Shared Runtime Components</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MzcxMw=="}, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5MTczNw==", "bodyText": "I have moved to addons after our \"voice\" convo", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r507691737", "createdAt": "2020-10-19T12:05:03Z", "author": {"login": "evacchi"}, "path": "kogito-shared/pom.xml", "diffHunk": "@@ -0,0 +1,51 @@\n+<!--\n+  ~  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~        http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-build-parent</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <relativePath>../kogito-build-parent/pom.xml</relativePath>\n+  </parent>\n+  <artifactId>kogito-shared</artifactId>\n+  <packaging>pom</packaging>\n+  <name>Kogito :: Shared Runtime Components</name>\n+  <description>Shared Runtime Components</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MzcxMw=="}, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE1NjA2OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/CloudEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMToxM1rOHg1kJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMToxM1rOHg1kJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDA4NA==", "bodyText": "What about a javadoc?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504194084", "createdAt": "2020-10-13T19:11:13Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/CloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.services.event;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+public interface CloudEventEmitter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE2MDk2OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMjozNlrOHg1nCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMjozNlrOHg1nCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDgyNw==", "bodyText": "Do we have a quarkis issue link to paste here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504194827", "createdAt": "2020-10-13T19:12:36Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import java.util.Optional;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventConsumerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractMessageConsumer<M extends Model, D, T extends AbstractProcessDataEvent<D>> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractMessageConsumer.class);\n+\n+    private Process<M> process;\n+    private Application application;\n+    private EventConsumerFactory eventConsumerFactory;\n+    private Optional<Boolean> useCloudEvents;\n+    private String trigger;\n+    private Class<D> dataEventClass;\n+    private Class<T> cloudEventClass;\n+\n+    // in general we should favor the non-empty constructor\n+    // but there is an issue with Quarkus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE2MjU4OnYy", "diffSide": "RIGHT", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMzowN1rOHg1n_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMzowN1rOHg1n_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NTA2OA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504195068", "createdAt": "2020-10-13T19:13:07Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageProducer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.EventConsumerFactory;\n+import org.kie.kogito.services.event.EventMarshaller;\n+\n+public abstract class AbstractMessageProducer<D, T extends AbstractProcessDataEvent<D>> {\n+\n+    private Optional<Boolean> useCloudEvents;\n+    private Class<D> dataEventClass;\n+    private Class<T> cloudEventClass;\n+    private EventMarshaller marshaller;\n+    private CloudEventEmitter emitter;\n+\n+    // in general we should favor the non-empty constructor\n+    // but there is an issue with Quarkus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE4MzY2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/MessageProducerGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxOTowOVrOHg10ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxOTowOVrOHg10ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5ODMzOQ==", "bodyText": "In MessageConsumerGenerator the same method returns\ngenerator.generatedFilePath();\nWhile here is different.\nCan you please verify?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504198339", "createdAt": "2020-10-13T19:19:09Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/MessageProducerGenerator.java", "diffHunk": "@@ -65,81 +70,52 @@ public MessageProducerGenerator(\n         this.resourceClazzName = classPrefix + \"MessageProducer_\" + trigger.getOwnerId();\n         this.relativePath = packageName.replace(\".\", \"/\") + \"/\" + resourceClazzName + \".java\";\n         this.messageDataEventClassName = messageDataEventClassName;\n+\n+        this.generator = new TemplatedGenerator(\n+                packageName,\n+                resourceClazzName,\n+                RESOURCE_CDI,\n+                RESOURCE_SPRING,\n+                RESOURCE);\n+\n     }\n \n     public MessageProducerGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n         this.annotator = annotator;\n+        generator.withDependencyInjection(annotator);\n         return this;\n     }\n \n-    public String className() {\n-        return resourceClazzName;\n-    }\n-\n-    public String generatedFilePath() {\n-        return relativePath;\n-    }\n-\n-    protected boolean useInjection() {\n-        return this.annotator != null;\n-    }\n-\n-    protected String getTemplate() {\n-        return CLASS_TEMPLATE;\n-    }\n-\n     public String generate() {\n-        CompilationUnit clazz = parse(\n-                this.getClass().getResourceAsStream(this.getTemplate()));\n+        CompilationUnit clazz = generator.compilationUnit()\n+                .orElseThrow(() -> new InvalidTemplateException(resourceClazzName, generator.templatePath(), \"Cannot generate message producer\"));\n         clazz.setPackageDeclaration(process.getPackageName());\n \n         ClassOrInterfaceDeclaration template = clazz.findFirst(ClassOrInterfaceDeclaration.class).get();\n         template.setName(resourceClazzName);\n+        template.findAll(ConstructorDeclaration.class).forEach(cd -> cd.setName(resourceClazzName));\n \n         template.findAll(ClassOrInterfaceType.class).forEach(cls -> interpolateTypes(cls, trigger.getDataType()));\n-        template.findAll(MethodDeclaration.class).stream().filter(md -> md.getNameAsString().equals(\"produce\")).forEach(md -> md.getParameters().stream().filter(p -> p.getNameAsString().equals(EVENT_DATA_VAR)).forEach(p -> p.setType(trigger.getDataType())));\n-        template.findAll(MethodDeclaration.class).stream().filter(md -> md.getNameAsString().equals(\"configure\")).forEach(md -> md.addAnnotation(\"javax.annotation.PostConstruct\"));\n-        template.findAll(MethodDeclaration.class).stream().filter(md -> md.getNameAsString().equals(\"marshall\")).forEach(md -> {\n-            md.getParameters().stream().filter(p -> p.getNameAsString().equals(EVENT_DATA_VAR)).forEach(p -> p.setType(trigger.getDataType()));\n-            md.findAll(StringLiteralExpr.class).forEach(s -> s.setString(s.getValue().replace(\"$channel$\", trigger.getName())));\n-            md.findAll(ClassOrInterfaceType.class).forEach(t -> t.setName(t.getNameAsString().replace(\"$DataEventType$\", messageDataEventClassName)));\n-        });\n-\n-        if (useInjection()) {\n-            annotator.withApplicationComponent(template);\n-\n-            FieldDeclaration emitterField = template.findFirst(FieldDeclaration.class)\n-                    .filter(fd -> fd.getVariables().stream().anyMatch(v -> v.getNameAsString().equals(\"emitter\")))\n-                    .orElseThrow(() -> new IllegalStateException(\"Cannot find emitter field in MessageProducerTemplate\"));\n-            annotator.withInjection(emitterField);\n-            annotator.withOutgoingMessage(emitterField, trigger.getName());\n-            emitterField.getVariable(0).setType(annotator.emitterType(\"String\"));\n-\n-            MethodDeclaration produceMethod = template.findAll(MethodDeclaration.class).stream()\n-                    .filter(md -> md.getNameAsString().equals(\"produce\"))\n-                    .findFirst().orElseThrow(() -> new IllegalStateException(\"Cannot find produce methods in MessageProducerTemplate\"));\n-\n-            MethodCallExpr sendMethodCall = new MethodCallExpr(new NameExpr(\"emitter\"), \"send\");\n-            annotator.withMessageProducer(\n-                    sendMethodCall,\n-                    trigger.getName(),\n-                    new MethodCallExpr(new ThisExpr(), \"marshall\")\n-                            .addArgument(new NameExpr(\"pi\"))\n-                            .addArgument(new NameExpr(EVENT_DATA_VAR)));\n-\n-            this.generateProduceMethodBody(produceMethod, sendMethodCall);\n-\n-            template.findAll(FieldDeclaration.class,\n-                             fd -> fd.getVariable(0).getNameAsString().equals(\"useCloudEvents\")).forEach(fd -> annotator.withConfigInjection(fd, \"kogito.messaging.as-cloudevents\"));\n-        }\n+        template.findAll(ClassOrInterfaceType.class).forEach(t -> t.setName(t.getNameAsString().replace(\"$DataEventType$\", messageDataEventClassName)));\n+        template.findAll(ClassOrInterfaceType.class).forEach(t -> t.setName(t.getNameAsString().replace(\"$DataType$\", trigger.getDataType())));\n+        template.findAll(StringLiteralExpr.class).forEach(s -> s.setString(s.getValue().replace(\"$channel$\", trigger.getName())));\n+        template.findAll(StringLiteralExpr.class).forEach(s -> s.setString(s.getValue().replace(\"$channel$\", trigger.getName())));\n+\n \n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n \n-    protected void generateProduceMethodBody(final MethodDeclaration produceMethod, final MethodCallExpr sendMethodCall) {\n-        BlockStmt body = new BlockStmt();\n-        body.addStatement(sendMethodCall);\n-        produceMethod.setBody(body);\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    public String generatedFilePath() {\n+        return relativePath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE4NjA3OnYy", "diffSide": "RIGHT", "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxOTo0NVrOHg12NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxOTo0NVrOHg12NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5ODcwOA==", "bodyText": "Do we have a ticket for that to refer here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504198708", "createdAt": "2020-10-13T19:19:45Z", "author": {"login": "danielezonca"}, "path": "kogito-shared/events-spring/src/main/java/org/kie/kogito/shared/events/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.shared.events.spring;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.support.SendResult;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.concurrent.ListenableFuture;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+\n+/**\n+ * Spring implementation delegating to kafka template\n+ * TODO proper error handling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODIyMTI0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToyOTo1MlrOHg2L7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo1MToxM1rOHhUHsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNDI2OQ==", "bodyText": "Is this class quarkus specific? If yes please rename with CDI prefix, otherwise I'm not sure we can use microprofile reactive messaging with Spring", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504204269", "createdAt": "2020-10-13T19:29:52Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,15 +28,13 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMTQ5NA==", "bodyText": "this is specific to knative addon, where only quarkus is currently supported so far", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504431494", "createdAt": "2020-10-14T06:29:48Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,15 +28,13 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNDI2OQ=="}, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5NDcwNw==", "bodyText": "Maybe after this PR we can review this one and add SpringBoot support: https://issues.redhat.com/browse/KOGITO-2956", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r504694707", "createdAt": "2020-10-14T13:51:13Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -28,15 +28,13 @@\n     @javax.inject.Inject\n     ObjectMapper objectMapper;\n \n+    @org.eclipse.microprofile.reactive.messaging.Channel(\"kogito_incoming_stream\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNDI2OQ=="}, "originalCommit": {"oid": "457ee600a57e4e56d65d32aab727853fa5af0f75"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDQ4Nzk1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozMToxNVrOHkOdlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozMToxNVrOHkOdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NzczMw==", "bodyText": "Unused dependency?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r507747733", "createdAt": "2020-10-19T13:31:15Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsListenerResource.java", "diffHunk": "@@ -18,6 +18,7 @@\n import javax.ws.rs.core.MediaType;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.CompletionStage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd74a5c6b55d172cd0b611d9af4ab04c6d3ba2b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDIzNTIyOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/conf/StaticConfigBean.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzowNzozNFrOHnNEvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NjowMFrOHoZSRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MDcxNw==", "bodyText": "Is the Optional really needed ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r510870717", "createdAt": "2020-10-23T13:07:34Z", "author": {"login": "radtriste"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/conf/StaticConfigBean.java", "diffHunk": "@@ -14,21 +14,34 @@\n  */\n package org.kie.kogito.conf;\n \n+import java.util.Optional;\n+\n public class StaticConfigBean implements ConfigBean {\n \n     private String serviceUrl;\n+    private Optional<Boolean> useCloudEvents = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExOTM2NA==", "bodyText": "tagged you at the use site", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r512119364", "createdAt": "2020-10-26T16:56:00Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/conf/StaticConfigBean.java", "diffHunk": "@@ -14,21 +14,34 @@\n  */\n package org.kie.kogito.conf;\n \n+import java.util.Optional;\n+\n public class StaticConfigBean implements ConfigBean {\n \n     private String serviceUrl;\n+    private Optional<Boolean> useCloudEvents = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MDcxNw=="}, "originalCommit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODYxMTQxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageProducerTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NTo0NVrOHoZRmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NTo0NVrOHoZRmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExOTE5NA==", "bodyText": "the Optional is currently required at the use-sites @radtriste we can iterate and improve over this in further PRs though", "url": "https://github.com/kiegroup/kogito-runtimes/pull/807#discussion_r512119194", "createdAt": "2020-10-26T16:55:45Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/CdiMessageProducerTemplate.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.kie.kogito.test;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.impl.DefaultEventMarshaller;\n+import org.kie.kogito.services.event.CloudEventEmitter;\n+import org.kie.kogito.services.event.impl.AbstractMessageProducer;\n+\n+@javax.enterprise.context.ApplicationScoped()\n+public class MessageProducer extends AbstractMessageProducer<$DataType$, $DataEventType$> {\n+\n+    @javax.inject.Inject()\n+    CloudEventEmitter emitter;\n+    @javax.inject.Inject()\n+    ConfigBean configBean;\n+\n+    @javax.annotation.PostConstruct\n+    public void init() {\n+        setParams(emitter,\n+                  new DefaultEventMarshaller(),\n+                  configBean.useCloudEvents());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920c27b7e7ecb8d1b884f0fa33280b55924ac88c"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4834, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}