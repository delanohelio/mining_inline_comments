{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDk5ODE3", "number": 778, "title": "[KOGITO-3158] Adding RestTaskHandler", "bodyText": "Changes for adding a RestWorkItemHandler\nPlease check example at #369\nSummary of changes:\n\nUsing vert.x both for Quarkus and Springboot (jax-rs client is not working on native mode, check quarkusio/quarkus#6151). It is used in async mode, so do not block the thread while the rest invocation is being performed and handler is completed when the response arrive\nNew work item handler for Rest invocations (RestTaskHandler) has been added. Required parameters are endpoint (read from function defintion), method (read from function metadata) and ResultHandler (this one is auto generated by serverless parser). User and password for basic authentication are optional.\nSince input/output parameters can be Json objects (when serverless) or Pojo (when bpmn), rather than putting that knowledge in the handler, I have tried to encapsulate the details using Function, Supplier, Bifunction generated by code generator, but where the runtime part is not visible to RestTaskHandler class:\n- Supplier is used when generating code to fill the work iterm parameter with objects (either function or bifunction)\n- Function is used to calculate the objects to be used in different parts of the request from the input model\n- Bifunction is used to format the ouputs of the task (in case of jsonobject a non deep merge is performed)", "createdAt": "2020-09-18T19:26:38Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778", "merged": true, "mergeCommit": {"oid": "61a6b900bdbf97ef00520cc478fb74d1ca7f22df"}, "closed": true, "closedAt": "2020-09-28T12:00:15Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKLOGVABqjM3ODQwNTI2Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNSU-RgFqTQ5NzQ0MDQzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee2cabe968c33aa626688cdeb7c1d8db1c868d26", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ee2cabe968c33aa626688cdeb7c1d8db1c868d26", "committedDate": "2020-09-18T19:12:54Z", "message": "[KOGITO-3158] Adding RestTaskHandler\n\nAlso generating work item for workflow functions"}, "afterCommit": {"oid": "149cb9bd6dc6ae44e43785de5284c6dc9d9ae91f", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/149cb9bd6dc6ae44e43785de5284c6dc9d9ae91f", "committedDate": "2020-09-18T20:00:39Z", "message": "[KOGITO-3158] Adding RestTaskHandler\n\nAlso generating work item for workflow functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9ff9876298044e8ccc75c6d431ebc0c4695d6ea", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f9ff9876298044e8ccc75c6d431ebc0c4695d6ea", "committedDate": "2020-09-21T13:33:36Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "1ab33a6991ce2880eda5b5613c77e29cad2ddbae", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ab33a6991ce2880eda5b5613c77e29cad2ddbae", "committedDate": "2020-09-21T13:46:03Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ab33a6991ce2880eda5b5613c77e29cad2ddbae", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ab33a6991ce2880eda5b5613c77e29cad2ddbae", "committedDate": "2020-09-21T13:46:03Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "86a4004b13f89f293db3ca10f73607b975b3ffc0", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/86a4004b13f89f293db3ca10f73607b975b3ffc0", "committedDate": "2020-09-21T13:47:13Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86a4004b13f89f293db3ca10f73607b975b3ffc0", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/86a4004b13f89f293db3ca10f73607b975b3ffc0", "committedDate": "2020-09-21T13:47:13Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "7f6cfc225ff86c812e5316e000727d7722f9fffb", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7f6cfc225ff86c812e5316e000727d7722f9fffb", "committedDate": "2020-09-21T13:54:09Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f6cfc225ff86c812e5316e000727d7722f9fffb", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7f6cfc225ff86c812e5316e000727d7722f9fffb", "committedDate": "2020-09-21T13:54:09Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ef92b3975994d6f9442b04f4687108290701f57", "committedDate": "2020-09-21T14:00:47Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjYyMzU2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492662356", "createdAt": "2020-09-21T14:28:46Z", "commit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyODo0NlrOHVS-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDozMToxMVrOHVTFhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5Mjk4OQ==", "bodyText": "@tsurdilo don't we already have this dependency in your PR? #768", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492092989", "createdAt": "2020-09-21T14:28:46Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -53,14 +53,23 @@\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n+    </dependency>      \n+    <dependency>\n+        <groupId>com.jayway.jsonpath</groupId>\n+        <artifactId>json-path</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5NDg1Mw==", "bodyText": "This is a big name for a property! \ud83d\ude05", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492094853", "createdAt": "2020-09-21T14:31:11Z", "author": {"login": "ricardozanini"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -119,7 +120,8 @@\n     <version.org.infinispan>11.0.1.Final</version.org.infinispan>\n     <version.org.infinispan.protostream>4.3.3.Final</version.org.infinispan.protostream>\n     <version.org.infinispan.starter>2.2.3.Final</version.org.infinispan.starter>\n-    <version.org.jboss.spec.javax.ws.rs.jboss-jaxrs-api_2.1_spec>1.0.1.Final</version.org.jboss.spec.javax.ws.rs.jboss-jaxrs-api_2.1_spec>\n+    <version.org.jboss.spec.javax.ws.rs.jboss-jaxrs-api_2.1_spec>2.0.1.Final</version.org.jboss.spec.javax.ws.rs.jboss-jaxrs-api_2.1_spec>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ef92b3975994d6f9442b04f4687108290701f57", "committedDate": "2020-09-21T14:00:47Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "3846904687e60620047b5022d5b8c3f0e794ae82", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3846904687e60620047b5022d5b8c3f0e794ae82", "committedDate": "2020-09-21T15:11:54Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3846904687e60620047b5022d5b8c3f0e794ae82", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3846904687e60620047b5022d5b8c3f0e794ae82", "committedDate": "2020-09-21T15:11:54Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "760ba4fc71c661fab3bb6e9852e06812d6135282", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/760ba4fc71c661fab3bb6e9852e06812d6135282", "committedDate": "2020-09-21T15:19:18Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "760ba4fc71c661fab3bb6e9852e06812d6135282", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/760ba4fc71c661fab3bb6e9852e06812d6135282", "committedDate": "2020-09-21T15:19:18Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "9f75213e9bc31aeb35b5dfca49ab10d314f05739", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9f75213e9bc31aeb35b5dfca49ab10d314f05739", "committedDate": "2020-09-21T15:38:53Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f75213e9bc31aeb35b5dfca49ab10d314f05739", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9f75213e9bc31aeb35b5dfca49ab10d314f05739", "committedDate": "2020-09-21T15:38:53Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "a51b032f08b28c48f814d865c673d1f174aef608", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a51b032f08b28c48f814d865c673d1f174aef608", "committedDate": "2020-09-21T15:39:50Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a51b032f08b28c48f814d865c673d1f174aef608", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a51b032f08b28c48f814d865c673d1f174aef608", "committedDate": "2020-09-21T15:39:50Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ccec804cd4dad036294f0d22d14420c3ff2bbc86", "committedDate": "2020-09-21T15:42:02Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODU1MTEy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492855112", "createdAt": "2020-09-21T17:59:42Z", "commit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo1OTo0MlrOHVcXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo1OTo0MlrOHVcXjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0NjkyNw==", "bodyText": "If you are addressing results of a JsonPath query, it will/should always be an array.\nI don't fully understand the copying of values much, just return the json as-is that comes back from the rest service call.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492246927", "createdAt": "2020-09-21T17:59:42Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/JSonPathResultHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.function.BiFunction;\n+\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class JSonPathResultHandler implements BiFunction<Object, JsonObject, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODU5MDg1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492859085", "createdAt": "2020-09-21T18:05:23Z", "commit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNToyM1rOHVckDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNToyM1rOHVckDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDEyNA==", "bodyText": "Are we exposing this to users in public api? If so it could also be used insides script expressions which is nice.\nI would change it tho so it can be used easier, for example JsonPathResolver.resolve(....). much easier to deal w/ in expressions as such", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492250124", "createdAt": "2020-09-21T18:05:23Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/JsonPathResolver.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.function.UnaryOperator;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.jayway.jsonpath.Configuration;\n+import com.jayway.jsonpath.JsonPath;\n+import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider;\n+import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;\n+\n+public class JsonPathResolver implements UnaryOperator<Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODYyMjY3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492862267", "createdAt": "2020-09-21T18:09:51Z", "commit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowOTo1MlrOHVctmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowOTo1MlrOHVctmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MjU2OQ==", "bodyText": "Don't get this:\n\nIt seems very workflow specific , but then again in new version the queries are enclosed in '{{' and '}}'.\nData passed to functions even in SW are not always expressions. It can be custom JSON objects as well.\nThis seems not useful for BPMN2 scenarios no?\n'", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492252569", "createdAt": "2020-09-21T18:09:52Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/RestTaskHandler.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpRequest;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+\n+public class RestTaskHandler implements WorkItemHandler {\n+\n+    public static final String REST_TASK_TYPE = \"Rest Task\";\n+    public static final String ENDPOINT = \"endpoint\";\n+    public static final String METHOD = \"method\";\n+    public static final String PARAMETER = \"Parameter\";\n+    public static final String RESULT = \"Result\";\n+    public static final String RESULT_HANDLER = \"ResultHandler\";\n+    public static final String USER = \"User\";\n+    public static final String PASSWORD = \"Password\";\n+\n+    // package scoped to allow unit test\n+    static class RestUnaryOperator implements UnaryOperator<Object> {\n+\n+        private Object inputModel;\n+\n+        public RestUnaryOperator(Object inputModel) {\n+            this.inputModel = inputModel;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Object apply(Object value) {\n+            return value instanceof Function\n+                    ? ((Function<Object, Object>) value).apply(inputModel) : value;\n+        }\n+    }\n+\n+    private WebClient client;\n+\n+    public RestTaskHandler(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        // retrieving parameters\n+        Map<String, Object> parameters = new HashMap<>(workItem.getParameters());\n+        String endPoint = (String) getParam(parameters, ENDPOINT);\n+        String method = (String) getParam(parameters, METHOD);\n+        Object inputModel = getParam(parameters, PARAMETER);\n+        String user = (String) parameters.remove(USER);\n+        String password = (String) parameters.remove(PASSWORD);\n+        @SuppressWarnings(\"unchecked\")\n+        BiFunction<Object, JsonObject, Object> resultHandler =\n+                (BiFunction<Object, JsonObject, Object>) getParam(parameters, RESULT_HANDLER);\n+        // executing request\n+        UnaryOperator<Object> resolver = new RestUnaryOperator(inputModel);\n+        endPoint = resolvePathParams(endPoint, parameters, resolver);\n+        URI uri = URI.create(endPoint);\n+        HttpRequest<Buffer> request = client\n+            .request(HttpMethod.valueOf(method.toUpperCase()), uri.getPort(), uri.getHost(), uri.getPath());\n+\n+        if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n+            request.basicAuthentication(user, password);\n+        }\n+        HttpResponse<Buffer> response = method.equalsIgnoreCase(\"POST\") || method.equalsIgnoreCase(\"PUT\")\n+                ? request\n+                    .sendJsonAndAwait(\n+                                      parameters\n+                                          .entrySet()\n+                                          .stream()\n+                                          .collect(\n+                                                   Collectors\n+                                                       .toMap(Entry::getKey, e -> resolver.apply(e.getValue()))))\n+                : request.sendAndAwait();\n+\n+        manager\n+            .completeWorkItem(\n+                              workItem.getId(),\n+                              Collections\n+                                  .singletonMap(RESULT, resultHandler.apply(inputModel, response.bodyAsJsonObject())));\n+    }\n+\n+    @Override\n+    public void abortWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        // rest item handler does not support abort\n+    }\n+\n+    //  package scoped to allow unit test\n+    static String resolvePathParams(String endPoint, Map<String, Object> parameters, UnaryOperator<Object> resolver) {\n+        Set<String> toRemove = new HashSet<>();\n+        int start = endPoint.indexOf('{');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODY0MTAz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492864103", "createdAt": "2020-09-21T18:12:32Z", "commit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMjozMlrOHVczTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMjozMlrOHVczTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NDAzMQ==", "bodyText": "Wonder since this defines workitem we can have a generic getWorkitemNode(....) method that can handle any future workitems that we might expose in kogito like this one.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492254031", "createdAt": "2020-09-21T18:12:32Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -322,6 +340,37 @@ public WorkItemNode camelRouteServiceNode(long id, String name, Function functio\n \n         return workItemNode;\n     }\n+    \n+    public Node restServiceNode(long id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODY0MzM5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492864339", "createdAt": "2020-09-21T18:12:53Z", "commit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMjo1M1rOHVc0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMjo1M1rOHVc0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NDIzNQ==", "bodyText": "Yeah, it can also be custom JSON data.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492254235", "createdAt": "2020-09-21T18:12:53Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -322,6 +340,37 @@ public WorkItemNode camelRouteServiceNode(long id, String name, Function functio\n \n         return workItemNode;\n     }\n+    \n+    public Node restServiceNode(long id,\n+                                FunctionRef functionRef,\n+                                Function function,\n+                                NodeContainer nodeContainer) {\n+        WorkItemNode workItemNode = new WorkItemNode();\n+        workItemNode.setId(id);\n+        workItemNode.setName(function.getName());\n+        workItemNode.setMetaData(\"Type\", RestTaskHandler.REST_TASK_TYPE);\n+\n+        Work work = new WorkImpl();\n+        workItemNode.setWork(work);\n+        work.setName(RestTaskHandler.REST_TASK_TYPE);\n+        work.setParameter(RestTaskHandler.ENDPOINT, function.getResource());\n+        work.setParameter(RestTaskHandler.METHOD, ServerlessWorkflowUtils.resolveFunctionMetadata(function, RestTaskHandler.METHOD, workflowAppContext));\n+        work.setParameter(RestTaskHandler.USER, ServerlessWorkflowUtils.resolveFunctionMetadata(function, RestTaskHandler.USER, workflowAppContext));\n+        work.setParameter(RestTaskHandler.PASSWORD, ServerlessWorkflowUtils.resolveFunctionMetadata(function, RestTaskHandler.PASSWORD, workflowAppContext));\n+        \n+        if (functionRef.getParameters() != null) {\n+            for (Entry<String, String> param : functionRef.getParameters().entrySet()) {\n+                // assuming param value is json string path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ccec804cd4dad036294f0d22d14420c3ff2bbc86", "committedDate": "2020-09-21T15:42:02Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "f48b76065b32ace27450c79a4238f025861484bc", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f48b76065b32ace27450c79a4238f025861484bc", "committedDate": "2020-09-21T19:02:07Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f48b76065b32ace27450c79a4238f025861484bc", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f48b76065b32ace27450c79a4238f025861484bc", "committedDate": "2020-09-21T19:02:07Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "a6762f59a6f7b11c70416c2d4ee93351e21f39be", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a6762f59a6f7b11c70416c2d4ee93351e21f39be", "committedDate": "2020-09-21T19:19:24Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjA5NDM0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-492609434", "createdAt": "2020-09-21T13:38:40Z", "commit": {"oid": "149cb9bd6dc6ae44e43785de5284c6dc9d9ae91f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzozODo0MVrOHVQcig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo0ODozM1rOHVb97A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1MTU5NA==", "bodyText": "Can't the inputParameter be of type ObjectNode?\nMaybe add some nullchecks too?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492051594", "createdAt": "2020-09-21T13:38:41Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/JSonPathResultHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.Iterator;\n+import java.util.Map.Entry;\n+import java.util.function.BiFunction;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+\n+public class JSonPathResultHandler implements BiFunction<Object, JsonNode, Object> {\n+    @Override\n+    public Object apply(Object inputParameter, JsonNode node) {\n+        ObjectNode result = (ObjectNode) inputParameter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149cb9bd6dc6ae44e43785de5284c6dc9d9ae91f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyODM1MQ==", "bodyText": "Formatting looks odd, check the whole class.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492228351", "createdAt": "2020-09-21T17:28:23Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/JSonPathResultHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.function.BiFunction;\n+\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class JSonPathResultHandler implements BiFunction<Object, JsonObject, Object> {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(JSonPathResultHandler.class);\n+    \n+    @Override\n+    public Object apply(Object inputParameter, JsonObject node) {\n+        return transform(node,(ObjectNode) inputParameter);\n+    }\n+    \n+    private ObjectNode transform (JsonObject src, ObjectNode target) {\n+        src.forEach(e -> setValue(target,e.getKey(),e.getValue()));\n+        return target;\n+    }\n+\n+    private void setValue(ObjectNode result, String key, Object value) {\n+        if (value instanceof Double) {\n+            result.put(key, (Double)value);\n+        }\n+        else if (value instanceof Float) {\n+            result.put(key, (Float)value);\n+        }\n+        else if (value instanceof Long) {\n+            result.put(key, (Long) value);\n+        }\n+        else if (value instanceof Integer) {\n+            result.put(key, (Integer) value);\n+        }\n+        else if (value instanceof Short) {\n+            result.put(key, (Short) value);\n+        }\n+        else if (value instanceof Boolean) {\n+            result.put(key, (Boolean) value);\n+        }\n+        else if (value instanceof String) {\n+            result.put(key, (String) value);\n+        }\n+        else if (value instanceof JsonObject) {\n+            result.set(key, transform((JsonObject)value, result.objectNode()));\n+        }\n+        else if (value instanceof JsonArray) {\n+            ArrayNode array = result.arrayNode();\n+            ((JsonArray)value).forEach(v -> addValue(array,v));\n+            result.set(key,array);\n+        }\n+        else {\n+            logger.warn(\"Unrecognized data type for object {} class {}\",value,value.getClass());\n+        }\n+    }\n+    \n+    \n+    private void addValue (ArrayNode result, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzOTAzNQ==", "bodyText": "Maybe I missed something but why don't you just use the ObjectMapper to go from a String to an ObjectNode? Something like this:\nObjectNode node = (ObjectNode) objectMapper.readTree(json.encode());\n\nAlthough the readTree value returns a JsonNode it is always an ObjectNode instance (subclass)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492239035", "createdAt": "2020-09-21T17:46:12Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/JSonPathResultHandler.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.function.BiFunction;\n+\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class JSonPathResultHandler implements BiFunction<Object, JsonObject, Object> {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(JSonPathResultHandler.class);\n+    \n+    @Override\n+    public Object apply(Object inputParameter, JsonObject node) {\n+        return transform(node,(ObjectNode) inputParameter);\n+    }\n+    \n+    private ObjectNode transform (JsonObject src, ObjectNode target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MDAxMg==", "bodyText": "I prefer to have such annotations outside of the method, to favour readability.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492240012", "createdAt": "2020-09-21T17:47:48Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/RestTaskHandler.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpRequest;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+\n+public class RestTaskHandler implements WorkItemHandler {\n+\n+    public static final String REST_TASK_TYPE = \"Rest Task\";\n+    public static final String ENDPOINT = \"endpoint\";\n+    public static final String METHOD = \"method\";\n+    public static final String PARAMETER = \"Parameter\";\n+    public static final String RESULT = \"Result\";\n+    public static final String RESULT_HANDLER = \"ResultHandler\";\n+    public static final String USER = \"User\";\n+    public static final String PASSWORD = \"Password\";\n+\n+    // package scoped to allow unit test\n+    static class RestUnaryOperator implements UnaryOperator<Object> {\n+\n+        private Object inputModel;\n+\n+        public RestUnaryOperator(Object inputModel) {\n+            this.inputModel = inputModel;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Object apply(Object value) {\n+            return value instanceof Function\n+                    ? ((Function<Object, Object>) value).apply(inputModel) : value;\n+        }\n+    }\n+\n+    private WebClient client;\n+\n+    public RestTaskHandler(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        // retrieving parameters\n+        Map<String, Object> parameters = new HashMap<>(workItem.getParameters());\n+        String endPoint = (String) getParam(parameters, ENDPOINT);\n+        String method = (String) getParam(parameters, METHOD);\n+        Object inputModel = getParam(parameters, PARAMETER);\n+        String user = (String) parameters.remove(USER);\n+        String password = (String) parameters.remove(PASSWORD);\n+        @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0MDM2NA==", "bodyText": "Use constants", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492240364", "createdAt": "2020-09-21T17:48:33Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/RestTaskHandler.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpRequest;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+\n+public class RestTaskHandler implements WorkItemHandler {\n+\n+    public static final String REST_TASK_TYPE = \"Rest Task\";\n+    public static final String ENDPOINT = \"endpoint\";\n+    public static final String METHOD = \"method\";\n+    public static final String PARAMETER = \"Parameter\";\n+    public static final String RESULT = \"Result\";\n+    public static final String RESULT_HANDLER = \"ResultHandler\";\n+    public static final String USER = \"User\";\n+    public static final String PASSWORD = \"Password\";\n+\n+    // package scoped to allow unit test\n+    static class RestUnaryOperator implements UnaryOperator<Object> {\n+\n+        private Object inputModel;\n+\n+        public RestUnaryOperator(Object inputModel) {\n+            this.inputModel = inputModel;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Object apply(Object value) {\n+            return value instanceof Function\n+                    ? ((Function<Object, Object>) value).apply(inputModel) : value;\n+        }\n+    }\n+\n+    private WebClient client;\n+\n+    public RestTaskHandler(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        // retrieving parameters\n+        Map<String, Object> parameters = new HashMap<>(workItem.getParameters());\n+        String endPoint = (String) getParam(parameters, ENDPOINT);\n+        String method = (String) getParam(parameters, METHOD);\n+        Object inputModel = getParam(parameters, PARAMETER);\n+        String user = (String) parameters.remove(USER);\n+        String password = (String) parameters.remove(PASSWORD);\n+        @SuppressWarnings(\"unchecked\")\n+        BiFunction<Object, JsonObject, Object> resultHandler =\n+                (BiFunction<Object, JsonObject, Object>) getParam(parameters, RESULT_HANDLER);\n+        // executing request\n+        UnaryOperator<Object> resolver = new RestUnaryOperator(inputModel);\n+        endPoint = resolvePathParams(endPoint, parameters, resolver);\n+        URI uri = URI.create(endPoint);\n+        HttpRequest<Buffer> request = client\n+            .request(HttpMethod.valueOf(method.toUpperCase()), uri.getPort(), uri.getHost(), uri.getPath());\n+\n+        if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n+            request.basicAuthentication(user, password);\n+        }\n+        HttpResponse<Buffer> response = method.equalsIgnoreCase(\"POST\") || method.equalsIgnoreCase(\"PUT\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccec804cd4dad036294f0d22d14420c3ff2bbc86"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6762f59a6f7b11c70416c2d4ee93351e21f39be", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a6762f59a6f7b11c70416c2d4ee93351e21f39be", "committedDate": "2020-09-21T19:19:24Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "1960b6ff25ca54dfa8350c88f9cf2deedf808416", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1960b6ff25ca54dfa8350c88f9cf2deedf808416", "committedDate": "2020-09-22T08:11:41Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1960b6ff25ca54dfa8350c88f9cf2deedf808416", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1960b6ff25ca54dfa8350c88f9cf2deedf808416", "committedDate": "2020-09-22T08:11:41Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "1f26da55b84060eda620e229901b8ccb16b467e4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1f26da55b84060eda620e229901b8ccb16b467e4", "committedDate": "2020-09-22T10:10:24Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzgyOTgy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-493382982", "createdAt": "2020-09-22T11:58:16Z", "commit": {"oid": "1f26da55b84060eda620e229901b8ccb16b467e4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTo1ODoxN1rOHV2hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjowMDowOFrOHV2leA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3NTQ1OA==", "bodyText": "Why is this generated programmatically instead of being a template?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492675458", "createdAt": "2020-09-22T11:58:17Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/RestTaskDescriptor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.StaticJavaParser;\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.Modifier.Keyword;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.jbpm.process.instance.impl.rest.RestTaskHandler;\n+\n+public class RestTaskDescriptor {\n+\n+    private RestTaskDescriptor() {}\n+\n+    public static String getClassName(ProcessMetaData processMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f26da55b84060eda620e229901b8ccb16b467e4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3NjQ3Mg==", "bodyText": "I wonder if we can make this available as an addon so that we don't pollute the core with external deps (maybe another separate jira)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r492676472", "createdAt": "2020-09-22T12:00:08Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -53,14 +53,23 @@\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n+    </dependency>      \n+    <dependency>\n+        <groupId>com.jayway.jsonpath</groupId>\n+        <artifactId>json-path</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5Mjk4OQ=="}, "originalCommit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f26da55b84060eda620e229901b8ccb16b467e4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1f26da55b84060eda620e229901b8ccb16b467e4", "committedDate": "2020-09-22T10:10:24Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "6847a950d09ab8de00ae875b955db12bb0ad513b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6847a950d09ab8de00ae875b955db12bb0ad513b", "committedDate": "2020-09-22T15:44:45Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6847a950d09ab8de00ae875b955db12bb0ad513b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6847a950d09ab8de00ae875b955db12bb0ad513b", "committedDate": "2020-09-22T15:44:45Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "a02f120e8c651c1b750eed28fa306c3ff949d98d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a02f120e8c651c1b750eed28fa306c3ff949d98d", "committedDate": "2020-09-22T16:15:33Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a02f120e8c651c1b750eed28fa306c3ff949d98d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a02f120e8c651c1b750eed28fa306c3ff949d98d", "committedDate": "2020-09-22T16:15:33Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5103d97a9fa239a3103e1e358da02cfb43ccd47a", "committedDate": "2020-09-22T20:08:35Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTc0MDg2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-493974086", "createdAt": "2020-09-23T01:48:14Z", "commit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTo0ODoxNFrOHWStjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTo1ODo1MVrOHWTIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzNzI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean asBoolean (Object value) {\n          \n          \n            \n                private Boolean asBoolean(Object value) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493137292", "createdAt": "2020-09-23T01:48:14Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/WorkItemNodeVisitor.java", "diffHunk": "@@ -110,30 +117,43 @@ protected void addWorkItemParameters(Work work, BlockStmt body, String variableN\n             if(work.getParameterDefinition(entry.getKey()) != null) {\n                 paramType = work.getParameterDefinition(entry.getKey()).getType().getStringType();\n             }\n-            body.addStatement(getFactoryMethod(variableName, METHOD_WORK_PARAMETER, new StringLiteralExpr(entry.getKey()), getParameterExpr(paramType, entry.getValue().toString())));\n+            body.addStatement(getFactoryMethod(variableName, METHOD_WORK_PARAMETER, new StringLiteralExpr(entry.getKey()), getParameterExpr(paramType, entry.getValue())));\n         }\n     }\n+    \n+  \n \n-    private Expression getParameterExpr(String type, String value) {\n+    private Expression getParameterExpr(String type, Object value) {\n         ParamType pType = ParamType.fromString(type);\n         if (pType == null) {\n-            return new StringLiteralExpr(value);\n+            if (value instanceof Supplier) {\n+                return ((Supplier<Expression>)value).get();\n+            }\n+            else {\n+                return new StringLiteralExpr(value.toString());\n+            }\n+            \n         }\n         switch (pType) {\n             case BOOLEAN:\n-                return new BooleanLiteralExpr(Boolean.parseBoolean(value));\n+                return new BooleanLiteralExpr(asBoolean(value));\n             case FLOAT:\n                 return new MethodCallExpr()\n                         .setScope(new NameExpr(Float.class.getName()))\n                         .setName(\"parseFloat\")\n-                        .addArgument(new StringLiteralExpr(value));\n+                        .addArgument(new StringLiteralExpr(value.toString()));\n             case INTEGER:\n-                return new IntegerLiteralExpr(Integer.parseInt(value));\n+                return new IntegerLiteralExpr(asInteger(value));\n             default:\n-                return new StringLiteralExpr(value);\n+                return new StringLiteralExpr(value.toString());\n         }\n     }\n-\n-\n-\n+    \n+    private Boolean asBoolean (Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzNzM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Integer asInteger (Object value) {\n          \n          \n            \n                private Integer asInteger(Object value) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493137385", "createdAt": "2020-09-23T01:48:23Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/WorkItemNodeVisitor.java", "diffHunk": "@@ -110,30 +117,43 @@ protected void addWorkItemParameters(Work work, BlockStmt body, String variableN\n             if(work.getParameterDefinition(entry.getKey()) != null) {\n                 paramType = work.getParameterDefinition(entry.getKey()).getType().getStringType();\n             }\n-            body.addStatement(getFactoryMethod(variableName, METHOD_WORK_PARAMETER, new StringLiteralExpr(entry.getKey()), getParameterExpr(paramType, entry.getValue().toString())));\n+            body.addStatement(getFactoryMethod(variableName, METHOD_WORK_PARAMETER, new StringLiteralExpr(entry.getKey()), getParameterExpr(paramType, entry.getValue())));\n         }\n     }\n+    \n+  \n \n-    private Expression getParameterExpr(String type, String value) {\n+    private Expression getParameterExpr(String type, Object value) {\n         ParamType pType = ParamType.fromString(type);\n         if (pType == null) {\n-            return new StringLiteralExpr(value);\n+            if (value instanceof Supplier) {\n+                return ((Supplier<Expression>)value).get();\n+            }\n+            else {\n+                return new StringLiteralExpr(value.toString());\n+            }\n+            \n         }\n         switch (pType) {\n             case BOOLEAN:\n-                return new BooleanLiteralExpr(Boolean.parseBoolean(value));\n+                return new BooleanLiteralExpr(asBoolean(value));\n             case FLOAT:\n                 return new MethodCallExpr()\n                         .setScope(new NameExpr(Float.class.getName()))\n                         .setName(\"parseFloat\")\n-                        .addArgument(new StringLiteralExpr(value));\n+                        .addArgument(new StringLiteralExpr(value.toString()));\n             case INTEGER:\n-                return new IntegerLiteralExpr(Integer.parseInt(value));\n+                return new IntegerLiteralExpr(asInteger(value));\n             default:\n-                return new StringLiteralExpr(value);\n+                return new StringLiteralExpr(value.toString());\n         }\n     }\n-\n-\n-\n+    \n+    private Boolean asBoolean (Object value) {\n+        return value instanceof Boolean ? (Boolean) value : Boolean.parseBoolean(value.toString());\n+    }\n+    \n+    private Integer asInteger (Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0MDY3NA==", "bodyText": "+1 to move this and smallrye-mutiny-vertx-web-client out of the jbpm-flow module. If not an addon we could check if the dependencies are included in the user project, if not we can fail the compilation and ask the user to add it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493140674", "createdAt": "2020-09-23T01:53:23Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -53,14 +53,23 @@\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n+    </dependency>      \n+    <dependency>\n+        <groupId>com.jayway.jsonpath</groupId>\n+        <artifactId>json-path</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5Mjk4OQ=="}, "originalCommit": {"oid": "1ef92b3975994d6f9442b04f4687108290701f57"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0MjA5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Object readValue (JsonNode node) {\n          \n          \n            \n                private Object readValue(JsonNode node) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493142098", "createdAt": "2020-09-23T01:55:34Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/JsonPathResolver.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.jayway.jsonpath.Configuration;\n+import com.jayway.jsonpath.JsonPath;\n+import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider;\n+import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;\n+\n+/*TODO this class should be moved to a different module when available \n+ * together with jsonpath dependency*/\n+public class JsonPathResolver implements RestTaskParamResolver {\n+\n+    private static final Configuration jsonPathConfig = Configuration\n+        .builder()\n+        .mappingProvider(new JacksonMappingProvider())\n+        .jsonProvider(new JacksonJsonNodeJsonProvider())\n+        .build();\n+\n+    private String jsonPathExpr;\n+\n+    public JsonPathResolver(String jsonPathExpr) {\n+        this.jsonPathExpr = jsonPathExpr;\n+    }\n+\n+    @Override\n+    public Object apply(Object context) {\n+        JsonNode node = JsonPath\n+            .using(jsonPathConfig)\n+            .parse(context)\n+            .read(jsonPathExpr, JsonNode.class);\n+        return readValue(node);\n+    }\n+    \n+    private Object readValue (JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NDE0Ng==", "bodyText": "to be honest, I dont think it is realistic to expect that a user name and password would be stored as the workitem paramenter, AKA bpmn model.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493144146", "createdAt": "2020-09-23T01:58:51Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/rest/RestTaskHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpRequest;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+\n+public class RestTaskHandler implements WorkItemHandler {\n+\n+    public static final String REST_TASK_TYPE = \"Rest Task\";\n+    public static final String ENDPOINT = \"endpoint\";\n+    public static final String METHOD = \"method\";\n+    public static final String PARAMETER = \"Parameter\";\n+    public static final String RESULT = \"Result\";\n+    public static final String RESULT_HANDLER = \"ResultHandler\";\n+    public static final String USER = \"User\";\n+    public static final String PASSWORD = \"Password\";\n+\n+    // package scoped to allow unit test\n+    static class RestUnaryOperator implements UnaryOperator<Object> {\n+\n+        private Object inputModel;\n+\n+        public RestUnaryOperator(Object inputModel) {\n+            this.inputModel = inputModel;\n+        }\n+\n+        @Override\n+        public Object apply(Object value) {\n+            return value instanceof RestTaskParamResolver\n+                    ? ((RestTaskParamResolver) value).apply(inputModel) : value;\n+        }\n+    }\n+\n+    private WebClient client;\n+\n+    public RestTaskHandler(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        // retrieving parameters\n+        Map<String, Object> parameters = new HashMap<>(workItem.getParameters());\n+        String endPoint = getParam(parameters, ENDPOINT, String.class);\n+        HttpMethod method = HttpMethod.valueOf(getParam(parameters, METHOD, String.class).toUpperCase());\n+        Object inputModel = getParam(parameters, PARAMETER, Object.class);\n+        String user = (String) parameters.remove(USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5103d97a9fa239a3103e1e358da02cfb43ccd47a", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5103d97a9fa239a3103e1e358da02cfb43ccd47a", "committedDate": "2020-09-22T20:08:35Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "07ceec69b278edac4db9caf5252849520db6a312", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/07ceec69b278edac4db9caf5252849520db6a312", "committedDate": "2020-09-23T08:41:34Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07ceec69b278edac4db9caf5252849520db6a312", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/07ceec69b278edac4db9caf5252849520db6a312", "committedDate": "2020-09-23T08:41:34Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "1fa8dd5ffc271d16ca5556eccc4fb67cfe739b4a", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1fa8dd5ffc271d16ca5556eccc4fb67cfe739b4a", "committedDate": "2020-09-23T10:47:03Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fa8dd5ffc271d16ca5556eccc4fb67cfe739b4a", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1fa8dd5ffc271d16ca5556eccc4fb67cfe739b4a", "committedDate": "2020-09-23T10:47:03Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "9e14173c54c8e8122cb5be40574d496912e8896b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9e14173c54c8e8122cb5be40574d496912e8896b", "committedDate": "2020-09-23T14:35:04Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e14173c54c8e8122cb5be40574d496912e8896b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9e14173c54c8e8122cb5be40574d496912e8896b", "committedDate": "2020-09-23T14:35:04Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "ceee371594df3957dd924a00c80def5ff39adb21", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ceee371594df3957dd924a00c80def5ff39adb21", "committedDate": "2020-09-23T15:09:04Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ceee371594df3957dd924a00c80def5ff39adb21", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ceee371594df3957dd924a00c80def5ff39adb21", "committedDate": "2020-09-23T15:09:04Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "d148ac8ea6d449d6790fa85a9fd7e211fbd3d11f", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d148ac8ea6d449d6790fa85a9fd7e211fbd3d11f", "committedDate": "2020-09-23T15:13:11Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d148ac8ea6d449d6790fa85a9fd7e211fbd3d11f", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d148ac8ea6d449d6790fa85a9fd7e211fbd3d11f", "committedDate": "2020-09-23T15:13:11Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "35ab3b99fce919ebf32c495732a8b0fc61369b99", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/35ab3b99fce919ebf32c495732a8b0fc61369b99", "committedDate": "2020-09-23T15:47:52Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35ab3b99fce919ebf32c495732a8b0fc61369b99", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/35ab3b99fce919ebf32c495732a8b0fc61369b99", "committedDate": "2020-09-23T15:47:52Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "8ac700788713b695a6bb6ca309267a7195eee48e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8ac700788713b695a6bb6ca309267a7195eee48e", "committedDate": "2020-09-23T15:59:16Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODM3ODY3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-494837867", "createdAt": "2020-09-23T16:25:51Z", "commit": {"oid": "8ac700788713b695a6bb6ca309267a7195eee48e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNTo1MVrOHW2tjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyNTo1MVrOHW2tjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNzExNg==", "bodyText": "Any reason we are not sending json here as well? For SW at least the content type should always be application/json.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493727116", "createdAt": "2020-09-23T16:25:51Z", "author": {"login": "tsurdilo"}, "path": "jbpm/jbpm-rest-handler/src/main/java/org/jbpm/process/instance/impl/rest/RestTaskHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+\n+public class RestTaskHandler implements WorkItemHandler {\n+\n+    public static final String REST_TASK_TYPE = \"Rest Task\";\n+    public static final String ENDPOINT = \"endpoint\";\n+    public static final String METHOD = \"method\";\n+    public static final String PARAMETER = \"Parameter\";\n+    public static final String RESULT = \"Result\";\n+    public static final String RESULT_HANDLER = \"ResultHandler\";\n+    public static final String USER = \"User\";\n+    public static final String PASSWORD = \"Password\";\n+\n+    // package scoped to allow unit test\n+    static class RestUnaryOperator implements UnaryOperator<Object> {\n+\n+        private Object inputModel;\n+\n+        public RestUnaryOperator(Object inputModel) {\n+            this.inputModel = inputModel;\n+        }\n+\n+        @Override\n+        public Object apply(Object value) {\n+            return value instanceof RestTaskParamResolver\n+                    ? ((RestTaskParamResolver) value).apply(inputModel) : value;\n+        }\n+    }\n+\n+    private WebClient client;\n+\n+    public RestTaskHandler(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n+        // retrieving parameters\n+        Map<String, Object> parameters = new HashMap<>(workItem.getParameters());\n+        String endPoint = getParam(parameters, ENDPOINT, String.class);\n+        HttpMethod method = HttpMethod.valueOf(getParam(parameters, METHOD, String.class).toUpperCase());\n+        Object inputModel = getParam(parameters, PARAMETER, Object.class);\n+        String user = (String) parameters.remove(USER);\n+        String password = (String) parameters.remove(PASSWORD);\n+        RestTaskResultHandler resultHandler = getParam(parameters, RESULT_HANDLER, RestTaskResultHandler.class);\n+        // create request\n+        UnaryOperator<Object> resolver = new RestUnaryOperator(inputModel);\n+        endPoint = resolvePathParams(endPoint, parameters, resolver);\n+        URI uri = URI.create(endPoint);\n+        HttpRequest<Buffer> request = client.request(method, uri.getPort(), uri.getHost(), uri.getPath());\n+        if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n+            request.basicAuthentication(user, password);\n+        }\n+        // execute request\n+         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n+                manager\n+                .completeWorkItem(\n+                                  workItem.getId(),\n+                                  Collections\n+                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        if (method == HttpMethod.POST || method == HttpMethod.PUT) {\n+            // if parameters is empty at this stage, assume post content is the whole input model\n+            // if not, build a map from parameters remaining\n+            Object body = parameters.isEmpty() ? inputModel : parameters\n+                .entrySet()\n+                .stream()\n+                .collect(\n+                         Collectors\n+                             .toMap(Entry::getKey, e -> resolver.apply(e.getValue())));\n+           \n+            request.sendJson(body, handler);\n+        } else {\n+            request.send(handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac700788713b695a6bb6ca309267a7195eee48e"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ac700788713b695a6bb6ca309267a7195eee48e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8ac700788713b695a6bb6ca309267a7195eee48e", "committedDate": "2020-09-23T15:59:16Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "ed593e9b9b0ec43bdb968ac1454af0a2c898a139", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ed593e9b9b0ec43bdb968ac1454af0a2c898a139", "committedDate": "2020-09-23T18:39:55Z", "message": "[KOGITO-3158] Switching to vert.x"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed593e9b9b0ec43bdb968ac1454af0a2c898a139", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ed593e9b9b0ec43bdb968ac1454af0a2c898a139", "committedDate": "2020-09-23T18:39:55Z", "message": "[KOGITO-3158] Switching to vert.x"}, "afterCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c85efd99f0f99a3704ebf8174dbed464c5766edd", "committedDate": "2020-09-23T19:41:04Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NzMzMDU0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-494733054", "createdAt": "2020-09-23T14:38:40Z", "commit": {"oid": "1fa8dd5ffc271d16ca5556eccc4fb67cfe739b4a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDozODo0MFrOHWx1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDozODo0MFrOHWx1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY0NzI2MA==", "bodyText": "I think you might want to check value != null or it will throw NPE", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r493647260", "createdAt": "2020-09-23T14:38:40Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/WorkItemNodeVisitor.java", "diffHunk": "@@ -110,30 +117,42 @@ protected void addWorkItemParameters(Work work, BlockStmt body, String variableN\n             if(work.getParameterDefinition(entry.getKey()) != null) {\n                 paramType = work.getParameterDefinition(entry.getKey()).getType().getStringType();\n             }\n-            body.addStatement(getFactoryMethod(variableName, METHOD_WORK_PARAMETER, new StringLiteralExpr(entry.getKey()), getParameterExpr(paramType, entry.getValue().toString())));\n+            body.addStatement(getFactoryMethod(variableName, METHOD_WORK_PARAMETER, new StringLiteralExpr(entry.getKey()), getParameterExpr(paramType, entry.getValue())));\n         }\n     }\n+    \n+  \n \n-    private Expression getParameterExpr(String type, String value) {\n+    private Expression getParameterExpr(String type, Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa8dd5ffc271d16ca5556eccc4fb67cfe739b4a"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c85efd99f0f99a3704ebf8174dbed464c5766edd", "committedDate": "2020-09-23T19:41:04Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "c0879d334c6c285de952a8691104a023808641a2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c0879d334c6c285de952a8691104a023808641a2", "committedDate": "2020-09-24T10:17:26Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0879d334c6c285de952a8691104a023808641a2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c0879d334c6c285de952a8691104a023808641a2", "committedDate": "2020-09-24T10:17:26Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "5383f4ede8e9e3cde9e16eaf5cc67720e57b3769", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5383f4ede8e9e3cde9e16eaf5cc67720e57b3769", "committedDate": "2020-09-24T12:41:54Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzQyNDU5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-495342459", "createdAt": "2020-09-24T08:37:14Z", "commit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODozNzoxNFrOHXPzrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1NTozNFrOHXcGyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzODI4Nw==", "bodyText": "What is the purpose of creating a separate work item handler for each process? A separate vertX client for each of them?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494138287", "createdAt": "2020-09-24T08:37:14Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/RestTaskDescriptor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class RestTaskDescriptor {\n+\n+    private RestTaskDescriptor() {}\n+\n+    public static String getClassName(ProcessMetaData processMetadata) {\n+        return processMetadata.getProcessId() + \"RestTaskHandler\";\n+    }\n+\n+    public static CompilationUnit generateHandlerClassForService(String className) {\n+        CompilationUnit compilationUnit =\n+                parse(RestTaskDescriptor.class.getResourceAsStream(\"/class-templates/RestTaskTemplate.java\"));\n+        compilationUnit.setPackageDeclaration(\"org.kie.kogito.handlers\");\n+        compilationUnit.findFirst(ClassOrInterfaceDeclaration.class).ifPresent(c -> c.setName(className));\n+        compilationUnit.findAll(ConstructorDeclaration.class).forEach(c -> c.setName(className));\n+        return compilationUnit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0OTYzMA==", "bodyText": "I think in jbpm it is a good convention to end all Work Item handlers with *WorkItemHandler suffix, i.e. RestWorkItemHandler. This way it is easier to distinguish them from SAX Parser handlers for example.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494149630", "createdAt": "2020-09-24T08:54:04Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/RestTaskDescriptor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public class RestTaskDescriptor {\n+\n+    private RestTaskDescriptor() {}\n+\n+    public static String getClassName(ProcessMetaData processMetadata) {\n+        return processMetadata.getProcessId() + \"RestTaskHandler\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MTEyMQ==", "bodyText": "I know it is just a template but still would be good to name it xxxRestWorkItemHandler, both the constructors and the name of the class.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494151121", "createdAt": "2020-09-24T08:56:16Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/resources/class-templates/RestTaskTemplate.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.jbpm.process.codegen;\n+\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.core.Vertx;\n+import org.jbpm.process.instance.impl.rest.RestTaskHandler;\n+\n+public class xxxTaskHandler extends RestTaskHandler {\n+\n+    public xxxRestTaskHandler() {\n+        this(Vertx.vertx());\n+    }\n+\n+    public xxxRestTaskHandler(Vertx vertx) {\n+        super(WebClient.create(vertx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1MTIyOQ==", "bodyText": "Unnecessary changes.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494151229", "createdAt": "2020-09-24T08:56:27Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -54,13 +54,13 @@\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n     </dependency>\n-\n     <dependency>\n       <groupId>javax.xml.bind</groupId>\n       <artifactId>jaxb-api</artifactId>\n       <scope>provided</scope>\n     </dependency>\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1Mzk1Mg==", "bodyText": "Maybe it is time to create a jbpm-workitems submodule under the jbpm module and name this jbpm-workitems-rest as in jbpm:\nhttps://github.com/kiegroup/jbpm/tree/b4f456714049fd497d03b6dc75b66efcd117fb4f/jbpm-workitems/jbpm-workitems-rest\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494153952", "createdAt": "2020-09-24T09:00:37Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-rest-handler/pom.xml", "diffHunk": "@@ -0,0 +1,31 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>addons</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1OTA4Mg==", "bodyText": "RestWorkItemHandler would be better.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494159082", "createdAt": "2020-09-24T09:09:02Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-rest-handler/src/main/java/org/jbpm/process/instance/impl/rest/RestTaskHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemHandler;\n+import org.kie.api.runtime.process.WorkItemManager;\n+\n+public class RestTaskHandler implements WorkItemHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c85efd99f0f99a3704ebf8174dbed464c5766edd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDA2MQ==", "bodyText": "Isn't it better to call it RestTaskHandlerTest? I know junit 5 doesn't need it, but it is still a good convention.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494314061", "createdAt": "2020-09-24T13:25:22Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-rest-handler/src/test/java/org/jbpm/process/instance/impl/rest/TestRestTaskHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.rest;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class TestRestTaskHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5383f4ede8e9e3cde9e16eaf5cc67720e57b3769"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMDQ4NQ==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494320485", "createdAt": "2020-09-24T13:33:56Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-serverless-workflow-runtime/src/test/java/TestRestTaskHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import org.jbpm.process.instance.impl.rest.RestTaskHandler;\n+import org.jbpm.serverless.workflow.JSonPathResultHandler;\n+import org.jbpm.serverless.workflow.JsonPathResolver;\n+import org.junit.jupiter.api.Test;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemManager;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestRestTaskHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5383f4ede8e9e3cde9e16eaf5cc67720e57b3769"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzOTc4Nw==", "bodyText": "Just a typo: Cannot a find a...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494339787", "createdAt": "2020-09-24T13:55:34Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -388,38 +388,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 Parameter parameter = new Parameter(clazzNameType, varName);\n                 if (useInjection()) {\n                     annotator.withApplicationComponent(handlerClazz);\n+                    annotator\n+                        .withInjection(\n+                                       handlerClazz\n+                                           .getConstructors()\n+                                           .stream()\n+                                           .filter(c -> !c.getParameters().isEmpty())\n+                                           .findFirst()\n+                                           .orElseThrow(\n+                                                        () -> new IllegalStateException(\n+                                                            \"Cannot a find a non empty constructor to annotate in handler class \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5383f4ede8e9e3cde9e16eaf5cc67720e57b3769"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5383f4ede8e9e3cde9e16eaf5cc67720e57b3769", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5383f4ede8e9e3cde9e16eaf5cc67720e57b3769", "committedDate": "2020-09-24T12:41:54Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "4ca0d221e4446e24338ffbd70114290cb9fee2b0", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ca0d221e4446e24338ffbd70114290cb9fee2b0", "committedDate": "2020-09-24T15:01:01Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ca0d221e4446e24338ffbd70114290cb9fee2b0", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ca0d221e4446e24338ffbd70114290cb9fee2b0", "committedDate": "2020-09-24T15:01:01Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6d143a0cc598832b7a6bd017cc2adca371754fa4", "committedDate": "2020-09-24T15:11:54Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODkxMDcx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-495891071", "createdAt": "2020-09-24T19:33:29Z", "commit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MjkxNzgz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-496291783", "createdAt": "2020-09-25T10:14:55Z", "commit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoxNDo1NlrOHX9taw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoyMToyNlrOHX95lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDM0Nw==", "bodyText": "please check format", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494890347", "createdAt": "2020-09-25T10:14:56Z", "author": {"login": "cristianonicolai"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -350,6 +351,12 @@\n         <artifactId>json-path-assert</artifactId>\n         <version>${version.jayway.jsonpath}</version>\n       </dependency>\n+      \n+      <dependency>\n+        <groupId>io.vertx</groupId>\n+        <artifactId>vertx-web-client</artifactId>\n+        <version>${version.vertx.web.client}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDUyOQ==", "bodyText": "kogito-rest-workitem", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494890529", "createdAt": "2020-09-25T10:15:15Z", "author": {"login": "cristianonicolai"}, "path": "kogito-bom/pom.xml", "diffHunk": "@@ -910,6 +910,18 @@\n         <version>${project.version}</version>\n         <classifier>sources</classifier>\n       </dependency>\n+      \n+       <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>jbpm-rest-handler</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDgyNQ==", "bodyText": "kogito-rest-workitem", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494890825", "createdAt": "2020-09-25T10:15:50Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-workitems/pom.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+   <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>jbpm</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>jbpm-workitems</artifactId>\n+  <packaging>pom</packaging>\n+  <name>Kogito :: jbpm :: Workitems</name>\n+\n+  <description>Kogito work items handlers</description>\n+  <modules>\n+    <module>jbpm-rest-handler</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTE2Mw==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494891163", "createdAt": "2020-09-25T10:16:33Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/WorkItemNodeVisitor.java", "diffHunk": "@@ -85,8 +87,13 @@ public void visitNode(String factoryField, T node, BlockStmt body, VariableScope\n             CompilationUnit generatedHandler = d.generateHandlerClassForService();\n             metadata.getGeneratedHandlers().put(mangledName, generatedHandler);\n             workName = mangledName;\n+        } else if (workName.equals(\"Rest Task\")) {\n+            workName = RestTaskDescriptor.getClassName(metadata);\n+            metadata\n+                .getGeneratedHandlers()\n+                .computeIfAbsent(workName,RestTaskDescriptor::generateHandlerClassForService);\n         }\n-\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTYxNQ==", "bodyText": "probably not needed to add this file, should be covered by the one at the root level.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494891615", "createdAt": "2020-09-25T10:17:33Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-rest-handler/.gitignore", "diffHunk": "@@ -0,0 +1,14 @@\n+/target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MjU4OA==", "bodyText": "in most tests, we end up using import static to most Mockito API calls,", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494892588", "createdAt": "2020-09-25T10:19:35Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow-runtime/src/test/java/RestTaskHandlerTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import org.jbpm.process.instance.impl.rest.RestWorkItemHandler;\n+import org.jbpm.serverless.workflow.JSonPathResultHandler;\n+import org.jbpm.serverless.workflow.JsonPathResolver;\n+import org.junit.jupiter.api.Test;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemManager;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class RestTaskHandlerTest {\n+    \n+    @Test\n+    void testGetRestTaskHandler() {\n+        WebClient webClient = Mockito.mock(WebClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MjcxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> parameters =\n          \n          \n            \n                            new HashMap<>();\n          \n          \n            \n                    Map<String, Object> parameters = new HashMap<>();", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494892718", "createdAt": "2020-09-25T10:19:50Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow-runtime/src/test/java/RestTaskHandlerTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import org.jbpm.process.instance.impl.rest.RestWorkItemHandler;\n+import org.jbpm.serverless.workflow.JSonPathResultHandler;\n+import org.jbpm.serverless.workflow.JsonPathResolver;\n+import org.junit.jupiter.api.Test;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemManager;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class RestTaskHandlerTest {\n+    \n+    @Test\n+    void testGetRestTaskHandler() {\n+        WebClient webClient = Mockito.mock(WebClient.class);\n+        ObjectMapper mapper = new ObjectMapper();\n+        HttpRequest<Buffer> request = Mockito.mock(HttpRequest.class);\n+        HttpResponse<Buffer> response = Mockito.mock(HttpResponse.class);\n+        AsyncResult<HttpResponse<Buffer>> event = Mockito.mock(AsyncResult.class);\n+        Mockito.when(event.result()).thenReturn(response);\n+        Mockito\n+            .when(webClient.request(HttpMethod.GET, 8080, \"localhost\", \"/results/26/names/pepe\"))\n+            .thenReturn(request);\n+        Mockito.doAnswer((Answer<Void>) invocation -> {\n+            Handler<AsyncResult<HttpResponse<Buffer>>> handler =\n+                    (Handler<AsyncResult<HttpResponse<Buffer>>>) invocation.getArgument(0);\n+            handler.handle(event);\n+            return null;\n+        }).when(request).send(Mockito.any(Handler.class));\n+        Mockito.when(response.bodyAsJsonObject()).thenReturn(JsonObject.mapFrom(Collections.singletonMap(\"num\", 1)));\n+\n+        Map<String, Object> parameters =\n+                new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5Mjg2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    WorkItem workItem = Mockito\n          \n          \n            \n                        .mock(\n          \n          \n            \n                              WorkItem.class);\n          \n          \n            \n                    WorkItem workItem = mock(WorkItem.class);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494892868", "createdAt": "2020-09-25T10:20:07Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow-runtime/src/test/java/RestTaskHandlerTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import org.jbpm.process.instance.impl.rest.RestWorkItemHandler;\n+import org.jbpm.serverless.workflow.JSonPathResultHandler;\n+import org.jbpm.serverless.workflow.JsonPathResolver;\n+import org.junit.jupiter.api.Test;\n+import org.kie.api.runtime.process.WorkItem;\n+import org.kie.api.runtime.process.WorkItemManager;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class RestTaskHandlerTest {\n+    \n+    @Test\n+    void testGetRestTaskHandler() {\n+        WebClient webClient = Mockito.mock(WebClient.class);\n+        ObjectMapper mapper = new ObjectMapper();\n+        HttpRequest<Buffer> request = Mockito.mock(HttpRequest.class);\n+        HttpResponse<Buffer> response = Mockito.mock(HttpResponse.class);\n+        AsyncResult<HttpResponse<Buffer>> event = Mockito.mock(AsyncResult.class);\n+        Mockito.when(event.result()).thenReturn(response);\n+        Mockito\n+            .when(webClient.request(HttpMethod.GET, 8080, \"localhost\", \"/results/26/names/pepe\"))\n+            .thenReturn(request);\n+        Mockito.doAnswer((Answer<Void>) invocation -> {\n+            Handler<AsyncResult<HttpResponse<Buffer>>> handler =\n+                    (Handler<AsyncResult<HttpResponse<Buffer>>>) invocation.getArgument(0);\n+            handler.handle(event);\n+            return null;\n+        }).when(request).send(Mockito.any(Handler.class));\n+        Mockito.when(response.bodyAsJsonObject()).thenReturn(JsonObject.mapFrom(Collections.singletonMap(\"num\", 1)));\n+\n+        Map<String, Object> parameters =\n+                new HashMap<>();\n+        parameters.put(\"id\", new JsonPathResolver(\"$.id\"));\n+        parameters.put(\"name\", new JsonPathResolver(\"$.name\"));\n+        parameters.put(RestWorkItemHandler.ENDPOINT, \"http://localhost:8080/results/{id}/names/{name}\");\n+        parameters.put(RestWorkItemHandler.METHOD, \"GET\");\n+        parameters.put(RestWorkItemHandler.RESULT_HANDLER, new JSonPathResultHandler());\n+        parameters.put(RestWorkItemHandler.PARAMETER, mapper.createObjectNode().put(\"id\", 26).put(\"name\", \"pepe\"));\n+\n+        WorkItem workItem = Mockito\n+            .mock(\n+                  WorkItem.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MzA4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        current = factory.restServiceNode (idCounter.getAndIncrement(), action.getFunctionRef(), actionFunction,embeddedSubProcess);\n          \n          \n            \n                                        current = factory.restServiceNode(idCounter.getAndIncrement(), action.getFunctionRef(), actionFunction, embeddedSubProcess);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494893086", "createdAt": "2020-09-25T10:20:36Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "diffHunk": "@@ -403,55 +418,41 @@ protected void handleActions(List<Function> workflowFunctions, List<Action> acti\n                 Function actionFunction = workflowFunctions.stream()\n                         .filter(wf -> wf.getName().equals(action.getFunctionRef().getRefName()))\n                         .findFirst()\n-                        .get();\n-\n-                if (actionFunction.getType() != null) {\n-                    if (SCRIPT_TYPE.equalsIgnoreCase(actionFunction.getType())) {\n-                        String script = ServerlessWorkflowUtils.scriptFunctionScript(action.getFunctionRef().getParameters().get(SCRIPT_TYPE_PARAM));\n-                        current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (SYSOUT_TYPE.equalsIgnoreCase(actionFunction.getType())) {\n-                        String script = ServerlessWorkflowUtils.sysOutFunctionScript(action.getFunctionRef().getParameters().get(SYSOUT_TYPE_PARAM));\n-                        current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (SERVICE_TYPE.equalsIgnoreCase(actionFunction.getType())) {\n-                        current = factory.serviceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (DECISION_TYPE.equals(actionFunction.getType())) {\n-                        current = factory.humanTaskNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, process, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (RULE_TYPE.equals(actionFunction.getType())) {\n-                        current = factory.ruleSetNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (INTEGRATION_TYPE.equals(actionFunction.getType())) {\n-                        current = factory.camelRouteServiceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else {\n-                        LOGGER.warn(\"currently unsupported function type, supported types are 'script', 'sysout', 'service', 'decision', 'rule', 'integration'\");\n-                        LOGGER.warn(\"defaulting to script type\");\n-                        String script = ServerlessWorkflowUtils.scriptFunctionScript(\"\");\n-                        current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n+                        .orElseThrow(()-> new IllegalArgumentException(\"cannot find function \"+action.getFunctionRef().getRefName()));\n+                if (actionFunction.getType() != null) {                    \n+                    switch (actionFunction.getType().toLowerCase())\n+                    {\n+                        case SCRIPT_TYPE: \n+                            current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), \n+                                                         ServerlessWorkflowUtils.scriptFunctionScript(action.getFunctionRef().getParameters().get(SCRIPT_TYPE_PARAM)), embeddedSubProcess);\n+                            break;\n+                        case  SYSOUT_TYPE:\n+                            current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), \n+                                                         ServerlessWorkflowUtils.sysOutFunctionScript(action.getFunctionRef().getParameters().get(SYSOUT_TYPE_PARAM)), embeddedSubProcess);\n+                            break;\n+                        case SERVICE_TYPE:\n+                            current = factory.serviceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n+                            break;\n+                        case DECISION_TYPE:\n+                            current = factory.humanTaskNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, process, embeddedSubProcess);\n+                            break;\n+                        case RULE_TYPE: \n+                            current = factory.ruleSetNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n+                            break;\n+                        case INTEGRATION_TYPE:\n+                            current = factory.camelRouteServiceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n+                            break;\n+                        case REST_TYPE: \n+                            current = factory.restServiceNode (idCounter.getAndIncrement(), action.getFunctionRef(), actionFunction,embeddedSubProcess);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MzE2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                               current = unsupportedNode(action,embeddedSubProcess);\n          \n          \n            \n                               current = unsupportedNode(action, embeddedSubProcess);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494893164", "createdAt": "2020-09-25T10:20:47Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "diffHunk": "@@ -403,55 +418,41 @@ protected void handleActions(List<Function> workflowFunctions, List<Action> acti\n                 Function actionFunction = workflowFunctions.stream()\n                         .filter(wf -> wf.getName().equals(action.getFunctionRef().getRefName()))\n                         .findFirst()\n-                        .get();\n-\n-                if (actionFunction.getType() != null) {\n-                    if (SCRIPT_TYPE.equalsIgnoreCase(actionFunction.getType())) {\n-                        String script = ServerlessWorkflowUtils.scriptFunctionScript(action.getFunctionRef().getParameters().get(SCRIPT_TYPE_PARAM));\n-                        current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (SYSOUT_TYPE.equalsIgnoreCase(actionFunction.getType())) {\n-                        String script = ServerlessWorkflowUtils.sysOutFunctionScript(action.getFunctionRef().getParameters().get(SYSOUT_TYPE_PARAM));\n-                        current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (SERVICE_TYPE.equalsIgnoreCase(actionFunction.getType())) {\n-                        current = factory.serviceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (DECISION_TYPE.equals(actionFunction.getType())) {\n-                        current = factory.humanTaskNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, process, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (RULE_TYPE.equals(actionFunction.getType())) {\n-                        current = factory.ruleSetNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else if (INTEGRATION_TYPE.equals(actionFunction.getType())) {\n-                        current = factory.camelRouteServiceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n-                    } else {\n-                        LOGGER.warn(\"currently unsupported function type, supported types are 'script', 'sysout', 'service', 'decision', 'rule', 'integration'\");\n-                        LOGGER.warn(\"defaulting to script type\");\n-                        String script = ServerlessWorkflowUtils.scriptFunctionScript(\"\");\n-                        current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                        factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                        start = current;\n+                        .orElseThrow(()-> new IllegalArgumentException(\"cannot find function \"+action.getFunctionRef().getRefName()));\n+                if (actionFunction.getType() != null) {                    \n+                    switch (actionFunction.getType().toLowerCase())\n+                    {\n+                        case SCRIPT_TYPE: \n+                            current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), \n+                                                         ServerlessWorkflowUtils.scriptFunctionScript(action.getFunctionRef().getParameters().get(SCRIPT_TYPE_PARAM)), embeddedSubProcess);\n+                            break;\n+                        case  SYSOUT_TYPE:\n+                            current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), \n+                                                         ServerlessWorkflowUtils.sysOutFunctionScript(action.getFunctionRef().getParameters().get(SYSOUT_TYPE_PARAM)), embeddedSubProcess);\n+                            break;\n+                        case SERVICE_TYPE:\n+                            current = factory.serviceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n+                            break;\n+                        case DECISION_TYPE:\n+                            current = factory.humanTaskNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, process, embeddedSubProcess);\n+                            break;\n+                        case RULE_TYPE: \n+                            current = factory.ruleSetNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n+                            break;\n+                        case INTEGRATION_TYPE:\n+                            current = factory.camelRouteServiceNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), actionFunction, embeddedSubProcess);\n+                            break;\n+                        case REST_TYPE: \n+                            current = factory.restServiceNode (idCounter.getAndIncrement(), action.getFunctionRef(), actionFunction,embeddedSubProcess);\n+                            break;\n+                        default:\n+                            current = unsupportedNode(action,embeddedSubProcess);\n                     }\n                 } else {\n-                    LOGGER.warn(\"invalid function type. supported types are 'script', 'sysout', 'service', 'decision', 'ruleunit'\");\n-                    LOGGER.warn(\"defaulting to script type\");\n-                    String script = ServerlessWorkflowUtils.scriptFunctionScript(\"\");\n-                    current = factory.scriptNode(idCounter.getAndIncrement(), action.getFunctionRef().getRefName(), script, embeddedSubProcess);\n-\n-                    factory.connect(start.getId(), current.getId(), start.getId() + \"_\" + current.getId(), embeddedSubProcess);\n-                    start = current;\n+                   current = unsupportedNode(action,embeddedSubProcess);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MzM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Node unsupportedNode (Action action, CompositeContextNode embeddedSubProcess) {\n          \n          \n            \n                private Node unsupportedNode(Action action, CompositeContextNode embeddedSubProcess) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494893340", "createdAt": "2020-09-25T10:21:10Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "diffHunk": "@@ -461,5 +462,11 @@ protected void handleActions(List<Function> workflowFunctions, List<Action> acti\n             }\n         }\n     }\n+    \n+    private Node unsupportedNode (Action action, CompositeContextNode embeddedSubProcess) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MzQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JsonPathExprSupplier (String jsonPathExpr) {\n          \n          \n            \n                public JsonPathExprSupplier(String jsonPathExpr) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494893463", "createdAt": "2020-09-25T10:21:26Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/JsonPathExprSupplier.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.serverless.workflow.parser.core;\n+\n+import java.util.function.Supplier;\n+\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import org.jbpm.serverless.workflow.JsonPathResolver;\n+\n+public class JsonPathExprSupplier implements Supplier<Expression> {\n+    \n+    private String jsonPathExpr;\n+    \n+    public JsonPathExprSupplier (String jsonPathExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzAzNDQy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-496303442", "createdAt": "2020-09-25T10:34:07Z", "commit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDozNDowN1rOHX-RXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDozNDowN1rOHX-RXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5OTU1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .setBody(new BlockStmt().addStatement(new MethodCallExpr(\"this\",new ObjectCreationExpr().setType(serviceType))));\n          \n          \n            \n                        .setBody(new BlockStmt().addStatement(new MethodCallExpr(\"this\", new ObjectCreationExpr().setType(serviceType))));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494899550", "createdAt": "2020-09-25T10:34:07Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ServiceTaskDescriptor.java", "diffHunk": "@@ -170,9 +173,25 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 .addImplementedType(WorkItemHandler.class.getCanonicalName());\n         ClassOrInterfaceType serviceType = new ClassOrInterfaceType(null, interfaceName);\n \n+        final String serviceName = \"service\";\n         FieldDeclaration serviceField = new FieldDeclaration()\n-                .addVariable(new VariableDeclarator(serviceType, \"service\"));\n+                .addVariable(new VariableDeclarator(serviceType, serviceName));\n         cls.addMember(serviceField);\n+        cls\n+            .addConstructor(Keyword.PUBLIC)\n+            .setBody(new BlockStmt().addStatement(new MethodCallExpr(\"this\",new ObjectCreationExpr().setType(serviceType))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzAzNjEz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-496303613", "createdAt": "2020-09-25T10:34:23Z", "commit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDozNDoyM1rOHX-R7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDozNDoyM1rOHX-R7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5OTY5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .computeIfAbsent(workName,RestTaskDescriptor::generateHandlerClassForService);\n          \n          \n            \n                            .computeIfAbsent(workName, RestTaskDescriptor::generateHandlerClassForService);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494899694", "createdAt": "2020-09-25T10:34:23Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/WorkItemNodeVisitor.java", "diffHunk": "@@ -85,8 +87,13 @@ public void visitNode(String factoryField, T node, BlockStmt body, VariableScope\n             CompilationUnit generatedHandler = d.generateHandlerClassForService();\n             metadata.getGeneratedHandlers().put(mangledName, generatedHandler);\n             workName = mangledName;\n+        } else if (workName.equals(\"Rest Task\")) {\n+            workName = RestTaskDescriptor.getClassName(metadata);\n+            metadata\n+                .getGeneratedHandlers()\n+                .computeIfAbsent(workName,RestTaskDescriptor::generateHandlerClassForService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzU0NDIz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-496354423", "createdAt": "2020-09-25T11:59:06Z", "commit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo1OTowNlrOHYAq0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjowNTo1MFrOHYA2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzODgzMw==", "bodyText": "I know it is just a template but class and constructor names should be the same :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494938833", "createdAt": "2020-09-25T11:59:06Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/resources/class-templates/RestWorkItemHandlerTemplate.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.jbpm.process.codegen;\n+\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.core.Vertx;\n+import org.jbpm.process.instance.impl.rest.RestWorkItemHandler;\n+\n+public class xxxWorkItemHandler extends RestWorkItemHandler {\n+\n+    public xxxRestWorkItemHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MTk1MQ==", "bodyText": "As @cristianonicolai suggested, the best option would be kogito-workitems and the submodule either kogito-workitems-rest or kogito-rest-workitem.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r494941951", "createdAt": "2020-09-25T12:05:50Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-workitems/jbpm-rest-handler/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+   <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>jbpm-workitems</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d143a0cc598832b7a6bd017cc2adca371754fa4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6d143a0cc598832b7a6bd017cc2adca371754fa4", "committedDate": "2020-09-24T15:11:54Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "d186eae3d0b802f6d774a53017f5b22604bda77a", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d186eae3d0b802f6d774a53017f5b22604bda77a", "committedDate": "2020-09-25T16:21:46Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d186eae3d0b802f6d774a53017f5b22604bda77a", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d186eae3d0b802f6d774a53017f5b22604bda77a", "committedDate": "2020-09-25T16:21:46Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "588172c2ca3c0433510e5bb6152ada230e69387b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/588172c2ca3c0433510e5bb6152ada230e69387b", "committedDate": "2020-09-25T18:00:01Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "588172c2ca3c0433510e5bb6152ada230e69387b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/588172c2ca3c0433510e5bb6152ada230e69387b", "committedDate": "2020-09-25T18:00:01Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "0f7df4fe13a9d2d83db230ee8387a42c8f3345ca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0f7df4fe13a9d2d83db230ee8387a42c8f3345ca", "committedDate": "2020-09-25T18:06:20Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f7df4fe13a9d2d83db230ee8387a42c8f3345ca", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0f7df4fe13a9d2d83db230ee8387a42c8f3345ca", "committedDate": "2020-09-25T18:06:20Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "941b55c7ac57e22a4d42add813a798ff23a5a556", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/941b55c7ac57e22a4d42add813a798ff23a5a556", "committedDate": "2020-09-25T18:23:00Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "941b55c7ac57e22a4d42add813a798ff23a5a556", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/941b55c7ac57e22a4d42add813a798ff23a5a556", "committedDate": "2020-09-25T18:23:00Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "8faf0019038130240ca92857c4dce0c751899468", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8faf0019038130240ca92857c4dce0c751899468", "committedDate": "2020-09-25T18:33:25Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8faf0019038130240ca92857c4dce0c751899468", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8faf0019038130240ca92857c4dce0c751899468", "committedDate": "2020-09-25T18:33:25Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "67f4c3f42a0b1fe7af7956c189c8f504827107c6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/67f4c3f42a0b1fe7af7956c189c8f504827107c6", "committedDate": "2020-09-25T18:40:42Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67f4c3f42a0b1fe7af7956c189c8f504827107c6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/67f4c3f42a0b1fe7af7956c189c8f504827107c6", "committedDate": "2020-09-25T18:40:42Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "01f089c1e549ba8059dc76688f44eecfb27d15c7", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/01f089c1e549ba8059dc76688f44eecfb27d15c7", "committedDate": "2020-09-25T18:45:13Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01f089c1e549ba8059dc76688f44eecfb27d15c7", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/01f089c1e549ba8059dc76688f44eecfb27d15c7", "committedDate": "2020-09-25T18:45:13Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "dbc6e7f739b8a8f0eac4d92ff69feac899183259", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dbc6e7f739b8a8f0eac4d92ff69feac899183259", "committedDate": "2020-09-25T18:50:20Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbc6e7f739b8a8f0eac4d92ff69feac899183259", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dbc6e7f739b8a8f0eac4d92ff69feac899183259", "committedDate": "2020-09-25T18:50:20Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "bacece102d5e2c0cfd17d8a68bd476b4db62e305", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bacece102d5e2c0cfd17d8a68bd476b4db62e305", "committedDate": "2020-09-25T18:53:24Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bacece102d5e2c0cfd17d8a68bd476b4db62e305", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bacece102d5e2c0cfd17d8a68bd476b4db62e305", "committedDate": "2020-09-25T18:53:24Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "32d8ccf86252f71b3f1bf5508b4b38a6fc4f6452", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/32d8ccf86252f71b3f1bf5508b4b38a6fc4f6452", "committedDate": "2020-09-25T20:01:08Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODQ4MjY0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-496848264", "createdAt": "2020-09-25T20:52:18Z", "commit": {"oid": "32d8ccf86252f71b3f1bf5508b4b38a6fc4f6452"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDo1MjoxOFrOHYSI9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDo1MjoxOFrOHYSI9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyNTA3Ng==", "bodyText": "I think it's better to use constants instead.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#discussion_r495225076", "createdAt": "2020-09-25T20:52:18Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/WorkItemNodeVisitor.java", "diffHunk": "@@ -85,6 +87,11 @@ public void visitNode(String factoryField, T node, BlockStmt body, VariableScope\n             CompilationUnit generatedHandler = d.generateHandlerClassForService();\n             metadata.getGeneratedHandlers().put(mangledName, generatedHandler);\n             workName = mangledName;\n+        } else if (workName.equals(\"Rest Task\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32d8ccf86252f71b3f1bf5508b4b38a6fc4f6452"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c7afa664ea7cd211dc57933361119fc3301d9c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/86c7afa664ea7cd211dc57933361119fc3301d9c", "committedDate": "2020-09-28T08:24:34Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32d8ccf86252f71b3f1bf5508b4b38a6fc4f6452", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/32d8ccf86252f71b3f1bf5508b4b38a6fc4f6452", "committedDate": "2020-09-25T20:01:08Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}, "afterCommit": {"oid": "86c7afa664ea7cd211dc57933361119fc3301d9c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/86c7afa664ea7cd211dc57933361119fc3301d9c", "committedDate": "2020-09-28T08:24:34Z", "message": "[KOGITO-3158] Adding RestTaskHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NDQwNDMx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/778#pullrequestreview-497440431", "createdAt": "2020-09-28T11:59:27Z", "commit": {"oid": "86c7afa664ea7cd211dc57933361119fc3301d9c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3970, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}