{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTM1MjM3", "number": 946, "title": "KOGITO-3936: event-driven evaluation of decision models", "bodyText": "Related Jira task\nRelated PR in kogito-apps\nRelated PR in kogito-examples\n\nGoal\nEnable evaluation of decision models in an event-driven fashion, so that it can be used as part of an event processing pipeline.\nImplementation\nI created a new addon called event-driven-decisions that comes in two flavour: Quarkus and Spring Boot, like the tracing addon.\nThe developer, to be able to trigger decisions via events, only needs to include the correct version as dependency of his Kogito app and configure the input/output topics. The wiring is done by the Kogito codegen and framework specific CDI.\nThe execution is triggered upon receiving an event containing the initial context from a specific Kafka input topic. The result is then sent to a Kafka output topic (which may be the same). Both input and output events are formatted as CloudEvents.\nAs side effect, I created a new cloudevents-utils to share some pre existing CloudEvent-related logic between these new modules and others.", "createdAt": "2020-12-17T15:19:11Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946", "merged": true, "mergeCommit": {"oid": "1d3f2e5dda06faf402c1b73deb8ac31a1344a000"}, "closed": true, "closedAt": "2021-01-22T19:53:47Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnYesqAH2gAyNTQxOTM1MjM3OjAyNjBlN2IwNzJlM2RiMjc2YzAxN2U0ZDA3ZWNiMTE4Njc5NWUzY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdymMpHgFqTU3NDA5Mjg5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0260e7b072e3db276c017e4d07ecb1186795e3cd", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0260e7b072e3db276c017e4d07ecb1186795e3cd", "committedDate": "2020-12-18T13:51:32Z", "message": "KOGITO-3936: add event-driven-decisions addon skeleton pom structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9401adc181eeacf7328d1a9fb4f5409a1e1241", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7e9401adc181eeacf7328d1a9fb4f5409a1e1241", "committedDate": "2020-12-18T13:51:32Z", "message": "KOGITO-3936: create cloudevents-utils module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b024e1e0b6a21ef20515a9749b28e4ffa3b5ce85", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b024e1e0b6a21ef20515a9749b28e4ffa3b5ce85", "committedDate": "2020-12-18T13:51:32Z", "message": "KOGITO-3936: first version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21383ebf561bb7236501dc0d9dcf3d1d8e55fb6f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/21383ebf561bb7236501dc0d9dcf3d1d8e55fb6f", "committedDate": "2020-12-18T13:51:32Z", "message": "KOGITO-3936: source + subject + executionId in response events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5dede3d2f2f07d36032bd1b0c9796758b3adaa3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f5dede3d2f2f07d36032bd1b0c9796758b3adaa3", "committedDate": "2020-12-18T13:51:32Z", "message": "KOGITO-3936: update POMs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a9f6b20a98024d25d9be4f854ac9c44041fe27", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b8a9f6b20a98024d25d9be4f854ac9c44041fe27", "committedDate": "2020-12-18T13:51:33Z", "message": "KOGITO-3936: remove test log messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d229e2e5e785800ac2160e8274d8eb987b8609ab", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d229e2e5e785800ac2160e8274d8eb987b8609ab", "committedDate": "2020-12-18T14:07:29Z", "message": "KOGITO-3936: fix DecisionModels in EventDrivenDecisionController"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db12851d0694a985f0e4e97b35e08b81187c8897", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/db12851d0694a985f0e4e97b35e08b81187c8897", "committedDate": "2020-12-17T15:03:48Z", "message": "KOGITO-3936: remove test log messages"}, "afterCommit": {"oid": "d229e2e5e785800ac2160e8274d8eb987b8609ab", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d229e2e5e785800ac2160e8274d8eb987b8609ab", "committedDate": "2020-12-18T14:07:29Z", "message": "KOGITO-3936: fix DecisionModels in EventDrivenDecisionController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a8416e03caffeb3d1a4ef2bc89118791665e318", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5a8416e03caffeb3d1a4ef2bc89118791665e318", "committedDate": "2020-12-20T23:37:02Z", "message": "KOGITO-3936: add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f3fccdcc08e82635dde29decf91f402363d7040", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7f3fccdcc08e82635dde29decf91f402363d7040", "committedDate": "2020-12-21T07:52:28Z", "message": "KOGITO-3936: fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489192fa3b1e766c933a03823eb8ef20cbeb61b0", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/489192fa3b1e766c933a03823eb8ef20cbeb61b0", "committedDate": "2020-12-21T09:25:41Z", "message": "KOGITO-3936: improve tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3de94edeba04287d8dec2c9a88e5733541d06c8f", "committedDate": "2021-01-05T13:58:48Z", "message": "KOGITO-3936: merge branch master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MTIyNzc4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-564122778", "createdAt": "2021-01-08T09:38:56Z", "commit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTozODo1NlrOIQLoLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMDoyMzowOFrOIQM_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgzODYzNw==", "bodyText": "is there a specific reason for this public overload that accepts an ObjectMapper?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553838637", "createdAt": "2021-01-08T09:38:56Z", "author": {"login": "r00ta"}, "path": "addons/cloudevents/cloudevents-utils/src/main/java/org/kie/kogito/cloudevents/CloudEventUtils.java", "diffHunk": "@@ -70,6 +82,19 @@\n         }\n     }\n \n+    public static <T> Optional<T> decodeData(CloudEvent event, Class<T> dataClass) {\n+        return decodeData(event, dataClass, Mapper.mapper());\n+    }\n+\n+    public static <T> Optional<T> decodeData(CloudEvent event, Class<T> dataClass, ObjectMapper mapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0MTMyNg==", "bodyText": "Are they tested?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553841326", "createdAt": "2021-01-08T09:44:11Z", "author": {"login": "r00ta"}, "path": "addons/cloudevents/cloudevents-utils/src/main/java/org/kie/kogito/cloudevents/CloudEventUtils.java", "diffHunk": "@@ -94,6 +119,35 @@\n                 });\n     }\n \n+    public static URI buildDecisionSource(String serviceUrl) {\n+        return buildDecisionSource(serviceUrl, null, null);\n+    }\n+\n+    public static URI buildDecisionSource(String serviceUrl, String decisionModelName) {\n+        return buildDecisionSource(serviceUrl, decisionModelName, null);\n+    }\n+\n+    public static URI buildDecisionSource(String serviceUrl, String decisionModelName, String decisionServiceName) {\n+        String modelChunk = Optional.ofNullable(decisionModelName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0MzgxNw==", "bodyText": "what if we put the logic of \"valid request\" inside the class DecisionRequestEvent with a method isValid? It would be easier to extend/control/test", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553843817", "createdAt": "2021-01-08T09:48:41Z", "author": {"login": "r00ta"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))\n+                .ifPresent(this::handleRequest);\n+    }\n+\n+    private void handleRequest(CloudEvent event) {\n+        CloudEventUtils.decodeData(event, DecisionRequestEvent.class)\n+                .map(data -> new EvaluationContext(event, data))\n+                .map(this::processRequest)\n+                .flatMap(this::buildResponseCloudEvent)\n+                .flatMap(CloudEventUtils::encode)\n+                .ifPresent(eventEmitter::emit);\n+    }\n+\n+    private EvaluationContext processRequest(EvaluationContext ctx) {\n+        DecisionRequestEvent request = ctx.request;\n+\n+        DecisionRequestType type = getRequestType(request);\n+        ctx.requestType = type;\n+\n+        ctx.response = type == DecisionRequestType.INVALID\n+                ? new DecisionResponseEvent(DecisionResponseStatus.BAD_REQUEST, \"Malformed request event\")\n+                : getDecisionModel(request)\n+                        .map(model -> evaluateRequest(request, type, model))\n+                        .map(result -> buildDecisionResponseEventFromResult(request, result))\n+                        .orElseGet(() -> new DecisionResponseEvent(DecisionResponseStatus.NOT_FOUND, \"Model not found\"));\n+\n+        return ctx;\n+    }\n+\n+    private DecisionRequestType getRequestType(DecisionRequestEvent event) {\n+        if (event != null && event.getModelName() != null && event.getModelNamespace() != null && event.getInputContext() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NjQyMA==", "bodyText": "Not sure if INVALID is really a type of a request. INVALID is used only in this private method\n    private EvaluationContext processRequest(EvaluationContext ctx) {\n        DecisionRequestEvent request = ctx.request;\n\n        DecisionRequestType type = getRequestType(request);  // returns INVALID if the req is INVALID\n        ctx.requestType = type;\n\n        ctx.response = type == DecisionRequestType.INVALID\n                ? new DecisionResponseEvent(DecisionResponseStatus.BAD_REQUEST, \"Malformed request event\")\n                : getDecisionModel(request)\n                        .map(model -> evaluateRequest(request, type, model))\n                        .map(result -> buildDecisionResponseEventFromResult(request, result))\n                        .orElseGet(() -> new DecisionResponseEvent(DecisionResponseStatus.NOT_FOUND, \"Model not found\"));\n\n        return ctx;\n    }\n\nAnd I think we could manage this case without adding this public enum", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553846420", "createdAt": "2021-01-08T09:53:42Z", "author": {"login": "r00ta"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/DecisionRequestType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+public enum DecisionRequestType {\n+    INVALID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1MTMxMw==", "bodyText": "I might be wrong, but if you remove @JsonProperty(access = READ_ONLY) and create a public default constructor the issue should go away?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553851313", "createdAt": "2021-01-08T10:03:24Z", "author": {"login": "r00ta"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/DecisionResponseEvent.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n+import static com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY;\n+\n+public class DecisionResponseEvent {\n+\n+    private DecisionResponseStatus status;\n+\n+    @JsonInclude(NON_EMPTY)\n+    private String errorMessage;\n+\n+    @JsonInclude(NON_EMPTY)\n+    private String executionId;\n+\n+    @JsonProperty(access = READ_ONLY) // temporary fix of deserialization issues in tests\n+    @JsonInclude(NON_NULL)\n+    private DMNResult result;\n+\n+    private DecisionResponseEvent() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1ODQzMQ==", "bodyText": "During the review I've realized that there is an implicit contract: if decisionServiceName is specified, only that decision service is evaluated, otherwise all the services are evaluated.\nI'm wondering if it's better to make it explicit, so that it's more clear to read, consume, and extend in the future. wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553858431", "createdAt": "2021-01-08T10:17:59Z", "author": {"login": "r00ta"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/DecisionRequestEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.util.Map;\n+\n+public class DecisionRequestEvent {\n+\n+    private String modelName;\n+    private String modelNamespace;\n+    private String decisionServiceName;\n+    private Map<String, Object> inputContext;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1OTY2MA==", "bodyText": "I think it would be better to put the files under the resource folder and then read them here in the tests.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553859660", "createdAt": "2021-01-08T10:20:34Z", "author": {"login": "r00ta"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/test/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionControllerTest.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import io.cloudevents.CloudEvent;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.decision.DecisionTestUtils;\n+import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+import org.mockito.ArgumentCaptor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.kogito.decision.DecisionTestUtils.DECISION_SERVICE_NODE_NAME;\n+import static org.kie.kogito.decision.DecisionTestUtils.MODEL_NAME;\n+import static org.kie.kogito.decision.DecisionTestUtils.MODEL_NAMESPACE;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.ArgumentMatchers.notNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class EventDrivenDecisionControllerTest {\n+\n+    private static final String CLOUDEVENT_OK_DATA_PLACEHOLDER = \"%%DATA_EVENT%%\";\n+    private static final String CLOUDEVENT_OK_ID = \"a89b61a2-5644-487a-8a86-144855c5dce8\";\n+    private static final String CLOUDEVENT_OK_SOURCE = \"SomeEventSource\";\n+    private static final String CLOUDEVENT_OK_TEMPLATE = \"\" +\n+            \"{\\n\" +\n+            \"    \\\"specversion\\\": \\\"1.0\\\",\\n\" +\n+            \"    \\\"id\\\": \\\"\" + CLOUDEVENT_OK_ID + \"\\\",\\n\" +\n+            \"    \\\"source\\\": \\\"\" + CLOUDEVENT_OK_SOURCE + \"\\\",\\n\" +\n+            \"    \\\"type\\\": \\\"org.kie.kogito.eventdriven.decision.DecisionRequestEvent\\\",\\n\" +\n+            \"    \\\"data\\\": \" + CLOUDEVENT_OK_DATA_PLACEHOLDER + \"\\n\" +\n+            \"}\";\n+\n+    private static final String CLOUDEVENT_IGNORED = \"\" +\n+            \"{\\n\" +\n+            \"    \\\"specversion\\\": \\\"1.0\\\",\\n\" +\n+            \"    \\\"id\\\": \\\"55c5dce8-5644-487a-8a86-1448a89b61a2\\\",\\n\" +\n+            \"    \\\"source\\\": \\\"SomeOtherEventSource\\\",\\n\" +\n+            \"    \\\"type\\\": \\\"com.example.SomeCloudEvent\\\",\\n\" +\n+            \"    \\\"data\\\": {}\\n\" +\n+            \"}\";\n+\n+    private static final List<String> DATA_EVENT_BAD_REQUEST = Stream.of(\n+            \"{}\",\n+            \"{\\\"modelName\\\": \\\"aName\\\"}\",\n+            \"{\\\"modelNamespace\\\": \\\"aNamespace\\\"}\",\n+            \"{\\\"inputContext\\\": {}}\",\n+            \"{\\\"modelName\\\": \\\"aName\\\",\\\"modelNamespace\\\": \\\"aNamespace\\\"}\",\n+            \"{\\\"modelName\\\": \\\"aName\\\",\\\"inputContext\\\": {}}\",\n+            \"{\\\"modelNamespace\\\": \\\"aNamespace\\\",\\\"inputContext\\\": {}}\"\n+    ).collect(Collectors.toList());\n+\n+    private static final String DATA_EVENT_NOT_FOUND = \"{\\\"modelName\\\": \\\"aName\\\",\\\"modelNamespace\\\": \\\"aNamespace\\\",\\\"inputContext\\\": {}}\";\n+\n+    private static final String DATA_EVENT_OK_EVALUATE_ALL = \"\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2MDg2Nw==", "bodyText": "Do we need this?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r553860867", "createdAt": "2021-01-08T10:23:08Z", "author": {"login": "r00ta"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-quarkus-addon/pom.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>event-driven-decisions</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>event-driven-decisions-quarkus-addon</artifactId>\n+  <name>Kogito :: Add-Ons :: Events :: Event-Driven Decisions :: Quarkus</name>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTI2MDE2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-555926016", "createdAt": "2020-12-19T08:10:42Z", "commit": {"oid": "d229e2e5e785800ac2160e8274d8eb987b8609ab"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwODoxMDo0MlrOII591A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODoxNjoxN1rOIRhkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIwOTIzNg==", "bodyText": "Please move to DependencyManagement", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r546209236", "createdAt": "2020-12-19T08:10:42Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-utils/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>cloudevents</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>cloudevents-utils</artifactId>\n+  <name>Kogito :: Add-Ons :: CloudEvents :: Utils</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-json-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>${version.org.mockito}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d229e2e5e785800ac2160e8274d8eb987b8609ab"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwNTk2MA==", "bodyText": "Please follow same naming convention of other events modules. What about kogito-events-decisions-addon?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r554605960", "createdAt": "2021-01-10T18:37:59Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/pom.xml", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>event-driven-decisions</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDgzOTIzOA==", "bodyText": "Scope test?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r554839238", "createdAt": "2021-01-11T07:32:23Z", "author": {"login": "danielezonca"}, "path": "kogito-test-utils/pom.xml", "diffHunk": "@@ -36,6 +36,11 @@\n   </dependencyManagement>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIzNzk2OA==", "bodyText": "What about?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n          \n          \n            \n                private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getSimpleName();\n          \n      \n    \n    \n  \n\nI think it is enough without adding the package", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555237968", "createdAt": "2021-01-11T18:00:38Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIzODU0Mw==", "bodyText": "@evacchi @ricardozanini\nHere we are using event type to decide if accept of skip the message. Do we agree in general?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555238543", "createdAt": "2021-01-11T18:01:40Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIzOTY1OQ==", "bodyText": "To be honest I have mixed feeling to use a json to encode the subject of the message. As far as I remember this is used to correlate input event to output event. Am I right?\n@evacchi @ricardozanini\nWdyt? Do you like to have a json string as subject?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555239659", "createdAt": "2021-01-11T18:03:30Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))\n+                .ifPresent(this::handleRequest);\n+    }\n+\n+    private void handleRequest(CloudEvent event) {\n+        CloudEventUtils.decodeData(event, DecisionRequestEvent.class)\n+                .map(data -> new EvaluationContext(event, data))\n+                .map(this::processRequest)\n+                .flatMap(this::buildResponseCloudEvent)\n+                .flatMap(CloudEventUtils::encode)\n+                .ifPresent(eventEmitter::emit);\n+    }\n+\n+    private EvaluationContext processRequest(EvaluationContext ctx) {\n+        DecisionRequestEvent request = ctx.request;\n+\n+        DecisionRequestType type = getRequestType(request);\n+        ctx.requestType = type;\n+\n+        ctx.response = type == DecisionRequestType.INVALID\n+                ? new DecisionResponseEvent(DecisionResponseStatus.BAD_REQUEST, \"Malformed request event\")\n+                : getDecisionModel(request)\n+                        .map(model -> evaluateRequest(request, type, model))\n+                        .map(result -> buildDecisionResponseEventFromResult(request, result))\n+                        .orElseGet(() -> new DecisionResponseEvent(DecisionResponseStatus.NOT_FOUND, \"Model not found\"));\n+\n+        return ctx;\n+    }\n+\n+    private DecisionRequestType getRequestType(DecisionRequestEvent event) {\n+        if (event != null && event.getModelName() != null && event.getModelNamespace() != null && event.getInputContext() != null) {\n+            return event.getDecisionServiceName() == null\n+                    ? EVALUATE_ALL\n+                    : EVALUATE_DECISION_SERVICE;\n+        }\n+        return DecisionRequestType.INVALID;\n+    }\n+\n+    private Optional<DecisionModel> getDecisionModel(DecisionRequestEvent event) {\n+        try {\n+            return Optional.ofNullable(decisionModels.getDecisionModel(event.getModelNamespace(), event.getModelName()));\n+        } catch (IllegalStateException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private DMNResult evaluateRequest(DecisionRequestEvent event, DecisionRequestType type, DecisionModel model) {\n+        DMNContext context = DMNJSONUtils.ctx(model, event.getInputContext());\n+        return type == EVALUATE_DECISION_SERVICE\n+                ? model.evaluateDecisionService(context, event.getDecisionServiceName())\n+                : model.evaluateAll(context);\n+    }\n+\n+    private DecisionResponseEvent buildDecisionResponseEventFromResult(DecisionRequestEvent event, DMNResult result) {\n+        String executionId = DecisionExecutionIdUtils.get(result.getContext());\n+        return new DecisionResponseEvent(\n+                executionId,\n+                new org.kie.kogito.dmn.rest.DMNResult(event.getModelNamespace(), event.getModelName(), result)\n+        );\n+    }\n+\n+    private Optional<CloudEvent> buildResponseCloudEvent(EvaluationContext ctx) {\n+        URI source = buildResponseCloudEventSource(ctx);\n+        String subject = buildResponseCloudEventSubject(ctx);\n+        return CloudEventUtils.build(UUID.randomUUID().toString(), source, subject, ctx.response, DecisionResponseEvent.class);\n+    }\n+\n+    private URI buildResponseCloudEventSource(EvaluationContext ctx) {\n+        if (ctx.requestType == EVALUATE_ALL) {\n+            return CloudEventUtils.buildDecisionSource(config.getServiceUrl(), ctx.request.getModelName());\n+        }\n+        if (ctx.requestType == EVALUATE_DECISION_SERVICE) {\n+            return CloudEventUtils.buildDecisionSource(config.getServiceUrl(), ctx.request.getModelName(), ctx.request.getDecisionServiceName());\n+        }\n+        return CloudEventUtils.buildDecisionSource(config.getServiceUrl());\n+    }\n+\n+    private String buildResponseCloudEventSubject(EvaluationContext ctx) {\n+        try {\n+            return MAPPER.writeValueAsString(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIzOTgyNQ==", "bodyText": "What about at least log the error?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555239825", "createdAt": "2021-01-11T18:03:47Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))\n+                .ifPresent(this::handleRequest);\n+    }\n+\n+    private void handleRequest(CloudEvent event) {\n+        CloudEventUtils.decodeData(event, DecisionRequestEvent.class)\n+                .map(data -> new EvaluationContext(event, data))\n+                .map(this::processRequest)\n+                .flatMap(this::buildResponseCloudEvent)\n+                .flatMap(CloudEventUtils::encode)\n+                .ifPresent(eventEmitter::emit);\n+    }\n+\n+    private EvaluationContext processRequest(EvaluationContext ctx) {\n+        DecisionRequestEvent request = ctx.request;\n+\n+        DecisionRequestType type = getRequestType(request);\n+        ctx.requestType = type;\n+\n+        ctx.response = type == DecisionRequestType.INVALID\n+                ? new DecisionResponseEvent(DecisionResponseStatus.BAD_REQUEST, \"Malformed request event\")\n+                : getDecisionModel(request)\n+                        .map(model -> evaluateRequest(request, type, model))\n+                        .map(result -> buildDecisionResponseEventFromResult(request, result))\n+                        .orElseGet(() -> new DecisionResponseEvent(DecisionResponseStatus.NOT_FOUND, \"Model not found\"));\n+\n+        return ctx;\n+    }\n+\n+    private DecisionRequestType getRequestType(DecisionRequestEvent event) {\n+        if (event != null && event.getModelName() != null && event.getModelNamespace() != null && event.getInputContext() != null) {\n+            return event.getDecisionServiceName() == null\n+                    ? EVALUATE_ALL\n+                    : EVALUATE_DECISION_SERVICE;\n+        }\n+        return DecisionRequestType.INVALID;\n+    }\n+\n+    private Optional<DecisionModel> getDecisionModel(DecisionRequestEvent event) {\n+        try {\n+            return Optional.ofNullable(decisionModels.getDecisionModel(event.getModelNamespace(), event.getModelName()));\n+        } catch (IllegalStateException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private DMNResult evaluateRequest(DecisionRequestEvent event, DecisionRequestType type, DecisionModel model) {\n+        DMNContext context = DMNJSONUtils.ctx(model, event.getInputContext());\n+        return type == EVALUATE_DECISION_SERVICE\n+                ? model.evaluateDecisionService(context, event.getDecisionServiceName())\n+                : model.evaluateAll(context);\n+    }\n+\n+    private DecisionResponseEvent buildDecisionResponseEventFromResult(DecisionRequestEvent event, DMNResult result) {\n+        String executionId = DecisionExecutionIdUtils.get(result.getContext());\n+        return new DecisionResponseEvent(\n+                executionId,\n+                new org.kie.kogito.dmn.rest.DMNResult(event.getModelNamespace(), event.getModelName(), result)\n+        );\n+    }\n+\n+    private Optional<CloudEvent> buildResponseCloudEvent(EvaluationContext ctx) {\n+        URI source = buildResponseCloudEventSource(ctx);\n+        String subject = buildResponseCloudEventSubject(ctx);\n+        return CloudEventUtils.build(UUID.randomUUID().toString(), source, subject, ctx.response, DecisionResponseEvent.class);\n+    }\n+\n+    private URI buildResponseCloudEventSource(EvaluationContext ctx) {\n+        if (ctx.requestType == EVALUATE_ALL) {\n+            return CloudEventUtils.buildDecisionSource(config.getServiceUrl(), ctx.request.getModelName());\n+        }\n+        if (ctx.requestType == EVALUATE_DECISION_SERVICE) {\n+            return CloudEventUtils.buildDecisionSource(config.getServiceUrl(), ctx.request.getModelName(), ctx.request.getDecisionServiceName());\n+        }\n+        return CloudEventUtils.buildDecisionSource(config.getServiceUrl());\n+    }\n+\n+    private String buildResponseCloudEventSubject(EvaluationContext ctx) {\n+        try {\n+            return MAPPER.writeValueAsString(\n+                    new DecisionResponseCloudEventSubject(\n+                            ctx.requestCloudEvent.getId(),\n+                            ctx.requestCloudEvent.getSource().toString()\n+                    )\n+            );\n+        } catch (JsonProcessingException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0MDkxOA==", "bodyText": "What about directly inject DecisionModels instead of Application?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555240918", "createdAt": "2021-01-11T18:05:50Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0MTA4Ng==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555241086", "createdAt": "2021-01-11T18:06:05Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0MjY3Mg==", "bodyText": "Why Optional<CloudEvent>? After the evaluation we should be sure to emit the event", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555242672", "createdAt": "2021-01-11T18:09:09Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))\n+                .ifPresent(this::handleRequest);\n+    }\n+\n+    private void handleRequest(CloudEvent event) {\n+        CloudEventUtils.decodeData(event, DecisionRequestEvent.class)\n+                .map(data -> new EvaluationContext(event, data))\n+                .map(this::processRequest)\n+                .flatMap(this::buildResponseCloudEvent)\n+                .flatMap(CloudEventUtils::encode)\n+                .ifPresent(eventEmitter::emit);\n+    }\n+\n+    private EvaluationContext processRequest(EvaluationContext ctx) {\n+        DecisionRequestEvent request = ctx.request;\n+\n+        DecisionRequestType type = getRequestType(request);\n+        ctx.requestType = type;\n+\n+        ctx.response = type == DecisionRequestType.INVALID\n+                ? new DecisionResponseEvent(DecisionResponseStatus.BAD_REQUEST, \"Malformed request event\")\n+                : getDecisionModel(request)\n+                        .map(model -> evaluateRequest(request, type, model))\n+                        .map(result -> buildDecisionResponseEventFromResult(request, result))\n+                        .orElseGet(() -> new DecisionResponseEvent(DecisionResponseStatus.NOT_FOUND, \"Model not found\"));\n+\n+        return ctx;\n+    }\n+\n+    private DecisionRequestType getRequestType(DecisionRequestEvent event) {\n+        if (event != null && event.getModelName() != null && event.getModelNamespace() != null && event.getInputContext() != null) {\n+            return event.getDecisionServiceName() == null\n+                    ? EVALUATE_ALL\n+                    : EVALUATE_DECISION_SERVICE;\n+        }\n+        return DecisionRequestType.INVALID;\n+    }\n+\n+    private Optional<DecisionModel> getDecisionModel(DecisionRequestEvent event) {\n+        try {\n+            return Optional.ofNullable(decisionModels.getDecisionModel(event.getModelNamespace(), event.getModelName()));\n+        } catch (IllegalStateException e) {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private DMNResult evaluateRequest(DecisionRequestEvent event, DecisionRequestType type, DecisionModel model) {\n+        DMNContext context = DMNJSONUtils.ctx(model, event.getInputContext());\n+        return type == EVALUATE_DECISION_SERVICE\n+                ? model.evaluateDecisionService(context, event.getDecisionServiceName())\n+                : model.evaluateAll(context);\n+    }\n+\n+    private DecisionResponseEvent buildDecisionResponseEventFromResult(DecisionRequestEvent event, DMNResult result) {\n+        String executionId = DecisionExecutionIdUtils.get(result.getContext());\n+        return new DecisionResponseEvent(\n+                executionId,\n+                new org.kie.kogito.dmn.rest.DMNResult(event.getModelNamespace(), event.getModelName(), result)\n+        );\n+    }\n+\n+    private Optional<CloudEvent> buildResponseCloudEvent(EvaluationContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0MzU2Mg==", "bodyText": "We should not lose messages especially after processing it. What about a log at least?\nBtw it should be nice to ack the request only if we are able to process it (probably this change requires a different PR). Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555243562", "createdAt": "2021-01-11T18:10:49Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))\n+                .ifPresent(this::handleRequest);\n+    }\n+\n+    private void handleRequest(CloudEvent event) {\n+        CloudEventUtils.decodeData(event, DecisionRequestEvent.class)\n+                .map(data -> new EvaluationContext(event, data))\n+                .map(this::processRequest)\n+                .flatMap(this::buildResponseCloudEvent)\n+                .flatMap(CloudEventUtils::encode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0NDY2MQ==", "bodyText": "You can inject DecisionModels directly", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555244661", "createdAt": "2021-01-11T18:12:45Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-quarkus-addon/src/main/java/org/kie/kogito/eventdriven/decision/QuarkusEventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+@Startup\n+public class QuarkusEventDrivenDecisionController extends EventDrivenDecisionController {\n+\n+    @Inject\n+    Application application;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0NjE2MA==", "bodyText": "As far as I remember we got some problem in the past with @Startup bean because of uncompleted kafka initialization and we had to observe StartupEvent to solve (see here)\n@r00ta\nCan you please double check if I'm right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555246160", "createdAt": "2021-01-11T18:15:19Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-quarkus-addon/src/main/java/org/kie/kogito/eventdriven/decision/QuarkusEventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+@Startup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0NjcwOQ==", "bodyText": "You can inject DecisionModels directly", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555246709", "createdAt": "2021-01-11T18:16:17Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-springboot-addon/src/main/java/org/kie/kogito/eventdriven/decision/SpringBootEventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootEventDrivenDecisionController extends EventDrivenDecisionController {\n+\n+    @Autowired\n+    public SpringBootEventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MzQ0OTc2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-564344976", "createdAt": "2021-01-08T15:25:07Z", "commit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNToyNTowOFrOIQWAXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzoyMzo0NVrOISBQpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwODY2OA==", "bodyText": "Can you be more specific in the description of this exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r554008668", "createdAt": "2021-01-08T15:25:08Z", "author": {"login": "jiripetrlik"}, "path": "addons/cloudevents/cloudevents-utils/src/main/java/org/kie/kogito/cloudevents/CloudEventUtils.java", "diffHunk": "@@ -102,8 +156,13 @@\n         public static ObjectMapper mapper() {\n             return OBJECT_MAPPER;\n         }\n+\n+        private Mapper() {\n+            throw new IllegalStateException(\"Utility class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwODczNw==", "bodyText": "Can you be more specific in the description of this exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r554008737", "createdAt": "2021-01-08T15:25:16Z", "author": {"login": "jiripetrlik"}, "path": "addons/cloudevents/cloudevents-utils/src/main/java/org/kie/kogito/cloudevents/CloudEventUtils.java", "diffHunk": "@@ -102,8 +156,13 @@\n         public static ObjectMapper mapper() {\n             return OBJECT_MAPPER;\n         }\n+\n+        private Mapper() {\n+            throw new IllegalStateException(\"Utility class\");\n+        }\n     }\n \n     private CloudEventUtils() {\n+        throw new IllegalStateException(\"Utility class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc2MjAyNg==", "bodyText": "Can we log something here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555762026", "createdAt": "2021-01-12T13:17:09Z", "author": {"login": "jiripetrlik"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionController.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.cloudevents.CloudEvent;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.dmn.rest.DMNJSONUtils;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_ALL;\n+import static org.kie.kogito.eventdriven.decision.DecisionRequestType.EVALUATE_DECISION_SERVICE;\n+\n+public class EventDrivenDecisionController {\n+\n+    private static final String VALID_REQUEST_EVENT_TYPE = DecisionRequestEvent.class.getName();\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private DecisionModels decisionModels;\n+    private ConfigBean config;\n+    private CloudEventEmitter eventEmitter;\n+    private CloudEventReceiver eventReceiver;\n+\n+    protected EventDrivenDecisionController() {\n+    }\n+\n+    protected EventDrivenDecisionController(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+    }\n+\n+    protected void setup(Application application, ConfigBean config, CloudEventEmitter eventEmitter, CloudEventReceiver eventReceiver) {\n+        this.decisionModels = application.get(DecisionModels.class);\n+        this.config = config;\n+        this.eventEmitter = eventEmitter;\n+        this.eventReceiver = eventReceiver;\n+        setup();\n+    }\n+\n+    protected void setup() {\n+        eventReceiver.subscribe(this::handleEvent);\n+    }\n+\n+    void handleEvent(String event) {\n+        CloudEventUtils.decode(event)\n+                .filter(e -> VALID_REQUEST_EVENT_TYPE.equals(e.getType()))\n+                .ifPresent(this::handleRequest);\n+    }\n+\n+    private void handleRequest(CloudEvent event) {\n+        CloudEventUtils.decodeData(event, DecisionRequestEvent.class)\n+                .map(data -> new EvaluationContext(event, data))\n+                .map(this::processRequest)\n+                .flatMap(this::buildResponseCloudEvent)\n+                .flatMap(CloudEventUtils::encode)\n+                .ifPresent(eventEmitter::emit);\n+    }\n+\n+    private EvaluationContext processRequest(EvaluationContext ctx) {\n+        DecisionRequestEvent request = ctx.request;\n+\n+        DecisionRequestType type = getRequestType(request);\n+        ctx.requestType = type;\n+\n+        ctx.response = type == DecisionRequestType.INVALID\n+                ? new DecisionResponseEvent(DecisionResponseStatus.BAD_REQUEST, \"Malformed request event\")\n+                : getDecisionModel(request)\n+                        .map(model -> evaluateRequest(request, type, model))\n+                        .map(result -> buildDecisionResponseEventFromResult(request, result))\n+                        .orElseGet(() -> new DecisionResponseEvent(DecisionResponseStatus.NOT_FOUND, \"Model not found\"));\n+\n+        return ctx;\n+    }\n+\n+    private DecisionRequestType getRequestType(DecisionRequestEvent event) {\n+        if (event != null && event.getModelName() != null && event.getModelNamespace() != null && event.getInputContext() != null) {\n+            return event.getDecisionServiceName() == null\n+                    ? EVALUATE_ALL\n+                    : EVALUATE_DECISION_SERVICE;\n+        }\n+        return DecisionRequestType.INVALID;\n+    }\n+\n+    private Optional<DecisionModel> getDecisionModel(DecisionRequestEvent event) {\n+        try {\n+            return Optional.ofNullable(decisionModels.getDecisionModel(event.getModelNamespace(), event.getModelName()));\n+        } catch (IllegalStateException e) {\n+            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc2NTkyNg==", "bodyText": "Is it intentional that this method has the same implementation as \"getEvaluateAllContextForError\"?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r555765926", "createdAt": "2021-01-12T13:23:45Z", "author": {"login": "jiripetrlik"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/decision/DecisionTestUtils.java", "diffHunk": "@@ -62,55 +53,53 @@ public static DMNModel createDMNModel() {\n     }\n \n     public static Map<String, Object> getEvaluateAllContext() {\n-        return new HashMap<String, Object>() {{\n-            put(\"Driver\", getDriver(25, 10));\n-            put(\"Violation\", getViolation(\"speed\", 115, 100));\n-        }};\n+        HashMap<String, Object> map = new HashMap<>();\n+        map.put(\"Driver\", getDriver(25, 10));\n+        map.put(\"Violation\", getViolation(\"speed\", 115, 100));\n+        return map;\n     }\n \n     public static Map<String, Object> getEvaluateAllContextForWarning() {\n-        return new HashMap<String, Object>() {{\n-            put(\"Driver\", getDriver(25, 10));\n-            put(\"Violation\", getViolation(\"speed\", 95, 100));\n-        }};\n+        HashMap<String, Object> map = new HashMap<>();\n+        map.put(\"Driver\", getDriver(25, 10));\n+        map.put(\"Violation\", getViolation(\"speed\", 95, 100));\n+        return map;\n     }\n \n     public static Map<String, Object> getEvaluateAllContextForError() {\n-        return new HashMap<String, Object>() {{\n-            put(\"Violation\", getViolation(\"speed\", 115, 100));\n-        }};\n+        HashMap<String, Object> map = new HashMap<>();\n+        map.put(\"Violation\", getViolation(\"speed\", 115, 100));\n+        return map;\n     }\n \n     public static Map<String, Object> getEvaluateDecisionServiceContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3de94edeba04287d8dec2c9a88e5733541d06c8f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a281c2ccce671ad1babee189c9334796a3067790", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a281c2ccce671ad1babee189c9334796a3067790", "committedDate": "2021-01-12T14:48:31Z", "message": "KOGITO-3936: improve CloudEventUtilsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ee677f58e3df9864868268fd98b8594860215e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/25ee677f58e3df9864868268fd98b8594860215e", "committedDate": "2021-01-13T08:28:11Z", "message": "KOGITO-3936: fix mockito-inline in cloudevents-utils pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b93a5af2895ab54ca28fef7a4694a69736246f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/72b93a5af2895ab54ca28fef7a4694a69736246f", "committedDate": "2021-01-13T08:30:55Z", "message": "KOGITO-3936: add isValid method to DecisionRequestEvent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b66cf1601ee909f60dcc892a11d8bc1504977c9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2b66cf1601ee909f60dcc892a11d8bc1504977c9", "committedDate": "2021-01-13T09:59:39Z", "message": "KOGITO-3936: minor fix in CloudEventUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719389303a41127d381dbc23f68022bc3bb3d640", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/719389303a41127d381dbc23f68022bc3bb3d640", "committedDate": "2021-01-13T10:01:45Z", "message": "KOGITO-3936: direct injection of DecisionModels bean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "303ab1071c5ad7600d2e809af920d68c2970ebcf", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/303ab1071c5ad7600d2e809af920d68c2970ebcf", "committedDate": "2021-01-13T11:04:13Z", "message": "KOGITO-3936: refactor EventDrivenDecisionController.processRequest and add logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MjU2NTg3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-567256587", "createdAt": "2021-01-13T14:10:43Z", "commit": {"oid": "303ab1071c5ad7600d2e809af920d68c2970ebcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDoxMDo0M1rOISw6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDoxMDo0M1rOISw6Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU0NjU5MA==", "bodyText": "Wouldn't it be better for management, tracing and monitoring purposes that the DMNResult is the object returned and any other attributes are added as CloudEvent metadata?\nIn case of error, the error message should be the event content itself as I assume the result will be empty.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r556546590", "createdAt": "2021-01-13T14:10:43Z", "author": {"login": "ruromero"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/main/java/org/kie/kogito/eventdriven/decision/DecisionResponseEvent.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;\n+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;\n+import static com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY;\n+\n+public class DecisionResponseEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303ab1071c5ad7600d2e809af920d68c2970ebcf"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f984aff40529540e635148c62330c0a22742f4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e3f984aff40529540e635148c62330c0a22742f4", "committedDate": "2021-01-19T10:21:18Z", "message": "KOGITO-3936: clean event-driven-decisions-quarkus-addon/pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3caa4fd48147af3d7f73ab6411614589d50f9c1d", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3caa4fd48147af3d7f73ab6411614589d50f9c1d", "committedDate": "2021-01-19T13:32:53Z", "message": "KOGITO-3936: add cloudevents kogito extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ab1af7fc1a260ba08c2fbbab1db8f9629682b2", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c7ab1af7fc1a260ba08c2fbbab1db8f9629682b2", "committedDate": "2021-01-20T10:06:15Z", "message": "KOGITO-3936: refactor cloudevent structure using kogito extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193a42a396ffab0620673e442132d1540686790c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/193a42a396ffab0620673e442132d1540686790c", "committedDate": "2021-01-20T10:08:13Z", "message": "KOGITO-3936: merge branch master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bed958ef0c50fc4efcd1bd209e223d4c662c8b4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9bed958ef0c50fc4efcd1bd209e223d4c662c8b4", "committedDate": "2021-01-20T10:22:56Z", "message": "KOGITO-3936: return only dmn context by default for successful evaluations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769880aafc9306901c7a1e0ac6a9993352e13b32", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/769880aafc9306901c7a1e0ac6a9993352e13b32", "committedDate": "2021-01-20T11:04:42Z", "message": "KOGITO-3936: fix CloudEventUtilsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d0cf6514c2f84c01fbc688a2229545e45bad05", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b8d0cf6514c2f84c01fbc688a2229545e45bad05", "committedDate": "2021-01-20T14:34:14Z", "message": "KOGITO-3936: reduce code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd23383d2021a80192a7395bd6851e4ad0269919", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd23383d2021a80192a7395bd6851e4ad0269919", "committedDate": "2021-01-20T16:03:01Z", "message": "KOGITO-3936: add kogitodmnfullresult and kogitodmnfilteredctx to Kogito extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b70c08f146163d9e963b559ab9535f777f06b89", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1b70c08f146163d9e963b559ab9535f777f06b89", "committedDate": "2021-01-20T16:14:17Z", "message": "KOGITO-3936: use Boolean fields in Kogito extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3f531ce2170983b8a7287e6cfbb4ac8f2e289a1", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a3f531ce2170983b8a7287e6cfbb4ac8f2e289a1", "committedDate": "2021-01-20T16:59:00Z", "message": "KOGITO-3936: support kogitodmnfullresult and kogitodmnfilteredctx in addon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNDY3NDU1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-572467455", "createdAt": "2021-01-20T17:35:32Z", "commit": {"oid": "a3f531ce2170983b8a7287e6cfbb4ac8f2e289a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozNTozMlrOIXJ1eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozNTozMlrOIXJ1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE0OTMwNQ==", "bodyText": "Can you use the opposite condition to fail fast instead of this \ud83c\udf84 ? :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r561149305", "createdAt": "2021-01-20T17:35:32Z", "author": {"login": "danielezonca"}, "path": "addons/events/event-driven-decisions/event-driven-decisions-common/src/test/java/org/kie/kogito/eventdriven/decision/EventDrivenDecisionControllerTest.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.eventdriven.decision;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.provider.ExtensionProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.cloudevents.CloudEventUtils;\n+import org.kie.kogito.cloudevents.extension.KogitoExtension;\n+import org.kie.kogito.conf.ConfigBean;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.decision.DecisionModels;\n+import org.kie.kogito.decision.DecisionTestUtils;\n+import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.event.CloudEventEmitter;\n+import org.kie.kogito.event.CloudEventReceiver;\n+import org.mockito.ArgumentCaptor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.kogito.decision.DecisionTestUtils.DECISION_SERVICE_NODE_NAME;\n+import static org.kie.kogito.decision.DecisionTestUtils.MODEL_NAME;\n+import static org.kie.kogito.decision.DecisionTestUtils.MODEL_NAMESPACE;\n+import static org.kie.kogito.eventdriven.decision.EventDrivenDecisionController.REQUEST_EVENT_TYPE;\n+import static org.kie.kogito.eventdriven.decision.EventDrivenDecisionController.RESPONSE_ERROR_EVENT_TYPE;\n+import static org.kie.kogito.eventdriven.decision.EventDrivenDecisionController.RESPONSE_EVENT_TYPE;\n+import static org.kie.kogito.eventdriven.decision.EventDrivenDecisionController.RESPONSE_FULL_EVENT_TYPE;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.ArgumentMatchers.notNull;\n+import static org.mockito.Mockito.clearInvocations;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class EventDrivenDecisionControllerTest {\n+\n+    private static final String MODEL_NAME_PLACEHOLDER = \"%%MODEL_NAME%%\";\n+    private static final String MODEL_NAMESPACE_PLACEHOLDER = \"%%MODEL_NAMESPACE%%\";\n+    private static final String EVALUATE_DECISION_PLACEHOLDER = \"%%EVALUATE_DECISION%%\";\n+    private static final String FULL_RESULT_PLACEHOLDER = \"%%FULL_RESULT%%\";\n+    private static final String FILTERED_CTX_PLACEHOLDER = \"%%FILTERED_CTX%%\";\n+    private static final String DATA_PLACEHOLDER = \"%%DATA%%\";\n+\n+    private static final String CLOUDEVENT_ID = \"a89b61a2-5644-487a-8a86-144855c5dce8\";\n+    private static final String CLOUDEVENT_SOURCE = \"SomeEventSource\";\n+    private static final String CLOUDEVENT_SUBJECT = \"TheSubject\";\n+    private static final String CLOUDEVENT_TEMPLATE = \"\" +\n+            \"{\\n\" +\n+            \"    \\\"specversion\\\": \\\"1.0\\\",\\n\" +\n+            \"    \\\"id\\\": \\\"\" + CLOUDEVENT_ID + \"\\\",\\n\" +\n+            \"    \\\"source\\\": \\\"\" + CLOUDEVENT_SOURCE + \"\\\",\\n\" +\n+            \"    \\\"type\\\": \\\"\" + REQUEST_EVENT_TYPE + \"\\\",\\n\" +\n+            \"    \\\"subject\\\": \\\"\" + CLOUDEVENT_SUBJECT + \"\\\",\\n\" +\n+            \"    \\\"\" + KogitoExtension.KOGITO_DMN_MODEL_NAME + \"\\\": \" + MODEL_NAME_PLACEHOLDER + \",\\n\" +\n+            \"    \\\"\" + KogitoExtension.KOGITO_DMN_MODEL_NAMESPACE + \"\\\": \" + MODEL_NAMESPACE_PLACEHOLDER + \",\\n\" +\n+            \"    \\\"\" + KogitoExtension.KOGITO_DMN_EVALUATE_DECISION + \"\\\": \" + EVALUATE_DECISION_PLACEHOLDER + \",\\n\" +\n+            \"    \\\"\" + KogitoExtension.KOGITO_DMN_FULL_RESULT + \"\\\": \" + FULL_RESULT_PLACEHOLDER + \",\\n\" +\n+            \"    \\\"\" + KogitoExtension.KOGITO_DMN_FILTERED_CTX + \"\\\": \" + FILTERED_CTX_PLACEHOLDER + \",\\n\" +\n+            \"    \\\"data\\\": \" + DATA_PLACEHOLDER + \"\\n\" +\n+            \"}\";\n+\n+    private static final String CLOUDEVENT_IGNORED = \"\" +\n+            \"{\\n\" +\n+            \"    \\\"specversion\\\": \\\"1.0\\\",\\n\" +\n+            \"    \\\"id\\\": \\\"55c5dce8-5644-487a-8a86-1448a89b61a2\\\",\\n\" +\n+            \"    \\\"source\\\": \\\"SomeOtherEventSource\\\",\\n\" +\n+            \"    \\\"type\\\": \\\"SomeType\\\",\\n\" +\n+            \"    \\\"data\\\": {}\\n\" +\n+            \"}\";\n+\n+    private static final List<RequestData> REQUEST_DATA_BAD_REQUEST = Stream.of(\n+            new RequestData(null, null, null, null),\n+            new RequestData(\"aName\", null, null, null),\n+            new RequestData(null, \"aNamespace\", null, null),\n+            new RequestData(null, null, null, \"{}\"),\n+            new RequestData(\"aName\", \"aNamespace\", null, null),\n+            new RequestData(\"aName\", null, null, \"{}\"),\n+            new RequestData(null, \"aNamespace\", null, \"{}\")\n+    ).collect(Collectors.toList());\n+\n+    private static final RequestData REQUEST_DATA_MODEL_NOT_FOUND = new RequestData(\"aName\", \"aNamespace\", null, \"{}\");\n+\n+    private static final RequestData REQUEST_DATA_NULL_CONTEXT = new RequestData(MODEL_NAME, MODEL_NAMESPACE, null, null);\n+\n+    private static final RequestData REQUEST_DATA_EVALUATE_ALL = new RequestData(MODEL_NAME, MODEL_NAMESPACE, null, \"\" +\n+            \"{\\n\" +\n+            \"    \\\"Driver\\\": {\\n\" +\n+            \"        \\\"Age\\\": 25,\\n\" +\n+            \"        \\\"Points\\\": 13\\n\" +\n+            \"    },\\n\" +\n+            \"    \\\"Violation\\\": {\\n\" +\n+            \"        \\\"Type\\\": \\\"speed\\\",\\n\" +\n+            \"        \\\"Actual Speed\\\": 115,\\n\" +\n+            \"        \\\"Speed Limit\\\": 100\\n\" +\n+            \"    }\\n\" +\n+            \"}\"\n+    );\n+\n+    private static final RequestData REQUEST_DATA_EVALUATE_DECISION_SERVICE = new RequestData(MODEL_NAME, MODEL_NAMESPACE, DECISION_SERVICE_NODE_NAME, \"\" +\n+            \"{\\n\" +\n+            \"    \\\"Violation\\\": {\\n\" +\n+            \"        \\\"Type\\\": \\\"speed\\\",\\n\" +\n+            \"        \\\"Actual Speed\\\": 115,\\n\" +\n+            \"        \\\"Speed Limit\\\": 100\\n\" +\n+            \"    }\\n\" +\n+            \"}\"\n+    );\n+\n+    private static final String TEST_EXECUTION_ID = \"11ecbb6f-fb25-4597-88c8-ac7976efe078\";\n+\n+    private static DMNRuntime runtime;\n+\n+    private EventDrivenDecisionController controller;\n+    private CloudEventEmitter eventEmitterMock;\n+    private DecisionModel decisionModelSpy;\n+    private DecisionModels decisionModelsMock;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        ExtensionProvider.getInstance().registerExtension(KogitoExtension.class, KogitoExtension::new);\n+        runtime = DecisionTestUtils.createDMNRuntime();\n+    }\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        decisionModelsMock = mock(DecisionModels.class);\n+        eventEmitterMock = mock(CloudEventEmitter.class);\n+\n+        // by default there's no execution id supplier, if needed it will be overridden in the specific test\n+        mockDecisionModel();\n+\n+        controller = new EventDrivenDecisionController(decisionModelsMock, mock(ConfigBean.class), eventEmitterMock, mock(CloudEventReceiver.class));\n+    }\n+\n+    @Test\n+    void testSubscribe() {\n+        DecisionModels decisionModelsMock = mock(DecisionModels.class);\n+        ConfigBean configMock = mock(ConfigBean.class);\n+        CloudEventEmitter eventEmitterMock = mock(CloudEventEmitter.class);\n+        CloudEventReceiver eventReceiverMock = mock(CloudEventReceiver.class);\n+\n+        // option #1: parameters via constructor + parameterless setup\n+        EventDrivenDecisionController controller1 = new EventDrivenDecisionController(decisionModelsMock, configMock, eventEmitterMock, eventReceiverMock);\n+        controller1.setup();\n+        verify(eventReceiverMock).subscribe(any());\n+\n+        reset(eventReceiverMock);\n+\n+        // option #2: parameterless via constructor + parameters via setup (introduced for Quarkus CDI)\n+        EventDrivenDecisionController controller2 = new EventDrivenDecisionController();\n+        controller2.setup(decisionModelsMock, configMock, eventEmitterMock, eventReceiverMock);\n+        verify(eventReceiverMock).subscribe(any());\n+    }\n+\n+    @Test\n+    void testHandleEventWithMalformedInput() {\n+        controller.handleEvent(\"this-is-not-a-cloudevent\");\n+        verify(eventEmitterMock, never()).emit(any());\n+    }\n+\n+    @Test\n+    void testHandleEventWithIgnoredCloudEvent() {\n+        controller.handleEvent(CLOUDEVENT_IGNORED);\n+        verify(eventEmitterMock, never()).emit(any());\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventWithNullDataProducingBadRequest() {\n+        testAllErrorCloudEventEmittedCombinations(REQUEST_DATA_NULL_CONTEXT, DecisionResponseError.BAD_REQUEST);\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventProducingOkEvaluateAll() {\n+        testAllDefaultAndFullCloudEventEmittedCombinations(REQUEST_DATA_EVALUATE_ALL, (cloudEvent, kogitoExtension, responseEvent) -> {\n+            assertNull(kogitoExtension.getExecutionId());\n+            verify(decisionModelSpy).evaluateAll(notNull());\n+            verify(decisionModelSpy, never()).evaluateDecisionService(any(), any());\n+            clearInvocations(decisionModelSpy);\n+        });\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventWithExecutionIdProducingOkEvaluateAll() {\n+        mockDecisionModelWithExecutionIdSupplier();\n+        testAllDefaultAndFullCloudEventEmittedCombinations(REQUEST_DATA_EVALUATE_ALL, (cloudEvent, kogitoExtension, responseEvent) -> {\n+            assertEquals(TEST_EXECUTION_ID, kogitoExtension.getExecutionId());\n+            verify(decisionModelSpy).evaluateAll(notNull());\n+            verify(decisionModelSpy, never()).evaluateDecisionService(any(), any());\n+            clearInvocations(decisionModelSpy);\n+        });\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventProducingOkEvaluateDecisionService() {\n+        testAllDefaultAndFullCloudEventEmittedCombinations(REQUEST_DATA_EVALUATE_DECISION_SERVICE, (cloudEvent, kogitoExtension, responseEvent) -> {\n+            assertNull(kogitoExtension.getExecutionId());\n+            verify(decisionModelSpy, never()).evaluateAll(any());\n+            verify(decisionModelSpy).evaluateDecisionService(notNull(), notNull());\n+            clearInvocations(decisionModelSpy);\n+        });\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventWithExecutionIdProducingOkEvaluateDecisionService() {\n+        mockDecisionModelWithExecutionIdSupplier();\n+        testAllDefaultAndFullCloudEventEmittedCombinations(REQUEST_DATA_EVALUATE_DECISION_SERVICE, (cloudEvent, kogitoExtension, responseEvent) -> {\n+            assertEquals(TEST_EXECUTION_ID, kogitoExtension.getExecutionId());\n+            verify(decisionModelSpy, never()).evaluateAll(any());\n+            verify(decisionModelSpy).evaluateDecisionService(notNull(), notNull());\n+            clearInvocations(decisionModelSpy);\n+        });\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventProducingBadRequest() {\n+        for (RequestData badRequestData : REQUEST_DATA_BAD_REQUEST) {\n+            testAllErrorCloudEventEmittedCombinations(badRequestData, DecisionResponseError.BAD_REQUEST);\n+        }\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventWithExecutionIdProducingBadRequest() {\n+        mockDecisionModelWithExecutionIdSupplier();\n+        for (RequestData badRequestData : REQUEST_DATA_BAD_REQUEST) {\n+            testAllErrorCloudEventEmittedCombinations(badRequestData, DecisionResponseError.BAD_REQUEST);\n+        }\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventProducingNotFound() {\n+        testAllErrorCloudEventEmittedCombinations(REQUEST_DATA_MODEL_NOT_FOUND, DecisionResponseError.MODEL_NOT_FOUND);\n+    }\n+\n+    @Test\n+    void testHandleEventWithValidCloudEventWithExecutionIdProducingNotFound() {\n+        mockDecisionModelWithExecutionIdSupplier();\n+        testAllErrorCloudEventEmittedCombinations(REQUEST_DATA_MODEL_NOT_FOUND, DecisionResponseError.MODEL_NOT_FOUND);\n+    }\n+\n+    private void assertSubject(CloudEvent event) {\n+        assertNotNull(event.getSubject());\n+        assertEquals(CLOUDEVENT_SUBJECT, event.getSubject());\n+    }\n+\n+    private String cloudEventOkWith(RequestData requestData, Boolean fullResult, Boolean filteredCtx) {\n+        return CLOUDEVENT_TEMPLATE\n+                .replace(MODEL_NAME_PLACEHOLDER, format(requestData.getModelName()))\n+                .replace(MODEL_NAMESPACE_PLACEHOLDER, format(requestData.getModelNamespace()))\n+                .replace(EVALUATE_DECISION_PLACEHOLDER, format(requestData.getDecision()))\n+                .replace(FULL_RESULT_PLACEHOLDER, fullResult == null ? \"null\" : fullResult.toString())\n+                .replace(FILTERED_CTX_PLACEHOLDER, filteredCtx == null ? \"null\" : filteredCtx.toString())\n+                .replace(DATA_PLACEHOLDER, Optional.ofNullable(requestData.getData()).orElse(\"null\"));\n+    }\n+\n+    private String format(String input) {\n+        return Optional.ofNullable(input)\n+                .map(i -> \"\\\"\" + i + \"\\\"\")\n+                .orElse(\"null\");\n+    }\n+\n+    private void mockDecisionModel() {\n+        decisionModelSpy = spy(new DmnDecisionModel(runtime, MODEL_NAMESPACE, MODEL_NAME));\n+        when(decisionModelsMock.getDecisionModel(eq(MODEL_NAMESPACE), eq(DecisionTestUtils.MODEL_NAME))).thenReturn(decisionModelSpy);\n+    }\n+\n+    private void mockDecisionModelWithExecutionIdSupplier() {\n+        decisionModelSpy = spy(new DmnDecisionModel(runtime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID));\n+        when(decisionModelsMock.getDecisionModel(eq(MODEL_NAMESPACE), eq(DecisionTestUtils.MODEL_NAME))).thenReturn(decisionModelSpy);\n+    }\n+\n+    private <T> void testCloudEventEmitted(RequestData requestData, Boolean fullResult, Boolean filteredCtx, Class<T> responseDataClass, String expectedType, TriConsumer<CloudEvent, KogitoExtension, T> callback) {\n+        try {\n+            ArgumentCaptor<String> eventCaptor = ArgumentCaptor.forClass(String.class);\n+\n+            controller.handleEvent(cloudEventOkWith(requestData, fullResult, filteredCtx));\n+\n+            verify(eventEmitterMock).emit(eventCaptor.capture());\n+            String emittedCloudEventJson = eventCaptor.getValue();\n+\n+            Optional<CloudEvent> optEmittedCloudEvent = CloudEventUtils.decode(emittedCloudEventJson);\n+            if (optEmittedCloudEvent.isPresent()) {\n+                CloudEvent emittedCloudEvent = optEmittedCloudEvent.get();\n+\n+                assertEquals(expectedType, emittedCloudEvent.getType());\n+\n+                KogitoExtension kogitoExtension = ExtensionProvider.getInstance()\n+                        .parseExtension(KogitoExtension.class, emittedCloudEvent);\n+\n+                if (kogitoExtension != null) {\n+                    assertEquals(requestData.getModelName(), kogitoExtension.getDmnModelName());\n+                    assertEquals(requestData.getModelNamespace(), kogitoExtension.getDmnModelNamespace());\n+                    assertEquals(requestData.getDecision(), kogitoExtension.getDmnEvaluateDecision());\n+\n+                    Optional<T> optResponseEvent = CloudEventUtils.decodeData(emittedCloudEvent, responseDataClass);\n+                    if (optResponseEvent.isPresent()) {\n+                        assertSubject(emittedCloudEvent);\n+                        if (callback != null) {\n+                            callback.accept(emittedCloudEvent, kogitoExtension, optResponseEvent.get());\n+                        }\n+                    } else {\n+                        fail(\"Can't decode emitted CloudEvent data of: \" + emittedCloudEventJson);\n+                    }\n+                } else {\n+                    fail(\"No Kogito extension in emitted CloudEvent: \" + emittedCloudEventJson);\n+                }\n+            } else {\n+                fail(\"Can't decode emitted CloudEvent\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3f531ce2170983b8a7287e6cfbb4ac8f2e289a1"}, "originalPosition": 340}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffafe6101c538efaabb2bfb9ff43f5b33ab410f8", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ffafe6101c538efaabb2bfb9ff43f5b33ab410f8", "committedDate": "2021-01-21T08:57:03Z", "message": "KOGITO-3936: clean EventDrivenDecisionControllerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMjI1NjUz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-573225653", "createdAt": "2021-01-21T11:18:37Z", "commit": {"oid": "ffafe6101c538efaabb2bfb9ff43f5b33ab410f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea4097805de11c04095d89995766cea52af91e17", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ea4097805de11c04095d89995766cea52af91e17", "committedDate": "2021-01-21T14:28:16Z", "message": "KOGITO-3936: rename addon to kogito-event-driven-decisions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MDc3Nzg1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-574077785", "createdAt": "2021-01-22T09:18:06Z", "commit": {"oid": "ea4097805de11c04095d89995766cea52af91e17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MDkyODk5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#pullrequestreview-574092899", "createdAt": "2021-01-22T09:36:57Z", "commit": {"oid": "ea4097805de11c04095d89995766cea52af91e17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwOTozNjo1N1rOIYcilA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwOTozNjo1N1rOIYcilA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUwNDM0MA==", "bodyText": "Is this a known bug or something new? If so, could you create a ticket for them and add the link here so that we fix it in the future?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/946#discussion_r562504340", "createdAt": "2021-01-22T09:36:57Z", "author": {"login": "r00ta"}, "path": "addons/cloudevents/cloudevents-utils/src/main/java/org/kie/kogito/cloudevents/extension/KogitoExtension.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright 2021 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.cloudevents.extension;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.cloudevents.CloudEventExtensions;\n+import io.cloudevents.Extension;\n+import io.cloudevents.core.extensions.impl.ExtensionUtils;\n+import io.cloudevents.core.provider.ExtensionProvider;\n+\n+public class KogitoExtension implements Extension {\n+\n+    public static final String KOGITO_EXECUTION_ID = \"kogitoexecutionid\";\n+    public static final String KOGITO_DMN_MODEL_NAME = \"kogitodmnmodelname\";\n+    public static final String KOGITO_DMN_MODEL_NAMESPACE = \"kogitodmnmodelnamespace\";\n+    public static final String KOGITO_DMN_EVALUATE_DECISION = \"kogitodmnevaldecision\";\n+    public static final String KOGITO_DMN_FULL_RESULT = \"kogitodmnfullresult\";\n+    public static final String KOGITO_DMN_FILTERED_CTX = \"kogitodmnfilteredctx\";\n+\n+    private static final Set<String> KEYS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n+            KOGITO_EXECUTION_ID,\n+            KOGITO_DMN_MODEL_NAME,\n+            KOGITO_DMN_MODEL_NAMESPACE,\n+            KOGITO_DMN_EVALUATE_DECISION,\n+            KOGITO_DMN_FULL_RESULT,\n+            KOGITO_DMN_FILTERED_CTX\n+    )));\n+\n+    private String executionId;\n+    private String dmnModelName;\n+    private String dmnModelNamespace;\n+    private String dmnEvaluateDecision;\n+    private Boolean dmnFullResult;\n+    private Boolean dmnFilteredCtx;\n+\n+    public static void register() {\n+        ExtensionProvider.getInstance().registerExtension(KogitoExtension.class, KogitoExtension::new);\n+    }\n+\n+    @Override\n+    public void readFrom(CloudEventExtensions extensions) {\n+        readStringExtension(extensions, KOGITO_EXECUTION_ID, this::setExecutionId);\n+        readStringExtension(extensions, KOGITO_DMN_MODEL_NAME, this::setDmnModelName);\n+        readStringExtension(extensions, KOGITO_DMN_MODEL_NAMESPACE, this::setDmnModelNamespace);\n+        readStringExtension(extensions, KOGITO_DMN_EVALUATE_DECISION, this::setDmnEvaluateDecision);\n+        readBooleanExtension(extensions, KOGITO_DMN_FULL_RESULT, this::setDmnFullResult);\n+        readBooleanExtension(extensions, KOGITO_DMN_FILTERED_CTX, this::setDmnFilteredCtx);\n+    }\n+\n+    private static void readStringExtension(CloudEventExtensions extensions, String key, Consumer<String> consumer) {\n+        Optional.ofNullable(extensions.getExtension(key))\n+                // there seems to be a bug in the cloudevents sdk so that, when a extension attributes is null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea4097805de11c04095d89995766cea52af91e17"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3770, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}