{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjQ5MDQx", "number": 598, "title": "[KOGITO-2449] Generate endpoints for json schema", "bodyText": "Two additional endpoints has been added to retrieve schema and schema plus allowed phases.\n///schema returns json schema (which also included input/output metadata information)\n/////schema return previous json schema plus allowed phases for that task intances. In order to retrieve that information, a new method has been added to ProcessIntance interface", "createdAt": "2020-06-30T19:31:43Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598", "merged": true, "mergeCommit": {"oid": "497f524d8f0721c5483eda697d2b98671e6894f3"}, "closed": true, "closedAt": "2020-07-10T12:19:03Z", "author": {"login": "fjtirado"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwqI_mgBqjM1MDI0MjYzNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcziRtSAFqTQ0NjMzOTgxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "123ef94c4a9e665bbafff808957d1878f26db515", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/123ef94c4a9e665bbafff808957d1878f26db515", "committedDate": "2020-06-30T19:31:07Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}, "afterCommit": {"oid": "2632ed33b4d2f7c9450f1734fa47e5fc2d0857a2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2632ed33b4d2f7c9450f1734fa47e5fc2d0857a2", "committedDate": "2020-07-01T13:19:58Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2632ed33b4d2f7c9450f1734fa47e5fc2d0857a2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2632ed33b4d2f7c9450f1734fa47e5fc2d0857a2", "committedDate": "2020-07-01T13:19:58Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}, "afterCommit": {"oid": "baee599bdbc9ea1c5d125684c23947f18fb97517", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/baee599bdbc9ea1c5d125684c23947f18fb97517", "committedDate": "2020-07-01T17:34:45Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baee599bdbc9ea1c5d125684c23947f18fb97517", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/baee599bdbc9ea1c5d125684c23947f18fb97517", "committedDate": "2020-07-01T17:34:45Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}, "afterCommit": {"oid": "832b907f4a846702ded426d902cacf4233b0ace4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/832b907f4a846702ded426d902cacf4233b0ace4", "committedDate": "2020-07-02T09:43:26Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "832b907f4a846702ded426d902cacf4233b0ace4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/832b907f4a846702ded426d902cacf4233b0ace4", "committedDate": "2020-07-02T09:43:26Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoint.\n\nThis is for pure json schema retrieval (only process id and task name\nare needed)\n\nThis will be extended to include dynamic one (including info for custom\ntask life cycle, which will require process instance id, task id, user\nand group)"}, "afterCommit": {"oid": "09280ed86f85ab11112d672b9c87999f0cbf7864", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/09280ed86f85ab11112d672b9c87999f0cbf7864", "committedDate": "2020-07-02T14:45:34Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09280ed86f85ab11112d672b9c87999f0cbf7864", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/09280ed86f85ab11112d672b9c87999f0cbf7864", "committedDate": "2020-07-02T14:45:34Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "e0d373fdad8ca00ba8ce765cde4fc9f29c1d8e9c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e0d373fdad8ca00ba8ce765cde4fc9f29c1d8e9c", "committedDate": "2020-07-02T14:56:49Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0d373fdad8ca00ba8ce765cde4fc9f29c1d8e9c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e0d373fdad8ca00ba8ce765cde4fc9f29c1d8e9c", "committedDate": "2020-07-02T14:56:49Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "0464de9a7b6ef5d95f5543e60e0d1a8ed6be1a3e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0464de9a7b6ef5d95f5543e60e0d1a8ed6be1a3e", "committedDate": "2020-07-02T15:01:59Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0464de9a7b6ef5d95f5543e60e0d1a8ed6be1a3e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0464de9a7b6ef5d95f5543e60e0d1a8ed6be1a3e", "committedDate": "2020-07-02T15:01:59Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "8f92fb05f84d3e5cc2c968f9d4d57d172c801c7b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8f92fb05f84d3e5cc2c968f9d4d57d172c801c7b", "committedDate": "2020-07-02T15:49:31Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f92fb05f84d3e5cc2c968f9d4d57d172c801c7b", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8f92fb05f84d3e5cc2c968f9d4d57d172c801c7b", "committedDate": "2020-07-02T15:49:31Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "cb86d3bed4ec3319322e892097ab8f205b6c9bc1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb86d3bed4ec3319322e892097ab8f205b6c9bc1", "committedDate": "2020-07-03T09:21:30Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb86d3bed4ec3319322e892097ab8f205b6c9bc1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb86d3bed4ec3319322e892097ab8f205b6c9bc1", "committedDate": "2020-07-03T09:21:30Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "1eb4bdea3b3cc8d61b36f7f978e496252a1e6dc1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1eb4bdea3b3cc8d61b36f7f978e496252a1e6dc1", "committedDate": "2020-07-03T09:45:24Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1eb4bdea3b3cc8d61b36f7f978e496252a1e6dc1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1eb4bdea3b3cc8d61b36f7f978e496252a1e6dc1", "committedDate": "2020-07-03T09:45:24Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "dc3dae561f225bd093afef2be47164a180c791d2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dc3dae561f225bd093afef2be47164a180c791d2", "committedDate": "2020-07-03T09:51:08Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc3dae561f225bd093afef2be47164a180c791d2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dc3dae561f225bd093afef2be47164a180c791d2", "committedDate": "2020-07-03T09:51:08Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "b22f40f89b2d5210c670d19f6612d3eb246ce79d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b22f40f89b2d5210c670d19f6612d3eb246ce79d", "committedDate": "2020-07-03T09:54:24Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b22f40f89b2d5210c670d19f6612d3eb246ce79d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b22f40f89b2d5210c670d19f6612d3eb246ce79d", "committedDate": "2020-07-03T09:54:24Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "0a3a0a5a3f943c3b516fdb0088a5da6f7c392182", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a3a0a5a3f943c3b516fdb0088a5da6f7c392182", "committedDate": "2020-07-03T11:00:21Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a3a0a5a3f943c3b516fdb0088a5da6f7c392182", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a3a0a5a3f943c3b516fdb0088a5da6f7c392182", "committedDate": "2020-07-03T11:00:21Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "1cdfdba510538a55daa94a828e5c5196fa5751d6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1cdfdba510538a55daa94a828e5c5196fa5751d6", "committedDate": "2020-07-03T11:51:08Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cdfdba510538a55daa94a828e5c5196fa5751d6", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1cdfdba510538a55daa94a828e5c5196fa5751d6", "committedDate": "2020-07-03T11:51:08Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "4fc6eaafa48514b06fde75e90a732c83746cef7e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4fc6eaafa48514b06fde75e90a732c83746cef7e", "committedDate": "2020-07-06T11:26:03Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fc6eaafa48514b06fde75e90a732c83746cef7e", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4fc6eaafa48514b06fde75e90a732c83746cef7e", "committedDate": "2020-07-06T11:26:03Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "268f9d715cbe92f61a112ebd03b70236c12373b1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/268f9d715cbe92f61a112ebd03b70236c12373b1", "committedDate": "2020-07-06T11:38:25Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "268f9d715cbe92f61a112ebd03b70236c12373b1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/268f9d715cbe92f61a112ebd03b70236c12373b1", "committedDate": "2020-07-06T11:38:25Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "456452a3f0e0cfd889e10e06f18c82d132354bb4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/456452a3f0e0cfd889e10e06f18c82d132354bb4", "committedDate": "2020-07-06T11:56:49Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "456452a3f0e0cfd889e10e06f18c82d132354bb4", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/456452a3f0e0cfd889e10e06f18c82d132354bb4", "committedDate": "2020-07-06T11:56:49Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f16e4fa146f492d930364f6577b61ee45882117c", "committedDate": "2020-07-06T12:41:50Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjgwMTg2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#pullrequestreview-443680186", "createdAt": "2020-07-07T08:37:50Z", "commit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozNzo1MFrOGt0moA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NToxMlrOGt05Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDk2MA==", "bodyText": "why has this been added to kogito-api?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450700960", "createdAt": "2020-07-07T08:37:50Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/pom.xml", "diffHunk": "@@ -30,7 +30,12 @@\n       <artifactId>jaxb-api</artifactId>\n       <scope>provided</scope>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjI0Mg==", "bodyText": "I am not really fond of adding this public method to ProcessInstance, as it is a property of the WorkItem. Shouldn't this be a method on WorkItemManager maybe?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450702242", "createdAt": "2020-07-07T08:39:58Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -130,6 +130,13 @@\n      * @throws WorkItemNotFoundException in case work item with given id does not exist\n      */\n     void transitionWorkItem(String id, Transition<?> transition);\n+    \n+    /**\n+     * Identify phases that are available to be transition to for a particular work item\n+     * @param id work item \n+     * @return id of the phases that can be transitioned to\n+     */\n+    Set<String> allowedPhases (String id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTY4Mg==", "bodyText": "are we consistent with the way process \"id\", process \"package\", process \"name\" are used? IIRC IDs are unqualified, while we have package+name otherwise; not 100% sure but seeing the package here feels inconsistent @cristianonicolai @tiagobento ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450705682", "createdAt": "2020-07-07T08:45:12Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n \n     private enum Color {GREEN, WHITE};\n     \n-    @UserTask(taskName = \"test\", processName = \"test\")\n+    @UserTask(taskName = \"test\", processName = \"org.jbpm.test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f16e4fa146f492d930364f6577b61ee45882117c", "committedDate": "2020-07-06T12:41:50Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "cf5f3551db3b7d15dc90c6cad90bf981584ce79d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cf5f3551db3b7d15dc90c6cad90bf981584ce79d", "committedDate": "2020-07-07T10:11:28Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODgzNjk5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#pullrequestreview-443883699", "createdAt": "2020-07-07T13:22:09Z", "commit": {"oid": "cf5f3551db3b7d15dc90c6cad90bf981584ce79d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf5f3551db3b7d15dc90c6cad90bf981584ce79d", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cf5f3551db3b7d15dc90c6cad90bf981584ce79d", "committedDate": "2020-07-07T10:11:28Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/899b245fed5509fea4029dadbd6eb87b4d3cc1aa", "committedDate": "2020-07-07T14:58:42Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTIzNzE5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#pullrequestreview-444123719", "createdAt": "2020-07-07T17:55:34Z", "commit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo1NTozNVrOGuJiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToyNTo1MFrOGuMeJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Mzg4MQ==", "bodyText": "I think it can be used the SpringBootTest.WebEnvironment.RANDOM_PORT to avoid conflicts.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451043881", "createdAt": "2020-07-07T17:55:35Z", "author": {"login": "tiagodolphine"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/JsonSchemaTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3NjQ4Mw==", "bodyText": "formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451076483", "createdAt": "2020-07-07T18:56:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jbpm.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class JsonSchemaUtil {\n+\n+    private JsonSchemaUtil() {}\n+    \n+    private static ObjectMapper mapper = new ObjectMapper();\n+    private static Path jsonDir = Paths.get(\"META-INF\", \"jsonSchema\");\n+\n+    public static String getJsonSchemaName(String processId, String taskName) {\n+        return processId.replace('.', '#') + \"_\" + taskName;\n+    }\n+\n+    public static Path getJsonDir() {\n+        return jsonDir;\n+    }\n+\n+    public static String getFileName(String key) {\n+        return key + \".json\";\n+    }\n+\n+    public static Map<String,Object> load(ClassLoader cl, String processId, String taskName) {\n+        Path jsonFile = jsonDir.resolve(getFileName(getJsonSchemaName(processId, taskName)));\n+        try (InputStream in = cl.getResourceAsStream(jsonFile.toString())) {\n+            if (in == null) {\n+                throw new IllegalArgumentException(\"Cannot find file \" + jsonFile + \" in classpath\");\n+            }\n+            return load(in);\n+        } catch (IOException io) {\n+            throw new IllegalStateException(\"Error loading schema \" + jsonFile, io);\n+        }\n+    }\n+\n+    public static Map<String,Object> load(InputStream in) throws IOException {\n+        return mapper.readValue(in,new TypeReference<Map<String, Object>>() {\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3NzUzMA==", "bodyText": "could it be renamed to JsonSchemaUtilTest?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451077530", "createdAt": "2020-07-07T18:57:58Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.jbpm.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjI1Mw==", "bodyText": "It seems there is too much logic for Rest resource class, wouldn't worth extracting this logic to another class, in this way it could be reused in both springboot and quarkus, anyway just a suggestion.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451086253", "createdAt": "2020-07-07T19:14:53Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchema() {\n+        return JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+    }\n     \n+    @GET()\n+    @Path(\"/{id}/$taskName$/{workItemId}/form\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n+        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDEyMw==", "bodyText": "we were already using the rest-assured in many places, I think you can reuse the same version, check \n  \n    \n      kogito-runtimes/pom.xml\n    \n    \n         Line 121\n      in\n      bf14ef8\n    \n    \n    \n    \n\n        \n          \n           <version.io.restassured>4.3.0</version.io.restassured>", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451090123", "createdAt": "2020-07-07T19:22:18Z", "author": {"login": "tiagodolphine"}, "path": "pom.xml", "diffHunk": "@@ -94,6 +94,7 @@\n     <version.com.github.haifengl.smile>1.5.2</version.com.github.haifengl.smile>\n     <version.com.github.javaparser>3.13.10</version.com.github.javaparser>\n     <version.com.github.victools>4.12.1</version.com.github.victools>\n+    <version.io.rest-assured>4.3.1</version.io.rest-assured>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg==", "bodyText": "What about using a different name for the resource path instead of form, I mean something like schema, or any more generic one, the term form recalls me UI, I think a more generic term would be better, WDYT?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451092006", "createdAt": "2020-07-07T19:25:50Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/899b245fed5509fea4029dadbd6eb87b4d3cc1aa", "committedDate": "2020-07-07T14:58:42Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "6aa6cb993cc75bea47227ee8a61f959f58403b6c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6aa6cb993cc75bea47227ee8a61f959f58403b6c", "committedDate": "2020-07-08T09:10:44Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6aa6cb993cc75bea47227ee8a61f959f58403b6c", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6aa6cb993cc75bea47227ee8a61f959f58403b6c", "committedDate": "2020-07-08T09:10:44Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "5fcc18f7161653620eb3b48074c7f197181ad966", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5fcc18f7161653620eb3b48074c7f197181ad966", "committedDate": "2020-07-08T09:13:58Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fcc18f7161653620eb3b48074c7f197181ad966", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5fcc18f7161653620eb3b48074c7f197181ad966", "committedDate": "2020-07-08T09:13:58Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "d35c6ca9a8e3bdd643602c87d3b76fd4b56936e1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d35c6ca9a8e3bdd643602c87d3b76fd4b56936e1", "committedDate": "2020-07-08T10:17:08Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d35c6ca9a8e3bdd643602c87d3b76fd4b56936e1", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d35c6ca9a8e3bdd643602c87d3b76fd4b56936e1", "committedDate": "2020-07-08T10:17:08Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2", "committedDate": "2020-07-09T09:35:32Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NjkzOTEy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#pullrequestreview-445693912", "createdAt": "2020-07-09T14:51:09Z", "commit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTYwMTQ3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#pullrequestreview-446160147", "createdAt": "2020-07-10T06:51:29Z", "commit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MToyOVrOGvr2hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowOTo0NlrOGvsU6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NDcyNQ==", "bodyText": "missing headers", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452654725", "createdAt": "2020-07-10T06:51:29Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jbpm.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testJsonSchema() throws IOException\n          \n          \n            \n                {\n          \n          \n            \n                void testJsonSchema() throws IOException {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452655003", "createdAt": "2020-07-10T06:52:10Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.jbpm.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaUtilTest {\n+    \n+    \n+    private final static String example =\"{\\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n\" + \n+            \"    \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"    \\\"properties\\\": {\\n\" + \n+            \"        \\\"traveller\\\": {\\n\" + \n+            \"            \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"            \\\"properties\\\": {\\n\" + \n+            \"                \\\"address\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"                    \\\"properties\\\": {\\n\" + \n+            \"                        \\\"city\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"country\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"street\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"zipCode\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        }\\n\" + \n+            \"                    }\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"email\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"firstName\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"lastName\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"nationality\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                }\\n\" + \n+            \"            },\\n\" + \n+            \"            \\\"input\\\": true\\n\" + \n+            \"        },\\n\" + \n+            \"        \\\"approved\\\": {\\n\" + \n+            \"            \\\"type\\\": \\\"boolean\\\",\\n\" + \n+            \"            \\\"output\\\": true\\n\" + \n+            \"        }\\n\" + \n+            \"    }}\";\n+    \n+    @Test\n+    void testJsonSchema() throws IOException\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTE3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context)\n          \n          \n            \n                {\n          \n          \n            \n                private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452655178", "createdAt": "2020-07-10T06:52:35Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -107,15 +111,25 @@ private JsonSchemaGenerator(Stream<Class<?>> stream) {\n             }\n             try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n                 writer.writeValue(outputStream, merged);\n-                files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+                files.add(new GeneratedFile(Type.JSON_SCHEMA, JsonSchemaUtil.getFileName(entry.getKey()), outputStream.toByteArray()));\n             }\n         }\n         return files;\n     }\n+    \n+    private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MTAzOQ==", "bodyText": "@fjtirado instead of doing allowed phases via process instances. You could have access or inject here the ApplicationConfig, from there you can get ProcessConfig.workItemHandlers and retrieve the WorkItemHandler for human tasks. That way, allowedPhases is only added to WorkItemHandler wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452661039", "createdAt": "2020-07-10T07:06:32Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/schema\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchema() {\n+        return JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+    }\n     \n+    @GET()\n+    @Path(\"/{id}/$taskName$/{workItemId}/schema\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n+        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+        process.instances().findById(id).ifPresent(pi ->jsonSchema.put(\"phases\",pi.allowedPhases(workItemId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjQ0NQ==", "bodyText": "name and package are different properties for a process. It might be valid to cover that the generation won't break because \".\" are included but I dont think this is a common use.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452662445", "createdAt": "2020-07-10T07:09:36Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n \n     private enum Color {GREEN, WHITE};\n     \n-    @UserTask(taskName = \"test\", processName = \"test\")\n+    @UserTask(taskName = \"test\", processName = \"org.jbpm.test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTY4Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjUwNw==", "bodyText": "remove?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452662507", "createdAt": "2020-07-10T07:09:46Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -135,8 +136,12 @@ public void testBasicUserTaskProcessPhases() throws Exception {\n         assertEquals(Active.ID, wi.getPhase());\n         assertEquals(Active.STATUS, wi.getPhaseStatus());\n \n-        processInstance.transitionWorkItem(workItems.get(0).getId(), new HumanTaskTransition(Complete.ID, null, securityPolicy));\n+        String workItemId = workItems.get(0).getId();\n+        assertFalse(processInstance.allowedPhases(workItemId).isEmpty());\n+        processInstance.transitionWorkItem(workItemId, new HumanTaskTransition(Complete.ID, null, securityPolicy));\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "380a86a4bc3c32ab592791ccea81c25e9f263db0", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/380a86a4bc3c32ab592791ccea81c25e9f263db0", "committedDate": "2020-07-10T09:40:46Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2", "committedDate": "2020-07-09T09:35:32Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}, "afterCommit": {"oid": "380a86a4bc3c32ab592791ccea81c25e9f263db0", "author": {"user": {"login": "fjtirado", "name": "Francisco Javier Tirado Sarti"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/380a86a4bc3c32ab592791ccea81c25e9f263db0", "committedDate": "2020-07-10T09:40:46Z", "message": "[KOGITO-2449] Generate endpoints for json schema\n\nDraft for schema endpoin (I have to figure unit test for this  and\nswagger documentation)\n\nIt generates two endpoints. One static that includes json schema\nwith two additional metadata (input/output) of the form\n/{processId}/{taskName}. And one\ndynamic,/{processId}/{processInstanceId}/{taskName}/{taskId}/forms,\nwhich returns the same than the static one plus an extra field called\nphases with the set of allowed phases or that task from the current\nphase."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzM5ODE5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#pullrequestreview-446339819", "createdAt": "2020-07-10T11:52:20Z", "commit": {"oid": "380a86a4bc3c32ab592791ccea81c25e9f263db0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4206, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}