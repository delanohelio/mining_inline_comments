{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Nzg1MTM0", "number": 839, "title": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)", "bodyText": "Same as #807 except this is Spring-specific.\nCaveats: there is no 'abstraction' for channels/topics in Spring so I had to come up with my own config keys -- we should probably revisit this\nrelated kiegroup/kogito-examples#421\nhttps://issues.redhat.com/browse/KOGITO-3407\n\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-10-20T13:09:25Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839", "merged": true, "mergeCommit": {"oid": "983c046c962a6b07e7b618ba194ac8cb4e777b3a"}, "closed": true, "closedAt": "2020-10-29T13:25:16Z", "author": {"login": "evacchi"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUYqfNgBqjM4OTg2NjU1NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXQ6JOgFqTUxOTU5MDUyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55e7e4c6b9f8b6bbe329cfc587600387f9010278", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/55e7e4c6b9f8b6bbe329cfc587600387f9010278", "committedDate": "2020-10-20T13:06:12Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}, "afterCommit": {"oid": "4ae44a4c34ba208d040b3b5b35fbcd49de66a70a", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ae44a4c34ba208d040b3b5b35fbcd49de66a70a", "committedDate": "2020-10-20T13:19:43Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ae44a4c34ba208d040b3b5b35fbcd49de66a70a", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ae44a4c34ba208d040b3b5b35fbcd49de66a70a", "committedDate": "2020-10-20T13:19:43Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}, "afterCommit": {"oid": "6906e1f9bc0cebe21f41181b4c716d64e794369c", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6906e1f9bc0cebe21f41181b4c716d64e794369c", "committedDate": "2020-10-23T07:21:32Z", "message": "fix dependency"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caf3db650f593ec16164559d609aa230e382cb9c", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/caf3db650f593ec16164559d609aa230e382cb9c", "committedDate": "2020-10-23T13:51:03Z", "message": "fix topic names"}, "afterCommit": {"oid": "dacecc21daf517402548978d664561ed71919ffd", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dacecc21daf517402548978d664561ed71919ffd", "committedDate": "2020-10-27T13:11:22Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/950116bbeeea21209871051a17494f077e1d94e6", "committedDate": "2020-10-27T15:54:59Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dacecc21daf517402548978d664561ed71919ffd", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dacecc21daf517402548978d664561ed71919ffd", "committedDate": "2020-10-27T13:11:22Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}, "afterCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/950116bbeeea21209871051a17494f077e1d94e6", "committedDate": "2020-10-27T15:54:59Z", "message": "KOGITO-3407 CloudEvent Kafka Publisher+Emitter (Spring Boot)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDI3MzUw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#pullrequestreview-518427350", "createdAt": "2020-10-28T08:38:54Z", "commit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODozODo1NFrOHpfJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTo1MjoxNFrOHpmX-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2Mzg4Ng==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513263886", "createdAt": "2020-10-28T08:38:54Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n               $DataEventType$.class,\n               \"$Trigger$\",\n               new DefaultEventConsumerFactory(),\n               configBean.useCloudEvents());\n-    }\n \n-    @org.springframework.kafka.annotation.KafkaListener(topics = \"$Trigger$\")\n-    public void consume(String payload) {\n-        super.consume(payload);\n+        Flux.from(eventPublisher)\n+            .log()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NTYyMQ==", "bodyText": "Shouldn't we check the result and log the error (if any)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513265621", "createdAt": "2020-10-28T08:41:54Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {\n+                }); // discard return to comply with the signature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw==", "bodyText": "What do you mean with demo?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513382393", "createdAt": "2020-10-28T11:52:14Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTk2Mzcy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#pullrequestreview-518596372", "createdAt": "2020-10-28T12:14:41Z", "commit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoxNDo0MVrOHpnIyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjozMToxNFrOHpntbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5NDg4OA==", "bodyText": "I think using .thenApply(() -> null) would be better, because it would be similar to .map(...)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513394888", "createdAt": "2020-10-28T12:14:41Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -21,23 +21,30 @@\n \n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_outgoing_stream:kogito_outgoing_stream}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenRun(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5NzM5MA==", "bodyText": "and I think it would be better using camelCase for the method name, and something indicating you are creating a bean, that would be similar to the @Producer on CDI.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513397390", "createdAt": "2020-10-28T12:19:11Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MjM5Mw=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMDc0NQ==", "bodyText": "we could revisit this in the future, but in some way, we should give the flexibility to let the consumer ack the received message, like after executing some computation successfully or whatever, and not ack in case of failure, this would the same for quarkus approach.. anyway just a comment for us to think as a future improvement.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513400745", "createdAt": "2020-10-28T12:25:03Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.kogito_incoming_stream:kogito_incoming_stream}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        receiverOptions = ReceiverOptions.create(props);\n+        dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS z dd MMM yyyy\");\n+    }\n+\n+    @Bean\n+    @Qualifier(\"kogito_event_publisher\")\n+    public Flux<String> convert_to_demo_topic() {\n+        return makeConsumer();\n+    }\n+\n+    private Flux<String> makeConsumer() {\n+        ReceiverOptions<Integer, String> options = receiverOptions.subscription(Collections.singleton(topic))\n+                .addAssignListener(partitions -> log.debug(\"onPartitionsAssigned {}\", partitions))\n+                .addRevokeListener(partitions -> log.debug(\"onPartitionsRevoked {}\", partitions));\n+        Flux<ReceiverRecord<Integer, String>> kafkaFlux = KafkaReceiver.create(options).receive();\n+\n+        return kafkaFlux.map(record -> {\n+            ReceiverOffset offset = record.receiverOffset();\n+            log.debug(\"Received message: topic-partition={} offset={} timestamp={} key={} value={}\\n\",\n+                      offset.topicPartition(),\n+                      offset.offset(),\n+                      dateFormat.format(new Date(record.timestamp())),\n+                      record.key(),\n+                      record.value());\n+            offset.acknowledge();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjg0OQ==", "bodyText": "just a comment, could we use import the versions from the bom:\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n\nin this way, we could be in sync with all spring related dependencies... and avoid the need to update one by one...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513402849", "createdAt": "2020-10-28T12:28:38Z", "author": {"login": "tiagodolphine"}, "path": "kogito-build-parent/pom.xml", "diffHunk": "@@ -138,6 +138,8 @@\n     <version.resteasy.springboot>4.6.0.Final</version.resteasy.springboot>\n     <version.springboot>2.3.1.RELEASE</version.springboot>\n     <version.spring.kafka>2.5.2.RELEASE</version.spring.kafka>\n+    <version.spring.reactor>3.3.6.RELEASE</version.spring.reactor>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMzU4Mw==", "bodyText": "what about using a constant for \"kogito_event_publisher\" to centralize the name, in this way it would be easier to change if necessary in the future.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513403583", "createdAt": "2020-10-28T12:29:59Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNDI2OA==", "bodyText": "+1 to remove, or at least map the log explicitly as a debug.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513404268", "createdAt": "2020-10-28T12:31:14Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/SpringMessageConsumerTemplate.java", "diffHunk": "@@ -6,27 +6,29 @@\n import org.kie.kogito.process.Process;\n import org.kie.kogito.services.event.impl.AbstractMessageConsumer;\n \n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+\n @org.springframework.stereotype.Component()\n public class $Type$MessageConsumer extends AbstractMessageConsumer<$Type$, $DataType$, $DataEventType$> {\n \n     @org.springframework.beans.factory.annotation.Autowired()\n     $Type$MessageConsumer(\n             Application application,\n             @org.springframework.beans.factory.annotation.Qualifier(\"$ProcessName$\") Process<$Type$> process,\n-            ConfigBean configBean\n-            /*,  @Qualified(\"kogito_event_publisher\") Publisher<String> eventPublisher */) {\n+            ConfigBean configBean,\n+            @org.springframework.beans.factory.annotation.Qualifier(\"kogito_event_publisher\") Publisher<String> eventPublisher) {\n         super(application,\n               process,\n               $DataType$.class,\n               $DataEventType$.class,\n               \"$Trigger$\",\n               new DefaultEventConsumerFactory(),\n               configBean.useCloudEvents());\n-    }\n \n-    @org.springframework.kafka.annotation.KafkaListener(topics = \"$Trigger$\")\n-    public void consume(String payload) {\n-        super.consume(payload);\n+        Flux.from(eventPublisher)\n+            .log()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2Mzg4Ng=="}, "originalCommit": {"oid": "950116bbeeea21209871051a17494f077e1d94e6"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a08407c1af4aeabf5e8513d15f1578d461168cc0", "committedDate": "2020-10-28T15:52:06Z", "message": "apply suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTgyOTg4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#pullrequestreview-518982988", "createdAt": "2020-10-28T18:47:37Z", "commit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjE0NDQz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#pullrequestreview-519214443", "createdAt": "2020-10-29T00:30:10Z", "commit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDozMDoxMFrOHqCTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDozMDoxMFrOHqCTtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MDA1NA==", "bodyText": "@evacchi Im just afraid that we end up limiting the options that can be tweaked for the receiver with this new approach. Having in the application.properties in a way that all kafka properties could be used allows great flexibility.\n@MarianMacik have you had to tweak these in your tests? Just wondering as an example about how this is important.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r513840054", "createdAt": "2020-10-29T00:30:10Z", "author": {"login": "cristianonicolai"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventPublisher.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.spring;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Flux;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOffset;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+\n+@Component\n+public class SpringKafkaCloudEventPublisher {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SpringKafkaCloudEventPublisher.class.getName());\n+\n+    private final ReceiverOptions<Integer, String> receiverOptions;\n+    private final SimpleDateFormat dateFormat;\n+\n+    private final String topic;\n+\n+    public SpringKafkaCloudEventPublisher(\n+            @Value(value = \"${spring.kafka.bootstrap-servers}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${spring.kafka.consumer.group-id}\") String groupId,\n+            @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.INCOMING + \":\" + KogitoEventStreams.INCOMING + \"}\") String kafkaTopicName) {\n+        this.topic = kafkaTopicName;\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NDIwODMx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#pullrequestreview-519420831", "createdAt": "2020-10-29T08:17:08Z", "commit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxNzowOFrOHqQnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoxOToyMFrOHqQsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3NDQ2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());\n          \n          \n            \n                    logger.debug(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514074465", "createdAt": "2020-10-29T08:17:08Z", "author": {"login": "danielezonca"}, "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractMessageConsumer.java", "diffHunk": "@@ -82,6 +82,7 @@ public void setParams(\n     }\n \n     public void consume(String payload) {\n+        logger.info(\"Received: {} on thread {}\", payload, Thread.currentThread().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3NTcyNg==", "bodyText": "Ticket to remove this method?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#discussion_r514075726", "createdAt": "2020-10-29T08:19:20Z", "author": {"login": "danielezonca"}, "path": "addons/cloudevents/cloudevents-spring-boot-addon/src/main/java/org/kie/kogito/addon/cloudevents/spring/SpringKafkaCloudEventEmitter.java", "diffHunk": "@@ -19,25 +19,32 @@\n \n import java.util.concurrent.CompletionStage;\n \n+import org.kie.kogito.event.KogitoEventStreams;\n import org.kie.kogito.services.event.CloudEventEmitter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n /**\n  * Spring implementation delegating to kafka template\n- * TODO proper error handling https://issues.redhat.com/browse/KOGITO-3408\n  */\n @Component\n public class SpringKafkaCloudEventEmitter implements CloudEventEmitter {\n+\n     @Autowired\n     org.springframework.kafka.core.KafkaTemplate<String, String> emitter;\n+    @Value(value = \"${spring.kafka.bootstrap-servers}\")\n+    String kafkaBootstrapAddress;\n+    @Value(value = \"${kogito.addon.cloudevents.kafka.\" + KogitoEventStreams.OUTGOING + \":\" + KogitoEventStreams.OUTGOING + \"}\")\n+    String kafkaTopicName;\n \n     public CompletionStage<Void> emit(String e) {\n-        return emitter.send(\"kogito_outgoing_stream\", e)\n+        return emitter.send(kafkaTopicName, e)\n                 .completable()\n-                .thenRun(() -> {}); // discard return to comply with the signature\n+                .thenApply(r -> null); // discard return to comply with the signature\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08407c1af4aeabf5e8513d15f1578d461168cc0"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39aab28ba24693bee63561f65bd0297a6c877804", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/39aab28ba24693bee63561f65bd0297a6c877804", "committedDate": "2020-10-29T10:55:56Z", "message": "debug log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "192366d0c2bfead82931e57e0745ced916ad08dc", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/192366d0c2bfead82931e57e0745ced916ad08dc", "committedDate": "2020-10-29T10:56:14Z", "message": "cloud event emitter: remove deprecated method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NTkwNTIz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/839#pullrequestreview-519590523", "createdAt": "2020-10-29T11:59:29Z", "commit": {"oid": "192366d0c2bfead82931e57e0745ced916ad08dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}