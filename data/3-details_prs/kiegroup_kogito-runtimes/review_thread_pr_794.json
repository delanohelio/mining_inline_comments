{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1Mzg5MTIz", "number": 794, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNDoyN1rOEp0Aiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozNDoyNFrOEp0OqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjc5MTc5OnYy", "diffSide": "RIGHT", "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNDoyN1rOHbtewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxNDozNVrOHbvSnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODc1NA==", "bodyText": "Probably a better message would be welcome.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498818754", "createdAt": "2020-10-02T13:24:27Z", "author": {"login": "MarianMacik"}, "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {\n+                throw new WorkItemExecutionError(\"500\", event.cause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800dee1f7e166c900fe59b753907e58e450eb44b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTgwMQ==", "bodyText": "As discussed, the code is expected.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498845801", "createdAt": "2020-10-02T14:10:03Z", "author": {"login": "MarianMacik"}, "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {\n+                throw new WorkItemExecutionError(\"500\", event.cause());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODc1NA=="}, "originalCommit": {"oid": "800dee1f7e166c900fe59b753907e58e450eb44b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0ODQxNQ==", "bodyText": "This is required by WorkItemExecutionError. Since there is not easy way to extract the http error code of the rest invocation, a generic \"500\" is returned", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498848415", "createdAt": "2020-10-02T14:14:35Z", "author": {"login": "fjtirado"}, "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {\n+                throw new WorkItemExecutionError(\"500\", event.cause());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODc1NA=="}, "originalCommit": {"oid": "800dee1f7e166c900fe59b753907e58e450eb44b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjgyNzkyOnYy", "diffSide": "RIGHT", "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozNDoyNFrOHbt1bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxMzo0NlrOHbvQ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNDU1Nw==", "bodyText": "Probably more straightforward would be\nif (event.failed()) {\n    throw new WorkItemExecutionError(\"500\", event.cause());\n}", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498824557", "createdAt": "2020-10-02T13:34:24Z", "author": {"login": "MarianMacik"}, "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800dee1f7e166c900fe59b753907e58e450eb44b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0Nzk3Nw==", "bodyText": "thats better indeed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498847977", "createdAt": "2020-10-02T14:13:46Z", "author": {"login": "fjtirado"}, "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNDU1Nw=="}, "originalCommit": {"oid": "800dee1f7e166c900fe59b753907e58e450eb44b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4813, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}