{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjc0NjYx", "number": 894, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNDowN1rOFEnklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzozNDoyMFrOFH3_tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzg2OTY3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticConfigFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNDowN1rOIEx75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNDowN1rOIEx75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4MzM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private KogitoElasticConfig kogitoElasticConfig;\n          \n          \n            \n                private final KogitoElasticConfig kogitoElasticConfig;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r541883365", "createdAt": "2020-12-13T09:14:07Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticConfigFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.Map;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+\n+public class ElasticConfigFactory {\n+\n+    private KogitoElasticConfig kogitoElasticConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fdb937195b12cfdfb2178229500433b7e957e4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzg3MTAzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNDo1OFrOIEx8fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNDo1OFrOIEx8fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4MzUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Micrometer elastic publisher started.\");\n          \n          \n            \n                    logger.debug(\"Micrometer Elastic publisher started.\");", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r541883517", "createdAt": "2020-12-13T09:14:58Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistry.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.concurrent.Executors;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import io.micrometer.elastic.ElasticMeterRegistry;\n+import org.kie.kogito.monitoring.core.common.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ElasticRegistry {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ElasticRegistry.class);\n+    private ElasticMeterRegistry registry;\n+\n+    protected ElasticRegistry() {\n+    }\n+\n+    protected void start(ElasticConfig elasticConfig) {\n+        registry = ElasticMeterRegistry.builder(elasticConfig).build();\n+        MonitoringRegistry.addRegistry(registry);\n+        registry.start(Executors.defaultThreadFactory());\n+        logger.debug(\"Micrometer elastic publisher started.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fdb937195b12cfdfb2178229500433b7e957e4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzg3MzM5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/KogitoElasticConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNjozOFrOIEx9hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxNjozOFrOIEx9hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4Mzc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String prefix = ElasticConfig.DEFAULT.prefix();\n          \n          \n            \n                private Map<String, String> configMap;\n          \n          \n            \n                private final String prefix = ElasticConfig.DEFAULT.prefix();\n          \n          \n            \n                private final Map<String, String> configMap;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r541883780", "createdAt": "2020-12-13T09:16:38Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/KogitoElasticConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+\n+public class KogitoElasticConfig {\n+\n+    public static final String HOST_KEY = \"host\";\n+    public static final String INDEX_KEY = \"index\";\n+    public static final String STEP_KEY = \"step\";\n+    public static final String INDEX_DATE_FORMAT_KEY = \"indexDateFormat\";\n+    public static final String TIMESTAMP_FIELD_NAME_KEY = \"timestampFieldName\";\n+    public static final String AUTO_CREATE_INDEX_KEY = \"autoCreateIndex\";\n+    public static final String USERNAME_KEY = \"userName\";\n+    public static final String PASSWORD_KEY = \"password\";\n+    public static final String PIPELINE_KEY = \"pipeline\";\n+    public static final String INDEX_DATE_SEPARATOR_KEY = \"indexDateSeparator\";\n+    public static final String DOCUMENT_TYPE_KEY = \"documentType\";\n+\n+    private String prefix = ElasticConfig.DEFAULT.prefix();\n+    private Map<String, String> configMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fdb937195b12cfdfb2178229500433b7e957e4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzg3NTY5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/KogitoElasticConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxODoxN1rOIEx-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxODoxN1rOIEx-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDA0Ng==", "bodyText": "Usually set has no return value while with is for fluent interfaces. It is not mandatory but I think it improves the readability\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KogitoElasticConfig setProperty(String key, String value) {\n          \n          \n            \n                public KogitoElasticConfig withProperty(String key, String value) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r541884046", "createdAt": "2020-12-13T09:18:17Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/KogitoElasticConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+\n+public class KogitoElasticConfig {\n+\n+    public static final String HOST_KEY = \"host\";\n+    public static final String INDEX_KEY = \"index\";\n+    public static final String STEP_KEY = \"step\";\n+    public static final String INDEX_DATE_FORMAT_KEY = \"indexDateFormat\";\n+    public static final String TIMESTAMP_FIELD_NAME_KEY = \"timestampFieldName\";\n+    public static final String AUTO_CREATE_INDEX_KEY = \"autoCreateIndex\";\n+    public static final String USERNAME_KEY = \"userName\";\n+    public static final String PASSWORD_KEY = \"password\";\n+    public static final String PIPELINE_KEY = \"pipeline\";\n+    public static final String INDEX_DATE_SEPARATOR_KEY = \"indexDateSeparator\";\n+    public static final String DOCUMENT_TYPE_KEY = \"documentType\";\n+\n+    private String prefix = ElasticConfig.DEFAULT.prefix();\n+    private Map<String, String> configMap;\n+\n+    public KogitoElasticConfig() {\n+        this.configMap = new HashMap<>();\n+    }\n+\n+    public KogitoElasticConfig setProperty(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fdb937195b12cfdfb2178229500433b7e957e4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzEzMTY1OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-quarkus-addon/src/main/java/org/kie/kogito/monitoring/elastic/quarkus/QuarkusElasticRegistryProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMDo0M1rOIFLfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxMDo0M1rOIFLfFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMTk3NA==", "bodyText": "I think this is not necessary because you are already observing StartupEvent in config method", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r542301974", "createdAt": "2020-12-14T11:10:43Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-quarkus-addon/src/main/java/org/kie/kogito/monitoring/elastic/quarkus/QuarkusElasticRegistryProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.quarkus;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.runtime.Startup;\n+import io.quarkus.runtime.StartupEvent;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.monitoring.elastic.common.ElasticConfigFactory;\n+import org.kie.kogito.monitoring.elastic.common.ElasticRegistry;\n+import org.kie.kogito.monitoring.elastic.common.KogitoElasticConfig;\n+\n+@Singleton\n+@Startup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzE1NDAyOnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToxNjowOVrOIFLrtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo1NjoyN1rOIKleRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNTIwNw==", "bodyText": "I'm not sure Executors.defaultThreadFactory() is ideal with managed environment like Quarkus/Springboot. Can you please verify if there is a documented better option to obtain a ThreadFactory in similar environments?\nIn any case, please create an overloaded method to provide the instance\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void start(ElasticConfig elasticConfig) {\n          \n          \n            \n                    registry = ElasticMeterRegistry.builder(elasticConfig).build();\n          \n          \n            \n                    MonitoringRegistry.addRegistry(registry);\n          \n          \n            \n                    registry.start(Executors.defaultThreadFactory());\n          \n          \n            \n                    logger.debug(\"Micrometer elastic publisher started.\");\n          \n          \n            \n                }\n          \n          \n            \n                protected void start(ElasticConfig elasticConfig) {\n          \n          \n            \n                    start(elasticConfig, Executors.defaultThreadFactory());\n          \n          \n            \n                }    \n          \n          \n            \n                \n          \n          \n            \n                protected void start(ElasticConfig elasticConfig, ThreadFactory threadFactory) {\n          \n          \n            \n                    registry = ElasticMeterRegistry.builder(elasticConfig).build();\n          \n          \n            \n                    MonitoringRegistry.addRegistry(registry);\n          \n          \n            \n                    registry.start(threadFactory);\n          \n          \n            \n                    logger.debug(\"Micrometer elastic publisher started.\");\n          \n          \n            \n                }", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r542305207", "createdAt": "2020-12-14T11:16:09Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistry.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.concurrent.Executors;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import io.micrometer.elastic.ElasticMeterRegistry;\n+import org.kie.kogito.monitoring.core.common.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ElasticRegistry {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ElasticRegistry.class);\n+    private ElasticMeterRegistry registry;\n+\n+    protected ElasticRegistry() {\n+    }\n+\n+    protected void start(ElasticConfig elasticConfig) {\n+        registry = ElasticMeterRegistry.builder(elasticConfig).build();\n+        MonitoringRegistry.addRegistry(registry);\n+        registry.start(Executors.defaultThreadFactory());\n+        logger.debug(\"Micrometer elastic publisher started.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyMDAzMg==", "bodyText": "Hi @danielezonca , I've refactored it: for Springboot I used https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.html, but for quarkus I did not find a (clean) way to inject a ThreadFactory. I use Executors.defaultThreadFactory() for it for the time being", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r542420032", "createdAt": "2020-12-14T14:20:53Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistry.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.concurrent.Executors;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import io.micrometer.elastic.ElasticMeterRegistry;\n+import org.kie.kogito.monitoring.core.common.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ElasticRegistry {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ElasticRegistry.class);\n+    private ElasticMeterRegistry registry;\n+\n+    protected ElasticRegistry() {\n+    }\n+\n+    protected void start(ElasticConfig elasticConfig) {\n+        registry = ElasticMeterRegistry.builder(elasticConfig).build();\n+        MonitoringRegistry.addRegistry(registry);\n+        registry.start(Executors.defaultThreadFactory());\n+        logger.debug(\"Micrometer elastic publisher started.\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNTIwNw=="}, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MDYyOA==", "bodyText": "See quarkusio/quarkus#13874", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r547970628", "createdAt": "2020-12-23T13:56:27Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistry.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.concurrent.Executors;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import io.micrometer.elastic.ElasticMeterRegistry;\n+import org.kie.kogito.monitoring.core.common.MonitoringRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ElasticRegistry {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ElasticRegistry.class);\n+    private ElasticMeterRegistry registry;\n+\n+    protected ElasticRegistry() {\n+    }\n+\n+    protected void start(ElasticConfig elasticConfig) {\n+        registry = ElasticMeterRegistry.builder(elasticConfig).build();\n+        MonitoringRegistry.addRegistry(registry);\n+        registry.start(Executors.defaultThreadFactory());\n+        logger.debug(\"Micrometer elastic publisher started.\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNTIwNw=="}, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzE3MzQ5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticConfigFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToyMDo0NlrOIFL2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDoyNzo0NVrOIFTBCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwODAzMg==", "bodyText": "Two comments:\n\nnull is already the default return value of get (javadoc) so don't need getOrDefault\nDo you expect this to happen?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r542308032", "createdAt": "2020-12-14T11:20:46Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticConfigFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.Map;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+\n+public class ElasticConfigFactory {\n+\n+    private KogitoElasticConfig kogitoElasticConfig;\n+\n+    public ElasticConfigFactory() {\n+        this.kogitoElasticConfig = new KogitoElasticConfig();\n+    }\n+\n+    public ElasticConfigFactory setProperty(String key, String value) {\n+        this.kogitoElasticConfig.setProperty(key, value);\n+        return this;\n+    }\n+\n+    public ElasticConfig getElasticConfig() {\n+        Map<String, String> configMap = kogitoElasticConfig.getConfigMap();\n+        return s -> configMap.getOrDefault(s, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyNTA1Nw==", "bodyText": "Yep, this is due to the micrometer contract: https://github.com/micrometer-metrics/micrometer/blob/37360582d35947fbc4c7479886ce6ebbe6a8086a/implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java#L40 .\nThe default config map returns always null so that the default values are used. For example you can see in the Springboot impl that the default value is null\n    @Value(value = \"${kogito.addon.monitoring.elastic.indexDateFormat:#{null}}\")", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r542425057", "createdAt": "2020-12-14T14:27:29Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticConfigFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.Map;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+\n+public class ElasticConfigFactory {\n+\n+    private KogitoElasticConfig kogitoElasticConfig;\n+\n+    public ElasticConfigFactory() {\n+        this.kogitoElasticConfig = new KogitoElasticConfig();\n+    }\n+\n+    public ElasticConfigFactory setProperty(String key, String value) {\n+        this.kogitoElasticConfig.setProperty(key, value);\n+        return this;\n+    }\n+\n+    public ElasticConfig getElasticConfig() {\n+        Map<String, String> configMap = kogitoElasticConfig.getConfigMap();\n+        return s -> configMap.getOrDefault(s, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwODAzMg=="}, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyNTM1Mg==", "bodyText": "Changed to get by the way \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r542425352", "createdAt": "2020-12-14T14:27:45Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/main/java/org/kie/kogito/monitoring/elastic/common/ElasticConfigFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.Map;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+\n+public class ElasticConfigFactory {\n+\n+    private KogitoElasticConfig kogitoElasticConfig;\n+\n+    public ElasticConfigFactory() {\n+        this.kogitoElasticConfig = new KogitoElasticConfig();\n+    }\n+\n+    public ElasticConfigFactory setProperty(String key, String value) {\n+        this.kogitoElasticConfig.setProperty(key, value);\n+        return this;\n+    }\n+\n+    public ElasticConfig getElasticConfig() {\n+        Map<String, String> configMap = kogitoElasticConfig.getConfigMap();\n+        return s -> configMap.getOrDefault(s, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwODAzMg=="}, "originalCommit": {"oid": "88e55af7b7817a57e35e41a45cab1f262d7aef9e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzk5MTg3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-quarkus-addon/src/main/java/org/kie/kogito/monitoring/elastic/quarkus/QuarkusElasticRegistryProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoyNjoyNFrOIJgDdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo0NToxN1rOIKlKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzMzI2OA==", "bodyText": "No need to call super here, but up to you.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r546833268", "createdAt": "2020-12-21T17:26:24Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-quarkus-addon/src/main/java/org/kie/kogito/monitoring/elastic/quarkus/QuarkusElasticRegistryProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.quarkus;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.monitoring.elastic.common.ElasticConfigFactory;\n+import org.kie.kogito.monitoring.elastic.common.ElasticRegistry;\n+import org.kie.kogito.monitoring.elastic.common.KogitoElasticConfig;\n+\n+@Singleton\n+public class QuarkusElasticRegistryProvider extends ElasticRegistry {\n+\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.host\")\n+    public Optional<String> elasticHost;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.index\")\n+    public Optional<String> index;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.step\")\n+    public Optional<String> step;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.indexDateFormat\")\n+    public Optional<String> indexDateFormat;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.timestampFieldName\")\n+    public Optional<String> timestampFieldName;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.autoCreateIndex\")\n+    public Optional<String> autoCreateIndex;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.userName\")\n+    public Optional<String> userName;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.password\")\n+    public Optional<String> password;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.pipeline\")\n+    public Optional<String> pipeline;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.indexDateSeparator\")\n+    public Optional<String> indexDateSeparator;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.documentType\")\n+    public Optional<String> documentType;\n+\n+    public void config(@Observes StartupEvent event) {\n+        ElasticConfigFactory elasticConfigFactory = new ElasticConfigFactory();\n+        elasticHost.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.HOST_KEY, x));\n+        index.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_KEY, x));\n+        step.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.STEP_KEY, x));\n+        indexDateFormat.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_FORMAT_KEY, x));\n+        timestampFieldName.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, x));\n+        autoCreateIndex.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.AUTO_CREATE_INDEX_KEY, x));\n+        userName.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.USERNAME_KEY, x));\n+        password.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.PASSWORD_KEY, x));\n+        pipeline.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.PIPELINE_KEY, x));\n+        indexDateSeparator.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, x));\n+        documentType.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, x));\n+        super.start(elasticConfigFactory.getElasticConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk2NTU4OA==", "bodyText": "\ud83d\udc4d  I'd keep it if it's ok for you", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r547965588", "createdAt": "2020-12-23T13:45:17Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-quarkus-addon/src/main/java/org/kie/kogito/monitoring/elastic/quarkus/QuarkusElasticRegistryProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.quarkus;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.event.Observes;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.monitoring.elastic.common.ElasticConfigFactory;\n+import org.kie.kogito.monitoring.elastic.common.ElasticRegistry;\n+import org.kie.kogito.monitoring.elastic.common.KogitoElasticConfig;\n+\n+@Singleton\n+public class QuarkusElasticRegistryProvider extends ElasticRegistry {\n+\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.host\")\n+    public Optional<String> elasticHost;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.index\")\n+    public Optional<String> index;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.step\")\n+    public Optional<String> step;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.indexDateFormat\")\n+    public Optional<String> indexDateFormat;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.timestampFieldName\")\n+    public Optional<String> timestampFieldName;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.autoCreateIndex\")\n+    public Optional<String> autoCreateIndex;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.userName\")\n+    public Optional<String> userName;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.password\")\n+    public Optional<String> password;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.pipeline\")\n+    public Optional<String> pipeline;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.indexDateSeparator\")\n+    public Optional<String> indexDateSeparator;\n+    @ConfigProperty(name = \"kogito.addon.monitoring.elastic.documentType\")\n+    public Optional<String> documentType;\n+\n+    public void config(@Observes StartupEvent event) {\n+        ElasticConfigFactory elasticConfigFactory = new ElasticConfigFactory();\n+        elasticHost.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.HOST_KEY, x));\n+        index.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_KEY, x));\n+        step.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.STEP_KEY, x));\n+        indexDateFormat.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_FORMAT_KEY, x));\n+        timestampFieldName.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, x));\n+        autoCreateIndex.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.AUTO_CREATE_INDEX_KEY, x));\n+        userName.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.USERNAME_KEY, x));\n+        password.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.PASSWORD_KEY, x));\n+        pipeline.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.PIPELINE_KEY, x));\n+        indexDateSeparator.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, x));\n+        documentType.ifPresent(x -> elasticConfigFactory.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, x));\n+        super.start(elasticConfigFactory.getElasticConfig());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzMzI2OA=="}, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzk5NDA4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-springboot-addon/src/main/java/org/kie/kogito/monitoring/elastic/springboot/SpringbootElasticRegistryProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoyNjo1NlrOIJgEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzo0NToyMFrOIKlKtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzMzYwMQ==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r546833601", "createdAt": "2020-12-21T17:26:56Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-springboot-addon/src/main/java/org/kie/kogito/monitoring/elastic/springboot/SpringbootElasticRegistryProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.springboot;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.monitoring.elastic.common.ElasticConfigFactory;\n+import org.kie.kogito.monitoring.elastic.common.ElasticRegistry;\n+import org.kie.kogito.monitoring.elastic.common.KogitoElasticConfig;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringbootElasticRegistryProvider extends ElasticRegistry {\n+\n+    @Value(value = \"${kogito.addon.monitoring.elastic.host:#{null}}\")\n+    public String elasticHost;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.index:#{null}}\")\n+    public String index;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.step:#{null}}\")\n+    public String step;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.indexDateFormat:#{null}}\")\n+    public String indexDateFormat;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.timestampFieldName:#{null}}\")\n+    public String timestampFieldName;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.autoCreateIndex:#{null}}\")\n+    public String autoCreateIndex;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.userName:#{null}}\")\n+    public String userName;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.password:#{null}}\")\n+    public String password;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.pipeline:#{null}}\")\n+    public String pipeline;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.indexDateSeparator:#{null}}\")\n+    public String indexDateSeparator;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.documentType:#{null}}\")\n+    public String documentType;\n+\n+    @Autowired\n+    ThreadPoolTaskExecutor executor;\n+\n+    @PostConstruct\n+    protected void onStart() {\n+        ElasticConfigFactory elasticConfigFactory = new ElasticConfigFactory();\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.HOST_KEY, elasticHost);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_KEY, index);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.STEP_KEY, step);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_FORMAT_KEY, indexDateFormat);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, timestampFieldName);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.AUTO_CREATE_INDEX_KEY, autoCreateIndex);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.USERNAME_KEY, userName);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.PASSWORD_KEY, password);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.PIPELINE_KEY, pipeline);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, indexDateSeparator);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, documentType);\n+        super.start(elasticConfigFactory.getElasticConfig(), executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk2NTYyMg==", "bodyText": "\ud83d\udc4d  I'd keep it if it's ok for you", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r547965622", "createdAt": "2020-12-23T13:45:20Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-springboot-addon/src/main/java/org/kie/kogito/monitoring/elastic/springboot/SpringbootElasticRegistryProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.springboot;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.monitoring.elastic.common.ElasticConfigFactory;\n+import org.kie.kogito.monitoring.elastic.common.ElasticRegistry;\n+import org.kie.kogito.monitoring.elastic.common.KogitoElasticConfig;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringbootElasticRegistryProvider extends ElasticRegistry {\n+\n+    @Value(value = \"${kogito.addon.monitoring.elastic.host:#{null}}\")\n+    public String elasticHost;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.index:#{null}}\")\n+    public String index;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.step:#{null}}\")\n+    public String step;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.indexDateFormat:#{null}}\")\n+    public String indexDateFormat;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.timestampFieldName:#{null}}\")\n+    public String timestampFieldName;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.autoCreateIndex:#{null}}\")\n+    public String autoCreateIndex;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.userName:#{null}}\")\n+    public String userName;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.password:#{null}}\")\n+    public String password;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.pipeline:#{null}}\")\n+    public String pipeline;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.indexDateSeparator:#{null}}\")\n+    public String indexDateSeparator;\n+    @Value(value = \"${kogito.addon.monitoring.elastic.documentType:#{null}}\")\n+    public String documentType;\n+\n+    @Autowired\n+    ThreadPoolTaskExecutor executor;\n+\n+    @PostConstruct\n+    protected void onStart() {\n+        ElasticConfigFactory elasticConfigFactory = new ElasticConfigFactory();\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.HOST_KEY, elasticHost);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_KEY, index);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.STEP_KEY, step);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_FORMAT_KEY, indexDateFormat);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, timestampFieldName);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.AUTO_CREATE_INDEX_KEY, autoCreateIndex);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.USERNAME_KEY, userName);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.PASSWORD_KEY, password);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.PIPELINE_KEY, pipeline);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, indexDateSeparator);\n+        elasticConfigFactory.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, documentType);\n+        super.start(elasticConfigFactory.getElasticConfig(), executor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzMzYwMQ=="}, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODAxNzgxOnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/test/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzozNDoyMFrOIJgSpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0OTozOVrOIN5CBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzNzE1OQ==", "bodyText": "I think here you can just return countDownLatchMap.computeIfPresent(...) as it directly returns the value associated with the key after the remapping function is called or null if the value is not there or the remapping function returned null, so it was removed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r546837159", "createdAt": "2020-12-21T17:34:20Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/test/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistryTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class ElasticRegistryTest {\n+\n+    @Test\n+    public void testElasticMicrometerIsUsingOurProperties() throws InterruptedException {\n+        ElasticRegistry elasticRegistry = new ElasticRegistry();\n+\n+        KogitoElasticConfig kogitoElasticConfig = new KogitoElasticConfig();\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.HOST_KEY, \"http://mylocalhost:8080\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.INDEX_KEY, \"myIndex\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.STEP_KEY, \"1s\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, \"myTimestampName\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.USERNAME_KEY, \"pippo\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.PASSWORD_KEY, \"pluto\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.PIPELINE_KEY, \"mypipe\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, \"/\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, \"doc\");\n+\n+        Map<String, String> configMap = kogitoElasticConfig.getConfigMap();\n+        Map<String, CountDownLatch> countDownLatchMap = new HashMap<>();\n+        configMap.keySet().forEach(x -> countDownLatchMap.put(x, new CountDownLatch(1)));\n+\n+        ElasticConfig elasticConfig = s -> {\n+            countDownLatchMap.computeIfPresent(s, (k, v) -> {\n+                v.countDown();\n+                return v;\n+            });\n+            return configMap.getOrDefault(s, null);\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk2OTgyOQ==", "bodyText": "Hi @MarianMacik , configMap contains the key-value configuration pairs and countDownLatchMap maps the key to a CountDownLatch. countDownLatchMap.computeIfPresent(...) returns a CountDownLatch and atm the config values have to be fetched from the configMap after the latch is decremented.\nLet me know if we can move forward with the current implementation!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r547969829", "createdAt": "2020-12-23T13:54:46Z", "author": {"login": "r00ta"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/test/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistryTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class ElasticRegistryTest {\n+\n+    @Test\n+    public void testElasticMicrometerIsUsingOurProperties() throws InterruptedException {\n+        ElasticRegistry elasticRegistry = new ElasticRegistry();\n+\n+        KogitoElasticConfig kogitoElasticConfig = new KogitoElasticConfig();\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.HOST_KEY, \"http://mylocalhost:8080\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.INDEX_KEY, \"myIndex\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.STEP_KEY, \"1s\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, \"myTimestampName\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.USERNAME_KEY, \"pippo\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.PASSWORD_KEY, \"pluto\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.PIPELINE_KEY, \"mypipe\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, \"/\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, \"doc\");\n+\n+        Map<String, String> configMap = kogitoElasticConfig.getConfigMap();\n+        Map<String, CountDownLatch> countDownLatchMap = new HashMap<>();\n+        configMap.keySet().forEach(x -> countDownLatchMap.put(x, new CountDownLatch(1)));\n+\n+        ElasticConfig elasticConfig = s -> {\n+            countDownLatchMap.computeIfPresent(s, (k, v) -> {\n+                v.countDown();\n+                return v;\n+            });\n+            return configMap.getOrDefault(s, null);\n+        };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzNzE1OQ=="}, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjgwNA==", "bodyText": "Hi, I overlooked that these are 2 different maps, sorry for that. It is fine to move forward with this.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/894#discussion_r551436804", "createdAt": "2021-01-04T16:49:39Z", "author": {"login": "MarianMacik"}, "path": "addons/monitoring/monitoring-elastic/monitoring-elastic-common/src/test/java/org/kie/kogito/monitoring/elastic/common/ElasticRegistryTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.elastic.common;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.micrometer.elastic.ElasticConfig;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class ElasticRegistryTest {\n+\n+    @Test\n+    public void testElasticMicrometerIsUsingOurProperties() throws InterruptedException {\n+        ElasticRegistry elasticRegistry = new ElasticRegistry();\n+\n+        KogitoElasticConfig kogitoElasticConfig = new KogitoElasticConfig();\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.HOST_KEY, \"http://mylocalhost:8080\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.INDEX_KEY, \"myIndex\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.STEP_KEY, \"1s\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.TIMESTAMP_FIELD_NAME_KEY, \"myTimestampName\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.USERNAME_KEY, \"pippo\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.PASSWORD_KEY, \"pluto\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.PIPELINE_KEY, \"mypipe\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.INDEX_DATE_SEPARATOR_KEY, \"/\");\n+        kogitoElasticConfig.withProperty(KogitoElasticConfig.DOCUMENT_TYPE_KEY, \"doc\");\n+\n+        Map<String, String> configMap = kogitoElasticConfig.getConfigMap();\n+        Map<String, CountDownLatch> countDownLatchMap = new HashMap<>();\n+        configMap.keySet().forEach(x -> countDownLatchMap.put(x, new CountDownLatch(1)));\n+\n+        ElasticConfig elasticConfig = s -> {\n+            countDownLatchMap.computeIfPresent(s, (k, v) -> {\n+                v.countDown();\n+                return v;\n+            });\n+            return configMap.getOrDefault(s, null);\n+        };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzNzE1OQ=="}, "originalCommit": {"oid": "1b64ca3a9933d310621d7351635f395c0418cdd6"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4702, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}