{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTIyNTk4", "number": 439, "title": "[0.9.x] KOGITO-1756 + KOGITO-1779 - Support for Parallel State and fix for SubFlow state support", "bodyText": "", "createdAt": "2020-04-10T14:06:40Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439", "merged": true, "mergeCommit": {"oid": "16e966e71b5121aa5a2dc73160f2a6a3cf4f832d"}, "closed": true, "closedAt": "2020-04-15T05:06:23Z", "author": {"login": "tsurdilo"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWRlqCAH2gAyNDAxOTIyNTk4OjkwZTMxNTNlYmFmM2RjYjQyNmQ0NTcwNmE4MTMyZTU2ZGRmMDlhYmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXpTQigFqTM5MzI2MDU1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "90e3153ebaf3dcb426d45706a8132e56ddf09abf", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/90e3153ebaf3dcb426d45706a8132e56ddf09abf", "committedDate": "2020-04-10T14:01:56Z", "message": "Fix for SubFlow data inputs/outputs + initial parallel state work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a4b5d3ad2cecc93a21d82ba68670bf7e2629d3", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/88a4b5d3ad2cecc93a21d82ba68670bf7e2629d3", "committedDate": "2020-04-10T14:02:12Z", "message": "KOGITO-1756 + KOGITO-1779 - Support for Parallel State and fix for SubFlow state support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e350fc5ff5027f4b5592845852417fe3a824a2f2", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e350fc5ff5027f4b5592845852417fe3a824a2f2", "committedDate": "2020-04-10T14:02:26Z", "message": "removed unused method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTU0MTA1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#pullrequestreview-392154105", "createdAt": "2020-04-13T13:47:48Z", "commit": {"oid": "e350fc5ff5027f4b5592845852417fe3a824a2f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ea7f39e4962df245c6108ea06a56517e98f2ad53", "committedDate": "2020-04-13T17:10:25Z", "message": "sonar code smell fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTM4OTgy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#pullrequestreview-392538982", "createdAt": "2020-04-14T01:12:42Z", "commit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjcyMDA1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#pullrequestreview-392672005", "createdAt": "2020-04-14T07:35:29Z", "commit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjk1ODk0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#pullrequestreview-392695894", "createdAt": "2020-04-14T08:09:13Z", "commit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTAwMzcw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#pullrequestreview-392900370", "createdAt": "2020-04-14T12:58:41Z", "commit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1ODo0MVrOGFNYew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzowODo0MFrOGFNx8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNTMyMw==", "bodyText": "Please fix the formatting in the whole file, especially for if and for commands.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#discussion_r408115323", "createdAt": "2020-04-14T12:58:41Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "diffHunk": "@@ -199,28 +216,64 @@ public Process parseWorkFlow(Reader workflowFile) throws JsonProcessingException\n                     factory.connect(callActivityNode.getId(), workflowEndNodes.get(state.getName()).getId(), callActivityNode.getId() + \"_\" + workflowEndNodes.get(state.getName()).getId(), process);\n                 }\n \n-                nameToNodeId.put(state.getName(), callActivityNode.getId());\n+                Map<String, Long> startEndMap = new HashMap<>();\n+                startEndMap.put(NODETOID_START, callActivityNode.getId());\n+                startEndMap.put(NODETOID_END, callActivityNode.getId());\n+                nameToNodeId.put(state.getName(), startEndMap);\n             }\n \n             if(state.getType().equals(Type.SWITCH)) {\n                 SwitchState switchState = (SwitchState) state;\n \n-                Split splitNode = factory.xorSplitNode(idCounter.getAndIncrement(), switchState.getName(), process);\n+                Split splitNode = factory.splitNode(idCounter.getAndIncrement(), switchState.getName(), Split.TYPE_XOR, process);\n \n                 if(state.getStart() != null) {\n                     factory.connect(workflowStartNode.getId(), splitNode.getId(), workflowStartNode.getId() + \"_\" + splitNode.getId(), process);\n                 }\n                 // switch states cannot be end states\n-                nameToNodeId.put(state.getName(), splitNode.getId());\n+\n+                Map<String, Long> startEndMap = new HashMap<>();\n+                startEndMap.put(NODETOID_START, splitNode.getId());\n+                startEndMap.put(NODETOID_END, splitNode.getId());\n+                nameToNodeId.put(state.getName(), startEndMap);\n+            }\n+\n+            if(state.getType().equals(Type.PARALLEL)) {\n+                ParallelState parallelState = (ParallelState) state;\n+\n+                Split parallelSplit = factory.splitNode(idCounter.getAndIncrement(), parallelState.getName() + NODE_START_NAME, Split.TYPE_AND, process);\n+                Join parallelJoin = factory.joinNode(idCounter.getAndIncrement(), parallelState.getName() + NODE_END_NAME, Join.TYPE_AND, process);\n+\n+                for(Branch branch : parallelState.getBranches()) {\n+                    SubflowState subflowState = (SubflowState) branch.getStates().get(0);\n+                    SubProcessNode callActivityNode = factory.callActivity(idCounter.getAndIncrement(), subflowState.getName(), subflowState.getWorkflowId(), subflowState.isWaitForCompletion(), process);\n+\n+                    factory.connect(parallelSplit.getId(), callActivityNode.getId(), parallelSplit.getId() + \"_\" + callActivityNode.getId(), process);\n+                    factory.connect(callActivityNode.getId(), parallelJoin.getId(), callActivityNode.getId() + \"_\" + parallelJoin.getId(), process);\n+\n+                }\n+\n+                if(state.getStart() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNzkyNw==", "bodyText": "Probably would be better to omit it as if the value of the DEFAULT_WORKFLOW_VAR is changed, this comment becomes misleading.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#discussion_r408117927", "createdAt": "2020-04-14T13:02:41Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -174,6 +175,20 @@ public SubProcessNode callActivity(long id, String name, String calledId, boolea\n         subProcessNode.setName(name);\n         subProcessNode.setProcessId(calledId);\n         subProcessNode.setWaitForCompletion(waitForCompletion);\n+        subProcessNode.setIndependent(true);\n+\n+        VariableScope variableScope = new VariableScope();\n+        subProcessNode.addContext(variableScope);\n+        subProcessNode.setDefaultContext(variableScope);\n+\n+        Map<String, String> inputOtuputTypes = new HashMap<>();\n+        inputOtuputTypes.put(DEFAULT_WORKFLOW_VAR, JSON_NODE);\n+        subProcessNode.setMetaData(\"BPMN.InputTypes\", inputOtuputTypes);\n+        subProcessNode.setMetaData(\"BPMN.OutputTypes\", inputOtuputTypes);\n+\n+        // parent and sub processes have process var \"workflowdata\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExODU4MA==", "bodyText": "Why do we need this here? Can we just put here a link to the documentation or name of the class where this is specified? This quickly can become obsolete once the code is changed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#discussion_r408118580", "createdAt": "2020-04-14T13:03:42Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -269,23 +284,45 @@ public CompositeContextNode subProcessNode(long id, String name, NodeContainer n\n         subProcessNode.addContext(variableScope);\n         subProcessNode.setDefaultContext(variableScope);\n         subProcessNode.setAutoComplete(true);\n-\n         nodeContainer.addNode(subProcessNode);\n \n         return subProcessNode;\n     }\n \n-    public Split xorSplitNode(long id, String name, NodeContainer nodeContainer) {\n+\n+    public Split splitNode(long id, String name, int type, NodeContainer nodeContainer) {\n+        // 0 = TYPE_UNDEFINED\n+        // 1 = TYPE_AND\n+        // 2 = TYPE_XOR\n+        // 3 = TYPE_OR\n+        // 4 = TYPE_XAND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExODY1OA==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#discussion_r408118658", "createdAt": "2020-04-14T13:03:51Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -269,23 +284,45 @@ public CompositeContextNode subProcessNode(long id, String name, NodeContainer n\n         subProcessNode.addContext(variableScope);\n         subProcessNode.setDefaultContext(variableScope);\n         subProcessNode.setAutoComplete(true);\n-\n         nodeContainer.addNode(subProcessNode);\n \n         return subProcessNode;\n     }\n \n-    public Split xorSplitNode(long id, String name, NodeContainer nodeContainer) {\n+\n+    public Split splitNode(long id, String name, int type, NodeContainer nodeContainer) {\n+        // 0 = TYPE_UNDEFINED\n+        // 1 = TYPE_AND\n+        // 2 = TYPE_XOR\n+        // 3 = TYPE_OR\n+        // 4 = TYPE_XAND\n         Split split = new Split();\n         split.setId(id);\n         split.setName(name);\n-        split.setType(2);\n-        split.setMetaData(\"UniqueId\", Long.toString(id));\n+        split.setType(type);\n+        split.setMetaData(UNIQUE_ID_PARAM, Long.toString(id));\n \n         nodeContainer.addNode(split);\n         return split;\n     }\n \n+    public Join joinNode(long id, String name, int type, NodeContainer nodeContainer) {\n+        // 0 = TYPE_UNDEFINED\n+        // 1 = TYPE_AND\n+        // 2 = TYPE_XOR\n+        // 3 = TYPE_DISCRIMINATOR\n+        // 4 = TYPE_N_OF_M\n+        // 5 = TYPE_OR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMTg0Mw==", "bodyText": "Can you please format this better and probably include a reason why it is not supported, i.e. just a subset of parallel states is supported etc.?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#discussion_r408121843", "createdAt": "2020-04-14T13:08:40Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -89,14 +92,39 @@ public static boolean includesSupportedStates(Workflow workflow) {\n                     && !state.getType().equals(DefaultState.Type.DELAY)\n                     && !state.getType().equals(DefaultState.Type.SUBFLOW)\n                     && !state.getType().equals(DefaultState.Type.RELAY)\n-                    && !state.getType().equals(DefaultState.Type.SWITCH)) {\n+                    && !state.getType().equals(DefaultState.Type.SWITCH)\n+                    && !state.getType().equals(DefaultState.Type.PARALLEL)) {\n                 return false;\n             }\n+\n+            if(state.getType().equals(DefaultState.Type.PARALLEL)) {\n+                if(!supportedParallelState((ParallelState) state)) {\n+                    LOGGER.warn(\"unsupported parallel state\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7f39e4962df245c6108ea06a56517e98f2ad53"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f6ad51135b12f81db597ec822986b5a0aa6961f", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6f6ad51135b12f81db597ec822986b5a0aa6961f", "committedDate": "2020-04-14T14:59:34Z", "message": "formatting updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjYwNTU2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/439#pullrequestreview-393260556", "createdAt": "2020-04-14T20:13:29Z", "commit": {"oid": "6f6ad51135b12f81db597ec822986b5a0aa6961f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3639, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}