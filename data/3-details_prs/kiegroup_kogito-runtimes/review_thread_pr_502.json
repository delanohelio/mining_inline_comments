{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjczMjYx", "number": 502, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1MTo0MFrOD8B5nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozNzozOFrOD-_h7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcyMjg1OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/api/runtime/rule/RuleRuntime.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1MTo0MFrOGUt5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNzowOVrOGUz0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NjY1Nw==", "bodyText": "why is this needed? if we make getAgenda() return null in the dummy implementation then you can just null check getAgenda(). Remember we want to get rid of the dummy implementation.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424376657", "createdAt": "2020-05-13T11:51:40Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/rule/RuleRuntime.java", "diffHunk": "@@ -45,6 +45,13 @@\n      */\n     Agenda getAgenda();\n \n+    /**\n+     * @return true if the Runtime supports the Agenda\n+     */\n+    default boolean hasAgenda() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MzYwNQ==", "bodyText": "good point, +1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424473605", "createdAt": "2020-05-13T14:17:09Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/rule/RuleRuntime.java", "diffHunk": "@@ -45,6 +45,13 @@\n      */\n     Agenda getAgenda();\n \n+    /**\n+     * @return true if the Runtime supports the Agenda\n+     */\n+    default boolean hasAgenda() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NjY1Nw=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjczMDA5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1Mzo1NVrOGUt94g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1Mzo1NVrOGUt94g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzgyNg==", "bodyText": "memo: I wonder if we should keep these overrides in Kogito", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424377826", "createdAt": "2020-05-13T11:53:55Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -142,7 +144,7 @@ public void addNodeInstance(final NodeInstance nodeInstance) {\n \n     @Override\n     public int getLevelForNode(String uniqueID) {\n-        if (\"true\".equalsIgnoreCase(System.getProperty(\"jbpm.loop.level.disabled\"))) {\n+        if (Boolean.parseBoolean(System.getProperty(\"jbpm.loop.level.disabled\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjczODc5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1NjozNlrOGUuDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNDozNFrOGU2Frw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3OTI0Ng==", "bodyText": "I can see now where rules are used, and we should probably write a short spec for this and see how we can reproduce it in the best way. Rule flow groups should be considered deprecated for Drools. Maybe we can write a \"System RuleUnit\" in the libary if these rules are static, or we could synthesize a rule unit to be used internally.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424379246", "createdAt": "2020-05-13T11:56:36Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        if(getProcessInstance().getKnowledgeRuntime().hasAgenda()) {\n+            String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n+                    + \"-\" + getMilestoneNode().getUniqueId();\n+            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n+                    .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMDg5NQ==", "bodyText": "I have filed the following JIRA https://issues.redhat.com/browse/KOGITO-2168", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424510895", "createdAt": "2020-05-13T15:04:34Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        if(getProcessInstance().getKnowledgeRuntime().hasAgenda()) {\n+            String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n+                    + \"-\" + getMilestoneNode().getUniqueId();\n+            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n+                    .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3OTI0Ng=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzM2ODUyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNzowM1rOGU0SDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNzowM1rOGU0SDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTI5Mg==", "bodyText": "suggestion\n.filter(nodeInstance -> Objects.equals(nodeInstance.getId(), nodeInstanceId))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424481292", "createdAt": "2020-05-13T14:27:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -193,22 +195,15 @@ public void removeNodeInstance(final NodeInstance nodeInstance) {\n \n     @Override\n     public NodeInstance getNodeInstance(String nodeInstanceId) {\n-        for (NodeInstance nodeInstance : nodeInstances) {\n-            if (nodeInstance.getId().equals(nodeInstanceId)) {\n-                return nodeInstance;\n-            }\n-        }\n-        return null;\n+        return getNodeInstance(nodeInstanceId, false);\n     }\n \n     @Override\n     public NodeInstance getNodeInstance(String nodeInstanceId, boolean recursive) {\n-        for (NodeInstance nodeInstance : getNodeInstances(recursive)) {\n-            if (nodeInstance.getId().equals(nodeInstanceId)) {\n-                return nodeInstance;\n-            }\n-        }\n-        return null;\n+        return getNodeInstances(recursive).stream()\n+                .filter(nodeInstance -> nodeInstance.getId().equals(nodeInstanceId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzQ4MTU0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1MDozNVrOGU1aSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozMjo0N1rOGVRppQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5OTc4Nw==", "bodyText": "trying to simplify this block... just sugestion:\nOptional.ofNullable(getProcessInstance())\n                .map(WorkflowProcessInstance::getKnowledgeRuntime)\n                .map(InternalKnowledgeRuntime::getAgenda)                \n                .filter(InternalAgenda.class::isInstance)\n                .map(InternalAgenda.class::cast)\n                .map(agenda -> {\n                    String rule =\n                            \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId() + \"-\" + getMilestoneNode().getUniqueId();\n                    return agenda.isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n                })\n                .orElse(true);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424499787", "createdAt": "2020-05-13T14:50:35Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNDI5MQ==", "bodyText": "Although your suggestion is fancier I believe the existing code is easier to understand and maintain.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424704291", "createdAt": "2020-05-13T20:14:15Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5OTc4Nw=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNzM5NA==", "bodyText": "Sure, no problem, go with it, as I said just a suggestion a matter of taste, I really like and think a more functional approach is cleaner :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424717394", "createdAt": "2020-05-13T20:39:46Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5OTc4Nw=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MjQ2OQ==", "bodyText": "either way, this is just a refactoring of the existing code (@ruromero only added the null check around it and reformatted a bit); it doesn't really matter because I am pretty sure all this will have to be nuked in favor of rule units \ud83e\udd14", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424962469", "createdAt": "2020-05-14T08:32:47Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5OTc4Nw=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzUwNzY4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1NTo1MFrOGU1q9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozOTo1OVrOGVCssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNDA1Mg==", "bodyText": "Are the castings safe? WorkflowProcess, WorkflowProcessInstance, Is it worth checking instanceof before casting?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424504052", "createdAt": "2020-05-13T14:55:50Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNjU5OQ==", "bodyText": "If the legacyProcessInstance.getProcess() is always returning what is generated by the legacyProcess() method coming from the codegen I'd say the only possibility is that it is a RuleFlowProcess which extends WorkflowProcessImpl", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424706599", "createdAt": "2020-05-13T20:18:34Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNDA1Mg=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNzQ5MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424717491", "createdAt": "2020-05-13T20:39:59Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNDA1Mg=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODM1MzA1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMTozM1rOGXELFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzowMjoyMlrOGXfUfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw==", "bodyText": "So Kogito process instance is completed, but legacy process instance is still active? Is that right? If so, why is it like that? I understand that cases are basically never complete as we discussed it on Zulip, but this can be considered as an inconsistency - one status is completed, the second one is active.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r426838807", "createdAt": "2020-05-18T19:11:33Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MTcyNA==", "bodyText": "Also btw - this feature is already present in 7.x? I think that we can there only close or destroy a case instance, right? We cannot explicitly complete it...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r426841724", "createdAt": "2020-05-18T19:17:31Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw=="}, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MzkyMA==", "bodyText": "Ad-hoc processes, i.e. cases, can't autocomplete unless there is a terminate end node but this is not common in cases where knowledge workers might want to add/update information in the case or trigger discretionary tasks. That means there wasn't a mechanism to close a case.\nRegarding the naming. In 7.x you could close a case but here we are not explicitly using a Case model naming. We're still talking about processes and processes from the ACTIVE state move to the COMPLETED state, thus this action. Do you agree?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r426863920", "createdAt": "2020-05-18T20:03:14Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw=="}, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MTQ2Mg==", "bodyText": "I agree, but somewhat I missed the explanation why the legacy process is still being kept ACTIVE :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r427151462", "createdAt": "2020-05-19T09:13:07Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw=="}, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4MzU4MQ==", "bodyText": "I get your point and that had to be aligned indeed. Thanks for your thorough review.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r427283581", "createdAt": "2020-05-19T13:02:22Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw=="}, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY3NDUzOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozOTozN1rOGYpSSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1ODozNlrOGYx0Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTQzMg==", "bodyText": "from a perspective that processes will have at least some degree of structure, would it still make sense to allow it to be completed at any time? Thinking if we should first try to go for having a minial path that demonstrates how the process will be completed, not so much like a case close action. @ruromero @krisv wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428495432", "createdAt": "2020-05-21T07:39:37Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -65,7 +65,12 @@\n      * @param referenceId optional reference id that points to a another  component triggering this instance\n      */\n     void startFrom(String nodeId, String referenceId);\n-    \n+\n+    /**\n+     * Completes a dynamic process that is in the ACTIVE state.\n+     */\n+    void complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxNjEzMQ==", "bodyText": "I think this is something we need at this point and we can adapt later on. Dynamic processes need a way to be completed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428516131", "createdAt": "2020-05-21T08:26:51Z", "author": {"login": "ruromero"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -65,7 +65,12 @@\n      * @param referenceId optional reference id that points to a another  component triggering this instance\n      */\n     void startFrom(String nodeId, String referenceId);\n-    \n+\n+    /**\n+     * Completes a dynamic process that is in the ACTIVE state.\n+     */\n+    void complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTQzMg=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxODQ1Ng==", "bodyText": "@ruromero sure, in the example you created the test can be completed once the milestone is achieved, we dont necessarly want to manually have to call complete in a process. We're trying to give some flexibility but not complete freedom, to me the process needs to to handle a expected path to end, otherwise people can still abort the process instance.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428618456", "createdAt": "2020-05-21T12:22:13Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -65,7 +65,12 @@\n      * @param referenceId optional reference id that points to a another  component triggering this instance\n      */\n     void startFrom(String nodeId, String referenceId);\n-    \n+\n+    /**\n+     * Completes a dynamic process that is in the ACTIVE state.\n+     */\n+    void complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTQzMg=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNTE1MQ==", "bodyText": "Complete only affects dynamic processes that are active. How do you want to limit it's usage? By only allow processes without any active node to be completed for example?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428635151", "createdAt": "2020-05-21T12:58:36Z", "author": {"login": "ruromero"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -65,7 +65,12 @@\n      * @param referenceId optional reference id that points to a another  component triggering this instance\n      */\n     void startFrom(String nodeId, String referenceId);\n-    \n+\n+    /**\n+     * Completes a dynamic process that is in the ACTIVE state.\n+     */\n+    void complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTQzMg=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY4NzA5OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo0NDoxM1rOGYpaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1NTowNFrOGYztSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NzQxNQ==", "bodyText": "@ruromero is there any point for us to add this if we wont actually use this approach with the internal agenda? I guess we should simply set active to true.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428497415", "createdAt": "2020-05-21T07:44:13Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,14 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNTk1NA==", "bodyText": "I didn't want to remove the old functionality because other tests still rely on the agenda. Until we don't provide a replacement for conditions I prefer to keep it this way.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428505954", "createdAt": "2020-05-21T08:03:42Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,14 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NzQxNQ=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxOTI2Mw==", "bodyText": "so maybe we should remove the old tests as well :) My concern is to bring things that we wont/dont need, removing later is way more complicated to assess.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428619263", "createdAt": "2020-05-21T12:23:58Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,14 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NzQxNQ=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNjYzNg==", "bodyText": "I'm always up for removing stuff. I just didn't dare to do it without a second opinion.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428636636", "createdAt": "2020-05-21T13:01:38Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,14 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NzQxNQ=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2NjE4NQ==", "bodyText": "sorry, wrong gitlog :P looks fine as is", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428666185", "createdAt": "2020-05-21T13:55:04Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,14 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NzQxNQ=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY5MjQyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo0NjoyNFrOGYpdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1NjowNVrOGYxvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5ODMwMw==", "bodyText": "@ruromero should the actual milestone state be checked here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428498303", "createdAt": "2020-05-21T07:46:24Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMzkyNw==", "bodyText": "Check my latest changes", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428633927", "createdAt": "2020-05-21T12:56:05Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5ODMwMw=="}, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTQ1MTg4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoyNTo1OVrOGYw5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzoxNjoxNFrOGYyWbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMDEzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ProcessInstance<?> processInstance = p.createInstance(m);\n          \n          \n            \n                    ProcessInstance<?> processInstance = p.createInstance(p.createInstance(p.createModel()));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428620137", "createdAt": "2020-05-21T12:25:59Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0Mzk1MA==", "bodyText": "Not exactly this but I see your point", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428643950", "createdAt": "2020-05-21T13:16:14Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMDEzNw=="}, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTQ2NDg2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjozMDozNFrOGYxBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzoxMTo0MVrOGYyNUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjE4MA==", "bodyText": "I think you can simplify the status check by doing:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertState(processInstance, ProcessInstance.STATE_PENDING);\n          \n          \n            \n            assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_PENDING);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428622180", "createdAt": "2020-05-21T12:30:34Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MTYxOQ==", "bodyText": "I want to make sure the state in the processInstance and in the legacyProcessInstance are in sync", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428641619", "createdAt": "2020-05-21T13:11:41Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjE4MA=="}, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTQ2OTUwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjozMjoxM1rOGYxERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo1MDozMFrOGY6rEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjkxOA==", "bodyText": "Im not sure what's the point in regards to testing milestones to call complete here, I would recommend removing it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428622918", "createdAt": "2020-05-21T12:32:13Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+        processInstance.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4MDMwNA==", "bodyText": "As discussed I have removed the complete method. A terminate end node must be present in order for the dynamic process to complete", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428780304", "createdAt": "2020-05-21T16:50:30Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+        processInstance.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjkxOA=="}, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTU3MTUzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowNzo0NFrOGYyFew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo0OTo1NFrOGY6pgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzOTYxMQ==", "bodyText": "@ruromero I guess the idea would be to add a method into RuleFlowProcessInstance with a list of miliestones, that then we could check using a status like MilestoneStatus from v7. No need to publish it in the ProcessInstance object for now.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428639611", "createdAt": "2020-05-21T13:07:44Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+        processInstance.complete();\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+\n+        processInstance.start();\n+        assertState(processInstance, ProcessInstance.STATE_ACTIVE);\n+        \n+        RuleFlowProcessInstance legacyProcessInstance = (RuleFlowProcessInstance)((AbstractProcessInstance<?>) processInstance).legacyProcessInstance;\n+        assertThat(legacyProcessInstance.getNodeInstances()).isEmpty();\n+        assertThat(legacyProcessInstance.getNodeIdInError()).isNullOrEmpty();\n+        Optional<String> milestoneId = Stream.of(legacyProcessInstance.getNodeContainer().getNodes()).filter(node -> node.getName().equals(\"Milestone1\")).map(n -> (String)n.getMetaData().get(Metadata.UNIQUE_ID)).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc3OTkwNA==", "bodyText": "I have added the milestones method as suggested", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428779904", "createdAt": "2020-05-21T16:49:54Z", "author": {"login": "ruromero"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+        processInstance.complete();\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+\n+        processInstance.start();\n+        assertState(processInstance, ProcessInstance.STATE_ACTIVE);\n+        \n+        RuleFlowProcessInstance legacyProcessInstance = (RuleFlowProcessInstance)((AbstractProcessInstance<?>) processInstance).legacyProcessInstance;\n+        assertThat(legacyProcessInstance.getNodeInstances()).isEmpty();\n+        assertThat(legacyProcessInstance.getNodeIdInError()).isNullOrEmpty();\n+        Optional<String> milestoneId = Stream.of(legacyProcessInstance.getNodeContainer().getNodes()).filter(node -> node.getName().equals(\"Milestone1\")).map(n -> (String)n.getMetaData().get(Metadata.UNIQUE_ID)).findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzOTYxMQ=="}, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY1MzA4OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/CaseNodeInstance.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTo1OVrOGZQXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTo1OVrOGZQXZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CaseNodeInstance implements Serializable {\n          \n          \n            \n            public class MilestoneInstance implements Serializable {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r429135717", "createdAt": "2020-05-22T09:15:59Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/CaseNodeInstance.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process;\n+\n+import java.io.Serializable;\n+\n+public class CaseNodeInstance implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3e7ab996d726089ed6b3f50c8837c679dd8e7c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc5MTgyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozNzozOFrOGZbiOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTowNjo1MlrOGZhPkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Stream<Node> getCaseNodeInstances(Class<? extends Node> nodeClass) {\n          \n          \n            \n                private Stream<Node> getNodeInstances(Class<? extends Node> nodeClass) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r429318713", "createdAt": "2020-05-22T15:37:38Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -368,6 +378,35 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n         return legacyProcessInstance().getEventDescriptions();\n     }\n \n+    @Override\n+    public Collection<Milestone> milestones() {\n+        return getCaseNodeInstances(MilestoneNode.class)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return new Milestone(uid, n.getName(), getStatus(uid));\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Stream<Node> getCaseNodeInstances(Class<? extends Node> nodeClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155315725d533ad1dbfbc9251d6822aee9ff1c43"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjI0Mg==", "bodyText": "They're just nodes so I renamed it to getNodes", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r429412242", "createdAt": "2020-05-22T19:06:52Z", "author": {"login": "ruromero"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -368,6 +378,35 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n         return legacyProcessInstance().getEventDescriptions();\n     }\n \n+    @Override\n+    public Collection<Milestone> milestones() {\n+        return getCaseNodeInstances(MilestoneNode.class)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return new Milestone(uid, n.getName(), getStatus(uid));\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Stream<Node> getCaseNodeInstances(Class<? extends Node> nodeClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODcxMw=="}, "originalCommit": {"oid": "155315725d533ad1dbfbc9251d6822aee9ff1c43"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 106, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}