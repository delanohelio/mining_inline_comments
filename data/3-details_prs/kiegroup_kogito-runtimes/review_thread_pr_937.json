{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDIyMjI1", "number": 937, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDoyODo1NFrOFNQbaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDoyODo1NFrOFNQbaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDQ0OTY5OnYy", "diffSide": "RIGHT", "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusCloudEventPublisher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDoyODo1NFrOIRXpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwOTowNjowMVrOITbNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4NDE2Mw==", "bodyText": "What about the atomicity here? What happens if we already acked all messages received from Kafka, but there is an issue when broadcasting them further down? Can it happen that broadcasting fails and the events are thus not resend as all of them are acked in the Kafka?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/937#discussion_r555084163", "createdAt": "2021-01-11T14:28:54Z", "author": {"login": "MarianMacik"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -35,13 +36,15 @@\n @ApplicationScoped\n public class QuarkusCloudEventPublisher {\n     @Channel(KogitoEventStreams.INCOMING)\n-    Multi<String> events;\n+    Multi<Message<String>> events;\n \n     @Produces\n     @ApplicationScoped\n     @Named(KogitoEventStreams.PUBLISHER)\n     public Multi<String> makeMulti() {\n-        return events.broadcast().toAllSubscribers();\n-    }\n-\n-}\n+        return events\n+                .invoke(Message::ack)\n+                .map(Message::getPayload)\n+                .broadcast().toAllSubscribers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04c81d8020f9d09b693cdb8f404a95c21ebccccb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ4NzM4Mg==", "bodyText": "@tiagodolphine ^^", "url": "https://github.com/kiegroup/kogito-runtimes/pull/937#discussion_r556487382", "createdAt": "2021-01-13T12:34:20Z", "author": {"login": "MarianMacik"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -35,13 +36,15 @@\n @ApplicationScoped\n public class QuarkusCloudEventPublisher {\n     @Channel(KogitoEventStreams.INCOMING)\n-    Multi<String> events;\n+    Multi<Message<String>> events;\n \n     @Produces\n     @ApplicationScoped\n     @Named(KogitoEventStreams.PUBLISHER)\n     public Multi<String> makeMulti() {\n-        return events.broadcast().toAllSubscribers();\n-    }\n-\n-}\n+        return events\n+                .invoke(Message::ack)\n+                .map(Message::getPayload)\n+                .broadcast().toAllSubscribers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4NDE2Mw=="}, "originalCommit": {"oid": "04c81d8020f9d09b693cdb8f404a95c21ebccccb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ5MTQwOA==", "bodyText": "@MarianMacik yeah, we should design a proper way to let the consumers to ack the received messages we already pointed this when this fix was made, this requires some refactoring on the code because now the consumers receive only the payload of the messages as a String. Anyway, this was just a cherry-pick made for the 1.0.\nThere is a Jira I created to handle this issue https://issues.redhat.com/browse/KOGITO-3933.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/937#discussion_r556491408", "createdAt": "2021-01-13T12:41:40Z", "author": {"login": "tiagodolphine"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -35,13 +36,15 @@\n @ApplicationScoped\n public class QuarkusCloudEventPublisher {\n     @Channel(KogitoEventStreams.INCOMING)\n-    Multi<String> events;\n+    Multi<Message<String>> events;\n \n     @Produces\n     @ApplicationScoped\n     @Named(KogitoEventStreams.PUBLISHER)\n     public Multi<String> makeMulti() {\n-        return events.broadcast().toAllSubscribers();\n-    }\n-\n-}\n+        return events\n+                .invoke(Message::ack)\n+                .map(Message::getPayload)\n+                .broadcast().toAllSubscribers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4NDE2Mw=="}, "originalCommit": {"oid": "04c81d8020f9d09b693cdb8f404a95c21ebccccb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzOTYwNQ==", "bodyText": "@tiagodolphine Thanks, just wanted to make sure it is tracked somewhere ;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/937#discussion_r557239605", "createdAt": "2021-01-14T09:06:01Z", "author": {"login": "MarianMacik"}, "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -35,13 +36,15 @@\n @ApplicationScoped\n public class QuarkusCloudEventPublisher {\n     @Channel(KogitoEventStreams.INCOMING)\n-    Multi<String> events;\n+    Multi<Message<String>> events;\n \n     @Produces\n     @ApplicationScoped\n     @Named(KogitoEventStreams.PUBLISHER)\n     public Multi<String> makeMulti() {\n-        return events.broadcast().toAllSubscribers();\n-    }\n-\n-}\n+        return events\n+                .invoke(Message::ack)\n+                .map(Message::getPayload)\n+                .broadcast().toAllSubscribers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4NDE2Mw=="}, "originalCommit": {"oid": "04c81d8020f9d09b693cdb8f404a95c21ebccccb"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}