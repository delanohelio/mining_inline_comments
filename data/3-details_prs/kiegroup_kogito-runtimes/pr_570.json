{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzUzNzY4", "number": 570, "title": "KOGITO-2286 Pipeline modifications for release process", "bodyText": "PR Description\nThis is a PR for the following issues:\n\nKOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\nKOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\nKOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\nKOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\nKOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\nKOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\nKOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\nKOGITO-2373 Kogito Runtimes promote pipeline: Update examples stable branch\n\nThe first 3 were all originally part of KOGITO-2286, but I requested they be split up since the KOGITO-2414 and KOGITO-2415 parts were blocked by other tasks. But since this PR hasn't been merged yet and I've finished the code for the other 2 tasks, I asked @radtriste if it was fine to submit a single PR for all of them now, and he said it was fine. For simpler merging, the promote tasks will be added to this PR as well.\nTesting\n\ndeploy pipeline\npromote pipeline\nbranches where PR's were created and merged\n\nkogito-runtimes\nkogito-apps\nkogito-examples\n\n\n\nKOGITO-2286\nIn addition to features listed in the issue, I also discussed some refactoring of the Jenkinsfile with @radtriste which can found here and here.  I realize \"not includ[ing] fixes for issues other than the main ticket\" is a requirement, but I believe the refactoring was beneficial for the implementation of the task.\nRequirements\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-06-18T20:44:58Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570", "merged": true, "mergeCommit": {"oid": "84680ea10a50499b269c216b53b63ea4de9893d1"}, "closed": true, "closedAt": "2020-08-12T13:56:49Z", "author": {"login": "Kevin-Mok"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsuXh4gFqTQzMzg3NjQ0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-Kpi8gFqTQ2NTg3MTQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODc2NDQz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-433876443", "createdAt": "2020-06-19T07:54:58Z", "commit": {"oid": "34a8596d1de6f9568d23fd8ebdaa4bf9812bf589"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo1NDo1OFrOGmLrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODowMDowMFrOGmL1Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MDQ0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stage('Deploy') {\n          \n          \n            \n                    stage('Deploy artifacts') {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r442690448", "createdAt": "2020-06-19T07:54:58Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,33 +97,38 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Deploy') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a8596d1de6f9568d23fd8ebdaa4bf9812bf589"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MDcyOQ==", "bodyText": "This should be done only in the case of release", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r442690729", "createdAt": "2020-06-19T07:55:36Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,33 +97,38 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Deploy') {\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-apps') {\n-            steps {\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            input {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a8596d1de6f9568d23fd8ebdaa4bf9812bf589"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTg0Ng==", "bodyText": "do we want to have a specific folder for the file ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r442691846", "createdAt": "2020-06-19T07:57:42Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,33 +97,38 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Deploy') {\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-apps') {\n-            steps {\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            input {\n+                message \"Enter staging repository URL:\"\n+                parameters {\n+                    string(name: 'STAGING_REPO_URL')\n+                }\n+            }\n+            steps {\n+                sh \"mkdir -p archive\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a8596d1de6f9568d23fd8ebdaa4bf9812bf589"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5Mjg3OQ==", "bodyText": "we should have one property file containing all deploy properties (key=value), so we can add more to that file, without having many files", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r442692879", "createdAt": "2020-06-19T08:00:00Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,33 +97,38 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Deploy') {\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-apps') {\n-            steps {\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            input {\n+                message \"Enter staging repository URL:\"\n+                parameters {\n+                    string(name: 'STAGING_REPO_URL')\n+                }\n+            }\n+            steps {\n+                sh \"mkdir -p archive\"\n+                writeFile(file: \"archive/staging-url.txt\", text: \"${STAGING_REPO_URL}\")\n+                archiveArtifacts(artifacts: \"archive/staging-url.txt\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a8596d1de6f9568d23fd8ebdaa4bf9812bf589"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34a8596d1de6f9568d23fd8ebdaa4bf9812bf589", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/34a8596d1de6f9568d23fd8ebdaa4bf9812bf589", "committedDate": "2020-06-18T20:41:01Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}, "afterCommit": {"oid": "873f258357ce5b0dc8bcdbfffcedd65e0a87a9cb", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/873f258357ce5b0dc8bcdbfffcedd65e0a87a9cb", "committedDate": "2020-06-21T19:26:44Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjU0MjIx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-434654221", "createdAt": "2020-06-22T07:09:15Z", "commit": {"oid": "873f258357ce5b0dc8bcdbfffcedd65e0a87a9cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzowOToxNVrOGm0VIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzowOToxNVrOGm0VIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1NjQ0OA==", "bodyText": "could we have this in lowercase ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r443356448", "createdAt": "2020-06-22T07:09:15Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,33 +97,39 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Deploy artifacts') {\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-apps') {\n-            steps {\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            steps {\n+                script {\n+                    if (params.RELEASE) {\n+                        def STAGING_REPO_URL = input(message: \"Enter staging repository URL:\", parameters: [text(name: 'STAGING_REPO_URL')])\n+                        def STAGING_URL_FILE = \"staging-url.txt\"\n+                        def PROPERTIES_FILE = \"deployment.properties\"\n+                        sh \"echo ${STAGING_REPO_URL} > ${STAGING_URL_FILE}\"\n+                        sh \"printf \\\"STAGING_REPO_URL=%s\\\" \\\"${STAGING_REPO_URL}\\\" > ${PROPERTIES_FILE}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873f258357ce5b0dc8bcdbfffcedd65e0a87a9cb"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "873f258357ce5b0dc8bcdbfffcedd65e0a87a9cb", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/873f258357ce5b0dc8bcdbfffcedd65e0a87a9cb", "committedDate": "2020-06-21T19:26:44Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}, "afterCommit": {"oid": "7a79552248fff89e9547050f00ead285f8809566", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7a79552248fff89e9547050f00ead285f8809566", "committedDate": "2020-06-22T20:07:36Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTMzOTE2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-436533916", "createdAt": "2020-06-24T10:49:36Z", "commit": {"oid": "7a79552248fff89e9547050f00ead285f8809566"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTozNlrOGoM9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTozNlrOGoM9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODUxMw==", "bodyText": "Can we just manually expand this to cp -r kogito-examples kogito-examples-persistence? I think it looks much understandable than the current form.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r444808513", "createdAt": "2020-06-24T10:49:36Z", "author": {"login": "MarianMacik"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -34,9 +35,33 @@ pipeline {\n                 }\n             }\n         }\n+        stage('Clone repositories') { \n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-runtimes\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-apps\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                // Use a separate dir for persistence to not overwrite the test results\n+                sh \"cp -r kogito-examples{,-persistence}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a79552248fff89e9547050f00ead285f8809566"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a79552248fff89e9547050f00ead285f8809566", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7a79552248fff89e9547050f00ead285f8809566", "committedDate": "2020-06-22T20:07:36Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}, "afterCommit": {"oid": "baaf1b1157b7cee837978df86f6886c83985789d", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/baaf1b1157b7cee837978df86f6886c83985789d", "committedDate": "2020-06-24T12:54:14Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baaf1b1157b7cee837978df86f6886c83985789d", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/baaf1b1157b7cee837978df86f6886c83985789d", "committedDate": "2020-06-24T12:54:14Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}, "afterCommit": {"oid": "df854e7b307454c37fa9c9abd4561d488ae8a485", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/df854e7b307454c37fa9c9abd4561d488ae8a485", "committedDate": "2020-06-25T02:07:10Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df854e7b307454c37fa9c9abd4561d488ae8a485", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/df854e7b307454c37fa9c9abd4561d488ae8a485", "committedDate": "2020-06-25T02:07:10Z", "message": "KOGITO-2286 Add release parameter and staging repository information"}, "afterCommit": {"oid": "e841c8c51c2b34793e6f03bc21e18ac50fa1a121", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e841c8c51c2b34793e6f03bc21e18ac50fa1a121", "committedDate": "2020-06-29T22:40:12Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e841c8c51c2b34793e6f03bc21e18ac50fa1a121", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e841c8c51c2b34793e6f03bc21e18ac50fa1a121", "committedDate": "2020-06-29T22:40:12Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}, "afterCommit": {"oid": "cc9b9cad3634d401dc469ca84e1cdb4d52dfe8f4", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc9b9cad3634d401dc469ca84e1cdb4d52dfe8f4", "committedDate": "2020-06-29T22:43:38Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc9b9cad3634d401dc469ca84e1cdb4d52dfe8f4", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cc9b9cad3634d401dc469ca84e1cdb4d52dfe8f4", "committedDate": "2020-06-29T22:43:38Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}, "afterCommit": {"oid": "ae7b0274a9707b429074fc4812cdd1306cc3d1ea", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ae7b0274a9707b429074fc4812cdd1306cc3d1ea", "committedDate": "2020-06-29T22:55:03Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae7b0274a9707b429074fc4812cdd1306cc3d1ea", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ae7b0274a9707b429074fc4812cdd1306cc3d1ea", "committedDate": "2020-06-29T22:55:03Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}, "afterCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1d66a7059113b11bd60e3b1450bcb0d2e018046a", "committedDate": "2020-06-29T22:58:04Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODM2Njk5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-439836699", "createdAt": "2020-06-30T09:27:35Z", "commit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyNzozNVrOGqz7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDozNjozNlrOGq2aJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NDIwOA==", "bodyText": "The Maven version should not be the Maven binary version but the project version we want to set.\nSo there should not be any default value as this is an optional field, and I would rename it PROJECT_VERSION.\nAlso it could be used without the RELEASE so the description should be changed.\nExample:\nstring(name: 'PROJECT_VERSION', defaultValue: '', description: 'Set the version to the project')", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447544208", "createdAt": "2020-06-30T09:27:35Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,15 +1,24 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]\n+\n pipeline {\n     agent {\n         label 'kie-rhel7 && kie-mem16g'\n     }\n     parameters {\n         string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n         string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NDYyNg==", "bodyText": "NEW_BRANCH should contain the PROJECT_VERSION and should be initialized only if that version is specified (we don't fork/merge if no version)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447544626", "createdAt": "2020-06-30T09:28:17Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,15 +1,24 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]\n+\n pipeline {\n     agent {\n         label 'kie-rhel7 && kie-mem16g'\n     }\n     parameters {\n         string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n         string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')\n     }\n     environment {\n         MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+        NEW_BRANCH = \"${JOB_BASE_NAME}-${BUILD_NUMBER}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NTUyOQ==", "bodyText": "We should make that configurable directly into Jenkins instead of here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447545529", "createdAt": "2020-06-30T09:29:42Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,15 +1,24 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]\n+\n pipeline {\n     agent {\n         label 'kie-rhel7 && kie-mem16g'\n     }\n     parameters {\n         string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n         string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')\n     }\n     environment {\n         MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+        NEW_BRANCH = \"${JOB_BASE_NAME}-${BUILD_NUMBER}\"\n+        GIT_USER = \"Jenkins CI\"\n+        GIT_USER_EMAIL = \"jenkins@rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NjA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    COMMIT_MSG = \"Update Maven version for release\"\n          \n          \n            \n                    COMMIT_MSG = \"Update Maven version for release to version ${PROJECT_VERSION}\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447546049", "createdAt": "2020-06-30T09:30:31Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,15 +1,24 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]\n+\n pipeline {\n     agent {\n         label 'kie-rhel7 && kie-mem16g'\n     }\n     parameters {\n         string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n         string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')\n     }\n     environment {\n         MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+        NEW_BRANCH = \"${JOB_BASE_NAME}-${BUILD_NUMBER}\"\n+        GIT_USER = \"Jenkins CI\"\n+        GIT_USER_EMAIL = \"jenkins@rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com\"\n+        COMMIT_MSG = \"Update Maven version for release\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1ODkwNA==", "bodyText": "we could create the deployment.properties in any case I think", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447558904", "createdAt": "2020-06-30T09:51:20Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,37 +125,80 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.createBranch(NEW_BRANCH)\n+                        githubscm.commitChanges(GIT_USER, GIT_USER_EMAIL, COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", NEW_BRANCH)\n+                        deployProperties[\"kogito-runtimes.pr\"] = githubscm.createPR(COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        githubscm.createBranch(NEW_BRANCH)\n+                        githubscm.commitChanges(GIT_USER, GIT_USER_EMAIL, COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", NEW_BRANCH)\n+                        deployProperties[\"kogito-apps.pr\"] = githubscm.createPR(COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        githubscm.createBranch(NEW_BRANCH)\n+                        githubscm.commitChanges(GIT_USER, GIT_USER_EMAIL, COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", NEW_BRANCH)\n+                        deployProperties[\"kogito-examples.pr\"] = githubscm.createPR(COMMIT_MSG, \"master\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                script {\n+                    deployProperties[\"staging-repo.url\"] = input(message: \"Enter staging repository URL:\", parameters: [string(name: 'STAGING_REPO_URL')])\n+                }\n+            }\n+        }\n     }\n     post {\n         always {\n             junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'\n+            script {\n+                if (params.RELEASE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1OTc2Mw==", "bodyText": "but we should check in the Initialize stage that if RELEASE is enabled, then PROJECT_VERSION should not be empty", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447559763", "createdAt": "2020-06-30T09:52:49Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,15 +1,24 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]\n+\n pipeline {\n     agent {\n         label 'kie-rhel7 && kie-mem16g'\n     }\n     parameters {\n         string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n         string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NDIwOA=="}, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NDgwNg==", "bodyText": "We need to forkRepo first, else it won't work\nhttps://github.com/kiegroup/jenkins-pipeline-shared-libraries/blob/760f283ce035e125d8d97647894b72ee5871d455/vars/githubscm.groovy#L94\ncreatePR will return the PR link that we can save into the deployProperties as {project}.pr.link key", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r447584806", "createdAt": "2020-06-30T10:36:36Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -76,37 +125,80 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.createBranch(NEW_BRANCH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a"}, "originalPosition": 118}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d66a7059113b11bd60e3b1450bcb0d2e018046a", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1d66a7059113b11bd60e3b1450bcb0d2e018046a", "committedDate": "2020-06-29T22:58:04Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step"}, "afterCommit": {"oid": "4ece5ceb9f48db89e55c47d8604fe55c2968e7b3", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ece5ceb9f48db89e55c47d8604fe55c2968e7b3", "committedDate": "2020-06-30T21:17:19Z", "message": "Implement Tristan's requested fixes on 6/30"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ece5ceb9f48db89e55c47d8604fe55c2968e7b3", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ece5ceb9f48db89e55c47d8604fe55c2968e7b3", "committedDate": "2020-06-30T21:17:19Z", "message": "Implement Tristan's requested fixes on 6/30"}, "afterCommit": {"oid": "07bf37de39e3f01b2c8d0d02bc53a39a99047477", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/07bf37de39e3f01b2c8d0d02bc53a39a99047477", "committedDate": "2020-06-30T23:24:18Z", "message": "Implement Tristan's requested fixes on 6/30"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07bf37de39e3f01b2c8d0d02bc53a39a99047477", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/07bf37de39e3f01b2c8d0d02bc53a39a99047477", "committedDate": "2020-06-30T23:24:18Z", "message": "Implement Tristan's requested fixes on 6/30"}, "afterCommit": {"oid": "fc9739cc6c288dfdbb9f4cae894cda21a0c97ab3", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc9739cc6c288dfdbb9f4cae894cda21a0c97ab3", "committedDate": "2020-06-30T23:36:04Z", "message": "Implement Tristan's requested fixes on 6/30"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc9739cc6c288dfdbb9f4cae894cda21a0c97ab3", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc9739cc6c288dfdbb9f4cae894cda21a0c97ab3", "committedDate": "2020-06-30T23:36:04Z", "message": "Implement Tristan's requested fixes on 6/30"}, "afterCommit": {"oid": "2b16c5aca4a290657fef2be471b70a7d1cf98703", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2b16c5aca4a290657fef2be471b70a7d1cf98703", "committedDate": "2020-07-01T00:03:08Z", "message": "Implement Tristan's requested fixes on 6/30"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b16c5aca4a290657fef2be471b70a7d1cf98703", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2b16c5aca4a290657fef2be471b70a7d1cf98703", "committedDate": "2020-07-01T00:03:08Z", "message": "Implement Tristan's requested fixes on 6/30"}, "afterCommit": {"oid": "77f614e3d02ab0dcf5ff3ef7264ad785c682469e", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/77f614e3d02ab0dcf5ff3ef7264ad785c682469e", "committedDate": "2020-07-01T00:13:30Z", "message": "Implement Tristan's requested fixes on 6/30"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77f614e3d02ab0dcf5ff3ef7264ad785c682469e", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/77f614e3d02ab0dcf5ff3ef7264ad785c682469e", "committedDate": "2020-07-01T00:13:30Z", "message": "Implement Tristan's requested fixes on 6/30"}, "afterCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5f8b53c0115e47dd30235c92c3030144a4f886f1", "committedDate": "2020-07-01T00:30:49Z", "message": "Implement Tristan's requested fixes on 6/30"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjcwODUy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-440670852", "createdAt": "2020-07-01T08:48:35Z", "commit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODo0ODozNVrOGrc1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTo1NDo0MlrOGriwHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNDMxOQ==", "bodyText": "This is only used in Create PR stage, so I think we can move this part to that stage. what do you think ?\n(the check of Version if RELEASE is set can stay)\nAlso do we need the parameter NEW_BRANCH_NAME as it will be done only in the case of a RELEASE, so the version should be set?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r448214319", "createdAt": "2020-07-01T08:48:35Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -31,12 +42,74 @@ pipeline {\n                         // Switch to branch if not on a multibranch pipeline\n                         env.BRANCH_NAME = params.BUILD_BRANCH_NAME\n                     }\n+                    deployProperties['release'] = params.RELEASE\n+                    deployProperties['project-version'] = params.PROJECT_VERSION\n+                    env.NEW_BRANCH = params.NEW_BRANCH_NAME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxNTg1OQ==", "bodyText": "we need to forkRepo before creating the branch", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r448215859", "createdAt": "2020-07-01T08:51:04Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +165,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.createBranch(env.NEW_BRANCH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwODQxMg==", "bodyText": "we have multiple pom which are updated by the updateMavenVersion so they should also be added", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r448308412", "createdAt": "2020-07-01T11:48:31Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +165,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwOTA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                         subject: \"${env.PIPELINE_NAME} #${env.BRANCH_NAME}\",\n          \n          \n            \n                                         subject: \"${env.PIPELINE_NAME} #${env.BUILD_BRANCH_NAME}\",", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r448309062", "createdAt": "2020-07-01T11:49:55Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +165,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", env.NEW_BRANCH)\n+                        deployProperties[\"kogito-runtimes.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", env.NEW_BRANCH)\n+                        deployProperties[\"kogito-apps.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", env.NEW_BRANCH)\n+                        deployProperties[\"kogito-examples.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                script {\n+                    emailext body: \"${env.PIPELINE_NAME} #${env.BUILD_NUMBER} needs a staging repository URL: ${env.BUILD_URL}input\",\n+                             subject: \"${env.PIPELINE_NAME} #${env.BRANCH_NAME}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMTMyNg==", "bodyText": "could we do something like this ?\npropertiesStr = deployProperties.collect{ entry ->  \"${entry.key}=${entry.value}\" }.join(\"\\n\")", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r448311326", "createdAt": "2020-07-01T11:54:42Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +165,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", env.NEW_BRANCH)\n+                        deployProperties[\"kogito-runtimes.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", env.NEW_BRANCH)\n+                        deployProperties[\"kogito-apps.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        githubscm.createBranch(env.NEW_BRANCH)\n+                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, \"pom.xml\")\n+                        githubscm.pushObject(\"origin\", env.NEW_BRANCH)\n+                        deployProperties[\"kogito-examples.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                script {\n+                    emailext body: \"${env.PIPELINE_NAME} #${env.BUILD_NUMBER} needs a staging repository URL: ${env.BUILD_URL}input\",\n+                             subject: \"${env.PIPELINE_NAME} #${env.BRANCH_NAME}\",\n+                             to: env.KOGITO_CI_EMAIL_TO\n+                    deployProperties[\"staging-repo.url\"] = input(message: \"Enter staging repository URL:\", parameters: [string(name: 'STAGING_REPO_URL')])\n+                }\n+            }\n+        }\n     }\n     post {\n         always {\n+            script {\n+                def propertiesStr = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDgwNTUw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-441480550", "createdAt": "2020-07-02T08:53:40Z", "commit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODo1Mzo0MFrOGsDsrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwODo1Mzo0MFrOGsDsrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1MTExNg==", "bodyText": "can we set the project version only if not empty ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r448851116", "createdAt": "2020-07-02T08:53:40Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -31,12 +42,74 @@ pipeline {\n                         // Switch to branch if not on a multibranch pipeline\n                         env.BRANCH_NAME = params.BUILD_BRANCH_NAME\n                     }\n+                    deployProperties['release'] = params.RELEASE\n+                    deployProperties['project-version'] = params.PROJECT_VERSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8b53c0115e47dd30235c92c3030144a4f886f1"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e68c003b19c3d0097ba65a2dccc142a7e8c478f", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6e68c003b19c3d0097ba65a2dccc142a7e8c478f", "committedDate": "2020-07-02T19:24:22Z", "message": "Implement Tristan's requested fixes on 7/1"}, "afterCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fbcadbe21dce4e31a52a4010353b10ca289adbd7", "committedDate": "2020-07-02T22:58:47Z", "message": "Implement Tristan's requested fixes on 7/1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjg5MzY5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-442289369", "createdAt": "2020-07-03T09:43:29Z", "commit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTo0MzoyOVrOGsqnTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDoyODo1NFrOGsr6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODcxNw==", "bodyText": "we should maybe create some \"utils\" methods like getProjectVersion or isRelease to retrieve this kind of information. I guess it would be then more readable and easier to change if we add any change to it. wdyt ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449488717", "createdAt": "2020-07-03T09:43:29Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -31,12 +42,72 @@ pipeline {\n                         // Switch to branch if not on a multibranch pipeline\n                         env.BRANCH_NAME = params.BUILD_BRANCH_NAME\n                     }\n+                    if (params.RELEASE) {\n+                        assert params.PROJECT_VERSION != ''\n+                    }\n+                    deployProperties['release'] = params.RELEASE\n+                    if (params.PROJECT_VERSION != '') {\n+                        deployProperties['project-version'] = params.PROJECT_VERSION\n+                    }\n+                }\n+            }\n+        }\n+        stage('Clone repositories') { \n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-runtimes\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-apps\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                // Use a separate dir for persistence to not overwrite the test results\n+                dir(\"kogito-examples-persistence\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+            }\n+        }\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config\"\n+                }\n+            }\n+        }\n+        stage('Update project version'){\n+            when {\n+                expression { return params.PROJECT_VERSION != '' }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUwODk4NA==", "bodyText": "not sure that one is really needed as en var. we could just have it as local var in stage Create PR", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449508984", "createdAt": "2020-07-03T10:26:35Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,15 +1,26 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]\n+\n pipeline {\n     agent {\n         label 'kie-rhel7 && kie-mem16g'\n     }\n     parameters {\n         string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n-        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')\n     }\n     environment {\n+        KOGITO_CI_EMAIL_TO = credentials(\"KOGITO_CI_EMAIL_TO\")\n+        PIPELINE_NAME = \"Kogito Runtimes deploy pipeline\"\n         MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+        PROPERTIES_FILE = \"deployment.properties\"\n+        FILES_TO_ADD = '**/pom.xml'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUwOTM0NA==", "bodyText": "Set pipeline name as a local var as only used here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449509344", "createdAt": "2020-07-03T10:27:28Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +163,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)\n+                        githubscm.pushObject(\"origin\", params.PROJECT_VERSION)\n+                        deployProperties[\"kogito-runtimes.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)\n+                        githubscm.pushObject(\"origin\", params.PROJECT_VERSION)\n+                        deployProperties[\"kogito-apps.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)\n+                        githubscm.pushObject(\"origin\", params.PROJECT_VERSION)\n+                        deployProperties[\"kogito-examples.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                script {\n+                    emailext body: \"${env.PIPELINE_NAME} #${env.BUILD_NUMBER} needs a staging repository URL: ${env.BUILD_URL}input\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUwOTU2NQ==", "bodyText": "I would add at the end RELEASE in the subject so we know it is in release process", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449509565", "createdAt": "2020-07-03T10:27:59Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +163,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)\n+                        githubscm.pushObject(\"origin\", params.PROJECT_VERSION)\n+                        deployProperties[\"kogito-runtimes.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)\n+                        githubscm.pushObject(\"origin\", params.PROJECT_VERSION)\n+                        deployProperties[\"kogito-apps.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)\n+                        githubscm.pushObject(\"origin\", params.PROJECT_VERSION)\n+                        deployProperties[\"kogito-examples.pr.link\"] = githubscm.createPR(env.COMMIT_MSG, \"master\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Archive staging repository URL') {\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                script {\n+                    emailext body: \"${env.PIPELINE_NAME} #${env.BUILD_NUMBER} needs a staging repository URL: ${env.BUILD_URL}input\",\n+                             subject: \"${env.PIPELINE_NAME} #${env.BUILD_BRANCH_NAME}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxMDAwMA==", "bodyText": "COMMIT_MSG could be a local var as well IMO", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449510000", "createdAt": "2020-07-03T10:28:54Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +163,85 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+                        githubscm.createBranch(params.PROJECT_VERSION)\n+                        githubscm.commitChanges(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, env.COMMIT_MSG, env.FILES_TO_ADD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzE4MDE2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-442318016", "createdAt": "2020-07-03T10:30:48Z", "commit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDozMDo0OFrOGsr9tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMDozMDo0OFrOGsr9tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxMDgzNg==", "bodyText": "maybe add also the BUILD_BRANCH_NAME as git.branch property ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449510836", "createdAt": "2020-07-03T10:30:48Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -31,12 +42,72 @@ pipeline {\n                         // Switch to branch if not on a multibranch pipeline\n                         env.BRANCH_NAME = params.BUILD_BRANCH_NAME\n                     }\n+                    if (params.RELEASE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbcadbe21dce4e31a52a4010353b10ca289adbd7", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fbcadbe21dce4e31a52a4010353b10ca289adbd7", "committedDate": "2020-07-02T22:58:47Z", "message": "Implement Tristan's requested fixes on 7/1"}, "afterCommit": {"oid": "58f3b233f3a99c978cc8833bd0f4454a29437d74", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/58f3b233f3a99c978cc8833bd0f4454a29437d74", "committedDate": "2020-07-07T02:18:47Z", "message": "Implement Tristan's requested fixes on 7/3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjM3NDYz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-443637463", "createdAt": "2020-07-07T07:40:00Z", "commit": {"oid": "58f3b233f3a99c978cc8833bd0f4454a29437d74"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0MDowMFrOGtyq8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0MTo1NFrOGtyutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2OTI5Nw==", "bodyText": "as discussed in https://github.com/kiegroup/kogito-cloud-operator/pull/420/files#r450517728, it should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def deployProperties = [:]\n          \n          \n            \n            deployProperties = [:]\n          \n      \n    \n    \n  \n\nto have global scope", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r450669297", "createdAt": "2020-07-07T07:40:00Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,12 +1,16 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+def deployProperties = [:]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f3b233f3a99c978cc8833bd0f4454a29437d74"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2OTgyNw==", "bodyText": "BUILD_BRANCH_NAME will never be empty (default is master)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r450669827", "createdAt": "2020-07-07T07:41:03Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -31,12 +35,75 @@ pipeline {\n                         // Switch to branch if not on a multibranch pipeline\n                         env.BRANCH_NAME = params.BUILD_BRANCH_NAME\n                     }\n+                    if (params.RELEASE) {\n+                        assert params.PROJECT_VERSION != ''\n+                    }\n+                    if (params.BUILD_BRANCH_NAME != '') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f3b233f3a99c978cc8833bd0f4454a29437d74"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDI2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            def propertiesFile = \"deployment.properties\"\n          \n          \n            \n                            writeFile(text: propertiesStr, file: propertiesFile)\n          \n          \n            \n                            writeFile(text: propertiesStr, file: \"deployment.properties\")", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r450670262", "createdAt": "2020-07-07T07:41:54Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +159,92 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return params.RELEASE }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Get staging repository URL') {\n+            when {\n+                expression { return params.RELEASE }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes deploy pipeline\"\n+                    emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs a staging repository URL: ${env.BUILD_URL}input\",\n+                             subject: \"${pipelineName} #${params.BUILD_BRANCH_NAME}\",\n+                             to: credentials(\"KOGITO_CI_EMAIL_TO\")\n+                    deployProperties[\"staging-repo.url\"] = input(message: \"Enter staging repository URL:\", parameters: [string(name: 'STAGING_REPO_URL')])\n+                }\n+            }\n+        }\n     }\n     post {\n         always {\n+            script {\n+                def propertiesStr = deployProperties.collect{ entry ->  \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+                def propertiesFile = \"deployment.properties\"\n+                writeFile(text: propertiesStr, file: propertiesFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58f3b233f3a99c978cc8833bd0f4454a29437d74"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NTgzNTI5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-444583529", "createdAt": "2020-07-08T09:45:18Z", "commit": {"oid": "b55f13c98ef999123693d7f213a4acd2da00b07b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo0NToxOFrOGugaQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTo0ODozMVrOGughjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxODY5MQ==", "bodyText": "as it is immutable, I would put that one in environment part", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r451418691", "createdAt": "2020-07-08T09:45:18Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -1,12 +1,17 @@\n @Library('jenkins-pipeline-shared-libraries')_\n \n+deployProperties = [:]\n+BOT_CREDENTIALS_ID = \"bsig-gh-bot\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b55f13c98ef999123693d7f213a4acd2da00b07b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyMDU1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs a staging repository URL: ${env.BUILD_URL}input\",\n          \n          \n            \n                                    emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs the staging repository URL. Please provide it to ${env.BUILD_URL}input\",", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r451420559", "createdAt": "2020-07-08T09:48:31Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -96,41 +172,126 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Get staging repository URL') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes deploy pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs a staging repository URL: ${env.BUILD_URL}input\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b55f13c98ef999123693d7f213a4acd2da00b07b"}, "originalPosition": 196}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b55f13c98ef999123693d7f213a4acd2da00b07b", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b55f13c98ef999123693d7f213a4acd2da00b07b", "committedDate": "2020-07-08T00:32:59Z", "message": "Implement Tristan's requested fixes on 7/7"}, "afterCommit": {"oid": "217b614322d60ac64f3bfca826f289063ecb2edb", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/217b614322d60ac64f3bfca826f289063ecb2edb", "committedDate": "2020-07-09T04:13:47Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTYxMjkz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-445561293", "createdAt": "2020-07-09T12:20:28Z", "commit": {"oid": "217b614322d60ac64f3bfca826f289063ecb2edb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjoyMDoyOVrOGvOnRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjoyMjowNlrOGvOqlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3NTY4Ng==", "bodyText": "This stage is done to let the pipeline knows that the staging repository has been promoted to Maven Central.\nI would set the name of the stage with a question mark, like Is staging repository promoted ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452175686", "createdAt": "2020-07-09T12:20:29Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,136 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Approve promotion') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217b614322d60ac64f3bfca826f289063ecb2edb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3NTk5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             \"Approve the promotion here: ${env.BUILD_URL}input\",\n          \n          \n            \n                                             \"Please confirm promote this repository and then confirm the promotion here: ${env.BUILD_URL}input\",", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452175999", "createdAt": "2020-07-09T12:21:01Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,136 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Approve promotion') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Approve the promotion here: ${env.BUILD_URL}input\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217b614322d60ac64f3bfca826f289063ecb2edb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3NjUzNQ==", "bodyText": "As stated here: https://github.com/kiegroup/kogito-cloud-operator/pull/420/files?file-filters%5B%5D=.promote#r452030869\nI am not sure we need the TOKEN", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452176535", "createdAt": "2020-07-09T12:22:06Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,136 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Approve promotion') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Approve the promotion here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Approve for promotion?\"\n+                }\n+            }\n+        }\n+        /* stage('Merge PR') { // TODO\n+            when {\n+                expression {\n+                    return isRelease()\n+                }\n+            }\n+            steps{\n+                script {\n+                    githubscm.mergePR()\n+                }\n+            }\n+        } */\n+        /* stage('Git tag') { // TODO\n+            when {\n+                expression {\n+                    return getGitTag() != \"\"\n+                }\n+            }\n+            steps {\n+                // TODO: retrieve latest BUILD_BRANCH_NAME/GIT_AUTHOR?\n+                githubscm.tagRepository()\n+            }\n+        } */\n+        /* stage('Set next snapshot') { // TODO\n+        } */\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    if (params.DEPLOY_BUILD_URL != null){\n+        withCredentials([usernamePassword(credentialsId: 'rhba-jenkins-token', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_TOKEN')]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "217b614322d60ac64f3bfca826f289063ecb2edb"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "217b614322d60ac64f3bfca826f289063ecb2edb", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/217b614322d60ac64f3bfca826f289063ecb2edb", "committedDate": "2020-07-09T04:13:47Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes"}, "afterCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/77e9de002ddbc0ad864a31ab431dc2bb061d1249", "committedDate": "2020-07-10T09:54:23Z", "message": "KOGITO-{2375,2376,2377} (untested)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Mjg5MTY0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-446289164", "createdAt": "2020-07-10T10:17:20Z", "commit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDoxNzoyMFrOGvyCyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDoyODoyMFrOGvyWig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1NjE2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    sh \"mvn -B clean install -DskipTests\"\n          \n          \n            \n                                    // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly\n          \n          \n            \n                                    sh \"mvn -B clean install -DskipTests\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452756169", "createdAt": "2020-07-10T10:17:20Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -29,14 +33,90 @@ pipeline {\n \n                     if (env.BRANCH_NAME != \"\") {\n                         // Switch to branch if not on a multibranch pipeline\n-                        env.BRANCH_NAME = params.BUILD_BRANCH_NAME\n+                        env.BRANCH_NAME = getBuildBranch()\n+                    }\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n+                    setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                    setDeployPropertyIfNeeded('release', isRelease())\n+                }\n+            }\n+        }\n+        stage('Clone repositories') { \n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-runtimes\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-apps\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+                // Use a separate dir for persistence to not overwrite the test results\n+                dir(\"kogito-examples-persistence\") {\n+                    checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", env.BRANCH_NAME, false))\n+                }\n+            }\n+        }\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config\"\n+                }\n+            }\n+        }\n+        stage('Update project version'){\n+            when {\n+                expression { return getProjectVersion() != '' }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.mvnVersionsSet(getProjectVersion())\n+                        sh \"mvn -B clean install -DskipTests\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1NzY2OA==", "bodyText": "I think we should have 3 different stages here, one for each project for the Merge PR", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452757668", "createdAt": "2020-07-10T10:20:40Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1ODU3Nw==", "bodyText": "push of a tag should be git push --tags\nand we should push the getGitTag()", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452758577", "createdAt": "2020-07-10T10:22:37Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Git tag') {\n+            when {\n+                expression { return getGitTag() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    tagLatest(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    tagLatest(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    tagLatest(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Prepare for snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Set next snapshot') {\n+            when {\n+                expression { return getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    sh \"mvn -B clean install -DskipTests\"\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                }\n+            }\n+        }\n+        stage('Create snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge snapshot PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    if (params.DEPLOY_BUILD_URL != null){\n+        sh \"wget ${params.DEPLOY_BUILD_URL}artifact/${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return \"\"\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != \"\"){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty(\"release\") == \"true\")\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty(\"PROJECT_VERSION\", \"project.version\")\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextSnapshot(getProjectVersion())\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != \"\" ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty(\"BUILD_BRANCH_NAME\", \"git.branch\")\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    checkout(githubscm.resolveRepository(repo, \"kiegroup\", getBuildBranch(), false))\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo) {\n+    githubscm.mergePR(getDeployProperty(\"${repo}.pr.link\"))\n+    githubscm.pushObject(\"origin\", getBuildBranch())\n+}\n+\n+void tagLatest(String repo) {\n+    githubscm.tagRepository(getGitTag(), BUILD_TAG)\n+    githubscm.pushObject(\"origin\", BUILD_TAG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1OTI5Mg==", "bodyText": "why tagLatest ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452759292", "createdAt": "2020-07-10T10:24:08Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Git tag') {\n+            when {\n+                expression { return getGitTag() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    tagLatest(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    tagLatest(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    tagLatest(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Prepare for snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Set next snapshot') {\n+            when {\n+                expression { return getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    sh \"mvn -B clean install -DskipTests\"\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                }\n+            }\n+        }\n+        stage('Create snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge snapshot PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    if (params.DEPLOY_BUILD_URL != null){\n+        sh \"wget ${params.DEPLOY_BUILD_URL}artifact/${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return \"\"\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != \"\"){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty(\"release\") == \"true\")\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty(\"PROJECT_VERSION\", \"project.version\")\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextSnapshot(getProjectVersion())\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != \"\" ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty(\"BUILD_BRANCH_NAME\", \"git.branch\")\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    checkout(githubscm.resolveRepository(repo, \"kiegroup\", getBuildBranch(), false))\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo) {\n+    githubscm.mergePR(getDeployProperty(\"${repo}.pr.link\"))\n+    githubscm.pushObject(\"origin\", getBuildBranch())\n+}\n+\n+void tagLatest(String repo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MDUxMw==", "bodyText": "I think we could have one stage by project doing those steps instead of having many staging for each action\nIt would be called something like Set and push next snapshot and include so:\n\nPrepare\nSet next snapshot\nCreate & Merge PR", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452760513", "createdAt": "2020-07-10T10:26:45Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Git tag') {\n+            when {\n+                expression { return getGitTag() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    tagLatest(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    tagLatest(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    tagLatest(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Prepare for snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Set next snapshot') {\n+            when {\n+                expression { return getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    sh \"mvn -B clean install -DskipTests\"\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                }\n+            }\n+        }\n+        stage('Create snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge snapshot PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MDgxNA==", "bodyText": "why do you checkout the getBuildBranch() after ? isn't it done by the first checkout ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452760814", "createdAt": "2020-07-10T10:27:26Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Git tag') {\n+            when {\n+                expression { return getGitTag() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    tagLatest(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    tagLatest(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    tagLatest(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Prepare for snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Set next snapshot') {\n+            when {\n+                expression { return getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    sh \"mvn -B clean install -DskipTests\"\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                }\n+            }\n+        }\n+        stage('Create snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge snapshot PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    if (params.DEPLOY_BUILD_URL != null){\n+        sh \"wget ${params.DEPLOY_BUILD_URL}artifact/${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return \"\"\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != \"\"){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty(\"release\") == \"true\")\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty(\"PROJECT_VERSION\", \"project.version\")\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextSnapshot(getProjectVersion())\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != \"\" ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty(\"BUILD_BRANCH_NAME\", \"git.branch\")\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    checkout(githubscm.resolveRepository(repo, \"kiegroup\", getBuildBranch(), false))\n+    sh \"git checkout ${getBuildBranch()}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2MTIyNg==", "bodyText": "why do we need to push after the merging of PR ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452761226", "createdAt": "2020-07-10T10:28:20Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Git tag') {\n+            when {\n+                expression { return getGitTag() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    tagLatest(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    tagLatest(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    tagLatest(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Prepare for snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Set next snapshot') {\n+            when {\n+                expression { return getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    sh \"mvn -B clean install -DskipTests\"\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                }\n+            }\n+        }\n+        stage('Create snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge snapshot PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    if (params.DEPLOY_BUILD_URL != null){\n+        sh \"wget ${params.DEPLOY_BUILD_URL}artifact/${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return \"\"\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != \"\"){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty(\"release\") == \"true\")\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty(\"PROJECT_VERSION\", \"project.version\")\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextSnapshot(getProjectVersion())\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != \"\" ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty(\"BUILD_BRANCH_NAME\", \"git.branch\")\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    checkout(githubscm.resolveRepository(repo, \"kiegroup\", getBuildBranch(), false))\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo) {\n+    githubscm.mergePR(getDeployProperty(\"${repo}.pr.link\"))\n+    githubscm.pushObject(\"origin\", getBuildBranch())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 243}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzU4MTU1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-446358155", "createdAt": "2020-07-10T12:24:54Z", "commit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNDo1NFrOGv1VdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNDo1NFrOGv1VdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDEwMA==", "bodyText": "build branch should not be empty anyway here or ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452810100", "createdAt": "2020-07-10T12:24:54Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDIyMDA1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-446422005", "createdAt": "2020-07-10T13:56:04Z", "commit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1NjowNFrOGv4WrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1NjowNFrOGv4WrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1OTU2NA==", "bodyText": "is that needed here ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r452859564", "createdAt": "2020-07-10T13:56:04Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                    if (getGitTag() != \"\"){\n+                        assert getBuildBranch() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge deploy PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Git tag') {\n+            when {\n+                expression { return getGitTag() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes\") {\n+                    tagLatest(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    tagLatest(\"kogito-apps\")\n+                }\n+                dir(\"kogito-examples\") {\n+                    tagLatest(\"kogito-examples\")\n+                }\n+            }\n+        }\n+        stage('Prepare for snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR()\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    prepareForPR()\n+                }\n+            }\n+        }\n+        stage('Set next snapshot') {\n+            when {\n+                expression { return getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    sh \"mvn -B clean install -DskipTests\"\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                }\n+                dir(\"kogito-examples-bot\") {\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                }\n+            }\n+        }\n+        stage('Create snapshot PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps-bot\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge snapshot PR') {\n+            when {\n+                expression {\n+                    return isRelease() && \n+                           getDeployProperty('kogito-runtimes.pr.link') != '' && \n+                           getDeployProperty('kogito-apps.pr.link') != '' && \n+                           getDeployProperty('kogito-examples.pr.link') != ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249"}, "originalPosition": 159}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77e9de002ddbc0ad864a31ab431dc2bb061d1249", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/77e9de002ddbc0ad864a31ab431dc2bb061d1249", "committedDate": "2020-07-10T09:54:23Z", "message": "KOGITO-{2375,2376,2377} (untested)"}, "afterCommit": {"oid": "f0ce05c97770dd50da910d8129c85f3b51de0740", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f0ce05c97770dd50da910d8129c85f3b51de0740", "committedDate": "2020-07-14T23:20:06Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0ce05c97770dd50da910d8129c85f3b51de0740", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f0ce05c97770dd50da910d8129c85f3b51de0740", "committedDate": "2020-07-14T23:20:06Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/21d95582c7d282aa8c18b36a7791e1d7e0124fc1", "committedDate": "2020-07-15T00:40:41Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Nzk5MzAx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-448799301", "createdAt": "2020-07-15T09:48:58Z", "commit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo0ODo1OFrOGx2tgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDowMDoyOFrOGx3ILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyOTc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             subject: \"${pipelineName} #${getBuildBranch()}\",\n          \n          \n            \n                                             subject: \"Release #${getBuildBranch()}\",\n          \n      \n    \n    \n  \n\nI don't remember if I asked for a change on that ...\nI think it would be good to add the Release in the subject and not put the pipeline name, so if other pipelines need also to notify, they can reuse the same stream.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454929794", "createdAt": "2020-07-15T09:48:58Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -111,41 +186,125 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Create PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n             steps {\n                 dir(\"kogito-runtimes\") {\n                     script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                        commitAndCreatePR(\"kogito-runtimes\")\n+                    }\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-apps\")\n+                    }\n+                }\n+                dir(\"kogito-examples\") {\n+                    script {\n+                        commitAndCreatePR(\"kogito-examples\")\n                     }\n                 }\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Deploy artifacts') {\n             steps {\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                    }\n+                }\n                 dir(\"kogito-apps\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n-            }\n-        }\n-        stage('Deploy kogito-examples') {\n-            steps {\n                 dir(\"kogito-examples\") {\n                     script {\n                         maven.runMavenWithSubmarineSettings('clean deploy', true)\n                     }\n                 }\n             }\n         }\n+        stage('Get staging repository URL') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes deploy pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs the staging repository URL. Please provide it at: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzMTgzNA==", "bodyText": "sorry for being a PITA, but could we also add a STAGING_REPO_URL parameter that would override this deploy property if set ? I think it could be useful...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454931834", "createdAt": "2020-07-15T09:52:22Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzMjE0NQ==", "bodyText": "Same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             subject: \"${pipelineName} #${getBuildBranch()}\",\n          \n          \n            \n                                             subject: \"Release #${getBuildBranch()}\",", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454932145", "createdAt": "2020-07-15T09:52:54Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzMzA2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n          \n          \n            \n                                    emailext body: \"${getProjectVersion()} artifacts are ready for promotion.\\n\" +", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454933066", "createdAt": "2020-07-15T09:54:33Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNDAxMw==", "bodyText": "we would still merge if no git tag I think.\n(but indeed the other way would not be wise)\nI think we can just check isRelease() here and do accordingly in the steps", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454934013", "createdAt": "2020-07-15T09:56:12Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNDMwMA==", "bodyText": "no git tag check here then ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454934300", "createdAt": "2020-07-15T09:56:44Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNDM0MA==", "bodyText": "no git tag check here then ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454934340", "createdAt": "2020-07-15T09:56:48Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNDg4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            expression { return isRelease() && getProjectVersion() != \"\" }\n          \n          \n            \n                            expression { return isRelease() }\n          \n      \n    \n    \n  \n\nproject version cannot be empty if release :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454934883", "createdAt": "2020-07-15T09:57:45Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Create/merge runtimes snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNTE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stage('Create/merge runtimes snapshot PR'){\n          \n          \n            \n                    stage('Set runtimes next snapshot version'){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454935155", "createdAt": "2020-07-15T09:58:11Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Create/merge runtimes snapshot PR'){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNTQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            expression { return isRelease() && getProjectVersion() != \"\" }\n          \n          \n            \n                            expression { return isRelease() }", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454935482", "createdAt": "2020-07-15T09:58:42Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Create/merge runtimes snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR(\"kogito-runtimes\")\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly\n+                    sh \"mvn -B clean install -DskipTests\"\n+                    commitAndCreatePR(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        if (getDeployProperty('kogito-runtimes.pr.link') != ''){\n+                            mergeAndPush(\"kogito-runtimes\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create/merge apps snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNTY4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stage('Create/merge apps snapshot PR'){\n          \n          \n            \n                    stage('Set apps next snapshot version'){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454935686", "createdAt": "2020-07-15T09:59:03Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Create/merge runtimes snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR(\"kogito-runtimes\")\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly\n+                    sh \"mvn -B clean install -DskipTests\"\n+                    commitAndCreatePR(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        if (getDeployProperty('kogito-runtimes.pr.link') != ''){\n+                            mergeAndPush(\"kogito-runtimes\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create/merge apps snapshot PR'){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNjU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stage('Create/merge examples snapshot PR'){\n          \n          \n            \n                    stage('Set examples next snapshot version'){", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454936551", "createdAt": "2020-07-15T10:00:20Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Create/merge runtimes snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR(\"kogito-runtimes\")\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly\n+                    sh \"mvn -B clean install -DskipTests\"\n+                    commitAndCreatePR(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        if (getDeployProperty('kogito-runtimes.pr.link') != ''){\n+                            mergeAndPush(\"kogito-runtimes\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create/merge apps snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR(\"kogito-apps\")\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                    commitAndCreatePR(\"kogito-apps\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        if (getDeployProperty('kogito-apps.pr.link') != ''){\n+                            mergeAndPush(\"kogito-apps\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create/merge examples snapshot PR'){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNjYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            expression { return isRelease() && getProjectVersion() != \"\" }\n          \n          \n            \n                            expression { return isRelease() }", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r454936621", "createdAt": "2020-07-15T10:00:28Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,272 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7 && kie-mem16g'\n+    }\n+    environment {\n+        PROPERTIES_FILE_NAME = \"deployment.properties\"\n+        BOT_CREDENTIALS_ID = \"bsig-gh-bot\"\n+    }\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    if (params.DISPLAY_NAME != \"\") {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes promote pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\\n\" +\n+                                 \"Please confirm that the staging repository has been promoted here: ${env.BUILD_URL}input\",\n+                                 subject: \"${pipelineName} #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: \"Has the staging repository been promoted?\", ok: \"Yes\"\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() &&\n+                           getDeployProperty('kogito-runtimes.pr.link') != '' &&\n+                           getGitTag() != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-runtimes\") {\n+                    checkoutRepo(\"kogito-runtimes\")\n+                    mergeAndPush(\"kogito-runtimes\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-apps.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-apps\") {\n+                    checkoutRepo(\"kogito-apps\")\n+                    mergeAndPush(\"kogito-apps\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression {\n+                    return isRelease() && getDeployProperty('kogito-examples.pr.link') != ''\n+                }\n+            }\n+            steps{\n+                dir(\"kogito-examples\") {\n+                    checkoutRepo(\"kogito-examples\")\n+                    mergeAndPush(\"kogito-examples\")\n+                    tagLatest()\n+                }\n+            }\n+        }\n+        stage('Create/merge runtimes snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-runtimes-bot\") {\n+                    prepareForPR(\"kogito-runtimes\")\n+                    maven.mvnVersionsSet(getSnapshotVersion())\n+                    // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly\n+                    sh \"mvn -B clean install -DskipTests\"\n+                    commitAndCreatePR(\"kogito-runtimes\")\n+                }\n+                dir(\"kogito-runtimes\") {\n+                    script {\n+                        if (getDeployProperty('kogito-runtimes.pr.link') != ''){\n+                            mergeAndPush(\"kogito-runtimes\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create/merge apps snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }\n+            }\n+            steps {\n+                dir(\"kogito-apps-bot\") {\n+                    prepareForPR(\"kogito-apps\")\n+                    maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion())\n+                    commitAndCreatePR(\"kogito-apps\")\n+                }\n+                dir(\"kogito-apps\") {\n+                    script {\n+                        if (getDeployProperty('kogito-apps.pr.link') != ''){\n+                            mergeAndPush(\"kogito-apps\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        stage('Create/merge examples snapshot PR'){\n+            when {\n+                expression { return isRelease() && getProjectVersion() != \"\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDQ3MDgy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-449047082", "createdAt": "2020-07-15T14:59:10Z", "commit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1OToxMFrOGyCWQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1OToxMFrOGyCWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDQ0OA==", "bodyText": "what about copying the Jenkinsfile.promote to resources before compiling and testing, via copy-resources plugin ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r455120448", "createdAt": "2020-07-15T14:59:10Z", "author": {"login": "radtriste"}, "path": "jenkins-spock-tests/src/test/resources/Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1 @@\n+../../../../Jenkinsfile.promote", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21d95582c7d282aa8c18b36a7791e1d7e0124fc1", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/21d95582c7d282aa8c18b36a7791e1d7e0124fc1", "committedDate": "2020-07-15T00:40:41Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "df7f89d7768ae51ce25db80fe09ebde0b204eda4", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/df7f89d7768ae51ce25db80fe09ebde0b204eda4", "committedDate": "2020-07-16T05:41:43Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df7f89d7768ae51ce25db80fe09ebde0b204eda4", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/df7f89d7768ae51ce25db80fe09ebde0b204eda4", "committedDate": "2020-07-16T05:41:43Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "3990c7dfee96b4efb74c80ee92467766a4f0f3c5", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3990c7dfee96b4efb74c80ee92467766a4f0f3c5", "committedDate": "2020-07-16T14:42:03Z", "message": "Implement Tristan's requested fixes on 7/15 (2)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3990c7dfee96b4efb74c80ee92467766a4f0f3c5", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3990c7dfee96b4efb74c80ee92467766a4f0f3c5", "committedDate": "2020-07-16T14:42:03Z", "message": "Implement Tristan's requested fixes on 7/15 (2)"}, "afterCommit": {"oid": "cee377ee556b2d16969d1b6fb7b43a4d920a9622", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cee377ee556b2d16969d1b6fb7b43a4d920a9622", "committedDate": "2020-07-16T14:45:52Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cee377ee556b2d16969d1b6fb7b43a4d920a9622", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cee377ee556b2d16969d1b6fb7b43a4d920a9622", "committedDate": "2020-07-16T14:45:52Z", "message": "KOGITO-2286 Modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "cb49119d71ab556b6c92011c059db5da8cdd44f9", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb49119d71ab556b6c92011c059db5da8cdd44f9", "committedDate": "2020-07-16T16:22:52Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb49119d71ab556b6c92011c059db5da8cdd44f9", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb49119d71ab556b6c92011c059db5da8cdd44f9", "committedDate": "2020-07-16T16:22:52Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "68420d1f6ce04879efb7ce0290beea50f26ad014", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/68420d1f6ce04879efb7ce0290beea50f26ad014", "committedDate": "2020-07-20T23:02:19Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTQzNDk3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-453143497", "createdAt": "2020-07-22T09:21:14Z", "commit": {"oid": "68420d1f6ce04879efb7ce0290beea50f26ad014"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMToxNFrOG1aKbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMToxNFrOG1aKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1NjM2Ng==", "bodyText": "wasn't there a branch problem here ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r458656366", "createdAt": "2020-07-22T09:21:14Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.deploy.new", "diffHunk": "@@ -111,41 +156,152 @@ pipeline {\n                 }\n             }\n         }\n-        stage('Deploy kogito-runtimes') {\n+        stage('Deploy artifacts') {\n             steps {\n-                dir(\"kogito-runtimes\") {\n-                    script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n-                    }\n-                }\n+                mavenDeploy(\"kogito-runtimes\")\n+                mavenDeploy(\"kogito-apps\")\n+                mavenDeploy(\"kogito-examples\")\n             }\n         }\n-        stage('Deploy kogito-apps') {\n+        stage('Get staging repository URL') {\n+            when {\n+                expression { return isRelease() }\n+            }\n             steps {\n-                dir(\"kogito-apps\") {\n-                    script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                script {\n+                    def pipelineName = \"Kogito Runtimes deploy pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs the staging repository URL. Please provide it at: ${env.BUILD_URL}input\",\n+                                 subject: \"Release #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n                     }\n+                    deployProperties[\"staging-repo.url\"] = input(message: \"Enter staging repository URL:\", parameters: [string(name: 'STAGING_REPO_URL')])\n                 }\n             }\n         }\n-        stage('Deploy kogito-examples') {\n+        stage('Create PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n             steps {\n-                dir(\"kogito-examples\") {\n-                    script {\n-                        maven.runMavenWithSubmarineSettings('clean deploy', true)\n+                commitAndCreatePR(\"kogito-runtimes\")\n+                commitAndCreatePR(\"kogito-apps\")\n+                commitAndCreatePR(\"kogito-examples\")\n+            }\n+        }\n+        stage('Get staging repository URL') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = \"Kogito Runtimes deploy pipeline\"\n+                    withCredentials([string(credentialsId: \"KOGITO_CI_EMAIL_TO\", variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs the staging repository URL. Please provide it at: ${env.BUILD_URL}input\",\n+                                 subject: \"Release #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n                     }\n+                    deployProperties[\"staging-repo.url\"] = input(message: \"Enter staging repository URL:\", parameters: [string(name: 'STAGING_REPO_URL')])\n                 }\n             }\n         }\n     }\n     post {\n         always {\n+            script {\n+                def propertiesStr = deployProperties.collect{ entry ->  \"${entry.key}=${entry.value}\" }.join(\"\\n\")\n+                writeFile(text: propertiesStr, file: \"deployment.properties\")\n+                archiveArtifacts(artifacts: \"deployment.properties\")\n+            }\n             cleanWs()\n         }\n     }\n }\n \n void saveReports(boolean allowEmpty=false){\n     junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty\n-}\n\\ No newline at end of file\n+}\n+\n+void cloneRepo(String repo, String dirName=repo) {\n+    dir(dirName) {\n+        checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68420d1f6ce04879efb7ce0290beea50f26ad014"}, "originalPosition": 235}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68420d1f6ce04879efb7ce0290beea50f26ad014", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/68420d1f6ce04879efb7ce0290beea50f26ad014", "committedDate": "2020-07-20T23:02:19Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "ba7f3783b4a8571ac94faf4691a1c6d3b92ee927", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ba7f3783b4a8571ac94faf4691a1c6d3b92ee927", "committedDate": "2020-07-29T04:18:09Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba7f3783b4a8571ac94faf4691a1c6d3b92ee927", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ba7f3783b4a8571ac94faf4691a1c6d3b92ee927", "committedDate": "2020-07-29T04:18:09Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}, "afterCommit": {"oid": "4a516b9209d9ce09261dfffed66717f18a47108e", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4a516b9209d9ce09261dfffed66717f18a47108e", "committedDate": "2020-08-04T13:30:21Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e12e8aa71767dac0cb3429c1a8d4f7aa4cc068ae", "author": {"user": {"login": "radtriste", "name": "Tristan Radisson"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e12e8aa71767dac0cb3429c1a8d4f7aa4cc068ae", "committedDate": "2020-08-10T14:07:07Z", "message": "Adjustments for release pipeline (#15)"}, "afterCommit": {"oid": "699e08791baa45cfebd755a427393fd3888777d9", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/699e08791baa45cfebd755a427393fd3888777d9", "committedDate": "2020-08-10T14:10:58Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan:\nhttps://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "699e08791baa45cfebd755a427393fd3888777d9", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/699e08791baa45cfebd755a427393fd3888777d9", "committedDate": "2020-08-10T14:10:58Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan:\nhttps://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}, "afterCommit": {"oid": "1399cada918c089afb7c3f0464f65a89b31b431e", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1399cada918c089afb7c3f0464f65a89b31b431e", "committedDate": "2020-08-10T14:14:32Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan: https://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Mjc0MTU4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-464274158", "createdAt": "2020-08-10T14:22:36Z", "commit": {"oid": "1399cada918c089afb7c3f0464f65a89b31b431e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoyMjozNlrOG-QuBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoyMjozNlrOG-QuBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzODgyMQ==", "bodyText": "@radtriste Do we actually need this block?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r467938821", "createdAt": "2020-08-10T14:22:36Z", "author": {"login": "Kevin-Mok"}, "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,375 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+pipelineProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Deploy job url to retrieve deployment.properties\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        \n+        // Git information which can override `deployment.properties`\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')\n+        \n+        // Release information which can override `deployment.properties`\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+    }\n+\n+    environment {\n+        PROPERTIES_FILE_NAME = 'deployment.properties'\n+        \n+        AUTHOR_CREDS_ID = 'kie-ci'\n+        GITHUB_TOKEN_CREDS_ID = 'kie-ci2-token'\n+        BOT_CREDENTIALS_ID = 'bsig-gh-bot'\n+\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+        \n+        GITHUB_CLI_VERSION = '0.11.1'\n+    }\n+\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    installGithubCLI()\n+                }\n+            }\n+        }\n+        stage('Is staging repository promoted?') {\n+            when {\n+                expression { return isRelease() && getStagingRepoUrl() != '' }\n+            }\n+            steps {\n+                script {\n+                    def pipelineName = 'Kogito Runtimes promote pipeline'\n+                    withCredentials([string(credentialsId: 'KOGITO_CI_EMAIL_TO', variable: 'ZULIP_EMAIL')]) {\n+                        emailext body: \"${getProjectVersion()} artifacts are ready for promotion.\\n\" +\n+                                 \"The staging repository can be found at: ${getStagingRepoUrl()}\\n\" +\n+                                 \"Please promote the repository and then confirm the promotion here: ${env.BUILD_URL}input\",\n+                                 subject: \"Kogito Release on #${getBuildBranch()}\",\n+                                 to: ZULIP_EMAIL\n+                    }\n+                    input message: 'Has the staging repository been promoted?', ok: 'Yes'\n+                }\n+            }\n+        }\n+        stage('Merge runtimes deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('kogito-runtimes') {\n+                        checkoutRepo('kogito-runtimes')\n+                        mergeAndPush('kogito-runtimes', getDeployPrLink('kogito-runtimes'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge apps deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('kogito-apps') {\n+                        checkoutRepo('kogito-apps')\n+                        mergeAndPush('kogito-apps', getDeployPrLink('kogito-apps'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+        stage('Merge examples deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('kogito-examples') {\n+                        checkoutRepo('kogito-examples')\n+                        mergeAndPush('kogito-examples', getDeployPrLink('kogito-examples'))\n+                        tagLatest()\n+\n+\n+                        githubscm.createBranch('stable')\n+                        forcePushProtectedBranch('kogito-examples', 'stable', 'master')\n+                    }\n+                }\n+            }\n+        }\n+        stage('Set runtimes next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('kogito-runtimes-bot') {\n+                        prepareForPR('kogito-runtimes')\n+\n+                        // first build&install the current version (usually SNAPSHOT) as it is needed later by other repos\n+                        sh 'mvn -B -U -Dfull clean install -DskipTests'\n+                        maven.mvnVersionsSet(getSnapshotVersion(), true)\n+                        // Step needed to have runtimes artifacts into the local repository, in order to set apps version correctly\n+                        sh 'mvn -B clean install -DskipTests'\n+\n+                        commitAndCreatePR('kogito-runtimes')\n+                    }\n+                    dir('kogito-runtimes') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('kogito-runtimes', getPipelinePrLink('kogito-runtimes'))\n+                    }\n+                }\n+            }\n+        }\n+        stage('Set apps next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('kogito-apps-bot') {\n+                        prepareForPR('kogito-apps')\n+                        maven.mvnVersionsUpdateParentAndChildModules(getSnapshotVersion(), true)\n+                        commitAndCreatePR('kogito-apps')\n+                    }\n+                    dir('kogito-apps') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('kogito-apps', getPipelinePrLink('kogito-apps'))\n+                    }\n+                }\n+            }\n+        }\n+        stage('Set examples next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('kogito-examples-bot') {\n+                        prepareForPR('kogito-examples')\n+                        maven.mvnVersionsSet(getSnapshotVersion(), true)\n+                        commitAndCreatePR('kogito-examples')\n+                    }\n+                    dir('kogito-examples') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('kogito-examples', getPipelinePrLink('kogito-examples'))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    String deployUrl = params.DEPLOY_BUILD_URL\n+    if (deployUrl != ''){\n+        if(!deployUrl.endsWith('/')){\n+            deployUrl += '/'\n+        }\n+        sh \"wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join('\\n')\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return ''\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != ''){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty('release') == 'true')\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')\n+}\n+\n+String getSnapshotVersion() {\n+    return util.getNextVersion(getProjectVersion(), 'micro')\n+}\n+\n+String getGitTag() {\n+    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()\n+}\n+\n+String getBuildBranch() {\n+    return getParamOrDeployProperty('BUILD_BRANCH_NAME', 'git.branch')\n+}\n+\n+String getGitAuthor() {\n+    return getParamOrDeployProperty('GIT_AUTHOR', 'git.author')\n+}\n+\n+String getStagingRepoUrl(){\n+    return getParamOrDeployProperty('STAGING_REPO_URL', 'staging-repo.url')\n+}\n+\n+String getDeployPrLink(String repo){\n+    return getDeployProperty(\"${repo}.pr.link\")\n+}\n+\n+String getPipelinePrLink(String repo){\n+    return pipelineProperties[\"${repo}.pr.link\"]\n+}\n+\n+void setPipelinePrLink(String repo, String value){\n+    pipelineProperties[\"${repo}.pr.link\"] = value\n+}\n+\n+String getSnapshotBranch(){\n+    return \"${getSnapshotVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}\"\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Git\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void checkoutRepo(String repo) {\n+    deleteDir()\n+    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))\n+    // need to manually checkout branch since on a detached branch after checkout command\n+    sh \"git checkout ${getBuildBranch()}\"\n+}\n+\n+void mergeAndPush(String repo, String prLink) {\n+    if (prLink != '') {\n+        githubscm.mergePR(prLink, env.AUTHOR_CREDS_ID)\n+        githubscm.pushObject('origin', getBuildBranch(), env.AUTHOR_CREDS_ID)\n+    }\n+}\n+\n+void tagLatest() {\n+    if (getGitTag() != '') {\n+        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)\n+        githubscm.pushObject('origin', \"--tags ${getGitTag()}\", env.AUTHOR_CREDS_ID)\n+    }\n+}\n+\n+void prepareForPR(String repo) {\n+    checkoutRepo(repo)\n+    githubscm.forkRepo(env.BOT_CREDENTIALS_ID)\n+    githubscm.createBranch(getSnapshotBranch())\n+}\n+\n+void addNotIgnoredPoms() {\n+    // based on https://stackoverflow.com/a/59888964/8811872\n+    sh '''\n+    find . -type f -name 'pom.xml' > found_poms.txt\n+    poms_to_add=\"\"\n+    while IFS= read -r pom; do\n+        if ! git check-ignore -q \"\\$pom\"; then\n+            poms_to_add=\"\\$poms_to_add \\$pom\"\n+        fi\n+    done < found_poms.txt\n+    rm found_poms.txt\n+    git add \\$poms_to_add\n+    '''\n+}\n+\n+void commitAndCreatePR(String repo) {\n+    def commitMsg = \"Update snapshot version to ${getSnapshotBranch()}\"\n+    def prBody = \"Generated by build ${BUILD_TAG}: ${BUILD_URL}\"\n+    // Not using githubscm.commitChanges() because globbing won't work.\n+    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738\n+    addNotIgnoredPoms()\n+    sh \"git commit -m '${commitMsg}'\"\n+    githubscm.pushObject('origin', getSnapshotBranch(), env.BOT_CREDENTIALS_ID)\n+    setPipelinePrLink(repo, githubscm.createPR(commitMsg, prBody, getBuildBranch(), env.BOT_CREDENTIALS_ID))\n+}\n+\n+void installGithubCLI() {\n+    sh \"\"\"\n+    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz\n+    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz\n+    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .\n+    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*\n+    \"\"\"\n+}\n+\n+void setDefaultBranch(String repo, String defaultBranch) {\n+    withCredentials([usernamePassword(credentialsId: env.AUTHOR_CREDS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1399cada918c089afb7c3f0464f65a89b31b431e"}, "originalPosition": 352}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1399cada918c089afb7c3f0464f65a89b31b431e", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1399cada918c089afb7c3f0464f65a89b31b431e", "committedDate": "2020-08-10T14:14:32Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan: https://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}, "afterCommit": {"oid": "eb9c4434f34e085a8c65632407e9b5ea9776d8c7", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/eb9c4434f34e085a8c65632407e9b5ea9776d8c7", "committedDate": "2020-08-10T15:22:28Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan: https://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "847701617ec44144609f60fc395a1f48401b3308", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/847701617ec44144609f60fc395a1f48401b3308", "committedDate": "2020-08-10T15:23:47Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan: https://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb9c4434f34e085a8c65632407e9b5ea9776d8c7", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/eb9c4434f34e085a8c65632407e9b5ea9776d8c7", "committedDate": "2020-08-10T15:22:28Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan: https://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}, "afterCommit": {"oid": "847701617ec44144609f60fc395a1f48401b3308", "author": {"user": {"login": "Kevin-Mok", "name": "Kevin Mok"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/847701617ec44144609f60fc395a1f48401b3308", "committedDate": "2020-08-10T15:23:47Z", "message": "KOGITO-2286 Pipeline modifications for release process\n\nThis is a commit for the following issues:\n- KOGITO-2286 Kogito Runtimes deploy pipeline: Add release parameter and staging repository information\n- KOGITO-2414 Kogito Runtimes deploy pipeline: Add \"Set mvn version\" step\n- KOGITO-2415 Kogito Runtimes deploy pipeline: Add \"Create PR\" step\n- KOGITO-2287 Kogito Runtimes promote pipeline: Create Jenkinsfile for promoting runtimes\n- KOGITO-2375 Kogito Runtimes promote pipeline: Handling of Merge PR\n- KOGITO-2376 Kogito Runtimes promote pipeline: Handling of Git tagging\n- KOGITO-2377 Kogito Runtimes promote pipeline: Set next snapshot\n\nTesting/adjustments for the release pipeline were done by Tristan: https://github.com/Kevin-Mok/kogito-runtimes/pull/15\n\nCo-authored-by: Tristan Radisson <tristan.radisson@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Njc1NjI5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-465675629", "createdAt": "2020-08-12T07:56:31Z", "commit": {"oid": "847701617ec44144609f60fc395a1f48401b3308"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Njk0NDA3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-465694407", "createdAt": "2020-08-12T08:23:13Z", "commit": {"oid": "847701617ec44144609f60fc395a1f48401b3308"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODcxNDEx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/570#pullrequestreview-465871411", "createdAt": "2020-08-12T12:33:49Z", "commit": {"oid": "847701617ec44144609f60fc395a1f48401b3308"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3566, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}