{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODE1NzU2", "number": 486, "title": "KOGITO-2040, KOGITO-2041, KOGITO-2042, KOGITO-2043, KOGITO-2044", "bodyText": "Here are few commits that cover enhancement that allows more flexible use of the processes\n\nKOGITO-2040 - Implemented getScheduledTime for JobsService to align it with actual capability of the jobs-service module,\nKOGITO-2041 - Expose process name via Process interface to be able to provide more human readable version of the process\nKOGITO-2042 - Pass vairable definitions via BpmnProcess and BpmnVariables, allow to filter variables on BpmnVariables\nKOGITO-2043 - Externalize process instance description via function interface so different expression evaluators can be used\nKOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation\n\n@cristianonicolai here are both PR and Jiras we talked about.q\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-04-29T16:19:39Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486", "merged": true, "mergeCommit": {"oid": "6cafcb83cfc031568424c899714426c21a8ba1a3"}, "closed": true, "closedAt": "2020-05-08T11:24:03Z", "author": {"login": "mswiderski"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccjxctgFqTQwMzE0OTU5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABce_AgdgFqTQwNzU4NzYwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTQ5NTkx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-403149591", "createdAt": "2020-04-30T01:37:54Z", "commit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTozNzo1NFrOGOW1qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjozNToyM1rOGOXstw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQzNQ==", "bodyText": "can this be reduced a bit using a more functional style?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417707435", "createdAt": "2020-04-30T01:37:54Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQ2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n          \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417707462", "createdAt": "2020-04-30T01:38:02Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTc5Ng==", "bodyText": "could be check is equals to job.getExpirationTime?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417715796", "createdAt": "2020-04-30T02:11:49Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n          \n          \n            \n                    AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417715896", "createdAt": "2020-04-30T02:12:19Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjE0Mw==", "bodyText": "job variable not used I guess in this case", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417716143", "createdAt": "2020-04-30T02:13:15Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNjM2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Job foundJob = restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id);\n          \n          \n            \n                        return restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id).getExpirationTime();", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417716367", "createdAt": "2020-04-30T02:14:06Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-springboot-addon/src/main/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsService.java", "diffHunk": "@@ -100,8 +104,21 @@ public boolean cancelJob(String id) {\n             \n             return true;\n         } catch (RestClientException e) {\n-            LOGGER.debug(\"Exceltion thrown during canceling of job {}\", id, e);\n+            LOGGER.debug(\"Exception thrown during canceling of job {}\", id, e);\n             return false;\n         }\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        try {\n+            Job foundJob = restTemplate.getForObject(getJobsServiceUri() + \"/{id}\", Job.class, id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzA4Nw==", "bodyText": "equals to job.getExpirationTime?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417717087", "createdAt": "2020-04-30T02:17:08Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java", "diffHunk": "@@ -86,4 +90,28 @@ void testCancelJob() {\n         tested.cancelJob(\"123\");\n         verify(restTemplate).delete(tested.getJobsServiceUri() + \"/{id}\", \"123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime() {\n+        \n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        \n+        when(restTemplate.getForObject(any(), any(), anyString())).thenReturn(job);\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzE2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThatThrownBy(() -> tested.getScheduledTime(\"123\"))\n          \n          \n            \n                    assertThatThrownBy(() -> tested.getScheduledTime(\"123\")).isInstanceOf(JobNotFoundException.class);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417717166", "createdAt": "2020-04-30T02:17:30Z", "author": {"login": "cristianonicolai"}, "path": "addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java", "diffHunk": "@@ -86,4 +90,28 @@ void testCancelJob() {\n         tested.cancelJob(\"123\");\n         verify(restTemplate).delete(tested.getJobsServiceUri() + \"/{id}\", \"123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime() {\n+        \n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        \n+        when(restTemplate.getForObject(any(), any(), anyString())).thenReturn(job);\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(restTemplate).getForObject(tested.getJobsServiceUri() + \"/{id}\", Job.class, \"123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound() {\n+\n+        when(restTemplate.getForObject(any(), any(), anyString())).thenThrow(NotFound.class);\n+        \n+        assertThatThrownBy(() -> tested.getScheduledTime(\"123\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODA0OA==", "bodyText": "@mswiderski is expected that only one instance of ContextContainer?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718048", "createdAt": "2020-04-30T02:21:16Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -661,4 +663,28 @@ protected String retrieveDataType(String itemSubjectRef, String dtype, Extensibl\n         \n         return null;\n     }\n+    \n+    \n+    /**\n+     * Finds the right variable by its name to make sure that when given as id it will be also matched\n+     * @param variableName name or id of the variable\n+     * @param parser parser instance\n+     * @return returns found variable name or given 'variableName' otherwise\n+     */\n+    protected String findVariable(String variableName, final ExtensibleXmlParser parser) {\n+        if (variableName == null) {\n+            return null;\n+        }\n+        List<?> parents = parser.getParents();\n+        \n+        for (Object parent : parents) {\n+            if (parent instanceof ContextContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODI3OQ==", "bodyText": "can you add the import for org.jbpm.workflow.core.node.Transformation", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718279", "createdAt": "2020-04-30T02:22:12Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +151,12 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)endNode.getMetaData().get(\"Transformation\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODUwMA==", "bodyText": "would this mean that mvel expressions would not work any more, something that can be dropped?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718500", "createdAt": "2020-04-30T02:23:06Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +151,12 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-                actions.add(new DroolsConsequenceAction(\"mvel\",signalExpression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODcwOQ==", "bodyText": "add import for org.jbpm.workflow.core.node.Transformation", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417718709", "createdAt": "2020-04-30T02:23:56Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -207,18 +210,9 @@ public void handleSignalNode(final Node node, final Element element,\n \t\t\t\t    signalName = \"ASYNC-\" + signalName;\n \t\t\t\t}\n \n-\t\t\t\tString signalExpression = getSignalExpression(actionNode, signalName, \"tVariable\");\n-\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"+\n-\t\t\t\t\t\t\t\tsignalExpression));\n+\t\t\t\tDroolsConsequenceAction action =  new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)actionNode.getMetaData().get(\"Transformation\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTA0OA==", "bodyText": "review code format also please", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719048", "createdAt": "2020-04-30T02:25:23Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -207,18 +210,9 @@ public void handleSignalNode(final Node node, final Element element,\n \t\t\t\t    signalName = \"ASYNC-\" + signalName;\n \t\t\t\t}\n \n-\t\t\t\tString signalExpression = getSignalExpression(actionNode, signalName, \"tVariable\");\n-\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"+\n-\t\t\t\t\t\t\t\tsignalExpression));\n+\t\t\t\tDroolsConsequenceAction action =  new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new SignalProcessInstanceAction(signalName, variable, (String) actionNode.getMetaData(\"customScope\"), (org.jbpm.workflow.core.node.Transformation)actionNode.getMetaData().get(\"Transformation\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxODcwOQ=="}, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTExMA==", "bodyText": "code format", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719110", "createdAt": "2020-04-30T02:25:42Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -259,34 +253,10 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n \t\t\t\tactionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n \t\t\t\tactionNode.setMetaData(\"TriggerRef\", message.getName());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+\t\t\t\t\n+\t\t\t\tDroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");\n+                action.setMetaData(\"Action\", new HandleMessageAction(message.getType(), variable, (Transformation) actionNode.getMetaData().get(\"Transformation\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTQ1Mg==", "bodyText": "nice!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719452", "createdAt": "2020-04-30T02:27:09Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ScriptTaskHandler.java", "diffHunk": "@@ -38,7 +38,20 @@\n import org.xml.sax.SAXException;\n \n public class ScriptTaskHandler extends AbstractNodeHandler {\n-\t\n+\n+    private static Map<String, String> SUPPORTED_SCRIPT_FORMATS = new HashMap<>();\n+\n+    static {\n+        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.JAVA_LANGUAGE, JavaDialect.ID);\n+        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.JAVASCRIPT_LANGUAGE, \"JavaScript\");\n+        SUPPORTED_SCRIPT_FORMATS.put(XmlBPMNProcessDumper.FEEL_LANGUAGE, \"FEEL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxOTc3OA==", "bodyText": "use a collect to map maybe?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417719778", "createdAt": "2020-04-30T02:28:37Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/kie/kogito/process/bpmn2/BpmnVariables.java", "diffHunk": "@@ -54,8 +69,23 @@ public void fromMap(Map<String, Object> vs) {\n         variables.putAll(vs);\n     }\n \n+    public List<Variable> definitions() {\n+        return definitions;\n+    }\n+\n     @Override\n     public Map<String, Object> toMap() {\n         return Collections.unmodifiableMap(variables);\n     }\n+    \n+    public Map<String, Object> toMap(Predicate<Variable> filter) {\n+        Map<String, Object> filteredVariables = new HashMap<>();\n+        \n+        definitions.stream()\n+            .filter(filter)\n+            .filter(v -> variables.containsKey(v.getName()))\n+            .forEach(v -> filteredVariables.put(v.getName(), this.variables.get(v.getName())));       ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (id.equals(nameOrId) || name.equals(nameOrId)) {\n          \n          \n            \n                    return (id.equals(nameOrId) || name.equals(nameOrId))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417720318", "createdAt": "2020-04-30T02:30:31Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -164,4 +163,12 @@ public String toString() {\n     public boolean hasTag(String tagName) {\n         return getTags().contains(tagName);\n     }\n+    \n+    public boolean matchyIdOrName(String nameOrId) {\n+        if (id.equals(nameOrId) || name.equals(nameOrId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDQ1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), parameters);\n          \n          \n            \n                \t\treturn transformer.transform(transformation.getCompiledExpression(), parameters);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417720459", "createdAt": "2020-04-30T02:31:01Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java", "diffHunk": "@@ -48,7 +49,14 @@ public Object transformEvent(Object event) {\n \t\t}\n \t\tDataTransformer transformer = DataTransformerRegistry.get().find(transformation.getLanguage());\n     \tif (transformer != null) {\n-    \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), Collections.singletonMap(name, event));\n+    \t    Map<String, Object> parameters = null;\n+    \t    if (event instanceof Map) {\n+    \t        parameters = (Map) event;\n+    \t    } else {\n+    \t        parameters = Collections.singletonMap(name, event);\n+    \t    }\n+    \t    \n+    \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDkwNw==", "bodyText": "add some imports where applicable", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417720907", "createdAt": "2020-04-30T02:32:44Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/actions/HandleEscalationAction.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.process.instance.impl.actions;\n+\n+import java.io.Serializable;\n+\n+import org.jbpm.process.core.event.EventTransformerImpl;\n+import org.jbpm.process.instance.context.exception.ExceptionScopeInstance;\n+import org.jbpm.process.instance.impl.Action;\n+import org.jbpm.workflow.instance.NodeInstance;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+public class HandleEscalationAction implements Action, Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private String faultName;\n+    private String variableName;\n+\n+    public HandleEscalationAction(String faultName, String variableName) {\n+        this.faultName = faultName;\n+        this.variableName = variableName;\n+    }\n+\n+    public void execute(ProcessContext context) throws Exception {\n+        ExceptionScopeInstance scopeInstance = (ExceptionScopeInstance) ((NodeInstance) context.getNodeInstance()).resolveContextInstance(org.jbpm.process.core.context.exception.ExceptionScope.EXCEPTION_SCOPE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMTUyNw==", "bodyText": "code formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r417721527", "createdAt": "2020-04-30T02:35:23Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -60,21 +60,21 @@\n \n public abstract class AbstractProcessInstance<T extends Model> implements ProcessInstance<T> {\n \n-    private final T variables;\n-    private final AbstractProcess<T> process;\n-    private final ProcessRuntime rt;\n-    private org.kie.api.runtime.process.ProcessInstance legacyProcessInstance;\n-    \n-    private Integer status;\n-    private String id;\n-    private String businessKey;\n-    private String description;\n-    \n-    private ProcessError processError;\n-    \n-    private Supplier<org.kie.api.runtime.process.ProcessInstance> reloadSupplier;\n-    \n-    private CompletionEventListener completionEventListener = new CompletionEventListener();\n+\tprotected final T variables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958", "committedDate": "2020-04-29T16:14:01Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}, "afterCommit": {"oid": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "committedDate": "2020-04-30T06:21:53Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/621c68db64b9a9f9dc5ba4b07010f59e36bd2153", "committedDate": "2020-04-30T06:21:53Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}, "afterCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1c24d20a97faf04eea67f33beefc67e1b6c265de", "committedDate": "2020-04-30T07:21:32Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTUwOTEx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-404950911", "createdAt": "2020-05-04T12:44:24Z", "commit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDMzMzMw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-406033330", "createdAt": "2020-05-05T18:07:15Z", "commit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowNzoxNlrOGQ1edA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozODo1M1rOGQ2oWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNjU0OA==", "bodyText": "you can extract the promise.future() into a variable to be reused.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420306548", "createdAt": "2020-05-05T18:07:16Z", "author": {"login": "tiagodolphine"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java", "diffHunk": "@@ -134,4 +141,24 @@ public boolean cancelJob(String id) {\n         \n         return true;\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        Promise<Job> promise = Promise.promise();\n+        \n+        client.get(JOBS_PATH + \"/\" + id).send(res -> {\n+            if (res.succeeded() && res.result().statusCode() == 200) {\n+                promise.complete(res.result().bodyAsJson(Job.class));\n+            } else if (res.succeeded() && res.result().statusCode() == 404) {\n+                promise.fail(new JobNotFoundException(id));\n+            } else {\n+                promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n+            }\n+        });\n+        if (promise.future().result() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTExNg==", "bodyText": "in case scheduled is null, maybe it is worth to check and throw a NotFound exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420309116", "createdAt": "2020-05-05T18:11:34Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-services/src/main/java/org/kie/services/jobs/impl/InMemoryJobService.java", "diffHunk": "@@ -91,6 +92,20 @@ public boolean cancelJob(String id) {\n         return false;\n     }\n \n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        if (scheduledJobs.containsKey(id)) {\n+             ScheduledFuture<?> scheduled = scheduledJobs.get(id);\n+             \n+             long remainingTime = scheduled.getDelay(TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjMyMg==", "bodyText": "maybe extract this block of code to build the action into a common/super class and have the SignalProcessInstanceAction, HandleMessageAction... instance as a parameter to be added to metadata, a more generic attribute like Action interface.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420312322", "createdAt": "2020-05-05T18:16:58Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +152,12 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzI3Mw==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420313273", "createdAt": "2020-05-05T18:18:27Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -186,17 +189,11 @@ public void handleMessageNode(final Node node, final Element element, final Stri\n                 endNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n                 endNode.setMetaData(\"TriggerRef\", message.getName());\n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-\n-                actions.add(new DroolsConsequenceAction(\"java\",\n-                    \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\" + EOL +\n-                    \"workItem.setName(\\\"Send Task\\\");\" + EOL +\n-                    \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\" + EOL +\n-                    \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\" + EOL +\n-                    \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\" + EOL +\n-                    \"workItem.setParameter(\\\"MessageType\\\", \\\"\" + message.getType() + \"\\\");\" + EOL +\n-                    (variable == null ? \"\" : \"workItem.setParameter(\\\"Message\\\", \" + variable + \");\" + EOL) +\n-\t\t\t\t\t\"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\" + EOL +\n-                    \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                \n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzU5OQ==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420313599", "createdAt": "2020-05-05T18:18:59Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -203,23 +210,14 @@ public void handleSignalNode(final Node node, final Element element,\n                 actionNode.setMetaData(\"Variable\", variable);\n \n \t\t\t\t// check if signal should be send async\n-\t\t\t\tif (dataInputs.containsValue(\"async\")) {\n-\t\t\t\t    signalName = \"ASYNC-\" + signalName;\n-\t\t\t\t}\n+                if (dataInputs.containsValue(\"async\")) {\n+                    signalName = \"ASYNC-\" + signalName;\n+                }\n \n-\t\t\t\tString signalExpression = getSignalExpression(actionNode, signalName, \"tVariable\");\n-\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"+\n-\t\t\t\t\t\t\t\tsignalExpression));\n-\t\t\t}\n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzk5Ng==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420313996", "createdAt": "2020-05-05T18:19:37Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -251,42 +249,18 @@ public void handleMessageNode(final Node node, final Element element,\n \t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\"Could not find message \" + messageRef);\n \t\t\t\t}\n-                String variable = (String) actionNode.getMetaData(\"MappingVariable\");\n+                String variable = (String) actionNode.getMetaData(MAPPING_VARIABLE_KEY);\n                 Variable v = (Variable) ((ProcessBuildData) parser.getData()).getMetaData(\"Variable\");\n                 if (v != null) {\n                     variable = (String) v.getMetaData(variable);\n                 }\n-\t\t\t\tactionNode.setMetaData(\"MessageType\", message.getType());\n-\t\t\t\tactionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n-\t\t\t\tactionNode.setMetaData(\"TriggerRef\", message.getName());\n-\t\t\t\tactionNode\n-\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t+ \"org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl();\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setName(\\\"Send Task\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setProcessInstanceId(kcontext.getProcessInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setParameter(\\\"MessageType\\\", \\\"\"\n-\t\t\t\t\t\t\t\t\t\t+ message.getType()\n-\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeInstanceId(kcontext.getNodeInstance().getId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setNodeId(kcontext.getNodeInstance().getNodeId());\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ \"workItem.setDeploymentId((String) kcontext.getKnowledgeRuntime().getEnvironment().get(\\\"deploymentId\\\"));\"\n-\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t+ (variable == null ? \"\"\n-\t\t\t\t\t\t\t\t\t\t\t\t: \"workItem.setParameter(\\\"Message\\\", tVariable);\" + EOL)\n-\t\t\t\t\t\t\t\t\t\t+ \"((org.drools.core.process.instance.WorkItemManager) kcontext.getKnowledgeRuntime().getWorkItemManager()).internalExecuteWorkItem(workItem);\"));\n+                actionNode.setMetaData(\"MessageType\", message.getType());\n+                actionNode.setMetaData(\"TriggerType\", \"ProduceMessage\");\n+                actionNode.setMetaData(\"TriggerRef\", message.getName());\n+\n+                DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDE1NQ==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314155", "createdAt": "2020-05-05T18:19:53Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -312,36 +286,17 @@ public void handleEscalationNode(final Node node, final Element element,\n \t\t\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\t\t\"No escalations found\");\n \t\t\t\t\t}\n-\t\t\t\t\tEscalation escalation = escalations.get(escalationRef);\n-\t\t\t\t\tif (escalation == null) {\n-\t\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\t\t\"Could not find escalation \" + escalationRef);\n-\t\t\t\t\t}\n-\t\t\t\t\tString faultName = escalation.getEscalationCode();\n-\t\t\t\t\tString variable = (String) actionNode.getMetaData(\"MappingVariable\");\n-\t\t\t\t\tactionNode\n-\t\t\t\t\t\t\t.setAction(new DroolsConsequenceAction(\n-\t\t\t\t\t\t\t\t\t\"java\",\n-\t\t\t\t\t\t\t\t\t\"org.jbpm.process.instance.context.exception.ExceptionScopeInstance scopeInstance = (org.jbpm.process.instance.context.exception.ExceptionScopeInstance) ((org.jbpm.workflow.instance.NodeInstance) kcontext.getNodeInstance()).resolveContextInstance(org.jbpm.process.core.context.exception.ExceptionScope.EXCEPTION_SCOPE, \\\"\"\n-\t\t\t\t\t\t\t\t\t\t\t+ faultName\n-\t\t\t\t\t\t\t\t\t\t\t+ \"\\\");\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \"if (scopeInstance != null) {\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \" Object tVariable = \"+ (variable == null ? \"null\" : variable)+\";\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"org.jbpm.workflow.core.node.Transformation transformation = (org.jbpm.workflow.core.node.Transformation)kcontext.getNodeInstance().getNode().getMetaData().get(\\\"Transformation\\\");\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"if (transformation != null) {\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"  tVariable = new org.jbpm.process.core.event.EventTransformerImpl(transformation)\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"  .transformEvent(\"+(variable == null ? \"null\" : variable)+\");\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"}\"\n-\t\t\t\t\t\t\t\t\t\t\t+ \"  scopeInstance.handleException(\\\"\"\n-\t\t\t\t\t\t\t\t\t\t\t+ faultName\n-\t\t\t\t\t\t\t\t\t\t\t+ \"\\\", tVariable);\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \"} else {\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL\n-\t\t\t\t\t\t\t\t\t\t\t+ \"    ((org.jbpm.process.instance.ProcessInstance) kcontext.getProcessInstance()).setState(org.jbpm.process.instance.ProcessInstance.STATE_ABORTED);\"\n-\t\t\t\t\t\t\t\t\t\t\t+ EOL + \"}\"));\n+                    Escalation escalation = escalations.get(escalationRef);\n+                    if (escalation == null) {\n+                        throw new IllegalArgumentException(\n+                                                           \"Could not find escalation \" + escalationRef);\n+                    }\n+                    String faultName = escalation.getEscalationCode();\n+                    String variable = (String) actionNode.getMetaData(MAPPING_VARIABLE_KEY);\n+\n+                    DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDQyNw==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314427", "createdAt": "2020-05-05T18:20:19Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -403,9 +404,9 @@ private static void linkBoundaryEscalationEvent(NodeContainer nodeContainer, Nod\n         \n         String variable = ((EventNode)node).getVariableName();\n         ActionExceptionHandler exceptionHandler = new ActionExceptionHandler();\n-        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Escalation-\" + attachedTo + \"-\" + escalationCode + \"\\\", kcontext.getVariable(\\\"\" + variable +\"\\\"));\");\n+        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDQ3Nw==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314477", "createdAt": "2020-05-05T18:20:25Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -441,17 +442,9 @@ private static void linkBoundaryErrorEvent(NodeContainer nodeContainer, Node nod\n         \n         String variable = ((EventNode)node).getVariableName();\n \n-        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\",                   \n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Error-\" + attachedTo + \"-\" + errorCode + \"\\\", kcontext.getVariable(\\\"\" + variable +\"\\\"));\");\n-        // register directly the action as metadata to do not require compilation\n-        action.setMetaData(\"Action\", new Action() {\n-            \n-            @Override\n-            public void execute(ProcessContext kcontext) throws Exception {        \n-                kcontext.getProcessInstance().signalEvent(\"Error-\" + attachedTo + \"-\" + errorCode, kcontext.getVariable(\" + variable +\"));\n-            }\n-        });\n-        \n+        DroolsConsequenceAction action = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDgwMg==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314802", "createdAt": "2020-05-05T18:20:55Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -479,18 +472,9 @@ private static void linkBoundaryTimerEvent(NodeContainer nodeContainer, Node nod\n         if (timeDuration != null) {\n             timer.setDelay(timeDuration);\n             timer.setTimeType(Timer.TIME_DURATION);\n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + timeDuration + \"-\" + node.getId() +\"\\\", kcontext.getNodeInstance().getId());\");\n-            compositeNode.addTimer(timer, consequenceAction);\n-            \n-            // register directly the action as metadata to do not require compilation\n-            consequenceAction.setMetaData(\"Action\", new Action() {\n-                \n-                @Override\n-                public void execute(ProcessContext kcontext) throws Exception {        \n-                    kcontext.getProcessInstance().signalEvent(\"Timer-\" + attachedTo + \"-\" + timeDuration + \"-\" + node.getId(), kcontext.getNodeInstance().getId());\n-                }\n-            });\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");                       ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDg4NQ==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314885", "createdAt": "2020-05-05T18:21:06Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -503,33 +487,16 @@ public void execute(ProcessContext kcontext) throws Exception {\n             \n             String finalTimeCycle = timeCycle;\n             \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-            \t\tPROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId() + \"\\\", kcontext.getNodeInstance().getId());\");\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNDk0Ng==", "bodyText": "same, you can extract this block of code to build the action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420314946", "createdAt": "2020-05-05T18:21:13Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -503,33 +487,16 @@ public void execute(ProcessContext kcontext) throws Exception {\n             \n             String finalTimeCycle = timeCycle;\n             \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-            \t\tPROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId() + \"\\\", kcontext.getNodeInstance().getId());\");\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");\n             compositeNode.addTimer(timer, consequenceAction);\n             \n-            // register directly the action as metadata to do not require compilation\n-            consequenceAction.setMetaData(\"Action\", new Action() {\n-                \n-                @Override\n-                public void execute(ProcessContext kcontext) throws Exception {        \n-                    kcontext.getProcessInstance().signalEvent(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext.getNodeInstance().getId());\n-                }\n-            });\n+            consequenceAction.setMetaData(\"Action\", new SignalProcessInstanceAction(\"Timer-\" + attachedTo + \"-\" + finalTimeCycle + (timer.getPeriod() == null ? \"\" : \"###\" + timer.getPeriod()) + \"-\" + node.getId(), kcontext -> kcontext.getNodeInstance().getId(), SignalProcessInstanceAction.PROCESS_INSTANCE_SCOPE));\n         } else if (timeDate != null) {\n             timer.setDate(timeDate);\n             timer.setTimeType(Timer.TIME_DATE);                        \n-            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\",\n-                    PROCESS_INSTANCE_SIGNAL_EVENT + \"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId() +\"\\\", kcontext.getNodeInstance().getId());\");\n-            compositeNode.addTimer(timer, consequenceAction);\n-            \n-            // register directly the action as metadata to do not require compilation\n-            consequenceAction.setMetaData(\"Action\", new Action() {\n-                \n-                @Override\n-                public void execute(ProcessContext kcontext) throws Exception {        \n-                    kcontext.getProcessInstance().signalEvent(\"Timer-\" + attachedTo + \"-\" + timeDate + \"-\" + node.getId(), kcontext.getNodeInstance().getId());\n-                }\n-            });\n+            DroolsConsequenceAction consequenceAction = new DroolsConsequenceAction(\"java\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMzg3OQ==", "bodyText": "what about a more functional style, suggestion:\ntransformer.transform(transformation.getCompiledExpression(),\n                              Optional.ofNullable(event)\n                                      .filter(Map.class::isInstance)\n                                      .map(Map.class::cast)\n                                      .orElseGet(() -> Collections.singletonMap(name, event)));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420323879", "createdAt": "2020-05-05T18:36:01Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/event/EventTransformerImpl.java", "diffHunk": "@@ -41,15 +42,22 @@ public EventTransformerImpl(Transformation transformation) {\n \t\t}\n \t}\n \n-\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @Override\n \tpublic Object transformEvent(Object event) {\n \t\tif (event == null || transformation == null) {\n \t\t\treturn event;\n \t\t}\n \t\tDataTransformer transformer = DataTransformerRegistry.get().find(transformation.getLanguage());\n     \tif (transformer != null) {\n-    \t\tObject parameterValue = transformer.transform(transformation.getCompiledExpression(), Collections.singletonMap(name, event));\n-    \t\treturn parameterValue;\n+    \t    Map<String, Object> parameters = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNTQ2NQ==", "bodyText": "it is only possible to add the first \"Action\"? should it throw an error in case it is being set more than one?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420325465", "createdAt": "2020-05-05T18:38:53Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java", "diffHunk": "@@ -39,7 +39,11 @@ public void wire(Object object) {\n     }\n     \n     public void setMetaData(String name, Object value) {\n-        this.metaData.put(name, value);\n+        if (\"Action\".equals(name)) {\n+            this.metaData.putIfAbsent(name, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1c24d20a97faf04eea67f33beefc67e1b6c265de", "committedDate": "2020-04-30T07:21:32Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}, "afterCommit": {"oid": "938174b43f63a19c6e9a1fb163a6475399322a10", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/938174b43f63a19c6e9a1fb163a6475399322a10", "committedDate": "2020-05-06T10:08:18Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDcyMDY1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-406472065", "createdAt": "2020-05-06T10:09:02Z", "commit": {"oid": "97056487bc24706558079dc1c4fd55ab72dd75e1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMDowOTowMlrOGRMP8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMDoxMjoxMlrOGRMV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3OTY2Ng==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420679666", "createdAt": "2020-05-06T10:09:02Z", "author": {"login": "mswiderski"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java", "diffHunk": "@@ -134,4 +141,24 @@ public boolean cancelJob(String id) {\n         \n         return true;\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        Promise<Job> promise = Promise.promise();\n+        \n+        client.get(JOBS_PATH + \"/\" + id).send(res -> {\n+            if (res.succeeded() && res.result().statusCode() == 200) {\n+                promise.complete(res.result().bodyAsJson(Job.class));\n+            } else if (res.succeeded() && res.result().statusCode() == 404) {\n+                promise.fail(new JobNotFoundException(id));\n+            } else {\n+                promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n+            }\n+        });\n+        if (promise.future().result() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNjU0OA=="}, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MDM2NQ==", "bodyText": "I kept it as is as there is no JobNotFoundException available as this is in the api module while the exception is in the jobs-api. Note that this is mainly for test purpose so should not be used in production like scenarios.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420680365", "createdAt": "2020-05-06T10:10:26Z", "author": {"login": "mswiderski"}, "path": "api/kogito-services/src/main/java/org/kie/services/jobs/impl/InMemoryJobService.java", "diffHunk": "@@ -91,6 +92,20 @@ public boolean cancelJob(String id) {\n         return false;\n     }\n \n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        if (scheduledJobs.containsKey(id)) {\n+             ScheduledFuture<?> scheduled = scheduledJobs.get(id);\n+             \n+             long remainingTime = scheduled.getDelay(TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTExNg=="}, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MTIwMg==", "bodyText": "I'd say it should be possible to add only first action", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420681202", "createdAt": "2020-05-06T10:12:12Z", "author": {"login": "mswiderski"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/DroolsAction.java", "diffHunk": "@@ -39,7 +39,11 @@ public void wire(Object object) {\n     }\n     \n     public void setMetaData(String name, Object value) {\n-        this.metaData.put(name, value);\n+        if (\"Action\".equals(name)) {\n+            this.metaData.putIfAbsent(name, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNTQ2NQ=="}, "originalCommit": {"oid": "1c24d20a97faf04eea67f33beefc67e1b6c265de"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTY5MzU2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-406569356", "createdAt": "2020-05-06T12:38:27Z", "commit": {"oid": "938174b43f63a19c6e9a1fb163a6475399322a10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjM2MDEx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-406636011", "createdAt": "2020-05-06T13:54:13Z", "commit": {"oid": "938174b43f63a19c6e9a1fb163a6475399322a10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1NDoxM1rOGRUK0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1NDoxM1rOGRUK0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwOTQyNw==", "bodyText": "@mswiderski seems like this is not used anymore", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420809427", "createdAt": "2020-05-06T13:54:13Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/IntermediateThrowEventHandler.java", "diffHunk": "@@ -50,6 +55,10 @@\n \tpublic static final String LINK_NAME = \"linkName\";\n \tpublic static final String LINK_SOURCE = \"source\";\n \tpublic static final String LINK_TARGET = \"target\";\n+\t\n+\tprivate static final String MAPPING_VARIABLE_KEY = \"MappingVariable\";\n+\tprivate static final String TRANSFORMATION_KEY = \"Transformation\";\n+\tprivate static final String ACTION_KEY = \"Action\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938174b43f63a19c6e9a1fb163a6475399322a10"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "938174b43f63a19c6e9a1fb163a6475399322a10", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/938174b43f63a19c6e9a1fb163a6475399322a10", "committedDate": "2020-05-06T10:08:18Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}, "afterCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e8efbb9fd1605c06172b2b2d81947a7ca812a4df", "committedDate": "2020-05-06T14:15:22Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjU5OTA4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-406659908", "createdAt": "2020-05-06T14:18:47Z", "commit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxODo0OFrOGRVVvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1NTozMlrOGRg_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyODYwNg==", "bodyText": "Still present as it seems.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420828606", "createdAt": "2020-05-06T14:18:48Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +124,54 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isNotNull();\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult =mock(AsyncResult.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNTg5Ng=="}, "originalCommit": {"oid": "dadbb514dcea33f0e9bd4fa1ac0fb91f5d5d6958"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5MjQ4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n          \n          \n            \n                        ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n          \n          \n            \n                        return null;\n          \n          \n            \n                        }\n          \n          \n            \n                      }).when(request).send(any());\n          \n          \n            \n                    doAnswer(invocationOnMock -> {\n          \n          \n            \n                        Handler<AsyncResult<HttpResponse<Buffer>>> handler = invocationOnMock.getArgument(0);\n          \n          \n            \n                        handler.handle(asyncResult);\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }).when(request).send(any());\n          \n      \n    \n    \n  \n\nWhat about this? Looks much cleaner and gets rid of some unchecked warnings.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420892486", "createdAt": "2020-05-06T15:40:40Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +123,51 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDcxNg==", "bodyText": "Please include type arguments to HttpRequest.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420894716", "createdAt": "2020-05-06T15:43:52Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +123,51 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDkwMg==", "bodyText": "Same applies for this method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420894902", "createdAt": "2020-05-06T15:44:07Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -112,4 +123,51 @@ void testCancelJob(@Mock HttpRequest request) {\n         tested.cancelJob(\"123\");\n         verify(webClient).delete(\"/jobs/123\");\n     }\n+    \n+    @Test\n+    void testGetScheduleTime(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {\n+        when(webClient.get(anyString())).thenReturn(request);\n+        Job job = new Job();\n+        job.setId(\"123\");\n+        job.setExpirationTime(ZonedDateTime.now());\n+        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n+        when(asyncResult.succeeded()).thenReturn(true);\n+        when(asyncResult.result()).thenReturn(response);\n+        when(response.statusCode()).thenReturn(200);\n+        when(response.bodyAsJson(any())).thenReturn(job);\n+        \n+        doAnswer(new Answer<AsyncResult<HttpResponse<Buffer>>>() {\n+            @Override\n+            public AsyncResult<HttpResponse<Buffer>> answer(InvocationOnMock arg0) throws Throwable {\n+            ((Handler<AsyncResult<HttpResponse<Buffer>>>) arg0.getArgument(0)).handle(asyncResult);\n+            return null;\n+            }\n+          }).when(request).send(any());\n+        \n+        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n+        assertThat(scheduledTime).isEqualTo(job.getExpirationTime());\n+        verify(webClient).get(\"/jobs/123\");\n+    }\n+    \n+    @Test\n+    void testGetScheduleTimeJobNotFound(@Mock HttpRequest request, @Mock HttpResponse<Buffer> response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NjI4Mw==", "bodyText": "Isn't this REST call async? In that case, shouldn't we wait for a response and only then return the expiration time?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420946283", "createdAt": "2020-05-06T16:59:06Z", "author": {"login": "MarianMacik"}, "path": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java", "diffHunk": "@@ -134,4 +142,25 @@ public boolean cancelJob(String id) {\n         \n         return true;\n     }\n+\n+    @Override\n+    public ZonedDateTime getScheduledTime(String id) {\n+        Promise<Job> promise = Promise.promise();\n+        \n+        client.get(JOBS_PATH + \"/\" + id).send(res -> {\n+            if (res.succeeded() && res.result().statusCode() == 200) {\n+                promise.complete(res.result().bodyAsJson(Job.class));\n+            } else if (res.succeeded() && res.result().statusCode() == 404) {\n+                promise.fail(new JobNotFoundException(id));\n+            } else {\n+                promise.fail(new RuntimeException(\"Unable to find job with id \" + id));\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1OTg1MQ==", "bodyText": "Typo matchyIdOrName -> matchByIdOrName", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420959851", "createdAt": "2020-05-06T17:20:11Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/AbstractNodeHandler.java", "diffHunk": "@@ -661,4 +663,29 @@ protected String retrieveDataType(String itemSubjectRef, String dtype, Extensibl\n         \n         return null;\n     }\n+    \n+    \n+    /**\n+     * Finds the right variable by its name to make sure that when given as id it will be also matched\n+     * @param variableName name or id of the variable\n+     * @param parser parser instance\n+     * @return returns found variable name or given 'variableName' otherwise\n+     */\n+    protected String findVariable(String variableName, final ExtensibleXmlParser parser) {\n+        if (variableName == null) {\n+            return null;\n+        }\n+        List<?> parents = parser.getParents();\n+        \n+        for (Object parent : parents) {\n+            if (parent instanceof ContextContainer) {\n+                ContextContainer contextContainer = (ContextContainer) parent;\n+                VariableScope variableScope = (VariableScope) contextContainer.getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+                return variableScope.getVariables().stream().filter(v -> v.matchyIdOrName(variableName)).map(v -> v.getName()).findFirst().orElse(variableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MjA3NA==", "bodyText": "Shouldn't this be in a separate method or method name should be adapted?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420972074", "createdAt": "2020-05-06T17:39:25Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java", "diffHunk": "@@ -113,11 +102,14 @@ public void disposeSession() {\n     @BeforeEach\n     protected void logTestStart(TestInfo testInfo) {\n         logger.info(\" >>> {} <<<\", testInfo.getDisplayName());\n+        // this is to preserve the same behavior when executing over ksession\n+        System.setProperty(\"org.jbpm.signals.defaultscope\", SignalProcessInstanceAction.DEFAULT_SCOPE);\n     }\n \n     @AfterEach\n     protected void logTestEnd(TestInfo testInfo) {\n         logger.info(\"Finished {}\", testInfo.getDisplayName());\n+        System.clearProperty(\"org.jbpm.signals.defaultscope\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MjMxNA==", "bodyText": "Same here, the method no longer just logs the start of the test.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420972314", "createdAt": "2020-05-06T17:39:47Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/JbpmBpmn2TestCase.java", "diffHunk": "@@ -113,11 +102,14 @@ public void disposeSession() {\n     @BeforeEach\n     protected void logTestStart(TestInfo testInfo) {\n         logger.info(\" >>> {} <<<\", testInfo.getDisplayName());\n+        // this is to preserve the same behavior when executing over ksession\n+        System.setProperty(\"org.jbpm.signals.defaultscope\", SignalProcessInstanceAction.DEFAULT_SCOPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MzA5Mg==", "bodyText": "Typo.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r420973092", "createdAt": "2020-05-06T17:40:56Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -164,4 +164,8 @@ public String toString() {\n     public boolean hasTag(String tagName) {\n         return getTags().contains(tagName);\n     }\n+    \n+    public boolean matchyIdOrName(String nameOrId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxOTU0Mg==", "bodyText": "How was this handled before?\nI see that before there was just a consequence (string) set. And that consequence was then code-generated as a lambda to action() builder method in the ActionNodeVisitor (actionNode.getAction().toString() actually returns consequence):\n\n  \n    \n      kogito-runtimes/jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ActionNodeVisitor.java\n    \n    \n        Lines 95 to 97\n      in\n      fba1a5e\n    \n    \n    \n    \n\n        \n          \n           actionBody.addStatement(new NameExpr(actionNode.getAction().toString())); \n        \n\n        \n          \n            \n        \n\n        \n          \n           body.addStatement(getFactoryMethod(getNodeId(node), METHOD_ACTION, lambda)); \n        \n    \n  \n\n\nSo right now the consequence is an empty string, so the compilation is no-op. But how is this then translated to the generated ActionNode in case of a throw signal node? The action has to be somehow registered on the generated node as well, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#discussion_r421019542", "createdAt": "2020-05-06T18:55:32Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/EndEventHandler.java", "diffHunk": "@@ -150,11 +154,11 @@ public void handleSignalNode(final Node node, final Element element, final Strin\n                 if (dataInputs.containsValue(\"async\")) {\n                     signalName = \"ASYNC-\" + signalName;\n                 }\n-\n-                String signalExpression = getSignalExpression(endNode, signalName, variable);\n-\n+                \n+                DroolsConsequenceAction action = createJavaAction(new SignalProcessInstanceAction(signalName, variable, (String) endNode.getMetaData(\"customScope\"), (Transformation)endNode.getMetaData().get(\"Transformation\")));\n+                \n                 List<DroolsAction> actions = new ArrayList<DroolsAction>();\n-                actions.add(new DroolsConsequenceAction(\"mvel\",signalExpression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8efbb9fd1605c06172b2b2d81947a7ca812a4df"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f14c227d6b095c5afe3aaaaf4a01be6dbe03a2dd", "author": {"user": {"login": "MarianMacik", "name": "Mari\u00e1n Macik"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f14c227d6b095c5afe3aaaaf4a01be6dbe03a2dd", "committedDate": "2020-05-06T18:57:27Z", "message": "Remove getSignalExpression method as it is unused"}, "afterCommit": {"oid": "14dc03ce66c1ce801875635c4b29418b669da3e6", "author": {"user": {"login": "MarianMacik", "name": "Mari\u00e1n Macik"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/14dc03ce66c1ce801875635c4b29418b669da3e6", "committedDate": "2020-05-07T06:14:18Z", "message": "Remove getSignalExpression method as it is unused"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f120609cdde34d44c6382f6d0fd84581d0559ee2", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f120609cdde34d44c6382f6d0fd84581d0559ee2", "committedDate": "2020-05-07T14:39:15Z", "message": "KOGITO-2040 - Implemented getScheduledTime for JobsService to align it with actual capability of the jobs-service module, KOGITO-2041 - Expose process name via Process interface to be able to provide more human readable version of the process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fd3e8e5bb08c374bc69bf104341bcecf3eb9bad", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5fd3e8e5bb08c374bc69bf104341bcecf3eb9bad", "committedDate": "2020-05-07T14:39:15Z", "message": "KOGITO-2042 - Pass variable definitions via BpmnProcess and BpmnVariables, allow to filter variables on BpmnVariables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "516e066ffcea5315e1c37816319b959940ba520a", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/516e066ffcea5315e1c37816319b959940ba520a", "committedDate": "2020-05-07T14:39:15Z", "message": "KOGITO-2043 - Externalize process instance description via function interface so different expression evaluators can be used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4686637c4320b32694e9ee1f8d96b0d381e2539", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d4686637c4320b32694e9ee1f8d96b0d381e2539", "committedDate": "2020-05-07T14:39:15Z", "message": "KOGITO-2044 - Replace string based signal expressions with java classes to avoid need for compilation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d5a4d4d0375f520dbeedba39f18973031e480e", "author": {"user": {"login": "MarianMacik", "name": "Mari\u00e1n Macik"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/62d5a4d4d0375f520dbeedba39f18973031e480e", "committedDate": "2020-05-07T14:39:15Z", "message": "Remove getSignalExpression method as it is unused"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14dc03ce66c1ce801875635c4b29418b669da3e6", "author": {"user": {"login": "MarianMacik", "name": "Mari\u00e1n Macik"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/14dc03ce66c1ce801875635c4b29418b669da3e6", "committedDate": "2020-05-07T06:14:18Z", "message": "Remove getSignalExpression method as it is unused"}, "afterCommit": {"oid": "62d5a4d4d0375f520dbeedba39f18973031e480e", "author": {"user": {"login": "MarianMacik", "name": "Mari\u00e1n Macik"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/62d5a4d4d0375f520dbeedba39f18973031e480e", "committedDate": "2020-05-07T14:39:15Z", "message": "Remove getSignalExpression method as it is unused"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTg3NjA4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/486#pullrequestreview-407587608", "createdAt": "2020-05-07T15:28:23Z", "commit": {"oid": "62d5a4d4d0375f520dbeedba39f18973031e480e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3448, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}