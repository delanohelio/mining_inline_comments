{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODIzNDY0", "number": 642, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMzozNVrOESak0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozOToyNFrOEVcW2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzQ1MjM1OnYy", "diffSide": "LEFT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMzozNVrOG3lRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTozMToyNFrOG6yqyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNTQ5OQ==", "bodyText": "we are keeping static \"constructor\" methods at the top", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r460935499", "createdAt": "2020-07-27T14:33:35Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -198,31 +219,6 @@ private static Process parseWorkflowFile(Resource r, String parser) {\n         }\n     }\n \n-    private String applicationCanonicalName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxMzk4Ng==", "bodyText": "Dammit, my IDE changed this automatically. Are you using the Intellij profile for KIE or something like this?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r461013986", "createdAt": "2020-07-27T16:26:23Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -198,31 +219,6 @@ private static Process parseWorkflowFile(Resource r, String parser) {\n         }\n     }\n \n-    private String applicationCanonicalName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNTQ5OQ=="}, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMDc0NA==", "bodyText": "actually no \ud83e\udd14 apparently I am, KIE Java Conventions", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464300744", "createdAt": "2020-08-03T09:31:24Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -198,31 +219,6 @@ private static Process parseWorkflowFile(Resource r, String parser) {\n         }\n     }\n \n-    private String applicationCanonicalName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNTQ5OQ=="}, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzUyNjAyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventListenerResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo0ODo1OVrOG3l-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxOTowM1rOG4Y2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NzAwNA==", "bodyText": "minor nitpick (since this is a REST endpoint it's not a big deal) why does it need to be @PostConstruct ? can it be a plain constructor? (notice you can also use an anonymous constructor { ... })", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r460947004", "createdAt": "2020-07-27T14:48:59Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventListenerResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.kie.kogito.app;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.kie.kogito.events.knative.ce.ExtMediaType;\n+import org.kie.kogito.events.knative.ce.RestEasyHttpRequestConverter;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Path(\"/\")\n+public class CloudEventListenerResource {\n+\n+    private RestEasyHttpRequestConverter httpRequestConverter = new RestEasyHttpRequestConverter();\n+\n+    private Map<String, Emitter<String>> emitters;\n+\n+    @javax.annotation.PostConstruct\n+    public void setup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5OTM4OQ==", "bodyText": "I have to wait for CDI to inject the emitters, in the constructor I won't be able to do that, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r460999389", "createdAt": "2020-07-27T16:03:17Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventListenerResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.kie.kogito.app;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.kie.kogito.events.knative.ce.ExtMediaType;\n+import org.kie.kogito.events.knative.ce.RestEasyHttpRequestConverter;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Path(\"/\")\n+public class CloudEventListenerResource {\n+\n+    private RestEasyHttpRequestConverter httpRequestConverter = new RestEasyHttpRequestConverter();\n+\n+    private Map<String, Emitter<String>> emitters;\n+\n+    @javax.annotation.PostConstruct\n+    public void setup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NzAwNA=="}, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwMjg4Mg==", "bodyText": "right. I am also wondering if it is possible to inject a map of emitters directly from smallrye, but I think it's not possible. anyway for REST endpoint it makes sense to use @PostCostruct", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r461702882", "createdAt": "2020-07-28T16:11:51Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventListenerResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.kie.kogito.app;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.kie.kogito.events.knative.ce.ExtMediaType;\n+import org.kie.kogito.events.knative.ce.RestEasyHttpRequestConverter;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Path(\"/\")\n+public class CloudEventListenerResource {\n+\n+    private RestEasyHttpRequestConverter httpRequestConverter = new RestEasyHttpRequestConverter();\n+\n+    private Map<String, Emitter<String>> emitters;\n+\n+    @javax.annotation.PostConstruct\n+    public void setup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NzAwNA=="}, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4MDY4Ng==", "bodyText": "I thought about having a list being injected, haven't tried, but I think we stick with PostConstruct in this scenarios being a REST endpoint. Thanks for the heads up \\o/", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r461780686", "createdAt": "2020-07-28T18:19:03Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventListenerResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.kie.kogito.app;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.kie.kogito.events.knative.ce.ExtMediaType;\n+import org.kie.kogito.events.knative.ce.RestEasyHttpRequestConverter;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+@Path(\"/\")\n+public class CloudEventListenerResource {\n+\n+    private RestEasyHttpRequestConverter httpRequestConverter = new RestEasyHttpRequestConverter();\n+\n+    private Map<String, Emitter<String>> emitters;\n+\n+    @javax.annotation.PostConstruct\n+    public void setup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NzAwNA=="}, "originalCommit": {"oid": "e8420afd28b9332d484b16647928e15ac1e90676"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjgzMTc2OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo1OTozOVrOG7QNpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo1OTozOVrOG7QNpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NDgwNw==", "bodyText": "maybe just comment out to commit?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464784807", "createdAt": "2020-08-04T03:59:39Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie\".level=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjg0MDE1OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDowNDozOFrOG7QSVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMDozMlrOG7be5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NjAwNw==", "bodyText": "can we unify that? Same for smallrye so ideally moving the dependency management part to root pom.xml", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464786007", "createdAt": "2020-08-04T04:04:38Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/pom.xml", "diffHunk": "@@ -0,0 +1,135 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>events</artifactId>\n+        <version>8.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>knative-eventing-addon</artifactId>\n+    <name>Kogito :: Add-Ons :: Events :: Knative Eventing</name>\n+    <description>Kogito Events handling for Knative Eventing AddOn</description>\n+\n+    <properties>\n+        <!-- aligned with smallrye -->\n+        <!-- TODO: send a PR to SmallRye Reactive Messaging to upgrade to SDK 2.x -->\n+        <!-- Fixme: we do have this already set in the Kogito Runtimes BOM, but using 1.3.0 version -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2OTQ0Ng==", "bodyText": "Unfortunately, CE SDK 1.3.0 is being used by Trusty. They would have to upgrade, then we could remove from here and use the version from BOM. cc @danielezonca @r00ta do you guys mind upgrading it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464969446", "createdAt": "2020-08-04T11:00:32Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/pom.xml", "diffHunk": "@@ -0,0 +1,135 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>events</artifactId>\n+        <version>8.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>knative-eventing-addon</artifactId>\n+    <name>Kogito :: Add-Ons :: Events :: Knative Eventing</name>\n+    <description>Kogito Events handling for Knative Eventing AddOn</description>\n+\n+    <properties>\n+        <!-- aligned with smallrye -->\n+        <!-- TODO: send a PR to SmallRye Reactive Messaging to upgrade to SDK 2.x -->\n+        <!-- Fixme: we do have this already set in the Kogito Runtimes BOM, but using 1.3.0 version -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NjAwNw=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjg1Mzg4OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxMjoyMFrOG7QZ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo1OTo0OVrOG7hsSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4Nzk2MA==", "bodyText": "@ricardozanini cant we reuse the ProcessInstanceDataEvent as it seems to be the exact same event?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464787960", "createdAt": "2020-08-04T04:12:20Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;\n+\n+import io.cloudevents.CloudEventExtensions;\n+import io.cloudevents.Extension;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+// The size of this extension could be reevaluated since we could make use of `type`, `source` and `subject` for processId, referenceId and instanceState\n+\n+/**\n+ * CloudEvent extension for Kogito Process.\n+ */\n+public class KogitoProcessExtension implements Extension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2OTg2NA==", "bodyText": "This is an extension to process CE with the SDK, but yeah I think I got it. You say to extend ProcessInstanceDataEvent here? That makes sense :D", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464969864", "createdAt": "2020-08-04T11:01:28Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;\n+\n+import io.cloudevents.CloudEventExtensions;\n+import io.cloudevents.Extension;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+// The size of this extension could be reevaluated since we could make use of `type`, `source` and `subject` for processId, referenceId and instanceState\n+\n+/**\n+ * CloudEvent extension for Kogito Process.\n+ */\n+public class KogitoProcessExtension implements Extension {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4Nzk2MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MTE3Ng==", "bodyText": "Actually is the ProcessInstanceEventBody and it's not the same thing. I think we can revisit this upon the cloudevent processing refactoring.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465071176", "createdAt": "2020-08-04T13:59:49Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;\n+\n+import io.cloudevents.CloudEventExtensions;\n+import io.cloudevents.Extension;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+// The size of this extension could be reevaluated since we could make use of `type`, `source` and `subject` for processId, referenceId and instanceState\n+\n+/**\n+ * CloudEvent extension for Kogito Process.\n+ */\n+public class KogitoProcessExtension implements Extension {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4Nzk2MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjg1NDg0OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxMjo1NFrOG7QahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMTo0M1rOG7bhDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODEwMQ==", "bodyText": "missing headers :D", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788101", "createdAt": "2020-08-04T04:12:54Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2OTk5Ng==", "bodyText": "\ud83e\udd26", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464969996", "createdAt": "2020-08-04T11:01:43Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/extensions/KogitoProcessExtension.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.kie.kogito.events.knative.ce.extensions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODEwMQ=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjg1NzkwOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/http/ResponsesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxNDozNFrOG7QcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMjowN1rOG7bh0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODUzNA==", "bodyText": "small comment to perhaps use import static for most use of Assertions", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788534", "createdAt": "2020-08-04T04:14:34Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/http/ResponsesTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.kie.kogito.events.knative.ce.http;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+class ResponsesTest {\n+\n+    @Test\n+    void errorProcessingCloudEvent() {\n+        final Response response = Responses.errorProcessingCloudEvent(new IllegalArgumentException(\"Fail!\"));\n+        Assertions.assertThat(response).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3MDE5Mg==", "bodyText": "Now I learned how to import them automatically with my IDE, will do it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464970192", "createdAt": "2020-08-04T11:02:07Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/http/ResponsesTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.kie.kogito.events.knative.ce.http;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+class ResponsesTest {\n+\n+    @Test\n+    void errorProcessingCloudEvent() {\n+        final Response response = Responses.errorProcessingCloudEvent(new IllegalArgumentException(\"Fail!\"));\n+        Assertions.assertThat(response).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODUzNA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjg1OTczOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxNToyN1rOG7QdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjozMzowMVrOG8HlbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String datacontenttype;\n          \n          \n            \n                private String dataContentType;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788780", "createdAt": "2020-08-04T04:15:27Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3MDU4NQ==", "bodyText": "I'm using lower case to not clash with JSON unmarshalling. Since we can't use Jackson annotations. Or can we?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464970585", "createdAt": "2020-08-04T11:02:58Z", "author": {"login": "ricardozanini"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNzMxNw==", "bodyText": "we are using Jackson as the default serialization anyway, I don't see a problem with that.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465437317", "createdAt": "2020-08-05T02:37:05Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxOTU3Nw==", "bodyText": "If you use Jackson, I would suggest to be a bit more verbose and use @JsonProperty. In some months somebody will see that the variable is all lower case and will change it, changing the implicit contract as well. Maybe it's just me, but I always have had very bad opinion on that dangerous Jackson behaviour :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465519577", "createdAt": "2020-08-05T07:10:56Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5MjAxMg==", "bodyText": "Ok, I'll add the Jackson annotations to this class to make sure we don't mess it up.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465692012", "createdAt": "2020-08-05T12:33:01Z", "author": {"login": "ricardozanini"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODc4MA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjg2MDAxOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxNTozN1rOG7QdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDozMDo0MVrOG7jIyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String dataschema;\n          \n          \n            \n                private String dataSchema;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r464788820", "createdAt": "2020-08-04T04:15:37Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;\n+    private String dataschema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NDE5Ng==", "bodyText": "Same thing.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465074196", "createdAt": "2020-08-04T14:04:01Z", "author": {"login": "ricardozanini"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;\n+    private String dataschema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODgyMA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5NDg1Nw==", "bodyText": "See above.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465094857", "createdAt": "2020-08-04T14:30:41Z", "author": {"login": "ricardozanini"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -29,14 +29,30 @@\n  */\n public abstract class AbstractDataEvent<T> implements DataEvent<T> {\n \n-    private static final String SPEC_VERSION = \"0.3\";\n-\n+    /**\n+     * String prefix for Kogito CloudEvents type fields.\n+     * Since this is a required field, the constructor will fill them with this default value.\n+     * Ideally, callers would use #TYPE_FORMAT to fill this field using the process name and the signal node name, e.g: process.travelagency.visaapproved\n+     */\n+    public static final String TYPE_PREFIX = \"process\";\n+    public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n+    /**\n+     * String format for Kogito CloudEvents source fields.\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     */\n+    public static final String SOURCE_FORMAT = \"/process/%s/%s\";\n+    private static final String SPEC_VERSION = \"1.0\";\n     private String specversion;\n     private String id;\n     private String source;\n     private String type;\n     private String time;\n+    private String subject;\n+    private String datacontenttype;\n+    private String dataschema;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODgyMA=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDU1ODU3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozMTowOVrOG7gfwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowODo0NFrOG7iFxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTU4NQ==", "bodyText": "Is it really mutually exclusive? I mean, can't we have both at the same time, in the same project we may have one or N processes where we cloud have cloud events being received through kafka in some topic and other events using the HTTP endpoint?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465051585", "createdAt": "2020-08-04T13:31:09Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -379,21 +381,33 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n                                 applicationCanonicalName,\n                                 msgDataEventGenerator.className(),\n                                 trigger)\n-                                .withDependencyInjection(annotator));\n+                                         .withDependencyInjection(annotator));\n                     } else if (trigger.getType().equals(TriggerMetaData.TriggerType.ProduceMessage)) {\n \n                         MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                trigger)\n+                                                                                                        trigger)\n                                 .withDependencyInjection(annotator);\n                         mdegs.add(msgDataEventGenerator);\n \n-                        mpgs.add(new MessageProducerGenerator(\n-                                workFlowProcess,\n-                                modelClassGenerator.className(),\n-                                execModelGen.className(),\n-                                msgDataEventGenerator.className(),\n-                                trigger)\n-                                .withDependencyInjection(annotator));\n+                        // this is not cool, we should have a way to process addons\n+                        // generators without adding conditions to the main generators\n+                        if (addonsConfig.useKnativeEventing()) {\n+                            mpgs.add(new CloudEventsMessageProducerGenerator(\n+                                    workFlowProcess,\n+                                    modelClassGenerator.className(),\n+                                    execModelGen.className(),\n+                                    msgDataEventGenerator.className(),\n+                                    trigger)\n+                                             .withDependencyInjection(annotator));\n+                        } else {\n+                            mpgs.add(new MessageProducerGenerator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NzcwMQ==", "bodyText": "It was at first, I had to change because of this:\n\nFirst integration tests are OK. We can send CloudEvent messages to a given process through HTTP, having the correct headers. Outcoming is a problem right now since smallrye-http does not add Content-Type. Also the producer are ignoring type and source, unfortunately they are required by the spec. The target service are rejecting our produced events.\n\nThis should go away once Smallrye upgrades their CE SDK and add support to it. For now, we are producing string messages, which smallrye does not know how to process it. We need to decorate the message first, there are some changes in the producer template that would be easier and cleaner doing this away. I'm not happy with this condition either, but with the codegen refactoring + smallrye update we should be able to address this problem in the near future.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465077701", "createdAt": "2020-08-04T14:08:44Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -379,21 +381,33 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n                                 applicationCanonicalName,\n                                 msgDataEventGenerator.className(),\n                                 trigger)\n-                                .withDependencyInjection(annotator));\n+                                         .withDependencyInjection(annotator));\n                     } else if (trigger.getType().equals(TriggerMetaData.TriggerType.ProduceMessage)) {\n \n                         MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                trigger)\n+                                                                                                        trigger)\n                                 .withDependencyInjection(annotator);\n                         mdegs.add(msgDataEventGenerator);\n \n-                        mpgs.add(new MessageProducerGenerator(\n-                                workFlowProcess,\n-                                modelClassGenerator.className(),\n-                                execModelGen.className(),\n-                                msgDataEventGenerator.className(),\n-                                trigger)\n-                                .withDependencyInjection(annotator));\n+                        // this is not cool, we should have a way to process addons\n+                        // generators without adding conditions to the main generators\n+                        if (addonsConfig.useKnativeEventing()) {\n+                            mpgs.add(new CloudEventsMessageProducerGenerator(\n+                                    workFlowProcess,\n+                                    modelClassGenerator.className(),\n+                                    execModelGen.className(),\n+                                    msgDataEventGenerator.className(),\n+                                    trigger)\n+                                             .withDependencyInjection(annotator));\n+                        } else {\n+                            mpgs.add(new MessageProducerGenerator(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTU4NQ=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDYyMjIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsMessageProducerTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0NjoyNFrOG7hGWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowOTozMlrOG7iIDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2MTQ2Ng==", "bodyText": "can't we keep just one template for MessageProducer? I mean instead of CloudEventsMessageProducerTemplate.java and MessageProducerTemplate.java centralize just in one? they seem to be quite similar.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465061466", "createdAt": "2020-08-04T13:46:24Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsMessageProducerTemplate.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.myspace.demo;\n+\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.events.knative.ce.decorators.Decorator;\n+import org.kie.kogito.events.knative.ce.decorators.DecoratorFactory;\n+import org.kie.kogito.services.event.DataEventAttrBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Optional;\n+import java.util.TimeZone;\n+\n+public class MessageProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODI4Nw==", "bodyText": "See my reply above :p\nThey have the decorator instance to handle the messages to a CloudEvent subscriber and also the CloudEvent POJO is different, we are now filling type and source, which were not in the other template. I don't know what kind of side effects that could bring to older implementations/examples, so it would be better to leave the old template as is to avoid that.\nWe have plans to refactor the whole CloudEvent processing in the core in the short term, this way we will get rid of all this DataEvent thing to stay with CloudEvents SDK only. Then we will be committed with the spec.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465078287", "createdAt": "2020-08-04T14:09:32Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsMessageProducerTemplate.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.myspace.demo;\n+\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.events.knative.ce.decorators.Decorator;\n+import org.kie.kogito.events.knative.ce.decorators.DecoratorFactory;\n+import org.kie.kogito.services.event.DataEventAttrBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Optional;\n+import java.util.TimeZone;\n+\n+public class MessageProducer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2MTQ2Ng=="}, "originalCommit": {"oid": "fc147855588b54d94c791c230832ba72f2714954"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUzNDczOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1ODo0NFrOG78t9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoxNDo1NlrOG8e0oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMzk3NA==", "bodyText": "licence everywhere?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465513974", "createdAt": "2020-08-05T06:58:44Z", "author": {"login": "r00ta"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5NTM1Mg==", "bodyText": "It's very weird to me having to add the license manually. I though we had a script to do that :/\nMaybe we could use the same one we use in the operator.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465695352", "createdAt": "2020-08-05T12:38:47Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMzk3NA=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MjczNg==", "bodyText": "yeah that would be good, but you can set up the IDE to do that for you :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r466072736", "createdAt": "2020-08-06T00:14:56Z", "author": {"login": "cristianonicolai"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMzk3NA=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzU0MDcxOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/Decorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzowMDo0NlrOG78xwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjozOToxMVrOG8HzXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDk0NA==", "bodyText": "Very minor comment: what about a less generic name like MessageDecorator?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465514944", "createdAt": "2020-08-05T07:00:46Z", "author": {"login": "r00ta"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/Decorator.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.kie.kogito.events.knative.ce.decorators;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * {@link Decorator}s decorates the {@link Message} envelope with metadata and additional information in a given context.\n+ */\n+public interface Decorator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5NTU4MA==", "bodyText": "I like it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465695580", "createdAt": "2020-08-05T12:39:11Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/Decorator.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.kie.kogito.events.knative.ce.decorators;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * {@link Decorator}s decorates the {@link Message} envelope with metadata and additional information in a given context.\n+ */\n+public interface Decorator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDk0NA=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzU1Mzg3OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzowNToxOFrOG785rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0MzoyMlrOG8H9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNjk3NQ==", "bodyText": "isnt't redundant?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465516975", "createdAt": "2020-08-05T07:05:18Z", "author": {"login": "r00ta"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODA2MQ==", "bodyText": "It was added for debug reasons, comes in handy very often.. and it's on the test package. But I'll remove it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465698061", "createdAt": "2020-08-05T12:43:22Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNjk3NQ=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzU4NjgzOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/DecoratorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxNjowMlrOG79NPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NDo0MFrOG8IAAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMTk4Mg==", "bodyText": "suggestion for future improvement. If I understand correctly this is only used in templates; so, could we avoid the run-time classpath inspection, and instead perform it at compile-time? i.e., replace a placeholder in the template with the \"right\" code branch?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465521982", "createdAt": "2020-08-05T07:16:02Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/DecoratorFactory.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.kie.kogito.events.knative.ce.decorators;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Decorator Factory\n+ */\n+public final class DecoratorFactory {\n+\n+    private static final String SMALLRYE_HTTP_METADATA_CLASS = \"io.smallrye.reactive.messaging.http.HttpResponseMetadata\";\n+\n+    private DecoratorFactory() {\n+    }\n+\n+    /**\n+     * Builds a new {@link Decorator} depending on the implementation being presented in the classpath.\n+     *\n+     * @return an {@link Optional} instance of {@link Decorator}\n+     */\n+    public static Optional<Decorator> newInstance() {\n+        try {\n+            Class.forName(SMALLRYE_HTTP_METADATA_CLASS, false, DecoratorFactory.class.getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5ODgxNg==", "bodyText": "The idea is to use the same Template for Spring and Quarkus, so the decorator would return the right decorator. Or event we can use for different scenarios where different decorators might be used. That's why I created a factory for it. wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465698816", "createdAt": "2020-08-05T12:44:40Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/decorators/DecoratorFactory.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.kie.kogito.events.knative.ce.decorators;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Decorator Factory\n+ */\n+public final class DecoratorFactory {\n+\n+    private static final String SMALLRYE_HTTP_METADATA_CLASS = \"io.smallrye.reactive.messaging.http.HttpResponseMetadata\";\n+\n+    private DecoratorFactory() {\n+    }\n+\n+    /**\n+     * Builds a new {@link Decorator} depending on the implementation being presented in the classpath.\n+     *\n+     * @return an {@link Optional} instance of {@link Decorator}\n+     */\n+    public static Optional<Decorator> newInstance() {\n+        try {\n+            Class.forName(SMALLRYE_HTTP_METADATA_CLASS, false, DecoratorFactory.class.getClassLoader());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMTk4Mg=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzU4ODk3OnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/http/ExtMediaType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxNjo0MVrOG79OiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NTowN1rOG8IBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMjMxMg==", "bodyText": "link to PR/JIRA ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465522312", "createdAt": "2020-08-05T07:16:41Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/http/ExtMediaType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.kie.kogito.events.knative.ce.http;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Extends {@link MediaType} to CloudEvents support\n+ */\n+// this shouldn't be provided by the CE SDK? Send a PR.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5OTEwOA==", "bodyText": "I need to send a PR to CE SDK.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465699108", "createdAt": "2020-08-05T12:45:07Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/http/ExtMediaType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.kie.kogito.events.knative.ce.http;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * Extends {@link MediaType} to CloudEvents support\n+ */\n+// this shouldn't be provided by the CE SDK? Send a PR.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMjMxMg=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYwMzEzOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyMDo1N1rOG79WwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NToxNlrOG8IBcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNDQxNg==", "bodyText": "is keeping this file intended?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465524416", "createdAt": "2020-08-05T07:20:57Z", "author": {"login": "evacchi"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie\".level=INFO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5OTE4Nw==", "bodyText": "removed!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465699187", "createdAt": "2020-08-05T12:45:16Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+quarkus.log.level=INFO\n+quarkus.log.category.\"org.kie\".level=INFO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNDQxNg=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYwNzE1OnYy", "diffSide": "RIGHT", "path": "addons/events/kogito-events-reactive-messaging-addon/src/main/java/org/kie/kogito/events/rm/ReactiveMessagingEventPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyMjowOFrOG79ZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozOTo1MFrOG8KH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNTAxMQ==", "bodyText": "nothing in contrary with the change, but just wondering why is it necessary?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465525011", "createdAt": "2020-08-05T07:22:08Z", "author": {"login": "evacchi"}, "path": "addons/events/kogito-events-reactive-messaging-addon/src/main/java/org/kie/kogito/events/rm/ReactiveMessagingEventPublisher.java", "diffHunk": "@@ -32,8 +32,8 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n-import io.smallrye.reactive.messaging.annotations.Channel;\n-import io.smallrye.reactive.messaging.annotations.Emitter;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5OTcxMg==", "bodyText": "The SmallRye annotations have been deprecated, and we can't decorate the message with the old annotations since we don't have the right  send signature.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465699712", "createdAt": "2020-08-05T12:46:05Z", "author": {"login": "ricardozanini"}, "path": "addons/events/kogito-events-reactive-messaging-addon/src/main/java/org/kie/kogito/events/rm/ReactiveMessagingEventPublisher.java", "diffHunk": "@@ -32,8 +32,8 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n-import io.smallrye.reactive.messaging.annotations.Channel;\n-import io.smallrye.reactive.messaging.annotations.Emitter;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNTAxMQ=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzYwOQ==", "bodyText": "good, thanks for the explanation :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465733609", "createdAt": "2020-08-05T13:39:50Z", "author": {"login": "evacchi"}, "path": "addons/events/kogito-events-reactive-messaging-addon/src/main/java/org/kie/kogito/events/rm/ReactiveMessagingEventPublisher.java", "diffHunk": "@@ -32,8 +32,8 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n-import io.smallrye.reactive.messaging.annotations.Channel;\n-import io.smallrye.reactive.messaging.annotations.Emitter;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNTAxMQ=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYyNDcwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyNzoyNFrOG79jeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0NjoxNlrOG8ID5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNzY3Mw==", "bodyText": "agreed :) add a link to a JIRA maybe? KOGITO-1767 Propose mechanism to extend codegen with addons has sat there for quite a while", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465527673", "createdAt": "2020-08-05T07:27:24Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -379,21 +381,33 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n                                 applicationCanonicalName,\n                                 msgDataEventGenerator.className(),\n                                 trigger)\n-                                .withDependencyInjection(annotator));\n+                                         .withDependencyInjection(annotator));\n                     } else if (trigger.getType().equals(TriggerMetaData.TriggerType.ProduceMessage)) {\n \n                         MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                trigger)\n+                                                                                                        trigger)\n                                 .withDependencyInjection(annotator);\n                         mdegs.add(msgDataEventGenerator);\n \n-                        mpgs.add(new MessageProducerGenerator(\n-                                workFlowProcess,\n-                                modelClassGenerator.className(),\n-                                execModelGen.className(),\n-                                msgDataEventGenerator.className(),\n-                                trigger)\n-                                .withDependencyInjection(annotator));\n+                        // this is not cool, we should have a way to process addons\n+                        // generators without adding conditions to the main generators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY5OTgxNQ==", "bodyText": "Added!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465699815", "createdAt": "2020-08-05T12:46:16Z", "author": {"login": "ricardozanini"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -379,21 +381,33 @@ public ProcessCodegen withClassLoader(ClassLoader projectClassLoader) {\n                                 applicationCanonicalName,\n                                 msgDataEventGenerator.className(),\n                                 trigger)\n-                                .withDependencyInjection(annotator));\n+                                         .withDependencyInjection(annotator));\n                     } else if (trigger.getType().equals(TriggerMetaData.TriggerType.ProduceMessage)) {\n \n                         MessageDataEventGenerator msgDataEventGenerator = new MessageDataEventGenerator(workFlowProcess,\n-                                trigger)\n+                                                                                                        trigger)\n                                 .withDependencyInjection(annotator);\n                         mdegs.add(msgDataEventGenerator);\n \n-                        mpgs.add(new MessageProducerGenerator(\n-                                workFlowProcess,\n-                                modelClassGenerator.className(),\n-                                execModelGen.className(),\n-                                msgDataEventGenerator.className(),\n-                                trigger)\n-                                .withDependencyInjection(annotator));\n+                        // this is not cool, we should have a way to process addons\n+                        // generators without adding conditions to the main generators", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNzY3Mw=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYyOTY2OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyOTowMFrOG79mdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowNDoxNFrOG8Yrqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODQzNw==", "bodyText": "see here re: DecoratorFactory -- the check is already there", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465528437", "createdAt": "2020-08-05T07:29:00Z", "author": {"login": "evacchi"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -232,11 +232,13 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n+        boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMDkwMA==", "bodyText": "But I need this check, otherwise the codegen wouldn't know if it's to generate the CloudEvent endpoint or not. Would generate only if the target project has the addon added in the pom dependencies.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465700900", "createdAt": "2020-08-05T12:48:06Z", "author": {"login": "ricardozanini"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -232,11 +232,13 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n+        boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODQzNw=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNzE0Mg==", "bodyText": "I think I have mixed-up the classes, but what I mean, is that with you may not need this runtime check:\nhttps://github.com/kiegroup/kogito-runtimes/pull/642/files/d807d67c7b0a4bb615d7167ed7474aad6952861b#diff-cfee6e94f3636c1de7a11f0169051616\nsince that class is only used in generated code, in your template substitution logic you can do something like (pseudo-code)\nif (smallryeOnClassPath())\n   wrappedInitializer(template)\nelse\n   plainInitializer(template)\n\nand move that logic from runtime to codegen time. Anyway, we can improve this further in a next iteration", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465737142", "createdAt": "2020-08-05T13:44:55Z", "author": {"login": "evacchi"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -232,11 +232,13 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n+        boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODQzNw=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3MjEzOA==", "bodyText": "Oh, I replied to you in another comment why I'm not doing that: #642 (comment)\n:)\nThe idea is to have a decorator for every runtime/use case out there based on the infra code in the classpath. So for instance, I have kafka I would not decorate this way, but in another. Same for Spring. Using the same template, same codegen logic.\nBut of course we can discuss this further in the refactoring :D", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465972138", "createdAt": "2020-08-05T20:04:14Z", "author": {"login": "ricardozanini"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -232,11 +232,13 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n+        boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.http.HttpRequestConverter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODQzNw=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzgzNDkwOnYy", "diffSide": "RIGHT", "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyNjo1MFrOG7_iyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo0OTowOFrOG8IKnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MDI2Nw==", "bodyText": "There is already a similar class.\nPerhaps they could be consolidated at some point?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465560267", "createdAt": "2020-08-05T08:26:50Z", "author": {"login": "manstis"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.format.EventFormat;\n+import io.cloudevents.core.provider.EventFormatProvider;\n+import io.cloudevents.jackson.JsonFormat;\n+\n+/**\n+ * Simple utility class to convert from CloudEvents objects to a Json String.\n+ * Wraps invocation to the CE SDK, so we can safely change the inner implementation without impacting callers.\n+ */\n+public final class CloudEventConverter {\n+\n+    private static final EventFormat format = EventFormatProvider.getInstance().resolveFormat(JsonFormat.CONTENT_TYPE);\n+\n+    private CloudEventConverter() {\n+    }\n+\n+    public static String toJson(final CloudEvent cloudEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMTUzNQ==", "bodyText": "You guys are using an old version of the SDK, which has generics in the CloudEvent interface. That's why I create this one. This should be part of the CloudEvent refactoring we are planning.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465701535", "createdAt": "2020-08-05T12:49:08Z", "author": {"login": "ricardozanini"}, "path": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/CloudEventConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.kie.kogito.events.knative.ce;\n+\n+import io.cloudevents.CloudEvent;\n+import io.cloudevents.core.format.EventFormat;\n+import io.cloudevents.core.provider.EventFormatProvider;\n+import io.cloudevents.jackson.JsonFormat;\n+\n+/**\n+ * Simple utility class to convert from CloudEvents objects to a Json String.\n+ * Wraps invocation to the CE SDK, so we can safely change the inner implementation without impacting callers.\n+ */\n+public final class CloudEventConverter {\n+\n+    private static final EventFormat format = EventFormatProvider.getInstance().resolveFormat(JsonFormat.CONTENT_TYPE);\n+\n+    private CloudEventConverter() {\n+    }\n+\n+    public static String toJson(final CloudEvent cloudEvent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MDI2Nw=="}, "originalCommit": {"oid": "d807d67c7b0a4bb615d7167ed7474aad6952861b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTIwMTU0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozOToyNFrOG8Mu6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxMDowMFrOG8yxUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjM2MA==", "bodyText": "wouldn't that conflict with #676 ?\n@evacchi @ricardozanini", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465776360", "createdAt": "2020-08-05T14:39:24Z", "author": {"login": "radtriste"}, "path": "pom.xml", "diffHunk": "@@ -692,6 +692,11 @@\n         <artifactId>smallrye-reactive-messaging-provider</artifactId>\n         <version>${version.io.smallrye.reactive}</version>\n       </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NzAxNg==", "bodyText": "It will, but I can rebase after his merge", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r465777016", "createdAt": "2020-08-05T14:40:18Z", "author": {"login": "ricardozanini"}, "path": "pom.xml", "diffHunk": "@@ -692,6 +692,11 @@\n         <artifactId>smallrye-reactive-messaging-provider</artifactId>\n         <version>${version.io.smallrye.reactive}</version>\n       </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjM2MA=="}, "originalCommit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NzE1NQ==", "bodyText": "the problem is I am removing that :D to avoid issues importing our bom together with Quarkus bom (a problem especially for kogito-examples, users, or even quarkus platform where it interacts weirdly with the platform bom); a solution may be not to add dependencies to  and instead explicitly use the version property", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r466197155", "createdAt": "2020-08-06T07:21:54Z", "author": {"login": "evacchi"}, "path": "pom.xml", "diffHunk": "@@ -692,6 +692,11 @@\n         <artifactId>smallrye-reactive-messaging-provider</artifactId>\n         <version>${version.io.smallrye.reactive}</version>\n       </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjM2MA=="}, "originalCommit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5OTU3MQ==", "bodyText": "So should I add it to the addon as a provided dependency? Will work anyway, but the user should use the right property. That said, I think that having the version in the POM instead will work. @evacchi wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/642#discussion_r466399571", "createdAt": "2020-08-06T13:10:00Z", "author": {"login": "ricardozanini"}, "path": "pom.xml", "diffHunk": "@@ -692,6 +692,11 @@\n         <artifactId>smallrye-reactive-messaging-provider</artifactId>\n         <version>${version.io.smallrye.reactive}</version>\n       </dependency>\n+      <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjM2MA=="}, "originalCommit": {"oid": "b94b82e1a354895f2816f937644f7b8d2834745a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4884, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}