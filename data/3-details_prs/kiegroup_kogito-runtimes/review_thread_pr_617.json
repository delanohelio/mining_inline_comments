{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mzc2MTQ3", "number": 617, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoxOTozOFrOEMxaQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoxOTozOFrOEMxaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODI3OTA1OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile.drools", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoxOTozOFrOGvEs-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNToxMVrOGvE4AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxMzMwNg==", "bodyText": "is  ${MAVEN_EXTRA_ARGS} not needed here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/617#discussion_r452013306", "createdAt": "2020-07-09T07:19:38Z", "author": {"login": "evacchi"}, "path": "Jenkinsfile.drools", "diffHunk": "@@ -15,66 +15,119 @@ pipeline {\n         buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')\n         timeout(time: 120, unit: 'MINUTES')\n     }\n+    parameters {\n+        string(name: 'BRANCH_NAME', defaultValue: \"master\", description: 'Set the branch to build&test')\n+    }\n     environment {\n         KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')\n-        // query mvn to get the latest version\n-        DROOLS_VERSION = \"\"\"${sh (\n-            script: '$(mvn versions:display-property-updates -DincludeProperties=version.org.kie7 -DallowSnapshots -N  | grep version.org.kie7| cut -d\" \" -f8))'\n-            returnStdout: true).trim()}\"\"\"\n-        MAVEN_EXTRA_ARGS=\"-Dversion.org.kie7=${DROOLS_VERSION}\"\n         MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+\n+        // Set into 'Initialize' stage\n+        // DROOLS_VERSION\n+        // MAVEN_EXTRA_ARGS\n     }\n     stages {\n+        stage(\"Initialize\"){\n+            steps {\n+                script {\n+                    // query mvn to get the latest version\n+                    env.DROOLS_VERSION = \"\"\"${sh (\n+                            script: 'mvn versions:display-property-updates -DincludeProperties=version.org.kie7 -DallowSnapshots -N  | grep version.org.kie7 | cut -d \" \" -f8',\n+                            returnStdout: true\n+                        ).trim()}\"\"\"\n+                    echo \"Latest kie7 version is: ${env.DROOLS_VERSION}\"\n+\n+                    env.MAVEN_EXTRA_ARGS=\"-Dversion.org.kie7=${DROOLS_VERSION}\"\n+                }\n+            }\n+        }\n         stage('Build kogito-runtimes') {\n             steps {\n                 script {\n-                    echo \"Latest kie7 version is: ${DROOLS_VERSION}\"\n-                    maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS}\", false)\n+                    dir(\"kogito-runtimes\") {\n+                        checkout(githubscm.resolveRepository(\"kogito-runtimes\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings(\"clean install ${env.MAVEN_EXTRA_ARGS}\", false)\n+                    }\n+                }\n+            }\n+            post {\n+                always {\n+                    saveReports()\n                 }\n             }\n         }\n         stage('Build kogito-apps') {\n             steps {\n-                dir(\"kogito-apps\") {\n-                    script {\n-                        checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-apps.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-apps']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-apps.git']]])\n-                        maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS}\", false)\n+                script {\n+                    dir(\"kogito-apps\") {\n+                        checkout(githubscm.resolveRepository(\"kogito-apps\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings(\"clean install ${env.MAVEN_EXTRA_ARGS}\", false)\n                     }\n                 }\n             }\n+            post {\n+                always {\n+                    saveReports()\n+                }\n+            }\n         }\n         stage('Build kogito-examples') {\n             steps {\n-                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])\n-                dir(\"kogito-examples\") {\n-                    script {\n-                        maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS}\", false)\n+                script {\n+                    dir(\"kogito-examples\") {\n+                        checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings(\"clean install ${env.MAVEN_EXTRA_ARGS}\", false)\n                     }\n                 }\n-                // Use a separate dir for persistence to not overwrite the test results\n-                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples-persistence']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])\n+            }\n+            post {\n+                always {\n+                    saveReports()\n+                }\n+            }\n+        }\n+        stage('Build kogito-examples with persistence') {\n+            steps {\n                 dir(\"kogito-examples-persistence\") {\n                     script {\n-                        // Don't run with tests so far, see: https://github.com/quarkusio/quarkus/issues/6885\n-                        maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS} -Ppersistence\", true)\n+                        checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912ba054118adc51f99e72a179079097fe2d16e5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjEyOQ==", "bodyText": "it is, I will add it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/617#discussion_r452016129", "createdAt": "2020-07-09T07:25:11Z", "author": {"login": "radtriste"}, "path": "Jenkinsfile.drools", "diffHunk": "@@ -15,66 +15,119 @@ pipeline {\n         buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')\n         timeout(time: 120, unit: 'MINUTES')\n     }\n+    parameters {\n+        string(name: 'BRANCH_NAME', defaultValue: \"master\", description: 'Set the branch to build&test')\n+    }\n     environment {\n         KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')\n-        // query mvn to get the latest version\n-        DROOLS_VERSION = \"\"\"${sh (\n-            script: '$(mvn versions:display-property-updates -DincludeProperties=version.org.kie7 -DallowSnapshots -N  | grep version.org.kie7| cut -d\" \" -f8))'\n-            returnStdout: true).trim()}\"\"\"\n-        MAVEN_EXTRA_ARGS=\"-Dversion.org.kie7=${DROOLS_VERSION}\"\n         MAVEN_OPTS = '-Xms1024m -Xmx4g'\n+\n+        // Set into 'Initialize' stage\n+        // DROOLS_VERSION\n+        // MAVEN_EXTRA_ARGS\n     }\n     stages {\n+        stage(\"Initialize\"){\n+            steps {\n+                script {\n+                    // query mvn to get the latest version\n+                    env.DROOLS_VERSION = \"\"\"${sh (\n+                            script: 'mvn versions:display-property-updates -DincludeProperties=version.org.kie7 -DallowSnapshots -N  | grep version.org.kie7 | cut -d \" \" -f8',\n+                            returnStdout: true\n+                        ).trim()}\"\"\"\n+                    echo \"Latest kie7 version is: ${env.DROOLS_VERSION}\"\n+\n+                    env.MAVEN_EXTRA_ARGS=\"-Dversion.org.kie7=${DROOLS_VERSION}\"\n+                }\n+            }\n+        }\n         stage('Build kogito-runtimes') {\n             steps {\n                 script {\n-                    echo \"Latest kie7 version is: ${DROOLS_VERSION}\"\n-                    maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS}\", false)\n+                    dir(\"kogito-runtimes\") {\n+                        checkout(githubscm.resolveRepository(\"kogito-runtimes\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings(\"clean install ${env.MAVEN_EXTRA_ARGS}\", false)\n+                    }\n+                }\n+            }\n+            post {\n+                always {\n+                    saveReports()\n                 }\n             }\n         }\n         stage('Build kogito-apps') {\n             steps {\n-                dir(\"kogito-apps\") {\n-                    script {\n-                        checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-apps.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-apps']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-apps.git']]])\n-                        maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS}\", false)\n+                script {\n+                    dir(\"kogito-apps\") {\n+                        checkout(githubscm.resolveRepository(\"kogito-apps\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings(\"clean install ${env.MAVEN_EXTRA_ARGS}\", false)\n                     }\n                 }\n             }\n+            post {\n+                always {\n+                    saveReports()\n+                }\n+            }\n         }\n         stage('Build kogito-examples') {\n             steps {\n-                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])\n-                dir(\"kogito-examples\") {\n-                    script {\n-                        maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS}\", false)\n+                script {\n+                    dir(\"kogito-examples\") {\n+                        checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings(\"clean install ${env.MAVEN_EXTRA_ARGS}\", false)\n                     }\n                 }\n-                // Use a separate dir for persistence to not overwrite the test results\n-                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples-persistence']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])\n+            }\n+            post {\n+                always {\n+                    saveReports()\n+                }\n+            }\n+        }\n+        stage('Build kogito-examples with persistence') {\n+            steps {\n                 dir(\"kogito-examples-persistence\") {\n                     script {\n-                        // Don't run with tests so far, see: https://github.com/quarkusio/quarkus/issues/6885\n-                        maven.runMavenWithSubmarineSettings(\"clean install ${MAVEN_EXTRA_ARGS} -Ppersistence\", true)\n+                        checkout(githubscm.resolveRepository(\"kogito-examples\", \"kiegroup\", params.BRANCH_NAME, false))\n+                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxMzMwNg=="}, "originalCommit": {"oid": "912ba054118adc51f99e72a179079097fe2d16e5"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 19, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}