{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjczMjYx", "number": 502, "title": "[KOGITO-1968] Allow milestones to trigger completion and tests", "bodyText": "Remove legacy Case related classes\nAdd lambda to trigger event in EndNodeVisitor\nMilestoneNodes should be completed when the event is received --> No conditions supported yet KOGITO-2168\nSmall clean-up\nExpose milestones method in API\n\nSigned-off-by: ruromero rromerom@redhat.com", "createdAt": "2020-05-12T11:48:15Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502", "merged": true, "mergeCommit": {"oid": "fd74249e85457b509c62019aee233762fca0260a"}, "closed": true, "closedAt": "2020-05-25T14:04:43Z", "author": {"login": "ruromero"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcglN71ABqjMzMjc3OTgyOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckr1BJgBqjMzNjkzNDExNjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0fe7b39454c2fb746172190a982498f766a74c0", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a0fe7b39454c2fb746172190a982498f766a74c0", "committedDate": "2020-05-12T11:46:55Z", "message": "[KOGITO-1968] Allow milestones to trigger completion and tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "0a9fe26c9b0d0f6452f7e20027a02ffdbb9af6bd", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a9fe26c9b0d0f6452f7e20027a02ffdbb9af6bd", "committedDate": "2020-05-12T14:33:14Z", "message": "[KOGITO-1968] Allow milestones to trigger completion and tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a9fe26c9b0d0f6452f7e20027a02ffdbb9af6bd", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a9fe26c9b0d0f6452f7e20027a02ffdbb9af6bd", "committedDate": "2020-05-12T14:33:14Z", "message": "[KOGITO-1968] Allow milestones to trigger completion and tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "49af4e0b7b7a207b0a97eb658b3d4dc8334e9f3f", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/49af4e0b7b7a207b0a97eb658b3d4dc8334e9f3f", "committedDate": "2020-05-12T16:46:25Z", "message": "[KOGITO-1968] Allow milestones to trigger completion and tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49af4e0b7b7a207b0a97eb658b3d4dc8334e9f3f", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/49af4e0b7b7a207b0a97eb658b3d4dc8334e9f3f", "committedDate": "2020-05-12T16:46:25Z", "message": "[KOGITO-1968] Allow milestones to trigger completion and tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8f227e60c65322cfcf371fe3ee9ff81f8397252c", "committedDate": "2020-05-13T10:35:16Z", "message": "[KOGITO-1968] Allow milestones to trigger completion and tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwODQ2MTIz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-410846123", "createdAt": "2020-05-13T11:51:40Z", "commit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1MTo0MFrOGUt5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1NjozNlrOGUuDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NjY1Nw==", "bodyText": "why is this needed? if we make getAgenda() return null in the dummy implementation then you can just null check getAgenda(). Remember we want to get rid of the dummy implementation.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424376657", "createdAt": "2020-05-13T11:51:40Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/rule/RuleRuntime.java", "diffHunk": "@@ -45,6 +45,13 @@\n      */\n     Agenda getAgenda();\n \n+    /**\n+     * @return true if the Runtime supports the Agenda\n+     */\n+    default boolean hasAgenda() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzgyNg==", "bodyText": "memo: I wonder if we should keep these overrides in Kogito", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424377826", "createdAt": "2020-05-13T11:53:55Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -142,7 +144,7 @@ public void addNodeInstance(final NodeInstance nodeInstance) {\n \n     @Override\n     public int getLevelForNode(String uniqueID) {\n-        if (\"true\".equalsIgnoreCase(System.getProperty(\"jbpm.loop.level.disabled\"))) {\n+        if (Boolean.parseBoolean(System.getProperty(\"jbpm.loop.level.disabled\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3OTI0Ng==", "bodyText": "I can see now where rules are used, and we should probably write a short spec for this and see how we can reproduce it in the best way. Rule flow groups should be considered deprecated for Drools. Maybe we can write a \"System RuleUnit\" in the libary if these rules are static, or we could synthesize a rule unit to be used internally.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424379246", "createdAt": "2020-05-13T11:56:36Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        if(getProcessInstance().getKnowledgeRuntime().hasAgenda()) {\n+            String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n+                    + \"-\" + getMilestoneNode().getUniqueId();\n+            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n+                    .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTcxMDQy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-410971042", "createdAt": "2020-05-13T14:17:09Z", "commit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNzowOVrOGUz0BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1NTo1MFrOGU1q9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MzYwNQ==", "bodyText": "good point, +1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424473605", "createdAt": "2020-05-13T14:17:09Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/rule/RuleRuntime.java", "diffHunk": "@@ -45,6 +45,13 @@\n      */\n     Agenda getAgenda();\n \n+    /**\n+     * @return true if the Runtime supports the Agenda\n+     */\n+    default boolean hasAgenda() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NjY1Nw=="}, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTI5Mg==", "bodyText": "suggestion\n.filter(nodeInstance -> Objects.equals(nodeInstance.getId(), nodeInstanceId))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424481292", "createdAt": "2020-05-13T14:27:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -193,22 +195,15 @@ public void removeNodeInstance(final NodeInstance nodeInstance) {\n \n     @Override\n     public NodeInstance getNodeInstance(String nodeInstanceId) {\n-        for (NodeInstance nodeInstance : nodeInstances) {\n-            if (nodeInstance.getId().equals(nodeInstanceId)) {\n-                return nodeInstance;\n-            }\n-        }\n-        return null;\n+        return getNodeInstance(nodeInstanceId, false);\n     }\n \n     @Override\n     public NodeInstance getNodeInstance(String nodeInstanceId, boolean recursive) {\n-        for (NodeInstance nodeInstance : getNodeInstances(recursive)) {\n-            if (nodeInstance.getId().equals(nodeInstanceId)) {\n-                return nodeInstance;\n-            }\n-        }\n-        return null;\n+        return getNodeInstances(recursive).stream()\n+                .filter(nodeInstance -> nodeInstance.getId().equals(nodeInstanceId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5OTc4Nw==", "bodyText": "trying to simplify this block... just sugestion:\nOptional.ofNullable(getProcessInstance())\n                .map(WorkflowProcessInstance::getKnowledgeRuntime)\n                .map(InternalKnowledgeRuntime::getAgenda)                \n                .filter(InternalAgenda.class::isInstance)\n                .map(InternalAgenda.class::cast)\n                .map(agenda -> {\n                    String rule =\n                            \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId() + \"-\" + getMilestoneNode().getUniqueId();\n                    return agenda.isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n                })\n                .orElse(true);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424499787", "createdAt": "2020-05-13T14:50:35Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,13 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNDA1Mg==", "bodyText": "Are the castings safe? WorkflowProcess, WorkflowProcessInstance, Is it worth checking instanceof before casting?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r424504052", "createdAt": "2020-05-13T14:55:50Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f227e60c65322cfcf371fe3ee9ff81f8397252c"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "907dd1f89ec3a7bdc5534618f966a4bccbbd90a3", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/907dd1f89ec3a7bdc5534618f966a4bccbbd90a3", "committedDate": "2020-05-13T14:46:14Z", "message": "[KOGITO-1968] DummyKnowledgeRuntime#getAgenda return null\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/298d0f68776e23a7c1bfd8bb0a9793760eacafc4", "committedDate": "2020-05-13T15:04:07Z", "message": "[KOGITO-1968] DummyKnowledgeRuntime#getAgenda return null\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjgzMTQw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-411283140", "createdAt": "2020-05-13T20:41:17Z", "commit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODY3OTYy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-413867962", "createdAt": "2020-05-18T19:11:33Z", "commit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMTozM1rOGXELFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxNzozMVrOGXEWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw==", "bodyText": "So Kogito process instance is completed, but legacy process instance is still active? Is that right? If so, why is it like that? I understand that cases are basically never complete as we discussed it on Zulip, but this can be considered as an inconsistency - one status is completed, the second one is active.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r426838807", "createdAt": "2020-05-18T19:11:33Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MTcyNA==", "bodyText": "Also btw - this feature is already present in 7.x? I think that we can there only close or destroy a case instance, right? We cannot explicitly complete it...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r426841724", "createdAt": "2020-05-18T19:17:31Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -163,14 +164,20 @@ public void start(String trigger, String referenceId) {\n             this.status = legacyProcessInstance.getState();\n         }\n     }\n+\n+    public void complete() {\n+        if(((WorkflowProcess)legacyProcessInstance.getProcess()).isDynamic() && this.status.equals(ProcessInstance.STATE_ACTIVE)) {\n+            ((WorkflowProcessInstance)legacyProcessInstance).setState(STATE_ACTIVE);\n+            this.status = ProcessInstance.STATE_COMPLETED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODgwNw=="}, "originalCommit": {"oid": "298d0f68776e23a7c1bfd8bb0a9793760eacafc4"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a5eb77d05cfb579850af45999d62a0d9ad8ce4f", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4a5eb77d05cfb579850af45999d62a0d9ad8ce4f", "committedDate": "2020-05-19T15:00:00Z", "message": "[KOGITO-1968] Validate both states\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "0cda3ed4c1ae6d9bd2eaebaed05a8e6ba6a14a9b", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0cda3ed4c1ae6d9bd2eaebaed05a8e6ba6a14a9b", "committedDate": "2020-05-19T15:34:06Z", "message": "[KOGITO-1968] Validate both states\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzM2NzI5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-415336729", "createdAt": "2020-05-20T13:31:49Z", "commit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTQwOTg1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-415940985", "createdAt": "2020-05-21T07:39:37Z", "commit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozOTozN1rOGYpSSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo0NjoyNFrOGYpdfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTQzMg==", "bodyText": "from a perspective that processes will have at least some degree of structure, would it still make sense to allow it to be completed at any time? Thinking if we should first try to go for having a minial path that demonstrates how the process will be completed, not so much like a case close action. @ruromero @krisv wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428495432", "createdAt": "2020-05-21T07:39:37Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -65,7 +65,12 @@\n      * @param referenceId optional reference id that points to a another  component triggering this instance\n      */\n     void startFrom(String nodeId, String referenceId);\n-    \n+\n+    /**\n+     * Completes a dynamic process that is in the ACTIVE state.\n+     */\n+    void complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NzQxNQ==", "bodyText": "@ruromero is there any point for us to add this if we wont actually use this approach with the internal agenda? I guess we should simply set active to true.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428497415", "createdAt": "2020-05-21T07:44:13Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,10 +53,14 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                + \"-\" + getMilestoneNode().getUniqueId();\n-        boolean isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n+        boolean isActive = true;\n+        // KOGITO-2168 Conditions not supported\n+        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5ODMwMw==", "bodyText": "@ruromero should the actual milestone state be checked here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428498303", "createdAt": "2020-05-21T07:46:24Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9186456f1fefeb02b3349b7ba2013894aa9ed3d6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTAyNjE1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-416102615", "createdAt": "2020-05-21T12:25:59Z", "commit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoyNTo1OVrOGYw5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowNzo0NFrOGYyFew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMDEzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ProcessInstance<?> processInstance = p.createInstance(m);\n          \n          \n            \n                    ProcessInstance<?> processInstance = p.createInstance(p.createInstance(p.createModel()));", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428620137", "createdAt": "2020-05-21T12:25:59Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjE4MA==", "bodyText": "I think you can simplify the status check by doing:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertState(processInstance, ProcessInstance.STATE_PENDING);\n          \n          \n            \n            assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_PENDING);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428622180", "createdAt": "2020-05-21T12:30:34Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjkxOA==", "bodyText": "Im not sure what's the point in regards to testing milestones to call complete here, I would recommend removing it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428622918", "createdAt": "2020-05-21T12:32:13Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+        processInstance.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzOTYxMQ==", "bodyText": "@ruromero I guess the idea would be to add a method into RuleFlowProcessInstance with a list of miliestones, that then we could check using a status like MilestoneStatus from v7. No need to publish it in the ProcessInstance object for now.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r428639611", "createdAt": "2020-05-21T13:07:44Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.jbpm.ruleflow.core.Metadata;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.core.Node;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class MilestoneTest extends AbstractCodegenTest {\n+\n+    @Test\n+    void testSimpleMilestone() throws Exception {\n+\n+        Application app = generateCodeProcessesOnly(\"cases/SimpleMilestone.bpmn\");\n+        assertThat(app).isNotNull();\n+\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.SimpleMilestone\");\n+\n+        Model m = p.createModel();\n+        Map<String, Object> parameters = new HashMap<>();\n+        m.fromMap(parameters);\n+        ProcessInstance<?> processInstance = p.createInstance(m);\n+\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+        processInstance.complete();\n+        assertState(processInstance, ProcessInstance.STATE_PENDING);\n+\n+        processInstance.start();\n+        assertState(processInstance, ProcessInstance.STATE_ACTIVE);\n+        \n+        RuleFlowProcessInstance legacyProcessInstance = (RuleFlowProcessInstance)((AbstractProcessInstance<?>) processInstance).legacyProcessInstance;\n+        assertThat(legacyProcessInstance.getNodeInstances()).isEmpty();\n+        assertThat(legacyProcessInstance.getNodeIdInError()).isNullOrEmpty();\n+        Optional<String> milestoneId = Stream.of(legacyProcessInstance.getNodeContainer().getNodes()).filter(node -> node.getName().equals(\"Milestone1\")).map(n -> (String)n.getMetaData().get(Metadata.UNIQUE_ID)).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0d50cf64a0fe1f340e8b18eee53676627d5379"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32e01b6f3f48b5b4c43ae244c89f0e382cbac433", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/32e01b6f3f48b5b4c43ae244c89f0e382cbac433", "committedDate": "2020-05-21T16:45:09Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "79cd7a1ad0de3a91eea6046e7da195704265c0bc", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/79cd7a1ad0de3a91eea6046e7da195704265c0bc", "committedDate": "2020-05-21T16:45:39Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79cd7a1ad0de3a91eea6046e7da195704265c0bc", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/79cd7a1ad0de3a91eea6046e7da195704265c0bc", "committedDate": "2020-05-21T16:45:39Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "66965cb8d73e701164e3e801dc3c9d5f0caded20", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/66965cb8d73e701164e3e801dc3c9d5f0caded20", "committedDate": "2020-05-21T16:51:59Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66965cb8d73e701164e3e801dc3c9d5f0caded20", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/66965cb8d73e701164e3e801dc3c9d5f0caded20", "committedDate": "2020-05-21T16:51:59Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "666317c55fa31fd6b26ecb0d2f69a9d076227644", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/666317c55fa31fd6b26ecb0d2f69a9d076227644", "committedDate": "2020-05-21T16:54:22Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "666317c55fa31fd6b26ecb0d2f69a9d076227644", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/666317c55fa31fd6b26ecb0d2f69a9d076227644", "committedDate": "2020-05-21T16:54:22Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "7de57ff745101d539cdbf532c2832ae41ca63738", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7de57ff745101d539cdbf532c2832ae41ca63738", "committedDate": "2020-05-21T16:59:35Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7de57ff745101d539cdbf532c2832ae41ca63738", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7de57ff745101d539cdbf532c2832ae41ca63738", "committedDate": "2020-05-21T16:59:35Z", "message": "[KOGITO-1968] Remove complete and add milestones method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "b79a543fd0a66827cda74afcd9c547ee3f347306", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b79a543fd0a66827cda74afcd9c547ee3f347306", "committedDate": "2020-05-22T08:30:56Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b79a543fd0a66827cda74afcd9c547ee3f347306", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b79a543fd0a66827cda74afcd9c547ee3f347306", "committedDate": "2020-05-22T08:30:56Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "bc3e7ab996d726089ed6b3f50c8837c679dd8e7c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc3e7ab996d726089ed6b3f50c8837c679dd8e7c", "committedDate": "2020-05-22T08:39:40Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzY1NDQ1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-416765445", "createdAt": "2020-05-22T09:14:29Z", "commit": {"oid": "7de57ff745101d539cdbf532c2832ae41ca63738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTo1OVrOGZQXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTo1OVrOGZQXZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTcxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CaseNodeInstance implements Serializable {\n          \n          \n            \n            public class MilestoneInstance implements Serializable {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r429135717", "createdAt": "2020-05-22T09:15:59Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/CaseNodeInstance.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process;\n+\n+import java.io.Serializable;\n+\n+public class CaseNodeInstance implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3e7ab996d726089ed6b3f50c8837c679dd8e7c"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc3e7ab996d726089ed6b3f50c8837c679dd8e7c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc3e7ab996d726089ed6b3f50c8837c679dd8e7c", "committedDate": "2020-05-22T08:39:40Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "acf9afe2dbce7478051e1124a3c3b794673f96fb", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/acf9afe2dbce7478051e1124a3c3b794673f96fb", "committedDate": "2020-05-22T12:53:14Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acf9afe2dbce7478051e1124a3c3b794673f96fb", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/acf9afe2dbce7478051e1124a3c3b794673f96fb", "committedDate": "2020-05-22T12:53:14Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "155315725d533ad1dbfbc9251d6822aee9ff1c43", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/155315725d533ad1dbfbc9251d6822aee9ff1c43", "committedDate": "2020-05-22T13:12:40Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDA2MTI5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-417006129", "createdAt": "2020-05-22T15:37:38Z", "commit": {"oid": "155315725d533ad1dbfbc9251d6822aee9ff1c43"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozNzozOFrOGZbiOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozNzozOFrOGZbiOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Stream<Node> getCaseNodeInstances(Class<? extends Node> nodeClass) {\n          \n          \n            \n                private Stream<Node> getNodeInstances(Class<? extends Node> nodeClass) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#discussion_r429318713", "createdAt": "2020-05-22T15:37:38Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -368,6 +378,35 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n         return legacyProcessInstance().getEventDescriptions();\n     }\n \n+    @Override\n+    public Collection<Milestone> milestones() {\n+        return getCaseNodeInstances(MilestoneNode.class)\n+                .map(n -> {\n+                    String uid = (String) n.getMetaData().get(UNIQUE_ID);\n+                    return new Milestone(uid, n.getName(), getStatus(uid));\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Stream<Node> getCaseNodeInstances(Class<? extends Node> nodeClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155315725d533ad1dbfbc9251d6822aee9ff1c43"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDQ1Mjc1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/502#pullrequestreview-417445275", "createdAt": "2020-05-25T04:02:47Z", "commit": {"oid": "58920d9db58a131e43d9c64b09094825bf5991bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58920d9db58a131e43d9c64b09094825bf5991bc", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/58920d9db58a131e43d9c64b09094825bf5991bc", "committedDate": "2020-05-22T19:06:19Z", "message": "[KOGITO-1968] Rename to getNodes method\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "26c3b845d30a9b9bada50fd59ede11907c1d3db2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/26c3b845d30a9b9bada50fd59ede11907c1d3db2", "committedDate": "2020-05-25T07:05:16Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcba877fbd158558ac37295ac441196c7509052", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0fcba877fbd158558ac37295ac441196c7509052", "committedDate": "2020-05-25T08:31:03Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26c3b845d30a9b9bada50fd59ede11907c1d3db2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/26c3b845d30a9b9bada50fd59ede11907c1d3db2", "committedDate": "2020-05-25T07:05:16Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "0fcba877fbd158558ac37295ac441196c7509052", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0fcba877fbd158558ac37295ac441196c7509052", "committedDate": "2020-05-25T08:31:03Z", "message": "[KOGITO-1968] Allow milestones to trigger completion\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3482, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}