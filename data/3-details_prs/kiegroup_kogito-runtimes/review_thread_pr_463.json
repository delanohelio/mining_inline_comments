{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTYwNzAx", "number": 463, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyMzo0NFrOD7-7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoxMDoyNVrOD7_-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjIzNzM4OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyMzo0NFrOGUpEgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyMzo0NFrOGUpEgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5NzYwMg==", "bodyText": "I assume we plan to make this generic in T ? maybe in a future PR? We may have one API for Map and one API for T", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424297602", "createdAt": "2020-05-13T09:23:44Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModel.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package org.kie.kogito.decision;\n \n-import java.util.Map;\n-\n import org.kie.dmn.api.core.DMNContext;\n import org.kie.dmn.api.core.DMNModel;\n import org.kie.dmn.api.core.DMNResult;\n \n public interface DecisionModel {\n \n-    DMNContext newContext(Map<String, Object> variables);\n+    DMNContext newContext(Object variables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI1MDIxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyNzowNVrOGUpNHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1NToxOVrOGUqQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTgwNw==", "bodyText": "currently all APIs are under bare kogito.* so I would use that for consistency\nnote: I do I think we should move them under quarkus.kogito.*, when quarkus is in use -- but that's especially because of a hard limitation of the config extension API -- when we will do that change, we will fix this too.\nI also think we should kogito.decisions.* is that fine @tarilabs ?\nwhy is it called openapi? why not just call it \"typed\" or something like that?\nwould it make sense to make true the default for kogito?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424299807", "createdAt": "2020-05-13T09:27:05Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -53,9 +58,12 @@\n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n+    public static String OPEN_API_CONFIGURATION_KEY = \"quarkus.kogito.dmn.openapi\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxNDg0OA==", "bodyText": "nope, as there are known issues pending, so we want this flag as experimental", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424314848", "createdAt": "2020-05-13T09:51:42Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -53,9 +58,12 @@\n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n+    public static String OPEN_API_CONFIGURATION_KEY = \"quarkus.kogito.dmn.openapi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTgwNw=="}, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxNjk1NA==", "bodyText": "@evacchi feature is still in progress, therefore the false default but yes, it'd make total sense", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424316954", "createdAt": "2020-05-13T09:55:19Z", "author": {"login": "lucamolteni"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -53,9 +58,12 @@\n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n+import static org.kie.kogito.codegen.ApplicationGenerator.logger;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n+    public static String OPEN_API_CONFIGURATION_KEY = \"quarkus.kogito.dmn.openapi\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTgwNw=="}, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI1NDQ0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyODowNFrOGUpP7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyODowNFrOGUpP7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMDUyNQ==", "bodyText": "I assume this is \"template variable\", so please use the same convention $inputType$)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424300525", "createdAt": "2020-05-13T09:28:04Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "diffHunk": "@@ -18,7 +20,7 @@\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Object dmn(java.util.Map<String, Object> variables) {\n+    public Object dmn(INPUT_TYPE variables) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI1ODYzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyOToxOFrOGUpSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTowNToxNFrOGUsffQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMTI0Mw==", "bodyText": "It is probably better to move this change to another PR or at least add this to PR title so that it will be more explicit. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424301243", "createdAt": "2020-05-13T09:29:18Z", "author": {"login": "danielezonca"}, "path": "pom.xml", "diffHunk": "@@ -134,7 +134,7 @@\n     <version.org.keycloak.image>8.0.1</version.org.keycloak.image>\n     <version.org.mockito>3.0.0</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.36.1.Final</version.org.kie7>\n+    <version.org.kie7>7.37.0.Final</version.org.kie7>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1MzY2MQ==", "bodyText": "To me it's the same, anyway I added in the comment", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424353661", "createdAt": "2020-05-13T11:05:14Z", "author": {"login": "lucamolteni"}, "path": "pom.xml", "diffHunk": "@@ -134,7 +134,7 @@\n     <version.org.keycloak.image>8.0.1</version.org.keycloak.image>\n     <version.org.mockito>3.0.0</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.36.1.Final</version.org.kie7>\n+    <version.org.kie7>7.37.0.Final</version.org.kie7>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMTI0Mw=="}, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI2MjMxOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDoxMFrOGUpU8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDoxMFrOGUpU8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMTgxMA==", "bodyText": "how about leaving this one as-it-was, and having the overload accepting FEELPropertyAccessible ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424301810", "createdAt": "2020-05-13T09:30:10Z", "author": {"login": "tarilabs"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModel.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package org.kie.kogito.decision;\n \n-import java.util.Map;\n-\n import org.kie.dmn.api.core.DMNContext;\n import org.kie.dmn.api.core.DMNModel;\n import org.kie.dmn.api.core.DMNResult;\n \n public interface DecisionModel {\n \n-    DMNContext newContext(Map<String, Object> variables);\n+    DMNContext newContext(Object variables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI2MzA3OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/PropertyValueResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDoyM1rOGUpVdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDoyM1rOGUpVdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMTk0Mw==", "bodyText": "dead class?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424301943", "createdAt": "2020-05-13T09:30:23Z", "author": {"login": "tarilabs"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/PropertyValueResult.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.kie.kogito.decision;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI3Mjg4OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/integration-test/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMjo1MFrOGUpbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1NTowNFrOGUqPgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzQ4Nw==", "bodyText": "Why is this overriding an existing property? Isn't that used by other Integration Tests?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424303487", "createdAt": "2020-05-13T09:32:50Z", "author": {"login": "tarilabs"}, "path": "kogito-quarkus-extension/integration-test/src/main/resources/application.properties", "diffHunk": "@@ -14,4 +14,4 @@\n # limitations under the License.\n #\n \n-quarkus.http.port=65535\n\\ No newline at end of file\n+quarkus.kogito.dmn.openapi=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxMTM2Mw==", "bodyText": "? it's not overriding, it's defining the property.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424311363", "createdAt": "2020-05-13T09:46:00Z", "author": {"login": "lucamolteni"}, "path": "kogito-quarkus-extension/integration-test/src/main/resources/application.properties", "diffHunk": "@@ -14,4 +14,4 @@\n # limitations under the License.\n #\n \n-quarkus.http.port=65535\n\\ No newline at end of file\n+quarkus.kogito.dmn.openapi=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzQ4Nw=="}, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxNjgwMA==", "bodyText": "Understood offline this file previously was ignored, as it was in a wrong location, so whatever was present in this file was not relevant. My original comment then has no basis. Resolving.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424316800", "createdAt": "2020-05-13T09:55:04Z", "author": {"login": "tarilabs"}, "path": "kogito-quarkus-extension/integration-test/src/main/resources/application.properties", "diffHunk": "@@ -14,4 +14,4 @@\n # limitations under the License.\n #\n \n-quarkus.http.port=65535\n\\ No newline at end of file\n+quarkus.kogito.dmn.openapi=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzQ4Nw=="}, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI3NDY3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMzoyMVrOGUpcsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDowMzo0M1rOGUqjkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzc5NA==", "bodyText": "@mariofusco @evacchi please especially validate this one for us, thank you.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424303794", "createdAt": "2020-05-13T09:33:21Z", "author": {"login": "tarilabs"}, "path": "pom.xml", "diffHunk": "@@ -134,7 +134,7 @@\n     <version.org.keycloak.image>8.0.1</version.org.keycloak.image>\n     <version.org.mockito>3.0.0</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.36.1.Final</version.org.kie7>\n+    <version.org.kie7>7.37.0.Final</version.org.kie7>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMTkzOA==", "bodyText": "asked in chat yesterday @tarilabs", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424321938", "createdAt": "2020-05-13T10:03:43Z", "author": {"login": "lucamolteni"}, "path": "pom.xml", "diffHunk": "@@ -134,7 +134,7 @@\n     <version.org.keycloak.image>8.0.1</version.org.keycloak.image>\n     <version.org.mockito>3.0.0</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n-    <version.org.kie7>7.36.1.Final</version.org.kie7>\n+    <version.org.kie7>7.37.0.Final</version.org.kie7>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzc5NA=="}, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI3NTQyOnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/integration-test/src/test/java/io/quarkus/it/kogito/dmn/DMNTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMzozNFrOGUpdJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMzozNFrOGUpdJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzkxMA==", "bodyText": "missing license header", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424303910", "createdAt": "2020-05-13T09:33:34Z", "author": {"login": "tarilabs"}, "path": "kogito-quarkus-extension/integration-test/src/test/java/io/quarkus/it/kogito/dmn/DMNTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.it.kogito.dmn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a31698bcaadfffb93398dd7b915da085f270ef"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQwNjg0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoxMDoxNlrOGUqxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoxMDoxNlrOGUqxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNTU1MQ==", "bodyText": "Do we need this import?\nIf it is optional I would prefer to add it if used (or use FQCN) instead of leave an unused import. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424325551", "createdAt": "2020-05-13T10:10:16Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "diffHunk": "@@ -10,6 +10,8 @@\n import org.kie.kogito.dmn.rest.DMNEvaluationErrorException;\n import org.kie.kogito.dmn.rest.DMNResult;\n \n+import org.kie.dmn.api.core.FEELPropertyAccessible;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fccd37d28d3acbb8e6a159040f22be11db1a04"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQwNzI5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoxMDoyNVrOGUqx9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTowMzo1MFrOGUsc2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNTYyMg==", "bodyText": "When does this happen?\nBtw I think we should just fail and not proceed: it is opt-in so I expect if user switch on this feature and it is not possible to make it work for a problem in the model it should fail. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424325622", "createdAt": "2020-05-13T10:10:25Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -168,6 +188,27 @@ public DecisionContainerGenerator moduleGenerator() {\n         return generatedFiles;\n     }\n \n+    private void tryGenerateStronglyTypedInput(DMNModel model) {\n+        try {\n+            DMNTypeSafePackageName.Factory factory = m -> new DMNTypeSafePackageName(\"\", m.getNamespace(), \"\");\n+            DMNAllTypesIndex index = new DMNAllTypesIndex(factory, model);\n+\n+            Map<String, String> allTypesSourceCode = new DMNTypeSafeTypeGenerator(\n+                    model,\n+                    index, factory )\n+                    .generateSourceCodeOfAllTypes();\n+\n+            allTypesSourceCode.entrySet().stream()\n+                    .map(kv -> {\n+                        String key = kv.getKey().replace(\".\", \"/\") + \".java\";\n+                        return new GeneratedFile(GeneratedFile.Type.CLASS, key, kv.getValue());\n+                    })\n+                    .forEach(generatedFiles::add);\n+        } catch(Exception e) {\n+            logger.error(\"Unable to generate Strongly Typed Input for: {} {}\", model.getNamespace(), model.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43fccd37d28d3acbb8e6a159040f22be11db1a04"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1Mjk4Ng==", "bodyText": "Agree", "url": "https://github.com/kiegroup/kogito-runtimes/pull/463#discussion_r424352986", "createdAt": "2020-05-13T11:03:50Z", "author": {"login": "lucamolteni"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -168,6 +188,27 @@ public DecisionContainerGenerator moduleGenerator() {\n         return generatedFiles;\n     }\n \n+    private void tryGenerateStronglyTypedInput(DMNModel model) {\n+        try {\n+            DMNTypeSafePackageName.Factory factory = m -> new DMNTypeSafePackageName(\"\", m.getNamespace(), \"\");\n+            DMNAllTypesIndex index = new DMNAllTypesIndex(factory, model);\n+\n+            Map<String, String> allTypesSourceCode = new DMNTypeSafeTypeGenerator(\n+                    model,\n+                    index, factory )\n+                    .generateSourceCodeOfAllTypes();\n+\n+            allTypesSourceCode.entrySet().stream()\n+                    .map(kv -> {\n+                        String key = kv.getKey().replace(\".\", \"/\") + \".java\";\n+                        return new GeneratedFile(GeneratedFile.Type.CLASS, key, kv.getValue());\n+                    })\n+                    .forEach(generatedFiles::add);\n+        } catch(Exception e) {\n+            logger.error(\"Unable to generate Strongly Typed Input for: {} {}\", model.getNamespace(), model.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNTYyMg=="}, "originalCommit": {"oid": "43fccd37d28d3acbb8e6a159040f22be11db1a04"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 253, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}