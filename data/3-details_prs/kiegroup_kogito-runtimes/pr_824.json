{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzU1NTk0", "number": 824, "title": "[KOGITO-2849] Support for Compensations", "bodyText": "Fix https://issues.redhat.com/browse/KOGITO-2849\nSigned-off-by: ruromero rromerom@redhat.com\nCases covered:\n\nIntermediate compensation\nEnd Compensation\nSpecifying the node to compensate\nCompensate all completed nodes", "createdAt": "2020-10-13T19:46:13Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824", "merged": true, "mergeCommit": {"oid": "820408b268bc116b380f88d2dc9c4c1e2417d9af"}, "closed": true, "closedAt": "2020-10-27T14:28:16Z", "author": {"login": "ruromero"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUXtApABqjM4OTgzNDQ0Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWpxsEgFqTUxNzc2MTgzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e243d1de4f86a5cf8854885ffcdae64c58d3e35", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9e243d1de4f86a5cf8854885ffcdae64c58d3e35", "committedDate": "2020-10-19T19:49:11Z", "message": "[KOGITO-2849] Implement intermediate throw compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "426dce362a00c3ee86402458d6fa5bc96914803d", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/426dce362a00c3ee86402458d6fa5bc96914803d", "committedDate": "2020-10-20T12:12:32Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "426dce362a00c3ee86402458d6fa5bc96914803d", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/426dce362a00c3ee86402458d6fa5bc96914803d", "committedDate": "2020-10-20T12:12:32Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bd1070ef4aa4840ba0f3c02616bcb2478ffbe643", "committedDate": "2020-10-20T12:59:46Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDA3MTUy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#pullrequestreview-513007152", "createdAt": "2020-10-20T18:14:44Z", "commit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxNDo0NFrOHlK9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToyMDoxOVrOHlNd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczODg5NA==", "bodyText": "can we skip the .getMetaData(HIDDEN)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508738894", "createdAt": "2020-10-20T18:14:44Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "diffHunk": "@@ -255,14 +261,25 @@ private void visitInterfaces(org.kie.api.definition.process.Node[] nodes, BlockS\n     }\n \n     private void visitConnection(Connection connection, BlockStmt body) {\n-        // if the connection is a hidden one (compensations), don't dump\n-        Object hidden = ((ConnectionImpl) connection).getMetaData(HIDDEN);\n-        if (hidden != null && ((Boolean) hidden)) {\n-            return;\n+        String method = METHOD_CONNECTION;\n+        Object association = ((ConnectionImpl) connection).getMetaData(ASSOCIATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjczMg==", "bodyText": "should it be changed to debug?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508772732", "createdAt": "2020-10-20T19:06:54Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/test/resources/logback-test.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n   <!--  <logger name=\"org.kie.kogito.codegen\" level=\"debug\"/>-->\n \n-  <root level=\"info\">\n+  <root level=\"debug\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3OTk4NA==", "bodyText": "why not adding this test under https://github.com/kiegroup/kogito-runtimes/tree/3e7f93289ccce36edd457dd535b87fe263b59bdb/kogito-codegen/src/test/java/org/kie/kogito/codegen/tests ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508779984", "createdAt": "2020-10-20T19:20:19Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/CompensationTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.codegen.AbstractCodegenTest;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.kie.kogito.process.impl.ProcessTestUtils.assertState;\n+\n+class CompensationTest extends AbstractCodegenTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjUxNDc4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#pullrequestreview-513251478", "createdAt": "2020-10-21T01:52:40Z", "commit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMTo1Mjo0MVrOHlXU5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMTo1Mjo0MVrOHlXU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk0MTU0MQ==", "bodyText": "+1 to revert", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r508941541", "createdAt": "2020-10-21T01:52:41Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/resources/logback-test.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n   <!--  <logger name=\"org.kie.kogito.codegen\" level=\"debug\"/>-->\n \n-  <root level=\"info\">\n+  <root level=\"debug\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3MjczMg=="}, "originalCommit": {"oid": "bd1070ef4aa4840ba0f3c02616bcb2478ffbe643"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NzQwOTYx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#pullrequestreview-515740961", "createdAt": "2020-10-23T14:50:35Z", "commit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1MDozNlrOHnROdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozNDowNVrOHnTEVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzODc0Mw==", "bodyText": "I think this warning also says that we are overriding the isForCompensation to true if it was false. Which is not what we are doing, right? In case it is false (not null), we don't change it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510938743", "createdAt": "2020-10-23T14:50:36Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDEyOA==", "bodyText": "AFAIK according to specs only completed activities (nodes) or subprocesses can be compensated. When we have a dynamic process (case), then it is still not finished, so why do we allow compensation at the process level? Just because we want to have this flexibility and because it is technically possible? Then I think also compensate event subprocess in \"normal\" process at process-level is possible - we can just run it when the compensate event is thrown, the compensate event subprocess is started and it can for example throw various compensate events for more nodes on the process level. So I think this really comes down to if we want to run compensate event subprocess even though the enclosing process is not yet finished... What do you think?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510950128", "createdAt": "2020-10-23T15:07:24Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -822,25 +823,31 @@ private void postProcessNodes(RuleFlowProcess process, NodeContainer container)\n                                             }\n                                         } else if( type.equals(\"Compensation\") ) { \n                                             // 1. Find the parent sub-process to this event sub-process\n-                                            NodeContainer parentSubProcess;  \n+                                            NodeContainer parentSubProcess = null;\n                                             NodeContainer subProcess = eventSubProcessNode.getParentContainer();\n                                             Object isForCompensationObj = eventSubProcessNode.getMetaData(\"isForCompensation\");\n                                             if( isForCompensationObj == null ) { \n                                                 eventSubProcessNode.setMetaData(\"isForCompensation\", true );\n                                                 logger.warn( \"Overriding empty or false value of \\\"isForCompensation\\\" attribute on Event Sub-Process [\" \n                                                         + eventSubProcessNode.getMetaData(\"UniqueId\") + \"] and setting it to true.\");\n-                                            } \n-                                            if( subProcess instanceof RuleFlowProcess ) { \n-                                                // If jBPM deletes the process (instance) as soon as the process completes.. \n-                                                // ..how do you expect to signal compensation on the completed process (instance)?!?\n-                                                throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");\n                                             }\n-                                            parentSubProcess = ((Node) subProcess).getParentContainer();\n-\n+                                            String compensationHandlerId = \"\";\n+                                            if( subProcess instanceof RuleFlowProcess) {\n+                                                if(!process.isDynamic()) {\n+                                                    // If jBPM deletes the process (instance) as soon as the process completes..\n+                                                    // ..how do you expect to signal compensation on the completed process (instance)?!?\n+                                                    throw new IllegalArgumentException(\"Compensation Event Sub-Processes at the process level are not supported.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTk1NQ==", "bodyText": "I know it's unrelated, just noticed this here. This is removed just so we don't process the same node twice?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510955955", "createdAt": "2020-10-23T15:16:31Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/main/java/org/jbpm/bpmn2/xml/ProcessHandler.java", "diffHunk": "@@ -973,14 +980,14 @@ protected void handleIntermediateOrEndThrowCompensationEvent(ExtendedNodeImpl th\n         if( throwEventNode.getMetaData(\"compensation-activityRef\") != null ) { \n             String activityRef = (String) throwEventNode.getMetaData().remove(\"compensation-activityRef\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2ODkxOA==", "bodyText": "Can it happen that triggers are not empty but nodeMetaData.get(TRIGGER_TYPE) returns null?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r510968918", "createdAt": "2020-10-23T15:34:05Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,26 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c708e5a8267a8c63a8cc1e752ca22ac79f1258c"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTEwNTc4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#pullrequestreview-516910578", "createdAt": "2020-10-26T15:41:01Z", "commit": {"oid": "347aed09b75baf990f61bc34ba3926a963ab0998"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowMVrOHoVsSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowMVrOHoVsSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDQ5MQ==", "bodyText": "Hmm, now the triggerMetaData is always not null, so we can get rid of this check :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#discussion_r512060491", "createdAt": "2020-10-26T15:41:01Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/StartNodeVisitor.java", "diffHunk": "@@ -62,19 +62,23 @@ public void visitNode(String factoryField, StartNode node, BlockStmt body, Varia\n                     new IntegerLiteralExpr(node.getTimer().getTimeType())));\n \n         } else if (node.getTriggers() != null && !node.getTriggers().isEmpty()) {\n-            Map<String, Object> nodeMetaData = node.getMetaData();\n-            metadata.addTrigger(new TriggerMetaData((String) nodeMetaData.get(TRIGGER_REF),\n-                    (String) nodeMetaData.get(TRIGGER_TYPE),\n-                    (String) nodeMetaData.get(MESSAGE_TYPE),\n-                    (String) nodeMetaData.get(TRIGGER_MAPPING),\n-                    String.valueOf(node.getId())).validate());\n-\n-            handleSignal(node, nodeMetaData, body, variableScope, metadata);\n+            TriggerMetaData triggerMetaData = buildTriggerMetadata(node);\n+            if (triggerMetaData != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347aed09b75baf990f61bc34ba3926a963ab0998"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "347aed09b75baf990f61bc34ba3926a963ab0998", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/347aed09b75baf990f61bc34ba3926a963ab0998", "committedDate": "2020-10-26T10:04:17Z", "message": "[KOGITO-2849] Code review\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "ac473bc9c56a235af5192ce6dd6aa2f3e80d7cfd", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ac473bc9c56a235af5192ce6dd6aa2f3e80d7cfd", "committedDate": "2020-10-27T08:35:54Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "246ddea35348dfaaacb817db02fc7b69035068e2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/246ddea35348dfaaacb817db02fc7b69035068e2", "committedDate": "2020-10-27T08:36:21Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac473bc9c56a235af5192ce6dd6aa2f3e80d7cfd", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ac473bc9c56a235af5192ce6dd6aa2f3e80d7cfd", "committedDate": "2020-10-27T08:35:54Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "246ddea35348dfaaacb817db02fc7b69035068e2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/246ddea35348dfaaacb817db02fc7b69035068e2", "committedDate": "2020-10-27T08:36:21Z", "message": "[KOGITO-2849] Implement basic support for compensations\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NzU3MDYy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#pullrequestreview-517757062", "createdAt": "2020-10-27T14:19:53Z", "commit": {"oid": "246ddea35348dfaaacb817db02fc7b69035068e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NzYxODMx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/824#pullrequestreview-517761831", "createdAt": "2020-10-27T14:23:57Z", "commit": {"oid": "246ddea35348dfaaacb817db02fc7b69035068e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4022, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}