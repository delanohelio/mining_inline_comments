{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTk3Mzg2", "number": 412, "title": "[KOGITO-1492] Allow direct injection of event listeners", "bodyText": "I also added some utility methods in CodegenUtils and refactored DependencyInjectionAnnotator to make it more flexible (e.g. it allows direct return of the annotated nodes).\nEdit: moved the refactoring out of this PR since it was getting too big and out of scope.\nEdit 2: Related PR in kogito-examples", "createdAt": "2020-04-03T07:13:17Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412", "merged": true, "mergeCommit": {"oid": "3666a665e3eba6c32999beccb93e6cb3e7d627bf"}, "closed": true, "closedAt": "2020-04-10T13:00:55Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT9JhPgFqTM4NzAwOTg4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWQTYaAFqTM5MTQxODE5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDA5ODg1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#pullrequestreview-387009885", "createdAt": "2020-04-03T07:36:29Z", "commit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNjoyOVrOGAIYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0MToyMFrOGAIiEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDQ4NQ==", "bodyText": "@kostola\nHi! What's the need of the \"return this\" ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402790485", "createdAt": "2020-04-03T07:36:29Z", "author": {"login": "gitgabrio"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDcyOA==", "bodyText": "@kostola\nSame question as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402790728", "createdAt": "2020-04-03T07:36:57Z", "author": {"login": "gitgabrio"}, "path": "drools/drools-core/src/main/java/org/drools/core/config/CachedRuleEventListenerConfig.java", "diffHunk": "@@ -24,22 +24,32 @@\n \n public class CachedRuleEventListenerConfig implements RuleEventListenerConfig {\n \n-    private final List<AgendaEventListener> agendaEventListeners = new ArrayList<>();\n-    private final List<RuleRuntimeEventListener> ruleRuntimeListeners = new ArrayList<>();\n+    private final List<AgendaEventListener> agendaListeners;\n+    private final List<RuleRuntimeEventListener> ruleRuntimeListeners;\n+\n+    public CachedRuleEventListenerConfig() {\n+        agendaListeners = new ArrayList<>();\n+        ruleRuntimeListeners = new ArrayList<>();\n+    }\n+\n+    public CachedRuleEventListenerConfig(List<AgendaEventListener> agendaListeners, List<RuleRuntimeEventListener> ruleRuntimeListeners) {\n+        this.agendaListeners = agendaListeners;\n+        this.ruleRuntimeListeners = ruleRuntimeListeners;\n+    }\n \n     public CachedRuleEventListenerConfig register(AgendaEventListener listener) {\n-        agendaEventListeners.add(listener);\n+        agendaListeners.add(listener);\n         return this;\n     }\n-    \n+\n     public CachedRuleEventListenerConfig register(RuleRuntimeEventListener listener) {\n         ruleRuntimeListeners.add(listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5Mjk3OQ==", "bodyText": "@kostola\nHi! It looks like the whole method could be a class in itself; splitting it would allow far easier testing, IMHO.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402792979", "createdAt": "2020-04-03T07:41:20Z", "author": {"login": "gitgabrio"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -148,11 +151,11 @@ CompilationUnit compilationUnit() {\n             annotator.withInjection(configField);\n         } else {\n             configField = new FieldDeclaration()\n-                .addModifier(Modifier.Keyword.PROTECTED)\n-                .addVariable(new VariableDeclarator()\n-                                     .setType(Config.class.getCanonicalName())\n-                                     .setName(\"config\")\n-                                     .setInitializer(configGenerator.newInstance()));\n+                    .addModifier(Modifier.Keyword.PROTECTED)\n+                    .addVariable(new VariableDeclarator()\n+                            .setType(Config.class.getCanonicalName())\n+                            .setName(\"config\")\n+                            .setInitializer(new NullLiteralExpr() /* TODO: fix this - configGenerator.newInstance() */));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDkwOTkz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#pullrequestreview-387090993", "createdAt": "2020-04-03T09:19:01Z", "commit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToxOTowMVrOGANW-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToxOTowMVrOGANW-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3MjA1Nw==", "bodyText": "Is APPLICATION_CONFIG still used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r402872057", "createdAt": "2020-04-03T09:19:01Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -23,6 +23,7 @@\n         APPLICATION,\n         APPLICATION_SECTION,\n         APPLICATION_CONFIG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8414397b46b0141ad108ed89a6fde5a5ec04d086"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adbe1265db5eaa76d75660f9ad976a6b24b3baa2", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/adbe1265db5eaa76d75660f9ad976a6b24b3baa2", "committedDate": "2020-04-03T15:49:31Z", "message": "[KOGITO-1492] Add flags to include/exclude sections in ConfigFactoryGenerator"}, "afterCommit": {"oid": "369e1d468c38a028c9d7e457d4b6aa8553ce64e8", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/369e1d468c38a028c9d7e457d4b6aa8553ce64e8", "committedDate": "2020-04-06T08:40:42Z", "message": "[KOGITO-1492] Add flags to include/exclude sections in ConfigFactoryGenerator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e4defd7804612aa75c22191c535011c1a0e0438", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0e4defd7804612aa75c22191c535011c1a0e0438", "committedDate": "2020-04-06T15:46:07Z", "message": "[KOGITO-1492] Generate ConfigProducer with more verbose template instead of ConfigFactory"}, "afterCommit": {"oid": "32223ea1d710ad450b2a0e5c386e1af930a0b6b5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/32223ea1d710ad450b2a0e5c386e1af930a0b6b5", "committedDate": "2020-04-07T07:24:42Z", "message": "[KOGITO-1492] Generate ConfigProducer with more verbose template instead of ConfigFactory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32223ea1d710ad450b2a0e5c386e1af930a0b6b5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/32223ea1d710ad450b2a0e5c386e1af930a0b6b5", "committedDate": "2020-04-07T07:24:42Z", "message": "[KOGITO-1492] Generate ConfigProducer with more verbose template instead of ConfigFactory"}, "afterCommit": {"oid": "0b7b7f292c57851297c8ae189630029cc7babfea", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0b7b7f292c57851297c8ae189630029cc7babfea", "committedDate": "2020-04-07T11:03:09Z", "message": "[KOGITO-1492] Merge EventListeners and EventListenerConfigs in RuleConfig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc643caa3deb01011f0ed49c80f26214bf4b8993", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fc643caa3deb01011f0ed49c80f26214bf4b8993", "committedDate": "2020-04-07T16:36:48Z", "message": "[KOGITO-1492] Fix DecisionContainerGenerator::setupStatements"}, "afterCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89f0963547c83e62784ae2c217c1574b9ff60d89", "committedDate": "2020-04-08T09:05:52Z", "message": "[KOGITO-1492] Reduce code duplication and fix code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDg0OTMw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#pullrequestreview-390084930", "createdAt": "2020-04-08T15:28:01Z", "commit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyODowMVrOGC0m2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNTozN1rOGC09Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMjI1MA==", "bodyText": "I am not in love with this class, starting with the name CodegenUtils, it easily makes it the target for a \"dump\" containing anything. I see that you only moved it, but the number of methods has grown a lot.\nIn general, I usually create \"topic\" modules like Fields, Types, etc...\nbut in this case I would argue that the constructors found in javaparser are in general more than enough.\nVariableDeclarator etc etc is definitely a bit boring to use, but then just add a shorthand for variable declarator :)\nbesides, I think that this code is mostly unused, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405612250", "createdAt": "2020-04-08T15:28:01Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDAxMw==", "bodyText": "I mean is this more readable than:\n        new FieldDeclaration()\n                .setModifiers(PUBLIC)\n                .addVariable(new VariableDeclarator(type, name))\nor even:\n        new FieldDeclaration(nodeList(PUBLIC, new VariableDeclarator(type, name))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405614013", "createdAt": "2020-04-08T15:30:18Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/CodegenUtils.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.Modifier;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.body.Parameter;\n+import com.github.javaparser.ast.body.VariableDeclarator;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.SimpleName;\n+import com.github.javaparser.ast.expr.VariableDeclarationExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.IfStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import com.github.javaparser.ast.type.Type;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+\n+public class CodegenUtils {\n+\n+    private static final Modifier.Keyword[] NONE = new Modifier.Keyword[]{};\n+    private static final Modifier.Keyword[] PUBLIC = new Modifier.Keyword[]{Modifier.Keyword.PUBLIC};\n+    private static final Modifier.Keyword[] PROTECTED = new Modifier.Keyword[]{Modifier.Keyword.PROTECTED};\n+    private static final Modifier.Keyword[] PRIVATE = new Modifier.Keyword[]{Modifier.Keyword.PRIVATE};\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, Class<?> inner) {\n+        return genericType(outer.getCanonicalName(), inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, Class<?> inner) {\n+        return genericType(outer, inner.getCanonicalName());\n+    }\n+\n+    public static ClassOrInterfaceType genericType(Class<?> outer, String inner) {\n+        return genericType(outer.getCanonicalName(), inner);\n+    }\n+\n+    public static ClassOrInterfaceType genericType(String outer, String inner) {\n+        return new ClassOrInterfaceType(null, outer).setTypeArguments(new ClassOrInterfaceType(null, inner));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Type type, String name, Expression expr) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name, expr));\n+    }\n+\n+    public static FieldDeclaration field(Modifier.Keyword[] modifiers, Class<?> type, String name) {\n+        return new FieldDeclaration()\n+                .setModifiers(modifiers)\n+                .addVariable(variableDeclarator(type, name));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzkyMg==", "bodyText": "I am not against this change per se, but why is it needed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405617922", "createdAt": "2020-04-08T15:35:37Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/di/DependencyInjectionAnnotator.java", "diffHunk": "@@ -42,140 +43,184 @@\n  */\n public interface DependencyInjectionAnnotator {\n \n+    /**\n+     * Annotates given node with name annotation e.g. Named, Qualifier\n+     *\n+     * @param node node to be annotated\n+     */\n+    <T extends NodeWithAnnotations<?>> T withNamed(T node, String name);\n+\n     /**\n      * Annotates given node with application level annotations e.g. ApplicationScoped, Component\n+     *\n      * @param node node to be annotated\n      */\n-    void withApplicationComponent(NodeWithAnnotations<?> node);\n-    \n+    <T extends NodeWithAnnotations<?>> T withApplicationComponent(T node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0793cdabfccaa2b3699ba6b7b56b43aa452f17f7", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0793cdabfccaa2b3699ba6b7b56b43aa452f17f7", "committedDate": "2020-04-10T07:42:31Z", "message": "[KOGITO-1492] Add DecisionConfig to Config and generated ApplicationConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c629eefa9892c6ec6ba418533d496610930432b5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c629eefa9892c6ec6ba418533d496610930432b5", "committedDate": "2020-04-10T07:42:31Z", "message": "[KOGITO-1492] Merge EventListeners and EventListenerConfigs in DecisionConfig and ProcessConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d95551a90260566ca017947648e067093530b4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/97d95551a90260566ca017947648e067093530b4", "committedDate": "2020-04-10T07:42:31Z", "message": "[KOGITO-1492] Merge EventListeners and EventListenerConfigs in RuleConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e632a0efd145da220f8de4eb560be3cb3829c4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/66e632a0efd145da220f8de4eb560be3cb3829c4", "committedDate": "2020-04-10T07:42:31Z", "message": "[KOGITO-1492] Inject listeners in DecisionModels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59815ff2f477001a2b9a5e99bbe809c0420cfe3a", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/59815ff2f477001a2b9a5e99bbe809c0420cfe3a", "committedDate": "2020-04-10T07:42:32Z", "message": "[KOGITO-1492] Fix error on empty multiple autowired references in Spring Boot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5386d7bc8d9798120ced743317b1a3add81560", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7d5386d7bc8d9798120ced743317b1a3add81560", "committedDate": "2020-04-10T07:42:32Z", "message": "[KOGITO-1492] Fix DecisionContainerGenerator::setupStatements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7969c1b62819e38b13d7348a0f2a6aacf72c1aa9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7969c1b62819e38b13d7348a0f2a6aacf72c1aa9", "committedDate": "2020-04-10T07:42:32Z", "message": "[KOGITO-1492] Reduce code duplication and fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ccd1074fe922b58a3276e405e3d0fe5fef219c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/78ccd1074fe922b58a3276e405e3d0fe5fef219c", "committedDate": "2020-04-10T08:32:51Z", "message": "[KOGITO-1492] Reduce size of CodegenUtils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89f0963547c83e62784ae2c217c1574b9ff60d89", "committedDate": "2020-04-08T09:05:52Z", "message": "[KOGITO-1492] Reduce code duplication and fix code smells"}, "afterCommit": {"oid": "78ccd1074fe922b58a3276e405e3d0fe5fef219c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/78ccd1074fe922b58a3276e405e3d0fe5fef219c", "committedDate": "2020-04-10T08:32:51Z", "message": "[KOGITO-1492] Reduce size of CodegenUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTM4NzY4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#pullrequestreview-389938768", "createdAt": "2020-04-08T12:46:29Z", "commit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NjoyOVrOGCtiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo0NjoyOVrOGCtiJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjM1OA==", "bodyText": "I think most of the other classes use a dedicated method to perform this check (i.e. link ). What about change it to be consistent?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#discussion_r405496358", "createdAt": "2020-04-08T12:46:29Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/config/DecisionConfigGenerator.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.decision.config;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.BodyDeclaration;\n+import com.github.javaparser.ast.body.FieldDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.ThisExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ReturnStmt;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.decision.DecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.CachedDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.DefaultDecisionEventListenerConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+\n+import static org.kie.kogito.codegen.CodegenUtils.field;\n+import static org.kie.kogito.codegen.CodegenUtils.genericType;\n+import static org.kie.kogito.codegen.CodegenUtils.newObject;\n+import static org.kie.kogito.codegen.CodegenUtils.parameter;\n+import static org.kie.kogito.codegen.CodegenUtils.privateField;\n+import static org.kie.kogito.codegen.CodegenUtils.privateMethod;\n+import static org.kie.kogito.codegen.ConfigGenerator.callMerge;\n+\n+public class DecisionConfigGenerator {\n+\n+    private static final String METHOD_EXTRACT_DECISION_EVENT_LISTENER_CONFIG = \"extract_decisionEventListenerConfig\";\n+    private static final String METHOD_MERGE_DECISION_EVENT_LISTENER_CONFIG = \"merge_decisionEventListenerConfig\";\n+    private static final String VAR_DECISION_EVENT_LISTENER_CONFIG = \"decisionEventListenerConfigs\";\n+    private static final String VAR_DEFAULT_DECISION_EVENT_LISTENER_CONFIG = \"defaultDecisionEventListenerConfig\";\n+    private static final String VAR_DMN_RUNTIME_EVENT_LISTENERS = \"dmnRuntimeEventListeners\";\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    private List<BodyDeclaration<?>> members = new ArrayList<>();\n+\n+    public ObjectCreationExpr newInstance() {\n+        if (annotator != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f0963547c83e62784ae2c217c1574b9ff60d89"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDE4MTk3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/412#pullrequestreview-391418197", "createdAt": "2020-04-10T12:32:04Z", "commit": {"oid": "78ccd1074fe922b58a3276e405e3d0fe5fef219c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3614, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}