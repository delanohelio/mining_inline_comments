{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjkyMjEw", "number": 895, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxMTozNFrOE5j5_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxNjozNVrOFHH1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzkyNTczOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxMTozNFrOH0GAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozODowNVrOH0sOaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NjQ2Ng==", "bodyText": "Just a side comment: what about MonitoredDecisionModel?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524386466", "createdAt": "2020-11-16T16:11:34Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjU4NA==", "bodyText": "Good idea! I changed the name \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525012584", "createdAt": "2020-11-17T09:38:05Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NjQ2Ng=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzkzMTkzOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxMzowMFrOH0GEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo1NDoxMlrOH2Sp3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA==", "bodyText": "Are both overloads needed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524387480", "createdAt": "2020-11-16T16:13:00Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxNTg2NA==", "bodyText": "Well..now we're only using the new one (with org.kie.dmn.api.core.DMNResult parameter) but I kept the previous one because it was quick in case we may need it again in the future. Should I remove it?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525015864", "createdAt": "2020-11-17T09:43:02Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0MDEwOA==", "bodyText": "For me we should remove it \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525040108", "createdAt": "2020-11-17T10:19:16Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwOTg2Mg==", "bodyText": "My only concern is about backward compatibility. @danielezonca wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525909862", "createdAt": "2020-11-18T08:49:08Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAyOTQ3Mw==", "bodyText": "I think it is safe to remove, it is not a public API and the old usages is codegenerated so it should be automatically \"migrated\" when they user will compile with the new version", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r526029473", "createdAt": "2020-11-18T11:54:55Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MTEwMw==", "bodyText": "Yep, Daniele is right \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r526391103", "createdAt": "2020-11-18T20:16:38Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MDc4Mw==", "bodyText": "Removed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r526690783", "createdAt": "2020-11-19T08:54:12Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -67,18 +68,26 @@ private DMNResultMetricsBuilder() {\n         return handlers;\n     }\n \n-    public static void generateMetrics(DMNResult dmnResult, String endpointName) {\n-        if (dmnResult == null) {\n-            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n-            return;\n-        }\n+    public static void generateMetrics(org.kie.kogito.dmn.rest.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.kogito.dmn.rest.DMNResult::getDecisionResults);\n+    }\n \n-        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n-        for (DMNDecisionResult decision : decisionResults) {\n-            Object result = decision.getResult();\n-            if (result != null && SupportedDecisionTypes.isSupported(result.getClass())) {\n-                handlers.get(result.getClass()).record(decision.getDecisionName(), endpointName, result);\n+    public static void generateMetrics(org.kie.dmn.api.core.DMNResult dmnResult, String endpointName) {\n+        generateMetrics(dmnResult, endpointName, org.kie.dmn.api.core.DMNResult::getDecisionResults);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzQ4MA=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzk0NTUwOnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoxNTozNFrOH0GM3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozODoyOFrOH0sPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTU5Nw==", "bodyText": "Just a side comment: what about originalModel or simply model?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524389597", "createdAt": "2020-11-16T16:15:34Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {\n+\n+    private final DecisionModel wrapped;\n+\n+    public MonitoringDecisionModel(DecisionModel wrapped) {\n+        this.wrapped = wrapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjgxMg==", "bodyText": "Good idea as well...went with originalModel", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525012812", "createdAt": "2020-11-17T09:38:28Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {\n+\n+    private final DecisionModel wrapped;\n+\n+    public MonitoringDecisionModel(DecisionModel wrapped) {\n+        this.wrapped = wrapped;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4OTU5Nw=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODM4ODI1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0Nzo1OFrOH0KaLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozOTozM1rOH0sSPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODU0MQ==", "bodyText": "In this way you are hiding any possible error (i.e. template changed). What about preserve the optional and then if empty throws an error?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524458541", "createdAt": "2020-11-16T17:47:58Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,14 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class))\n+                    .ifPresent(rs -> rs.getExpression().ifPresent(rsExp ->\n+                            rs.setExpression(newObject(\"org.kie.kogito.monitoring.decision.MonitoringDecisionModel\", rsExp))\n+                    ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMzU2NA==", "bodyText": "You're right. I originally used ifPresentOrElse but it's a Java 9+ API and we must stick to Java 8 for kogito-runtimes.\nI changed now anyway to throw an exception if the template is changed. \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525013564", "createdAt": "2020-11-17T09:39:33Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,14 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class))\n+                    .ifPresent(rs -> rs.getExpression().ifPresent(rsExp ->\n+                            rs.setExpression(newObject(\"org.kie.kogito.monitoring.decision.MonitoringDecisionModel\", rsExp))\n+                    ));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODU0MQ=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODM5Njc3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo1MDowNlrOH0Kfag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwODo1MDo1OFrOH1jEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTg4Mg==", "bodyText": "Is this working with/without strongly typed extension?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r524459882", "createdAt": "2020-11-16T17:50:06Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMTEwNg==", "bodyText": "I tested by manually enabling kogito.decisions.stronglytyped=true in kogito-examples/dmn-drools-quarkus-metrics and everything works as expected. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r525911106", "createdAt": "2020-11-18T08:50:58Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/decision/MonitoringDecisionModel.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.decision;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.FEELPropertyAccessible;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.monitoring.system.metrics.DMNResultMetricsBuilder;\n+\n+public class MonitoringDecisionModel implements DecisionModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTg4Mg=="}, "originalCommit": {"oid": "473ec5a0b4b1d6afa763453803ccfc97cd0c1a86"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzkxNjM4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0ODo0NlrOH3Igvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODo0NzoyN1rOH5osyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MzE4Mg==", "bodyText": "Would it be possible to manage this version in dependency management?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527573182", "createdAt": "2020-11-20T09:48:46Z", "author": {"login": "jiripetrlik"}, "path": "addons/monitoring-prometheus-addon/pom.xml", "diffHunk": "@@ -59,7 +59,8 @@\n     </dependency>\n     <dependency>\n       <groupId>org.mockito</groupId>\n-      <artifactId>mockito-core</artifactId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>${version.org.mockito}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NzcwNg==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r530197706", "createdAt": "2020-11-25T08:47:27Z", "author": {"login": "kostola"}, "path": "addons/monitoring-prometheus-addon/pom.xml", "diffHunk": "@@ -59,7 +59,8 @@\n     </dependency>\n     <dependency>\n       <groupId>org.mockito</groupId>\n-      <artifactId>mockito-core</artifactId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>${version.org.mockito}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3MzE4Mg=="}, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzkzNzM2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo1Mzo0NVrOH3ItLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzo0ODo0OVrOH6PNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA==", "bodyText": "Please check with Sonar cloud. We should probably check if the value is not null before using it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527576364", "createdAt": "2020-11-20T09:53:45Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3ODMyNw==", "bodyText": "I looked more at if. It seems we are in fact checking it. But probably it would be better to check it in a better way to avoid Sonar cloud warning.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r527578327", "createdAt": "2020-11-20T09:56:47Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA=="}, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NzkzNA==", "bodyText": "I made a change. Let's see if SonarCloud is happy \ud83d\ude09", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r530197934", "createdAt": "2020-11-25T08:47:48Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA=="}, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgyODYxMQ==", "bodyText": "SonarCloud seems happy now \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r530828611", "createdAt": "2020-11-26T07:48:49Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -71,6 +73,19 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             }\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+            Optional<ReturnStmt> optReturnStmt = typeDeclaration.getMethodsByName(\"getDecisionModel\").stream().findFirst()\n+                    .flatMap(md -> md.findFirst(ReturnStmt.class));\n+\n+            if (optReturnStmt.isPresent() && optReturnStmt.get().getExpression().isPresent()) {\n+                ReturnStmt returnStmt = optReturnStmt.get();\n+                Expression returnExpr = returnStmt.getExpression().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjM2NA=="}, "originalCommit": {"oid": "3bd6c33ac74203ef887ebd677b443c371c295744"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTk4ODg3OnYy", "diffSide": "RIGHT", "path": "addons/monitoring/monitoring-core/monitoring-core-common/src/main/java/org/kie/kogito/monitoring/core/common/decision/MonitoredDecisionModelTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTozOToyMlrOIIbv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTozOToyMlrOIIbv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDE0MQ==", "bodyText": "@danielezonca here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714141", "createdAt": "2020-12-18T09:39:22Z", "author": {"login": "kostola"}, "path": "addons/monitoring/monitoring-core/monitoring-core-common/src/main/java/org/kie/kogito/monitoring/core/common/decision/MonitoredDecisionModelTransformer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.core.common.decision;\n+\n+import java.util.function.Function;\n+\n+import org.kie.kogito.decision.DecisionModel;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.monitoring.core.common.decision.MonitoredDecisionModelTransformer</code>\n+ * for code generation plugins to inject this class.\n+ */\n+public class MonitoredDecisionModelTransformer implements Function<DecisionModel, DecisionModel> {\n+\n+    @Override\n+    public DecisionModel apply(DecisionModel decisionModel) {\n+        return new MonitoredDecisionModel(decisionModel);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTk5MjQwOnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/AbstractDecisionModels.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MDoyNFrOIIbx8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MDoyNFrOIIbx8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDY3Mw==", "bodyText": "@danielezonca here as well", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714673", "createdAt": "2020-12-18T09:40:24Z", "author": {"login": "kostola"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/AbstractDecisionModels.java", "diffHunk": "@@ -14,41 +14,49 @@\n  */\n package org.kie.kogito.dmn;\n \n+import java.io.Reader;\n+import java.util.function.Function;\n+\n import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.Application;\n import org.kie.kogito.ExecutionIdSupplier;\n import org.kie.kogito.decision.DecisionConfig;\n+import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.decision.DecisionModels;\n \n-import java.io.Reader;\n-import java.util.function.Function;\n-\n public abstract class AbstractDecisionModels implements DecisionModels {\n \n     private static final boolean CAN_PLATFORM_CLASSLOAD = org.kie.dmn.feel.util.ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD;\n     private static DMNRuntime dmnRuntime = null;\n     private static ExecutionIdSupplier execIdSupplier = null;\n+    private static Function<DecisionModel, DecisionModel> decisionModelTransformer = null;\n \n     protected static void init(Function<String, KieRuntimeFactory> sKieRuntimeFactoryFunction,\n                                ExecutionIdSupplier executionIdSupplier,\n+                               Function<DecisionModel, DecisionModel> decisionModelTransformerInit,\n                                Reader... readers) {\n         dmnRuntime = DMNKogito.createGenericDMNRuntime(sKieRuntimeFactoryFunction, readers);\n         execIdSupplier = executionIdSupplier;\n+        decisionModelTransformer = decisionModelTransformerInit;\n     }\n \n-    public org.kie.kogito.decision.DecisionModel getDecisionModel(String namespace, String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);\n+    public DecisionModel getDecisionModel(String namespace, String name) {\n+        DecisionModel model = new DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);\n+        return decisionModelTransformer == null\n+                ? model\n+                : decisionModelTransformer.apply(model);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTk5NDI3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MDo1M1rOIIby_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MDo1M1rOIIby_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDk0MQ==", "bodyText": "@danielezonca here as well", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545714941", "createdAt": "2020-12-18T09:40:53Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -92,20 +111,32 @@ public CompilationUnit compilationUnit() {\n                         \"Missing init() method\"));\n \n         setupExecIdSupplierVariable(initMethod);\n+        setupDecisionModelTransformerVariable(initMethod);\n \n         for (CollectedResource resource : resources) {\n             MethodCallExpr getResAsStream = getReadResourceMethod(applicationClass, resource);\n             MethodCallExpr isr = new MethodCallExpr(\"readResource\").addArgument(getResAsStream);\n             initMethod.addArgument(isr);\n         }\n \n+        if (addonsConfig.useMonitoring()) {\n+\n+        }\n+\n         return compilationUnit;\n     }\n \n     private void setupExecIdSupplierVariable(MethodCallExpr initMethod) {\n         Expression execIdSupplier = addonsConfig.useTracing() ?\n-                newObject(DmnExecutionIdSupplier.class):\n+                newObject(DmnExecutionIdSupplier.class) :\n                 new NullLiteralExpr();\n         initMethod.addArgument(execIdSupplier);\n     }\n-}\n\\ No newline at end of file\n+\n+    private void setupDecisionModelTransformerVariable(MethodCallExpr initMethod) {\n+        Expression decisionModelTransformerExpr = addonsConfig.useMonitoring() ?\n+                newObject(\"org.kie.kogito.monitoring.core.common.decision.MonitoredDecisionModelTransformer\") :\n+                new NullLiteralExpr();\n+        initMethod.addArgument(decisionModelTransformerExpr);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f997ed9db8afb1f269da775a7f15f2effc1254d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDEyNzA3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxNjozNVrOIIdAiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoyOTozMFrOIIdcMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg==", "bodyText": "You probably want to remove the commented block entirely?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545734792", "createdAt": "2020-12-18T10:16:35Z", "author": {"login": "manstis"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -42,6 +42,9 @@\n     private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringDecisionContainerTemplate.java\";\n     private static final String SECTION_CLASS_NAME = \"DecisionModels\";\n \n+//    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNzA0Mg==", "bodyText": "Nice catch...forgot about that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545737042", "createdAt": "2020-12-18T10:20:38Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -42,6 +42,9 @@\n     private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringDecisionContainerTemplate.java\";\n     private static final String SECTION_CLASS_NAME = \"DecisionModels\";\n \n+//    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg=="}, "originalCommit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0MTg3NQ==", "bodyText": "Removed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/895#discussion_r545741875", "createdAt": "2020-12-18T10:29:30Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -42,6 +42,9 @@\n     private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringDecisionContainerTemplate.java\";\n     private static final String SECTION_CLASS_NAME = \"DecisionModels\";\n \n+//    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDc5Mg=="}, "originalCommit": {"oid": "2bd9ff7bf99195637f8df6709809198c3cbeb4ec"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4709, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}