{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MzU0OTM2", "number": 929, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo0NjoxOVrOFFfoMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowNTo1NFrOFGPU8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzA1Mzk1OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DMNCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo0NjoxOVrOIGB97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTozMDoyM1rOIGGSsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5NDYwNQ==", "bodyText": "this may be useless", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r543194605", "createdAt": "2020-12-15T09:46:19Z", "author": {"login": "evacchi"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DMNCompilationProvider.java", "diffHunk": "@@ -25,6 +25,7 @@\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.Generator;\n import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d09bce0b91a153415d118275b016761895df717"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2NTQ1OA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r543265458", "createdAt": "2020-12-15T11:30:23Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/DMNCompilationProvider.java", "diffHunk": "@@ -25,6 +25,7 @@\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.Generator;\n import org.kie.kogito.codegen.decision.DecisionCodegen;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5NDYwNQ=="}, "originalCommit": {"oid": "4d09bce0b91a153415d118275b016761895df717"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDc1NTk4OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/Application.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0NTozNVrOIHIzgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDozMDowNlrOIHX3_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTIwMw==", "bodyText": "Maybe param description could be added?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544355203", "createdAt": "2020-12-16T14:45:35Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/Application.java", "diffHunk": "@@ -37,36 +33,13 @@\n     Config config();\n \n     /**\n-     * Returns processes found in the application otherwise null\n-     * @return processes information or null of non found\n+     * Returns the desired KogitoEngine impl or null if not found\n+     * @param clazz\n+     * @param <T>\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMjExMA==", "bodyText": "Added a description", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544602110", "createdAt": "2020-12-16T20:30:06Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/Application.java", "diffHunk": "@@ -37,36 +33,13 @@\n     Config config();\n \n     /**\n-     * Returns processes found in the application otherwise null\n-     * @return processes information or null of non found\n+     * Returns the desired KogitoEngine impl or null if not found\n+     * @param clazz\n+     * @param <T>\n+     * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTIwMw=="}, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDc1NzI1OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0NTo0OVrOIHI0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyOTo1OFrOIHX3tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTM4OA==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544355388", "createdAt": "2020-12-16T14:45:49Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/Config.java", "diffHunk": "@@ -15,43 +15,18 @@\n \n package org.kie.kogito;\n \n-import org.kie.kogito.decision.DecisionConfig;\n-import org.kie.kogito.prediction.PredictionConfig;\n-import org.kie.kogito.process.ProcessConfig;\n-import org.kie.kogito.rules.RuleConfig;\n-\n /**\n  * Provides general configuration of Kogito application\n  */\n public interface Config {\n \n     /**\n-     * Provides process specific configuration\n-     *\n-     * @return process specific configuration or null of no process is found in the application\n-     */\n-    ProcessConfig process();\n-\n-    /**\n-     * Provides rule specific configuration\n-     *\n-     * @return rule specific configuration or null of no rule is found in the application\n-     */\n-    RuleConfig rule();\n-\n-    /**\n-     * Provides decision specific configuration\n-     *\n-     * @return decision specific configuration or null of no decision is found in the application\n-     */\n-    DecisionConfig decision();\n-\n-    /**\n-     * Provides prediction specific configuration\n-     *\n-     * @return prediction specific configuration or null of no prediction is found in the application\n+     * Provides instance of requested KogitoConfig or null if not available\n+     * @param clazz\n+     * @param <T>\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMjAzNw==", "bodyText": "Added a description", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544602037", "createdAt": "2020-12-16T20:29:58Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/Config.java", "diffHunk": "@@ -15,43 +15,18 @@\n \n package org.kie.kogito;\n \n-import org.kie.kogito.decision.DecisionConfig;\n-import org.kie.kogito.prediction.PredictionConfig;\n-import org.kie.kogito.process.ProcessConfig;\n-import org.kie.kogito.rules.RuleConfig;\n-\n /**\n  * Provides general configuration of Kogito application\n  */\n public interface Config {\n \n     /**\n-     * Provides process specific configuration\n-     *\n-     * @return process specific configuration or null of no process is found in the application\n-     */\n-    ProcessConfig process();\n-\n-    /**\n-     * Provides rule specific configuration\n-     *\n-     * @return rule specific configuration or null of no rule is found in the application\n-     */\n-    RuleConfig rule();\n-\n-    /**\n-     * Provides decision specific configuration\n-     *\n-     * @return decision specific configuration or null of no decision is found in the application\n-     */\n-    DecisionConfig decision();\n-\n-    /**\n-     * Provides prediction specific configuration\n-     *\n-     * @return prediction specific configuration or null of no prediction is found in the application\n+     * Provides instance of requested KogitoConfig or null if not available\n+     * @param clazz\n+     * @param <T>\n+     * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTM4OA=="}, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDc3MzgwOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/StaticApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0ODo0MFrOIHI9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyOTo1MVrOIHX3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NzgwNg==", "bodyText": "Maybe unnecessary org.kie.kogito.process.ProcessConfig.class and could be just ProcessConfig.class.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544357806", "createdAt": "2020-12-16T14:48:40Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/StaticApplication.java", "diffHunk": "@@ -15,67 +15,59 @@\n \n package org.kie.kogito;\n \n-import org.kie.kogito.decision.DecisionModels;\n-import org.kie.kogito.prediction.PredictionModels;\n-import org.kie.kogito.process.Processes;\n-import org.kie.kogito.rules.RuleUnits;\n+import org.kie.kogito.process.ProcessConfig;\n import org.kie.kogito.uow.UnitOfWorkManager;\n \n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class StaticApplication implements Application {\n \n     protected Config config;\n-    protected Processes processes;\n-    protected RuleUnits ruleUnits;\n-    protected DecisionModels decisionModels;\n-    protected PredictionModels predictionModels;\n+    private final Map<Class<? extends KogitoEngine>, KogitoEngine> engineMap = new HashMap<>();\n \n     public StaticApplication() {\n \n     }\n \n     public StaticApplication(\n             Config config,\n-            Processes processes,\n-            RuleUnits ruleUnits,\n-            DecisionModels decisionModels,\n-            PredictionModels predictionModels) {\n+            KogitoEngine ... engines) {\n         this.config = config;\n-        this.processes = processes;\n-        this.ruleUnits = ruleUnits;\n-        this.decisionModels = decisionModels;\n-        this.predictionModels = predictionModels;\n-\n-        if (config() != null && config().process() != null) {\n-            unitOfWorkManager().eventManager().setAddons(config().addons());\n-        }\n+        loadEngines(engines);\n     }\n \n     public Config config() {\n         return config;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Processes processes() {\n-        return processes;\n+    public <T extends KogitoEngine> T get(Class<T> clazz) {\n+        return (T) engineMap.entrySet().stream()\n+                .filter(entry -> clazz.isAssignableFrom(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .findFirst()\n+                .orElse(null);\n     }\n \n-    @Override\n-    public RuleUnits ruleUnits() {\n-        return ruleUnits;\n-    }\n+    protected void loadEngines(KogitoEngine ... engines) {\n+        Arrays.stream(engines).forEach(this::loadEngine);\n \n-    @Override\n-    public DecisionModels decisionModels() {\n-        return decisionModels;\n+        if (config() != null && config().get(org.kie.kogito.process.ProcessConfig.class) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMTk3NQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544601975", "createdAt": "2020-12-16T20:29:51Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/StaticApplication.java", "diffHunk": "@@ -15,67 +15,59 @@\n \n package org.kie.kogito;\n \n-import org.kie.kogito.decision.DecisionModels;\n-import org.kie.kogito.prediction.PredictionModels;\n-import org.kie.kogito.process.Processes;\n-import org.kie.kogito.rules.RuleUnits;\n+import org.kie.kogito.process.ProcessConfig;\n import org.kie.kogito.uow.UnitOfWorkManager;\n \n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class StaticApplication implements Application {\n \n     protected Config config;\n-    protected Processes processes;\n-    protected RuleUnits ruleUnits;\n-    protected DecisionModels decisionModels;\n-    protected PredictionModels predictionModels;\n+    private final Map<Class<? extends KogitoEngine>, KogitoEngine> engineMap = new HashMap<>();\n \n     public StaticApplication() {\n \n     }\n \n     public StaticApplication(\n             Config config,\n-            Processes processes,\n-            RuleUnits ruleUnits,\n-            DecisionModels decisionModels,\n-            PredictionModels predictionModels) {\n+            KogitoEngine ... engines) {\n         this.config = config;\n-        this.processes = processes;\n-        this.ruleUnits = ruleUnits;\n-        this.decisionModels = decisionModels;\n-        this.predictionModels = predictionModels;\n-\n-        if (config() != null && config().process() != null) {\n-            unitOfWorkManager().eventManager().setAddons(config().addons());\n-        }\n+        loadEngines(engines);\n     }\n \n     public Config config() {\n         return config;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public Processes processes() {\n-        return processes;\n+    public <T extends KogitoEngine> T get(Class<T> clazz) {\n+        return (T) engineMap.entrySet().stream()\n+                .filter(entry -> clazz.isAssignableFrom(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .findFirst()\n+                .orElse(null);\n     }\n \n-    @Override\n-    public RuleUnits ruleUnits() {\n-        return ruleUnits;\n-    }\n+    protected void loadEngines(KogitoEngine ... engines) {\n+        Arrays.stream(engines).forEach(this::loadEngine);\n \n-    @Override\n-    public DecisionModels decisionModels() {\n-        return decisionModels;\n+        if (config() != null && config().get(org.kie.kogito.process.ProcessConfig.class) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NzgwNg=="}, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDgxNzE0OnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/InterpretedRuleUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1NTo1M1rOIHJX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyOTo0NFrOIHX3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NDUyOQ==", "bodyText": "Wouldn't equals be even better?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544364529", "createdAt": "2020-12-16T14:55:53Z", "author": {"login": "MarianMacik"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/InterpretedRuleUnit.java", "diffHunk": "@@ -73,15 +74,20 @@ public Config config() {\n             return null;\n         }\n \n-        public UnitOfWorkManager unitOfWorkManager() {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public <T extends KogitoEngine> T get(Class<T> clazz) {\n+            if(clazz.isAssignableFrom(org.kie.kogito.rules.RuleUnits.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMTkyMw==", "bodyText": "We codegen the real instance so equals is not enough because user code cannot refer it while in this way it is possible to write get(Processes.class) before codegen", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544601923", "createdAt": "2020-12-16T20:29:44Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/InterpretedRuleUnit.java", "diffHunk": "@@ -73,15 +74,20 @@ public Config config() {\n             return null;\n         }\n \n-        public UnitOfWorkManager unitOfWorkManager() {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public <T extends KogitoEngine> T get(Class<T> clazz) {\n+            if(clazz.isAssignableFrom(org.kie.kogito.rules.RuleUnits.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NDUyOQ=="}, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDgyMzE5OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1Njo1N1rOIHJbgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyOToyOFrOIHX2jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTQ0Mw==", "bodyText": "Why no imports here? I thought we do it just in templates.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544365443", "createdAt": "2020-12-16T14:56:57Z", "author": {"login": "MarianMacik"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "diffHunk": "@@ -16,19 +16,16 @@\n \n package org.kie.kogito.integrationtests;\n \n-import io.quarkus.runtime.Startup;\n-import org.kie.kogito.Application;\n-import org.kie.kogito.decision.DecisionModels;\n-\n-import javax.inject.Inject;\n-\n-@Startup\n+@io.quarkus.runtime.Startup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMTc0Mg==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544601742", "createdAt": "2020-12-16T20:29:28Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "diffHunk": "@@ -16,19 +16,16 @@\n \n package org.kie.kogito.integrationtests;\n \n-import io.quarkus.runtime.Startup;\n-import org.kie.kogito.Application;\n-import org.kie.kogito.decision.DecisionModels;\n-\n-import javax.inject.Inject;\n-\n-@Startup\n+@io.quarkus.runtime.Startup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTQ0Mw=="}, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDg2ODk4OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus-rules/src/main/java/org/kie/kogito/integrationtests/InjectRuleUnits.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowNTo1NFrOIHJ3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyOToyMFrOIHX2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3MjYwNg==", "bodyText": "and same instance as... :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544372606", "createdAt": "2020-12-16T15:05:54Z", "author": {"login": "MarianMacik"}, "path": "integration-tests/integration-tests-quarkus-rules/src/main/java/org/kie/kogito/integrationtests/InjectRuleUnits.java", "diffHunk": "@@ -16,19 +16,16 @@\n \n package org.kie.kogito.integrationtests;\n \n-import io.quarkus.runtime.Startup;\n-import org.kie.kogito.Application;\n-import org.kie.kogito.rules.RuleUnits;\n-\n-import javax.inject.Inject;\n-\n-@Startup\n+@io.quarkus.runtime.Startup\n public class InjectRuleUnits {\n \n-    @Inject\n-    public InjectRuleUnits(RuleUnits ruleUnits, Application application) {\n-        if (ruleUnits != application.ruleUnits()) {\n-            throw new IllegalStateException(\"RuleUnits should be injectable and same instance as application.ruleUnits()\");\n+    @javax.inject.Inject\n+    public InjectRuleUnits(org.kie.kogito.rules.RuleUnits ruleUnits, org.kie.kogito.Application application) {\n+        if (ruleUnits != application.get(org.kie.kogito.rules.RuleUnits.class)) {\n+            throw new IllegalStateException(\"RuleUnits should be injectable and same instance application.get(RuleUnits.class)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwMTY1Ng==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/929#discussion_r544601656", "createdAt": "2020-12-16T20:29:20Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus-rules/src/main/java/org/kie/kogito/integrationtests/InjectRuleUnits.java", "diffHunk": "@@ -16,19 +16,16 @@\n \n package org.kie.kogito.integrationtests;\n \n-import io.quarkus.runtime.Startup;\n-import org.kie.kogito.Application;\n-import org.kie.kogito.rules.RuleUnits;\n-\n-import javax.inject.Inject;\n-\n-@Startup\n+@io.quarkus.runtime.Startup\n public class InjectRuleUnits {\n \n-    @Inject\n-    public InjectRuleUnits(RuleUnits ruleUnits, Application application) {\n-        if (ruleUnits != application.ruleUnits()) {\n-            throw new IllegalStateException(\"RuleUnits should be injectable and same instance as application.ruleUnits()\");\n+    @javax.inject.Inject\n+    public InjectRuleUnits(org.kie.kogito.rules.RuleUnits ruleUnits, org.kie.kogito.Application application) {\n+        if (ruleUnits != application.get(org.kie.kogito.rules.RuleUnits.class)) {\n+            throw new IllegalStateException(\"RuleUnits should be injectable and same instance application.get(RuleUnits.class)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3MjYwNg=="}, "originalCommit": {"oid": "9c6776b516c04209c7197017a01cf9ec65f8238e"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4729, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}