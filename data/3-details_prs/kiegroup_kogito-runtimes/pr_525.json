{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjQyMzQ0", "number": 525, "title": "KOGITO-1645 Update contribution guidelines", "bodyText": "I have reworked our \"traditional\" contribution guidelines, shamelessly copying from those for Quarkus.\nI started with a copy, but I customized it with stuff from our old contribution guide, wherever it made sense; e.g. I left out all references to first-time setup of Maven and Git (I think we can give them for granted); I left out considerations on style guide (let's avoid (some) bike-shedding for now) but I have included a few of our best practices.\nQuarkus also include a reference to a contribution agreement (the DCO) that we may re-introduce here if it makes sense.\nLet the bike-shedding begin! \ud83d\udd25", "createdAt": "2020-05-21T09:12:45Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525", "merged": true, "mergeCommit": {"oid": "fa0257de39b1727d52989ffc06664ee2c87d6fd2"}, "closed": true, "closedAt": "2020-06-03T10:09:19Z", "author": {"login": "evacchi"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjG463AH2gAyNDIxMjQyMzQ0OmUwMjc2YTRlYzI5MmIwNjdhODU2ZTM2ODk1MDQ4N2JmZjk0Mzg5NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnkaDVAH2gAyNDIxMjQyMzQ0OmY1OTMwMWZiYzUxMjMwYzAyODYyZDliOGNhMDJmOTI5Y2Y3OGY4MWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e0276a4ec292b067a856e368950487bff9438947", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e0276a4ec292b067a856e368950487bff9438947", "committedDate": "2020-05-20T10:55:02Z", "message": "KOGITO-1645: kogito-runtimes: Update contribution guidelines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4a87371c3eae6fcb340010095e6192bb78d00d", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8e4a87371c3eae6fcb340010095e6192bb78d00d", "committedDate": "2020-05-21T09:07:21Z", "message": "add details on PRs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDUzNTI4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-416053528", "createdAt": "2020-05-21T10:53:48Z", "commit": {"oid": "8e4a87371c3eae6fcb340010095e6192bb78d00d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1Mzo0OVrOGYuknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1Njo1N1rOGYupaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MjA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All submissions, including submissions by project members, need to be reviewed before being merged. Our CI, Jenkins, should be green.\n          \n          \n            \n            All submissions, including submissions by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428582045", "createdAt": "2020-05-21T10:53:49Z", "author": {"login": "cristianonicolai"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket *KOGITO-XYZ An example issue* your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issues that is solved should be at least properly described in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including submissions by project members, need to be reviewed before being merged. Our CI, Jenkins, should be green.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4a87371c3eae6fcb340010095e6192bb78d00d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4Mjg0OQ==", "bodyText": "we use for other things like messaging ( Kafka ) as well, so this phrase would get outdated. Perhaps we should rephrase it that Docker installation is recommended in order to be able to execute integration tests?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428582849", "createdAt": "2020-05-21T10:55:52Z", "author": {"login": "cristianonicolai"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket *KOGITO-XYZ An example issue* your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issues that is solved should be at least properly described in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including submissions by project members, need to be reviewed before being merged. Our CI, Jenkins, should be green.\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary: it is used to run the test the persistence backend: it is a recommended install if you plan to work on this component.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4a87371c3eae6fcb340010095e6192bb78d00d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4Mjk5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            cd quarkus\n          \n          \n            \n            cd kogito-runtimes", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428582999", "createdAt": "2020-05-21T10:56:14Z", "author": {"login": "cristianonicolai"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket *KOGITO-XYZ An example issue* your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issues that is solved should be at least properly described in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including submissions by project members, need to be reviewed before being merged. Our CI, Jenkins, should be green.\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary: it is used to run the test the persistence backend: it is a recommended install if you plan to work on this component.\n+\n+* Check [the installation guide](https://docs.docker.com/install/), and [the MacOS installation guide](https://docs.docker.com/docker-for-mac/install/)\n+* If you just install docker, be sure that your current user can run a container (no root required). \n+On Linux, check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/)\n+\n+\n+## Build\n+\n+* Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.\n+\n+```bash\n+git clone https://github.com/kiegroup/kogito-runtimes.git\n+cd quarkus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4a87371c3eae6fcb340010095e6192bb78d00d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MzI3NQ==", "bodyText": "is this really necessary?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428583275", "createdAt": "2020-05-21T10:56:57Z", "author": {"login": "cristianonicolai"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket *KOGITO-XYZ An example issue* your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issues that is solved should be at least properly described in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including submissions by project members, need to be reviewed before being merged. Our CI, Jenkins, should be green.\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary: it is used to run the test the persistence backend: it is a recommended install if you plan to work on this component.\n+\n+* Check [the installation guide](https://docs.docker.com/install/), and [the MacOS installation guide](https://docs.docker.com/docker-for-mac/install/)\n+* If you just install docker, be sure that your current user can run a container (no root required). \n+On Linux, check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/)\n+\n+\n+## Build\n+\n+* Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.\n+\n+```bash\n+git clone https://github.com/kiegroup/kogito-runtimes.git\n+cd quarkus\n+export MAVEN_OPTS=\"-Xmx1563m\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e4a87371c3eae6fcb340010095e6192bb78d00d"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c1c96149230b1eaa596458847dbdce0a8006d42", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6c1c96149230b1eaa596458847dbdce0a8006d42", "committedDate": "2020-05-21T11:42:39Z", "message": "Update CONTRIBUTING.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ab4886602fb009d4b22776a97d332019acf200a", "committedDate": "2020-05-21T11:51:58Z", "message": "Update CONTRIBUTING.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTEwOTg0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-416110984", "createdAt": "2020-05-21T12:40:06Z", "commit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo0MDowNlrOGYxSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo0MzoyN1rOGYxYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNjUxOA==", "bodyText": "What about mention here (or somewhere else) to use -DskipITs to skip integration tests and be able to skip docker", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428626518", "createdAt": "2020-05-21T12:40:06Z", "author": {"login": "danielezonca"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,112 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary, but it is a required to run some of the integration tests. We recommend to install it to run these tests locally.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNjk5Nw==", "bodyText": "I think it is better to link https://docs.jboss.org/kogito/release/latest/html_single/ as alternative to wiki instead of master doc repo", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428626997", "createdAt": "2020-05-21T12:41:13Z", "author": {"login": "danielezonca"}, "path": "README.md", "diffHunk": "@@ -19,14 +19,10 @@ Quick Links\n \n **Homepage:** http://kogito.kie.org\n \n-**Wiki:** https://github.com/kiegroup/kogito-runtimes/wiki\n+**Documentation:** https://github.com/kiegroup/kie-docs/tree/master-kogito", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzk4NA==", "bodyText": "I think we should link https://kogito.kie.org/guides/ page as first. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428627984", "createdAt": "2020-05-21T12:43:27Z", "author": {"login": "danielezonca"}, "path": "README.md", "diffHunk": "@@ -37,56 +33,20 @@ Requirements\n Getting Started\n ---------------\n \n-The [Kogito Examples repository](https://github.com/kiegroup/kogito-examples) module contains a number of examples that you can take a look at and try out yourself.\n- Please take a look at the readme of each individual example for more details on how the example works and how to run it yourself (either locally or on Kubernetes):\n-- Process + Quarkus: [README.md](https://github.com/kiegroup/kogito-examples/tree/master/process-quarkus-example/README.md)\n-- Process + Spring Boot: [README.md](https://github.com/kiegroup/kogito-examples/tree/master/process-springboot-example/README.md)\n-- Process + Decision + Rules + Quarkus: [README.md](https://github.com/kiegroup/kogito-examples/tree/master/onboarding-example/README.md) - Onboarding example combining one process and two decision services\n-- Rules + Quarkus: [README.md](https://github.com/kiegroup/kogito-examples/tree/master/rules-quarkus-helloworld/README.md)\n-- DMN + Quarkus: [README.md](https://github.com/kiegroup/kogito-examples/tree/master/dmn-quarkus-example/README.md)\n-- Rule Unit + Quarkus: [README.md](https://github.com/kiegroup/kogito-examples/tree/master/ruleunit-quarkus-example/README.md)\n+The [Kogito Examples repository](https://github.com/kiegroup/kogito-examples) module contains a number of examples that you can take a look at and try out yourself. Please take a look at the readme of each individual example for more details on how the example works and how to run it yourself (either locally or on Kubernetes).\n \n-Building from source\n+Guides\n --------------------\n \n-1. Check out the source:\n-\n-```\n-git clone git@github.com:kiegroup/kogito-runtimes.git\n-```\n-\n-If you don't have a GitHub account use this command instead:\n-\n-```\n-git clone https://github.com/kiegroup/kogito-runtimes.git\n-```\n-\n-2. Build with Maven:\n-```\n-cd kogito-runtimes\n-mvn clean install -DskipITs\n-```\n-\n-3. Run integration tests\n-The integrations tests are skipped in the command above. To run the tests you need to have docker installed on your machine. To run the tests during the build, just remove the `-DskipITs` argument.\n-Possible issues - the tests are running docker containers using [testcontainers](https://github.com/testcontainers/testcontainers-java). That by default requires access to the docker.sock file which might result in a security alert on your system and be blocked. In such case you'll see log message similar to 'Can not connect to Ryuk'. In this case do run the tests with following ENV variable set:\n-\n-```\n-TESTCONTAINERS_RYUK_DISABLED=true mvn clean verify\n-```\n-When the test run is interrupted though, you might end up with docker containers still running, check those using `docker ps` and stop when neccessary.\n-\n+Here are some of the most notable ones for quick reference:\n \n-Contributing to Kogito\n---------------------\n+- [Quarkus - Using Kogito to add business automation capabilities to an application](https://quarkus.io/guides/kogito-guide) - This guide demonstrates how your Quarkus application can use Kogito to add business automation to power it up with business processes and rules.\n+- [Quarkus - Getting Started](https://quarkus.io/get-started/) - Quarkus Getting Started guide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MzkyOTM3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-416392937", "createdAt": "2020-05-21T18:34:29Z", "commit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODozNDoyOVrOGY-MAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0Mzo1MFrOGZAW0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNzg4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All original contributions to Quarkus are licensed under the\n          \n          \n            \n            All original contributions to Kogito are licensed under the", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428837888", "createdAt": "2020-05-21T18:34:29Z", "author": {"login": "ricardozanini"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,112 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3MzQyNw==", "bodyText": "Why not including the proposal template you've been drafting? I believe it's ready to go. :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r428873427", "createdAt": "2020-05-21T19:43:50Z", "author": {"login": "ricardozanini"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,112 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Quarkus are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ab4886602fb009d4b22776a97d332019acf200a"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/13ba207e24e69b7494cca2470109cd181a2cbf9e", "committedDate": "2020-05-22T07:47:37Z", "message": "updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzUzNzk0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-416753794", "createdAt": "2020-05-22T08:54:55Z", "commit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzcwMjM3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-416770237", "createdAt": "2020-05-22T09:22:27Z", "commit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njc2MjU5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-417676259", "createdAt": "2020-05-25T12:25:40Z", "commit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoyNTo0MVrOGZ_fPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoyOTo1OVrOGZ_m4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNzc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Creating a Pull Request\n          \n          \n            \n            ## Creating a Pull Request (PR)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429907774", "createdAt": "2020-05-25T12:25:41Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNzg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Try to fix only one issue per PRs\n          \n          \n            \n            - Try to fix only one issue per PR.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429907856", "createdAt": "2020-05-25T12:25:51Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNzk4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n          \n          \n            \n            - When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\".", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429907986", "createdAt": "2020-05-25T12:26:06Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwODA0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - If your contribution spans across multiple repositories, make sure to list all the related PRs \n          \n          \n            \n            - If your contribution spans across multiple repositories, make sure to list all the related PRs .", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429908046", "createdAt": "2020-05-25T12:26:16Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwODMyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n          \n          \n            \n            All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429908325", "createdAt": "2020-05-25T12:26:56Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwODU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n          \n          \n            \n            Great feature proposals should include a short **Description** of the feature, the **Motivation** that makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429908554", "createdAt": "2020-05-25T12:27:22Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwOTIxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.\n          \n          \n            \n            * Clone the repository,  navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429909215", "createdAt": "2020-05-25T12:28:42Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary, but it is a required to run some of the integration tests. \n+These tests can be skipped (see the [Build](#build) section), but we recommend to install it to run these tests locally.\n+\n+* Check [the installation guide](https://docs.docker.com/install/), and [the MacOS installation guide](https://docs.docker.com/docker-for-mac/install/)\n+* If you just install docker, be sure that your current user can run a container (no root required). \n+On Linux, check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/)\n+\n+\n+## Build\n+\n+* Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwOTUwNQ==", "bodyText": "Maybe separate the 2 options:\n-DskipTests will disable the unit tests\n-DskipITs will disable the integration tests", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429909505", "createdAt": "2020-05-25T12:29:26Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary, but it is a required to run some of the integration tests. \n+These tests can be skipped (see the [Build](#build) section), but we recommend to install it to run these tests locally.\n+\n+* Check [the installation guide](https://docs.docker.com/install/), and [the MacOS installation guide](https://docs.docker.com/docker-for-mac/install/)\n+* If you just install docker, be sure that your current user can run a container (no root required). \n+On Linux, check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/)\n+\n+\n+## Build\n+\n+* Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.\n+\n+```bash\n+git clone https://github.com/kiegroup/kogito-runtimes.git\n+cd kogito-runtimes\n+./mvnw clean install -DskipTests -DskipITs \n+# Wait... success!\n+```\n+\n+This build skipped all the tests. \n+\n+Removing the `-DskipTests -DskipITs` flags enables the tests. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwOTYyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After the build was successful, the artifacts are available in your local Maven repository.\n          \n          \n            \n            After the build is successful, the artifacts are available in your local Maven repository.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429909622", "createdAt": "2020-05-25T12:29:43Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary, but it is a required to run some of the integration tests. \n+These tests can be skipped (see the [Build](#build) section), but we recommend to install it to run these tests locally.\n+\n+* Check [the installation guide](https://docs.docker.com/install/), and [the MacOS installation guide](https://docs.docker.com/docker-for-mac/install/)\n+* If you just install docker, be sure that your current user can run a container (no root required). \n+On Linux, check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/)\n+\n+\n+## Build\n+\n+* Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.\n+\n+```bash\n+git clone https://github.com/kiegroup/kogito-runtimes.git\n+cd kogito-runtimes\n+./mvnw clean install -DskipTests -DskipITs \n+# Wait... success!\n+```\n+\n+This build skipped all the tests. \n+\n+Removing the `-DskipTests -DskipITs` flags enables the tests. \n+It will take much longer to build but will give you more guarantees on your code. \n+\n+## Usage\n+\n+After the build was successful, the artifacts are available in your local Maven repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwOTcyOQ==", "bodyText": "What are those ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#discussion_r429909729", "createdAt": "2020-05-25T12:29:59Z", "author": {"login": "radtriste"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Contribution guide\n+\n+**Want to contribute? Great!** \n+We try to make it easy, and all contributions, even the smaller ones, are more than welcome.\n+This includes bug reports, fixes, documentation, examples... \n+But first, read this page (including the small print at the end).\n+\n+## Legal\n+\n+All original contributions to Kogito are licensed under the\n+[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0),\n+version 2.0 or later, or, if another license is specified as governing the file or directory being\n+modified, such other license.\n+\n+## Issues\n+\n+Kogito uses [JIRA to manage and report issues](https://issues.redhat.com/projects/KOGITO/).\n+\n+If you believe you found a bug, please indicate a way to reproduce it, what you are seeing and what you would expect to see. Don't forget to indicate your Kogito, Java, Maven, Quarkus/Spring, GraalVM version. \n+\n+### Checking an issue is fixed in master\n+\n+Sometimes a bug has been fixed in the `master` branch of Kogito and you want to confirm it is fixed for your own application. Testing the `master` branch is easy and you have two options:\n+\n+* either use the snapshots we publish daily on https://repository.jboss.org/nexus/content/repositories/snapshots/\n+* or build Kogito all by yourself\n+\n+If you are interested in having more details, refer to the [Build section](#build) and the [Usage section](#usage).\n+\n+## Creating a Pull Request\n+\n+To contribute, use GitHub Pull Requests, from your **own** fork. \n+\n+- PRs should be always related to an open JIRA issue. If there is none, you should create one.\n+- Try to fix only one issue per PRs\n+- Make sure to create a new branch. Usually branches are named after the JIRA ticket they are addressing. E.g. for ticket \"KOGITO-XYZ An example issue\" your branch should be at least prefixed with `KOGITO-XYZ`. E.g.:\n+\n+        git checkout -b KOGITO-XYZ\n+        # or\n+        git checkout -b KOGITO-XYZ-my-fix\n+\n+- When you submit your PR, make sure to include the ticket ID, and its title; e.g., \"KOGITO-XYZ An example issue\"\n+- The description of your PR should describe the code you wrote. The issue that is solved should be at least described properly in the corresponding JIRA ticket. \n+- If your contribution spans across multiple repositories, \n+  use the same branch name (e.g. `KOGITO-XYZ`) in each PR so that our CI (Jenkins) can build them all at once.\n+- If your contribution spans across multiple repositories, make sure to list all the related PRs \n+\n+### Coding Guidelines\n+\n+We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project, and we use the Git history to track authorship. GitHub also has [this nice page with your contributions](https://github.com/kiegroup/kogito-runtimes/graphs/contributors). \n+\n+### Tests and Documentation \n+\n+Don't forget to include tests in your pull requests, and documentation (reference documentation, javadoc...). Guides and reference documentation should be submitted to the [Kogito Docs Repository](https://github.com/kiegroup/kie-docs/tree/master-kogito).\n+If you are contributing a new feature, we strongly advise submitting an [Example](https://github.com/kiegroup/kogito-examples). \n+\n+### Code Reviews and Continuous Integration\n+\n+All submissions, including those by project members, need to be reviewed by others before being merged. Our CI, Jenkins, should successfully execute your PR, marking the GitHub check as green\n+\n+## Feature Proposals\n+\n+If you would like to see some feature in Kogito, start with an email to [our mailing list](https://groups.google.com/forum/#!forum/kogito-development) or just [pop into our Zulip chat](https://kie.zulipchat.com/) and tell us what you would like to see. \n+\n+Great feature proposals should include a short **Description** of the feature, the **Motivation** tha makes that feature necessary and the **Goals** that are achieved by realizing it. If the feature is deemed worthy, then an [**Epic**](https://issues.redhat.com/issues/?filter=12347334) will be created.\n+\n+## Setup\n+\n+If you have not done so on this machine, you need to:\n+ \n+* Install Git and configure your GitHub access\n+* Install Java SDK (OpenJDK recommended)\n+* For Native Image, follow Quarkus instructions at [GraalVM](https://quarkus.io/guides/building-native-image)\n+\n+Docker is not strictly necessary, but it is a required to run some of the integration tests. \n+These tests can be skipped (see the [Build](#build) section), but we recommend to install it to run these tests locally.\n+\n+* Check [the installation guide](https://docs.docker.com/install/), and [the MacOS installation guide](https://docs.docker.com/docker-for-mac/install/)\n+* If you just install docker, be sure that your current user can run a container (no root required). \n+On Linux, check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/)\n+\n+\n+## Build\n+\n+* Clone the repository,  Navigate to the directory, invoke `./mvnw clean install -DskipTests -DskipITs` from the root directory.\n+\n+```bash\n+git clone https://github.com/kiegroup/kogito-runtimes.git\n+cd kogito-runtimes\n+./mvnw clean install -DskipTests -DskipITs \n+# Wait... success!\n+```\n+\n+This build skipped all the tests. \n+\n+Removing the `-DskipTests -DskipITs` flags enables the tests. \n+It will take much longer to build but will give you more guarantees on your code. \n+\n+## Usage\n+\n+After the build was successful, the artifacts are available in your local Maven repository.\n+\n+To include them into your project a few things have to be changed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDAwOTky", "url": "https://github.com/kiegroup/kogito-runtimes/pull/525#pullrequestreview-418400992", "createdAt": "2020-05-26T15:14:34Z", "commit": {"oid": "13ba207e24e69b7494cca2470109cd181a2cbf9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59301fbc51230c02862d9b8ca02f929cf78f81d", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f59301fbc51230c02862d9b8ca02f929cf78f81d", "committedDate": "2020-06-03T07:34:10Z", "message": "punctuation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3515, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}