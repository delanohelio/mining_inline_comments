{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MTgxMTA3", "number": 649, "reviewThreads": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozNjozMVrOERwqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo0NTowMlrOERyvVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDU4NTQyOnYy", "diffSide": "RIGHT", "path": "api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozNjozMVrOG2pMIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozNjozMVrOG2pMIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MTEzOA==", "bodyText": "Back to the Future", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459951138", "createdAt": "2020-07-24T09:36:31Z", "author": {"login": "danielezonca"}, "path": "api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java", "diffHunk": "@@ -1,11 +1,11 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDU5MDU4OnYy", "diffSide": "RIGHT", "path": "api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozODoxOVrOG2pPOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozODoxOVrOG2pPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MTkyOA==", "bodyText": "Side note: this change makes kie-internal and kogito-internal diverge", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459951928", "createdAt": "2020-07-24T09:38:19Z", "author": {"login": "danielezonca"}, "path": "api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java", "diffHunk": "@@ -97,10 +97,10 @@ private static synchronized KieLoggers getKnowledgeRuntimeLoggerProvider() {\n     @SuppressWarnings(\"unchecked\")\n     private static void loadProvider() {\n         try {\n-            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl\" );\n+            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl\" );\n             setKnowledgeRuntimeLoggerProvider( cls.newInstance() );\n         } catch ( Exception e ) {\n-            throw new RuntimeException( \"Provider org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl could not be set.\",\n+            throw new RuntimeException( \"Provider org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl could not be set.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDY2MTIxOnYy", "diffSide": "RIGHT", "path": "drools/drools-compiler/src/main/resources/META-INF/kie.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDowMjowNVrOG2p5Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0NjozNVrOG3Vl8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MjcwMg==", "bodyText": "Is this needed? I expect the change should be in StaticServiceRegistry and not here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459962702", "createdAt": "2020-07-24T10:02:05Z", "author": {"login": "danielezonca"}, "path": "drools/drools-compiler/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -1,2 +1 @@\n-org.kie.api.KieServices = org.drools.compiler.kie.builder.impl.KieServicesImpl\n-org.kie.internal.builder.KnowledgeBuilderFactoryService = org.drools.compiler.builder.impl.KnowledgeBuilderFactoryServiceImpl\n+org.kie.internal.builder.KnowledgeBuilderFactoryService = org.drools.compiler.builder.impl.KogitoKnowledgeBuilderFactoryServiceImpl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3ODY0Mg==", "bodyText": "There are test in jbpm that needs to run with the dynamic classloader module. If they try to instance the drools KnowledgeBuilderFactoryService they fail because of the missing jaxb dependency required there.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460678642", "createdAt": "2020-07-27T06:46:35Z", "author": {"login": "mariofusco"}, "path": "drools/drools-compiler/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -1,2 +1 @@\n-org.kie.api.KieServices = org.drools.compiler.kie.builder.impl.KieServicesImpl\n-org.kie.internal.builder.KnowledgeBuilderFactoryService = org.drools.compiler.builder.impl.KnowledgeBuilderFactoryServiceImpl\n+org.kie.internal.builder.KnowledgeBuilderFactoryService = org.drools.compiler.builder.impl.KogitoKnowledgeBuilderFactoryServiceImpl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MjcwMg=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc1MDkwOnYy", "diffSide": "RIGHT", "path": "drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozNjowMlrOG2qvtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowMToyN1rOG3Z0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NjYyOQ==", "bodyText": "This SerializationHelper class is now the only remained class in drools-compiler/test. I think it should be removed or if it is imported in another module as test dependency it should be moved somewhere else.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459976629", "createdAt": "2020-07-24T10:36:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java", "diffHunk": "@@ -43,36 +44,36 @@\n     public static <T> T serializeObject(final T obj,\n                                         final ClassLoader classLoader) throws IOException,\n             ClassNotFoundException {\n-        return (T) DroolsStreamUtils.streamIn(DroolsStreamUtils.streamOut(obj), classLoader);\n+        return (T) DroolsStreamUtils.streamIn( DroolsStreamUtils.streamOut(obj), classLoader);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession,\n                                                      dispose,\n                                                      true);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose,\n-                                                                                 final boolean testRoundTrip) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose,\n+                                                                                  final boolean testRoundTrip) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession, ksession.getKieBase(), dispose);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final KieBase kbase,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSessionWithMessage(ksession, kbase, dispose).getSession();\n     }\n \n-    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n-        final ProtobufMarshaller marshaller = (ProtobufMarshaller) MarshallerFactory.newMarshaller(kbase,\n-                                                                                                   (ObjectMarshallingStrategy[]) ksession.getEnvironment().get(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES));\n+    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage( final KieSession ksession,\n+                                                                                      final KieBase kbase,\n+                                                                                      final boolean dispose) throws Exception {\n+        ObjectMarshallingStrategy[] strategies = ( ObjectMarshallingStrategy[]) ksession.getEnvironment().get( EnvironmentName.OBJECT_MARSHALLING_STRATEGIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Nzc3OA==", "bodyText": "This is currently used only in jbpm tests. I'll move it there.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460747778", "createdAt": "2020-07-27T09:01:27Z", "author": {"login": "mariofusco"}, "path": "drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java", "diffHunk": "@@ -43,36 +44,36 @@\n     public static <T> T serializeObject(final T obj,\n                                         final ClassLoader classLoader) throws IOException,\n             ClassNotFoundException {\n-        return (T) DroolsStreamUtils.streamIn(DroolsStreamUtils.streamOut(obj), classLoader);\n+        return (T) DroolsStreamUtils.streamIn( DroolsStreamUtils.streamOut(obj), classLoader);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession,\n                                                      dispose,\n                                                      true);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose,\n-                                                                                 final boolean testRoundTrip) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose,\n+                                                                                  final boolean testRoundTrip) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession, ksession.getKieBase(), dispose);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final KieBase kbase,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSessionWithMessage(ksession, kbase, dispose).getSession();\n     }\n \n-    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n-        final ProtobufMarshaller marshaller = (ProtobufMarshaller) MarshallerFactory.newMarshaller(kbase,\n-                                                                                                   (ObjectMarshallingStrategy[]) ksession.getEnvironment().get(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES));\n+    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage( final KieSession ksession,\n+                                                                                      final KieBase kbase,\n+                                                                                      final boolean dispose) throws Exception {\n+        ObjectMarshallingStrategy[] strategies = ( ObjectMarshallingStrategy[]) ksession.getEnvironment().get( EnvironmentName.OBJECT_MARSHALLING_STRATEGIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NjYyOQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc2NTgyOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0MjowN1rOG2q40A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTowMzozN1rOG3Z4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODk2MA==", "bodyText": "We are in 2020 :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459978960", "createdAt": "2020-07-24T10:42:07Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODk5MA==", "bodyText": "I'll check and fix all headers.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460748990", "createdAt": "2020-07-27T09:03:37Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODk2MA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc4MDk4OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0ODowMlrOG2rB9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyNTo0MFrOG3aqOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTMwMg==", "bodyText": "Can you please clarify? This class seems not Kogito specific so don't we have it already in drools-core?\nIf we can use kie7 version we can probably remove also KogitoWorkingMemoryLogger, KogitoWorkingMemoryInMemoryLogger and KogitoWorkingMemoryFileLogger", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981302", "createdAt": "2020-07-24T10:48:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java", "diffHunk": "@@ -16,16 +16,17 @@\n \n package org.drools.core.audit.event;\n \n+import org.kie.api.runtime.process.ProcessInstance;\n+\n /**\n- * An event filter that can be used to filter log events.\n+ * A ruleflow event logged by the WorkingMemoryLogger.\n+ * It is a snapshot of the event as it was thrown by the working memory.\n+ * It contains the process name and id.\n  */\n-public interface ILogEventFilter {\n-\n-    /**\n-     * Returns whether the given event should be filtered from the event log or not.\n-     * @param event The log event\n-     * @return Whether the event should be filtered from the event log or not.\n-     */\n-    boolean acceptEvent(LogEvent event);\n+public class KogitoRuleFlowLogEvent extends RuleFlowLogEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTY1Ng==", "bodyText": "There's a subtle problem here. Without this class that is explicitly calling processInstance.getProcessId() the same call will be made by the Drools class which will fail with a\njava.lang.NoSuchMethodError: org.kie.api.runtime.process.ProcessInstance.getId()J\nbecause the kogito implementation of that method returns a String but drools expects a long.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460761656", "createdAt": "2020-07-27T09:25:40Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java", "diffHunk": "@@ -16,16 +16,17 @@\n \n package org.drools.core.audit.event;\n \n+import org.kie.api.runtime.process.ProcessInstance;\n+\n /**\n- * An event filter that can be used to filter log events.\n+ * A ruleflow event logged by the WorkingMemoryLogger.\n+ * It is a snapshot of the event as it was thrown by the working memory.\n+ * It contains the process name and id.\n  */\n-public interface ILogEventFilter {\n-\n-    /**\n-     * Returns whether the given event should be filtered from the event log or not.\n-     * @param event The log event\n-     * @return Whether the event should be filtered from the event log or not.\n-     */\n-    boolean acceptEvent(LogEvent event);\n+public class KogitoRuleFlowLogEvent extends RuleFlowLogEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTMwMg=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc4MTUxOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0ODoxN1rOG2rCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyNTo1MlrOG3aqtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQwMA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981400", "createdAt": "2020-07-24T10:48:17Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowNodeLogEvent extends RuleFlowNodeLogEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTc4Mw==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460761783", "createdAt": "2020-07-27T09:25:52Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowNodeLogEvent extends RuleFlowNodeLogEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQwMA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc4MjAyOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0ODozMVrOG2rCpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOToyNTo1OFrOG3aq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQ3OQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981479", "createdAt": "2020-07-24T10:48:31Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowVariableLogEvent extends RuleFlowVariableLogEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTgzMg==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460761832", "createdAt": "2020-07-27T09:25:58Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowVariableLogEvent extends RuleFlowVariableLogEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQ3OQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc5MjQ5OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1Mjo1M1rOG2rJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1Mjo1M1rOG2rJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MzEyNA==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459983124", "createdAt": "2020-07-24T10:52:53Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc5Njk5OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NDo1MFrOG2rL4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NDo1MFrOG2rL4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4Mzg0Mw==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459983843", "createdAt": "2020-07-24T10:54:50Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc5OTIwOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NTo0NlrOG2rNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTozMjoyMFrOG3a5Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDIxMg==", "bodyText": "Are they needed? RuleFlowGroup should not be used in Kogito so I do not expect a Kogito specific interface for that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459984212", "createdAt": "2020-07-24T10:55:46Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common;\n+\n+public interface KogitoInternalAgenda\n+    extends\n+    InternalAgenda {\n+\n+    boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId);\n+\n+    /**\n+     * Activates the <code>RuleFlowGroup</code> with the given name.\n+     * All activations in the given <code>RuleFlowGroup</code> are added to the agenda.\n+     * As long as the <code>RuleFlowGroup</code> remains active,\n+     * its activations are automatically added to the agenda.\n+     * The given processInstanceId and nodeInstanceId define the process context\n+     * in which this <code>RuleFlowGroup</code> is used.\n+     */\n+    void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId);\n+\n+    /**\n+     * Returns true if there is at least one activation of the given rule name\n+     * in the given ruleflow group name\n+     */\n+    boolean isRuleInstanceAgendaItem(String ruleflowGroupName,\n+                                     String ruleName,\n+                                     String processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NTQ4Ng==", "bodyText": "It is true that Kogito doesn't use RFG, but there are many tests in jbpm (inherited form v7) that still do and I wanted to keep everything working as before even though I agree that this could be no longer necessary.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460765486", "createdAt": "2020-07-27T09:32:20Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common;\n+\n+public interface KogitoInternalAgenda\n+    extends\n+    InternalAgenda {\n+\n+    boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId);\n+\n+    /**\n+     * Activates the <code>RuleFlowGroup</code> with the given name.\n+     * All activations in the given <code>RuleFlowGroup</code> are added to the agenda.\n+     * As long as the <code>RuleFlowGroup</code> remains active,\n+     * its activations are automatically added to the agenda.\n+     * The given processInstanceId and nodeInstanceId define the process context\n+     * in which this <code>RuleFlowGroup</code> is used.\n+     */\n+    void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId);\n+\n+    /**\n+     * Returns true if there is at least one activation of the given rule name\n+     * in the given ruleflow group name\n+     */\n+    boolean isRuleInstanceAgendaItem(String ruleflowGroupName,\n+                                     String ruleName,\n+                                     String processInstanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDIxMg=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgwMjgyOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NzoxM1rOG2rPsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NzoxM1rOG2rPsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDgxNg==", "bodyText": "If we update the date, I think it is better to use 2020 :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459984816", "createdAt": "2020-07-24T10:57:13Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgwNTM4OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1ODoxOVrOG2rRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTozNjoxMlrOG3bBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTIyOA==", "bodyText": "Do we really need to create this copy with just a different name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985228", "createdAt": "2020-07-24T10:58:19Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {\n+public class KogitoProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NzU0MQ==", "bodyText": "See #649 (comment) If I don't do this the invocation of nodeInstance.getId() in the toString method of this event will cause a NoSuchMethodError.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460767541", "createdAt": "2020-07-27T09:36:12Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {\n+public class KogitoProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTIyOA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgwNjM2OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1ODo0NVrOG2rR3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTozNjoyNlrOG3bBrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTM3Mg==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985372", "createdAt": "2020-07-24T10:58:45Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {\n+public class KogitoProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NzY2Mw==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460767663", "createdAt": "2020-07-27T09:36:26Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {\n+public class KogitoProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTM3Mg=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgwNjkzOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1ODo1OFrOG2rSLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1ODo1OFrOG2rSLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTQ1NQ==", "bodyText": "Can you please extend ProcessVariableChangedEventImpl to add getNodeInstance method?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985455", "createdAt": "2020-07-24T10:58:58Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java", "diffHunk": "@@ -24,21 +24,21 @@\n import org.kie.api.runtime.process.NodeInstance;\n import org.kie.api.runtime.process.ProcessInstance;\n \n-public class ProcessVariableChangedEventImpl extends ProcessEvent implements ProcessVariableChangedEvent {\n+public class KogitoProcessVariableChangedEventImpl  extends ProcessEvent implements ProcessVariableChangedEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgxMTkxOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMDozM1rOG2rVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo1ODowOVrOG3bx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjE5MA==", "bodyText": "Do we need this rename? As far as I can see the only difference is an unused String dataType parameter to unmarshal method", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986190", "createdAt": "2020-07-24T11:00:33Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java", "diffHunk": "@@ -25,18 +25,16 @@\n import org.kie.api.marshalling.ObjectMarshallingStrategy;\n import org.kie.api.marshalling.ObjectMarshallingStrategyAcceptor;\n \n-public class SerializablePlaceholderResolverStrategy\n-    implements\n-    ObjectMarshallingStrategy {\n+public class KogitoSerializablePlaceholderResolverStrategy implements ObjectMarshallingStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MDAxMA==", "bodyText": "The interface ObjectMarshallingStrategy in public API is indeed changed with that new dataType argument in the unmarshal method. The new implementation is necessary to implement this change which is used in a few tests like ProtoStreamObjectMarshallingStrategyTest", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460780010", "createdAt": "2020-07-27T09:58:09Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java", "diffHunk": "@@ -25,18 +25,16 @@\n import org.kie.api.marshalling.ObjectMarshallingStrategy;\n import org.kie.api.marshalling.ObjectMarshallingStrategyAcceptor;\n \n-public class SerializablePlaceholderResolverStrategy\n-    implements\n-    ObjectMarshallingStrategy {\n+public class KogitoSerializablePlaceholderResolverStrategy implements ObjectMarshallingStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjE5MA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgxMzk1OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMToyM1rOG2rWOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo1ODoyNFrOG3bycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ4OQ==", "bodyText": "I have the impression this is just a rename so we should be able to revert the change and delete this file ( to keep original drools-core version)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986489", "createdAt": "2020-07-24T11:01:23Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java", "diffHunk": "@@ -28,7 +28,7 @@ public static Environment newEnvironment() {\n             Environment env = new EnvironmentImpl();\n             env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, \n                     new ObjectMarshallingStrategy [] {\n-                        new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)\n+                        new KogitoSerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MDE0NA==", "bodyText": "See above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460780144", "createdAt": "2020-07-27T09:58:24Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java", "diffHunk": "@@ -28,7 +28,7 @@ public static Environment newEnvironment() {\n             Environment env = new EnvironmentImpl();\n             env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, \n                     new ObjectMarshallingStrategy [] {\n-                        new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)\n+                        new KogitoSerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ4OQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgxNDQyOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMTozN1rOG2rWiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMTozN1rOG2rWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjU3MQ==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986571", "createdAt": "2020-07-24T11:01:37Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgxNTY5OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMjowNVrOG2rXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMjowNVrOG2rXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4Njc4MA==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986780", "createdAt": "2020-07-24T11:02:05Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgxODQ4OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMzoxNVrOG2rZCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMzoxNVrOG2rZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzIwOQ==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987209", "createdAt": "2020-07-24T11:03:15Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgxOTEwOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMzoyOFrOG2rZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowMzoyOFrOG2rZXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzI5NQ==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987295", "createdAt": "2020-07-24T11:03:28Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgyMzA1OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowNTowMFrOG2rbxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowNTowMFrOG2rbxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzkwOA==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987908", "createdAt": "2020-07-24T11:05:00Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgyODA1OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowNzowMlrOG2reyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowMTo0N1rOG3b54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODY4MA==", "bodyText": "I have the impression KogitoSerializablePlaceholderResolverStrategy is just a rename and if we revert that, we should be able to remove this file too", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459988680", "createdAt": "2020-07-24T11:07:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+public class KogitoMarshallerReaderContext extends MarshallerReaderContext  {\n+\n+    public Map<String, Process> processes = new HashMap<>();\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              kBase,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         Map<String, Process> processes,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              null,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+        this.processes = processes;\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         boolean marshalProcessInstances,\n+                                         boolean marshalWorkItems,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, sinks, resolverStrategyFactory, timerReaders,\n+                marshalProcessInstances, marshalWorkItems, env);\n+\n+        if (this.kBase != null) {\n+            this.kBase.getProcesses().forEach( p -> this.processes.put(p.getId(), p));\n+        }\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjA1MQ==", "bodyText": "As explained above this is necessary to implement the unmarshal method with the addition dataType argument.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460782051", "createdAt": "2020-07-27T10:01:47Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+public class KogitoMarshallerReaderContext extends MarshallerReaderContext  {\n+\n+    public Map<String, Process> processes = new HashMap<>();\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              kBase,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         Map<String, Process> processes,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              null,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+        this.processes = processes;\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         boolean marshalProcessInstances,\n+                                         boolean marshalWorkItems,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, sinks, resolverStrategyFactory, timerReaders,\n+                marshalProcessInstances, marshalWorkItems, env);\n+\n+        if (this.kBase != null) {\n+            this.kBase.getProcesses().forEach( p -> this.processes.put(p.getId(), p));\n+        }\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODY4MA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgyODkzOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowNzoyMVrOG2rfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowNzoyMVrOG2rfSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODgwOQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459988809", "createdAt": "2020-07-24T11:07:21Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.common.InternalWorkingMemory;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+/**\n+ * Extension to default <code>MarshallerWriteContext</code> that allows to pass additional\n+ * information to marshaller strategies, such as process instance id, task it, state\n+ */\n+public class KogitoMarshallerWriteContext extends MarshallerWriteContext {\n+\n+    public KogitoMarshallerWriteContext( OutputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         InternalWorkingMemory wm,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, wm, sinks, resolverStrategyFactory, env);\n+    }\n+\n+    public KogitoMarshallerWriteContext(OutputStream stream,\n+                                  InternalKnowledgeBase kBase,\n+                                  InternalWorkingMemory wm,\n+                                  Map<Integer, BaseNode> sinks,\n+                                  ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                  boolean marshalProcessInstances,\n+                                  boolean marshalWorkItems,\n+                                  Environment env) throws IOException {\n+        super(stream, kBase, wm, sinks, resolverStrategyFactory, marshalProcessInstances, marshalWorkItems, env);\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgzMzk4OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowOTozMFrOG2riVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowOTozMFrOG2riVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTU5MA==", "bodyText": "Let's update to 2020 directly :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459989590", "createdAt": "2020-07-24T11:09:30Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDgzNTQyOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowOTo1OVrOG2rjKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTowOTo1OVrOG2rjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTgwMQ==", "bodyText": "Back to the future", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459989801", "createdAt": "2020-07-24T11:09:59Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg0MjI2OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMjo0MVrOG2rnLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMjo0MVrOG2rnLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDgzMA==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459990830", "createdAt": "2020-07-24T11:12:41Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg0OTcwOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxNTo0MFrOG2rrjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxMDo1M1rOG3cMzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTk0OA==", "bodyText": "We can probably move this method to StringUtils class and remove this one. Btw that class already contains ucFirst method that is equivalment except for null check", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459991948", "createdAt": "2020-07-24T11:15:40Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;\n+\n+public class KogitoStringUtils {\n+\n+    public static String capitalize(String string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njg5Mw==", "bodyText": "I removed this class and replaced all usages of ts capitalize method with ucFirst one.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460786893", "createdAt": "2020-07-27T10:10:53Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;\n+\n+public class KogitoStringUtils {\n+\n+    public static String capitalize(String string) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTk0OA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg1MjExOnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/resources/META-INF/kie.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxNjozMFrOG2rs-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowNjoyNVrOG3cDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MjMxMw==", "bodyText": "Do we use kie.conf in Kogito?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459992313", "createdAt": "2020-07-24T11:16:30Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -1,5 +1,2 @@\n-org.kie.api.io.KieResources = org.drools.core.io.impl.ResourceFactoryServiceImpl\n-org.kie.api.marshalling.KieMarshallers = org.drools.core.marshalling.impl.MarshallerProviderImpl\n-org.kie.api.concurrent.KieExecutors = org.drools.core.concurrent.ExecutorProviderImpl\n-\n+org.drools.core.reteoo.KieComponentFactoryFactory=org.drools.core.kogito.factory.KogitoComponentFactoryFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDUxOA==", "bodyText": "Some old test cases (maybe we should just remove them?) still use the dynamic class loader and then also this.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460784518", "createdAt": "2020-07-27T10:06:25Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -1,5 +1,2 @@\n-org.kie.api.io.KieResources = org.drools.core.io.impl.ResourceFactoryServiceImpl\n-org.kie.api.marshalling.KieMarshallers = org.drools.core.marshalling.impl.MarshallerProviderImpl\n-org.kie.api.concurrent.KieExecutors = org.drools.core.concurrent.ExecutorProviderImpl\n-\n+org.drools.core.reteoo.KieComponentFactoryFactory=org.drools.core.kogito.factory.KogitoComponentFactoryFactory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MjMxMw=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg1NzM5OnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxODoyOVrOG2rwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1MjoxM1rOG3ddRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzEwNg==", "bodyText": "This is a new class specific for Kogito so we should be able to update the signature to KogitoInternalFactHandle and avoid an internal cast.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993106", "createdAt": "2020-07-24T11:18:29Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java", "diffHunk": "@@ -72,6 +73,6 @@ public void delete(DataHandle dh, RuleImpl rule, TerminalNode terminalNode, Fact\n \n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         (( WorkingMemoryEntryPoint ) entryPoint).delete( fh, rule, terminalNode, fhState );\n-        handles.remove( fh.getDataHandle() );\n+        handles.remove( (( KogitoInternalFactHandle ) fh).getDataHandle() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzQ5Mg==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460807492", "createdAt": "2020-07-27T10:52:13Z", "author": {"login": "mariofusco"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java", "diffHunk": "@@ -72,6 +73,6 @@ public void delete(DataHandle dh, RuleImpl rule, TerminalNode terminalNode, Fact\n \n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         (( WorkingMemoryEntryPoint ) entryPoint).delete( fh, rule, terminalNode, fhState );\n-        handles.remove( fh.getDataHandle() );\n+        handles.remove( (( KogitoInternalFactHandle ) fh).getDataHandle() );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzEwNg=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg1OTEyOnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxOTowOVrOG2rxEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1MjoxN1rOG3ddaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzM2MQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993361", "createdAt": "2020-07-24T11:19:09Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -92,14 +93,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update(InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach(s -> s.update(dh, obj, mask, modifiedClass, activation));\n         subscribers.forEach(s -> s.update(dh, (T) obj));\n     }\n \n     @Override\n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         if (dh != this.handle) {\n             throw new IllegalArgumentException(\"The given handle is not contained in this DataStore\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzUyOQ==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460807529", "createdAt": "2020-07-27T10:52:17Z", "author": {"login": "mariofusco"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -92,14 +93,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update(InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach(s -> s.update(dh, obj, mask, modifiedClass, activation));\n         subscribers.forEach(s -> s.update(dh, (T) obj));\n     }\n \n     @Override\n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         if (dh != this.handle) {\n             throw new IllegalArgumentException(\"The given handle is not contained in this DataStore\");\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzM2MQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg1OTgxOnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxOToyNVrOG2rxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1MjoyMlrOG3ddjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzQ2Mw==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993463", "createdAt": "2020-07-24T11:19:25Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java", "diffHunk": "@@ -78,14 +79,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update( InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach( s -> s.update( dh, obj, mask, modifiedClass, activation ) );\n         subscribers.forEach( s -> s.update(dh, (T) obj) );\n     }\n \n     @Override\n     public void delete( InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzU2NA==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460807564", "createdAt": "2020-07-27T10:52:22Z", "author": {"login": "mariofusco"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java", "diffHunk": "@@ -78,14 +79,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update( InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach( s -> s.update( dh, obj, mask, modifiedClass, activation ) );\n         subscribers.forEach( s -> s.update(dh, (T) obj) );\n     }\n \n     @Override\n     public void delete( InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzQ2Mw=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg2MDg3OnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxOTo1MFrOG2ryFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxOTo1MFrOG2ryFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzYyMw==", "bodyText": "Back to the future", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993623", "createdAt": "2020-07-24T11:19:50Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg2MzU0OnYy", "diffSide": "RIGHT", "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToyMDo1MlrOG2rzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToyMDo1MlrOG2rzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDAxNA==", "bodyText": "To be removed? We already have org.drools.core.util.KogitoStringUtils", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459994014", "createdAt": "2020-07-24T11:20:52Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "diffHunk": "@@ -14,17 +14,20 @@\n  * limitations under the License.\n  */\n \n-package org.drools.core.util.asm;\n+package org.kie.kogito.rules.units;\n \n-public class MethodCompareB {\n+public class StringUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg2NjA3OnYy", "diffSide": "RIGHT", "path": "drools/kogito-scenario-simulation/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToyMTo0MlrOG2r1EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDowODoyOFrOG3cHgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDM4NQ==", "bodyText": "Please revert this change in the README", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459994385", "createdAt": "2020-07-24T11:21:42Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-scenario-simulation/README.md", "diffHunk": "@@ -29,7 +29,7 @@ package testscenario;\n  * KogitoJunitActivator is a custom JUnit runner that enables the execution of Test Scenario files (*.scesim).\n  * This activator class, when executed, will load all scesim files available in the project and run them.\n  * Each row of the scenario will generate a test JUnit result. */\n-@org.junit.runner.RunWith(org.kogito.scenariosimulation.runner.KogitoJunitActivator.class)\n+@org.junit.runner.RunWith(KogitoJunitActivator.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NTUzOQ==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460785539", "createdAt": "2020-07-27T10:08:28Z", "author": {"login": "mariofusco"}, "path": "drools/kogito-scenario-simulation/README.md", "diffHunk": "@@ -29,7 +29,7 @@ package testscenario;\n  * KogitoJunitActivator is a custom JUnit runner that enables the execution of Test Scenario files (*.scesim).\n  * This activator class, when executed, will load all scesim files available in the project and run them.\n  * Each row of the scenario will generate a test JUnit result. */\n-@org.junit.runner.RunWith(org.kogito.scenariosimulation.runner.KogitoJunitActivator.class)\n+@org.junit.runner.RunWith(KogitoJunitActivator.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDM4NQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg3MTMwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToyMzo1MlrOG2r4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo0NDo1MlrOG3e94w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTE4MA==", "bodyText": "Is this needed? I expect that org.kie.kogito:drools-core already excludes them. If not, please fix it there so that users will not have to face with it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459995180", "createdAt": "2020-07-24T11:23:52Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -36,6 +36,16 @@\n     <dependency>\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>drools-core</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.kie</groupId>\n+          <artifactId>kie-api</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.kie</groupId>\n+          <artifactId>kie-internal</artifactId>\n+        </exclusion>\n+      </exclusions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMjIyNw==", "bodyText": "Removed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460832227", "createdAt": "2020-07-27T11:44:52Z", "author": {"login": "mariofusco"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -36,6 +36,16 @@\n     <dependency>\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>drools-core</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.kie</groupId>\n+          <artifactId>kie-api</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.kie</groupId>\n+          <artifactId>kie-internal</artifactId>\n+        </exclusion>\n+      </exclusions>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTE4MA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg3NTQyOnYy", "diffSide": "RIGHT", "path": "drools/drools-core-dynamic/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToyNTozMFrOG2r6xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxMTo1OFrOG3cO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTg0NQ==", "bodyText": "Do we need drools-core-dynamic in Kogito? I expect only -static should be used", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459995845", "createdAt": "2020-07-24T11:25:30Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core-dynamic/pom.xml", "diffHunk": "@@ -19,8 +19,18 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NzQ0NQ==", "bodyText": "This is only used to run old test cases. I agree that it could be removed, but I'd leave it there for now.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460787445", "createdAt": "2020-07-27T10:11:58Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core-dynamic/pom.xml", "diffHunk": "@@ -19,8 +19,18 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTg0NQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg4NzM4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozMDowOVrOG2sBww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxOTo1M1rOG3ceng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NzYzNQ==", "bodyText": "Have we changed the interface? If these methods are not supposed to be used but just to comply the interface why don't raise an UnsupportedOperationException?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459997635", "createdAt": "2020-07-24T11:30:09Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java", "diffHunk": "@@ -293,17 +294,26 @@ public void writeWorkItem(MarshallerWriteContext context, org.drools.core.proces\n     }\n \n     @Override\n-    public org.drools.core.process.instance.WorkItem readWorkItem(MarshallerReaderContext context) {\n+    public KogitoWorkItem readWorkItem( MarshallerReaderContext context) {\n         try {\n             ExtensionRegistry registry = PersisterHelper.buildRegistry(context, null);\n             Header _header = PersisterHelper.readFromStreamWithHeaderPreloaded(context, registry);\n             JBPMMessages.WorkItem _workItem = JBPMMessages.WorkItem.parseFrom(_header.getPayload(), registry);\n-            return (org.drools.core.process.instance.WorkItem) readWorkItem(context, _workItem, persistWorkItemVars);\n+            return ( KogitoWorkItem ) readWorkItem(context, _workItem, persistWorkItemVars);\n         } catch (IOException e) {\n             throw new IllegalArgumentException( \"IOException while fetching work item instance : \" + e.getMessage(), e );\n         } catch (ClassNotFoundException e) {\n             throw new IllegalArgumentException( \"ClassNotFoundException while fetching work item instance : \" + e.getMessage(), e );\n         }\n     }\n \n+    @Override\n+    public void writeProcessTimers(MarshallerWriteContext context) throws IOException {\n+\n+    }\n+\n+    @Override\n+    public void readProcessTimers(MarshallerReaderContext context) throws IOException, ClassNotFoundException {\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MTQ1NA==", "bodyText": "These methods shouldn't do anything (and actually not even exists) in Kogito. The problem is that they have to stay there to make the compiler happy and they cannot throw an Exception because they are still called by drools code (even when running in kogito) but are not supposed to do anything.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460791454", "createdAt": "2020-07-27T10:19:53Z", "author": {"login": "mariofusco"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java", "diffHunk": "@@ -293,17 +294,26 @@ public void writeWorkItem(MarshallerWriteContext context, org.drools.core.proces\n     }\n \n     @Override\n-    public org.drools.core.process.instance.WorkItem readWorkItem(MarshallerReaderContext context) {\n+    public KogitoWorkItem readWorkItem( MarshallerReaderContext context) {\n         try {\n             ExtensionRegistry registry = PersisterHelper.buildRegistry(context, null);\n             Header _header = PersisterHelper.readFromStreamWithHeaderPreloaded(context, registry);\n             JBPMMessages.WorkItem _workItem = JBPMMessages.WorkItem.parseFrom(_header.getPayload(), registry);\n-            return (org.drools.core.process.instance.WorkItem) readWorkItem(context, _workItem, persistWorkItemVars);\n+            return ( KogitoWorkItem ) readWorkItem(context, _workItem, persistWorkItemVars);\n         } catch (IOException e) {\n             throw new IllegalArgumentException( \"IOException while fetching work item instance : \" + e.getMessage(), e );\n         } catch (ClassNotFoundException e) {\n             throw new IllegalArgumentException( \"ClassNotFoundException while fetching work item instance : \" + e.getMessage(), e );\n         }\n     }\n \n+    @Override\n+    public void writeProcessTimers(MarshallerWriteContext context) throws IOException {\n+\n+    }\n+\n+    @Override\n+    public void readProcessTimers(MarshallerReaderContext context) throws IOException, ClassNotFoundException {\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NzYzNQ=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg5MTQyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozMTozOFrOG2sEIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyMTozNlrOG3ch3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODI0Mw==", "bodyText": "Do we have a ticket to track these TODOs?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459998243", "createdAt": "2020-07-24T11:31:38Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java", "diffHunk": "@@ -218,14 +215,50 @@ public void registerWorkItemHandler(String workItemName, WorkItemHandler handler\n         this.workItemHandlers.put(workItemName, handler);\n     }\n \n+    @Override\n+    public void internalExecuteWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalExecuteWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAddWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAddWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAbortWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAbortWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public Set<WorkItem> getWorkItems() {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItems -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public WorkItem getWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItem -> TODO\" );\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MjI4Nw==", "bodyText": "They are not actual TODOs, it's only that my IDE generate methods to be implemented in that way. I removed the message inside the Exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460792287", "createdAt": "2020-07-27T10:21:36Z", "author": {"login": "mariofusco"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java", "diffHunk": "@@ -218,14 +215,50 @@ public void registerWorkItemHandler(String workItemName, WorkItemHandler handler\n         this.workItemHandlers.put(workItemName, handler);\n     }\n \n+    @Override\n+    public void internalExecuteWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalExecuteWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAddWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAddWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAbortWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAbortWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public Set<WorkItem> getWorkItems() {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItems -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public WorkItem getWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItem -> TODO\" );\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODI0Mw=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg5NDYwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozMjo1NFrOG2sGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyNjo1MlrOG3csRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODcyNA==", "bodyText": "Is it possible to change the signature to use KogitoWorkingMemory?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459998724", "createdAt": "2020-07-24T11:32:54Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java", "diffHunk": "@@ -116,7 +117,7 @@ public SignalProcessInstanceAction(MarshallerReaderContext context) throws IOExc\n \t\t}\n \t\t\n \t\tpublic void execute(InternalWorkingMemory workingMemory) {\n-\t\t\tProcessInstance processInstance = workingMemory.getProcessInstance(processInstanceId);\n+\t\t\tProcessInstance processInstance = ((KogitoWorkingMemory)workingMemory).getProcessInstance(processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDk1MA==", "bodyText": "Unfortunately no, it has to implement the PropagationEntry interface.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460794950", "createdAt": "2020-07-27T10:26:52Z", "author": {"login": "mariofusco"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java", "diffHunk": "@@ -116,7 +117,7 @@ public SignalProcessInstanceAction(MarshallerReaderContext context) throws IOExc\n \t\t}\n \t\t\n \t\tpublic void execute(InternalWorkingMemory workingMemory) {\n-\t\t\tProcessInstance processInstance = workingMemory.getProcessInstance(processInstanceId);\n+\t\t\tProcessInstance processInstance = ((KogitoWorkingMemory)workingMemory).getProcessInstance(processInstanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODcyNA=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDg5NzE0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozMzo0MlrOG2sHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozMzo0MlrOG2sHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTA4NA==", "bodyText": "Legacy code? Is RuleFlowGroup working in Kogito?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459999084", "createdAt": "2020-07-24T11:33:42Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java", "diffHunk": "@@ -103,7 +104,7 @@ public boolean evaluate(NodeInstance instance,\n         \t((Node) instance.getNode()).getUniqueId() + \"-\" + \n         \t((Node) connection.getTo()).getUniqueId() + \"-\" + connection.getToType();\n \n-        return agenda.isRuleActiveInRuleFlowGroup( \"DROOLS_SYSTEM\", rule, processInstance.getId() );\n+        return ((KogitoInternalAgenda)agenda).isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, processInstance.getId() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDkwOTAxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozODozNlrOG2sOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTozODozNlrOG2sOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMDkyNQ==", "bodyText": "To be updated before merging", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460000925", "createdAt": "2020-07-24T11:38:36Z", "author": {"login": "danielezonca"}, "path": "pom.xml", "diffHunk": "@@ -141,6 +141,8 @@\n     <version.org.mockito>3.3.3</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n     <version.org.kie7>7.40.0.Final</version.org.kie7>\n+<!--    <version.org.kie7>7.39.0.Final</version.org.kie7>-->\n+    <version.org.kie7>7.41.0-SNAPSHOT</version.org.kie7>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDkyNTY2OnYy", "diffSide": "RIGHT", "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo0NTowMlrOG2sYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyMjo1N1rOG3ck9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMzQ1Mg==", "bodyText": "These methods should be probably removed in Kogito because related to AgendaGroup/RuleFlowGroup", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460003452", "createdAt": "2020-07-24T11:45:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoDefaultAgenda extends DefaultAgenda implements KogitoInternalAgenda {\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase) {\n+        super(kBase);\n+    }\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase, boolean initMain) {\n+        super(kBase, initMain);\n+    }\n+\n+    @Override\n+    public boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, processInstanceId);\n+    }\n+\n+    @Override\n+    public void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId) {\n+        InternalRuleFlowGroup ruleFlowGroup = (InternalRuleFlowGroup) getRuleFlowGroup( name );\n+        activateRuleFlowGroup( ruleFlowGroup, processInstanceId, nodeInstanceId );\n+    }\n+\n+    @Override\n+    public boolean isRuleInstanceAgendaItem(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, (Object) processInstanceId);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MzA3Ng==", "bodyText": "Agreed, as mentioned before I'm just keeping them for backward compatibility reasons and to run legacy tests.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460793076", "createdAt": "2020-07-27T10:22:57Z", "author": {"login": "mariofusco"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoDefaultAgenda extends DefaultAgenda implements KogitoInternalAgenda {\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase) {\n+        super(kBase);\n+    }\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase, boolean initMain) {\n+        super(kBase, initMain);\n+    }\n+\n+    @Override\n+    public boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, processInstanceId);\n+    }\n+\n+    @Override\n+    public void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId) {\n+        InternalRuleFlowGroup ruleFlowGroup = (InternalRuleFlowGroup) getRuleFlowGroup( name );\n+        activateRuleFlowGroup( ruleFlowGroup, processInstanceId, nodeInstanceId );\n+    }\n+\n+    @Override\n+    public boolean isRuleInstanceAgendaItem(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, (Object) processInstanceId);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMzQ1Mg=="}, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4892, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}