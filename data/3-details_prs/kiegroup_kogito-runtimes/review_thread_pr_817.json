{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNTk5MDYz", "number": 817, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxMTozMlrOEwPU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxOTowNFrOEwPjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDE4MTk0OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus-decisions/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxMTozMlrOHlrDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoyNzoxN1rOHlr9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwMA==", "bodyText": "Just for curiosity, is this PR compatible with stronglytyped option?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509264800", "createdAt": "2020-10-21T13:11:32Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+# for these tests, we do NOT want stronglytyped to be enabled, leave it as default disabled.\n+# kogito.decisions.stronglytyped=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3OTU1Mw==", "bodyText": "It is a very valid point Daniele, thank you this question.\nThey are 100% compatible:\n\nSwagger/OpenAPI deals with specifying a protocol\nStronglyTyped deal with Kogito API internals AND it has implications for the Marshaller (Jackson)\n\nbut since Jackson does work independently of Swagger/OAS, these features are independent as a result as well.\nNaturally, we want them consistent, and this PR ensures that. \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509279553", "createdAt": "2020-10-21T13:27:17Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+# for these tests, we do NOT want stronglytyped to be enabled, leave it as default disabled.\n+# kogito.decisions.stronglytyped=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwMA=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDE4Njc5OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus-decisions/src/test/java/org/kie/kogito/integrationtests/quarkus/OASTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxMjo0M1rOHlrG0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoyODoxMFrOHlsALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NTYxOA==", "bodyText": "Why do we need to expose this file? I saw it is used in OpenAPI/Swagger annotations so I expect it is used during openapi.json generation but not sure if it is needed at runtime", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509265618", "createdAt": "2020-10-21T13:12:43Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/test/java/org/kie/kogito/integrationtests/quarkus/OASTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.aMapWithSize;\n+import static org.hamcrest.Matchers.greaterThan;\n+\n+@QuarkusTest\n+class OASTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testOASdmnDefinitions() {\n+        RestAssured.given()\n+                   .get(\"/dmnDefinitions.json\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4MDMwMA==", "bodyText": "it is needed at runtime since the openapi.json/.yaml will Reference the dmnDefinitions.json content.\nThis is a standard mechanism for OAS", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509280300", "createdAt": "2020-10-21T13:28:10Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-quarkus-decisions/src/test/java/org/kie/kogito/integrationtests/quarkus/OASTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.aMapWithSize;\n+import static org.hamcrest.Matchers.greaterThan;\n+\n+@QuarkusTest\n+class OASTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testOASdmnDefinitions() {\n+        RestAssured.given()\n+                   .get(\"/dmnDefinitions.json\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NTYxOA=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDE4OTA0OnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxMzoxM1rOHlrIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoyOTo1MVrOHlsIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NTk4NA==", "bodyText": "What about make this dependency part of Kogito Springboot archetype? I think this feature could be considered enabled by default. Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509265984", "createdAt": "2020-10-21T13:13:13Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "diffHunk": "@@ -48,6 +48,11 @@\n             <groupId>org.kie.kogito</groupId>\n             <artifactId>kogito-springboot-starter</artifactId>\n         </dependency>\n+        \n+        <dependency>\n+          <groupId>io.swagger.core.v3</groupId>\n+          <artifactId>swagger-annotations</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4MjUwNg==", "bodyText": "As a separate JIRA please https://issues.redhat.com/browse/KOGITO-3671", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509282506", "createdAt": "2020-10-21T13:29:51Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "diffHunk": "@@ -48,6 +48,11 @@\n             <groupId>org.kie.kogito</groupId>\n             <artifactId>kogito-springboot-starter</artifactId>\n         </dependency>\n+        \n+        <dependency>\n+          <groupId>io.swagger.core.v3</groupId>\n+          <artifactId>swagger-annotations</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NTk4NA=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDE5MjQwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxNDowMFrOHlrKXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzozMDo0MVrOHlsOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NjUyNQ==", "bodyText": "Is it a known issue?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509266525", "createdAt": "2020-10-21T13:14:00Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -67,6 +71,7 @@\n     public static String VALIDATION_CONFIGURATION_KEY = \"kogito.decisions.validation\";\n \n     public static DecisionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+        OASFactoryResolver.instance(); // manually invoke SPI, o/w Kogito CodeGen Kogito Quarkus extension failure at NewFileHotReloadTest due to java.util.ServiceConfigurationError: org.eclipse.microprofile.openapi.spi.OASFactoryResolver: io.smallrye.openapi.spi.OASFactoryResolverImpl not a subtype", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4Mzg5Ng==", "bodyText": "Discussed with Mario, yes. He suggested for me to place code comment indeed for this known Quarkus extension <> Codegen limitation of interaction", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509283896", "createdAt": "2020-10-21T13:30:41Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -67,6 +71,7 @@\n     public static String VALIDATION_CONFIGURATION_KEY = \"kogito.decisions.validation\";\n \n     public static DecisionCodegen ofCollectedResources(Collection<CollectedResource> resources) {\n+        OASFactoryResolver.instance(); // manually invoke SPI, o/w Kogito CodeGen Kogito Quarkus extension failure at NewFileHotReloadTest due to java.util.ServiceConfigurationError: org.eclipse.microprofile.openapi.spi.OASFactoryResolver: io.smallrye.openapi.spi.OASFactoryResolverImpl not a subtype", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NjUyNQ=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDE5NjcyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxNDo1N1rOHlrNCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzozMjoxN1rOHlsVWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NzIwOA==", "bodyText": "What about make this error fatal (aka propagate) if\nisMPAnnotationsPresent() || isIOSwaggerOASv3AnnotationsPresent()\nis true?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509267208", "createdAt": "2020-10-21T13:14:57Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -140,6 +146,16 @@ public void setDependencyInjection(DependencyInjectionAnnotator annotator) {\n \n     private void generateAndStoreRestResources() {\n         List<DecisionRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n+        \n+        DMNOASResult oasResult = null;\n+        try {\n+            List<DMNModel> models = resources.stream().map(DMNResource::getDmnModel).collect(Collectors.toList());\n+            oasResult = DMNOASGeneratorFactory.generator(models).build();\n+            String jsonContent = new ObjectMapper().writeValueAsString(oasResult.getJsonSchemaNode());\n+            storeFile(GeneratedFile.Type.GENERATED_CP_RESOURCE, \"META-INF/resources/dmnDefinitions.json\", jsonContent);\n+        } catch (Exception e) {\n+            LOG.error(\"Error while trying to generate OpenAPI specification for the DMN models\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4NTcyMw==", "bodyText": "can't implement that due to limitation of CodeGen design choices of today\nAlso, this OAS generation should be seen as accessory: I don't want to hard fail if I can't generate some metadata", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509285723", "createdAt": "2020-10-21T13:32:17Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -140,6 +146,16 @@ public void setDependencyInjection(DependencyInjectionAnnotator annotator) {\n \n     private void generateAndStoreRestResources() {\n         List<DecisionRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n+        \n+        DMNOASResult oasResult = null;\n+        try {\n+            List<DMNModel> models = resources.stream().map(DMNResource::getDmnModel).collect(Collectors.toList());\n+            oasResult = DMNOASGeneratorFactory.generator(models).build();\n+            String jsonContent = new ObjectMapper().writeValueAsString(oasResult.getJsonSchemaNode());\n+            storeFile(GeneratedFile.Type.GENERATED_CP_RESOURCE, \"META-INF/resources/dmnDefinitions.json\", jsonContent);\n+        } catch (Exception e) {\n+            LOG.error(\"Error while trying to generate OpenAPI specification for the DMN models\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NzIwOA=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDIwMzIwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxNTo1N1rOHlrRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxNTo1N1rOHlrRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2ODIzOQ==", "bodyText": "What about something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalStateException();\n          \n          \n            \n                            throw new IllegalStateException(\"Impossible to find annotation \" + parentName + \" on method \" + dmnMethod.toString());", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509268239", "createdAt": "2020-10-21T13:15:57Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -150,6 +161,66 @@ public String generate() {\n         return clazz.toString();\n     }\n \n+    private void processOASAnn(MethodDeclaration dmnMethod, DecisionService ds) {\n+        String inputRef = null;\n+        String outputRef = null;\n+        if (withOASResult!= null) {\n+            DMNModelIOSets ioSets = withOASResult.lookupIOSetsByModel(dmnModel);\n+            DMNType identifyInputSet = ds != null ? ioSets.lookupDSIOSetsByName(ds.getName()).getDSInputSet() : ioSets.getInputSet();\n+            DMNType identifyOutputSet = ds != null ? ioSets.lookupDSIOSetsByName(ds.getName()).getDSOutputSet() : ioSets.getOutputSet();\n+            inputRef = withOASResult.getNamingPolicy().getRef(identifyInputSet);\n+            outputRef = withOASResult.getNamingPolicy().getRef(identifyOutputSet);\n+        }\n+        // MP / Quarkus\n+        processAnnForRef(dmnMethod,\n+                         \"org.eclipse.microprofile.openapi.annotations.parameters.RequestBody\",\n+                         \"org.eclipse.microprofile.openapi.annotations.media.Schema\",\n+                         \"/dmnDefinitions.json\" + inputRef,\n+                         !mpAnnPresent);\n+        processAnnForRef(dmnMethod,\n+                         \"org.eclipse.microprofile.openapi.annotations.responses.APIResponse\",\n+                         \"org.eclipse.microprofile.openapi.annotations.media.Schema\",\n+                         \"/dmnDefinitions.json\" + outputRef,\n+                         !mpAnnPresent);\n+        // io.swagger / SB\n+        processAnnForRef(dmnMethod,\n+                         \"io.swagger.v3.oas.annotations.parameters.RequestBody\",\n+                         \"io.swagger.v3.oas.annotations.media.Schema\",\n+                         \"/docs/dmnDefinitions.json\" + inputRef,\n+                         !swaggerAnnPresent);\n+        processAnnForRef(dmnMethod,\n+                         \"io.swagger.v3.oas.annotations.responses.ApiResponse\",\n+                         \"io.swagger.v3.oas.annotations.media.Schema\",\n+                         \"/docs/dmnDefinitions.json\" + outputRef,\n+                         !swaggerAnnPresent);\n+    }\n+\n+    private void processAnnForRef(MethodDeclaration dmnMethod, String parentName, String innerName, String ref, boolean removeIt) {\n+        List<NormalAnnotationExpr> findAll = dmnMethod.findAll(NormalAnnotationExpr.class, x -> x.getName().toString().equals(parentName));\n+        if (findAll.isEmpty()) {\n+            if (removeIt) {\n+                return; // nothing to do\n+            } else {\n+                throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDIwNjY0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxNjozOFrOHlrTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyNToxMFrOHlvQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2ODc3Mg==", "bodyText": "Good point. Do you think it makes sense to add schema declaration also for this return type in the future?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509268772", "createdAt": "2020-10-21T13:16:38Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -170,6 +241,9 @@ private void modifyDmnMethodForStronglyTyped(ClassOrInterfaceDeclaration templat\n \n     private MethodDeclaration cloneForDMNResult(MethodDeclaration dmnMethod, String name, String pathName) {\n         MethodDeclaration clonedDmnMethod = dmnMethod.clone();\n+        // a DMNResult-returning method doesn't need the OAS annotations for the $ref of return type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMzU1Ng==", "bodyText": "Possibly, but that will be much harded, since OAS doesn't have a concept for \"generic\", in other words there is not a simple way to describe DMNResult<OutputSet123>. Deferring.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509333556", "createdAt": "2020-10-21T14:25:10Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionRestResourceGenerator.java", "diffHunk": "@@ -170,6 +241,9 @@ private void modifyDmnMethodForStronglyTyped(ClassOrInterfaceDeclaration templat\n \n     private MethodDeclaration cloneForDMNResult(MethodDeclaration dmnMethod, String name, String pathName) {\n         MethodDeclaration clonedDmnMethod = dmnMethod.clone();\n+        // a DMNResult-returning method doesn't need the OAS annotations for the $ref of return type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2ODc3Mg=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDIxODI1OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxOTowNFrOHlraWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyNDoxNlrOHlvNEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3MDYxOQ==", "bodyText": "When PCLResolverFn is overridden, the value of classLoader field is not used so we can remove the first call. Btw this could become no more true in the future so up to you :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509270619", "createdAt": "2020-10-21T13:19:04Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -281,7 +281,8 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         if (generateDecisions()) {\n             appGen.withGenerator(DecisionCodegen.ofCollectedResources(CollectedResource.fromDirectory(kieSourcesDirectory.toPath())))\n                   .withAddons(addonsConfig)\n-                  .withClassLoader(projectClassLoader);\n+                  .withClassLoader(projectClassLoader)\n+                  .withPCLResolverFn(x -> hasClassOnClasspath(project, x));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMjc1Mg==", "bodyText": "as discussed in call, leaving as-is for the scope of this PR. When CodeGen design will eventually change, can always revise.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/817#discussion_r509332752", "createdAt": "2020-10-21T14:24:16Z", "author": {"login": "tarilabs"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -281,7 +281,8 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         if (generateDecisions()) {\n             appGen.withGenerator(DecisionCodegen.ofCollectedResources(CollectedResource.fromDirectory(kieSourcesDirectory.toPath())))\n                   .withAddons(addonsConfig)\n-                  .withClassLoader(projectClassLoader);\n+                  .withClassLoader(projectClassLoader)\n+                  .withPCLResolverFn(x -> hasClassOnClasspath(project, x));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3MDYxOQ=="}, "originalCommit": {"oid": "6c4d8811d76a1ae589b3cfaf81bd858faa214cb6"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4844, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}