{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjYxMjQy", "number": 720, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MToyOVrOEbrgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1ODoxMlrOEdwhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDU5Nzg5OnYy", "diffSide": "RIGHT", "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/QuarkusExplainableResourceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1MTozMFrOHFwBKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMTo1NVrOHGiIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTY1Ng==", "bodyText": "add also a test with more than one request in the body?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475791656", "createdAt": "2020-08-24T17:51:30Z", "author": {"login": "r00ta"}, "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/QuarkusExplainableResourceIT.java", "diffHunk": "@@ -45,20 +44,23 @@ public static ConfigBean configBeanProducer() {\n \n     @Test\n     @SuppressWarnings(\"unchecked\")\n-    void testRequestIsProcessedAndCorrect() throws JsonProcessingException {\n+    void explainServiceTest() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjY0Ng==", "bodyText": "Done, added a test with 2 elements and on with no element", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r476612646", "createdAt": "2020-08-25T17:21:55Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/QuarkusExplainableResourceIT.java", "diffHunk": "@@ -45,20 +44,23 @@ public static ConfigBean configBeanProducer() {\n \n     @Test\n     @SuppressWarnings(\"unchecked\")\n-    void testRequestIsProcessedAndCorrect() throws JsonProcessingException {\n+    void explainServiceTest() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTY1Ng=="}, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDYwNjIzOnYy", "diffSide": "RIGHT", "path": "addons/explainability/explainability-springboot-addon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1Mzo1NFrOHFwGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMjowM1rOHGiIaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5Mjk5Mg==", "bodyText": "remove newline? :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475792992", "createdAt": "2020-08-24T17:53:54Z", "author": {"login": "r00ta"}, "path": "addons/explainability/explainability-springboot-addon/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>explainability</artifactId>\n+        <groupId>org.kie.kogito</groupId>\n+        <version>1.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>explainability-springboot-addon</artifactId>\n+    <name>Kogito :: Add-Ons :: Explainability :: SpringBoot Addon</name>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjcxNQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r476612715", "createdAt": "2020-08-25T17:22:03Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/explainability-springboot-addon/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>explainability</artifactId>\n+        <groupId>org.kie.kogito</groupId>\n+        <version>1.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>explainability-springboot-addon</artifactId>\n+    <name>Kogito :: Add-Ons :: Explainability :: SpringBoot Addon</name>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5Mjk5Mg=="}, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDczMjYzOnYy", "diffSide": "RIGHT", "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoyOTozOVrOHFxWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzozMDoyMFrOHJFmzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMzM5NA==", "bodyText": "Given that with these changes multiple requests are embedded in just one http call, one request might be invalid and raise an uncaught exception. I think we have to handle this case and add a test for that, wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475813394", "createdAt": "2020-08-24T18:29:39Z", "author": {"login": "r00ta"}, "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "diffHunk": "@@ -54,42 +49,37 @@\n \n     @Test\n     public void testPerturbedExecution() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5MTA4Ng==", "bodyText": "Ticket created https://issues.redhat.com/browse/KOGITO-3213", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479291086", "createdAt": "2020-08-28T13:30:20Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "diffHunk": "@@ -54,42 +49,37 @@\n \n     @Test\n     public void testPerturbedExecution() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMzM5NA=="}, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDczODMzOnYy", "diffSide": "RIGHT", "path": "addons/explainability/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozMToxNlrOHFxZoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMjoxMFrOHGiIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNDMwNA==", "bodyText": "remove newlines", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475814304", "createdAt": "2020-08-24T18:31:16Z", "author": {"login": "r00ta"}, "path": "addons/explainability/pom.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>addons</artifactId>\n+        <groupId>org.kie.kogito</groupId>\n+        <version>1.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>explainability</artifactId>\n+    <name>Kogito :: Add-Ons :: Explainability</name>\n+\n+    <packaging>pom</packaging>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjc5NQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r476612795", "createdAt": "2020-08-25T17:22:10Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/pom.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>addons</artifactId>\n+        <groupId>org.kie.kogito</groupId>\n+        <version>1.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>explainability</artifactId>\n+    <name>Kogito :: Add-Ons :: Explainability</name>\n+\n+    <packaging>pom</packaging>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNDMwNA=="}, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDc0NDE3OnYy", "diffSide": "RIGHT", "path": "addons/explainability/explainability-addon-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozMzowNlrOHFxdUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMjoxN1rOHGiJDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNTI0OA==", "bodyText": "remove newline", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475815248", "createdAt": "2020-08-24T18:33:06Z", "author": {"login": "r00ta"}, "path": "addons/explainability/explainability-addon-common/pom.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>explainability</artifactId>\n+        <groupId>org.kie.kogito</groupId>\n+        <version>1.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>explainability-addon-common</artifactId>\n+    <name>Kogito :: Add-Ons :: Explainability :: Addon :: Common</name>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjg3Nw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r476612877", "createdAt": "2020-08-25T17:22:17Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/explainability-addon-common/pom.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>explainability</artifactId>\n+        <groupId>org.kie.kogito</groupId>\n+        <version>1.0.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>explainability-addon-common</artifactId>\n+    <name>Kogito :: Add-Ons :: Explainability :: Addon :: Common</name>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNTI0OA=="}, "originalCommit": {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjM4Nzc0OnYy", "diffSide": "RIGHT", "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1NzoyOFrOHJHJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozMDoxMFrOHJM_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNjQ0MA==", "bodyText": "Would it be also possible to provide expected model name and namespace in the exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479316440", "createdAt": "2020-08-28T13:57:28Z", "author": {"login": "jiripetrlik"}, "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "diffHunk": "@@ -54,42 +49,37 @@\n \n     @Test\n     public void testPerturbedExecution() {\n-        Consumer<EvaluateEvent> eventConsumer = mock(Consumer.class);\n-        DecisionTracingListener listener = new DecisionTracingListener(eventConsumer);\n-        genericDMNRuntime.addListener(listener);\n-\n-        DecisionModels decisionModels = new DecisionModels() {\n-            @Override\n-            public DecisionModel getDecisionModel(String namespace, String name) {\n-                if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n-                    return decisionModel;\n-                }\n-                throw new RuntimeException(\"Model not found.\");\n+\n+        DecisionModels decisionModels = (namespace, name) -> {\n+            if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n+                return decisionModel;\n             }\n+            throw new RuntimeException(\"Model not found.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4e146abd11e00bab8717cc8440d98a74b87e30"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjEzMg==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479412132", "createdAt": "2020-08-28T16:30:10Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "diffHunk": "@@ -54,42 +49,37 @@\n \n     @Test\n     public void testPerturbedExecution() {\n-        Consumer<EvaluateEvent> eventConsumer = mock(Consumer.class);\n-        DecisionTracingListener listener = new DecisionTracingListener(eventConsumer);\n-        genericDMNRuntime.addListener(listener);\n-\n-        DecisionModels decisionModels = new DecisionModels() {\n-            @Override\n-            public DecisionModel getDecisionModel(String namespace, String name) {\n-                if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n-                    return decisionModel;\n-                }\n-                throw new RuntimeException(\"Model not found.\");\n+\n+        DecisionModels decisionModels = (namespace, name) -> {\n+            if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n+                return decisionModel;\n             }\n+            throw new RuntimeException(\"Model not found.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNjQ0MA=="}, "originalCommit": {"oid": "1d4e146abd11e00bab8717cc8440d98a74b87e30"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjM5MTk1OnYy", "diffSide": "RIGHT", "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/ApplicationMock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1ODoxMlrOHJHMqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozMDoxNVrOHJM_xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzE2Mg==", "bodyText": "Would it be also possible to provide info about model name and namespace in the exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479317162", "createdAt": "2020-08-28T13:58:12Z", "author": {"login": "jiripetrlik"}, "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/ApplicationMock.java", "diffHunk": "@@ -14,51 +14,36 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.tracing.decision;\n-\n-import java.io.InputStreamReader;\n-import java.util.function.Consumer;\n+package org.kie.kogito.explainability;\n \n import io.quarkus.test.Mock;\n import org.kie.dmn.api.core.DMNRuntime;\n import org.kie.kogito.Application;\n import org.kie.kogito.Config;\n-import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n-import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.uow.UnitOfWorkManager;\n \n-import static org.kie.kogito.tracing.decision.Constants.TEST_EXECUTION_ID;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_RESOURCE;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_NAME;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_NAMESPACE;\n-import static org.mockito.Mockito.mock;\n+import java.io.InputStreamReader;\n \n @Mock\n public class ApplicationMock implements Application {\n \n     final static DMNRuntime genericDMNRuntime = DMNKogito.createGenericDMNRuntime(new InputStreamReader(\n-            QuarkusExplainableResourceIT.class.getResourceAsStream(MODEL_RESOURCE)\n+            ApplicationMock.class.getResourceAsStream(Constants.MODEL_RESOURCE)\n     ));\n \n     final static DecisionModels decisionModels;\n \n     static {\n-        DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);\n-        Consumer<EvaluateEvent> eventConsumer = mock(Consumer.class);\n-        DecisionTracingListener listener = new DecisionTracingListener(eventConsumer);\n-        genericDMNRuntime.addListener(listener);\n+        DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, Constants.MODEL_NAMESPACE, Constants.MODEL_NAME, () -> Constants.TEST_EXECUTION_ID);\n \n-        decisionModels = new DecisionModels() {\n-            @Override\n-            public DecisionModel getDecisionModel(String namespace, String name) {\n-                if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n-                    return decisionModel;\n-                }\n-                throw new RuntimeException(\"Model not found.\");\n+        decisionModels = (namespace, name) -> {\n+            if (Constants.MODEL_NAMESPACE.equals(namespace) && Constants.MODEL_NAME.equals(name)) {\n+                return decisionModel;\n             }\n+            throw new RuntimeException(\"Model not found.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4e146abd11e00bab8717cc8440d98a74b87e30"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjE2Ng==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479412166", "createdAt": "2020-08-28T16:30:15Z", "author": {"login": "danielezonca"}, "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/ApplicationMock.java", "diffHunk": "@@ -14,51 +14,36 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.tracing.decision;\n-\n-import java.io.InputStreamReader;\n-import java.util.function.Consumer;\n+package org.kie.kogito.explainability;\n \n import io.quarkus.test.Mock;\n import org.kie.dmn.api.core.DMNRuntime;\n import org.kie.kogito.Application;\n import org.kie.kogito.Config;\n-import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n-import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.uow.UnitOfWorkManager;\n \n-import static org.kie.kogito.tracing.decision.Constants.TEST_EXECUTION_ID;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_RESOURCE;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_NAME;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_NAMESPACE;\n-import static org.mockito.Mockito.mock;\n+import java.io.InputStreamReader;\n \n @Mock\n public class ApplicationMock implements Application {\n \n     final static DMNRuntime genericDMNRuntime = DMNKogito.createGenericDMNRuntime(new InputStreamReader(\n-            QuarkusExplainableResourceIT.class.getResourceAsStream(MODEL_RESOURCE)\n+            ApplicationMock.class.getResourceAsStream(Constants.MODEL_RESOURCE)\n     ));\n \n     final static DecisionModels decisionModels;\n \n     static {\n-        DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);\n-        Consumer<EvaluateEvent> eventConsumer = mock(Consumer.class);\n-        DecisionTracingListener listener = new DecisionTracingListener(eventConsumer);\n-        genericDMNRuntime.addListener(listener);\n+        DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, Constants.MODEL_NAMESPACE, Constants.MODEL_NAME, () -> Constants.TEST_EXECUTION_ID);\n \n-        decisionModels = new DecisionModels() {\n-            @Override\n-            public DecisionModel getDecisionModel(String namespace, String name) {\n-                if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n-                    return decisionModel;\n-                }\n-                throw new RuntimeException(\"Model not found.\");\n+        decisionModels = (namespace, name) -> {\n+            if (Constants.MODEL_NAMESPACE.equals(namespace) && Constants.MODEL_NAME.equals(name)) {\n+                return decisionModel;\n             }\n+            throw new RuntimeException(\"Model not found.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzE2Mg=="}, "originalCommit": {"oid": "1d4e146abd11e00bab8717cc8440d98a74b87e30"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4950, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}