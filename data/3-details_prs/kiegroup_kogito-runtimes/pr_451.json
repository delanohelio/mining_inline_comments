{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTc1NzA0", "number": 451, "title": "KOGITO-1632 - Event descriptions for given process instance", "bodyText": "", "createdAt": "2020-04-17T07:45:10Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451", "merged": true, "mergeCommit": {"oid": "c41b6d8d5f196ccd45cdae837777c7c78a3b8a2f"}, "closed": true, "closedAt": "2020-04-21T07:59:53Z", "author": {"login": "mswiderski"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYdP46ABqjMyNDM0MjU2MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZu4NWgFqTM5NzA3NDUxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a112b5d09bc623fbd440755f2964cf77051ed969", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a112b5d09bc623fbd440755f2964cf77051ed969", "committedDate": "2020-04-17T07:43:01Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}, "afterCommit": {"oid": "23121ee46f24ba1a1f71c23a04481d32eff8be57", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/23121ee46f24ba1a1f71c23a04481d32eff8be57", "committedDate": "2020-04-17T08:44:36Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23121ee46f24ba1a1f71c23a04481d32eff8be57", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/23121ee46f24ba1a1f71c23a04481d32eff8be57", "committedDate": "2020-04-17T08:44:36Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}, "afterCommit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2646f4c79d8fdd642dcc57a8a578875dd537789b", "committedDate": "2020-04-17T09:52:37Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDAyNTEw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#pullrequestreview-395402510", "createdAt": "2020-04-17T12:17:19Z", "commit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNzoxOVrOGHLoHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNzoxOVrOGHLoHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MzcxMA==", "bodyText": "@mswiderski could you use a logger or remove these?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410183710", "createdAt": "2020-04-17T12:17:19Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1006,6 +1176,10 @@ public void testTimerBoundaryEventDuration() throws Exception {\n         ksession.addEventListener(countDownListener);\n         ProcessInstance processInstance = ksession.startProcess(\"TimerBoundaryEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(\"Events  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b"}, "originalPosition": 286}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2646f4c79d8fdd642dcc57a8a578875dd537789b", "committedDate": "2020-04-17T09:52:37Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}, "afterCommit": {"oid": "7ffcf440e0e258d489fd49799669468a80accaa6", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ffcf440e0e258d489fd49799669468a80accaa6", "committedDate": "2020-04-17T12:44:06Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDE0ODk4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#pullrequestreview-395414898", "createdAt": "2020-04-17T12:36:47Z", "commit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozNjo0OFrOGHMM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjo0NzowOVrOGHMiBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzEyMA==", "bodyText": "this is not really used, so not sure if you want to keep it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410193120", "createdAt": "2020-04-17T12:36:48Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/GroupedNamedDataType.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class GroupedNamedDataType {\n+\n+    private final Map<String, Set<NamedDataType>> groupedDataTypes = new HashMap<>();\n+\n+    public void add(String name, NamedDataType dataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzgwOQ==", "bodyText": "could you add some test to cover these two methods?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410193809", "createdAt": "2020-04-17T12:38:10Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/EventNodeInstance.java", "diffHunk": "@@ -285,4 +291,20 @@ private String resolveVariable(String s) {\n \tprivate void callSignal(String type, Object event) {\n \t    signalEvent(type, event);\n \t}\n+\n+    @Override\n+    public String[] getEventTypes() {\n+        return new String[] {getEventType()};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646f4c79d8fdd642dcc57a8a578875dd537789b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5ODUzNQ==", "bodyText": "Im wondering here in case we dont actually have a long on ids[1], should i fail completely or handle it and continue to look into the next nodes?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r410198535", "createdAt": "2020-04-17T12:47:09Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java", "diffHunk": "@@ -483,4 +483,28 @@ protected void mapDynamicOutputData(Map<String, Object> results) {\n             }\n         }\n     }\n+    \n+    public Map<String, String> extractTimerEventInformation() {\n+        if (getTimerInstances() != null) {\n+            for (String id : getTimerInstances()) {\n+                String[] ids = id.split(\"_\");\n+                \n+                for (Map.Entry<Timer, DroolsAction> entry : getEventBasedNode().getTimers().entrySet()) {\n+                    if (entry.getKey().getId() == Long.valueOf(ids[1])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffcf440e0e258d489fd49799669468a80accaa6"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ffcf440e0e258d489fd49799669468a80accaa6", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ffcf440e0e258d489fd49799669468a80accaa6", "committedDate": "2020-04-17T12:44:06Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}, "afterCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "committedDate": "2020-04-17T13:12:59Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjI0NTA4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#pullrequestreview-396224508", "createdAt": "2020-04-20T08:02:40Z", "commit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjU1MDI2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#pullrequestreview-396255026", "createdAt": "2020-04-20T08:45:23Z", "commit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjgxMDYw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#pullrequestreview-396681060", "createdAt": "2020-04-20T17:52:35Z", "commit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo1MjozNVrOGIgjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo1Njo1MFrOGIjAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NTE3Mg==", "bodyText": "Unnecessary.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411575172", "createdAt": "2020-04-20T17:52:35Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/NamedDataType.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process;\n+\n+\n+public class NamedDataType {\n+\n+    private final String name;\n+\n+    private final Object dataType;\n+\n+    public NamedDataType(String name, Object dataType) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3ODYyOA==", "bodyText": "Unnecessary blank line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411578628", "createdAt": "2020-04-20T17:57:46Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessInstance.java", "diffHunk": "@@ -351,6 +353,14 @@ public void transitionWorkItem(String id, Transition<?> transition) {\n         this.rt.getWorkItemManager().transitionWorkItem(id, transition);\n         removeOnFinish();\n     }\n+    \n+    \n+    @Override\n+    public Set<EventDescription<?>> events() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjM0MQ==", "bodyText": "Probably would be good to add what kind of variable is queried.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411582341", "createdAt": "2020-04-20T18:03:34Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/EventNodeInterface.java", "diffHunk": "@@ -25,5 +25,7 @@\n \tdefault\tboolean acceptsEvent(String type, Object event, Function<String, String> resolver) {\n \t    return acceptsEvent(type, event);\n \t}\n+\t\n+\tString getVariableName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzMwNw==", "bodyText": "Unnecessary.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411583307", "createdAt": "2020-04-20T18:05:10Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/Process.java", "diffHunk": "@@ -38,4 +38,5 @@\n     void activate();\n \n     void deactivate();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NTA4OQ==", "bodyText": "Probably eventVar?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411595089", "createdAt": "2020-04-20T18:24:37Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -765,6 +774,97 @@ private void removeEventListeners() {\n     public String[] getEventTypes() {\n         return externalEventListeners.keySet().stream().map(this::resolveVariable).collect(Collectors.toList()).toArray(new String[externalEventListeners.size()]);\n     }\n+    \n+    @Override\n+    public Set<EventDescription<?>> getEventDescriptions() {\n+        if (getState() == ProcessInstance.STATE_COMPLETED || getState() == ProcessInstance.STATE_ABORTED) {\n+            return Collections.emptySet();\n+        }\n+        VariableScope variableScope = (VariableScope) ((ContextContainer) getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        Set<EventDescription<?>> eventDesciptions = new LinkedHashSet<>();\n+        \n+        List<EventListener> activeListeners = eventListeners.values().stream()\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+        \n+        activeListeners.addAll(externalEventListeners.values().stream()\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList()));\n+        \n+        activeListeners.forEach(el -> eventDesciptions.addAll(el.getEventDescriptions()));\n+        \n+ \n+        ((org.jbpm.workflow.core.WorkflowProcess)getProcess()).getNodesRecursively().stream().filter(n -> n instanceof EventNodeInterface).forEach(n -> {\n+            \n+            NamedDataType dataType = null;\n+            if (((EventNodeInterface)n).getVariableName() != null) {\n+                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (evantVar != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTQzOA==", "bodyText": "This can be put on less than 3 lines I guess :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411599438", "createdAt": "2020-04-20T18:31:33Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -765,6 +774,97 @@ private void removeEventListeners() {\n     public String[] getEventTypes() {\n         return externalEventListeners.keySet().stream().map(this::resolveVariable).collect(Collectors.toList()).toArray(new String[externalEventListeners.size()]);\n     }\n+    \n+    @Override\n+    public Set<EventDescription<?>> getEventDescriptions() {\n+        if (getState() == ProcessInstance.STATE_COMPLETED || getState() == ProcessInstance.STATE_ABORTED) {\n+            return Collections.emptySet();\n+        }\n+        VariableScope variableScope = (VariableScope) ((ContextContainer) getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        Set<EventDescription<?>> eventDesciptions = new LinkedHashSet<>();\n+        \n+        List<EventListener> activeListeners = eventListeners.values().stream()\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+        \n+        activeListeners.addAll(externalEventListeners.values().stream()\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList()));\n+        \n+        activeListeners.forEach(el -> eventDesciptions.addAll(el.getEventDescriptions()));\n+        \n+ \n+        ((org.jbpm.workflow.core.WorkflowProcess)getProcess()).getNodesRecursively().stream().filter(n -> n instanceof EventNodeInterface).forEach(n -> {\n+            \n+            NamedDataType dataType = null;\n+            if (((EventNodeInterface)n).getVariableName() != null) {\n+                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (evantVar != null) {\n+                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                }\n+            }\n+            if (n instanceof BoundaryEventNode) {\n+                BoundaryEventNode boundaryEventNode = (BoundaryEventNode) n;\n+                StateBasedNodeInstance attachedToNodeInstance = (StateBasedNodeInstance) getNodeInstances(true).stream().filter( ni -> ni.getNode().getMetaData().get(\"UniqueId\").equals(boundaryEventNode.getAttachedToNodeId())).findFirst().orElse(null);\n+                if (attachedToNodeInstance != null) {\n+                    Map<String, String> properties = new HashMap<>();\n+                    properties.put(\"AttachedToID\", attachedToNodeInstance.getNodeDefinitionId());\n+                    properties.put(\"AttachedToName\", attachedToNodeInstance.getNodeName());\n+                    String eventType = \"signal\";\n+                    String eventName = boundaryEventNode.getType();\n+                    Map<String, String> timerProperties = attachedToNodeInstance.extractTimerEventInformation();\n+                    if (timerProperties != null) {\n+                        properties.putAll(timerProperties);\n+                        eventType = \"timer\";\n+                        eventName = \"timerTriggered\";\n+                    } \n+                \n+                    eventDesciptions.add(new BaseEventDescription(eventName, (String)n.getMetaData().get(\"UniqueId\"), n.getName(), eventType, null, getId(), dataType, properties));\n+                    \n+                }\n+                \n+            } else if (n instanceof EventSubProcessNode) {\n+                EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) n;\n+                Node startNode = eventSubProcessNode.findStartNode();\n+                Map<Timer, DroolsAction> timers = eventSubProcessNode.getTimers();\n+                if (timers != null && !timers.isEmpty()) {\n+                    getNodeInstances(eventSubProcessNode.getId()).forEach(ni -> {\n+                        \n+                        Map<String, String> timerProperties = ((StateBasedNodeInstance) ni).extractTimerEventInformation();\n+                        if (timerProperties != null) {\n+                         \n+                            eventDesciptions.add(new BaseEventDescription(\"timerTriggered\", (String)startNode.getMetaData().get(\"UniqueId\"), startNode.getName(), \"timer\", ni.getId(), getId(), null, timerProperties));\n+                          \n+                        }\n+                    });\n+                } else {\n+                \n+                    for (String eventName : eventSubProcessNode.getEvents()) {\n+                        \n+                        eventDesciptions.add(new BaseEventDescription(eventName, (String)startNode.getMetaData().get(\"UniqueId\"), startNode.getName(), \"signal\", null, getId(), dataType));\n+                    }\n+                \n+                }\n+            } else if (n instanceof EventNode) {\n+                NamedDataType finalDataType = dataType;\n+                getNodeInstances(n.getId()).forEach(ni -> {\n+                    eventDesciptions.add(new BaseEventDescription(((EventNode) n).getType(), (String) n.getMetaData().get(\"UniqueId\"), n.getName(), (String) n.getMetaData().getOrDefault(\"EventType\", \"signal\"), ni.getId(),\n+                                                              getId(), finalDataType));\n+                });\n+            } else if (n instanceof StateNode) {\n+                \n+                getNodeInstances(n.getId()).forEach(ni -> {\n+                    eventDesciptions.add(new BaseEventDescription((String) n.getMetaData().get(\"Condition\"), (String) n.getMetaData().get(\"UniqueId\"), n.getName(), (String) n.getMetaData().getOrDefault(\"EventType\",\n+                                                                                                                                                                                                      \"signal\"), ni.getId(),\n+                                                              getId(), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTExMA==", "bodyText": "Maybe a stupid question but why do we iterate here over BoundaryEventNode and not over instance of it? Is the attachedTo property accessible only via nodes and not node instances?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411609110", "createdAt": "2020-04-20T18:47:12Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -765,6 +774,97 @@ private void removeEventListeners() {\n     public String[] getEventTypes() {\n         return externalEventListeners.keySet().stream().map(this::resolveVariable).collect(Collectors.toList()).toArray(new String[externalEventListeners.size()]);\n     }\n+    \n+    @Override\n+    public Set<EventDescription<?>> getEventDescriptions() {\n+        if (getState() == ProcessInstance.STATE_COMPLETED || getState() == ProcessInstance.STATE_ABORTED) {\n+            return Collections.emptySet();\n+        }\n+        VariableScope variableScope = (VariableScope) ((ContextContainer) getProcess()).getDefaultContext(VariableScope.VARIABLE_SCOPE);\n+        Set<EventDescription<?>> eventDesciptions = new LinkedHashSet<>();\n+        \n+        List<EventListener> activeListeners = eventListeners.values().stream()\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+        \n+        activeListeners.addAll(externalEventListeners.values().stream()\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList()));\n+        \n+        activeListeners.forEach(el -> eventDesciptions.addAll(el.getEventDescriptions()));\n+        \n+ \n+        ((org.jbpm.workflow.core.WorkflowProcess)getProcess()).getNodesRecursively().stream().filter(n -> n instanceof EventNodeInterface).forEach(n -> {\n+            \n+            NamedDataType dataType = null;\n+            if (((EventNodeInterface)n).getVariableName() != null) {\n+                Variable evantVar = variableScope.findVariable(((EventNodeInterface)n).getVariableName());\n+                if (evantVar != null) {\n+                    dataType = new NamedDataType(evantVar.getName(), evantVar.getType());\n+                }\n+            }\n+            if (n instanceof BoundaryEventNode) {\n+                BoundaryEventNode boundaryEventNode = (BoundaryEventNode) n;\n+                StateBasedNodeInstance attachedToNodeInstance = (StateBasedNodeInstance) getNodeInstances(true).stream().filter( ni -> ni.getNode().getMetaData().get(\"UniqueId\").equals(boundaryEventNode.getAttachedToNodeId())).findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTM0Nw==", "bodyText": "What about just get keySet here and filter in lambda? Would be more readable I think.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411609347", "createdAt": "2020-04-20T18:47:39Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java", "diffHunk": "@@ -483,4 +483,28 @@ protected void mapDynamicOutputData(Map<String, Object> results) {\n             }\n         }\n     }\n+    \n+    public Map<String, String> extractTimerEventInformation() {\n+        if (getTimerInstances() != null) {\n+            for (String id : getTimerInstances()) {\n+                String[] ids = id.split(\"_\");\n+                \n+                for (Map.Entry<Timer, DroolsAction> entry : getEventBasedNode().getTimers().entrySet()) {\n+                    if (entry.getKey().getId() == Long.valueOf(ids[1])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTA5NQ==", "bodyText": "Can we rather log these or delete them?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411615095", "createdAt": "2020-04-20T18:56:36Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1172,6 +1357,9 @@ public void testIntermediateCatchEventSignal() throws Exception {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(\"Boundary  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTIyNg==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411615226", "createdAt": "2020-04-20T18:56:43Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1189,6 +1377,8 @@ public void testIntermediateCatchEventMessage() throws Exception {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(Arrays.toString(processInstance.getEventTypes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTMxNw==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#discussion_r411615317", "createdAt": "2020-04-20T18:56:50Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/IntermediateEventTest.java", "diffHunk": "@@ -1226,6 +1416,8 @@ public void testIntermediateCatchEventTimerDuration() throws Exception {\n         ProcessInstance processInstance = ksession\n                 .startProcess(\"IntermediateCatchEvent\");\n         assertProcessInstanceActive(processInstance);\n+        \n+        System.out.println(\"Events  \" + ((WorkflowProcessInstanceImpl) processInstance).getEventDescriptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017"}, "originalPosition": 327}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "committedDate": "2020-04-20T19:37:40Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/48bd3ddf9b375c88e9d42b86ab96fdf35c131017", "committedDate": "2020-04-17T13:12:59Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}, "afterCommit": {"oid": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "author": {"user": {"login": "mswiderski", "name": "Maciej Swiderski"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/90de0d4c9e8dbb59363e859806b45d7c8f2d9a25", "committedDate": "2020-04-20T19:37:40Z", "message": "KOGITO-1632 - Event descriptions for given process instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDc0NTE2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/451#pullrequestreview-397074516", "createdAt": "2020-04-21T07:51:13Z", "commit": {"oid": "90de0d4c9e8dbb59363e859806b45d7c8f2d9a25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3648, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}