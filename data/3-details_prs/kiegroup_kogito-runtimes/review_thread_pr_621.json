{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MzExMDcw", "number": 621, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMjo0MlrOENM_BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1Mzo1NlrOESxrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjc5Njg1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingCollector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToxMjo0MlrOGvwFCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoyOTo0OFrOGv_kKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMzk3OQ==", "bodyText": "What about using another topic and another DTO instead of the TraceEvent? Maybe I'm misunderstanding the comment and the intended next steps :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452723979", "createdAt": "2020-07-10T09:12:42Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingCollector.java", "diffHunk": "@@ -33,17 +34,28 @@\n @Singleton\n public class QuarkusDecisionTracingCollector {\n \n+    private final Application application;\n     private final PublishSubject<String> eventSubject;\n     private final DecisionTracingCollector collector;\n \n-    public QuarkusDecisionTracingCollector(BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n-        eventSubject = PublishSubject.create();\n-        collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n+    public QuarkusDecisionTracingCollector(Application application,\n+                                           BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n+        this.application = application;\n+        this.eventSubject = PublishSubject.create();\n+        this.collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n     }\n \n     @Inject\n     public QuarkusDecisionTracingCollector(Application application) {\n-        this(new ApplicationModelSupplier(application));\n+        this(application, new ApplicationModelSupplier(application));\n+    }\n+\n+    @PostConstruct\n+    public void publishDecisionModels() {\n+        application.decisionModels().resources().forEach(resource -> {\n+            //Fire a new TraceEvent containing the model, name and namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64d8df2bb61d8394f54fb3b840476b6ec4008d4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MDQzOQ==", "bodyText": "You are one step ahead of where my code currently is... atm this simply demonstrates the ability to have the model's XML at a point where it can be sent as an event to trusty-service. My plan is to indeed have another type of event (I was thinking of adding a new generic Event class and sub-class with TraceEvent and ModelEvent IDK.. what do you prefer?) I am also considering a separate channel for ModelEvent - which seems to be your preference.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452780439", "createdAt": "2020-07-10T11:13:23Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingCollector.java", "diffHunk": "@@ -33,17 +34,28 @@\n @Singleton\n public class QuarkusDecisionTracingCollector {\n \n+    private final Application application;\n     private final PublishSubject<String> eventSubject;\n     private final DecisionTracingCollector collector;\n \n-    public QuarkusDecisionTracingCollector(BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n-        eventSubject = PublishSubject.create();\n-        collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n+    public QuarkusDecisionTracingCollector(Application application,\n+                                           BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n+        this.application = application;\n+        this.eventSubject = PublishSubject.create();\n+        this.collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n     }\n \n     @Inject\n     public QuarkusDecisionTracingCollector(Application application) {\n-        this(new ApplicationModelSupplier(application));\n+        this(application, new ApplicationModelSupplier(application));\n+    }\n+\n+    @PostConstruct\n+    public void publishDecisionModels() {\n+        application.decisionModels().resources().forEach(resource -> {\n+            //Fire a new TraceEvent containing the model, name and namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMzk3OQ=="}, "originalCommit": {"oid": "e64d8df2bb61d8394f54fb3b840476b6ec4008d4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3NzcwNQ==", "bodyText": "@r00ta This PR now includes a new DTO and topic/subjects.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452977705", "createdAt": "2020-07-10T17:29:48Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingCollector.java", "diffHunk": "@@ -33,17 +34,28 @@\n @Singleton\n public class QuarkusDecisionTracingCollector {\n \n+    private final Application application;\n     private final PublishSubject<String> eventSubject;\n     private final DecisionTracingCollector collector;\n \n-    public QuarkusDecisionTracingCollector(BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n-        eventSubject = PublishSubject.create();\n-        collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n+    public QuarkusDecisionTracingCollector(Application application,\n+                                           BiFunction<String, String, org.kie.dmn.api.core.DMNModel> modelSupplier) {\n+        this.application = application;\n+        this.eventSubject = PublishSubject.create();\n+        this.collector = new DecisionTracingCollector(eventSubject::onNext, modelSupplier);\n     }\n \n     @Inject\n     public QuarkusDecisionTracingCollector(Application application) {\n-        this(new ApplicationModelSupplier(application));\n+        this(application, new ApplicationModelSupplier(application));\n+    }\n+\n+    @PostConstruct\n+    public void publishDecisionModels() {\n+        application.decisionModels().resources().forEach(resource -> {\n+            //Fire a new TraceEvent containing the model, name and namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMzk3OQ=="}, "originalCommit": {"oid": "e64d8df2bb61d8394f54fb3b840476b6ec4008d4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzIzNDc2OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo0MzoxMlrOGv0QPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMTo0MzoxMlrOGv0QPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MjM4Mg==", "bodyText": "@r00ta FYI (further to your comment), I've started the event side of things now. I have extracted cloud event publishing from the collector classes to new EventEmitter classes. These classes are from where I will now also publish the model events (new event/subject/topic to follow).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452792382", "createdAt": "2020-07-10T11:43:12Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusEventEmitter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.Application;\n+import org.reactivestreams.Publisher;\n+\n+@Singleton\n+public class QuarkusEventEmitter extends EventEmitter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e901df5188807765d8b1b99c96d7ed9e0906cde"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQyMDAyOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Nzo1NFrOGv2Atw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0Nzo1NFrOGv2Atw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTE3NQ==", "bodyText": "Refactor to ensure the InputStream is closed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452821175", "createdAt": "2020-07-10T12:47:54Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -63,7 +65,17 @@ public String getModelName() {\n             return modelName;\n         }\n \n-        protected String load(InputStream is) {\n+        @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fa50435593e483b897e5d97eaf2a02e2a561f0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQyMTc2OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0ODozM1rOGv2B2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0ODozM1rOGv2B2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTQ2Nw==", "bodyText": "@r00ta FYI.. I'm now emitting CloudEvents for ModelEvent (all be them on the same topic/subject atm)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452821467", "createdAt": "2020-07-10T12:48:33Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootEventEmitter.java", "diffHunk": "@@ -44,9 +46,8 @@ public SpringBootEventEmitter(Application application,\n     @PostConstruct\n     public void publishDecisionModels() {\n         getApplication().decisionModels().resources().forEach(resource -> {\n-            //Fire a new TraceEvent containing the model, name and namespace\n-            System.out.println(resource.getNamespace() + \", \" + resource.getModelName());\n-            System.out.println(resource.get());\n+            //Fire a new ModelEvent containing the model, name and namespace\n+            emit(Json.encode(ModelCloudEventBuilder.from(resource.getModelName(), resource.getNamespace(), resource.get())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fa50435593e483b897e5d97eaf2a02e2a561f0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzU2MTkzOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoyODo0OFrOGv3XVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToxODo1MFrOG0fpVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ==", "bodyText": "@r00ta FYI I now support different topics/subjects for the different events.\nThis PR may need some rework when #583 is merged.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452843351", "createdAt": "2020-07-10T13:28:48Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3ODQyMQ==", "bodyText": "@r00ta @danielezonca @kostola This pretty much mimics org.kie.kogito.event.EventPublisher\nWDYT about me moving to that interface instead?\nTraceEvent and ModelEvent would then need to implement org.kie.kogito.event.DataEvent.\nI'd propose doing as a new JIRA when the current trusty event work is more complete.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453678421", "createdAt": "2020-07-13T14:10:57Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5NjcyNw==", "bodyText": "The risk is that trusty's specific events will be dragged into the generic EventManager.\nEventPublisher implementations are injected into App and bound to EventManager (tied to org.kie.kogito.uow.UnitOfWorkManager) that may be undesirable to trusty's events.. who knows more about this to be able to advise?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453696727", "createdAt": "2020-07-13T14:36:55Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5NjI1MA==", "bodyText": "UnitOfWorkManager is mainly (if not only) used by process part of kogito as it is meant to organize work in units that can be easily managed is one. So more to enhance stateful use cases and less for stateless. Though unifying on the data model level makes a lot of sense to me - extending DataEvent\nLet me know if you need any additional details.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453896250", "createdAt": "2020-07-13T19:57:18Z", "author": {"login": "mswiderski"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMDQ4OQ==", "bodyText": "Thank-you @mswiderski, so there's a good reason to investigate further the impact of having additional non-process related EventPublisher registering with UoW (in the generated App class initialisation.. it currently adds ALL EventPublisher to UoW EventManager).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453900489", "createdAt": "2020-07-13T20:05:33Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwNTczNw==", "bodyText": "ProcessEventSupport seems to register various process orientated WorkUnits with CollectingUnitOfWork that then batches into CE published by ALL EventPublisher implementations... this no doubt needs some re-think if we want to re-use EventPublisher as a whole for other use-cases (we don't really want to send UoW related events to every publisher).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453905737", "createdAt": "2020-07-13T20:15:44Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyOTgyMw==", "bodyText": "@manstis I'd say it does make sense to further investigate and adjust whenever it is required. I'd say that the event publishers (all that are configured and found in the app) should reveice every event and they are responsible to deciding if such event should be published or not. Makes it clear rule for the unit of work manager to push out events whenever they are ready to be pushed.\nNote that there might be different types of unit of works, then currently implemented - CollectingUnitOfWork - fits the needs of process engine while it might not fit other cases. So collecting in this matter is mainly to avoid events to be published to early... like for things that failed later on.\nAgain, was done as generic and extendable as possible but having just single use case in mind does not make it perfect :)\n\nwe don't really want to send UoW related events to every publisher\n\ncan you elaborate a bit why this is not desired?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r454129823", "createdAt": "2020-07-14T06:25:08Z", "author": {"login": "mswiderski"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NzYyMA==", "bodyText": "@mswiderski We agree about the same principle; but have suggested alternative approaches: You state all EventPublishers receive all DataEvents and is is the publishers' responsibility to filter those it has no interest in; whereas my approach would be for the EventManager to filter EventPublishers by the event types it supports before dispatching the event for publication.... same principle, one has inverted control to the other. I have no strong preference of either approach; but I naturally lean to the publisher declaring the types of event it handles.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r457697620", "createdAt": "2020-07-20T21:18:50Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/EventEmitter.java", "diffHunk": "@@ -16,19 +16,7 @@\n \n package org.kie.kogito.tracing.decision;\n \n-import org.kie.kogito.Application;\n+public interface EventEmitter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzM1MQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzU3MTU1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootTraceEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTowOFrOGv3dAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTowOFrOGv3dAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0NDgwMw==", "bodyText": "Tracing topic is kogito-tracing-decision", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452844803", "createdAt": "2020-07-10T13:31:08Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootTraceEventEmitter.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootTraceEventEmitter implements EventEmitter {\n+\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootTraceEventEmitter(final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-decision}\") String kafkaTopicName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzU3MzIxOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTozNFrOGv3d-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzozMTozNFrOGv3d-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0NTA0OQ==", "bodyText": "Models topic is kogito-tracing-model", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r452845049", "createdAt": "2020-07-10T13:31:34Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.annotation.PostConstruct;\n+\n+import io.cloudevents.json.Json;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.model.ModelCloudEventBuilder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootModelEventEmitter implements EventEmitter {\n+\n+    private final Application application;\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootModelEventEmitter(final Application application,\n+                                       final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODIzMTkxOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1MDoyOVrOGwfDfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDoxNTo1N1rOGxNXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5MzYyOQ==", "bodyText": "Let's already use full resource identifier: GAV + resource type + resource identifier\nFor now it is not important that we don't have GAV to export but at least we can already use the \"abstraction\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453493629", "createdAt": "2020-07-13T08:50:29Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    @JsonProperty(\"name\")\n+    private final String name;\n+\n+    @JsonProperty(\"namespace\")\n+    private final String namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3OTk0NQ==", "bodyText": "@danielezonca OK, so for now:\n\nI'd mock/dummy the GAV\nresource type is the OMG URL for DMN/PMML etc or more simply our internal dmn, pmml literals?\nresource identifier is, presumably, the namespace and name concatenation (with a separator, :?)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453679945", "createdAt": "2020-07-13T14:13:15Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    @JsonProperty(\"name\")\n+    private final String name;\n+\n+    @JsonProperty(\"namespace\")\n+    private final String namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5MzYyOQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc0MzI3MQ==", "bodyText": "@danielezonca OK, so for now:\n\nI'd mock/dummy the GAV\nresource type is the OMG URL for DMN/PMML etc or more simply our internal dmn, pmml literals?\n\n\ndmn / pmml is easier from my point of view but flexible enough\n\n\nresource identifier is, presumably, the namespace and name concatenation (with a separator, :?)\n\n\nYes in case of DMN is namespace + name concatenated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r453743271", "createdAt": "2020-07-13T15:39:52Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    @JsonProperty(\"name\")\n+    private final String name;\n+\n+    @JsonProperty(\"namespace\")\n+    private final String namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5MzYyOQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI1MjI5NQ==", "bodyText": "Added here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r454252295", "createdAt": "2020-07-14T10:15:57Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    @JsonProperty(\"name\")\n+    private final String name;\n+\n+    @JsonProperty(\"namespace\")\n+    private final String namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5MzYyOQ=="}, "originalCommit": {"oid": "cce4b32de40b631d1eb3302370a713bb25ff1a82"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI0ODQ2OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDoxM1rOG1twbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyODo0NlrOG3lDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzM4OQ==", "bodyText": "logger?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458977389", "createdAt": "2020-07-22T17:54:13Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMTg2MQ==", "bodyText": "Done... good catch, I forgot to change it before committing.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460931861", "createdAt": "2020-07-27T14:28:46Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzM4OQ=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI1MDA3OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDozOVrOG1txeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyODo1MlrOG3lDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzY1OA==", "bodyText": "logger?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458977658", "createdAt": "2020-07-22T17:54:39Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMTkzMw==", "bodyText": "Done... good catch, I forgot to change it before committing.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460931933", "createdAt": "2020-07-27T14:28:52Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzY1OA=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI1ODQ0OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NzowMFrOG1t2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNzowM1rOG3k90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3OTA2Ng==", "bodyText": "just a minor question: what about moving these internal classes to separated files?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458979066", "createdAt": "2020-07-22T17:57:00Z", "author": {"login": "r00ta"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMDUxNA==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460930514", "createdAt": "2020-07-27T14:27:03Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3OTA2Ng=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI2OTc5OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowMDowNlrOG1t-Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1MzoxMVrOG4JCpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDkzNQ==", "bodyText": "minor question: what about moving it to a separated file?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r458980935", "createdAt": "2020-07-22T18:00:06Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.decision.DecisionModelType;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    private final GAV gav;\n+\n+    private final String name;\n+\n+    private final String namespace;\n+\n+    private final String identifier;\n+\n+    private final DecisionModelType type;\n+\n+    private final String definition;\n+\n+    public static class GAV {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNDcwOA==", "bodyText": "I'm less sure I want to move this GAV class to another file. Ideally I would like to have simply used org.kie.api.management.GAV however it cannot be deserialized when used in a CloudEvent so I created this org.kie.kogito.tracing.decision.event.model.ModelEvent$GAV class for use solely with the event mechanism.\nIf you still prefer it to be moved to a separate file I will do so; however wanted first to explain why it's an inner class.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460934708", "createdAt": "2020-07-27T14:32:29Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.decision.DecisionModelType;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    private final GAV gav;\n+\n+    private final String name;\n+\n+    private final String namespace;\n+\n+    private final String identifier;\n+\n+    private final DecisionModelType type;\n+\n+    private final String definition;\n+\n+    public static class GAV {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDkzNQ=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTU3NQ==", "bodyText": "Hi @manstis , no problem, thanks for clarification :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461521575", "createdAt": "2020-07-28T11:53:11Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/model/ModelEvent.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.decision.DecisionModelType;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ModelEvent {\n+\n+    private final GAV gav;\n+\n+    private final String name;\n+\n+    private final String namespace;\n+\n+    private final String identifier;\n+\n+    private final DecisionModelType type;\n+\n+    private final String definition;\n+\n+    public static class GAV {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDkzNQ=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDczOTg1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNTowNlrOG1ylPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozNjowNVrOG3lZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NjQ0NA==", "bodyText": "Add TODO comment with jira ticket?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459056444", "createdAt": "2020-07-22T20:15:06Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -100,27 +91,91 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n             }\n         }\n+\n         if (addonsConfig.useTracing()) {\n-            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n-                    .map(x -> x.getVariable(0))\n-                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n-            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+            setupResourcesVariable(typeDeclaration);\n+            setupExecIdSupplierVariable(typeDeclaration);\n         }\n         return typeDeclaration;\n     }\n \n-    private MethodCallExpr getReadResourceMethod( ClassOrInterfaceType applicationClass, DMNResource resource ) {\n-        String source = resource.getDmnModel().getResource().getSourcePath();\n-        if (resource.getPath().toString().endsWith( \".jar\" )) {\n-            return new MethodCallExpr(\n-                      new MethodCallExpr( new NameExpr( IoUtils.class.getCanonicalName() + \".class\" ), \"getClassLoader\" ),\n-                    \"getResourceAsStream\").addArgument(new StringLiteralExpr(source));\n+    private void setupResourcesVariable(ClassOrInterfaceDeclaration typeDeclaration) {\n+        List<MethodDeclaration> getResourcesMethods = typeDeclaration.getMethodsBySignature(\"getResources\");\n+        if (getResourcesMethods.size() != 1) {\n+            throw (new RuntimeException(\"A \\\"getResourcePaths()\\\" method was not found in \" + TEMPLATE_JAVA));\n         }\n-        \n+        MethodDeclaration getResourcesMethod = getResourcesMethods.get(0);\n+        getResourcesMethod.getBody().ifPresent(body -> {\n+            VariableDeclarator variable = getResourcesMethod.findFirst(VariableDeclarator.class)\n+                    .orElseThrow(() -> new RuntimeException(\"Can't find a variable declaration in the \\\"getResourcePaths()\\\" method.\"));\n+            for (DMNResource resource : resources) {\n+                MethodCallExpr add = new MethodCallExpr(variable.getNameAsExpression(), \"add\");\n+                if (resource.getPath().toString().endsWith(\".jar\")) {\n+                    add.addArgument(newObject(DecisionModelJarResource.class,\n+                                              mockGAV(),\n+                                              new StringLiteralExpr(getDecisionModelJarResourcePath(resource)),\n+                                              new StringLiteralExpr(resource.getDmnModel().getNamespace()),\n+                                              new StringLiteralExpr(resource.getDmnModel().getName()),\n+                                              makeDMNIdentifier(resource),\n+                                              makeDMNType()));\n+                } else {\n+                    ClassOrInterfaceType applicationClass = StaticJavaParser.parseClassOrInterfaceType(applicationCanonicalName);\n+                    add.addArgument(newObject(DecisionModelRelativeResource.class,\n+                                              mockGAV(),\n+                                              new StringLiteralExpr(getDecisionModelRelativeResourcePath(resource)),\n+                                              new StringLiteralExpr(resource.getDmnModel().getNamespace()),\n+                                              new StringLiteralExpr(resource.getDmnModel().getName()),\n+                                              makeDMNIdentifier(resource),\n+                                              makeDMNType(),\n+                                              new FieldAccessExpr(applicationClass.getNameAsExpression(), \"class\")));\n+                }\n+                body.addStatement(body.getStatements().size() - 1, add);\n+            }\n+        });\n+    }\n+\n+    private ObjectCreationExpr mockGAV() {\n+        return newObject(GAV.class,\n+                         new StringLiteralExpr(\"dummy\"),\n+                         new StringLiteralExpr(\"dummy\"),\n+                         new StringLiteralExpr(\"0.0\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNzQ3OA==", "bodyText": "Done. See https://issues.redhat.com/browse/FAI-239 (and the code updated to reference it too).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460937478", "createdAt": "2020-07-27T14:36:05Z", "author": {"login": "manstis"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -100,27 +91,91 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n             }\n         }\n+\n         if (addonsConfig.useTracing()) {\n-            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n-                    .map(x -> x.getVariable(0))\n-                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n-            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+            setupResourcesVariable(typeDeclaration);\n+            setupExecIdSupplierVariable(typeDeclaration);\n         }\n         return typeDeclaration;\n     }\n \n-    private MethodCallExpr getReadResourceMethod( ClassOrInterfaceType applicationClass, DMNResource resource ) {\n-        String source = resource.getDmnModel().getResource().getSourcePath();\n-        if (resource.getPath().toString().endsWith( \".jar\" )) {\n-            return new MethodCallExpr(\n-                      new MethodCallExpr( new NameExpr( IoUtils.class.getCanonicalName() + \".class\" ), \"getClassLoader\" ),\n-                    \"getResourceAsStream\").addArgument(new StringLiteralExpr(source));\n+    private void setupResourcesVariable(ClassOrInterfaceDeclaration typeDeclaration) {\n+        List<MethodDeclaration> getResourcesMethods = typeDeclaration.getMethodsBySignature(\"getResources\");\n+        if (getResourcesMethods.size() != 1) {\n+            throw (new RuntimeException(\"A \\\"getResourcePaths()\\\" method was not found in \" + TEMPLATE_JAVA));\n         }\n-        \n+        MethodDeclaration getResourcesMethod = getResourcesMethods.get(0);\n+        getResourcesMethod.getBody().ifPresent(body -> {\n+            VariableDeclarator variable = getResourcesMethod.findFirst(VariableDeclarator.class)\n+                    .orElseThrow(() -> new RuntimeException(\"Can't find a variable declaration in the \\\"getResourcePaths()\\\" method.\"));\n+            for (DMNResource resource : resources) {\n+                MethodCallExpr add = new MethodCallExpr(variable.getNameAsExpression(), \"add\");\n+                if (resource.getPath().toString().endsWith(\".jar\")) {\n+                    add.addArgument(newObject(DecisionModelJarResource.class,\n+                                              mockGAV(),\n+                                              new StringLiteralExpr(getDecisionModelJarResourcePath(resource)),\n+                                              new StringLiteralExpr(resource.getDmnModel().getNamespace()),\n+                                              new StringLiteralExpr(resource.getDmnModel().getName()),\n+                                              makeDMNIdentifier(resource),\n+                                              makeDMNType()));\n+                } else {\n+                    ClassOrInterfaceType applicationClass = StaticJavaParser.parseClassOrInterfaceType(applicationCanonicalName);\n+                    add.addArgument(newObject(DecisionModelRelativeResource.class,\n+                                              mockGAV(),\n+                                              new StringLiteralExpr(getDecisionModelRelativeResourcePath(resource)),\n+                                              new StringLiteralExpr(resource.getDmnModel().getNamespace()),\n+                                              new StringLiteralExpr(resource.getDmnModel().getName()),\n+                                              makeDMNIdentifier(resource),\n+                                              makeDMNType(),\n+                                              new FieldAccessExpr(applicationClass.getNameAsExpression(), \"class\")));\n+                }\n+                body.addStatement(body.getStatements().size() - 1, add);\n+            }\n+        });\n+    }\n+\n+    private ObjectCreationExpr mockGAV() {\n+        return newObject(GAV.class,\n+                         new StringLiteralExpr(\"dummy\"),\n+                         new StringLiteralExpr(\"dummy\"),\n+                         new StringLiteralExpr(\"0.0\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NjQ0NA=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA1NjcxOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzowNjo0MlrOG1-iSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjo0Mjo1OVrOG3gwwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MjI5Ng==", "bodyText": "Why Async?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459252296", "createdAt": "2020-07-23T07:06:42Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.model.ModelEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootModelEventEmitter implements EventEmitter {\n+\n+    private final Application application;\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootModelEventEmitter(final Application application,\n+                                       final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName) {\n+        this.application = application;\n+        this.template = template;\n+        this.kafkaTopicName = kafkaTopicName;\n+    }\n+\n+    @Async", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2MTYzMg==", "bodyText": "No strong opinion. however removed to be consistent with other Springboot specific implementations of other classes.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460861632", "createdAt": "2020-07-27T12:42:59Z", "author": {"login": "manstis"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootModelEventEmitter.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.model.ModelEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootModelEventEmitter implements EventEmitter {\n+\n+    private final Application application;\n+    private final KafkaTemplate<String, String> template;\n+    private final String kafkaTopicName;\n+\n+    @Autowired\n+    public SpringBootModelEventEmitter(final Application application,\n+                                       final KafkaTemplate<String, String> template,\n+                                       final @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-model}\") String kafkaTopicName) {\n+        this.application = application;\n+        this.template = template;\n+        this.kafkaTopicName = kafkaTopicName;\n+    }\n+\n+    @Async", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MjI5Ng=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA4MDk2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoxNTo0MlrOG1-wbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoxMzozMFrOG3kVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NTkxNw==", "bodyText": "I know this should not happen but what about throw an exception if body is not available (for example if the template has been changed)? Otherwise the code will just skip the logic", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459255917", "createdAt": "2020-07-23T07:15:42Z", "author": {"login": "danielezonca"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -100,27 +91,91 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n             }\n         }\n+\n         if (addonsConfig.useTracing()) {\n-            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n-                    .map(x -> x.getVariable(0))\n-                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n-            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+            setupResourcesVariable(typeDeclaration);\n+            setupExecIdSupplierVariable(typeDeclaration);\n         }\n         return typeDeclaration;\n     }\n \n-    private MethodCallExpr getReadResourceMethod( ClassOrInterfaceType applicationClass, DMNResource resource ) {\n-        String source = resource.getDmnModel().getResource().getSourcePath();\n-        if (resource.getPath().toString().endsWith( \".jar\" )) {\n-            return new MethodCallExpr(\n-                      new MethodCallExpr( new NameExpr( IoUtils.class.getCanonicalName() + \".class\" ), \"getClassLoader\" ),\n-                    \"getResourceAsStream\").addArgument(new StringLiteralExpr(source));\n+    private void setupResourcesVariable(ClassOrInterfaceDeclaration typeDeclaration) {\n+        List<MethodDeclaration> getResourcesMethods = typeDeclaration.getMethodsBySignature(\"getResources\");\n+        if (getResourcesMethods.size() != 1) {\n+            throw (new RuntimeException(\"A \\\"getResourcePaths()\\\" method was not found in \" + TEMPLATE_JAVA));\n         }\n-        \n+        MethodDeclaration getResourcesMethod = getResourcesMethods.get(0);\n+        getResourcesMethod.getBody().ifPresent(body -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyMDI2Mg==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460920262", "createdAt": "2020-07-27T14:13:30Z", "author": {"login": "manstis"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -100,27 +91,91 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n                 throw new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n             }\n         }\n+\n         if (addonsConfig.useTracing()) {\n-            VariableDeclarator execIdSupplierVariable = typeDeclaration.getFieldByName(\"execIdSupplier\")\n-                    .map(x -> x.getVariable(0))\n-                    .orElseThrow(() -> new RuntimeException(\"Can't find \\\"execIdSupplier\\\" field in \" + TEMPLATE_JAVA));\n-            execIdSupplierVariable.setInitializer(newObject(DmnExecutionIdSupplier.class));\n+            setupResourcesVariable(typeDeclaration);\n+            setupExecIdSupplierVariable(typeDeclaration);\n         }\n         return typeDeclaration;\n     }\n \n-    private MethodCallExpr getReadResourceMethod( ClassOrInterfaceType applicationClass, DMNResource resource ) {\n-        String source = resource.getDmnModel().getResource().getSourcePath();\n-        if (resource.getPath().toString().endsWith( \".jar\" )) {\n-            return new MethodCallExpr(\n-                      new MethodCallExpr( new NameExpr( IoUtils.class.getCanonicalName() + \".class\" ), \"getClassLoader\" ),\n-                    \"getResourceAsStream\").addArgument(new StringLiteralExpr(source));\n+    private void setupResourcesVariable(ClassOrInterfaceDeclaration typeDeclaration) {\n+        List<MethodDeclaration> getResourcesMethods = typeDeclaration.getMethodsBySignature(\"getResources\");\n+        if (getResourcesMethods.size() != 1) {\n+            throw (new RuntimeException(\"A \\\"getResourcePaths()\\\" method was not found in \" + TEMPLATE_JAVA));\n         }\n-        \n+        MethodDeclaration getResourcesMethod = getResourcesMethods.get(0);\n+        getResourcesMethod.getBody().ifPresent(body -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NTkxNw=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA5OTU4OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyMTo1N1rOG1-7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNjoyOVrOG3k78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODc1Mw==", "bodyText": "This interface is not supposed to be used by users so what about move it to kogito-internal?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459258753", "createdAt": "2020-07-23T07:21:57Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMDAzNA==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460930034", "createdAt": "2020-07-27T14:26:29Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODc1Mw=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjEwMDU5OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoyMjoxNlrOG1-8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoyNjozOFrOG3k8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODkwMw==", "bodyText": "What about move this class to kogito-dmn?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459258903", "createdAt": "2020-07-23T07:22:16Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzMDEzMg==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r460930132", "createdAt": "2020-07-27T14:26:38Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1ODkwMw=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzM5NTIwOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0NTowM1rOG2LNcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxNDo0N1rOG4H62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1OTk1NA==", "bodyText": "I don't think we should expose this list in the public api. I'm thinking to hide the logic inside the codegenerated implementation of this interface:\n\nyou already generate the list to be returned\nif tracing is enable\ninject EventEmitter\nmove there @PostConstruct method (publishDecisionModels)\nadd @Startup annotation\n\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r459459954", "createdAt": "2020-07-23T13:45:03Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            return sb.toString();\n+        }\n+    }\n+\n+    List<DecisionModelResource> resources();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNzg4NA==", "bodyText": "@danielezonca I cannot inject all EventEmitters as TraceEvents are also handled by an EventEmitter in this PR. Moving the publication of both ModelEvent and TraceEvent to different specific implementations of EventEmitter (different channel for each event type) is much closer to the existing EventPublisher interface and usage that was part of the topic of unified/consolidated event handling in kogito.\nThat said I have changed this PR to move List<DecisionModelResource> resources() out of DecisionModels. I now generate a provider of this data that is injected into the XXXModelEventEmitter implementations instead of Application.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461427884", "createdAt": "2020-07-28T08:59:59Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            return sb.toString();\n+        }\n+    }\n+\n+    List<DecisionModelResource> resources();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1OTk1NA=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMzE5NA==", "bodyText": "Perfect, this is probably even better as solution \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461503194", "createdAt": "2020-07-28T11:14:47Z", "author": {"login": "danielezonca"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModels.java", "diffHunk": "@@ -15,8 +15,113 @@\n \n package org.kie.kogito.decision;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import org.kie.api.management.GAV;\n+\n public interface DecisionModels {\n \n-    DecisionModel getDecisionModel(String namespace, String name);\n+    interface DecisionModelResource extends Supplier<String> {\n+\n+        GAV getGav();\n+\n+        String getPath();\n+\n+        String getNamespace();\n+\n+        String getModelName();\n+\n+        String getIdentifier();\n+\n+        DecisionModelType getModelType();\n+\n+        InputStream getInputStream();\n+    }\n+\n+    abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+        protected final GAV gav;\n+        protected final String path;\n+        protected final String namespace;\n+        protected final String modelName;\n+        protected final String identifier;\n+        protected final DecisionModelType type;\n \n+        protected BaseDecisionModelResource(GAV gav,\n+                                            String path,\n+                                            String namespace,\n+                                            String modelName,\n+                                            String identifier,\n+                                            DecisionModelType type) {\n+            this.gav = gav;\n+            this.path = path;\n+            this.namespace = namespace;\n+            this.modelName = modelName;\n+            this.identifier = identifier;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public GAV getGav() {\n+            return gav;\n+        }\n+\n+        @Override\n+        public String getPath() {\n+            return path;\n+        }\n+\n+        @Override\n+        public String getNamespace() {\n+            return namespace;\n+        }\n+\n+        @Override\n+        public String getModelName() {\n+            return modelName;\n+        }\n+\n+        @Override\n+        public String getIdentifier() {\n+            return identifier;\n+        }\n+\n+        @Override\n+        public DecisionModelType getModelType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String get() {\n+            try (InputStream is = getInputStream()) {\n+                return load(is);\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            throw new RuntimeException(\"Failed to get model\");\n+        }\n+\n+        private String load(InputStream is) {\n+            StringBuilder sb = new StringBuilder();\n+            try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                    sb.append(line).append(\"\\n\");\n+                }\n+            } catch (IOException ioe) {\n+                System.out.println(ioe.getMessage());\n+            }\n+            return sb.toString();\n+        }\n+    }\n+\n+    List<DecisionModelResource> resources();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1OTk1NA=="}, "originalCommit": {"oid": "564cff01e167f8597c98e1a83f034b65124530e3"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIyNDMzOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModelType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo0OTo0MFrOG4I8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MTowMFrOG4QA1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxOTkyOA==", "bodyText": "@manstis\nDo you plan to implement more decision types? Does this make sense with the only one option?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461519928", "createdAt": "2020-07-28T11:49:40Z", "author": {"login": "jiripetrlik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModelType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.decision;\n+\n+public enum DecisionModelType {\n+\n+    DMN(\"dmn\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTc5Nw==", "bodyText": "Yes we do. All model types will eventually be supported; DMN, PMML, DRL and potentially others (whatever is supported by the drools/kie runtimes).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461635797", "createdAt": "2020-07-28T14:41:00Z", "author": {"login": "manstis"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionModelType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.decision;\n+\n+public enum DecisionModelType {\n+\n+    DMN(\"dmn\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxOTkyOA=="}, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIyNTU1OnYy", "diffSide": "RIGHT", "path": "api/kogito-internal/src/main/java/org/kie/internal/decision/DecisionModelResourcesProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1MDowM1rOG4I88A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NTowMlrOG4QN9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDExMg==", "bodyText": "Remove empty line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461520112", "createdAt": "2020-07-28T11:50:03Z", "author": {"login": "jiripetrlik"}, "path": "api/kogito-internal/src/main/java/org/kie/internal/decision/DecisionModelResourcesProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.internal.decision;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public interface DecisionModelResourcesProvider extends Supplier<List<DecisionModelResource>> {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzOTE1OA==", "bodyText": "This file has been formatted with the code formatter in droolsjbpm-build-bootstrap. If I remove the line and reformat the line is added back.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461639158", "createdAt": "2020-07-28T14:45:02Z", "author": {"login": "manstis"}, "path": "api/kogito-internal/src/main/java/org/kie/internal/decision/DecisionModelResourcesProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.internal.decision;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+public interface DecisionModelResourcesProvider extends Supplier<List<DecisionModelResource>> {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDExMg=="}, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIzMDA0OnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1MTozMFrOG4I_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Njo1MVrOG4QT8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDgwMw==", "bodyText": "Please rethrow this exception. It would be good to propagate exception details further and not log only log it.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461520803", "createdAt": "2020-07-28T11:51:30Z", "author": {"login": "jiripetrlik"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.kie.api.management.GAV;\n+import org.kie.internal.decision.DecisionModelResource;\n+import org.kie.kogito.decision.DecisionModelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BaseDecisionModelResource.class);\n+\n+    protected final GAV gav;\n+    protected final String path;\n+    protected final String namespace;\n+    protected final String modelName;\n+    protected final String identifier;\n+    protected final DecisionModelType type;\n+\n+    protected BaseDecisionModelResource(GAV gav,\n+                                        String path,\n+                                        String namespace,\n+                                        String modelName,\n+                                        String identifier,\n+                                        DecisionModelType type) {\n+        this.gav = gav;\n+        this.path = path;\n+        this.namespace = namespace;\n+        this.modelName = modelName;\n+        this.identifier = identifier;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public GAV getGav() {\n+        return gav;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public DecisionModelType getModelType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String get() {\n+        try (InputStream is = getInputStream()) {\n+            return load(is);\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDY5MA==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461640690", "createdAt": "2020-07-28T14:46:51Z", "author": {"login": "manstis"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.kie.api.management.GAV;\n+import org.kie.internal.decision.DecisionModelResource;\n+import org.kie.kogito.decision.DecisionModelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BaseDecisionModelResource.class);\n+\n+    protected final GAV gav;\n+    protected final String path;\n+    protected final String namespace;\n+    protected final String modelName;\n+    protected final String identifier;\n+    protected final DecisionModelType type;\n+\n+    protected BaseDecisionModelResource(GAV gav,\n+                                        String path,\n+                                        String namespace,\n+                                        String modelName,\n+                                        String identifier,\n+                                        DecisionModelType type) {\n+        this.gav = gav;\n+        this.path = path;\n+        this.namespace = namespace;\n+        this.modelName = modelName;\n+        this.identifier = identifier;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public GAV getGav() {\n+        return gav;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public DecisionModelType getModelType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String get() {\n+        try (InputStream is = getInputStream()) {\n+            return load(is);\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDgwMw=="}, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIzMDY3OnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1MTo0MlrOG4I__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Njo1N1rOG4QURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDg5Mw==", "bodyText": "Again please rethrow.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461520893", "createdAt": "2020-07-28T11:51:42Z", "author": {"login": "jiripetrlik"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.kie.api.management.GAV;\n+import org.kie.internal.decision.DecisionModelResource;\n+import org.kie.kogito.decision.DecisionModelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BaseDecisionModelResource.class);\n+\n+    protected final GAV gav;\n+    protected final String path;\n+    protected final String namespace;\n+    protected final String modelName;\n+    protected final String identifier;\n+    protected final DecisionModelType type;\n+\n+    protected BaseDecisionModelResource(GAV gav,\n+                                        String path,\n+                                        String namespace,\n+                                        String modelName,\n+                                        String identifier,\n+                                        DecisionModelType type) {\n+        this.gav = gav;\n+        this.path = path;\n+        this.namespace = namespace;\n+        this.modelName = modelName;\n+        this.identifier = identifier;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public GAV getGav() {\n+        return gav;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public DecisionModelType getModelType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String get() {\n+        try (InputStream is = getInputStream()) {\n+            return load(is);\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());\n+        }\n+        throw new RuntimeException(\"Failed to get model\");\n+    }\n+\n+    private String load(InputStream is) {\n+        StringBuilder sb = new StringBuilder();\n+        try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+             BufferedReader reader = new BufferedReader(isr)) {\n+            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                sb.append(line).append(\"\\n\");\n+            }\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDc3Mg==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461640772", "createdAt": "2020-07-28T14:46:57Z", "author": {"login": "manstis"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/BaseDecisionModelResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.kie.api.management.GAV;\n+import org.kie.internal.decision.DecisionModelResource;\n+import org.kie.kogito.decision.DecisionModelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class BaseDecisionModelResource implements DecisionModelResource {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BaseDecisionModelResource.class);\n+\n+    protected final GAV gav;\n+    protected final String path;\n+    protected final String namespace;\n+    protected final String modelName;\n+    protected final String identifier;\n+    protected final DecisionModelType type;\n+\n+    protected BaseDecisionModelResource(GAV gav,\n+                                        String path,\n+                                        String namespace,\n+                                        String modelName,\n+                                        String identifier,\n+                                        DecisionModelType type) {\n+        this.gav = gav;\n+        this.path = path;\n+        this.namespace = namespace;\n+        this.modelName = modelName;\n+        this.identifier = identifier;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public GAV getGav() {\n+        return gav;\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    @Override\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    @Override\n+    public DecisionModelType getModelType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String get() {\n+        try (InputStream is = getInputStream()) {\n+            return load(is);\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());\n+        }\n+        throw new RuntimeException(\"Failed to get model\");\n+    }\n+\n+    private String load(InputStream is) {\n+        StringBuilder sb = new StringBuilder();\n+        try (InputStreamReader isr = new java.io.InputStreamReader(is, StandardCharsets.UTF_8);\n+             BufferedReader reader = new BufferedReader(isr)) {\n+            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                sb.append(line).append(\"\\n\");\n+            }\n+        } catch (IOException ioe) {\n+            LOG.error(ioe.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDg5Mw=="}, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIzNjg1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1Mzo0NlrOG4JDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0Nzo1NFrOG4QXiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTgzMg==", "bodyText": "Please split this line to make file more readable.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461521832", "createdAt": "2020-07-28T11:53:46Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.decision;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionModelResourcesProviderCodegenTest {\n+\n+    @Test\n+    public void generateDecisionModelResourcesProvider() throws Exception {\n+\n+        final GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n+\n+        final DecisionCodegen codeGenerator = DecisionCodegen.ofPath(Paths.get(\"src/test/resources/decision/models/vacationDays\").toAbsolutePath()).withAddons(new AddonsConfig().withTracing(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTYwOQ==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461641609", "createdAt": "2020-07-28T14:47:54Z", "author": {"login": "manstis"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.decision;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionModelResourcesProviderCodegenTest {\n+\n+    @Test\n+    public void generateDecisionModelResourcesProvider() throws Exception {\n+\n+        final GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n+\n+        final DecisionCodegen codeGenerator = DecisionCodegen.ofPath(Paths.get(\"src/test/resources/decision/models/vacationDays\").toAbsolutePath()).withAddons(new AddonsConfig().withTracing(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTgzMg=="}, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTIzNzQxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTo1Mzo1NlrOG4JD9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo1MDo0M1rOG4QgXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTkwOA==", "bodyText": "Please split.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461521908", "createdAt": "2020-07-28T11:53:56Z", "author": {"login": "jiripetrlik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.decision;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionModelResourcesProviderCodegenTest {\n+\n+    @Test\n+    public void generateDecisionModelResourcesProvider() throws Exception {\n+\n+        final GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n+\n+        final DecisionCodegen codeGenerator = DecisionCodegen.ofPath(Paths.get(\"src/test/resources/decision/models/vacationDays\").toAbsolutePath()).withAddons(new AddonsConfig().withTracing(true));\n+        codeGenerator.setContext(context);\n+\n+        final List<GeneratedFile> generatedFiles = codeGenerator.generate();\n+        assertEquals(2, generatedFiles.size());\n+\n+        //A Rest endpoint is always generated per model.\n+        assertEquals(GeneratedFile.Type.REST, generatedFiles.get(0).getType());\n+        assertEquals(\"decision/VacationsResource.java\", generatedFiles.get(0).relativePath());\n+\n+        assertEquals(GeneratedFile.Type.CLASS, generatedFiles.get(1).getType());\n+        assertEquals(\"org/kie/kogito/app/DecisionModelResourcesProvider.java\", generatedFiles.get(1).relativePath());\n+\n+        final CompilationUnit compilationUnit = parse(new ByteArrayInputStream(generatedFiles.get(1).contents()));\n+\n+        final ClassOrInterfaceDeclaration classDeclaration = compilationUnit\n+                .findFirst(ClassOrInterfaceDeclaration.class)\n+                .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n+\n+        assertNotNull(classDeclaration);\n+\n+        final MethodDeclaration methodDeclaration = classDeclaration.findAll(MethodDeclaration.class, d -> d.getName().getIdentifier().equals(\"getResources\")).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0Mzg3MQ==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/621#discussion_r461643871", "createdAt": "2020-07-28T14:50:43Z", "author": {"login": "manstis"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/decision/DecisionModelResourcesProviderCodegenTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.codegen.decision;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.GeneratedFile;\n+import org.kie.kogito.codegen.GeneratorContext;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionModelResourcesProviderCodegenTest {\n+\n+    @Test\n+    public void generateDecisionModelResourcesProvider() throws Exception {\n+\n+        final GeneratorContext context = GeneratorContext.ofProperties(new Properties());\n+\n+        final DecisionCodegen codeGenerator = DecisionCodegen.ofPath(Paths.get(\"src/test/resources/decision/models/vacationDays\").toAbsolutePath()).withAddons(new AddonsConfig().withTracing(true));\n+        codeGenerator.setContext(context);\n+\n+        final List<GeneratedFile> generatedFiles = codeGenerator.generate();\n+        assertEquals(2, generatedFiles.size());\n+\n+        //A Rest endpoint is always generated per model.\n+        assertEquals(GeneratedFile.Type.REST, generatedFiles.get(0).getType());\n+        assertEquals(\"decision/VacationsResource.java\", generatedFiles.get(0).relativePath());\n+\n+        assertEquals(GeneratedFile.Type.CLASS, generatedFiles.get(1).getType());\n+        assertEquals(\"org/kie/kogito/app/DecisionModelResourcesProvider.java\", generatedFiles.get(1).relativePath());\n+\n+        final CompilationUnit compilationUnit = parse(new ByteArrayInputStream(generatedFiles.get(1).contents()));\n+\n+        final ClassOrInterfaceDeclaration classDeclaration = compilationUnit\n+                .findFirst(ClassOrInterfaceDeclaration.class)\n+                .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n+\n+        assertNotNull(classDeclaration);\n+\n+        final MethodDeclaration methodDeclaration = classDeclaration.findAll(MethodDeclaration.class, d -> d.getName().getIdentifier().equals(\"getResources\")).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTkwOA=="}, "originalCommit": {"oid": "828ae05d5c82709442e5e7b85b0e2bb6ff911024"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 27, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}