{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTQ1Njcy", "number": 784, "title": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure per\u2026", "bodyText": "\u2026sistence is used\nchanges in the InfinispanContainer are so clustering is disabled.", "createdAt": "2020-09-25T09:19:53Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784", "merged": true, "mergeCommit": {"oid": "94a6fa0f9f0e0be0504123e401ae9a660e31c8c7"}, "closed": true, "closedAt": "2020-09-30T00:05:35Z", "author": {"login": "cristianonicolai"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMSZb4AFqTQ5NjI2MDE4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNpUVRABqjM4MjAwMzMyNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MjYwMTgz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-496260183", "createdAt": "2020-09-25T09:30:23Z", "commit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozMDoyNFrOHX8NiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozMDoyNFrOHX8NiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NTgwMQ==", "bodyText": "unneeded format change,", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r494865801", "createdAt": "2020-09-25T09:30:24Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -272,41 +271,38 @@ private MethodCallExpr createProcessRuntime() {\n                 new ThisExpr(),\n                 \"createProcessRuntime\");\n     }\n-    \n+\n     private Optional<MethodDeclaration> internalConfigure(ProcessMetaData processMetaData) {\n-       \n         if (!processMetaData.getGeneratedListeners().isEmpty()) {\n             BlockStmt body = new BlockStmt();\n             MethodDeclaration internalConfigure = new MethodDeclaration()\n                     .setModifiers(Modifier.Keyword.PUBLIC)\n                     .setType(targetTypeName)\n                     .setName(\"configure\")\n-                    .setBody(body);   \n-            \n+                    .setBody(body);\n+\n             // always call super.configure\n             body.addStatement(new MethodCallExpr(new SuperExpr(), \"configure\"));\n             processMetaData.getGeneratedListeners().forEach(listener -> {\n                 ClassOrInterfaceDeclaration clazz = listener.findFirst(ClassOrInterfaceDeclaration.class).get();\n                 MethodCallExpr eventSupport = new MethodCallExpr(new NameExpr(\"services\"), \"getEventSupport\");\n                 MethodCallExpr registerListener = new MethodCallExpr(eventSupport, \"addEventListener\")\n-                    .addArgument(\n-                        new ObjectCreationExpr(\n-                            null,\n-                            new ClassOrInterfaceType(\n-                                null,\n-                                listener.getPackageDeclaration().map(pd -> pd.getName().toString()).orElse(\"\") + \".\" +clazz.getName()),\n-                            NodeList.nodeList()));\n-                \n+                        .addArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MjYwNjg5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-496260689", "createdAt": "2020-09-25T09:31:02Z", "commit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozMTowM1rOHX8PBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozMTowM1rOHX8PBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NjE4MQ==", "bodyText": "unneeded fomat change", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r494866181", "createdAt": "2020-09-25T09:31:03Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -434,57 +436,29 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n         }\n         String processInstanceFQCN = ProcessInstanceGenerator.qualifiedName(packageName, typeName);\n         cls.addExtendedType(abstractProcessType(modelTypeName))\n-        .addMember(constructorDeclaration)\n-        .addMember(getConstructorDeclaration())\n-        .addMember(createInstanceMethod(processInstanceFQCN))\n-        .addMember(createInstanceWithBusinessKeyMethod(processInstanceFQCN))\n-        .addMember(new MethodDeclaration()\n-                   .addModifier(Keyword.PUBLIC)\n-                   .setName(CREATE_MODEL)\n-                   .setType(modelTypeName)\n-                   .addAnnotation(Override.class)\n-                   .setBody(new BlockStmt()\n-                            .addStatement(new ReturnStmt(new ObjectCreationExpr(null, \n-                                                                                new ClassOrInterfaceType(null, modelTypeName), \n-                                                                                NodeList.nodeList())))))\n-        .addMember(createInstanceGenericMethod(processInstanceFQCN))\n-        .addMember(createInstanceGenericWithBusinessKeyMethod(processInstanceFQCN))\n-        .addMember(createInstanceGenericWithWorkflowInstanceMethod(processInstanceFQCN))\n-        .addMember(createReadOnlyInstanceGenericWithWorkflowInstanceMethod(processInstanceFQCN))\n-        .addMember(process(processMetaData));\n+                .addMember(constructorDeclaration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MjYzNzc1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-496263775", "createdAt": "2020-09-25T09:35:22Z", "commit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozNToyM1rOHX8YdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTozNToyM1rOHX8YdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2ODU5Nw==", "bodyText": "unneeded format change", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r494868597", "createdAt": "2020-09-25T09:35:23Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -96,12 +96,11 @@\n \n     private List<CompilationUnit> additionalClasses = new ArrayList<>();\n \n-    public ProcessGenerator(\n-            WorkflowProcess process,\n-            ProcessExecutableModelGenerator processGenerator,\n-            String typeName,\n-            String modelTypeName,\n-            String appCanonicalName) {\n+    public ProcessGenerator(WorkflowProcess process,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbe7036057cf127e363970a897d3dea4a3d581ac", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/dbe7036057cf127e363970a897d3dea4a3d581ac", "committedDate": "2020-09-25T09:18:26Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}, "afterCommit": {"oid": "e9113adf12be3bc875c3205045cd6c80b2069c32", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9113adf12be3bc875c3205045cd6c80b2069c32", "committedDate": "2020-09-25T09:48:18Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9113adf12be3bc875c3205045cd6c80b2069c32", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9113adf12be3bc875c3205045cd6c80b2069c32", "committedDate": "2020-09-25T09:48:18Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}, "afterCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/156b179308f85fcc38809fe2d17245f231878d91", "committedDate": "2020-09-25T11:37:27Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTk5OTQz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-497199943", "createdAt": "2020-09-28T05:44:20Z", "commit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo0NDoyMFrOHYvJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo1MToyN1rOHYvRQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMDM1MA==", "bodyText": "Why did we include the integration tests as part of the surefire plugin? Surefire plugin should be only for unit tests and failsafe plugin for integration tests.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495700350", "createdAt": "2020-09-28T05:44:20Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-quarkus-processes/pom.xml", "diffHunk": "@@ -130,6 +131,9 @@\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-surefire-plugin</artifactId>\n         <configuration>\n+          <includes>\n+            <include>org/kie/kogito/integrationtests/quarkus/*</include>\n+          </includes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMDQ0Mg==", "bodyText": "Same comment as above.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495700442", "createdAt": "2020-09-28T05:44:42Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-quarkus-processes/pom.xml", "diffHunk": "@@ -162,6 +166,10 @@\n             <groupId>org.apache.maven.plugins</groupId>\n             <artifactId>maven-surefire-plugin</artifactId>\n             <configuration>\n+              <includes>\n+                <include>org/kie/kogito/integrationtests/quarkus/*</include>\n+                <include>org/kie/kogito/integrationtests/quarkus/infinispan/*</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMDY2OA==", "bodyText": "If this test requires Infinispan, then it's an Integration Test and it should be renamed from BasicRestTest to BasicRestIT.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495700668", "createdAt": "2020-09-28T05:45:26Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/BasicRestTest.java", "diffHunk": "@@ -33,6 +35,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n \n @QuarkusTest\n+@QuarkusTestResource(InfinispanQuarkusTestResource.Conditional.class)\n class BasicRestTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTM3Mw==", "bodyText": "If this test requires Infinispan, then it's an Integration test and it should be renamed from InfinispanTest to InfinispanIT. Also, the name does not say what this suite is meant to. Can you rename it to a more meaningful name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701373", "createdAt": "2020-09-28T05:47:59Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-quarkus-processes/src/test/java/org/kie/kogito/integrationtests/quarkus/infinispan/InfinispanTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.quarkus.infinispan;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.quarkus.InfinispanQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(InfinispanQuarkusTestResource.class)\n+class InfinispanTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTUyNw==", "bodyText": "We should not use surefire for integration tests.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701527", "createdAt": "2020-09-28T05:48:32Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "diffHunk": "@@ -115,20 +124,13 @@\n             </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-failsafe-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>integration-test</goal>\n-                            <goal>verify</goal>\n-                        </goals>\n-                        <configuration>\n-                            <systemProperties>\n-                                <container.image.infinispan>@container.image.infinispan@</container.image.infinispan>\n-                            </systemProperties>\n-                        </configuration>\n-                    </execution>\n-                </executions>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>@version.surefire.plugin@</version>\n+                <configuration>\n+                    <includes>\n+                        <include>org/kie/kogito/integrationtests/springboot/*</include>\n+                    </includes>\n+                </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTU2OA==", "bodyText": "Same comments as above.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701568", "createdAt": "2020-09-28T05:48:44Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/pom.xml", "diffHunk": "@@ -175,16 +173,17 @@\n                 <plugins>\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n-                        <artifactId>maven-failsafe-plugin</artifactId>\n-                        <executions>\n-                            <execution>\n-                                <configuration>\n-                                    <systemProperties>\n-                                        <enable.resource.infinispan>true</enable.resource.infinispan>\n-                                    </systemProperties>\n-                                </configuration>\n-                            </execution>\n-                        </executions>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <version>@version.surefire.plugin@</version>\n+                        <configuration>\n+                            <includes>\n+                                <include>org/kie/kogito/integrationtests/springboot/*</include>\n+                                <include>org/kie/kogito/integrationtests/springboot/infinispan/*</include>\n+                            </includes>\n+                            <systemPropertyVariables>\n+                                <enable.resource.infinispan>true</enable.resource.infinispan>\n+                            </systemPropertyVariables>\n+                        </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTY1Mg==", "bodyText": "Same comments as in the quarkus version.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701652", "createdAt": "2020-09-28T05:49:00Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/infinispan/InfinispanTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot.infinispan;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;\n+import org.kie.kogito.integrationtests.springboot.BaseRestTest;\n+import org.kie.kogito.integrationtests.springboot.KogitoSpringbootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n+@ContextConfiguration(initializers = InfinispanSpringBootTestResource.class)\n+class InfinispanTest extends BaseRestTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMTcyMw==", "bodyText": "We should not use surefire for integration tests.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495701723", "createdAt": "2020-09-28T05:49:16Z", "author": {"login": "Sgitario"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-kafka-it/pom.xml", "diffHunk": "@@ -130,20 +130,8 @@\n             </plugin>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-failsafe-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>integration-test</goal>\n-                            <goal>verify</goal>\n-                        </goals>\n-                        <configuration>\n-                            <systemProperties>\n-                                <container.image.infinispan>@container.image.infinispan@</container.image.infinispan>\n-                            </systemProperties>\n-                        </configuration>\n-                    </execution>\n-                </executions>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>@version.surefire.plugin@</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMjA1NA==", "bodyText": "Format issue here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495702054", "createdAt": "2020-09-28T05:50:21Z", "author": {"login": "Sgitario"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -342,30 +339,36 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             .setName(targetTypeName)\n             .setModifiers(Modifier.Keyword.PUBLIC);\n         ProcessMetaData processMetaData = processExecutable.generate();\n-        ConstructorDeclaration constructorDeclaration =\n-                getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+        ConstructorDeclaration constructor = getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+\n+        if (addonsConfig.usePersistence()) {\n+            constructor.addParameter(ProcessInstancesFactory.class.getCanonicalName(), FACTORY);\n+        }\n+\n         MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n-        constructorDeclaration\n-            .setBody(\n-                     new BlockStmt()\n-                         .addStatement(\n-                                       new MethodCallExpr(null, \"super\")\n-                                           .addArgument(new NameExpr(APPLICATION))\n-                                           .addArgument(handlersCollection))\n-                         .addStatement(new MethodCallExpr(\"activate\")));\n+        constructor.setBody(new BlockStmt()\n+                                               .addStatement(new MethodCallExpr(null, \"super\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwMjMzOA==", "bodyText": "Really nice! This way we don't rely on the default configuration from docker.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r495702338", "createdAt": "2020-09-28T05:51:27Z", "author": {"login": "Sgitario"}, "path": "kogito-test-utils/src/main/java/org/kie/kogito/testcontainers/KogitoInfinispanContainer.java", "diffHunk": "@@ -33,16 +34,17 @@\n     public static final String NAME = \"infinispan\";\n     public static final int PORT = 11222;\n     public static final String INFINISPAN_PROPERTY = \"container.image.\" + NAME;\n-    public static final String USER = \"admin\";\n-    public static final String PASS = \"admin\";\n+    public static final String CONF_PATH = \"/opt/infinispan/server/conf/\";\n \n     public KogitoInfinispanContainer() {\n         addExposedPort(PORT);\n-        withEnv(\"USER\", USER);\n-        withEnv(\"PASS\", PASS);\n         withLogConsumer(new Slf4jLogConsumer(LOGGER));\n         waitingFor(Wait.forHttp(\"/\"));\n         setDockerImageName(System.getProperty(INFINISPAN_PROPERTY));\n+        withClasspathResourceMapping(\"testcontainers/infinispan/infinispan-local.xml\", CONF_PATH + \"infinispan-local.xml\", BindMode.READ_ONLY);\n+        withClasspathResourceMapping(\"testcontainers/infinispan/users.properties\", CONF_PATH + \"users.properties\", BindMode.READ_ONLY);\n+        withClasspathResourceMapping(\"testcontainers/infinispan/groups.properties\", CONF_PATH + \"groups.properties\", BindMode.READ_ONLY);\n+        setCommand(\"/opt/infinispan/bin/server.sh -c infinispan-local.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "156b179308f85fcc38809fe2d17245f231878d91", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/156b179308f85fcc38809fe2d17245f231878d91", "committedDate": "2020-09-25T11:37:27Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}, "afterCommit": {"oid": "1ab3b28de9efcad2d9675c3a274c27906603a99e", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ab3b28de9efcad2d9675c3a274c27906603a99e", "committedDate": "2020-09-28T06:22:27Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MjIwMzI5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-497220329", "createdAt": "2020-09-28T06:35:21Z", "commit": {"oid": "1ab3b28de9efcad2d9675c3a274c27906603a99e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ab3b28de9efcad2d9675c3a274c27906603a99e", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ab3b28de9efcad2d9675c3a274c27906603a99e", "committedDate": "2020-09-28T06:22:27Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}, "afterCommit": {"oid": "bee3eb5eb7ce64305b1c5d22862f906c395b61a7", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bee3eb5eb7ce64305b1c5d22862f906c395b61a7", "committedDate": "2020-09-29T00:24:12Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bee3eb5eb7ce64305b1c5d22862f906c395b61a7", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bee3eb5eb7ce64305b1c5d22862f906c395b61a7", "committedDate": "2020-09-29T00:24:12Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}, "afterCommit": {"oid": "7578faa62195a21d6fec108120d822d0c04934ed", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7578faa62195a21d6fec108120d822d0c04934ed", "committedDate": "2020-09-29T04:38:54Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzIyNzgy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-498322782", "createdAt": "2020-09-29T10:21:01Z", "commit": {"oid": "7578faa62195a21d6fec108120d822d0c04934ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTowMlrOHZmbKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTowMlrOHZmbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNTk5Mw==", "bodyText": "Im now wondering if it wont be better to add factory as the third parameter rather than the second, please see comment below", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r496605993", "createdAt": "2020-09-29T10:21:02Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcess.java", "diffHunk": "@@ -71,22 +71,27 @@ protected AbstractProcess(ProcessConfig config) {\n     }\n \n     protected AbstractProcess(ProcessRuntimeServiceProvider services) {\n-       this (services,Collections.emptyList());\n+        this(services, null, Collections.emptyList());\n+    }\n+\n+    protected AbstractProcess(Application app, Collection<WorkItemHandler> handlers) {\n+        this(app, null, handlers);\n     }\n     \n-    protected AbstractProcess (Application app , Collection<WorkItemHandler> handlers) {\n-        this (new ConfiguredProcessServices(app.config().process()),handlers);\n+    protected AbstractProcess(Application app, ProcessInstancesFactory factory, Collection<WorkItemHandler> handlers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7578faa62195a21d6fec108120d822d0c04934ed"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzIzMzg1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#pullrequestreview-498323385", "createdAt": "2020-09-29T10:21:47Z", "commit": {"oid": "7578faa62195a21d6fec108120d822d0c04934ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTo0N1rOHZmc3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTo0N1rOHZmc3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjQzMQ==", "bodyText": "If we put factory as third parameter of super constructor, we can skip the null and just do not add the argument, wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/784#discussion_r496606431", "createdAt": "2020-09-29T10:21:47Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessGenerator.java", "diffHunk": "@@ -342,30 +339,36 @@ public ClassOrInterfaceDeclaration classDeclaration() {\n             .setName(targetTypeName)\n             .setModifiers(Modifier.Keyword.PUBLIC);\n         ProcessMetaData processMetaData = processExecutable.generate();\n-        ConstructorDeclaration constructorDeclaration =\n-                getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+        ConstructorDeclaration constructor = getConstructorDeclaration().addParameter(appCanonicalName, APPLICATION);\n+\n+        if (addonsConfig.usePersistence()) {\n+            constructor.addParameter(ProcessInstancesFactory.class.getCanonicalName(), FACTORY);\n+        }\n+\n         MethodCallExpr handlersCollection = new MethodCallExpr(new NameExpr(\"java.util.Arrays\"), \"asList\");\n-        constructorDeclaration\n-            .setBody(\n-                     new BlockStmt()\n-                         .addStatement(\n-                                       new MethodCallExpr(null, \"super\")\n-                                           .addArgument(new NameExpr(APPLICATION))\n-                                           .addArgument(handlersCollection))\n-                         .addStatement(new MethodCallExpr(\"activate\")));\n+        constructor.setBody(new BlockStmt()\n+                                    .addStatement(new MethodCallExpr(null, \"super\")\n+                                                          .addArgument(new NameExpr(APPLICATION))\n+                                                          .addArgument(new NameExpr(addonsConfig.usePersistence() ? FACTORY : \"null\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7578faa62195a21d6fec108120d822d0c04934ed"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "committedDate": "2020-09-29T14:46:14Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7578faa62195a21d6fec108120d822d0c04934ed", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7578faa62195a21d6fec108120d822d0c04934ed", "committedDate": "2020-09-29T04:38:54Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}, "afterCommit": {"oid": "5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5e4e2b1c8999e146042c8e3e6ad5e43043168eca", "committedDate": "2020-09-29T14:46:14Z", "message": "KOGITO-3393 Inject ProcessInstanceFactory and add tests to ensure persistence is used"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3976, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}