{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDYxMTMy", "number": 587, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMDozNlrOEJCnbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMDozOVrOEKR_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTE1NTAxOnYy", "diffSide": "RIGHT", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODowMDozNlrOGpXfkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowNzo1M1rOGpZi_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTcxNQ==", "bodyText": "What is the reason of this change? How this string is used?\nSide note, are you sure type cannot be null?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r446029715", "createdAt": "2020-06-26T08:00:36Z", "author": {"login": "danielezonca"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -95,10 +95,11 @@ public static String generateDomainSpecificDMNDashboard(String templatePath, Str\n                     jgrafana.addPanel(PanelType.GRAPH,\n                                       \"Decision \" + decision.getName(),\n                                       String.format(\"%s_dmn_result{endpoint = \\\"%s\\\", decision = \\\"%s\\\"}\",\n-                                                    type,\n+                                                    type.toString().replace(\" \", \"_\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693966b80a00a841ed5ebc92e95feacb09a7145e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MjQxOA==", "bodyText": "@danielezonca dmn type might contain spaces (for example the type \"time and date\"), and in the PrompQL query of grafana spaces are not allowed. So by default we have to replace the spaces with something else", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r446062418", "createdAt": "2020-06-26T09:06:02Z", "author": {"login": "r00ta"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -95,10 +95,11 @@ public static String generateDomainSpecificDMNDashboard(String templatePath, Str\n                     jgrafana.addPanel(PanelType.GRAPH,\n                                       \"Decision \" + decision.getName(),\n                                       String.format(\"%s_dmn_result{endpoint = \\\"%s\\\", decision = \\\"%s\\\"}\",\n-                                                    type,\n+                                                    type.toString().replace(\" \", \"_\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTcxNQ=="}, "originalCommit": {"oid": "693966b80a00a841ed5ebc92e95feacb09a7145e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzM1Nw==", "bodyText": "For your other question, the check on null is already done few lines above this one", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r446063357", "createdAt": "2020-06-26T09:07:53Z", "author": {"login": "r00ta"}, "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -95,10 +95,11 @@ public static String generateDomainSpecificDMNDashboard(String templatePath, Str\n                     jgrafana.addPanel(PanelType.GRAPH,\n                                       \"Decision \" + decision.getName(),\n                                       String.format(\"%s_dmn_result{endpoint = \\\"%s\\\", decision = \\\"%s\\\"}\",\n-                                                    type,\n+                                                    type.toString().replace(\" \", \"_\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTcxNQ=="}, "originalCommit": {"oid": "693966b80a00a841ed5ebc92e95feacb09a7145e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQxNTg4OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0MzozM1rOGq0iHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzoxNToxN1rOGrZrUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDA3OQ==", "bodyText": "Please use lower letter at the beginning of the method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447554079", "createdAt": "2020-06-30T09:43:33Z", "author": {"login": "jiripetrlik"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.LocalDateTimeHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LocalDateTimeHandlerTest extends AbstractQuantilesTest<LocalDateTimeHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new LocalDateTimeHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenLocalDateTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a654ceeea128d84f5c69af6927d6a2b89d1122"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NDI0Mw==", "bodyText": "Sorry, old C# habits die hard :) Renamed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447694243", "createdAt": "2020-06-30T13:45:08Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.LocalDateTimeHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LocalDateTimeHandlerTest extends AbstractQuantilesTest<LocalDateTimeHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new LocalDateTimeHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenLocalDateTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDA3OQ=="}, "originalCommit": {"oid": "e0a654ceeea128d84f5c69af6927d6a2b89d1122"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2MjY0MA==", "bodyText": ":-) Thank you!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r448162640", "createdAt": "2020-07-01T07:15:17Z", "author": {"login": "jiripetrlik"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalDateTimeHandlerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.LocalDateTimeHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LocalDateTimeHandlerTest extends AbstractQuantilesTest<LocalDateTimeHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new LocalDateTimeHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenLocalDateTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDA3OQ=="}, "originalCommit": {"oid": "e0a654ceeea128d84f5c69af6927d6a2b89d1122"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQxNjM0OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0Mzo0MVrOGq0icQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0Mzo0MVrOGq0icQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDE2MQ==", "bodyText": "Please use lower letter at the beginning of the method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447554161", "createdAt": "2020-06-30T09:43:41Z", "author": {"login": "jiripetrlik"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/LocalTimeHandlerTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.LocalTime;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.LocalTimeHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class LocalTimeHandlerTest extends AbstractQuantilesTest<LocalTimeHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new LocalTimeHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenLocalTimeMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a654ceeea128d84f5c69af6927d6a2b89d1122"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQxNjc5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0Mzo0OFrOGq0iuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo0Mzo0OFrOGq0iuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NDIzMg==", "bodyText": "Please use lower letter at the beginning of the method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447554232", "createdAt": "2020-06-30T09:43:48Z", "author": {"login": "jiripetrlik"}, "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/kogito/monitoring/integration/YearsAndMonthsDurationHandlerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.integration;\n+\n+import java.time.Period;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.monitoring.system.metrics.dmnhandlers.YearsAndMonthsDurationHandler;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class YearsAndMonthsDurationHandlerTest extends AbstractQuantilesTest<YearsAndMonthsDurationHandler> {\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = new CollectorRegistry();\n+        handler = new YearsAndMonthsDurationHandler(\"hello\", registry);\n+    }\n+\n+    @AfterEach\n+    public void destroy() {\n+        registry.clear();\n+    }\n+\n+    @Test\n+    public void GivenYearsAndMonthsMetrics_WhenMetricsAreStored_ThenTheQuantilesAreCorrect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a654ceeea128d84f5c69af6927d6a2b89d1122"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjE1OTc5OnYy", "diffSide": "RIGHT", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMDozOVrOGrO5xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoxNDoyN1rOGrjWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjExOQ==", "bodyText": "What about use an interface instead with initializeDefaultSummary as default method?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r447986119", "createdAt": "2020-06-30T21:20:39Z", "author": {"login": "danielezonca"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.system.metrics.dmnhandlers;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Summary;\n+\n+public abstract class TypeHandlerWithSummary<T> implements TypeHandler<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b651a433ac2e0cf344de01b6cb8d7064acff3d4a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMTAzMQ==", "bodyText": "Agreed, I've refactored it with an interface", "url": "https://github.com/kiegroup/kogito-runtimes/pull/587#discussion_r448321031", "createdAt": "2020-07-01T12:14:27Z", "author": {"login": "r00ta"}, "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/kogito/monitoring/system/metrics/dmnhandlers/TypeHandlerWithSummary.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.monitoring.system.metrics.dmnhandlers;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Summary;\n+\n+public abstract class TypeHandlerWithSummary<T> implements TypeHandler<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NjExOQ=="}, "originalCommit": {"oid": "b651a433ac2e0cf344de01b6cb8d7064acff3d4a"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4994, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}