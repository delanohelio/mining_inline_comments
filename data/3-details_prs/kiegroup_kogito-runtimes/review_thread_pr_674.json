{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjUzNzEz", "number": 674, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0NzozN1rOEVTJEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0OToyMFrOEWPqkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY5MTY5OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0NzozN1rOG7-LzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozMzoyNFrOG9YGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzk5Ng==", "bodyText": "OutputModel", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465537996", "createdAt": "2020-08-05T07:47:37Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can express its internal information as a Map\n+ */\n+public interface MapOutput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0Nzg1Ng==", "bodyText": "That was the original name, but then I realize that this interface is just adding a toMap method to any class that implements it, model or not, so it is far more generic and I think clear about the purpose.\nI have to update the comment though, wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465547856", "createdAt": "2020-08-05T08:05:04Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can express its internal information as a Map\n+ */\n+public interface MapOutput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzk5Ng=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxODk2OQ==", "bodyText": "documentation updated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465618969", "createdAt": "2020-08-05T10:10:12Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can express its internal information as a Map\n+ */\n+public interface MapOutput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzk5Ng=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjQzMg==", "bodyText": "it really boils down to whether this method will be provided by anything that exposes toMap, or only by Output models or Models. Anyway we can always update", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465732432", "createdAt": "2020-08-05T13:38:02Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can express its internal information as a Map\n+ */\n+public interface MapOutput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzk5Ng=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxMTIyNQ==", "bodyText": "Here it sounds to me like a class implementing this interface can be an output of a map, not that it provides this method. I would suggest something like MapOutputAware or similar, but we can always update as this is just a name...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467011225", "createdAt": "2020-08-07T12:33:24Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapOutput.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can express its internal information as a Map\n+ */\n+public interface MapOutput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzk5Ng=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY5MjYzOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/MapInput.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0Nzo0OVrOG7-MUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDoxMDoyMVrOG8DIdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODEyOQ==", "bodyText": "I'd propose to call it InputModel", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465538129", "createdAt": "2020-08-05T07:47:49Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can be populated from a Map\n+ */\n+public interface MapInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0Nzk2Ng==", "bodyText": "Same rationale than in previous comment", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465547966", "createdAt": "2020-08-05T08:05:17Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can be populated from a Map\n+ */\n+public interface MapInput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODEyOQ=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYxOTA2Mw==", "bodyText": "documentation updated", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465619063", "createdAt": "2020-08-05T10:10:21Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/MapInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito;\n+\n+import java.util.Map;\n+\n+/**\n+ * A model which can be populated from a Map\n+ */\n+public interface MapInput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODEyOQ=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY5MzM4OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0ODowNVrOG7-MyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxNjoyOFrOG7_Kwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODI0OQ==", "bodyText": "I am not sure I like making all these methods fluent. The reason is that if we wanted at some point in the future to make any of those to return a value then we won't be able. We can make the code just as concise by using { pi.start(); pi.something() } etc. (notice the semicolon)\nI know my original bug report included some fluent interfaces :P but not sure I want it for all. I am not sure I want it for some either at this point, because it would make the API asymmetrical.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465538249", "createdAt": "2020-08-05T07:48:05Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -47,30 +47,30 @@\n     /**\n      * Starts process instance\n      */\n-    void start();\n+    ProcessInstance<T> start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NDExNA==", "bodyText": "Hmmmmmm,\nTwo statements in the same line is not a good idea, too confusing.\nI agree on rationale to not make start methods fluent, but then we have to assume a longer generated code (which is probably fine anyway)\nRegarding methods in processIntances that I change but are not start or abort, I think they can be fluent without compromising api consistency. lets analyze them individually:\n\nupdateVariables can return updated variables\ncheckError only makes sense if it returns ProcessInstance, if not, the  logic inside it (checking if there is any eeor)  should be make part of start method itself", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465554114", "createdAt": "2020-08-05T08:16:28Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -47,30 +47,30 @@\n     /**\n      * Starts process instance\n      */\n-    void start();\n+    ProcessInstance<T> start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzODI0OQ=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcwNjE2OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MTo0MlrOG7-Usw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxNjo1MlrOG7_Lyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDI3NQ==", "bodyText": "I don't like the ternary operator here\nwhat if we let startFromNode accept null => invoke start() internally?.\nlet's put checkError() on its line, and make it void for now (see comment above)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465540275", "createdAt": "2020-08-05T07:51:42Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NDM3OQ==", "bodyText": "Agree, except for checkError part (see coment abovce)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465554379", "createdAt": "2020-08-05T08:16:52Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDI3NQ=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcwODMxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MjoxNlrOG7-WAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MjoxNlrOG7-WAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDYxMQ==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465540611", "createdAt": "2020-08-05T07:52:16Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();\n+        }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(\n+                                                                                                                                                                                                                      null)));\n     }\n-    \n+\n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.updateVariables(resource);\n-                    return mapOutput(new $Type$Output(), pi.variables());\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.updateVariables(resource).toOutput()).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcwODgxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MjoyNVrOG7-WVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MjoyNVrOG7-WVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDY5Mg==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465540692", "createdAt": "2020-08-05T07:52:25Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -37,134 +38,75 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n+    @Consumes(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n+            String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();\n+        }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxMTIyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MzowOVrOG7-X4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MzowOVrOG7-X4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTA5MQ==", "bodyText": "same comment about ternary operator and making checkError() void", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541091", "createdAt": "2020-08-05T07:53:09Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -44,29 +49,19 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n     public $Type$Output createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-            ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n             String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-\n-            if (startFromNode != null) {\n-                pi.startFrom(startFromNode);\n-            } else {\n-                pi.start();\n-            }\n-            return getModel(pi);\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxMTc0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MzoxOFrOG7-YNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MzoxOFrOG7-YNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTE3Mw==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541173", "createdAt": "2020-08-05T07:53:18Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -76,29 +71,23 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxMTk0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MzoyMVrOG7-YVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MzoyMVrOG7-YVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTIwNA==", "bodyText": "please format this on more lines -- even it's a oneliner", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541204", "createdAt": "2020-08-05T07:53:21Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -76,29 +71,23 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.abort().variables().toOutput()).orElse(null));\n     }\n \n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.updateVariables(resource);\n-            return mapOutput(new $Type$Output(), pi.variables());\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.updateVariables(resource).toOutput()).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxMzAwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1Mzo0M1rOG7-ZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxODoyNlrOG7_PRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTM5Mg==", "bodyText": "check the formatting here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541392", "createdAt": "2020-08-05T07:53:43Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -76,9 +78,10 @@\n                                   @QueryParam(\"phase\") @DefaultValue(\"abort\") final String phase,\n                                   @QueryParam(\"user\") final String user,\n                                   @QueryParam(\"group\") final List<String> groups) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withoutModel(phase, policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NTI2OA==", "bodyText": "see comment above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465555268", "createdAt": "2020-08-05T08:18:26Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -76,9 +78,10 @@\n                                   @QueryParam(\"phase\") @DefaultValue(\"abort\") final String phase,\n                                   @QueryParam(\"user\") final String user,\n                                   @QueryParam(\"group\") final List<String> groups) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withoutModel(phase, policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTM5Mg=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxNDI1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDowM1rOG7-ZyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDowM1rOG7-ZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTU3Ng==", "bodyText": "same comment on ternary + void checkError()", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541576", "createdAt": "2020-08-05T07:54:03Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceTemplate.java", "diffHunk": "@@ -51,100 +58,65 @@\n \n     Application application;\n \n-    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes =\n-            MediaType.APPLICATION_JSON_VALUE)\n+    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)\n     public $Type$Output createResource_$name$(@RequestHeader HttpHeaders httpHeaders,\n                                               @RequestParam(value = \"businessKey\", required = false) String businessKey,\n                                               @RequestBody $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-            ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            $Type$Input inputModel = resource != null ? resource : new $Type$Input();\n+            ProcessInstance<$Type$> pi = process.createInstance(businessKey, inputModel.toModel());\n             String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-\n-            if (startFromNode != null) {\n-                pi.startFrom(startFromNode);\n-            } else {\n-                pi.start();\n-            }\n-            return getModel(pi);\n+            return (startFromNode != null ? pi.startFrom(startFromNode) : pi.start()).checkError().variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxNTUxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDoyNFrOG7-aiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxODo0MVrOG7_PyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTc2OA==", "bodyText": "add newline before .body", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541768", "createdAt": "2020-08-05T07:54:24Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -18,41 +18,45 @@\n public class $Type$Resource {\n \n     @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n-    public org.springframework.http.ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n         return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n                 java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n                 if (task.isPresent()) {\n-                    return javax.ws.rs.core.Response.ok(getModel(pi))\n-                                                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n-                                                    .build();\n+                    return ResponseEntity.status(HttpStatus.OK)\n+                                         .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\").body(pi.variables().toOutput())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NTQwMQ==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465555401", "createdAt": "2020-08-05T08:18:41Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -18,41 +18,45 @@\n public class $Type$Resource {\n \n     @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n-    public org.springframework.http.ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n         return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n                 java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n                 if (task.isPresent()) {\n-                    return javax.ws.rs.core.Response.ok(getModel(pi))\n-                                                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n-                                                    .build();\n+                    return ResponseEntity.status(HttpStatus.OK)\n+                                         .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\").body(pi.variables().toOutput())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTc2OA=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxNTg5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDozNFrOG7-a0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxODo0N1rOG7_P9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTg0MA==", "bodyText": "check formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541840", "createdAt": "2020-08-05T07:54:34Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -18,41 +18,45 @@\n public class $Type$Resource {\n \n     @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n-    public org.springframework.http.ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n         return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n                 java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n                 if (task.isPresent()) {\n-                    return javax.ws.rs.core.Response.ok(getModel(pi))\n-                                                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n-                                                    .build();\n+                    return ResponseEntity.status(HttpStatus.OK)\n+                                         .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\").body(pi.variables().toOutput())\n+                                         .build();\n                 }\n-                return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.NOT_FOUND).build();\n+                return ResponseEntity.notFound().build();\n             }).orElse(null);\n         });\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n     public $Type$Output completeTask(@PathVariable(\"id\") final String id,\n                                      @PathVariable(\"workItemId\") final String workItemId,\n                                      @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n                                      @RequestParam(value = \"user\", required = false) final String user,\n                                      @RequestParam(value = \"group\", required = false) final List<String> groups,\n                                      @RequestBody final $TaskOutput$ model) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withModel(phase, model.toMap(), policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NTQ0NQ==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465555445", "createdAt": "2020-08-05T08:18:47Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -18,41 +18,45 @@\n public class $Type$Resource {\n \n     @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n-    public org.springframework.http.ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public ResponseEntity<$Type$Output> signal(@PathVariable(\"id\") final String id) {\n         return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n                 java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n                 if (task.isPresent()) {\n-                    return javax.ws.rs.core.Response.ok(getModel(pi))\n-                                                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n-                                                    .build();\n+                    return ResponseEntity.status(HttpStatus.OK)\n+                                         .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\").body(pi.variables().toOutput())\n+                                         .build();\n                 }\n-                return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.NOT_FOUND).build();\n+                return ResponseEntity.notFound().build();\n             }).orElse(null);\n         });\n     }\n \n     @PostMapping(value = \"/{id}/$taskName$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n-            consumes = MediaType.APPLICATION_JSON_VALUE)\n+                 consumes = MediaType.APPLICATION_JSON_VALUE)\n     public $Type$Output completeTask(@PathVariable(\"id\") final String id,\n                                      @PathVariable(\"workItemId\") final String workItemId,\n                                      @RequestParam(value = \"phase\", defaultValue = \"complete\") final String phase,\n                                      @RequestParam(value = \"user\", required = false) final String user,\n                                      @RequestParam(value = \"group\", required = false) final List<String> groups,\n                                      @RequestBody final $TaskOutput$ model) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withModel(phase, model.toMap(), policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTg0MA=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcxNjUzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1NDo0MlrOG7-bIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoxODo1NFrOG7_QLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTkyMw==", "bodyText": "check formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465541923", "createdAt": "2020-08-05T07:54:42Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -71,9 +75,10 @@ public JsonSchema getSchemaAndPhases(@PathParam(\"id\") final String id, @PathPara\n                                   @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n                                   @RequestParam(value = \"user\", required = false) final String user,\n                                   @RequestParam(value = \"group\", required = false) final List<String> groups) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withoutModel(phase, policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NTUwMw==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r465555503", "createdAt": "2020-08-05T08:18:54Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -71,9 +75,10 @@ public JsonSchema getSchemaAndPhases(@PathParam(\"id\") final String id, @PathPara\n                                   @RequestParam(value = \"phase\", defaultValue = \"abort\") final String phase,\n                                   @RequestParam(value = \"user\", required = false) final String user,\n                                   @RequestParam(value = \"group\", required = false) final List<String> groups) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.transitionWorkItem(workItemId, org.jbpm.process.instance.impl.humantask.HumanTaskTransition.withoutModel(phase, policies(user, groups)));\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> pi.transitionWorkItem(workItemId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MTkyMw=="}, "originalCommit": {"oid": "5effce28561ce34a084c989b6624d51e789fd8c9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEyOTk2OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDoxNVrOG9YTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDoxNVrOG9YTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDQ0Mg==", "bodyText": "This can be on one line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467014442", "createdAt": "2020-08-07T12:40:15Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(), inputVars, true,\n+                                 \"/class-templates/ModelNoIDTemplate.java\", new AddMethodConsumer(\"toModel\", modelName,\n+                                                                                                  inputVars, false));\n     }\n \n     public ModelMetaData generateOutputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId()) + \"Output\";\n-\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofOutput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true);\n+                                 VariableDeclarations.ofOutput(getVariableScope(process)), true);\n+    }\n+\n+    private static VariableScope getVariableScope(WorkflowProcess process) {\n+        return (VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(\n+                                                                                           VariableScope.VARIABLE_SCOPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE0MDMyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MzozOFrOG9YZew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNjoxNVrOG9ef8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNjA1OQ==", "bodyText": "Maybe do the same with generateModel, it is much easier to read.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467016059", "createdAt": "2020-08-07T12:43:38Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNjAxOA==", "bodyText": "Here Im using inputVars local variable because it is used as parameter twice and I do not want to generate two instances.\nIn generateModel Im reusing the scope.\nI changed the format to make it more readable, hopefully....", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467116018", "createdAt": "2020-08-07T15:36:15Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNjA1OQ=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIxNjkzOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/humantask/HumanTaskTransition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowNjowOFrOG9ZG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxOTo0MFrOG9f8kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNzY5Mg==", "bodyText": "Do we need here a type parameter? I think we would be fine with just MapOutput data, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467027692", "createdAt": "2020-08-07T13:06:08Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/humantask/HumanTaskTransition.java", "diffHunk": "@@ -36,8 +37,8 @@\n     private Map<String, Object> data;\n     private List<Policy<?>> policies = new ArrayList<>();\n     \n-    public static HumanTaskTransition withModel(String phase, Map<String, Object> data, Policy<?>... policies) {\n-        return new HumanTaskTransition(phase, data, policies);\n+    public static <T extends MapOutput> HumanTaskTransition withModel(String phase, T data, Policy<?>... policies) {\n+        return new HumanTaskTransition(phase, data.toMap(), policies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzOTcyOQ==", "bodyText": "I think it was cooler that way, but you are right, uneeded and more readeable with MapOutput", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467139729", "createdAt": "2020-08-07T16:19:40Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/humantask/HumanTaskTransition.java", "diffHunk": "@@ -36,8 +37,8 @@\n     private Map<String, Object> data;\n     private List<Policy<?>> policies = new ArrayList<>();\n     \n-    public static HumanTaskTransition withModel(String phase, Map<String, Object> data, Policy<?>... policies) {\n-        return new HumanTaskTransition(phase, data, policies);\n+    public static <T extends MapOutput> HumanTaskTransition withModel(String phase, T data, Policy<?>... policies) {\n+        return new HumanTaskTransition(phase, data.toMap(), policies);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNzY5Mg=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzI2Mzk0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoxOTo1M1rOG9ZkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxNTozM1rOG9f0Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTEzOQ==", "bodyText": "Please format this, ideally as before.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467035139", "createdAt": "2020-08-07T13:19:53Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNjM2Mw==", "bodyText": "Ill try, but the code style is tricky in that line", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467116363", "createdAt": "2020-08-07T15:36:49Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTEzOQ=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNzYxMA==", "bodyText": "After trying during a while, I formatted it manually, hope the result is more read friendly", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467137610", "createdAt": "2020-08-07T16:15:33Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTEzOQ=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzI2NjUxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoyMDozOFrOG9Zlkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoyMDozOFrOG9Zlkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNTUzOA==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467035538", "createdAt": "2020-08-07T13:20:38Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id, ProcessInstanceReadMode.READ_ONLY)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> {\n+                                                                                                           pi.abort();\n+                                                                                                           return pi.variables()\n+                                                                                                                    .toOutput();\n+                                                                                                       }).orElse(\n+                                                                                                                 null)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzI3NDgyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoyMjo1OFrOG9ZqpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxMzozMFrOG9fwEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNjgzNg==", "bodyText": "Some methods here have each argument on a separate line, some of them don't. Can we maybe unify it? I think all can fit on one line here.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467036836", "createdAt": "2020-08-07T13:22:58Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id, ProcessInstanceReadMode.READ_ONLY)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> {\n+                                                                                                           pi.abort();\n+                                                                                                           return pi.variables()\n+                                                                                                                    .toOutput();\n+                                                                                                       }).orElse(\n+                                                                                                                 null)));\n     }\n-    \n+\n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.updateVariables(resource);\n-                    return mapOutput(new $Type$Output(), pi.variables());\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> pi.updateVariables(resource)\n+                                                                                                                    .toOutput())\n+                                                                                                       .orElse(null)));\n     }\n-    \n+\n     @GET()\n     @Path(\"/{id}/tasks\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id, @QueryParam(\"user\") final String user, @QueryParam(\"group\") final List<String> groups) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> pi.workItems(policies(user, groups)))\n-                    .map(l -> l.stream().collect(Collectors.toMap(WorkItem::getId, WorkItem::getName)))\n-                    .orElse(null);\n-        });\n-    }\n-    \n-    protected $Type$Output getModel(ProcessInstance<$Type$> pi) {\n-        if (pi.status() == ProcessInstance.STATE_ERROR && pi.error().isPresent()) {\n-            throw new ProcessInstanceExecutionException(pi.id(), pi.error().get().failedNodeId(), pi.error().get().errorMessage());\n-        }\n-        \n-        return mapOutput(new $Type$Output(), pi.variables());\n+    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id,\n+                                                                @QueryParam(\"user\") final String user,\n+                                                                @QueryParam(\"group\") final List<String> groups) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzg1OQ==", "bodyText": "Ill review that, but any change in format from previous version is probably performed by the IDE automatically according to the code style globally defined for KIE group", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467117859", "createdAt": "2020-08-07T15:39:38Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id, ProcessInstanceReadMode.READ_ONLY)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> {\n+                                                                                                           pi.abort();\n+                                                                                                           return pi.variables()\n+                                                                                                                    .toOutput();\n+                                                                                                       }).orElse(\n+                                                                                                                 null)));\n     }\n-    \n+\n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.updateVariables(resource);\n-                    return mapOutput(new $Type$Output(), pi.variables());\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> pi.updateVariables(resource)\n+                                                                                                                    .toOutput())\n+                                                                                                       .orElse(null)));\n     }\n-    \n+\n     @GET()\n     @Path(\"/{id}/tasks\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id, @QueryParam(\"user\") final String user, @QueryParam(\"group\") final List<String> groups) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> pi.workItems(policies(user, groups)))\n-                    .map(l -> l.stream().collect(Collectors.toMap(WorkItem::getId, WorkItem::getName)))\n-                    .orElse(null);\n-        });\n-    }\n-    \n-    protected $Type$Output getModel(ProcessInstance<$Type$> pi) {\n-        if (pi.status() == ProcessInstance.STATE_ERROR && pi.error().isPresent()) {\n-            throw new ProcessInstanceExecutionException(pi.id(), pi.error().get().failedNodeId(), pi.error().get().errorMessage());\n-        }\n-        \n-        return mapOutput(new $Type$Output(), pi.variables());\n+    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id,\n+                                                                @QueryParam(\"user\") final String user,\n+                                                                @QueryParam(\"group\") final List<String> groups) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNjgzNg=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNjUyOQ==", "bodyText": "I think all methods that have arguments on separate line exceeds the 120 limit, so I guess it is fine to have them splitted and the ones that does not exceed the limit kept on one line.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467136529", "createdAt": "2020-08-07T16:13:30Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/ReactiveRestResourceTemplate.java", "diffHunk": "@@ -38,134 +39,108 @@\n public class $Type$ReactiveResource {\n \n     Process<$Type$> process;\n-    \n+\n     Application application;\n \n     @POST()\n     @Produces(MediaType.APPLICATION_JSON)\n-    @Consumes(MediaType.APPLICATION_JSON)    \n-    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders, @QueryParam(\"businessKey\") String businessKey, $Type$Input resource) {\n-        if (resource == null) {\n-            resource = new $Type$Input();\n-        }\n-        final $Type$Input value = resource;\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.createInstance(businessKey, mapInput(value, new $Type$()));\n-                String startFromNode = httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n-                \n-                if (startFromNode != null) {\n-                    pi.startFrom(startFromNode);\n-                } else {\n-                    pi.start();\n-                }\n-                return getModel(pi);\n-            });\n-        });\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<$Type$Output> createResource_$name$(@Context HttpHeaders httpHeaders,\n+                                                               @QueryParam(\"businessKey\") String businessKey,\n+                                                               $Type$Input resource) {\n+        return CompletableFuture.supplyAsync(\n+                                             () -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> {\n+                                                                                              $Type$Input inputModel =\n+                                                                                                      resource != null\n+                                                                                                              ? resource\n+                                                                                                              : new $Type$Input();\n+                                                                                              ProcessInstance<$Type$> pi =\n+                                                                                                      process.createInstance(businessKey,\n+                                                                                                                             inputModel.toModel());\n+                                                                                              String startFromNode =\n+                                                                                                      httpHeaders.getHeaderString(\"X-KOGITO-StartFromNode\");\n+                                                                                              if (startFromNode != null) {\n+                                                                                                  pi.startFrom(startFromNode);\n+                                                                                              } else {\n+                                                                                                  pi.start();\n+                                                                                              }\n+                                                                                              return pi.checkError()\n+                                                                                                       .variables()\n+                                                                                                       .toOutput();\n+                                                                                          }));\n     }\n \n     @GET()\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<List<$Type$Output>> getResources_$name$() {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances().values().stream()\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                 .collect(Collectors.toList());\n-        });   \n+        return CompletableFuture.supplyAsync(() -> process.instances().values().stream()\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .collect(Collectors.toList()));\n     }\n \n     @GET()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> getResource_$name$(@PathParam(\"id\") String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n-                    .orElse(null);\n-        });\n+        return CompletableFuture.supplyAsync(() -> process.instances()\n+                                                          .findById(id, ProcessInstanceReadMode.READ_ONLY)\n+                                                          .map(pi -> pi.variables().toOutput())\n+                                                          .orElse(null));\n     }\n-    \n+\n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.abort();\n-                    return getModel(pi);\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                                                          application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> {\n+                                                                                                           pi.abort();\n+                                                                                                           return pi.variables()\n+                                                                                                                    .toOutput();\n+                                                                                                       }).orElse(\n+                                                                                                                 null)));\n     }\n-    \n+\n     @POST()\n     @Path(\"/{id}\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public CompletionStage<$Type$Output> updateModel_$name$(@PathParam(\"id\") String id, $Type$ resource) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n-                ProcessInstance<$Type$> pi = process.instances()\n-                        .findById(id)\n-                        .orElse(null);\n-                if (pi == null) {\n-                    return null;\n-                } else {\n-                    pi.updateVariables(resource);\n-                    return mapOutput(new $Type$Output(), pi.variables());\n-                }\n-            });\n-        });\n+        return CompletableFuture.supplyAsync(() -> UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(),\n+                                                                                          () -> process.instances()\n+                                                                                                       .findById(id)\n+                                                                                                       .map(pi -> pi.updateVariables(resource)\n+                                                                                                                    .toOutput())\n+                                                                                                       .orElse(null)));\n     }\n-    \n+\n     @GET()\n     @Path(\"/{id}/tasks\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id, @QueryParam(\"user\") final String user, @QueryParam(\"group\") final List<String> groups) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            return process.instances()\n-                    .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                    .map(pi -> pi.workItems(policies(user, groups)))\n-                    .map(l -> l.stream().collect(Collectors.toMap(WorkItem::getId, WorkItem::getName)))\n-                    .orElse(null);\n-        });\n-    }\n-    \n-    protected $Type$Output getModel(ProcessInstance<$Type$> pi) {\n-        if (pi.status() == ProcessInstance.STATE_ERROR && pi.error().isPresent()) {\n-            throw new ProcessInstanceExecutionException(pi.id(), pi.error().get().failedNodeId(), pi.error().get().errorMessage());\n-        }\n-        \n-        return mapOutput(new $Type$Output(), pi.variables());\n+    public CompletionStage<Map<String, String>> getTasks_$name$(@PathParam(\"id\") String id,\n+                                                                @QueryParam(\"user\") final String user,\n+                                                                @QueryParam(\"group\") final List<String> groups) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzNjgzNg=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzQ3MjY1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxNDo0OFrOG9bjfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozOTo0OVrOG9enhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2Nzc3Mw==", "bodyText": "Missing checkError().", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467067773", "createdAt": "2020-08-07T14:14:48Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "diffHunk": "@@ -32,10 +32,10 @@\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output signal(@PathParam(\"id\") final String id, final $signalType$ data) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$signalName$\", data));\n-                return getModel(pi);\n+                return pi.variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzk1OA==", "bodyText": "good catch", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467117958", "createdAt": "2020-08-07T15:39:49Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "diffHunk": "@@ -32,10 +32,10 @@\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output signal(@PathParam(\"id\") final String id, final $signalType$ data) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+        return UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n             return process.instances().findById(id).map(pi -> {\n                 pi.send(Sig.of(\"$signalName$\", data));\n-                return getModel(pi);\n+                return pi.variables().toOutput();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2Nzc3Mw=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzQ3NzUwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxNTo1NlrOG9bmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MDowMVrOG9eoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2ODQ5Nw==", "bodyText": "Probably missing checkError() also here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467068497", "createdAt": "2020-08-07T14:15:56Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -77,68 +79,61 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                      application.unitOfWorkManager(),\n+                                                      () -> process\n+                                                                   .instances()\n+                                                                   .findById(id)\n+                                                                   .map(pi -> {\n+                                                                       pi.abort();\n+                                                                       return pi.variables().toOutput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExODA4Nw==", "bodyText": "hmm, it will not harm, added", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467118087", "createdAt": "2020-08-07T15:40:01Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceTemplate.java", "diffHunk": "@@ -77,68 +79,61 @@\n     public $Type$Output getResource_$name$(@PathParam(\"id\") String id) {\n         return process.instances()\n                       .findById(id, ProcessInstanceReadMode.READ_ONLY)\n-                      .map(pi -> mapOutput(new $Type$Output(), pi.variables()))\n+                      .map(pi -> pi.variables().toOutput())\n                       .orElse(null);\n     }\n \n     @DELETE()\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$Output deleteResource_$name$(@PathParam(\"id\") final String id) {\n-        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> process.instances().findById(id).map(pi -> {\n-            pi.abort();\n-            return getModel(pi);\n-        }).orElse(null));\n+        return UnitOfWorkExecutor.executeInUnitOfWork(\n+                                                      application.unitOfWorkManager(),\n+                                                      () -> process\n+                                                                   .instances()\n+                                                                   .findById(id)\n+                                                                   .map(pi -> {\n+                                                                       pi.abort();\n+                                                                       return pi.variables().toOutput();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2ODQ5Nw=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzQ4MjA1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/resources/class-templates/TaskInputTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxNzowNlrOG9bpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozMDo0OFrOG9eUhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2OTE4NQ==", "bodyText": "Just one question: aren't we using $token$ format? Just asking because XXX seems something different.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467069185", "createdAt": "2020-08-07T14:17:06Z", "author": {"login": "ricardozanini"}, "path": "jbpm/jbpm-flow-builder/src/main/resources/class-templates/TaskInputTemplate.java", "diffHunk": "@@ -24,7 +24,7 @@ public String getName() {\n         return this._name;\n     }\n \n-    public static XXXTaskInput fromMap(org.kie.kogito.process.WorkItem workItem) {\n+    public static XXXTaskInput from(org.kie.kogito.process.WorkItem workItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMzA5NQ==", "bodyText": "I guess because the replacement here can be done using setClassName method and there is not need to seach for a particular name", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467113095", "createdAt": "2020-08-07T15:30:48Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow-builder/src/main/resources/class-templates/TaskInputTemplate.java", "diffHunk": "@@ -24,7 +24,7 @@ public String getName() {\n         return this._name;\n     }\n \n-    public static XXXTaskInput fromMap(org.kie.kogito.process.WorkItem workItem) {\n+    public static XXXTaskInput from(org.kie.kogito.process.WorkItem workItem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2OTE4NQ=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzYwNzg0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0OToyMFrOG9c2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowMTowMlrOG-EwPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTA3MQ==", "bodyText": "Why not to leverage already existing fromMap() and toMap() methods on all 3 models (ModelInput, Model, ModelOutput).\nThen in ModelInput it would look something like:\npublic OrdersModel toModel() {\n        OrdersModel result = new OrdersModel();\n        result.fromMap(toMap());\n        return result;\n}\nOf course in case some variables are not available, they will be just set to null in the result.fromMap() call, but that's OK.\nAnd for Model:\npublic OrdersModelOutput toOutput() {\n        OrdersModelOutput result = new OrdersModelOutput();\n        result.fromMap(getId(), toMap());\n        return result;\n}\nAgain, ModelOutput will take only what it needs from the Model map so it should be OK.\nMy main point is to have as little code generation code as possible as it is much less readable in general than the actual runtime code. Otherwise the method duo (fromMap(), toMap()) will be now just used to bind and unbind variables I guess.\nAlso in case of a lot of variable, the code can be less verbose. I know it is a generated code but I think everybody has to look at it from time to time :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467089071", "createdAt": "2020-08-07T14:49:20Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(), inputVars, true,\n+                                 \"/class-templates/ModelNoIDTemplate.java\", new AddMethodConsumer(\"toModel\", modelName,\n+                                                                                                  inputVars, false));\n     }\n \n     public ModelMetaData generateOutputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId()) + \"Output\";\n-\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofOutput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true);\n+                                 VariableDeclarations.ofOutput(getVariableScope(process)), true);\n+    }\n+\n+    private static VariableScope getVariableScope(WorkflowProcess process) {\n+        return (VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(\n+                                                                                           VariableScope.VARIABLE_SCOPE);\n+    }\n+\n+    private static class AddMethodConsumer implements Consumer<CompilationUnit> {\n+\n+        private String methodName;\n+        private String returnClassName;\n+        private VariableDeclarations vars;\n+        private boolean includeId;\n+\n+        public AddMethodConsumer(String methodName, String returnClassName, VariableDeclarations vars, boolean includeId) {\n+            this.methodName = methodName;\n+            this.returnClassName = returnClassName;\n+            this.vars = vars;\n+            this.includeId = includeId;\n+        }\n+\n+        @Override\n+        public void accept(CompilationUnit cu) {\n+            Optional<ClassOrInterfaceDeclaration> clazz = cu.findFirst(ClassOrInterfaceDeclaration.class);\n+            if (!clazz.isPresent()) {\n+                throw new NoSuchElementException(\"Cannot find class declaration in the template\");\n+            }\n+            ClassOrInterfaceType type = parseClassOrInterfaceType(returnClassName);\n+            final String resultVarName = \"result\";\n+            MethodDeclaration method = clazz.get().addMethod(methodName, Modifier.Keyword.PUBLIC).setType(type);\n+            BlockStmt body = new BlockStmt();\n+            VariableDeclarationExpr returnVar = new VariableDeclarationExpr(type, resultVarName);\n+            body.addStatement(new AssignExpr(returnVar, new ObjectCreationExpr(null, type, NodeList.nodeList()),\n+                                             AssignExpr.Operator.ASSIGN));\n+            NameExpr returnName = new NameExpr(resultVarName);\n+            // fill id\n+            if (includeId) {\n+                body.addStatement(new MethodCallExpr(returnName, \"setId\").addArgument(new MethodCallExpr(null,\n+                                                                                                         \"getId\")));\n+            }\n+            for (Variable var : vars.getTypes().values()) {\n+                final String fieldName = StringUtils.ucFirst(var.getSanitizedName());\n+                body.addStatement(new MethodCallExpr(returnName, \"set\" + fieldName).addArgument(new MethodCallExpr(null,\n+                                                                                                                   \"get\" +\n+                                                                                                                         fieldName)));\n+            }\n+            body.addStatement(new ReturnStmt(returnName));\n+            method.setBody(body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMjMwMw==", "bodyText": "I think that reading a map and then using that map to fill the parameters of the class being created is very inneficient compared with direct attribute assignment.\nThe rule Im following to write generated code is to generate the code I will write as it was not generated at all, and if I were writting a method to create outputmodel from a model I would definitely  use getter an setters rather than toMap-fromMap.\nThis means, as you  pointed out, that fromMap-toMap are not longer used for bind-unbiding any longer. And I think that is for good...\ntoMap method is still used for human task transition.\nfromMap can be probably removed, but I think this should be done in a different JIRA", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467112303", "createdAt": "2020-08-07T15:29:25Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(), inputVars, true,\n+                                 \"/class-templates/ModelNoIDTemplate.java\", new AddMethodConsumer(\"toModel\", modelName,\n+                                                                                                  inputVars, false));\n     }\n \n     public ModelMetaData generateOutputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId()) + \"Output\";\n-\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofOutput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true);\n+                                 VariableDeclarations.ofOutput(getVariableScope(process)), true);\n+    }\n+\n+    private static VariableScope getVariableScope(WorkflowProcess process) {\n+        return (VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(\n+                                                                                           VariableScope.VARIABLE_SCOPE);\n+    }\n+\n+    private static class AddMethodConsumer implements Consumer<CompilationUnit> {\n+\n+        private String methodName;\n+        private String returnClassName;\n+        private VariableDeclarations vars;\n+        private boolean includeId;\n+\n+        public AddMethodConsumer(String methodName, String returnClassName, VariableDeclarations vars, boolean includeId) {\n+            this.methodName = methodName;\n+            this.returnClassName = returnClassName;\n+            this.vars = vars;\n+            this.includeId = includeId;\n+        }\n+\n+        @Override\n+        public void accept(CompilationUnit cu) {\n+            Optional<ClassOrInterfaceDeclaration> clazz = cu.findFirst(ClassOrInterfaceDeclaration.class);\n+            if (!clazz.isPresent()) {\n+                throw new NoSuchElementException(\"Cannot find class declaration in the template\");\n+            }\n+            ClassOrInterfaceType type = parseClassOrInterfaceType(returnClassName);\n+            final String resultVarName = \"result\";\n+            MethodDeclaration method = clazz.get().addMethod(methodName, Modifier.Keyword.PUBLIC).setType(type);\n+            BlockStmt body = new BlockStmt();\n+            VariableDeclarationExpr returnVar = new VariableDeclarationExpr(type, resultVarName);\n+            body.addStatement(new AssignExpr(returnVar, new ObjectCreationExpr(null, type, NodeList.nodeList()),\n+                                             AssignExpr.Operator.ASSIGN));\n+            NameExpr returnName = new NameExpr(resultVarName);\n+            // fill id\n+            if (includeId) {\n+                body.addStatement(new MethodCallExpr(returnName, \"setId\").addArgument(new MethodCallExpr(null,\n+                                                                                                         \"getId\")));\n+            }\n+            for (Variable var : vars.getTypes().values()) {\n+                final String fieldName = StringUtils.ucFirst(var.getSanitizedName());\n+                body.addStatement(new MethodCallExpr(returnName, \"set\" + fieldName).addArgument(new MethodCallExpr(null,\n+                                                                                                                   \"get\" +\n+                                                                                                                         fieldName)));\n+            }\n+            body.addStatement(new ReturnStmt(returnName));\n+            method.setBody(body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTA3MQ=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0Mjc4Mw==", "bodyText": "I think that reading and writing to a HashMap is basically a constant operation, but I also see your point. Bear in mind that toMap and fromMap are still used in generated bind/unbind methods of process instance, so we cannot remove them.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/674#discussion_r467742783", "createdAt": "2020-08-10T08:01:02Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessToExecModelGenerator.java", "diffHunk": "@@ -101,28 +108,78 @@ public MethodDeclaration generateMethod(WorkflowProcess process) {\n     public ModelMetaData generateModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId());\n-\n+        VariableScope variableScope = getVariableScope(process);\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.of((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                false);\n+                                 VariableDeclarations.of(variableScope),\n+                                 false, \"/class-templates/ModelTemplate.java\",\n+                                 new AddMethodConsumer(\"toOutput\", extractModelClassName(process.getId()) + \"Output\",\n+                                                       VariableDeclarations.ofOutput(variableScope), true));\n     }\n \n     public ModelMetaData generateInputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n-        String name = extractModelClassName(process.getId()) + \"Input\";\n-\n-        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofInput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true, \"/class-templates/ModelNoIDTemplate.java\");\n+        String modelName = extractModelClassName(process.getId());\n+        String name = modelName + \"Input\";\n+        VariableDeclarations inputVars = VariableDeclarations.ofInput(getVariableScope(process));\n+        return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(), inputVars, true,\n+                                 \"/class-templates/ModelNoIDTemplate.java\", new AddMethodConsumer(\"toModel\", modelName,\n+                                                                                                  inputVars, false));\n     }\n \n     public ModelMetaData generateOutputModel(WorkflowProcess process) {\n         String packageName = process.getPackageName();\n         String name = extractModelClassName(process.getId()) + \"Output\";\n-\n         return new ModelMetaData(process.getId(), packageName, name, process.getVisibility(),\n-                VariableDeclarations.ofOutput((VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(VariableScope.VARIABLE_SCOPE)),\n-                true);\n+                                 VariableDeclarations.ofOutput(getVariableScope(process)), true);\n+    }\n+\n+    private static VariableScope getVariableScope(WorkflowProcess process) {\n+        return (VariableScope) ((org.jbpm.process.core.Process) process).getDefaultContext(\n+                                                                                           VariableScope.VARIABLE_SCOPE);\n+    }\n+\n+    private static class AddMethodConsumer implements Consumer<CompilationUnit> {\n+\n+        private String methodName;\n+        private String returnClassName;\n+        private VariableDeclarations vars;\n+        private boolean includeId;\n+\n+        public AddMethodConsumer(String methodName, String returnClassName, VariableDeclarations vars, boolean includeId) {\n+            this.methodName = methodName;\n+            this.returnClassName = returnClassName;\n+            this.vars = vars;\n+            this.includeId = includeId;\n+        }\n+\n+        @Override\n+        public void accept(CompilationUnit cu) {\n+            Optional<ClassOrInterfaceDeclaration> clazz = cu.findFirst(ClassOrInterfaceDeclaration.class);\n+            if (!clazz.isPresent()) {\n+                throw new NoSuchElementException(\"Cannot find class declaration in the template\");\n+            }\n+            ClassOrInterfaceType type = parseClassOrInterfaceType(returnClassName);\n+            final String resultVarName = \"result\";\n+            MethodDeclaration method = clazz.get().addMethod(methodName, Modifier.Keyword.PUBLIC).setType(type);\n+            BlockStmt body = new BlockStmt();\n+            VariableDeclarationExpr returnVar = new VariableDeclarationExpr(type, resultVarName);\n+            body.addStatement(new AssignExpr(returnVar, new ObjectCreationExpr(null, type, NodeList.nodeList()),\n+                                             AssignExpr.Operator.ASSIGN));\n+            NameExpr returnName = new NameExpr(resultVarName);\n+            // fill id\n+            if (includeId) {\n+                body.addStatement(new MethodCallExpr(returnName, \"setId\").addArgument(new MethodCallExpr(null,\n+                                                                                                         \"getId\")));\n+            }\n+            for (Variable var : vars.getTypes().values()) {\n+                final String fieldName = StringUtils.ucFirst(var.getSanitizedName());\n+                body.addStatement(new MethodCallExpr(returnName, \"set\" + fieldName).addArgument(new MethodCallExpr(null,\n+                                                                                                                   \"get\" +\n+                                                                                                                         fieldName)));\n+            }\n+            body.addStatement(new ReturnStmt(returnName));\n+            method.setBody(body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTA3MQ=="}, "originalCommit": {"oid": "957bcf3f2b547753307b6bca5f554ccc129813c8"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4918, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}