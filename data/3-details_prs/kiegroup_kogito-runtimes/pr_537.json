{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MDcyMDU5", "number": 537, "title": "[KOGITO-2168] Implement Conditions for Milestones", "bodyText": "Fix https://issues.redhat.com/browse/KOGITO-2168\nAdds a processEventListener to watch variables changes until the condition is met.\nIt breaks JBPM7.x code intentionally because the Agenda is not implemented in Kogito's DummyKnowledgeRuntime", "createdAt": "2020-06-01T16:00:20Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537", "merged": true, "mergeCommit": {"oid": "cac24bef22f18dbe2220cb0e158455ef372de957"}, "closed": true, "closedAt": "2020-06-17T04:15:29Z", "author": {"login": "ruromero"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnPo2-ABqjMzOTYyMjg2OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsB8mngFqTQzMjA0NjA2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c627ac458eb37a896a7ff773a0edec9bb05080c8", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c627ac458eb37a896a7ff773a0edec9bb05080c8", "committedDate": "2020-06-01T15:57:37Z", "message": "[KOGITO-2168] Implemented conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "f8da34386aa5a84bb6593aa79058778079d318e0", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f8da34386aa5a84bb6593aa79058778079d318e0", "committedDate": "2020-06-02T07:22:05Z", "message": "[KOGITO-2168] Implemented conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8da34386aa5a84bb6593aa79058778079d318e0", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f8da34386aa5a84bb6593aa79058778079d318e0", "committedDate": "2020-06-02T07:22:05Z", "message": "[KOGITO-2168] Implemented conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "94377400c07ac62733b6c2e72a5a7d2a5addd40d", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/94377400c07ac62733b6c2e72a5a7d2a5addd40d", "committedDate": "2020-06-03T09:23:13Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94377400c07ac62733b6c2e72a5a7d2a5addd40d", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/94377400c07ac62733b6c2e72a5a7d2a5addd40d", "committedDate": "2020-06-03T09:23:13Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "9ea08aafe0617605b53f9a3dc9dc532f8f5f8fc0", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9ea08aafe0617605b53f9a3dc9dc532f8f5f8fc0", "committedDate": "2020-06-03T09:25:13Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ea08aafe0617605b53f9a3dc9dc532f8f5f8fc0", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9ea08aafe0617605b53f9a3dc9dc532f8f5f8fc0", "committedDate": "2020-06-03T09:25:13Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "1b4926c544907c28b5d9a323118bbe9972b1f9db", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1b4926c544907c28b5d9a323118bbe9972b1f9db", "committedDate": "2020-06-03T09:31:07Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b4926c544907c28b5d9a323118bbe9972b1f9db", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1b4926c544907c28b5d9a323118bbe9972b1f9db", "committedDate": "2020-06-03T09:31:07Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "f2741024e7a8f8c7f204503b1ceea4a7387c04a1", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/f2741024e7a8f8c7f204503b1ceea4a7387c04a1", "committedDate": "2020-06-03T09:38:58Z", "message": "[KOGITO-2168] Implement conditions for Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDg0NDMz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-423484433", "createdAt": "2020-06-03T12:05:22Z", "commit": {"oid": "f2741024e7a8f8c7f204503b1ceea4a7387c04a1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowNToyMlrOGeYwlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjowOTowM1rOGeY4cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNjExNw==", "bodyText": "if this is a constraint expression why is it a string and not an expression?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r434516117", "createdAt": "2020-06-03T12:05:22Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -37,13 +48,36 @@ protected String getNodeKey() {\n     @Override\n     public void visitNode(String factoryField, MilestoneNode node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n         body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), getNodeKey(), new LongLiteralExpr(node.getId())))\n-                .addStatement(getNameMethod(node, \"Milestone\"))\n-                .addStatement(getFactoryMethod(getNodeId(node), METHOD_CONSTRAINT, new StringLiteralExpr(StringEscapeUtils.escapeJava(node.getConstraint()))));\n+                .addStatement(getNameMethod(node, \"Milestone\"));\n+        if(node.getConstraint() != null && !node.getConstraint().trim().isEmpty()) {\n+            body.addStatement(getFactoryMethod(getNodeId(node), METHOD_CONSTRAINT, new StringLiteralExpr(StringEscapeUtils.escapeJava(node.getConstraint()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2741024e7a8f8c7f204503b1ceea4a7387c04a1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNzU0NQ==", "bodyText": "not your code, but I am noticing that an exception is thrown after fail(); so, I believe it's actually never thrown. You can probably remove the throw?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r434517545", "createdAt": "2020-06-03T12:08:03Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/test/java/org/jbpm/test/util/AbstractBaseTest.java", "diffHunk": "@@ -46,7 +46,7 @@ public KieSession createKieSession(KiePackage... pkg) {\n         try { \n             return createKieSession(false, pkg);\n         } catch(Exception e ) { \n-            String msg = \"There's no reason fo an exception to be thrown here (because the kbase is not being serialized)!\";\n+            String msg = \"There's no reason for an exception to be thrown here (because the kbase is not being serialized)!\";\n             fail( msg );\n             throw new RuntimeException(msg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2741024e7a8f8c7f204503b1ceea4a7387c04a1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxODEyOA==", "bodyText": "if there is a rule flow group is no longer used, do we still need this line?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r434518128", "createdAt": "2020-06-03T12:09:03Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/DynamicNodeInstance.java", "diffHunk": "@@ -79,9 +79,8 @@ public void internalTrigger(NodeInstance from, String type) {\n                 agenda.getRuleFlowGroup(ruleFlowGroup).setAutoDeactivate(false);\n                 agenda.activateRuleFlowGroup(ruleFlowGroup, getProcessInstance().getId(), getUniqueId());\n             }\n-            String rule =  \"RuleFlow-AdHocComplete-\" + getProcessInstance().getProcessId() + \"-\" + getDynamicNode().getUniqueId();\n             isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                    .isRuleActiveInRuleFlowGroup(getRuleFlowGroupName(), rule, getProcessInstance().getId());\n+                    .isRuleActiveInRuleFlowGroup(getRuleFlowGroupName(), getActivationEventType(), getProcessInstance().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2741024e7a8f8c7f204503b1ceea4a7387c04a1"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "312c3869de5d5354649b0056706ce92bfabf767c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/312c3869de5d5354649b0056706ce92bfabf767c", "committedDate": "2020-06-05T07:23:48Z", "message": "[KOGITO-2168] Remove tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "148c721391839a23b44f63f269c2682e664417d9", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/148c721391839a23b44f63f269c2682e664417d9", "committedDate": "2020-06-05T07:28:07Z", "message": "[KOGITO-2168] Remove tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "148c721391839a23b44f63f269c2682e664417d9", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/148c721391839a23b44f63f269c2682e664417d9", "committedDate": "2020-06-05T07:28:07Z", "message": "[KOGITO-2168] Remove tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "0f977170608dcb5f53296d8673928ac2b897eb41", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0f977170608dcb5f53296d8673928ac2b897eb41", "committedDate": "2020-06-05T07:35:26Z", "message": "[KOGITO-2168] Remove tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e3aa0a7e8ba2d37186e999c4fbcad454e0a514d", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8e3aa0a7e8ba2d37186e999c4fbcad454e0a514d", "committedDate": "2020-06-08T15:57:51Z", "message": "[KOGITO-2168] Add DynamicNode activation/completion conditions\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9247a78035bd43d0e0a253ede4d635d39acc7aa6", "committedDate": "2020-06-08T19:56:10Z", "message": "[KOGITO-2168] Add DynamicNode activation/completion conditions\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDAyNzQ4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-427002748", "createdAt": "2020-06-09T10:25:25Z", "commit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoyNToyNVrOGhC-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoyNToyNVrOGhC-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk1OQ==", "bodyText": "why not keep as Milestone?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437304959", "createdAt": "2020-06-09T10:25:25Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -189,7 +189,7 @@\n      *\n      * @return All the process milestones with their current status\n      */\n-    Collection<Milestone> milestones();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTM0MTAy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-427134102", "createdAt": "2020-06-09T13:18:27Z", "commit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzoxODoyN1rOGhJWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1MDo1MlrOGhK-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwOTQ1MQ==", "bodyText": "what about isActivated(ProcessContext context)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437409451", "createdAt": "2020-06-09T13:18:27Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/DynamicNode.java", "diffHunk": "@@ -109,4 +119,22 @@ public String getActivationEventName() {\n         \n         return activationSignalName;\n     }\n+\n+    public DynamicNode setActivationExpression(Predicate<ProcessContext> activationPredicate) {\n+        this.activationPredicate = activationPredicate;\n+        return this;\n+    }\n+\n+    public DynamicNode setCompletionExpression(Predicate<ProcessContext> copmletionPredicate) {\n+        this.completionPredicate = copmletionPredicate;\n+        return this;\n+    }\n+\n+    public boolean testActivation(ProcessContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwOTc4Mg==", "bodyText": "what about  isCompleted(ProcessContext context)?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437409782", "createdAt": "2020-06-09T13:18:57Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/DynamicNode.java", "diffHunk": "@@ -109,4 +119,22 @@ public String getActivationEventName() {\n         \n         return activationSignalName;\n     }\n+\n+    public DynamicNode setActivationExpression(Predicate<ProcessContext> activationPredicate) {\n+        this.activationPredicate = activationPredicate;\n+        return this;\n+    }\n+\n+    public DynamicNode setCompletionExpression(Predicate<ProcessContext> copmletionPredicate) {\n+        this.completionPredicate = copmletionPredicate;\n+        return this;\n+    }\n+\n+    public boolean testActivation(ProcessContext context) {\n+        return activationPredicate == null || activationPredicate.test(context);\n+    }\n+\n+    public boolean testCompletion(ProcessContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxOTU5OQ==", "bodyText": "isConditionAchived? isConditionMatched? well no idea what would be a better name, just thinking the \"test\" prefix is strange...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437419599", "createdAt": "2020-06-09T13:33:00Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/MilestoneNode.java", "diffHunk": "@@ -16,71 +16,56 @@\n \n package org.jbpm.workflow.core.node;\n \n+import java.util.function.Predicate;\n+\n import org.kie.api.definition.process.Connection;\n-import org.jbpm.workflow.core.Constraint;\n-import org.jbpm.workflow.core.impl.ConnectionRef;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+import static org.jbpm.ruleflow.core.Metadata.UNIQUE_ID;\n \n /**\n  * Default implementation of a milestone node.\n- * \n  */\n public class MilestoneNode extends StateBasedNode implements Constrainable {\n \n-\tprivate static final long serialVersionUID = 510l;\n+    private static final long serialVersionUID = 510L;\n \n-\tprivate String constraint;\n-\tprivate String matchVariable;\n+    private Predicate<ProcessContext> conditionPredicate;\n \n-    public void addConstraint(ConnectionRef connection, Constraint constraint) {\n-    \tif (connection != null) {\n-    \t\tthrow new IllegalArgumentException(\n-\t\t\t\t\"A Milestone node only accepts one simple constraint\");\n-    \t}\n-        this.constraint = constraint.getConstraint();\n-    }\n-    \n-    public void setConstraint(String constraint){\n-        this.constraint = constraint;\n+    public void setCondition(Predicate<ProcessContext> conditionPredicate) {\n+        this.conditionPredicate = conditionPredicate;\n     }\n \n-    public String getConstraint(){\n-        return this.constraint;\n-    }    \n-    \n-    public String getMatchVariable() {\n-        return matchVariable;\n-    }\n-    \n-    public void setMatchVariable(String matchVariable) {\n-        this.matchVariable = matchVariable;\n+    public boolean testCondition(ProcessContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNjY2Nw==", "bodyText": "one option is to add a constructor to initialize this the field and keep the default as true.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437426667", "createdAt": "2020-06-09T13:41:56Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/CompositeNode.java", "diffHunk": "@@ -41,7 +38,7 @@\n     private Map<String, CompositeNode.NodeAndType> outConnectionMap = new HashMap<String, CompositeNode.NodeAndType>();\n \tprivate boolean cancelRemainingInstances = true;\n \n-\tprivate boolean autoComplete = true;\n+\tboolean autoComplete = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNzM2NQ==", "bodyText": "one option is to use a constructor on the superclass.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437427365", "createdAt": "2020-06-09T13:42:35Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/DynamicNode.java", "diffHunk": "@@ -19,20 +19,30 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.function.Function;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import org.jbpm.ruleflow.core.Metadata;\n import org.jbpm.workflow.core.WorkflowProcess;\n import org.kie.api.definition.process.Node;\n+import org.kie.api.runtime.process.ProcessContext;\n \n+import static org.jbpm.ruleflow.core.Metadata.CUSTOM_AUTO_START;\n \n public class DynamicNode extends CompositeContextNode {\n \n \tprivate static final long serialVersionUID = 510l;\n \t\n \tprivate String activationExpression;\n \tprivate String completionExpression;\n+    private Predicate<ProcessContext> activationPredicate;\n+    private Predicate<ProcessContext> completionPredicate;\n \tprivate String language;\n-\t\t\t\n+\n+    public DynamicNode() {\n+        autoComplete = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNjA2Mw==", "bodyText": "What about keeping the method getConstraint() and just returning the getMetadata(\"CONDITION\") on it, or change to getCondition(), just to simplify for callers, instead of doing the milestone.getMetadata(CONDITION)...", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437436063", "createdAt": "2020-06-09T13:50:52Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/MilestoneNode.java", "diffHunk": "@@ -16,71 +16,56 @@\n \n package org.jbpm.workflow.core.node;\n \n+import java.util.function.Predicate;\n+\n import org.kie.api.definition.process.Connection;\n-import org.jbpm.workflow.core.Constraint;\n-import org.jbpm.workflow.core.impl.ConnectionRef;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+import static org.jbpm.ruleflow.core.Metadata.UNIQUE_ID;\n \n /**\n  * Default implementation of a milestone node.\n- * \n  */\n public class MilestoneNode extends StateBasedNode implements Constrainable {\n \n-\tprivate static final long serialVersionUID = 510l;\n+    private static final long serialVersionUID = 510L;\n \n-\tprivate String constraint;\n-\tprivate String matchVariable;\n+    private Predicate<ProcessContext> conditionPredicate;\n \n-    public void addConstraint(ConnectionRef connection, Constraint constraint) {\n-    \tif (connection != null) {\n-    \t\tthrow new IllegalArgumentException(\n-\t\t\t\t\"A Milestone node only accepts one simple constraint\");\n-    \t}\n-        this.constraint = constraint.getConstraint();\n-    }\n-    \n-    public void setConstraint(String constraint){\n-        this.constraint = constraint;\n+    public void setCondition(Predicate<ProcessContext> conditionPredicate) {\n+        this.conditionPredicate = conditionPredicate;\n     }\n \n-    public String getConstraint(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9247a78035bd43d0e0a253ede4d635d39acc7aa6", "committedDate": "2020-06-08T19:56:10Z", "message": "[KOGITO-2168] Add DynamicNode activation/completion conditions\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "19cae39940a1bf24deaaf43eb5b3325219e8c424", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/19cae39940a1bf24deaaf43eb5b3325219e8c424", "committedDate": "2020-06-09T14:32:07Z", "message": "[KOGITO-2168] Add DynamicNode activation/completion conditions\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19cae39940a1bf24deaaf43eb5b3325219e8c424", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/19cae39940a1bf24deaaf43eb5b3325219e8c424", "committedDate": "2020-06-09T14:32:07Z", "message": "[KOGITO-2168] Add DynamicNode activation/completion conditions\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/754914b60f6ae6838e0c2ba317c5f53334799612", "committedDate": "2020-06-09T15:28:10Z", "message": "[KOGITO-2168] Add DynamicNode activation/completion conditions\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzA1Mjkw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-427705290", "createdAt": "2020-06-10T04:38:55Z", "commit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozODo1NVrOGhkltg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTozMDozMVrOGhlZlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NTY3MA==", "bodyText": "can we use a constant here?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437855670", "createdAt": "2020-06-10T04:38:55Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/xml/processes/DynamicNodeHandler.java", "diffHunk": "@@ -28,9 +33,24 @@ protected Node createNode() {\n     public Class<?> generateNodeFor() {\n         return DynamicNode.class;\n     }\n-    \n+\n     protected String getNodeName() {\n-    \treturn \"dynamic\";\n+        return \"dynamic\";\n     }\n \n+    @Override\n+    protected void handleNode(Node node, Element element, String uri, String localName, ExtensibleXmlParser parser) throws SAXException {\n+        super.handleNode(node, element, uri, localName, parser);\n+        DynamicNode dynamicNode = (DynamicNode) node;\n+        for (int i = 0; i < element.getChildNodes().getLength(); i++) {\n+            org.w3c.dom.Node n = element.getChildNodes().item(i);\n+            if (COMPLETION_CONDITION.equals(n.getNodeName())) {\n+                if (\"autocomplete\".equals(n.getTextContent())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NjMwOA==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437856308", "createdAt": "2020-06-10T04:41:41Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/MilestoneNode.java", "diffHunk": "@@ -16,71 +16,56 @@\n \n package org.jbpm.workflow.core.node;\n \n+import java.util.function.Predicate;\n+\n import org.kie.api.definition.process.Connection;\n-import org.jbpm.workflow.core.Constraint;\n-import org.jbpm.workflow.core.impl.ConnectionRef;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+import static org.jbpm.ruleflow.core.Metadata.UNIQUE_ID;\n \n /**\n  * Default implementation of a milestone node.\n- * \n  */\n public class MilestoneNode extends StateBasedNode implements Constrainable {\n \n-\tprivate static final long serialVersionUID = 510l;\n+    private static final long serialVersionUID = 510L;\n \n-\tprivate String constraint;\n-\tprivate String matchVariable;\n+    private Predicate<ProcessContext> conditionPredicate;\n \n-    public void addConstraint(ConnectionRef connection, Constraint constraint) {\n-    \tif (connection != null) {\n-    \t\tthrow new IllegalArgumentException(\n-\t\t\t\t\"A Milestone node only accepts one simple constraint\");\n-    \t}\n-        this.constraint = constraint.getConstraint();\n-    }\n-    \n-    public void setConstraint(String constraint){\n-        this.constraint = constraint;\n+    public void setCondition(Predicate<ProcessContext> conditionPredicate) {\n+        this.conditionPredicate = conditionPredicate;\n     }\n \n-    public String getConstraint(){\n-        return this.constraint;\n-    }    \n-    \n-    public String getMatchVariable() {\n-        return matchVariable;\n-    }\n-    \n-    public void setMatchVariable(String matchVariable) {\n-        this.matchVariable = matchVariable;\n+    public boolean testCondition(ProcessContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxOTU5OQ=="}, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NzM2Mw==", "bodyText": "@ruromero so why only when state is pending? can't milestone nodes get activated when the process is for instance in Active state?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437857363", "createdAt": "2020-06-10T04:45:58Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/DynamicNodeInstance.java", "diffHunk": "@@ -66,188 +55,103 @@ public void internalTrigger(NodeInstance from, String type) {\n         triggerTime = new Date();\n         triggerEvent(EVENT_NODE_ENTER);\n \n-    \t// if node instance was cancelled, abort\n-\t\tif (getNodeInstanceContainer().getNodeInstance(getId()) == null) {\n-\t\t\treturn;\n-\t\t}\n-        boolean isActive = false;\n-        // KOGITO-2168 Conditions not supported\n-        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {\n-            InternalAgenda agenda = (InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda();\n-            String ruleFlowGroup = getRuleFlowGroupName();\n-            if (ruleFlowGroup != null && !agenda.getRuleFlowGroup(ruleFlowGroup).isActive()) {\n-                agenda.getRuleFlowGroup(ruleFlowGroup).setAutoDeactivate(false);\n-                agenda.activateRuleFlowGroup(ruleFlowGroup, getProcessInstance().getId(), getUniqueId());\n-            }\n-            String rule =  \"RuleFlow-AdHocComplete-\" + getProcessInstance().getProcessId() + \"-\" + getDynamicNode().getUniqueId();\n-            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                    .isRuleActiveInRuleFlowGroup(getRuleFlowGroupName(), rule, getProcessInstance().getId());\n+        // if node instance was cancelled, abort\n+        if (getNodeInstanceContainer().getNodeInstance(getId()) == null) {\n+            return;\n         }\n-        if (isActive) {\n-            triggerCompleted();\n+        if (canActivate()) {\n+            triggerActivated();\n         } else {\n+            setState(ProcessInstance.STATE_PENDING);\n             addActivationListener();\n         }\n+    }\n \n-    \t// activate ad hoc fragments if they are marked as such\n+    private void triggerActivated() {\n+        setState(ProcessInstance.STATE_ACTIVE);\n+        // activate ad hoc fragments if they are marked as such\n         List<Node> autoStartNodes = getDynamicNode().getAutoStartNodes();\n-        autoStartNodes.forEach(austoStartNode -> triggerSelectedNode(austoStartNode, null));\n+        autoStartNodes.forEach(autoStartNode -> triggerSelectedNode(autoStartNode, null));\n     }\n \n-    @Override\n-    public void addEventListeners() {\n-        super.addEventListeners();\n-        addActivationListener();\n+    private boolean canActivate() {\n+        ProcessContext context = new ProcessContext(getProcessInstance().getKnowledgeRuntime())\n+                .setNodeInstance(this);\n+        return getDynamicNode().testActivation(context);\n     }\n \n-    @Override\n-    public void removeEventListeners() {\n-        super.removeEventListeners();\n-        getProcessInstance().getKnowledgeRuntime().removeEventListener(this);\n-        getProcessInstance().removeEventListener(getActivationEventType(), this, true);\n+    private boolean canComplete() {\n+        ProcessContext context = new ProcessContext(getProcessInstance().getKnowledgeRuntime())\n+                .setNodeInstance(this);\n+        return getNodeInstances(false).isEmpty() && getDynamicNode().testCompletion(context);\n     }\n-    \n+\n     private void addActivationListener() {\n-        getProcessInstance().getKnowledgeRuntime().addEventListener(this);\n-        getProcessInstance().addEventListener(getActivationEventType(), this, true);\n+        getProcessInstance().getKnowledgeRuntime().getProcessRuntime().addEventListener(ContextAwareEventListener.using(listener -> {\n+            if (canActivate() && getState() == ProcessInstance.STATE_PENDING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1ODYyNA==", "bodyText": "this means that if a process ends, the milestones that are activated will be left as is. Is that right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437858624", "createdAt": "2020-06-10T04:51:05Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/DynamicNodeInstance.java", "diffHunk": "@@ -66,188 +55,103 @@ public void internalTrigger(NodeInstance from, String type) {\n         triggerTime = new Date();\n         triggerEvent(EVENT_NODE_ENTER);\n \n-    \t// if node instance was cancelled, abort\n-\t\tif (getNodeInstanceContainer().getNodeInstance(getId()) == null) {\n-\t\t\treturn;\n-\t\t}\n-        boolean isActive = false;\n-        // KOGITO-2168 Conditions not supported\n-        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {\n-            InternalAgenda agenda = (InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda();\n-            String ruleFlowGroup = getRuleFlowGroupName();\n-            if (ruleFlowGroup != null && !agenda.getRuleFlowGroup(ruleFlowGroup).isActive()) {\n-                agenda.getRuleFlowGroup(ruleFlowGroup).setAutoDeactivate(false);\n-                agenda.activateRuleFlowGroup(ruleFlowGroup, getProcessInstance().getId(), getUniqueId());\n-            }\n-            String rule =  \"RuleFlow-AdHocComplete-\" + getProcessInstance().getProcessId() + \"-\" + getDynamicNode().getUniqueId();\n-            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                    .isRuleActiveInRuleFlowGroup(getRuleFlowGroupName(), rule, getProcessInstance().getId());\n+        // if node instance was cancelled, abort\n+        if (getNodeInstanceContainer().getNodeInstance(getId()) == null) {\n+            return;\n         }\n-        if (isActive) {\n-            triggerCompleted();\n+        if (canActivate()) {\n+            triggerActivated();\n         } else {\n+            setState(ProcessInstance.STATE_PENDING);\n             addActivationListener();\n         }\n+    }\n \n-    \t// activate ad hoc fragments if they are marked as such\n+    private void triggerActivated() {\n+        setState(ProcessInstance.STATE_ACTIVE);\n+        // activate ad hoc fragments if they are marked as such\n         List<Node> autoStartNodes = getDynamicNode().getAutoStartNodes();\n-        autoStartNodes.forEach(austoStartNode -> triggerSelectedNode(austoStartNode, null));\n+        autoStartNodes.forEach(autoStartNode -> triggerSelectedNode(autoStartNode, null));\n     }\n \n-    @Override\n-    public void addEventListeners() {\n-        super.addEventListeners();\n-        addActivationListener();\n+    private boolean canActivate() {\n+        ProcessContext context = new ProcessContext(getProcessInstance().getKnowledgeRuntime())\n+                .setNodeInstance(this);\n+        return getDynamicNode().testActivation(context);\n     }\n \n-    @Override\n-    public void removeEventListeners() {\n-        super.removeEventListeners();\n-        getProcessInstance().getKnowledgeRuntime().removeEventListener(this);\n-        getProcessInstance().removeEventListener(getActivationEventType(), this, true);\n+    private boolean canComplete() {\n+        ProcessContext context = new ProcessContext(getProcessInstance().getKnowledgeRuntime())\n+                .setNodeInstance(this);\n+        return getNodeInstances(false).isEmpty() && getDynamicNode().testCompletion(context);\n     }\n-    \n+\n     private void addActivationListener() {\n-        getProcessInstance().getKnowledgeRuntime().addEventListener(this);\n-        getProcessInstance().addEventListener(getActivationEventType(), this, true);\n+        getProcessInstance().getKnowledgeRuntime().getProcessRuntime().addEventListener(ContextAwareEventListener.using(listener -> {\n+            if (canActivate() && getState() == ProcessInstance.STATE_PENDING) {\n+                triggerActivated();\n+                getProcessInstance().getKnowledgeRuntime().getProcessRuntime().removeEventListener(listener);\n+            }\n+        }));\n     }\n-    \n-    private String getActivationEventType() {\n-        return \"RuleFlow-AdHocComplete-\" + getProcessInstance().getProcessId()\n-            + \"-\" + getDynamicNode().getUniqueId();\n+\n+    private void addCompletionListener() {\n+        getProcessInstance().getKnowledgeRuntime()\n+                .getProcessRuntime()\n+                .addEventListener(ContextAwareEventListener.using(listener -> {\n+                    if (canComplete()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1OTIzNg==", "bodyText": "I think it actually makes sense to leave the old name method, is quite clear that it is specific about activation.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437859236", "createdAt": "2020-06-10T04:53:38Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,112 +45,42 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        boolean isActive = true;\n-        // KOGITO-2168 Conditions not supported\n-        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {\n-            String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                    + \"-\" + getMilestoneNode().getUniqueId();\n-            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                    .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n-        }\n-        if (isActive) {\n+        if (isCompleted()) {\n             triggerCompleted();\n         } else {\n-            addActivationEventListener();\n+            addEventListener();\n         }\n     }\n \n+    private boolean isCompleted() {\n+        ProcessContext context = new ProcessContext(getProcessInstance().getKnowledgeRuntime())\n+                .setNodeInstance(this);\n+        return getMilestoneNode().testCondition(context);\n+    }\n+\n     @Override\n     public void addEventListeners() {\n         super.addEventListeners();\n-        addActivationEventListener();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2Mjk3Mw==", "bodyText": "@ruromero I think there is some inconsistency on how the events are handled here. See how the events used to be registered and remove. Is this intentional or should we reevaluate to use the same mechanism? For instance on line 79, the listener for getActivationEventType is never added, the the one add here is not removed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437862973", "createdAt": "2020-06-10T05:08:50Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/MilestoneNodeInstance.java", "diffHunk": "@@ -53,112 +45,42 @@ public void internalTrigger(final NodeInstance from, String type) {\n             throw new IllegalArgumentException(\n                     \"A MilestoneNode only accepts default incoming connections!\");\n         }\n-        boolean isActive = true;\n-        // KOGITO-2168 Conditions not supported\n-        if(getProcessInstance().getKnowledgeRuntime().getAgenda() != null) {\n-            String rule = \"RuleFlow-Milestone-\" + getProcessInstance().getProcessId()\n-                    + \"-\" + getMilestoneNode().getUniqueId();\n-            isActive = ((InternalAgenda) getProcessInstance().getKnowledgeRuntime().getAgenda())\n-                    .isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, getProcessInstance().getId());\n-        }\n-        if (isActive) {\n+        if (isCompleted()) {\n             triggerCompleted();\n         } else {\n-            addActivationEventListener();\n+            addEventListener();\n         }\n     }\n \n+    private boolean isCompleted() {\n+        ProcessContext context = new ProcessContext(getProcessInstance().getKnowledgeRuntime())\n+                .setNodeInstance(this);\n+        return getMilestoneNode().testCondition(context);\n+    }\n+\n     @Override\n     public void addEventListeners() {\n         super.addEventListeners();\n-        addActivationEventListener();\n+        addEventListener();\n     }\n \n-    private void addActivationEventListener() {\n-        getProcessInstance().getKnowledgeRuntime().addEventListener(this);\n-        getProcessInstance().addEventListener(getActivationEventType(), this, true);\n+    private void addEventListener() {\n+        getProcessInstance().getKnowledgeRuntime().getProcessRuntime().addEventListener(ContextAwareEventListener.using(listener -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2Mzk1NQ==", "bodyText": "maybe add an accessor method for the builder:\n    public static Builder builder(){ return new Builder(); }", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437863955", "createdAt": "2020-06-10T05:12:21Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/flexible/Milestone.java", "diffHunk": "@@ -18,40 +18,29 @@\n \n public class Milestone extends ItemDescription {\n \n-    private final String condition;\n-\n-    private Milestone(String id, String name, Status status, String condition) {\n+    private Milestone(String id, String name, Status status) {\n         super(id, name, status);\n-        this.condition = condition;\n-    }\n-\n-    public String getCondition() {\n-        return condition;\n     }\n \n     @Override\n     public String toString() {\n-        return \"Milestone{\" +\n-                \"condition='\" + condition + '\\'' +\n-                \", {\" + super.toString() + \"}\";\n+        return \"Milestone{\" + super.toString() + \"}\";\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDA0OA==", "bodyText": "should this remain as private?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437864048", "createdAt": "2020-06-10T05:12:40Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/flexible/Milestone.java", "diffHunk": "@@ -18,40 +18,29 @@\n \n public class Milestone extends ItemDescription {\n \n-    private final String condition;\n-\n-    private Milestone(String id, String name, Status status, String condition) {\n+    private Milestone(String id, String name, Status status) {\n         super(id, name, status);\n-        this.condition = condition;\n-    }\n-\n-    public String getCondition() {\n-        return condition;\n     }\n \n     @Override\n     public String toString() {\n-        return \"Milestone{\" +\n-                \"condition='\" + condition + '\\'' +\n-                \", {\" + super.toString() + \"}\";\n+        return \"Milestone{\" + super.toString() + \"}\";\n     }\n \n     public static class Builder {\n \n-        private String id;\n-        private String name;\n-        private Status status;\n-        private String condition;\n+        protected String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDQyMQ==", "bodyText": "a builder constructor should be without parameter, then you could add a id or withId method.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437864421", "createdAt": "2020-06-10T05:13:52Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/flexible/Milestone.java", "diffHunk": "@@ -18,40 +18,29 @@\n \n public class Milestone extends ItemDescription {\n \n-    private final String condition;\n-\n-    private Milestone(String id, String name, Status status, String condition) {\n+    private Milestone(String id, String name, Status status) {\n         super(id, name, status);\n-        this.condition = condition;\n-    }\n-\n-    public String getCondition() {\n-        return condition;\n     }\n \n     @Override\n     public String toString() {\n-        return \"Milestone{\" +\n-                \"condition='\" + condition + '\\'' +\n-                \", {\" + super.toString() + \"}\";\n+        return \"Milestone{\" + super.toString() + \"}\";\n     }\n \n     public static class Builder {\n \n-        private String id;\n-        private String name;\n-        private Status status;\n-        private String condition;\n+        protected String id;\n+        protected String name;\n+        protected Status status;\n \n         public Builder(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NjQyMw==", "bodyText": "I'm not sure why we need a builder that takes an instance with all the parameters, this feels more like a clone method.\nIn the tests, it seems that only the name is reused, so why not create a new builder instance, then withName, withStatus?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437866423", "createdAt": "2020-06-10T05:21:15Z", "author": {"login": "cristianonicolai"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/flexible/Milestone.java", "diffHunk": "@@ -18,40 +18,29 @@\n \n public class Milestone extends ItemDescription {\n \n-    private final String condition;\n-\n-    private Milestone(String id, String name, Status status, String condition) {\n+    private Milestone(String id, String name, Status status) {\n         super(id, name, status);\n-        this.condition = condition;\n-    }\n-\n-    public String getCondition() {\n-        return condition;\n     }\n \n     @Override\n     public String toString() {\n-        return \"Milestone{\" +\n-                \"condition='\" + condition + '\\'' +\n-                \", {\" + super.toString() + \"}\";\n+        return \"Milestone{\" + super.toString() + \"}\";\n     }\n \n     public static class Builder {\n \n-        private String id;\n-        private String name;\n-        private Status status;\n-        private String condition;\n+        protected String id;\n+        protected String name;\n+        protected Status status;\n \n         public Builder(String id) {\n             this.id = id;\n         }\n \n-        public Builder(Milestone m) {\n-            this.id = m.getId();\n-            this.name = m.getName();\n-            this.status = m.getStatus();\n-            this.condition = m.getCondition();\n+        public Builder(ItemDescription i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NzQyMw==", "bodyText": "missing assertMilestones(expected, processInstance.milestones()); ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437867423", "createdAt": "2020-06-10T05:24:51Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/process/impl/MilestoneTest.java", "diffHunk": "@@ -75,20 +79,32 @@ void testSimpleMilestone() throws Exception {\n \n     @Test\n     void testConditionalMilestone() throws Exception {\n-        Application app = generateCodeProcessesOnly(\"cases/UserTaskCase.bpmn2\");\n+        Application app = generateCodeProcessesOnly(\"cases/milestones/ConditionalMilestone.bpmn\");\n         assertThat(app).isNotNull();\n \n-        Process<? extends Model> p = app.processes().processById(\"UserTaskCase\");\n-        ProcessInstance<?> processInstance = p.createInstance(p.createModel());\n+        Process<? extends Model> p = app.processes().processById(\"TestCase.ConditionalMilestone\");\n+        Model model = p.createModel();\n+        Map<String, Object> params = new HashMap<>();\n+        params.put(\"favouriteColour\", \"orange\");\n+        model.fromMap(params);\n+        ProcessInstance<?> processInstance = p.createInstance(model);\n         assertState(processInstance, ProcessInstance.STATE_PENDING);\n \n-\n         Collection<Milestone> expected = new ArrayList<>();\n-        expected.add(new Milestone.Builder(\"\").withName(\"Milestone1\").withStatus(AVAILABLE).withCondition(\"\").build());\n-        expected.add(new Milestone.Builder(\"\").withName(\"Milestone2\").withStatus(AVAILABLE).withCondition(\"CaseData(data.get(\\\"dataComplete\\\") == true)\").build());\n+        expected.add(new Milestone.Builder(\"\").withName(\"Milestone\").withStatus(AVAILABLE).build());\n+        assertMilestones(expected, processInstance.milestones());\n+\n+        processInstance.start();\n+        assertState(processInstance, ProcessInstance.STATE_ACTIVE);\n \n-        Collection<Milestone> milestones = processInstance.milestones();\n-        assertMilestones(expected, milestones);\n+        expected = expected.stream().map(m -> new Milestone.Builder(m).withStatus(AVAILABLE).build()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "754914b60f6ae6838e0c2ba317c5f53334799612"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2ODk0OQ==", "bodyText": "@ruromero I think we're overusing the metadata for this, keeping a specific attribute and method I think is more clear unles there is a specific reason for this change. I would actually prefer to keep getContraint() and same for node.getActivationExpression() and node.getCompletionExpression()", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r437868949", "createdAt": "2020-06-10T05:30:31Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/node/MilestoneNode.java", "diffHunk": "@@ -16,71 +16,56 @@\n \n package org.jbpm.workflow.core.node;\n \n+import java.util.function.Predicate;\n+\n import org.kie.api.definition.process.Connection;\n-import org.jbpm.workflow.core.Constraint;\n-import org.jbpm.workflow.core.impl.ConnectionRef;\n+import org.kie.api.runtime.process.ProcessContext;\n+\n+import static org.jbpm.ruleflow.core.Metadata.UNIQUE_ID;\n \n /**\n  * Default implementation of a milestone node.\n- * \n  */\n public class MilestoneNode extends StateBasedNode implements Constrainable {\n \n-\tprivate static final long serialVersionUID = 510l;\n+    private static final long serialVersionUID = 510L;\n \n-\tprivate String constraint;\n-\tprivate String matchVariable;\n+    private Predicate<ProcessContext> conditionPredicate;\n \n-    public void addConstraint(ConnectionRef connection, Constraint constraint) {\n-    \tif (connection != null) {\n-    \t\tthrow new IllegalArgumentException(\n-\t\t\t\t\"A Milestone node only accepts one simple constraint\");\n-    \t}\n-        this.constraint = constraint.getConstraint();\n-    }\n-    \n-    public void setConstraint(String constraint){\n-        this.constraint = constraint;\n+    public void setCondition(Predicate<ProcessContext> conditionPredicate) {\n+        this.conditionPredicate = conditionPredicate;\n     }\n \n-    public String getConstraint(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNjA2Mw=="}, "originalCommit": {"oid": "9247a78035bd43d0e0a253ede4d635d39acc7aa6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzY0NjA2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-428364606", "createdAt": "2020-06-10T19:29:46Z", "commit": {"oid": "ed1f087f9cd849ebca672639e1edbe4f5c0eb996"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed1f087f9cd849ebca672639e1edbe4f5c0eb996", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ed1f087f9cd849ebca672639e1edbe4f5c0eb996", "committedDate": "2020-06-10T15:55:53Z", "message": "[KOGITO-2168] Fix case tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "8b2a05b84496497e6a472fcce5fbbf1097760c5c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8b2a05b84496497e6a472fcce5fbbf1097760c5c", "committedDate": "2020-06-15T06:14:45Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b2a05b84496497e6a472fcce5fbbf1097760c5c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8b2a05b84496497e6a472fcce5fbbf1097760c5c", "committedDate": "2020-06-15T06:14:45Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "9d1aff4d5edc36e07ea571e7dafd3cea27c5565e", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9d1aff4d5edc36e07ea571e7dafd3cea27c5565e", "committedDate": "2020-06-15T07:18:46Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDEyOTkw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-430412990", "createdAt": "2020-06-15T08:10:16Z", "commit": {"oid": "9d1aff4d5edc36e07ea571e7dafd3cea27c5565e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxMDoxNlrOGjnieQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxOTowMlrOGjn0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE0NQ==", "bodyText": "please remove unused import", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r440001145", "createdAt": "2020-06-15T08:10:16Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/StateBasedNodeInstance.java", "diffHunk": "@@ -46,6 +46,7 @@\n import org.jbpm.workflow.instance.impl.ExtendedNodeInstanceImpl;\n import org.jbpm.workflow.instance.impl.NodeInstanceResolverFactory;\n import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.kie.api.event.process.ProcessEventListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1aff4d5edc36e07ea571e7dafd3cea27c5565e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwNTg4MA==", "bodyText": "unused import", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#discussion_r440005880", "createdAt": "2020-06-15T08:19:02Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/xml/processes/MilestoneNodeHandler.java", "diffHunk": "@@ -18,6 +18,7 @@\n \n import org.drools.compiler.compiler.xml.XmlDumper;\n import org.drools.core.xml.ExtensibleXmlParser;\n+import org.jbpm.ruleflow.core.Metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d1aff4d5edc36e07ea571e7dafd3cea27c5565e"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d1aff4d5edc36e07ea571e7dafd3cea27c5565e", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9d1aff4d5edc36e07ea571e7dafd3cea27c5565e", "committedDate": "2020-06-15T07:18:46Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "8c0a05ef27da9509c88ba24a82c94bda1312e88b", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8c0a05ef27da9509c88ba24a82c94bda1312e88b", "committedDate": "2020-06-15T08:30:56Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c0a05ef27da9509c88ba24a82c94bda1312e88b", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8c0a05ef27da9509c88ba24a82c94bda1312e88b", "committedDate": "2020-06-15T08:30:56Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "6e6289ad498e1a8f56e7a58820ee1441a8b64858", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6e6289ad498e1a8f56e7a58820ee1441a8b64858", "committedDate": "2020-06-15T10:04:37Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ed8031e7845fab754c895bfad495c2cd0af894", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a8ed8031e7845fab754c895bfad495c2cd0af894", "committedDate": "2020-06-16T08:28:10Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9713a8c53ecb16a4177b68f6cfcc2e359bff2a2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b9713a8c53ecb16a4177b68f6cfcc2e359bff2a2", "committedDate": "2020-06-16T08:27:10Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "a8ed8031e7845fab754c895bfad495c2cd0af894", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a8ed8031e7845fab754c895bfad495c2cd0af894", "committedDate": "2020-06-16T08:28:10Z", "message": "[KOGITO-2168] Implement conditions for DynamicNodes and Milestones\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85d3f36869b1781caf8875f7af8e81a5b2052551", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/85d3f36869b1781caf8875f7af8e81a5b2052551", "committedDate": "2020-06-16T09:54:30Z", "message": "[KOGITO-2168] Remove some codesmells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDQ2MDYy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/537#pullrequestreview-432046062", "createdAt": "2020-06-17T04:14:51Z", "commit": {"oid": "85d3f36869b1781caf8875f7af8e81a5b2052551"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3524, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}