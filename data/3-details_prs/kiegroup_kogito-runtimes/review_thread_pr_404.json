{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTg0MzMz", "number": 404, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1MDozNFrODtZfhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1ODo0MFrODtZoLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMwMTgxOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1MDozNFrOF-y-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyMzowM1rOF_NFSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MTMxMg==", "bodyText": "I think we can simplify this by just prepending a \"$\" sign or a mix of \"$\" sign and some other stuff. This will keep it readable and make it safe.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Optional.ofNullable(name)\n          \n          \n            \n                                    .filter(SourceVersion::isName)\n          \n          \n            \n                                    .orElseGet(() -> Optional.ofNullable(StringUtils.extractFirstIdentifier(name, 0))\n          \n          \n            \n                                            .filter(s -> !StringUtils.isEmpty(s))\n          \n          \n            \n                                            .filter(SourceVersion::isName)\n          \n          \n            \n                                            .orElseGet(() -> \"attribute\" + StringUtils.generateUUID()));\n          \n          \n            \n                   // prepend v$ in front of the variable name to prevent clashing with reserved keywords\n          \n          \n            \n                    return String.format(\"v$%s\", name);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401391312", "createdAt": "2020-04-01T06:50:34Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -64,6 +69,27 @@ public String getName() {\n \n     public void setName(final String name) {\n         this.name = name;\n+        this.sanitizedName = sanitizeIdentifier(name);\n+    }\n+\n+    public String getSanitizedName() {\n+        return sanitizedName;\n+    }\n+\n+    /**\n+     * Return a valid unique Java identifier based on the given @param name. It consider valid characters and\n+     * reserved words.\n+     * In case the input is valid it is returned itself otherwise a unique valid identifier is generated.\n+     * @param name the input\n+     * @return the output valid Java identifier\n+     */\n+    private static String sanitizeIdentifier(String name) {\n+        return Optional.ofNullable(name)\n+                        .filter(SourceVersion::isName)\n+                        .orElseGet(() -> Optional.ofNullable(StringUtils.extractFirstIdentifier(name, 0))\n+                                .filter(s -> !StringUtils.isEmpty(s))\n+                                .filter(SourceVersion::isName)\n+                                .orElseGet(() -> \"attribute\" + StringUtils.generateUUID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxOTc0NA==", "bodyText": "+1 though I would leave the decision logic there. So in case it is not a reserved word, use it as is, otherwise prepend v$.\nIn addition, we can directly assert that in tests because we know the expected outcome (v$<input>).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401719744", "createdAt": "2020-04-01T15:48:34Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -64,6 +69,27 @@ public String getName() {\n \n     public void setName(final String name) {\n         this.name = name;\n+        this.sanitizedName = sanitizeIdentifier(name);\n+    }\n+\n+    public String getSanitizedName() {\n+        return sanitizedName;\n+    }\n+\n+    /**\n+     * Return a valid unique Java identifier based on the given @param name. It consider valid characters and\n+     * reserved words.\n+     * In case the input is valid it is returned itself otherwise a unique valid identifier is generated.\n+     * @param name the input\n+     * @return the output valid Java identifier\n+     */\n+    private static String sanitizeIdentifier(String name) {\n+        return Optional.ofNullable(name)\n+                        .filter(SourceVersion::isName)\n+                        .orElseGet(() -> Optional.ofNullable(StringUtils.extractFirstIdentifier(name, 0))\n+                                .filter(s -> !StringUtils.isEmpty(s))\n+                                .filter(SourceVersion::isName)\n+                                .orElseGet(() -> \"attribute\" + StringUtils.generateUUID()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MTMxMg=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxODk1NA==", "bodyText": "done.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401818954", "createdAt": "2020-04-01T18:23:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/core/context/variable/Variable.java", "diffHunk": "@@ -64,6 +69,27 @@ public String getName() {\n \n     public void setName(final String name) {\n         this.name = name;\n+        this.sanitizedName = sanitizeIdentifier(name);\n+    }\n+\n+    public String getSanitizedName() {\n+        return sanitizedName;\n+    }\n+\n+    /**\n+     * Return a valid unique Java identifier based on the given @param name. It consider valid characters and\n+     * reserved words.\n+     * In case the input is valid it is returned itself otherwise a unique valid identifier is generated.\n+     * @param name the input\n+     * @return the output valid Java identifier\n+     */\n+    private static String sanitizeIdentifier(String name) {\n+        return Optional.ofNullable(name)\n+                        .filter(SourceVersion::isName)\n+                        .orElseGet(() -> Optional.ofNullable(StringUtils.extractFirstIdentifier(name, 0))\n+                                .filter(s -> !StringUtils.isEmpty(s))\n+                                .filter(SourceVersion::isName)\n+                                .orElseGet(() -> \"attribute\" + StringUtils.generateUUID()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MTMxMg=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMxMjc1OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1NDozNFrOF-zFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzoxMjo0N1rOF_eFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MjkxNw==", "bodyText": "because setters and getters are always prepended with get and set they can never be invalid. So maybe we can use the \"regular\" name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401392917", "createdAt": "2020-04-01T06:54:34Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();\n             String sourceField = e.getValue();\n             blockStmt.addStatement(\n                     dest.callSetter(destVarName, destField, dest.callGetter(sourceVarName, sourceField)));\n         }\n \n         return blockStmt;\n     }\n-    \n+\n     public MethodCallExpr callSetter(String targetVar, String destField, String value) {\n         if (value.startsWith(\"#{\")) {\n-            value = value.substring(2, value.length() -1);\n+            value = value.substring(2, value.length() - 1);\n         }\n-        \n+\n         return callSetter(targetVar, destField, new NameExpr(value));\n     }\n \n     public MethodCallExpr callSetter(String targetVar, String destField, Expression value) {\n+        String name = variableScope.getTypes().get(destField).getSanitizedName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNzc5OA==", "bodyText": "On the other hand in case somebody wants to browse the generated code, it makes more sense to prepend the whole name of the variable with set or get. So it would be consistent with Java Beans spec.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401717798", "createdAt": "2020-04-01T15:46:04Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();\n             String sourceField = e.getValue();\n             blockStmt.addStatement(\n                     dest.callSetter(destVarName, destField, dest.callGetter(sourceVarName, sourceField)));\n         }\n \n         return blockStmt;\n     }\n-    \n+\n     public MethodCallExpr callSetter(String targetVar, String destField, String value) {\n         if (value.startsWith(\"#{\")) {\n-            value = value.substring(2, value.length() -1);\n+            value = value.substring(2, value.length() - 1);\n         }\n-        \n+\n         return callSetter(targetVar, destField, new NameExpr(value));\n     }\n \n     public MethodCallExpr callSetter(String targetVar, String destField, Expression value) {\n+        String name = variableScope.getTypes().get(destField).getSanitizedName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MjkxNw=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMTgzNg==", "bodyText": "@evacchi the way to make the getter/setter work was to manually change the method name after the fd.createSetter(), but even with this we may have problems in case the variable names contain invalid characters like []()!*?! ... to the logic could be more complicated and it will not be 100% compatible with the original name and as @MarianMacik  pointed out it will not be consistent with Java Beans. So IMHO it is better to keep the default getter/setter name unless we found bugs or anything affecting other points on the runtime.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401821836", "createdAt": "2020-04-01T18:27:53Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();\n             String sourceField = e.getValue();\n             blockStmt.addStatement(\n                     dest.callSetter(destVarName, destField, dest.callGetter(sourceVarName, sourceField)));\n         }\n \n         return blockStmt;\n     }\n-    \n+\n     public MethodCallExpr callSetter(String targetVar, String destField, String value) {\n         if (value.startsWith(\"#{\")) {\n-            value = value.substring(2, value.length() -1);\n+            value = value.substring(2, value.length() - 1);\n         }\n-        \n+\n         return callSetter(targetVar, destField, new NameExpr(value));\n     }\n \n     public MethodCallExpr callSetter(String targetVar, String destField, Expression value) {\n+        String name = variableScope.getTypes().get(destField).getSanitizedName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MjkxNw=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5NzUxMw==", "bodyText": "ok i am not too much opinionated on this, especially because at this time this is an impl detail. Maybe when this becomes public/scaffolding we can revisit if needed :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r402097513", "createdAt": "2020-04-02T07:12:47Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();\n             String sourceField = e.getValue();\n             blockStmt.addStatement(\n                     dest.callSetter(destVarName, destField, dest.callGetter(sourceVarName, sourceField)));\n         }\n \n         return blockStmt;\n     }\n-    \n+\n     public MethodCallExpr callSetter(String targetVar, String destField, String value) {\n         if (value.startsWith(\"#{\")) {\n-            value = value.substring(2, value.length() -1);\n+            value = value.substring(2, value.length() - 1);\n         }\n-        \n+\n         return callSetter(targetVar, destField, new NameExpr(value));\n     }\n \n     public MethodCallExpr callSetter(String targetVar, String destField, Expression value) {\n+        String name = variableScope.getTypes().get(destField).getSanitizedName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MjkxNw=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMxOTExOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1Njo1M1rOF-zJAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyODowM1rOF_NQ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MzkyMw==", "bodyText": "same here: if we call a getter, then the getter may retain its original name", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401393923", "createdAt": "2020-04-01T06:56:53Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMTkyOA==", "bodyText": "#404 (comment)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401821928", "createdAt": "2020-04-01T18:28:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -112,26 +112,27 @@ public BlockStmt copyInto(String sourceVarName, String destVarName, ModelMetaDat\n         BlockStmt blockStmt = new BlockStmt();\n \n         for (Map.Entry<String, String> e : mapping.entrySet()) {\n-            String destField = e.getKey();\n+            String destField = variableScope.getTypes().get(e.getKey()).getSanitizedName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MzkyMw=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMyMzk4OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1ODo0MFrOF-zL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODoyODowOVrOF_NRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NDY2OQ==", "bodyText": "If these accept params maybe we can override the name. If they don't it may be just enough to create the FD with the unsanitized name and then after these lines add fd.setName(sanitizedName)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401394669", "createdAt": "2020-04-01T06:58:40Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -175,36 +176,41 @@ private CompilationUnit compilationUnit() {\n             staticFromMap.addStatement(new AssignExpr(idField, new NameExpr(\"id\"), AssignExpr.Operator.ASSIGN));\n         }\n \n-        for (String vname : variableScope.getTypes().keySet()) {\n-            \n-            String vtype = variableScope.getType(vname);\n-            FieldDeclaration fd = declareField(vname, vtype);\n+        for (Map.Entry<String, Variable> variable : variableScope.getTypes().entrySet()) {\n+            String varName = variable.getValue().getName();\n+            String vtype = variable.getValue().getType().getStringType();\n+            String sanitizedName = variable.getValue().getSanitizedName();\n+\n+            FieldDeclaration fd = declareField(sanitizedName, vtype);\n             modelClass.addMember(fd);\n-            \n-            List<String> tags = variableScope.getTags(vname);\n+\n+            List<String> tags = variable.getValue().getTags();\n             fd.addAnnotation(new NormalAnnotationExpr(new Name(VariableInfo.class.getCanonicalName()), NodeList.nodeList(new MemberValuePair(\"tags\", new StringLiteralExpr(tags.stream().collect(Collectors.joining(\",\")))))));\n+            fd.addAnnotation(new NormalAnnotationExpr(new Name(JsonProperty.class.getCanonicalName()),\n+                                                      NodeList.nodeList(new MemberValuePair(\"value\",\n+                                                                                            new StringLiteralExpr(varName)))));\n \n             applyValidation(fd, tags);\n-            \n+\n             fd.createGetter();\n             fd.createSetter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NzkxNg==", "bodyText": "Great idea, I try to do that and see if it works. At the beginning, I tried but the fd.createGetter(); was automatically generated based on the fd name.. so...\nLet's see.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401677916", "createdAt": "2020-04-01T14:53:16Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -175,36 +176,41 @@ private CompilationUnit compilationUnit() {\n             staticFromMap.addStatement(new AssignExpr(idField, new NameExpr(\"id\"), AssignExpr.Operator.ASSIGN));\n         }\n \n-        for (String vname : variableScope.getTypes().keySet()) {\n-            \n-            String vtype = variableScope.getType(vname);\n-            FieldDeclaration fd = declareField(vname, vtype);\n+        for (Map.Entry<String, Variable> variable : variableScope.getTypes().entrySet()) {\n+            String varName = variable.getValue().getName();\n+            String vtype = variable.getValue().getType().getStringType();\n+            String sanitizedName = variable.getValue().getSanitizedName();\n+\n+            FieldDeclaration fd = declareField(sanitizedName, vtype);\n             modelClass.addMember(fd);\n-            \n-            List<String> tags = variableScope.getTags(vname);\n+\n+            List<String> tags = variable.getValue().getTags();\n             fd.addAnnotation(new NormalAnnotationExpr(new Name(VariableInfo.class.getCanonicalName()), NodeList.nodeList(new MemberValuePair(\"tags\", new StringLiteralExpr(tags.stream().collect(Collectors.joining(\",\")))))));\n+            fd.addAnnotation(new NormalAnnotationExpr(new Name(JsonProperty.class.getCanonicalName()),\n+                                                      NodeList.nodeList(new MemberValuePair(\"value\",\n+                                                                                            new StringLiteralExpr(varName)))));\n \n             applyValidation(fd, tags);\n-            \n+\n             fd.createGetter();\n             fd.createSetter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NDY2OQ=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMTk4Nw==", "bodyText": "#404 (comment)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/404#discussion_r401821987", "createdAt": "2020-04-01T18:28:09Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ModelMetaData.java", "diffHunk": "@@ -175,36 +176,41 @@ private CompilationUnit compilationUnit() {\n             staticFromMap.addStatement(new AssignExpr(idField, new NameExpr(\"id\"), AssignExpr.Operator.ASSIGN));\n         }\n \n-        for (String vname : variableScope.getTypes().keySet()) {\n-            \n-            String vtype = variableScope.getType(vname);\n-            FieldDeclaration fd = declareField(vname, vtype);\n+        for (Map.Entry<String, Variable> variable : variableScope.getTypes().entrySet()) {\n+            String varName = variable.getValue().getName();\n+            String vtype = variable.getValue().getType().getStringType();\n+            String sanitizedName = variable.getValue().getSanitizedName();\n+\n+            FieldDeclaration fd = declareField(sanitizedName, vtype);\n             modelClass.addMember(fd);\n-            \n-            List<String> tags = variableScope.getTags(vname);\n+\n+            List<String> tags = variable.getValue().getTags();\n             fd.addAnnotation(new NormalAnnotationExpr(new Name(VariableInfo.class.getCanonicalName()), NodeList.nodeList(new MemberValuePair(\"tags\", new StringLiteralExpr(tags.stream().collect(Collectors.joining(\",\")))))));\n+            fd.addAnnotation(new NormalAnnotationExpr(new Name(JsonProperty.class.getCanonicalName()),\n+                                                      NodeList.nodeList(new MemberValuePair(\"value\",\n+                                                                                            new StringLiteralExpr(varName)))));\n \n             applyValidation(fd, tags);\n-            \n+\n             fd.createGetter();\n             fd.createSetter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NDY2OQ=="}, "originalCommit": {"oid": "c5281effae6a0d2531aafe9a80cfc2304f1e7481"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 203, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}