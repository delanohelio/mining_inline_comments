{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjQ5MDQx", "number": 598, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozNzo1MFrOEL-oPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowOTo0NlrOENKkHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk1OTAyOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozNzo1MFrOGt0moA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTowMTozNlrOGuCypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDk2MA==", "bodyText": "why has this been added to kogito-api?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450700960", "createdAt": "2020-07-07T08:37:50Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/pom.xml", "diffHunk": "@@ -30,7 +30,12 @@\n       <artifactId>jaxb-api</artifactId>\n       <scope>provided</scope>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MzExNQ==", "bodyText": "some jackson annotations are used in JsonSchema.\nI put JsonSchema in API for mainly two reasons:\n\nIt is the object returned by the generated rest method, so in a sense is part of the API\nI need a common placeholder which is a dependency both for code gen and for runtime (I mean, there are some pieces of code in JsonSchema that are both executed when the REST method is generated and when is invoked)\n\nAn alternative implementation is to remove jsonschema,  make the generated REST method to return Map<String,Object) but then we need to do two extra things:\n\nDocumment somehow in the swagger api that there is an extra \"phases\" field returned by the REST API\nFind a common placeholder for the code that is both executed during generation and runtime (which will be that place?)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450753115", "createdAt": "2020-07-07T10:05:23Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/pom.xml", "diffHunk": "@@ -30,7 +30,12 @@\n       <artifactId>jaxb-api</artifactId>\n       <scope>provided</scope>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDk2MA=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzMzQxNA==", "bodyText": "I changed JsonSchema by Map<String,Object>, kogito-api is hence not changed and the common code was moved to jbpm-flow", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450933414", "createdAt": "2020-07-07T15:01:36Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/pom.xml", "diffHunk": "@@ -30,7 +30,12 @@\n       <artifactId>jaxb-api</artifactId>\n       <scope>provided</scope>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMDk2MA=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk2NzIyOnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozOTo1OFrOGt0rog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDoxNjoyMFrOGvyBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjI0Mg==", "bodyText": "I am not really fond of adding this public method to ProcessInstance, as it is a property of the WorkItem. Shouldn't this be a method on WorkItemManager maybe?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450702242", "createdAt": "2020-07-07T08:39:58Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -130,6 +130,13 @@\n      * @throws WorkItemNotFoundException in case work item with given id does not exist\n      */\n     void transitionWorkItem(String id, Transition<?> transition);\n+    \n+    /**\n+     * Identify phases that are available to be transition to for a particular work item\n+     * @param id work item \n+     * @return id of the phases that can be transitioned to\n+     */\n+    Set<String> allowedPhases (String id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MDIzNw==", "bodyText": "This is also defined in WorkItermManager, but as per other methods of this interface (like completeWorkItem or abortWorkItem), it is also exposed in ProcessIntance to allow being called from the generated code.\nI mean, Im following the pre existing policy here ;)\nProbably it will  be better to create a getWorkItemManager in process instance and do not have to duplicate methods in both interfaces.\nI can do that, but we need to discuss it first", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450750237", "createdAt": "2020-07-07T10:00:06Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -130,6 +130,13 @@\n      * @throws WorkItemNotFoundException in case work item with given id does not exist\n      */\n     void transitionWorkItem(String id, Transition<?> transition);\n+    \n+    /**\n+     * Identify phases that are available to be transition to for a particular work item\n+     * @param id work item \n+     * @return id of the phases that can be transitioned to\n+     */\n+    Set<String> allowedPhases (String id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjI0Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3NDYyMg==", "bodyText": "ok makes sense; in fact, I am not fond of those other methods either -- there was no \"policy\" in place when they were added hehe. So let's keep this around, but let's plan another refactoring maybe", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452274622", "createdAt": "2020-07-09T14:48:34Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -130,6 +130,13 @@\n      * @throws WorkItemNotFoundException in case work item with given id does not exist\n      */\n     void transitionWorkItem(String id, Transition<?> transition);\n+    \n+    /**\n+     * Identify phases that are available to be transition to for a particular work item\n+     * @param id work item \n+     * @return id of the phases that can be transitioned to\n+     */\n+    Set<String> allowedPhases (String id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjI0Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1NTc1Ng==", "bodyText": "fair enough, we need to revisit all of these methods", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452755756", "createdAt": "2020-07-10T10:16:20Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/kogito/process/ProcessInstance.java", "diffHunk": "@@ -130,6 +130,13 @@\n      * @throws WorkItemNotFoundException in case work item with given id does not exist\n      */\n     void transitionWorkItem(String id, Transition<?> transition);\n+    \n+    /**\n+     * Identify phases that are available to be transition to for a particular work item\n+     * @param id work item \n+     * @return id of the phases that can be transitioned to\n+     */\n+    Set<String> allowedPhases (String id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjI0Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk4OTMwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NToxMlrOGt05Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowOTozNlrOGvsUrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTY4Mg==", "bodyText": "are we consistent with the way process \"id\", process \"package\", process \"name\" are used? IIRC IDs are unqualified, while we have package+name otherwise; not 100% sure but seeing the package here feels inconsistent @cristianonicolai @tiagobento ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450705682", "createdAt": "2020-07-07T08:45:12Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n \n     private enum Color {GREEN, WHITE};\n     \n-    @UserTask(taskName = \"test\", processName = \"test\")\n+    @UserTask(taskName = \"test\", processName = \"org.jbpm.test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MDkwMA==", "bodyText": "I feel including package name will guarantee the uniqueneness of process name. As can be seen in the test, this will basically affects name of the schema, where \".\" are replaced by \"#\"", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r450750900", "createdAt": "2020-07-07T10:01:18Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n \n     private enum Color {GREEN, WHITE};\n     \n-    @UserTask(taskName = \"test\", processName = \"test\")\n+    @UserTask(taskName = \"test\", processName = \"org.jbpm.test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTY4Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3NDk0Mg==", "bodyText": "ok I was trying to make sure we're consistent across the other usages of process ids/names. Let's keep it for now", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452274942", "createdAt": "2020-07-09T14:49:00Z", "author": {"login": "evacchi"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n \n     private enum Color {GREEN, WHITE};\n     \n-    @UserTask(taskName = \"test\", processName = \"test\")\n+    @UserTask(taskName = \"test\", processName = \"org.jbpm.test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTY4Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjQ0NQ==", "bodyText": "name and package are different properties for a process. It might be valid to cover that the generation won't break because \".\" are included but I dont think this is a common use.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452662445", "createdAt": "2020-07-10T07:09:36Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/JsonSchemaGeneratorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n \n     private enum Color {GREEN, WHITE};\n     \n-    @UserTask(taskName = \"test\", processName = \"test\")\n+    @UserTask(taskName = \"test\", processName = \"org.jbpm.test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTY4Mg=="}, "originalCommit": {"oid": "f16e4fa146f492d930364f6577b61ee45882117c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjEwNzcwOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/JsonSchemaTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo1NTozNVrOGuJiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxMzoxMFrOGufPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Mzg4MQ==", "bodyText": "I think it can be used the SpringBootTest.WebEnvironment.RANDOM_PORT to avoid conflicts.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451043881", "createdAt": "2020-07-07T17:55:35Z", "author": {"login": "tiagodolphine"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/JsonSchemaTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5OTYwMg==", "bodyText": "For the sake of record, tried Random_port as suggested, but the test failed for some obscure reason, so switching back to defined one.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451399602", "createdAt": "2020-07-08T09:13:10Z", "author": {"login": "fjtirado"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/JsonSchemaTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Mzg4MQ=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjMxMDc2OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1NjowM1rOGuLhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1NjowM1rOGuLhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3NjQ4Mw==", "bodyText": "formatting", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451076483", "createdAt": "2020-07-07T18:56:03Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jbpm.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class JsonSchemaUtil {\n+\n+    private JsonSchemaUtil() {}\n+    \n+    private static ObjectMapper mapper = new ObjectMapper();\n+    private static Path jsonDir = Paths.get(\"META-INF\", \"jsonSchema\");\n+\n+    public static String getJsonSchemaName(String processId, String taskName) {\n+        return processId.replace('.', '#') + \"_\" + taskName;\n+    }\n+\n+    public static Path getJsonDir() {\n+        return jsonDir;\n+    }\n+\n+    public static String getFileName(String key) {\n+        return key + \".json\";\n+    }\n+\n+    public static Map<String,Object> load(ClassLoader cl, String processId, String taskName) {\n+        Path jsonFile = jsonDir.resolve(getFileName(getJsonSchemaName(processId, taskName)));\n+        try (InputStream in = cl.getResourceAsStream(jsonFile.toString())) {\n+            if (in == null) {\n+                throw new IllegalArgumentException(\"Cannot find file \" + jsonFile + \" in classpath\");\n+            }\n+            return load(in);\n+        } catch (IOException io) {\n+            throw new IllegalStateException(\"Error loading schema \" + jsonFile, io);\n+        }\n+    }\n+\n+    public static Map<String,Object> load(InputStream in) throws IOException {\n+        return mapper.readValue(in,new TypeReference<Map<String, Object>>() {\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjMxNzU0OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1Nzo1OFrOGuLlmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1Nzo1OFrOGuLlmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3NzUzMA==", "bodyText": "could it be renamed to JsonSchemaUtilTest?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451077530", "createdAt": "2020-07-07T18:57:58Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.jbpm.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM3MTI5OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxNDo1M1rOGuMHrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNzo1OFrOGufEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjI1Mw==", "bodyText": "It seems there is too much logic for Rest resource class, wouldn't worth extracting this logic to another class, in this way it could be reused in both springboot and quarkus, anyway just a suggestion.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451086253", "createdAt": "2020-07-07T19:14:53Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchema() {\n+        return JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+    }\n     \n+    @GET()\n+    @Path(\"/{id}/$taskName$/{workItemId}/form\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n+        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjYyMw==", "bodyText": "Hmmm,I agree with the principle, that is why most logic is included in JsonSchemaUtils (instead of what is done in other methods present in this template) , but in the code that remains in the template we are just  specifying params and calling processIntance to retrieve the allowed phases (and including there in the map if there is any).\nI think the logic that is currently in the template is the logic that is needed (there has to be some copy paste between this and spring  template anyway), because it seems natural to interact with ProcessInstance  in the REST controller  and not inside the utility class (which is defined in flow project, due to the lack of a better common place)\nInitially, (see my comment to Edoardo in this PR) I have included a jsonschema class in the api, but it does not reduce substantially the logic here (we still need to resolve processintance and call allowedPhases), so I remove it since api project follow a differnet inteface-base approach with no dependency with jackson.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451396623", "createdAt": "2020-07-08T09:07:58Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchema() {\n+        return JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+    }\n     \n+    @GET()\n+    @Path(\"/{id}/$taskName$/{workItemId}/form\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n+        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjI1Mw=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjM5NTgyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToyMjoxOFrOGuMWyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxMTowM1rOGufKrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDEyMw==", "bodyText": "we were already using the rest-assured in many places, I think you can reuse the same version, check \n  \n    \n      kogito-runtimes/pom.xml\n    \n    \n         Line 121\n      in\n      bf14ef8\n    \n    \n    \n    \n\n        \n          \n           <version.io.restassured>4.3.0</version.io.restassured>", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451090123", "createdAt": "2020-07-07T19:22:18Z", "author": {"login": "tiagodolphine"}, "path": "pom.xml", "diffHunk": "@@ -94,6 +94,7 @@\n     <version.com.github.haifengl.smile>1.5.2</version.com.github.haifengl.smile>\n     <version.com.github.javaparser>3.13.10</version.com.github.javaparser>\n     <version.com.github.victools>4.12.1</version.com.github.victools>\n+    <version.io.rest-assured>4.3.1</version.io.rest-assured>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5ODMxOA==", "bodyText": "Thanks, I have not seen it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451398318", "createdAt": "2020-07-08T09:11:03Z", "author": {"login": "fjtirado"}, "path": "pom.xml", "diffHunk": "@@ -94,6 +94,7 @@\n     <version.com.github.haifengl.smile>1.5.2</version.com.github.haifengl.smile>\n     <version.com.github.javaparser>3.13.10</version.com.github.javaparser>\n     <version.com.github.victools>4.12.1</version.com.github.victools>\n+    <version.io.rest-assured>4.3.1</version.io.rest-assured>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MDEyMw=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjQwNzIyOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToyNTo1MFrOGuMeJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTozMTozMVrOGvJTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg==", "bodyText": "What about using a different name for the resource path instead of form, I mean something like schema, or any more generic one, the term form recalls me UI, I think a more generic term would be better, WDYT?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451092006", "createdAt": "2020-07-07T19:25:50Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5OTk0MQ==", "bodyText": "hmmm, I initially proposed schema, but Pere believe it was better to use form.\nWhatever you decide is fine for me ; )", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451399941", "createdAt": "2020-07-08T09:13:46Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMjQ3OA==", "bodyText": "then to make both happy use @Path(\"$taskName$/formschema\") :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451402478", "createdAt": "2020-07-08T09:18:02Z", "author": {"login": "mswiderski"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNzQ2Mw==", "bodyText": "I like this salomonic solution ;), so if nobody speak up in the next 24 hours Ill use that ;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451437463", "createdAt": "2020-07-08T10:19:31Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MDc2Mw==", "bodyText": "@fjtirado @tiagodolphine If you ask me, form name is my personal preference because it's going to be the main use in my case, but I agree that it represents the task schema, so I'll be ok with whatever decision we make. Also @mswiderski option works for me \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451450763", "createdAt": "2020-07-08T10:46:09Z", "author": {"login": "pefernan"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3ODAxNQ==", "bodyText": "I was just questioning it because from the REST perspective the resource name on the path should represent what is returned/created etc... so when I look at /form it seems that a form will be returned, and in fact what is retuned is a schema.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451478015", "createdAt": "2020-07-08T11:41:35Z", "author": {"login": "tiagodolphine"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NjMxNw==", "bodyText": "Tiago is right, from rest point of view this is the schema of the task, the fact that is used for the form should not be part of the resource name.\nThinking about this carefully, my preferred name wil be actually metadata, because what we are really returning is metadata information about a particular task. The fact that we are using json schema to represent the metadata should not be part of the REST name either.\nSince Im kind of new, what should be do when there is not agreement? we should reach one or author decides ?;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r451486317", "createdAt": "2020-07-08T11:57:54Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MDUzMQ==", "bodyText": "@fjtirado to me is ok either name you use, I think that calling it forms looks like a name too focused to UI, so changing it to schema seems a better option for me.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452050531", "createdAt": "2020-07-09T08:27:17Z", "author": {"login": "pefernan"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4ODYxOA==", "bodyText": "Ok, lets use schema", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452088618", "createdAt": "2020-07-09T09:31:31Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/form\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjAwNg=="}, "originalCommit": {"oid": "899b245fed5509fea4029dadbd6eb87b4d3cc1aa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjM0ODAyOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MToyOVrOGvr2hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMTo0MlrOGvxmbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NDcyNQ==", "bodyText": "missing headers", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452654725", "createdAt": "2020-07-10T06:51:29Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jbpm.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODkwOA==", "bodyText": "uppsss ;)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452748908", "createdAt": "2020-07-10T10:01:42Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/util/JsonSchemaUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.jbpm.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NDcyNQ=="}, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjM0OTgwOnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MjoxMFrOGvr3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMToyN1rOGvxl1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testJsonSchema() throws IOException\n          \n          \n            \n                {\n          \n          \n            \n                void testJsonSchema() throws IOException {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452655003", "createdAt": "2020-07-10T06:52:10Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.jbpm.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaUtilTest {\n+    \n+    \n+    private final static String example =\"{\\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n\" + \n+            \"    \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"    \\\"properties\\\": {\\n\" + \n+            \"        \\\"traveller\\\": {\\n\" + \n+            \"            \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"            \\\"properties\\\": {\\n\" + \n+            \"                \\\"address\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"                    \\\"properties\\\": {\\n\" + \n+            \"                        \\\"city\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"country\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"street\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"zipCode\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        }\\n\" + \n+            \"                    }\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"email\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"firstName\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"lastName\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"nationality\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                }\\n\" + \n+            \"            },\\n\" + \n+            \"            \\\"input\\\": true\\n\" + \n+            \"        },\\n\" + \n+            \"        \\\"approved\\\": {\\n\" + \n+            \"            \\\"type\\\": \\\"boolean\\\",\\n\" + \n+            \"            \\\"output\\\": true\\n\" + \n+            \"        }\\n\" + \n+            \"    }}\";\n+    \n+    @Test\n+    void testJsonSchema() throws IOException\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODc1OQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452748759", "createdAt": "2020-07-10T10:01:27Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.jbpm.util;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JsonSchemaUtilTest {\n+    \n+    \n+    private final static String example =\"{\\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema#\\\",\\n\" + \n+            \"    \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"    \\\"properties\\\": {\\n\" + \n+            \"        \\\"traveller\\\": {\\n\" + \n+            \"            \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"            \\\"properties\\\": {\\n\" + \n+            \"                \\\"address\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"object\\\",\\n\" + \n+            \"                    \\\"properties\\\": {\\n\" + \n+            \"                        \\\"city\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"country\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"street\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        },\\n\" + \n+            \"                        \\\"zipCode\\\": {\\n\" + \n+            \"                            \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                        }\\n\" + \n+            \"                    }\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"email\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"firstName\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"lastName\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                },\\n\" + \n+            \"                \\\"nationality\\\": {\\n\" + \n+            \"                    \\\"type\\\": \\\"string\\\"\\n\" + \n+            \"                }\\n\" + \n+            \"            },\\n\" + \n+            \"            \\\"input\\\": true\\n\" + \n+            \"        },\\n\" + \n+            \"        \\\"approved\\\": {\\n\" + \n+            \"            \\\"type\\\": \\\"boolean\\\",\\n\" + \n+            \"            \\\"output\\\": true\\n\" + \n+            \"        }\\n\" + \n+            \"    }}\";\n+    \n+    @Test\n+    void testJsonSchema() throws IOException\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTAwMw=="}, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjM1MTA1OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNjo1MjozNVrOGvr4Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowMToxNVrOGvxlcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context)\n          \n          \n            \n                {\n          \n          \n            \n                private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context) {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452655178", "createdAt": "2020-07-10T06:52:35Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -107,15 +111,25 @@ private JsonSchemaGenerator(Stream<Class<?>> stream) {\n             }\n             try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n                 writer.writeValue(outputStream, merged);\n-                files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+                files.add(new GeneratedFile(Type.JSON_SCHEMA, JsonSchemaUtil.getFileName(entry.getKey()), outputStream.toByteArray()));\n             }\n         }\n         return files;\n     }\n+    \n+    private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODY1Nw==", "bodyText": "File formatted properly now, thanks", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452748657", "createdAt": "2020-07-10T10:01:15Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/JsonSchemaGenerator.java", "diffHunk": "@@ -107,15 +111,25 @@ private JsonSchemaGenerator(Stream<Class<?>> stream) {\n             }\n             try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n                 writer.writeValue(outputStream, merged);\n-                files.add(new GeneratedFile(Type.JSON_SCHEMA, entry.getKey() + \".json\", outputStream.toByteArray()));\n+                files.add(new GeneratedFile(Type.JSON_SCHEMA, JsonSchemaUtil.getFileName(entry.getKey()), outputStream.toByteArray()));\n             }\n         }\n         return files;\n     }\n+    \n+    private CustomPropertyDefinition getInputOutput (FieldScope f, SchemaGenerationContext context)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTE3OA=="}, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjM4OTkwOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowNjozMlrOGvsPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1ODoxNVrOGvxfQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MTAzOQ==", "bodyText": "@fjtirado instead of doing allowed phases via process instances. You could have access or inject here the ApplicationConfig, from there you can get ProcessConfig.workItemHandlers and retrieve the WorkItemHandler for human tasks. That way, allowedPhases is only added to WorkItemHandler wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452661039", "createdAt": "2020-07-10T07:06:32Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/schema\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchema() {\n+        return JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+    }\n     \n+    @GET()\n+    @Path(\"/{id}/$taskName$/{workItemId}/schema\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n+        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+        process.instances().findById(id).ifPresent(pi ->jsonSchema.put(\"phases\",pi.allowedPhases(workItemId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzA3NQ==", "bodyText": "Although it is true that WorkItermHandler can be obtained through Config (thanks for pointing this out), one problem remains. In order to retrieve allowed phases, we need the current status of the workitem, and workitems are stored in WorkItemManager, not WorkItemHandler. This is the same situation than for complete or abort workItem, and I guess this is the reason complete and abort work item are exposed in ProcessInstance inteface.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452747075", "createdAt": "2020-07-10T09:58:15Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -75,7 +75,23 @@\n             return null;\n         }\n     }\n+\n+    @GET()\n+    @Path(\"$taskName$/schema\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchema() {\n+        return JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+    }\n     \n+    @GET()\n+    @Path(\"/{id}/$taskName$/{workItemId}/schema\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n+        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n+        process.instances().findById(id).ifPresent(pi ->jsonSchema.put(\"phases\",pi.allowedPhases(workItemId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MTAzOQ=="}, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjQwMDI4OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowOTo0NlrOGvsU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTozODoyM1rOGvw3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjUwNw==", "bodyText": "remove?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452662507", "createdAt": "2020-07-10T07:09:46Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -135,8 +136,12 @@ public void testBasicUserTaskProcessPhases() throws Exception {\n         assertEquals(Active.ID, wi.getPhase());\n         assertEquals(Active.STATUS, wi.getPhaseStatus());\n \n-        processInstance.transitionWorkItem(workItems.get(0).getId(), new HumanTaskTransition(Complete.ID, null, securityPolicy));\n+        String workItemId = workItems.get(0).getId();\n+        assertFalse(processInstance.allowedPhases(workItemId).isEmpty());\n+        processInstance.transitionWorkItem(workItemId, new HumanTaskTransition(Complete.ID, null, securityPolicy));\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczNjgyMw==", "bodyText": "hmmm, this check was there for the transitionworkitem, unless wrongly specified initially, I think it should stay.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/598#discussion_r452736823", "createdAt": "2020-07-10T09:38:23Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/UserTaskTest.java", "diffHunk": "@@ -135,8 +136,12 @@ public void testBasicUserTaskProcessPhases() throws Exception {\n         assertEquals(Active.ID, wi.getPhase());\n         assertEquals(Active.STATUS, wi.getPhaseStatus());\n \n-        processInstance.transitionWorkItem(workItems.get(0).getId(), new HumanTaskTransition(Complete.ID, null, securityPolicy));\n+        String workItemId = workItems.get(0).getId();\n+        assertFalse(processInstance.allowedPhases(workItemId).isEmpty());\n+        processInstance.transitionWorkItem(workItemId, new HumanTaskTransition(Complete.ID, null, securityPolicy));\n         assertThat(processInstance.status()).isEqualTo(ProcessInstance.STATE_ACTIVE);\n+        ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjUwNw=="}, "originalCommit": {"oid": "b3f52fffef51ff5bf98db0ca2fe4cf6dcbe002c2"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 12, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}