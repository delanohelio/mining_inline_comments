{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MzI3ODA4", "number": 699, "title": "KOGITO-3071 - Explainability predict-api", "bodyText": "Jira: https://issues.redhat.com/browse/KOGITO-3071\nThis PR aims to add the predict api that is going to be used by the explainability service to execute some \"perturbed\" requests, i.e. some requests with different values to figure out what are the most relevant features that contributed to take a given decision.\nSince the model identifier is built as <namespace>:<name>, if the name contains : this code is not supposed to work. Be careful, that most of the time the namespace is a url, so it contains : (for example http://blablabla :) ), but this is not an issue since the split is performed on the last occurrence of the char :. If name contains :, it's still a problem.\nThe predict endpoints takes an object with the model identifier info and a plain Map<String, Object> that represents the perturbed inputs. This code executes the dmn model with such Map, and returns the plain response. It's up to the consumer to read the plain response and put some logic on top of it (at the moment).\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-08-13T11:35:05Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699", "merged": true, "mergeCommit": {"oid": "6f9cd25e3eb2fb722acac869d47f72ded0e20e48"}, "closed": true, "closedAt": "2020-08-18T11:56:56Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1EtwaAH2gAyNDY3MzI3ODA4OmFmY2JmOGNjZTcxMjk5YmUxMjZiMzFlNzUwZmZjZjc4YjBkZmFlMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAFmXcAFqTQ2ODUwMjg1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "afcbf8cce71299be126b31e750ffcf78b0dfae16", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/afcbf8cce71299be126b31e750ffcf78b0dfae16", "committedDate": "2020-07-15T06:33:40Z", "message": "Predict API scaffolding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/375b14fcf8dcb0246f0bd70bd1c213122fa34086", "committedDate": "2020-08-13T11:34:12Z", "message": "rebase + fix Daniele's implementation + add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzEzNjAy", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#pullrequestreview-466713602", "createdAt": "2020-08-13T12:29:36Z", "commit": {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjoyOTozNlrOHAJUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0MzozOVrOHAJy-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxNDY2NQ==", "bodyText": "Scope test?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469914665", "createdAt": "2020-08-13T12:29:36Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "diffHunk": "@@ -30,7 +30,16 @@\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-vertx</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n \n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMTg0OA==", "bodyText": "Please create a ticket to refactor this code and use a proper discovery mechanism (SPI or similar)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469921848", "createdAt": "2020-08-13T12:42:28Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/explainability/ExplainabilityService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.explainability;\n+\n+import java.util.Collection;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictInput;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictOutput;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ExplainabilityService {\n+\n+    public static ExplainabilityService INSTANCE = new ExplainabilityService(singletonList(new DecisionExplainabilityResourceExecutor()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMjI4NQ==", "bodyText": "What about log the exception too?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469922285", "createdAt": "2020-08-13T12:43:14Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusExplainableResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictInput;\n+import org.kie.kogito.tracing.decision.explainability.ExplainabilityService;\n+\n+@Path(\"/predict\")\n+public class QuarkusExplainableResource {\n+\n+    private final Application application;\n+    private final ExplainabilityService explainabilityService = ExplainabilityService.INSTANCE;\n+\n+    @Inject\n+    public QuarkusExplainableResource(Application application) {\n+        this.application = application;\n+    }\n+\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_JSON})\n+    public Response predict(PredictInput input) {\n+        try {\n+            return Response.ok(explainabilityService.processRequest(application, input)).build();\n+        } catch (Exception e) {\n+            return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMjU1NQ==", "bodyText": "What about log the exception too?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469922555", "createdAt": "2020-08-13T12:43:39Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootExplainableResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.explainability.ExplainabilityService;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictInput;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+@RestController\n+@RequestMapping(\"/predict\")\n+public class SpringBootExplainableResource {\n+\n+    private final Application application;\n+    private final ExplainabilityService explainabilityService = ExplainabilityService.INSTANCE;\n+\n+    @Autowired\n+    public SpringBootExplainableResource(Application application) {\n+        this.application = application;\n+    }\n+\n+    @PostMapping(produces = APPLICATION_JSON_VALUE,\n+            consumes = APPLICATION_JSON_VALUE)\n+    public ResponseEntity<?> predict(PredictInput input) {\n+        try {\n+            return ResponseEntity.ok(explainabilityService.processRequest(application, input));\n+        } catch (Exception e) {\n+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ccc5eeb7940c79f185e2be1882c2d8fe99df79c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5ccc5eeb7940c79f185e2be1882c2d8fe99df79c", "committedDate": "2020-08-13T20:50:04Z", "message": "add integration test with rest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4dc49828c9aab44d4090d7ffca0c551a6ac05df", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a4dc49828c9aab44d4090d7ffca0c551a6ac05df", "committedDate": "2020-08-13T20:51:19Z", "message": "remove unused dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40466506f67cfabaa0f9247d3c280b03c03d881c", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/40466506f67cfabaa0f9247d3c280b03c03d881c", "committedDate": "2020-08-17T08:05:02Z", "message": "Update SpringBootExplainableResource.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01a7c91b0deb9865925b2274c1b4ba77931a319", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a01a7c91b0deb9865925b2274c1b4ba77931a319", "committedDate": "2020-08-17T08:05:25Z", "message": "Update QuarkusExplainableResource.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Mzg2NTY3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#pullrequestreview-468386567", "createdAt": "2020-08-17T11:36:51Z", "commit": {"oid": "a01a7c91b0deb9865925b2274c1b4ba77931a319"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f1c30a968899f414cd310c0de1745511bc3cbc", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e7f1c30a968899f414cd310c0de1745511bc3cbc", "committedDate": "2020-08-17T16:09:51Z", "message": "DTO update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTAyODU0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#pullrequestreview-468502854", "createdAt": "2020-08-17T14:16:23Z", "commit": {"oid": "a01a7c91b0deb9865925b2274c1b4ba77931a319"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDoxNjoyM1rOHBqpag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDoxNjoyM1rOHBqpag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUwOTM1NA==", "bodyText": "I think it would be generally better to avoid the term perturbed here if possible. Not that it makes any practical difference, but it may sound confusing to read about perturbation where this is actually just covering an execution (which contains perturbed inputs). So I would suggest to change that from perturbedResult to executionResult.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r471509354", "createdAt": "2020-08-17T14:16:23Z", "author": {"login": "tteofili"}, "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/explainability/PredictOutput.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.explainability;\n+\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class PredictOutput {\n+\n+    @JsonProperty(\"modelIdentifier\")\n+    private ModelIdentifier modelIdentifier;\n+\n+    @JsonProperty(\"perturbedResult\")\n+    private Map<String, Object> perturbedResult;\n+\n+    public PredictOutput() {\n+    }\n+\n+    public PredictOutput(ModelIdentifier modelIdentifier, Map<String, Object> perturbedResult) {\n+        this.modelIdentifier = modelIdentifier;\n+        this.perturbedResult = perturbedResult;\n+    }\n+\n+    public ModelIdentifier getModelIdentifier() {\n+        return modelIdentifier;\n+    }\n+\n+    public void setModelIdentifier(ModelIdentifier modelIdentifier) {\n+        this.modelIdentifier = modelIdentifier;\n+    }\n+\n+    public Map<String, Object> getPerturbedResult() {\n+        return perturbedResult;\n+    }\n+\n+    public void setPerturbedResult(Map<String, Object> perturbedResult) {\n+        this.perturbedResult = perturbedResult;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01a7c91b0deb9865925b2274c1b4ba77931a319"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4115, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}