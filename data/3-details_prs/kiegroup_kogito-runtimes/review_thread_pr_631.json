{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjgwODUy", "number": 631, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToxNDozOVrOEOo3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzo1NVrOERHnxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg0OTY3OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToxNDozOVrOGx5eXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToxOTozMVrOGx5nMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NTA3MA==", "bodyText": "right import?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r454975070", "createdAt": "2020-07-15T11:14:39Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import java.util.List;\n \n+import org.dmg.pmml.Application;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26752e22c82cb327d3f31f05ac1dfdfcc104487d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NzMzMA==", "bodyText": "This should not be there (it is not really used), I guess it was automatically introduced by the IDE while trying different approaches. I removed it. really good catch!!!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r454977330", "createdAt": "2020-07-15T11:19:31Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import java.util.List;\n \n+import org.dmg.pmml.Application;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NTA3MA=="}, "originalCommit": {"oid": "26752e22c82cb327d3f31f05ac1dfdfcc104487d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzIwMzU4OnYy", "diffSide": "RIGHT", "path": "api/kogito-api/src/main/java/org/kie/api/runtime/process/WorkItemHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoxMjowN1rOGys4jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoyNjo0NFrOGy1DyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNzM1Ng==", "bodyText": "wishlist for the future: I'd like it better to have two different interfaces, one with this method, the other without.\n\nWorkItemHandler\nCustomPhaseWorkItemHandler extends WorkItemHandler\n\nor something along those lines", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r455817356", "createdAt": "2020-07-16T14:12:07Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/process/WorkItemHandler.java", "diffHunk": "@@ -81,7 +81,7 @@ default void transitionToPhase(WorkItem workItem, WorkItemManager manager, Trans\n         throw new UnsupportedOperationException();\n     }\n \n-    default Set<String> allowedPhases(WorkItem workItem) {\n+    default Set<String> allowedPhases(String phaseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295af1cc84cac887243cb2e8ed05343e1b9e54ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyNzk3Ng==", "bodyText": "haven't we agree that this method will be in LifeCycle and not on WorkItemHandler, @fjtirado?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r455827976", "createdAt": "2020-07-16T14:26:39Z", "author": {"login": "mswiderski"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/process/WorkItemHandler.java", "diffHunk": "@@ -81,7 +81,7 @@ default void transitionToPhase(WorkItem workItem, WorkItemManager manager, Trans\n         throw new UnsupportedOperationException();\n     }\n \n-    default Set<String> allowedPhases(WorkItem workItem) {\n+    default Set<String> allowedPhases(String phaseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNzM1Ng=="}, "originalCommit": {"oid": "295af1cc84cac887243cb2e8ed05343e1b9e54ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NDcyMA==", "bodyText": "yes, thats the idea, but I have not uploaded changes related with it yet.\nIm not sure it is feasible to inject LifeCycle, without changing current customtask example. Im currently studying the code.\nLet me elaborate a bit more. Currently, in the example, which is injected is the CustomWorkItemHandlerConfig, which register HumanTaskWorkItemHandler speciying a custom LifeCycle implementaiton. I guess we can just tell customers interested on providing a custom life cycle to simply  provide a bean than implements LifeCycle. But this implies changing the example and any related documentation. Are you aware of any blog talking about this? (it will need to be modified)\nAlso, do you know if we have @ConditionalOnMissingBean BootSpring equivalent annotation on quarkus?  so, the idea is, if user specify a LifeCycle bean we use it, if not we use the default one, BaseHumanTaskLifeCycle", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r455894720", "createdAt": "2020-07-16T15:57:01Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/process/WorkItemHandler.java", "diffHunk": "@@ -81,7 +81,7 @@ default void transitionToPhase(WorkItem workItem, WorkItemManager manager, Trans\n         throw new UnsupportedOperationException();\n     }\n \n-    default Set<String> allowedPhases(WorkItem workItem) {\n+    default Set<String> allowedPhases(String phaseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNzM1Ng=="}, "originalCommit": {"oid": "295af1cc84cac887243cb2e8ed05343e1b9e54ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwODkyMA==", "bodyText": "Anyway, independently on the issue of injecting LifeCycle, I have a foundamental doubt, WorkItemHandler inerface already have these methods:\n\n void executeWorkItem(WorkItem workItem,\n                         WorkItemManager manager);\n\n    \n    void abortWorkItem(WorkItem workItem,\n                       WorkItemManager manager);\n    \n    default String getName() {\n        return getClass().getSimpleName();\n    };\n    \n    /\n    default void transitionToPhase(WorkItem workItem, WorkItemManager manager, Transition<?> transition) {\n        throw new UnsupportedOperationException();\n    }\n\nso, there is actually one existing method in this inteface which is aware of  \"phase\", which issue is associate with adding  allowedPhases to it?, I need to understand because I felt Im missing something.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r455908920", "createdAt": "2020-07-16T16:17:29Z", "author": {"login": "fjtirado"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/process/WorkItemHandler.java", "diffHunk": "@@ -81,7 +81,7 @@ default void transitionToPhase(WorkItem workItem, WorkItemManager manager, Trans\n         throw new UnsupportedOperationException();\n     }\n \n-    default Set<String> allowedPhases(WorkItem workItem) {\n+    default Set<String> allowedPhases(String phaseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNzM1Ng=="}, "originalCommit": {"oid": "295af1cc84cac887243cb2e8ed05343e1b9e54ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1MTMwNA==", "bodyText": "Remove the \u2018ToPhase\u2019 from the method name and there is no more reference to phases any longer. It just the name that is maybe not named in the best way. Nothing more I\u2019d say.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r455951304", "createdAt": "2020-07-16T17:26:44Z", "author": {"login": "mswiderski"}, "path": "api/kogito-api/src/main/java/org/kie/api/runtime/process/WorkItemHandler.java", "diffHunk": "@@ -81,7 +81,7 @@ default void transitionToPhase(WorkItem workItem, WorkItemManager manager, Trans\n         throw new UnsupportedOperationException();\n     }\n \n-    default Set<String> allowedPhases(WorkItem workItem) {\n+    default Set<String> allowedPhases(String phaseId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNzM1Ng=="}, "originalCommit": {"oid": "295af1cc84cac887243cb2e8ed05343e1b9e54ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg1NDUzOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNjoxOFrOG1p3SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDo1N1rOG1tyLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzYwOQ==", "bodyText": "please review code style, its missing spaces between vars, see https://github.com/kiegroup/droolsjbpm-build-bootstrap/tree/master/ide-configuration", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r458913609", "createdAt": "2020-07-22T16:16:18Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -86,10 +87,8 @@\n     @GET()\n     @Path(\"/{id}/$taskName$/{workItemId}/schema\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n-        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n-        process.instances().findById(id).ifPresent(pi ->jsonSchema.put(\"phases\",pi.allowedPhases(workItemId)));\n-        return jsonSchema;\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId , @QueryParam(\"user\") final String user, @QueryParam(\"group\") final List<String> groups) {\n+        return JsonSchemaUtil.addPhases(process,application,id,workItemId, policies(user,groups),JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e18b2c3dfe9641116d8a5fd2f240c74ef0da549"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzgzNw==", "bodyText": "I have it configured, but it was not appliead automatically to template file because is not considered source, I applied it manually now", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r458977837", "createdAt": "2020-07-22T17:54:57Z", "author": {"login": "fjtirado"}, "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -86,10 +87,8 @@\n     @GET()\n     @Path(\"/{id}/$taskName$/{workItemId}/schema\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId) {\n-        Map<String,Object> jsonSchema = JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\");\n-        process.instances().findById(id).ifPresent(pi ->jsonSchema.put(\"phases\",pi.allowedPhases(workItemId)));\n-        return jsonSchema;\n+    public Map<String,Object> getSchemaAndPhases(@PathParam(\"id\") final String id, @PathParam(\"workItemId\") final String workItemId , @QueryParam(\"user\") final String user, @QueryParam(\"group\") final List<String> groups) {\n+        return JsonSchemaUtil.addPhases(process,application,id,workItemId, policies(user,groups),JsonSchemaUtil.load(this.getClass().getClassLoader(),process.id(),\"$taskName$\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzYwOQ=="}, "originalCommit": {"oid": "8e18b2c3dfe9641116d8a5fd2f240c74ef0da549"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg2MTE3OnYy", "diffSide": "RIGHT", "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzo1NVrOG1p7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1Njo0N1rOG1t2ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Mockito.when(process.instances()).thenReturn(processInstances);\n          \n          \n            \n                    when(process.instances()).thenReturn(processInstances);", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r458914640", "createdAt": "2020-07-22T16:17:55Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "diffHunk": "@@ -67,4 +82,30 @@ void testJsonSchema() throws IOException {\n         assertTrue((Boolean)((Map)properties.get(\"approved\")).get(\"output\"));\n         assertTrue((Boolean)((Map)properties.get(\"traveller\")).get(\"input\"));\n     }\n+\n+    @Test\n+    <T> void testJsonSchemaPhases() throws IOException {\n+        InputStream in = new ByteArrayInputStream(example.getBytes());\n+        Policy<T>[] policies = new Policy[0];\n+        Map<String, Object> schemaMap = JsonSchemaUtil.load(in);\n+        Process<T> process = Mockito.mock(Process.class);\n+        ProcessInstances<T> processInstances = Mockito.mock(ProcessInstances.class);\n+        Mockito.when(process.instances()).thenReturn(processInstances);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e18b2c3dfe9641116d8a5fd2f240c74ef0da549"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODkyMg==", "bodyText": "Using static import now (Im not fan of them, but in this case I agree save a lot of code)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/631#discussion_r458978922", "createdAt": "2020-07-22T17:56:47Z", "author": {"login": "fjtirado"}, "path": "jbpm/jbpm-flow/src/test/java/org/jbpm/util/JsonSchemaUtilTest.java", "diffHunk": "@@ -67,4 +82,30 @@ void testJsonSchema() throws IOException {\n         assertTrue((Boolean)((Map)properties.get(\"approved\")).get(\"output\"));\n         assertTrue((Boolean)((Map)properties.get(\"traveller\")).get(\"input\"));\n     }\n+\n+    @Test\n+    <T> void testJsonSchemaPhases() throws IOException {\n+        InputStream in = new ByteArrayInputStream(example.getBytes());\n+        Policy<T>[] policies = new Policy[0];\n+        Map<String, Object> schemaMap = JsonSchemaUtil.load(in);\n+        Process<T> process = Mockito.mock(Process.class);\n+        ProcessInstances<T> processInstances = Mockito.mock(ProcessInstances.class);\n+        Mockito.when(process.instances()).thenReturn(processInstances);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDY0MA=="}, "originalCommit": {"oid": "8e18b2c3dfe9641116d8a5fd2f240c74ef0da549"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 45, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}