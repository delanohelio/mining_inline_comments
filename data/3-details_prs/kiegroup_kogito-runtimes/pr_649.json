{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MTgxMTA3", "number": 649, "title": "[KOGITO-2854] drools-core unfork", "bodyText": "", "createdAt": "2020-07-24T09:26:16Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649", "merged": true, "mergeCommit": {"oid": "75d2af2b0a3076119f727b53f643a2b636574a5f"}, "closed": true, "closedAt": "2020-08-04T18:16:51Z", "author": {"login": "mariofusco"}, "timelineItems": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4CkpogFqTQ1NDc1NDM1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7obBgABqjM2MjA4MTgyOTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzU0MzU2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#pullrequestreview-454754356", "createdAt": "2020-07-24T09:36:31Z", "commit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "state": "COMMENTED", "comments": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozNjozMVrOG2pMIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo0NTowMlrOG2sYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MTEzOA==", "bodyText": "Back to the Future", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459951138", "createdAt": "2020-07-24T09:36:31Z", "author": {"login": "danielezonca"}, "path": "api/kogito-timer/src/main/java/org/kie/kogito/timer/TimerInstance.java", "diffHunk": "@@ -1,11 +1,11 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MTkyOA==", "bodyText": "Side note: this change makes kie-internal and kogito-internal diverge", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459951928", "createdAt": "2020-07-24T09:38:19Z", "author": {"login": "danielezonca"}, "path": "api/kogito-internal/src/main/java/org/kie/internal/logger/KnowledgeRuntimeLoggerFactory.java", "diffHunk": "@@ -97,10 +97,10 @@ private static synchronized KieLoggers getKnowledgeRuntimeLoggerProvider() {\n     @SuppressWarnings(\"unchecked\")\n     private static void loadProvider() {\n         try {\n-            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl\" );\n+            Class<KieLoggers> cls = (Class<KieLoggers>) Class.forName( \"org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl\" );\n             setKnowledgeRuntimeLoggerProvider( cls.newInstance() );\n         } catch ( Exception e ) {\n-            throw new RuntimeException( \"Provider org.drools.core.audit.KnowledgeRuntimeLoggerProviderImpl could not be set.\",\n+            throw new RuntimeException( \"Provider org.drools.core.audit.KogitoKnowledgeRuntimeLoggerProviderImpl could not be set.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MjcwMg==", "bodyText": "Is this needed? I expect the change should be in StaticServiceRegistry and not here", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459962702", "createdAt": "2020-07-24T10:02:05Z", "author": {"login": "danielezonca"}, "path": "drools/drools-compiler/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -1,2 +1 @@\n-org.kie.api.KieServices = org.drools.compiler.kie.builder.impl.KieServicesImpl\n-org.kie.internal.builder.KnowledgeBuilderFactoryService = org.drools.compiler.builder.impl.KnowledgeBuilderFactoryServiceImpl\n+org.kie.internal.builder.KnowledgeBuilderFactoryService = org.drools.compiler.builder.impl.KogitoKnowledgeBuilderFactoryServiceImpl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NjYyOQ==", "bodyText": "This SerializationHelper class is now the only remained class in drools-compiler/test. I think it should be removed or if it is imported in another module as test dependency it should be moved somewhere else.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459976629", "createdAt": "2020-07-24T10:36:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-compiler/src/test/java/org/drools/compiler/integrationtests/SerializationHelper.java", "diffHunk": "@@ -43,36 +44,36 @@\n     public static <T> T serializeObject(final T obj,\n                                         final ClassLoader classLoader) throws IOException,\n             ClassNotFoundException {\n-        return (T) DroolsStreamUtils.streamIn(DroolsStreamUtils.streamOut(obj), classLoader);\n+        return (T) DroolsStreamUtils.streamIn( DroolsStreamUtils.streamOut(obj), classLoader);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession,\n                                                      dispose,\n                                                      true);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final boolean dispose,\n-                                                                                 final boolean testRoundTrip) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final boolean dispose,\n+                                                                                  final boolean testRoundTrip) throws Exception {\n         return getSerialisedStatefulKnowledgeSession(ksession, ksession.getKieBase(), dispose);\n     }\n \n-    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n+    public static StatefulKnowledgeSession getSerialisedStatefulKnowledgeSession( final KieSession ksession,\n+                                                                                  final KieBase kbase,\n+                                                                                  final boolean dispose) throws Exception {\n         return getSerialisedStatefulKnowledgeSessionWithMessage(ksession, kbase, dispose).getSession();\n     }\n \n-    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage(final KieSession ksession,\n-                                                                                 final KieBase kbase,\n-                                                                                 final boolean dispose) throws Exception {\n-        final ProtobufMarshaller marshaller = (ProtobufMarshaller) MarshallerFactory.newMarshaller(kbase,\n-                                                                                                   (ObjectMarshallingStrategy[]) ksession.getEnvironment().get(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES));\n+    public static ReadSessionResult getSerialisedStatefulKnowledgeSessionWithMessage( final KieSession ksession,\n+                                                                                      final KieBase kbase,\n+                                                                                      final boolean dispose) throws Exception {\n+        ObjectMarshallingStrategy[] strategies = ( ObjectMarshallingStrategy[]) ksession.getEnvironment().get( EnvironmentName.OBJECT_MARSHALLING_STRATEGIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODk2MA==", "bodyText": "We are in 2020 :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459978960", "createdAt": "2020-07-24T10:42:07Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/KogitoKnowledgeRuntimeLoggerProviderImpl.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTMwMg==", "bodyText": "Can you please clarify? This class seems not Kogito specific so don't we have it already in drools-core?\nIf we can use kie7 version we can probably remove also KogitoWorkingMemoryLogger, KogitoWorkingMemoryInMemoryLogger and KogitoWorkingMemoryFileLogger", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981302", "createdAt": "2020-07-24T10:48:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowLogEvent.java", "diffHunk": "@@ -16,16 +16,17 @@\n \n package org.drools.core.audit.event;\n \n+import org.kie.api.runtime.process.ProcessInstance;\n+\n /**\n- * An event filter that can be used to filter log events.\n+ * A ruleflow event logged by the WorkingMemoryLogger.\n+ * It is a snapshot of the event as it was thrown by the working memory.\n+ * It contains the process name and id.\n  */\n-public interface ILogEventFilter {\n-\n-    /**\n-     * Returns whether the given event should be filtered from the event log or not.\n-     * @param event The log event\n-     * @return Whether the event should be filtered from the event log or not.\n-     */\n-    boolean acceptEvent(LogEvent event);\n+public class KogitoRuleFlowLogEvent extends RuleFlowLogEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQwMA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981400", "createdAt": "2020-07-24T10:48:17Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowNodeLogEvent.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowNodeLogEvent extends RuleFlowNodeLogEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MTQ3OQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459981479", "createdAt": "2020-07-24T10:48:31Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/audit/event/KogitoRuleFlowVariableLogEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.audit.event;\n+\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoRuleFlowVariableLogEvent extends RuleFlowVariableLogEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MzEyNA==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459983124", "createdAt": "2020-07-24T10:52:53Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4Mzg0Mw==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459983843", "createdAt": "2020-07-24T10:54:50Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDIxMg==", "bodyText": "Are they needed? RuleFlowGroup should not be used in Kogito so I do not expect a Kogito specific interface for that", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459984212", "createdAt": "2020-07-24T10:55:46Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoInternalAgenda.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.common;\n+\n+public interface KogitoInternalAgenda\n+    extends\n+    InternalAgenda {\n+\n+    boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId);\n+\n+    /**\n+     * Activates the <code>RuleFlowGroup</code> with the given name.\n+     * All activations in the given <code>RuleFlowGroup</code> are added to the agenda.\n+     * As long as the <code>RuleFlowGroup</code> remains active,\n+     * its activations are automatically added to the agenda.\n+     * The given processInstanceId and nodeInstanceId define the process context\n+     * in which this <code>RuleFlowGroup</code> is used.\n+     */\n+    void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId);\n+\n+    /**\n+     * Returns true if there is at least one activation of the given rule name\n+     * in the given ruleflow group name\n+     */\n+    boolean isRuleInstanceAgendaItem(String ruleflowGroupName,\n+                                     String ruleName,\n+                                     String processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDgxNg==", "bodyText": "If we update the date, I think it is better to use 2020 :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459984816", "createdAt": "2020-07-24T10:57:13Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessEventSupport.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTIyOA==", "bodyText": "Do we really need to create this copy with just a different name?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985228", "createdAt": "2020-07-24T10:58:19Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeLeftEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {\n+public class KogitoProcessNodeLeftEventImpl extends ProcessEvent implements ProcessNodeLeftEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTM3Mg==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985372", "createdAt": "2020-07-24T10:58:45Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessNodeTriggeredEventImpl.java", "diffHunk": "@@ -20,13 +20,13 @@\n import org.kie.api.runtime.KieRuntime;\n import org.kie.api.runtime.process.NodeInstance;\n \n-public class ProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {\n+public class KogitoProcessNodeTriggeredEventImpl extends ProcessEvent implements ProcessNodeTriggeredEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTQ1NQ==", "bodyText": "Can you please extend ProcessVariableChangedEventImpl to add getNodeInstance method?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459985455", "createdAt": "2020-07-24T10:58:58Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/event/KogitoProcessVariableChangedEventImpl.java", "diffHunk": "@@ -24,21 +24,21 @@\n import org.kie.api.runtime.process.NodeInstance;\n import org.kie.api.runtime.process.ProcessInstance;\n \n-public class ProcessVariableChangedEventImpl extends ProcessEvent implements ProcessVariableChangedEvent {\n+public class KogitoProcessVariableChangedEventImpl  extends ProcessEvent implements ProcessVariableChangedEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjE5MA==", "bodyText": "Do we need this rename? As far as I can see the only difference is an unused String dataType parameter to unmarshal method", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986190", "createdAt": "2020-07-24T11:00:33Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoSerializablePlaceholderResolverStrategy.java", "diffHunk": "@@ -25,18 +25,16 @@\n import org.kie.api.marshalling.ObjectMarshallingStrategy;\n import org.kie.api.marshalling.ObjectMarshallingStrategyAcceptor;\n \n-public class SerializablePlaceholderResolverStrategy\n-    implements\n-    ObjectMarshallingStrategy {\n+public class KogitoSerializablePlaceholderResolverStrategy implements ObjectMarshallingStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ4OQ==", "bodyText": "I have the impression this is just a rename so we should be able to revert the change and delete this file ( to keep original drools-core version)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986489", "createdAt": "2020-07-24T11:01:23Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/impl/EnvironmentFactory.java", "diffHunk": "@@ -28,7 +28,7 @@ public static Environment newEnvironment() {\n             Environment env = new EnvironmentImpl();\n             env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, \n                     new ObjectMarshallingStrategy [] {\n-                        new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)\n+                        new KogitoSerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjU3MQ==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986571", "createdAt": "2020-07-24T11:01:37Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/impl/KogitoStatefulKnowledgeSessionImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4Njc4MA==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459986780", "createdAt": "2020-07-24T11:02:05Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoComponentFactoryFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzIwOQ==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987209", "createdAt": "2020-07-24T11:03:15Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoInternalFactHandle.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzI5NQ==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987295", "createdAt": "2020-07-24T11:03:28Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoFactHandleFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NzkwOA==", "bodyText": "2020", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459987908", "createdAt": "2020-07-24T11:05:00Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/kogito/factory/KogitoDefaultFactHandle.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODY4MA==", "bodyText": "I have the impression KogitoSerializablePlaceholderResolverStrategy is just a rename and if we revert that, we should be able to remove this file too", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459988680", "createdAt": "2020-07-24T11:07:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerReaderContext.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.definition.process.Process;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+public class KogitoMarshallerReaderContext extends MarshallerReaderContext  {\n+\n+    public Map<String, Process> processes = new HashMap<>();\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              kBase,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         Map<String, Process> processes,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         Environment env) throws IOException {\n+        this( stream,\n+              null,\n+              sinks,\n+              resolverStrategyFactory,\n+              timerReaders,\n+              true,\n+              true,\n+              env );\n+        this.processes = processes;\n+    }\n+\n+    public KogitoMarshallerReaderContext(InputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Map<Integer, TimersInputMarshaller> timerReaders,\n+                                         boolean marshalProcessInstances,\n+                                         boolean marshalWorkItems,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, sinks, resolverStrategyFactory, timerReaders,\n+                marshalProcessInstances, marshalWorkItems, env);\n+\n+        if (this.kBase != null) {\n+            this.kBase.getProcesses().forEach( p -> this.processes.put(p.getId(), p));\n+        }\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4ODgwOQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459988809", "createdAt": "2020-07-24T11:07:21Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/KogitoMarshallerWriteContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.marshalling.impl;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+import org.drools.core.common.BaseNode;\n+import org.drools.core.common.InternalWorkingMemory;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.ObjectMarshallingStrategyStore;\n+import org.kie.api.runtime.Environment;\n+\n+/**\n+ * Extension to default <code>MarshallerWriteContext</code> that allows to pass additional\n+ * information to marshaller strategies, such as process instance id, task it, state\n+ */\n+public class KogitoMarshallerWriteContext extends MarshallerWriteContext {\n+\n+    public KogitoMarshallerWriteContext( OutputStream stream,\n+                                         InternalKnowledgeBase kBase,\n+                                         InternalWorkingMemory wm,\n+                                         Map<Integer, BaseNode> sinks,\n+                                         ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                         Environment env) throws IOException {\n+        super(stream, kBase, wm, sinks, resolverStrategyFactory, env);\n+    }\n+\n+    public KogitoMarshallerWriteContext(OutputStream stream,\n+                                  InternalKnowledgeBase kBase,\n+                                  InternalWorkingMemory wm,\n+                                  Map<Integer, BaseNode> sinks,\n+                                  ObjectMarshallingStrategyStore resolverStrategyFactory,\n+                                  boolean marshalProcessInstances,\n+                                  boolean marshalWorkItems,\n+                                  Environment env) throws IOException {\n+        super(stream, kBase, wm, sinks, resolverStrategyFactory, marshalProcessInstances, marshalWorkItems, env);\n+    }\n+\n+    @Override\n+    protected ObjectMarshallingStrategy[] getMarshallingStrategy() {\n+        return new ObjectMarshallingStrategy[]{new KogitoSerializablePlaceholderResolverStrategy( ClassObjectMarshallingStrategyAcceptor.DEFAULT  )};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTU5MA==", "bodyText": "Let's update to 2020 directly :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459989590", "createdAt": "2020-07-24T11:09:30Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/ruleunit/InternalStoreCallback.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2005 JBoss Inc\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4OTgwMQ==", "bodyText": "Back to the future", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459989801", "createdAt": "2020-07-24T11:09:59Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/time/KogitoTimerServiceFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDgzMA==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459990830", "createdAt": "2020-07-24T11:12:41Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTk0OA==", "bodyText": "We can probably move this method to StringUtils class and remove this one. Btw that class already contains ucFirst method that is equivalment except for null check", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459991948", "createdAt": "2020-07-24T11:15:40Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/util/KogitoStringUtils.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package org.drools.core.util;\n+\n+public class KogitoStringUtils {\n+\n+    public static String capitalize(String string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MjMxMw==", "bodyText": "Do we use kie.conf in Kogito?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459992313", "createdAt": "2020-07-24T11:16:30Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/resources/META-INF/kie.conf", "diffHunk": "@@ -1,5 +1,2 @@\n-org.kie.api.io.KieResources = org.drools.core.io.impl.ResourceFactoryServiceImpl\n-org.kie.api.marshalling.KieMarshallers = org.drools.core.marshalling.impl.MarshallerProviderImpl\n-org.kie.api.concurrent.KieExecutors = org.drools.core.concurrent.ExecutorProviderImpl\n-\n+org.drools.core.reteoo.KieComponentFactoryFactory=org.drools.core.kogito.factory.KogitoComponentFactoryFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzEwNg==", "bodyText": "This is a new class specific for Kogito so we should be able to update the signature to KogitoInternalFactHandle and avoid an internal cast.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993106", "createdAt": "2020-07-24T11:18:29Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/EntryPointDataProcessor.java", "diffHunk": "@@ -72,6 +73,6 @@ public void delete(DataHandle dh, RuleImpl rule, TerminalNode terminalNode, Fact\n \n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n         (( WorkingMemoryEntryPoint ) entryPoint).delete( fh, rule, terminalNode, fhState );\n-        handles.remove( fh.getDataHandle() );\n+        handles.remove( (( KogitoInternalFactHandle ) fh).getDataHandle() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzM2MQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993361", "createdAt": "2020-07-24T11:19:09Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/FieldDataStore.java", "diffHunk": "@@ -92,14 +93,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update(InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach(s -> s.update(dh, obj, mask, modifiedClass, activation));\n         subscribers.forEach(s -> s.update(dh, (T) obj));\n     }\n \n     @Override\n     public void delete(InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         if (dh != this.handle) {\n             throw new IllegalArgumentException(\"The given handle is not contained in this DataStore\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzQ2Mw==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993463", "createdAt": "2020-07-24T11:19:25Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/ListDataStore.java", "diffHunk": "@@ -78,14 +79,14 @@ public void subscribe(DataProcessor processor) {\n \n     @Override\n     public void update( InternalFactHandle fh, Object obj, BitMask mask, Class<?> modifiedClass, Activation activation) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();\n         entryPointSubscribers.forEach( s -> s.update( dh, obj, mask, modifiedClass, activation ) );\n         subscribers.forEach( s -> s.update(dh, (T) obj) );\n     }\n \n     @Override\n     public void delete( InternalFactHandle fh, RuleImpl rule, TerminalNode terminalNode, FactHandle.State fhState) {\n-        DataHandle dh = fh.getDataHandle();\n+        DataHandle dh = ((KogitoInternalFactHandle)fh).getDataHandle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MzYyMw==", "bodyText": "Back to the future", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459993623", "createdAt": "2020-07-24T11:19:50Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2005 JBoss Inc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDAxNA==", "bodyText": "To be removed? We already have org.drools.core.util.KogitoStringUtils", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459994014", "createdAt": "2020-07-24T11:20:52Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-ruleunits/src/main/java/org/kie/kogito/rules/units/StringUtils.java", "diffHunk": "@@ -14,17 +14,20 @@\n  * limitations under the License.\n  */\n \n-package org.drools.core.util.asm;\n+package org.kie.kogito.rules.units;\n \n-public class MethodCompareB {\n+public class StringUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDM4NQ==", "bodyText": "Please revert this change in the README", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459994385", "createdAt": "2020-07-24T11:21:42Z", "author": {"login": "danielezonca"}, "path": "drools/kogito-scenario-simulation/README.md", "diffHunk": "@@ -29,7 +29,7 @@ package testscenario;\n  * KogitoJunitActivator is a custom JUnit runner that enables the execution of Test Scenario files (*.scesim).\n  * This activator class, when executed, will load all scesim files available in the project and run them.\n  * Each row of the scenario will generate a test JUnit result. */\n-@org.junit.runner.RunWith(org.kogito.scenariosimulation.runner.KogitoJunitActivator.class)\n+@org.junit.runner.RunWith(KogitoJunitActivator.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTE4MA==", "bodyText": "Is this needed? I expect that org.kie.kogito:drools-core already excludes them. If not, please fix it there so that users will not have to face with it", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459995180", "createdAt": "2020-07-24T11:23:52Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/pom.xml", "diffHunk": "@@ -36,6 +36,16 @@\n     <dependency>\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>drools-core</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.kie</groupId>\n+          <artifactId>kie-api</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.kie</groupId>\n+          <artifactId>kie-internal</artifactId>\n+        </exclusion>\n+      </exclusions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTg0NQ==", "bodyText": "Do we need drools-core-dynamic in Kogito? I expect only -static should be used", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459995845", "createdAt": "2020-07-24T11:25:30Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core-dynamic/pom.xml", "diffHunk": "@@ -19,8 +19,18 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NzYzNQ==", "bodyText": "Have we changed the interface? If these methods are not supposed to be used but just to comply the interface why don't raise an UnsupportedOperationException?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459997635", "createdAt": "2020-07-24T11:30:09Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java", "diffHunk": "@@ -293,17 +294,26 @@ public void writeWorkItem(MarshallerWriteContext context, org.drools.core.proces\n     }\n \n     @Override\n-    public org.drools.core.process.instance.WorkItem readWorkItem(MarshallerReaderContext context) {\n+    public KogitoWorkItem readWorkItem( MarshallerReaderContext context) {\n         try {\n             ExtensionRegistry registry = PersisterHelper.buildRegistry(context, null);\n             Header _header = PersisterHelper.readFromStreamWithHeaderPreloaded(context, registry);\n             JBPMMessages.WorkItem _workItem = JBPMMessages.WorkItem.parseFrom(_header.getPayload(), registry);\n-            return (org.drools.core.process.instance.WorkItem) readWorkItem(context, _workItem, persistWorkItemVars);\n+            return ( KogitoWorkItem ) readWorkItem(context, _workItem, persistWorkItemVars);\n         } catch (IOException e) {\n             throw new IllegalArgumentException( \"IOException while fetching work item instance : \" + e.getMessage(), e );\n         } catch (ClassNotFoundException e) {\n             throw new IllegalArgumentException( \"ClassNotFoundException while fetching work item instance : \" + e.getMessage(), e );\n         }\n     }\n \n+    @Override\n+    public void writeProcessTimers(MarshallerWriteContext context) throws IOException {\n+\n+    }\n+\n+    @Override\n+    public void readProcessTimers(MarshallerReaderContext context) throws IOException, ClassNotFoundException {\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODI0Mw==", "bodyText": "Do we have a ticket to track these TODOs?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459998243", "createdAt": "2020-07-24T11:31:38Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/LightWorkItemManager.java", "diffHunk": "@@ -218,14 +215,50 @@ public void registerWorkItemHandler(String workItemName, WorkItemHandler handler\n         this.workItemHandlers.put(workItemName, handler);\n     }\n \n+    @Override\n+    public void internalExecuteWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalExecuteWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAddWorkItem( WorkItem workItem ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAddWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public void internalAbortWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.internalAbortWorkItem -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public Set<WorkItem> getWorkItems() {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItems -> TODO\" );\n+\n+    }\n+\n+    @Override\n+    public WorkItem getWorkItem( long id ) {\n+        throw new UnsupportedOperationException( \"org.jbpm.process.instance.LightWorkItemManager.getWorkItem -> TODO\" );\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5ODcyNA==", "bodyText": "Is it possible to change the signature to use KogitoWorkingMemory?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459998724", "createdAt": "2020-07-24T11:32:54Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/event/DefaultSignalManager.java", "diffHunk": "@@ -116,7 +117,7 @@ public SignalProcessInstanceAction(MarshallerReaderContext context) throws IOExc\n \t\t}\n \t\t\n \t\tpublic void execute(InternalWorkingMemory workingMemory) {\n-\t\t\tProcessInstance processInstance = workingMemory.getProcessInstance(processInstanceId);\n+\t\t\tProcessInstance processInstance = ((KogitoWorkingMemory)workingMemory).getProcessInstance(processInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTA4NA==", "bodyText": "Legacy code? Is RuleFlowGroup working in Kogito?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r459999084", "createdAt": "2020-07-24T11:33:42Z", "author": {"login": "danielezonca"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/process/instance/impl/RuleConstraintEvaluator.java", "diffHunk": "@@ -103,7 +104,7 @@ public boolean evaluate(NodeInstance instance,\n         \t((Node) instance.getNode()).getUniqueId() + \"-\" + \n         \t((Node) connection.getTo()).getUniqueId() + \"-\" + connection.getToType();\n \n-        return agenda.isRuleActiveInRuleFlowGroup( \"DROOLS_SYSTEM\", rule, processInstance.getId() );\n+        return ((KogitoInternalAgenda)agenda).isRuleActiveInRuleFlowGroup(\"DROOLS_SYSTEM\", rule, processInstance.getId() );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMDkyNQ==", "bodyText": "To be updated before merging", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460000925", "createdAt": "2020-07-24T11:38:36Z", "author": {"login": "danielezonca"}, "path": "pom.xml", "diffHunk": "@@ -141,6 +141,8 @@\n     <version.org.mockito>3.3.3</version.org.mockito>\n     <version.org.mvel>2.4.7.Final</version.org.mvel>\n     <version.org.kie7>7.40.0.Final</version.org.kie7>\n+<!--    <version.org.kie7>7.39.0.Final</version.org.kie7>-->\n+    <version.org.kie7>7.41.0-SNAPSHOT</version.org.kie7>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwMzQ1Mg==", "bodyText": "These methods should be probably removed in Kogito because related to AgendaGroup/RuleFlowGroup", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#discussion_r460003452", "createdAt": "2020-07-24T11:45:02Z", "author": {"login": "danielezonca"}, "path": "drools/drools-core/src/main/java/org/drools/core/common/KogitoDefaultAgenda.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.drools.core.common;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class KogitoDefaultAgenda extends DefaultAgenda implements KogitoInternalAgenda {\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase) {\n+        super(kBase);\n+    }\n+\n+    public KogitoDefaultAgenda(InternalKnowledgeBase kBase, boolean initMain) {\n+        super(kBase, initMain);\n+    }\n+\n+    @Override\n+    public boolean isRuleActiveInRuleFlowGroup(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, processInstanceId);\n+    }\n+\n+    @Override\n+    public void activateRuleFlowGroup(String name, String processInstanceId, String nodeInstanceId) {\n+        InternalRuleFlowGroup ruleFlowGroup = (InternalRuleFlowGroup) getRuleFlowGroup( name );\n+        activateRuleFlowGroup( ruleFlowGroup, processInstanceId, nodeInstanceId );\n+    }\n+\n+    @Override\n+    public boolean isRuleInstanceAgendaItem(String ruleflowGroupName, String ruleName, String processInstanceId) {\n+        return isRuleInstanceAgendaItem(ruleflowGroupName, ruleName, (Object) processInstanceId);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e671d3df60a8d88720f8662e204d660f6467d03f", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e671d3df60a8d88720f8662e204d660f6467d03f", "committedDate": "2020-07-24T09:22:41Z", "message": "wip"}, "afterCommit": {"oid": "193f3995460b8dc0caf1e5b57f0212337e11c0f7", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/193f3995460b8dc0caf1e5b57f0212337e11c0f7", "committedDate": "2020-07-27T11:44:29Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjA5Mjg3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#pullrequestreview-457609287", "createdAt": "2020-07-29T14:58:26Z", "commit": {"oid": "4b540073f80ead6776878294310ba7ba42214c63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b540073f80ead6776878294310ba7ba42214c63", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4b540073f80ead6776878294310ba7ba42214c63", "committedDate": "2020-07-27T13:30:06Z", "message": "wip"}, "afterCommit": {"oid": "cb6239a4162e698b36357daa92fde4a02ffbc5dc", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb6239a4162e698b36357daa92fde4a02ffbc5dc", "committedDate": "2020-07-31T16:02:22Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDg2Mjgx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/649#pullrequestreview-460086281", "createdAt": "2020-08-03T14:43:17Z", "commit": {"oid": "abc306418e1260797279c36ec68e3a83d8f0e2d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93ab5291a1fc8b5b70b11e5edb507e6d26c569bc", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/93ab5291a1fc8b5b70b11e5edb507e6d26c569bc", "committedDate": "2020-08-03T15:58:41Z", "message": "wip"}, "afterCommit": {"oid": "7e40ff20ed0f2e2ec0bcb41a584a805244e717b2", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7e40ff20ed0f2e2ec0bcb41a584a805244e717b2", "committedDate": "2020-08-04T14:04:56Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/da00b5bc1374349d54e94b64fc81c6dafafc8bb7", "committedDate": "2020-08-04T15:32:54Z", "message": "compiler unfork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f8f7713d79965f2b0675c7e5c84718efd69868", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/38f8f7713d79965f2b0675c7e5c84718efd69868", "committedDate": "2020-08-04T15:32:54Z", "message": "core unfork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7c41e1916c46dba8df01c1a8f4cee37843aa7e3", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d7c41e1916c46dba8df01c1a8f4cee37843aa7e3", "committedDate": "2020-08-04T15:32:54Z", "message": "kogito fact handle factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8fa11f60c19a47c07a5d3a5be1c351a776364f", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0e8fa11f60c19a47c07a5d3a5be1c351a776364f", "committedDate": "2020-08-04T15:32:54Z", "message": "use drools timers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36eae1c54c64bbbd9188488d0717b70f302b7688", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/36eae1c54c64bbbd9188488d0717b70f302b7688", "committedDate": "2020-08-04T15:32:54Z", "message": "rebase master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080ae96b99004ca911c24f40788b2743ec956e01", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/080ae96b99004ca911c24f40788b2743ec956e01", "committedDate": "2020-08-04T15:32:54Z", "message": "Exclude kie-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adecaf2045018c6d63f90c6f653da3d9be046f30", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/adecaf2045018c6d63f90c6f653da3d9be046f30", "committedDate": "2020-08-04T15:32:54Z", "message": "Add jbpm forked file to Kogito's Drools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "605d30142e0e8e937569ccaf5064e04c6e5f11ef", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/605d30142e0e8e937569ccaf5064e04c6e5f11ef", "committedDate": "2020-08-04T15:32:54Z", "message": "4 errors to go\n\nonly processInstance to string missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a558d5ed0f5939ecc28f7004e85996b9ea6d13e", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3a558d5ed0f5939ecc28f7004e85996b9ea6d13e", "committedDate": "2020-08-04T15:32:54Z", "message": "Two errors to go"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848f837fb2b733c298aa2578fa95912cf9635e1f", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/848f837fb2b733c298aa2578fa95912cf9635e1f", "committedDate": "2020-08-04T15:32:54Z", "message": "Subclass StatefulKnowledgeSession"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0125532a0de8eabf85b61c8753251994b32e4080", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0125532a0de8eabf85b61c8753251994b32e4080", "committedDate": "2020-08-04T15:32:54Z", "message": "Implement getProcessInstance with long and unsupported in DummyWorkingMemory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8c25358e0bc27454b9f31b06f90e49c3d8ce10", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1d8c25358e0bc27454b9f31b06f90e49c3d8ce10", "committedDate": "2020-08-04T15:32:54Z", "message": "Correct factory for StatefulSession"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89c162e38d03374687428428326cc29eae1d58c0", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/89c162e38d03374687428428326cc29eae1d58c0", "committedDate": "2020-08-04T15:32:54Z", "message": "KogitoStringUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3588a1d70da52c121ebdb00574a6d1562c296eae", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3588a1d70da52c121ebdb00574a6d1562c296eae", "committedDate": "2020-08-04T15:32:54Z", "message": "fix all compilation problems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54975741a2bbb1f5a24836484741310a557d535b", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/54975741a2bbb1f5a24836484741310a557d535b", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62ffaffb46cf8d03a8cbd784eef6eb225852c9e", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c62ffaffb46cf8d03a8cbd784eef6eb225852c9e", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3124032fb2a204210d343405c3ed071b966e3d6", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b3124032fb2a204210d343405c3ed071b966e3d6", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce05e0227f97012af19156cb880e34d368adbfe", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/6ce05e0227f97012af19156cb880e34d368adbfe", "committedDate": "2020-08-04T15:32:54Z", "message": "wi\u00e8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8097dea6c7ffb27847efba018e515fd64c109aa", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b8097dea6c7ffb27847efba018e515fd64c109aa", "committedDate": "2020-08-04T15:32:54Z", "message": "Support KogitoDefaultAgenda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822a35ca901abb9918ed7db6eb2b551f74c7a8f1", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/822a35ca901abb9918ed7db6eb2b551f74c7a8f1", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf75bcfa735da305541082574d17c605e992599a", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bf75bcfa735da305541082574d17c605e992599a", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d4d97e5c73647a059c10cec59a8fb19d41508a", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b6d4d97e5c73647a059c10cec59a8fb19d41508a", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1daa5f6d33b18a2c8e6682448f389d457e67ec", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7c1daa5f6d33b18a2c8e6682448f389d457e67ec", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b1d9eefa9f8fa1108769204dc1bf24c74bf882", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/65b1d9eefa9f8fa1108769204dc1bf24c74bf882", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e0a196265298d0c2ac5aa750d8c9df7adfca7fc", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e0a196265298d0c2ac5aa750d8c9df7adfca7fc", "committedDate": "2020-08-04T15:32:54Z", "message": "Use Kogito's KieModuleModelImpl and Marshaller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188d49ba55976dfe5239f278614d7f43b8d6ad93", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/188d49ba55976dfe5239f278614d7f43b8d6ad93", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c317c9d4e8c37e3006a578c704c160a13e27bd93", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c317c9d4e8c37e3006a578c704c160a13e27bd93", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea0d43ce580c4116f74a4229d9aaac0861ed6af0", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/ea0d43ce580c4116f74a4229d9aaac0861ed6af0", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d25d49313116c5d2b3809bbf26cbb23e104f494", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/9d25d49313116c5d2b3809bbf26cbb23e104f494", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04994eeab4d8572333d1e6e512f650199e7e46f3", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/04994eeab4d8572333d1e6e512f650199e7e46f3", "committedDate": "2020-08-04T15:32:54Z", "message": "Revert to correct package for KogitoJunitActivator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2c61c68f88b5c2487b2d33680955e84b1fec5b1", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c2c61c68f88b5c2487b2d33680955e84b1fec5b1", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81cbfb50109495adaa4aed1178a653239b67f8f", "author": {"user": {"login": "lucamolteni", "name": "Luca Molteni"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c81cbfb50109495adaa4aed1178a653239b67f8f", "committedDate": "2020-08-04T15:32:54Z", "message": "use KogitoKnowledgeBuilderFactoryServiceImpl that doesn't have Jaxb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b5280ce5edc1c37f1e3c084369dd359faf4767", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c1b5280ce5edc1c37f1e3c084369dd359faf4767", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30bee7e473287e41fdcf95f88a78d583108d4912", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/30bee7e473287e41fdcf95f88a78d583108d4912", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac68fb45225b5258161df1f8663cc52319eefd0", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3ac68fb45225b5258161df1f8663cc52319eefd0", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14c0afdb29a6536601e8ed90a94ef6270489ccb", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/e14c0afdb29a6536601e8ed90a94ef6270489ccb", "committedDate": "2020-08-04T15:32:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fbe84a2c3d0b920e06ab903ea5c77c72d12bae1", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2fbe84a2c3d0b920e06ab903ea5c77c72d12bae1", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4b5c80960fa2d5548d6b01114203ba844c6b85e", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/a4b5c80960fa2d5548d6b01114203ba844c6b85e", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ed07f07d6e01c42e7f850869d4b38d667c6a1b3", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2ed07f07d6e01c42e7f850869d4b38d667c6a1b3", "committedDate": "2020-08-04T15:32:55Z", "message": "unfork drools-core-reflective"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ddc72bb3e1595cd15c299292dd15f2cf94bafb", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/09ddc72bb3e1595cd15c299292dd15f2cf94bafb", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc71fa5f4a1b90428630246d7ab28249d99b065", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/8bc71fa5f4a1b90428630246d7ab28249d99b065", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6ecdca594d33502650006a6a6c7f200e8551a5", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f6ecdca594d33502650006a6a6c7f200e8551a5", "committedDate": "2020-08-04T15:32:55Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245c35876b6a6d588274d12e474f05e7118758dd", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/245c35876b6a6d588274d12e474f05e7118758dd", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f9bacaf6de1bb0be0b0e573dc9ddc5781eab7e", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/43f9bacaf6de1bb0be0b0e573dc9ddc5781eab7e", "committedDate": "2020-08-04T15:32:55Z", "message": "remove KogitoStringUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c41ceabfe2a657d5b8c2134db5b68f8a2630df25", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c41ceabfe2a657d5b8c2134db5b68f8a2630df25", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0684c9a2a17dbad2577fc63bba5b749945c06322", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0684c9a2a17dbad2577fc63bba5b749945c06322", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793c6b0718dac85d17f23fc931e949f898325462", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/793c6b0718dac85d17f23fc931e949f898325462", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc504911a80b315572103c93fb7abfd380223cd6", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc504911a80b315572103c93fb7abfd380223cd6", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32fa590f3f5c6c1b583f7ae9863d18fa36fe8c3", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b32fa590f3f5c6c1b583f7ae9863d18fa36fe8c3", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "032fd4aa4714e99b41364087bc72d7c231f35e1b", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/032fd4aa4714e99b41364087bc72d7c231f35e1b", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046e3badad669ef4a5278d5f4252ad35eb10c945", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/046e3badad669ef4a5278d5f4252ad35eb10c945", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e40ff20ed0f2e2ec0bcb41a584a805244e717b2", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7e40ff20ed0f2e2ec0bcb41a584a805244e717b2", "committedDate": "2020-08-04T14:04:56Z", "message": "wip"}, "afterCommit": {"oid": "046e3badad669ef4a5278d5f4252ad35eb10c945", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/046e3badad669ef4a5278d5f4252ad35eb10c945", "committedDate": "2020-08-04T15:32:55Z", "message": "wip"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4070, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}