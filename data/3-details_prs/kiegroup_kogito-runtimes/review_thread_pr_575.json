{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Mzc2MTA2", "number": 575, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDowMTo1MFrOEHte_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDowMjowM1rOEHtfMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTIwNzAxOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/ElementAtIndexTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDowMTo1MFrOGnPBdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjoyNDoyOFrOGna4dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5Mzc4Mg==", "bodyText": "What about an assertion to verify that header value starts with warning prefix?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/575#discussion_r443793782", "createdAt": "2020-06-22T20:01:50Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/ElementAtIndexTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@QuarkusTest\n+public class ElementAtIndexTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testHeaderEmpty() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 1 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", nullValue())\n+               .body(\"'element at index'\", is(\"a\"));\n+    }\n+\n+    @Test\n+    public void testHeaderPopulated() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 47 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", notNullValue()) // a warning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7e8b786e4d2e5094603f285d9eaf78ec2944d51"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4ODA4Ng==", "bodyText": "it's only a helper feature [...] In fact this is more experimental because long story short the variant of DMN which uses the business domain + structured messages in the response is the one any client shall use if they need to process the messages\n\nHence no, the intent here is to show something is or is not available as a header, but no intention of setting an example how to parse it since it is not meant to be automatically parsed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/575#discussion_r443988086", "createdAt": "2020-06-23T06:24:28Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/ElementAtIndexTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@QuarkusTest\n+public class ElementAtIndexTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testHeaderEmpty() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 1 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", nullValue())\n+               .body(\"'element at index'\", is(\"a\"));\n+    }\n+\n+    @Test\n+    public void testHeaderPopulated() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 47 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", notNullValue()) // a warning", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5Mzc4Mg=="}, "originalCommit": {"oid": "d7e8b786e4d2e5094603f285d9eaf78ec2944d51"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTIwNzUzOnYy", "diffSide": "RIGHT", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/ElementAtIndexTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDowMjowNFrOGnPB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjoyNDozNlrOGna4ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5Mzg3Nw==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/575#discussion_r443793877", "createdAt": "2020-06-22T20:02:04Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/ElementAtIndexTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class ElementAtIndexTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testHeaderEmpty() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 1 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", nullValue())\n+               .body(\"'element at index'\", is(\"a\"));\n+    }\n+\n+    @Test\n+    public void testHeaderPopulated() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 47 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", notNullValue()) // a warning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7e8b786e4d2e5094603f285d9eaf78ec2944d51"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4ODEyNg==", "bodyText": "as above", "url": "https://github.com/kiegroup/kogito-runtimes/pull/575#discussion_r443988126", "createdAt": "2020-06-23T06:24:36Z", "author": {"login": "tarilabs"}, "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/ElementAtIndexTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class ElementAtIndexTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testHeaderEmpty() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 1 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", nullValue())\n+               .body(\"'element at index'\", is(\"a\"));\n+    }\n+\n+    @Test\n+    public void testHeaderPopulated() {\n+        given().body(\" { \\\"a list\\\" : [\\\"a\\\", \\\"b\\\", \\\"c\\\"], \\\"an index\\\" : 47 }\")\n+               .contentType(ContentType.JSON)\n+               .when()\n+               .post(\"/ElementAtIndex\")\n+               .then()\n+               .statusCode(200)\n+               .header(\"X-Kogito-decision-messages\", notNullValue()) // a warning", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5Mzg3Nw=="}, "originalCommit": {"oid": "d7e8b786e4d2e5094603f285d9eaf78ec2944d51"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4975, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}