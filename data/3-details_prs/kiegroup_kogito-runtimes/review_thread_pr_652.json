{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTg3Mjc1", "number": 652, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTo1Mzo0MVrOETh7xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTo1Njo0NFrOETh-Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTE0Mzc0OnYy", "diffSide": "RIGHT", "path": "addons/persistence/filesystem-persistence-addon/src/main/java/org/kie/kogito/persistence/filesystem/FileSystemProcessInstances.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTo1Mzo0MVrOG5UGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzoxMToyNFrOG56prQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MTI0Nw==", "bodyText": "unable to count process instances :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/652#discussion_r462751247", "createdAt": "2020-07-30T05:53:41Z", "author": {"login": "mswiderski"}, "path": "addons/persistence/filesystem-persistence-addon/src/main/java/org/kie/kogito/persistence/filesystem/FileSystemProcessInstances.java", "diffHunk": "@@ -64,24 +69,40 @@ public FileSystemProcessInstances(Process<?> process, Path storage, ProcessInsta\n     }\n \n     @Override\n-    public Optional findById(String id) {\n+    public Integer size() {\n+        try (Stream<Path> stream = Files.walk(storage)) {\n+            Long count = stream.filter(file -> !Files.isDirectory(file)).count();\n+            return count.intValue();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to read process instances \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca1f8d4f42d728f22820454835d7f83dfda044"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4Mjk1Nw==", "bodyText": "oops :)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/652#discussion_r463382957", "createdAt": "2020-07-31T03:11:24Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/filesystem-persistence-addon/src/main/java/org/kie/kogito/persistence/filesystem/FileSystemProcessInstances.java", "diffHunk": "@@ -64,24 +69,40 @@ public FileSystemProcessInstances(Process<?> process, Path storage, ProcessInsta\n     }\n \n     @Override\n-    public Optional findById(String id) {\n+    public Integer size() {\n+        try (Stream<Path> stream = Files.walk(storage)) {\n+            Long count = stream.filter(file -> !Files.isDirectory(file)).count();\n+            return count.intValue();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to read process instances \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MTI0Nw=="}, "originalCommit": {"oid": "cfca1f8d4f42d728f22820454835d7f83dfda044"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTE0NzcyOnYy", "diffSide": "RIGHT", "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTo1NToyNVrOG5UISg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzoxMjowMlrOG56qRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MTgxOA==", "bodyText": "could we have something else than NullPointerException?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/652#discussion_r462751818", "createdAt": "2020-07-30T05:55:25Z", "author": {"login": "mswiderski"}, "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "diffHunk": "@@ -46,12 +49,46 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n \n-public class FileSystemProcessInstancesTest {\n+class FileSystemProcessInstancesTest {\n \n     private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n \n     @Test\n-    public void testBasicFlow() {\n+    void testFindByIdReadMode() {\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\")).get(0);\n+        process.setProcessInstancesFactory(new FileSystemProcessInstancesFactory());\n+        process.configure();\n+\n+        ProcessInstance<BpmnVariables> processInstance = process.createInstance(BpmnVariables.create(Collections.singletonMap(\"test\", \"test\")));\n+\n+        processInstance.start();\n+\n+        ProcessInstances<BpmnVariables> instances = process.instances();\n+        assertThat(instances.size()).isOne();\n+        assertThatNullPointerException().isThrownBy(() -> instances.findById(processInstance.id(), ProcessInstanceReadMode.READ_ONLY).get().abort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca1f8d4f42d728f22820454835d7f83dfda044"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4MzExMQ==", "bodyText": "managed to change so now calling any operation on a read only process instance will throw a UnsupportedOperationException.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/652#discussion_r463383111", "createdAt": "2020-07-31T03:12:02Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "diffHunk": "@@ -46,12 +49,46 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n \n-public class FileSystemProcessInstancesTest {\n+class FileSystemProcessInstancesTest {\n \n     private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n \n     @Test\n-    public void testBasicFlow() {\n+    void testFindByIdReadMode() {\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\")).get(0);\n+        process.setProcessInstancesFactory(new FileSystemProcessInstancesFactory());\n+        process.configure();\n+\n+        ProcessInstance<BpmnVariables> processInstance = process.createInstance(BpmnVariables.create(Collections.singletonMap(\"test\", \"test\")));\n+\n+        processInstance.start();\n+\n+        ProcessInstances<BpmnVariables> instances = process.instances();\n+        assertThat(instances.size()).isOne();\n+        assertThatNullPointerException().isThrownBy(() -> instances.findById(processInstance.id(), ProcessInstanceReadMode.READ_ONLY).get().abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MTgxOA=="}, "originalCommit": {"oid": "cfca1f8d4f42d728f22820454835d7f83dfda044"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTE1MDI2OnYy", "diffSide": "RIGHT", "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTo1Njo0NFrOG5UJ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzoxMjoyOFrOG56qpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MjIyOQ==", "bodyText": "can we add a test case that checks that variables/error info can be easily accessed in readonly mode?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/652#discussion_r462752229", "createdAt": "2020-07-30T05:56:44Z", "author": {"login": "mswiderski"}, "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "diffHunk": "@@ -46,12 +49,46 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n \n-public class FileSystemProcessInstancesTest {\n+class FileSystemProcessInstancesTest {\n \n     private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n \n     @Test\n-    public void testBasicFlow() {\n+    void testFindByIdReadMode() {\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\")).get(0);\n+        process.setProcessInstancesFactory(new FileSystemProcessInstancesFactory());\n+        process.configure();\n+\n+        ProcessInstance<BpmnVariables> processInstance = process.createInstance(BpmnVariables.create(Collections.singletonMap(\"test\", \"test\")));\n+\n+        processInstance.start();\n+\n+        ProcessInstances<BpmnVariables> instances = process.instances();\n+        assertThat(instances.size()).isOne();\n+        assertThatNullPointerException().isThrownBy(() -> instances.findById(processInstance.id(), ProcessInstanceReadMode.READ_ONLY).get().abort());\n+        instances.findById(processInstance.id()).get().abort();\n+        assertThat(instances.size()).isZero();\n+    }\n+\n+    @Test\n+    void testValuesReadMode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca1f8d4f42d728f22820454835d7f83dfda044"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM4MzIwNg==", "bodyText": "extended the test case to cover that as well. Thanks", "url": "https://github.com/kiegroup/kogito-runtimes/pull/652#discussion_r463383206", "createdAt": "2020-07-31T03:12:28Z", "author": {"login": "cristianonicolai"}, "path": "addons/persistence/filesystem-persistence-addon/src/test/java/org/kie/persistence/filesystem/FileSystemProcessInstancesTest.java", "diffHunk": "@@ -46,12 +49,46 @@\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n \n-public class FileSystemProcessInstancesTest {\n+class FileSystemProcessInstancesTest {\n \n     private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n \n     @Test\n-    public void testBasicFlow() {\n+    void testFindByIdReadMode() {\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\")).get(0);\n+        process.setProcessInstancesFactory(new FileSystemProcessInstancesFactory());\n+        process.configure();\n+\n+        ProcessInstance<BpmnVariables> processInstance = process.createInstance(BpmnVariables.create(Collections.singletonMap(\"test\", \"test\")));\n+\n+        processInstance.start();\n+\n+        ProcessInstances<BpmnVariables> instances = process.instances();\n+        assertThat(instances.size()).isOne();\n+        assertThatNullPointerException().isThrownBy(() -> instances.findById(processInstance.id(), ProcessInstanceReadMode.READ_ONLY).get().abort());\n+        instances.findById(processInstance.id()).get().abort();\n+        assertThat(instances.size()).isZero();\n+    }\n+\n+    @Test\n+    void testValuesReadMode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MjIyOQ=="}, "originalCommit": {"oid": "cfca1f8d4f42d728f22820454835d7f83dfda044"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}