{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3ODI0MzM5", "number": 506, "title": "[KOGITO-1768] allow code scaffolding in kogito-maven-plugin", "bodyText": "@evacchi I had to rebase the old PR so instead I closed the old one, made the changes you suggested and open this one.\nIt is true that (except a minor thing to exclude generation of the rest service in the unlikely case that also the ws annotation are not available on the classpath) I didn't change much on the plugin itself. In particular I did the change to generate the sources in different folders depending on the type of the source file as we discussed but then I found it inconvenient and I undid it. In fact by doing so the user, in order to use the programmatic API and compile his project has to add as source folders in his project all the different folders where we put our code instead of just one. I'm open to discuss this but I didn't find this reasonable (and now I wonder if other libraries like jOOQ has the same problem and how they solved it). I still want to change the generated code and the programmatic API but this is out of the scope of this task and I opened another jira ( https://issues.redhat.com/browse/KOGITO-2074 ) to work on this.", "createdAt": "2020-05-14T08:08:12Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506", "merged": true, "mergeCommit": {"oid": "0ad41e51c901c5c15e4fd84677886437440b09f4"}, "closed": true, "closedAt": "2020-05-20T16:07:32Z", "author": {"login": "mariofusco"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchI2c9AH2gAyNDE3ODI0MzM5OmQxZTIzMjY2NTc0MDQ3YTQwNTNjNzdhMjM1MGU3Mzk5N2Y5MmFiZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjLWiKAFqTQxNTQ5MjI2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1e23266574047a4053c77a2350e73997f92abde", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/d1e23266574047a4053c77a2350e73997f92abde", "committedDate": "2020-05-14T08:04:18Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd11e10f79f0947f4e2fc63f05d784c6db6a84c3", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fd11e10f79f0947f4e2fc63f05d784c6db6a84c3", "committedDate": "2020-05-14T08:04:18Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c083dde75f47c9d1e34052a0c686d0a6181aa19", "author": {"user": {"login": "evacchi", "name": "Edoardo Vacchi"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/4c083dde75f47c9d1e34052a0c686d0a6181aa19", "committedDate": "2020-05-14T08:04:18Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d37c4484f1b129159bdf8046f1a2e91a5139fb", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/61d37c4484f1b129159bdf8046f1a2e91a5139fb", "committedDate": "2020-05-14T08:04:18Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa4b2d28589cf277d397d4921e54e2b7f704abe", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/3fa4b2d28589cf277d397d4921e54e2b7f704abe", "committedDate": "2020-05-14T08:05:15Z", "message": "[KOGITO-1768] allow code scaffolding in kogito-maven-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7686cd46cd5e47dd39b9907be4feae48466fe8d3", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7686cd46cd5e47dd39b9907be4feae48466fe8d3", "committedDate": "2020-05-14T08:05:15Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59e332b85a7dfa731b8e03c75f32acecfe9299f", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c59e332b85a7dfa731b8e03c75f32acecfe9299f", "committedDate": "2020-05-14T08:05:15Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzI3Nzk2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#pullrequestreview-411727796", "createdAt": "2020-05-14T11:53:45Z", "commit": {"oid": "c59e332b85a7dfa731b8e03c75f32acecfe9299f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1Mzo0NVrOGVYu2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1Mzo0NVrOGVYu2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3ODQ4OA==", "bodyText": "this is still using a \"naming convention,\" and I feel it's going to be quite fragile", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r425078488", "createdAt": "2020-05-14T11:53:45Z", "author": {"login": "evacchi"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -238,31 +233,46 @@ public void generateModel(ArchiveRootBuildItem root,\n \n     }\n \n-    private void writeResourceFiles(String projectPath, Collection<GeneratedFile> resourceFiles){\n-        resourceFiles.forEach(f -> {\n+    private void writeGeneratedFiles(Path projectPath, Collection<GeneratedFile> resourceFiles) {\n+        String restResourcePath = projectPath.resolve(generatedRestSourcesDir).toString();\n+        String resourcePath = projectPath.resolve(generatedResourcesDir).toString();\n+        String sourcePath = projectPath.resolve(generatedSourcesDir).toString();\n+\n+        for (GeneratedFile f : resourceFiles) {\n             try {\n-                writeGeneratedFile(f, projectPath);\n+                if (f.getType() == GeneratedFile.Type.RESOURCE) {\n+                    writeGeneratedFile(f, resourcePath);\n+                } else if (isCustomizable(f)) {\n+                    writeGeneratedFile(f, restResourcePath);\n+                } else {\n+                    writeGeneratedFile(f, sourcePath);\n+                }\n             } catch (IOException e) {\n-                logger.warn(String.format(\"Could not write resource file %s\", f.toString()), e);\n+                logger.warn(String.format(\"Could not write file '%s'\", f.toString()), e);\n             }\n-        });\n+        }\n     }\n \n+    private boolean isCustomizable(GeneratedFile f) {\n+        return f.relativePath().endsWith(\"Resource.java\")\n+                || (f.relativePath().contains(\"Query\") && f.relativePath().endsWith(\".java\"))\n+                || (f.relativePath().contains(\"DTO\") && f.relativePath().endsWith(\".java\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59e332b85a7dfa731b8e03c75f32acecfe9299f"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "159ba336ddc3058d3a314100e78e521ed9ccb5f1", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/159ba336ddc3058d3a314100e78e521ed9ccb5f1", "committedDate": "2020-05-14T18:11:36Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzM2Njgw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#pullrequestreview-413336680", "createdAt": "2020-05-18T07:33:10Z", "commit": {"oid": "159ba336ddc3058d3a314100e78e521ed9ccb5f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMzoxMFrOGWqu9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMzoxMFrOGWqu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMjAwNA==", "bodyText": "These checks are really error prone: it is enough to use one of these quarkus-spring artifacts to break it.\nI would suggest to find a better mechanism or at least looks for a more specific artifact. What about quarkus-core for Quarkus and spring-core?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#discussion_r426422004", "createdAt": "2020-05-18T07:33:10Z", "author": {"login": "danielezonca"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/AbstractKieMojo.java", "diffHunk": "@@ -45,36 +45,39 @@ protected void setSystemProperties(Map<String, String> properties) {\n     }\n \n     protected DependencyInjectionAnnotator discoverDependencyInjectionAnnotator(boolean dependencyInjection, MavenProject project) {\n-        if (!dependencyInjection) {\n-            return null;\n-        }\n-\n-        boolean hasSpring = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"spring\"));\n-        if (hasSpring) {\n-            return new SpringDependencyInjectionAnnotator();\n-        }\n+        if (dependencyInjection) {\n+            if ( hasSpring( project ) ) {\n+                return new SpringDependencyInjectionAnnotator();\n+            }\n \n-        boolean hasQuarkus = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"quarkus\"));\n-        if (hasQuarkus) {\n-            return new CDIDependencyInjectionAnnotator();\n+            if ( hasQuarkus( project ) ) {\n+                return new CDIDependencyInjectionAnnotator();\n+            }\n         }\n \n-        throw new IllegalStateException(\"Unable to find dependency injection annotator\");\n+        return null;\n     }\n \n     protected KogitoBuildContext discoverKogitoRuntimeContext(MavenProject project)  {\n-        boolean hasSpring = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"spring\"));\n-        if (hasSpring) {\n+        if ( hasSpring( project ) ) {\n             return new SpringBootKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n         }\n \n-        boolean hasQuarkus = project.getDependencies().stream().anyMatch(d -> d.getArtifactId().contains(\"quarkus\"));\n-        if (hasQuarkus) {\n+        if ( hasQuarkus( project ) ) {\n             return new QuarkusKogitoBuildContext(fqcn -> hasClassOnClasspath(project, fqcn));\n         }\n-        throw new IllegalStateException(\"Unable to determine Kogito runtime.\");\n+\n+        return null;\n     }\n-    \n+\n+    private boolean hasQuarkus( MavenProject project ) {\n+        return project.getDependencies().stream().anyMatch( d -> d.getArtifactId().contains( \"quarkus\" ) );\n+    }\n+\n+    private boolean hasSpring( MavenProject project ) {\n+        return project.getDependencies().stream().anyMatch( d -> d.getArtifactId().contains( \"spring\" ) );\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "159ba336ddc3058d3a314100e78e521ed9ccb5f1"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a1ea26bf9e9f44411123cfbd516d061f36c483", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/02a1ea26bf9e9f44411123cfbd516d061f36c483", "committedDate": "2020-05-19T16:14:47Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f33201d303fa3e1ab5a51f0eeb07ad25fa2147", "author": {"user": {"login": "mariofusco", "name": "Mario Fusco"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c7f33201d303fa3e1ab5a51f0eeb07ad25fa2147", "committedDate": "2020-05-20T10:11:47Z", "message": "wip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDkyMjYw", "url": "https://github.com/kiegroup/kogito-runtimes/pull/506#pullrequestreview-415492260", "createdAt": "2020-05-20T16:07:00Z", "commit": {"oid": "c7f33201d303fa3e1ab5a51f0eeb07ad25fa2147"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3487, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}