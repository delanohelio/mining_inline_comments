{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODg0MTcx", "number": 467, "title": "[KOGITO-1248] Add casemgmt tests", "bodyText": "Signed-off-by: ruromero rromerom@redhat.com\nFix https://issues.redhat.com/browse/KOGITO-1248\nAdded case management processes from JBPM7.x and implemented visitors and missing methods for DynamicNodes, MilestoneNodes and StateNodes", "createdAt": "2020-04-21T20:13:45Z", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467", "merged": true, "mergeCommit": {"oid": "b9226f55f1e336d7638e36f9a7c9b64f992e2eb4"}, "closed": true, "closedAt": "2020-05-11T01:30:12Z", "author": {"login": "ruromero"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaExVOgBqjMyNTk2NjQwNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgFaB-gFqTQwODgwODI3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74e3e309fc05a52a38d33d752898743ab7769fd7", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/74e3e309fc05a52a38d33d752898743ab7769fd7", "committedDate": "2020-04-21T20:11:37Z", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "b36881a30c27ac9101b92dce63b92df5c72a4f60", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b36881a30c27ac9101b92dce63b92df5c72a4f60", "committedDate": "2020-04-22T09:21:28Z", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b36881a30c27ac9101b92dce63b92df5c72a4f60", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/b36881a30c27ac9101b92dce63b92df5c72a4f60", "committedDate": "2020-04-22T09:21:28Z", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2ab16fddfb9586c39b243b901c30622281945c8d", "committedDate": "2020-04-22T11:25:44Z", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODcwOTMz", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-398870933", "createdAt": "2020-04-23T08:25:08Z", "commit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyNTowOFrOGKdDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyNjowOVrOGKdGqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw==", "bodyText": "if these are public maybe we should move them to some more descriptive class name. Like Messages or something like that?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413615023", "createdAt": "2020-04-23T08:25:08Z", "author": {"login": "evacchi"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "diffHunk": "@@ -48,15 +48,16 @@\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n+import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n public abstract class AbstractNodeVisitor extends AbstractVisitor {\n \n-    protected static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    protected static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    protected static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    protected static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    protected static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    protected static final String METADATA_EVENT_TYPE = \"EventType\";\n+    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n+    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n+    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n+    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n+    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n+    public static final String METADATA_EVENT_TYPE = \"EventType\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ==", "bodyText": "could it be mis-read? I was thinking this was pointing to the \"parent\" of this node (i.e. another node).", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r413615785", "createdAt": "2020-04-23T08:26:09Z", "author": {"login": "evacchi"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODc4MDk3", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-404878097", "createdAt": "2020-05-04T10:44:39Z", "commit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0NDo0MFrOGP7HHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowNjo1M1rOGP9YcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MDMwMA==", "bodyText": "Hmm, if some nodes have their own nodeContainer, then getNodeContainer() should return \"their own nodeContainer\" or not?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419350300", "createdAt": "2020-05-04T10:44:40Z", "author": {"login": "MarianMacik"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTEzMg==", "bodyText": "Hmm, it seems you swapped these 2 tests :)\nHere the name of the test is time cycle but you are setting time duration and vice versa.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351132", "createdAt": "2020-05-04T10:46:28Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -116,7 +118,11 @@ public void testBoundaryTimerTimeCycle() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeCycle(\"1s###5s\").cancelActivity(false).done()\n+                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)\n+                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_DURATION, duration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTI0Ng==", "bodyText": "Here's the second test.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351246", "createdAt": "2020-05-04T10:46:43Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -165,7 +172,13 @@ public void testBoundaryTimerTimeDuration() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeDuration(\"1s\").cancelActivity(false).done()\n+                .boundaryEventNode(4)\n+                    .name(\"BoundaryTimerEvent\")\n+                    .attachedTo(2)\n+                    .metaData(BoundaryEventNodeFactory.METADATA_TIME_CYCLE, timeCycle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MTU2Mg==", "bodyText": "Metadata interface/util class would be perfect!", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419351562", "createdAt": "2020-05-04T10:47:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractNodeVisitor.java", "diffHunk": "@@ -48,15 +48,16 @@\n import static org.jbpm.ruleflow.core.factory.MappableNodeFactory.METHOD_OUT_MAPPING;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_DONE;\n import static org.jbpm.ruleflow.core.factory.NodeFactory.METHOD_NAME;\n+import static org.jbpm.ruleflow.core.factory.StateBasedNodeFactory.METHOD_TIMER;\n \n public abstract class AbstractNodeVisitor extends AbstractVisitor {\n \n-    protected static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n-    protected static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n-    protected static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n-    protected static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n-    protected static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n-    protected static final String METADATA_EVENT_TYPE = \"EventType\";\n+    public static final String METADATA_TRIGGER_REF = \"TriggerRef\";\n+    public static final String METADATA_MESSAGE_TYPE = \"MessageType\";\n+    public static final String METADATA_TRIGGER_TYPE = \"TriggerType\";\n+    public static final String METADATA_TRIGGER_MAPPING = \"TriggerMapping\";\n+    public static final String METADATA_MAPPING_VARIABLE = \"MappingVariable\";\n+    public static final String METADATA_EVENT_TYPE = \"EventType\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTAyMw=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4MDYxNg==", "bodyText": "Why where these helper methods removed? Or did you want to make the setup more explicit?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419380616", "createdAt": "2020-05-04T11:52:11Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/BoundaryEventNodeFactory.java", "diffHunk": "@@ -118,24 +115,4 @@ public BoundaryEventNodeFactory eventType(String eventTypePrefix, String eventTy\n         super.eventFilter(filter);\n         return this;\n     }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        return metaData(METADATA_TIME_CYCLE, timeCycle);\n-    }\n-\n-    public BoundaryEventNodeFactory timeCycle(String timeCycle, String language) {\n-        eventType(EVENT_TYPE_TIMER, timeCycle);\n-        metaData(METADATA_TIME_CYCLE, timeCycle);\n-        return metaData(METADATA_LANGUAGE, language);\n-    }\n-\n-    public BoundaryEventNodeFactory timeDuration(String timeDuration) {\n-        eventType(EVENT_TYPE_TIMER, timeDuration);\n-        return metaData(METADATA_TIME_DURATION, timeDuration);\n-    }\n-\n-    public BoundaryEventNodeFactory cancelActivity(boolean cancelActivity) {\n-        return metaData(METADATA_CANCEL_ACTIVITY, cancelActivity);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NDQ4OQ==", "bodyText": "Hmm, what about calling it getParentNodeContainer()? This way it will be consistent, i.e. getNodeContainer() for getting this node's container and getParentNodeContainer() for getting the node container of this node parent :) Wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419384489", "createdAt": "2020-05-04T12:00:23Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/impl/NodeImpl.java", "diffHunk": "@@ -245,7 +245,7 @@ public Connection getTo() {\n         return getOutgoingConnections(org.jbpm.workflow.core.Node.CONNECTION_DEFAULT_TYPE);\n     }\n \n-    public NodeContainer getNodeContainer() {\n+    public NodeContainer getParentContainer() {\n         return parentNodeContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NjA1NQ==", "bodyText": "So in this case the actionType key is not present in a map? In this case we should probably assert for null in the previous if condition, right?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419386055", "createdAt": "2020-05-04T12:03:46Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/process/ProcessGenerationTest.java", "diffHunk": "@@ -194,7 +197,7 @@ private static void assertActions(Node eNode, ExtendedNodeImpl expected, Extende\n             try {\n                 if (expected.getActions(actionType) == null) {\n                     assertNull(current.getActions(actionType));\n-                } else {\n+                } else if (!EVENT_NODE_ENTER.equals(actionType) && !EVENT_NODE_EXIT.equals(actionType)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NzUwNQ==", "bodyText": "What is preventing us from testing these 3 cases specifically? You added many more and these are (presumably) tested.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419387505", "createdAt": "2020-05-04T12:06:53Z", "author": {"login": "MarianMacik"}, "path": "kogito-codegen/src/test/resources/org/kie/kogito/codegen/process/process-generation-test.skip.txt", "diffHunk": "@@ -1,3 +1,6 @@\n+cases/ScriptRoleAssignmentCase.bpmn2\n+cases/UserTaskWithStageCase.bpmn2\n+cases/UserTaskWithStageCaseAutoStart.bpmn2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTU1NjA2", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-405155606", "createdAt": "2020-05-04T16:36:01Z", "commit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozNjowMVrOGQIeEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0NToyOVrOGQLJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2OTE3MQ==", "bodyText": "just a formatting comment, it would be great to break all chained method calls into different lines.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419569171", "createdAt": "2020-05-04T16:36:01Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/ProcessFactoryTest.java", "diffHunk": "@@ -116,7 +122,11 @@ public void testBoundaryTimerTimeCycle() throws Exception {\n                 .startNode(1).name(\"Start\").done()\n                 .humanTaskNode(2).name(\"Task\").actorId(\"john\").taskName(\"MyTask\").done()\n                 .endNode(3).name(\"End1\").terminate(false).done()\n-                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2).timeCycle(\"1s###5s\").cancelActivity(false).done()\n+                .boundaryEventNode(4).name(\"BoundaryTimerEvent\").attachedTo(2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzU1NA==", "bodyText": "why not passing the function,body::addStatement  as a parameter to the visitCustomFields method and apply it on the method implementation, I mean to keep the same approach of other visit methods, or just change the method name to getCustomFields ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419573554", "createdAt": "2020-05-04T16:42:56Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/CompositeContextNodeVisitor.java", "diffHunk": "@@ -71,6 +73,8 @@ public void visitNode(String factoryField, Node node, BlockStmt body, VariableSc\n             visitVariableScope(getNodeId(node), variableScopeNode, body, new HashSet<>());\n         }\n \n+        visitCustomFields(compositeContextNode).forEach(body::addStatement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3NTE3Nw==", "bodyText": "isn't safer to check if node is instance of DynamicNode? Or maybe better to use Generics on AbstractNodeVisitor, to avoid the need for casting.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419575177", "createdAt": "2020-05-04T16:45:22Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n+import org.jbpm.ruleflow.core.factory.DynamicNodeFactory;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n+import org.jbpm.workflow.core.node.DynamicNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_ACTIVATION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_COMPLETION_EXPRESSION;\n+import static org.jbpm.ruleflow.core.factory.DynamicNodeFactory.METHOD_LANGUAGE;\n+\n+public class DynamicNodeVisitor extends CompositeContextNodeVisitor {\n+\n+    private static final String FACTORY_METHOD_NAME = \"dynamicNode\";\n+\n+    public DynamicNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+        super(nodesVisitors);\n+    }\n+\n+    @Override\n+    protected Class<? extends CompositeContextNodeFactory> factoryClass() {\n+        return DynamicNodeFactory.class;\n+    }\n+\n+    @Override\n+    protected String factoryMethod() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n+    @Override\n+    protected String getDefaultName() {\n+        return \"Dynamic\";\n+    }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        Collection<MethodCallExpr> methods = new ArrayList<>();\n+        DynamicNode dynamicNode = (DynamicNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3OTc1OA==", "bodyText": "same here, check before casting, or better to use generics.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419579758", "createdAt": "2020-05-04T16:52:15Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "diffHunk": "@@ -38,8 +50,24 @@ protected String factoryMethod() {\n         return FACTORY_METHOD_NAME;\n     }\n \n+    @Override\n+    protected String getNodeKey() {\n+        return FACTORY_METHOD_NAME;\n+    }\n+\n     @Override\n     protected String getDefaultName() {\n         return \"Event Subprocess\";\n     }\n+\n+    @Override\n+    public Stream<MethodCallExpr> visitCustomFields(CompositeContextNode node) {\n+        EventSubProcessNode eventSubProcessNode = (EventSubProcessNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5OTMzMg==", "bodyText": "same here, to avoid the cast it could be used generics, maybe on AbstractNodeVisitor", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419599332", "createdAt": "2020-05-04T17:23:19Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.LongLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.workflow.core.node.MilestoneNode;\n+import org.kie.api.definition.process.Node;\n+\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n+\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor {\n+\n+    private static final String NODE_KEY = \"milestoneNode\";\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return NODE_KEY;\n+    }\n+\n+    @Override\n+    public void visitNode(String factoryField, Node node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        MilestoneNode milestoneNode = (MilestoneNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTI5Mw==", "bodyText": "why the static final was removed? Anyway, if it is not a constant anymore you can change the name to camel case.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419605293", "createdAt": "2020-05-04T17:32:30Z", "author": {"login": "tiagodolphine"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/core/Node.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n public interface Node extends org.kie.api.definition.process.Node, Contextable, Serializable {\n \n-    static final String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";\n+    String CONNECTION_DEFAULT_TYPE = \"DROOLS_DEFAULT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0cacfe5f87b7cbd43d5491a7f1ddc0cf99feea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMzA3MQ==", "bodyText": "Only CompositeNode has its own nodeContainer? I mean it seems it is returning itself.\nWhy not just overriding the original getNodeContainer on  CompositeNode, or whatever node that has a different behavior other than returning the parent.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r419613071", "createdAt": "2020-05-04T17:45:29Z", "author": {"login": "tiagodolphine"}, "path": "api/kogito-api/src/main/java/org/kie/api/definition/process/Node.java", "diffHunk": "@@ -72,9 +72,9 @@\n     /**\n      * The NodeContainer this Node lives in.\n      *\n-     * @return the NodeContainer\n+     * @return the parent NodeContainer\n      */\n-    NodeContainer getNodeContainer();\n+    NodeContainer getParentContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc4NQ=="}, "originalCommit": {"oid": "2ab16fddfb9586c39b243b901c30622281945c8d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Nzk3NDY0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-405797464", "createdAt": "2020-05-05T13:39:57Z", "commit": {"oid": "dcef3f83a431f4638d36ebbdaa04893f9aef164c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzozOTo1OFrOGQp4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo0MDoyN1rOGQp53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNjYxNw==", "bodyText": "Generics now works but just because here we use unsafe casting. Without it the types in the call on line 44 visitor.visitNode(factoryField, node, body, variableScope, metadata); wouldn't match as U[] nodes is always array of Node (passed from the visitNode method) so U is Node but then we are passing this node variable of type Node to that method call on line 44. But given we did unsafe casting here, compiler is happy and it is ok after type erasure as during runtime the signature of abstractNodeVisitor visitNode() method has Node.\nIn short, I am not sure if this helped the hierarchy :) We also use raw types for Visitors in ProcessVisitor.java file.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r420116617", "createdAt": "2020-05-05T13:39:58Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/AbstractCompositeNodeVisitor.java", "diffHunk": "@@ -17,21 +17,27 @@\n \n import com.github.javaparser.ast.stmt.BlockStmt;\n import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.kie.api.definition.process.Node;\n \n import java.util.Map;\n \n-public abstract class AbstractCompositeNodeVisitor extends AbstractNodeVisitor {\n+public abstract class AbstractCompositeNodeVisitor<T extends CompositeContextNode> extends AbstractNodeVisitor<T> {\n \n-    protected Map<Class<?>, AbstractNodeVisitor> nodesVisitors;\n+    protected Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors;\n \n-    public AbstractCompositeNodeVisitor(Map<Class<?>, AbstractNodeVisitor> nodesVisitors) {\n+    public AbstractCompositeNodeVisitor(Map<Class<?>, AbstractNodeVisitor<? extends Node>> nodesVisitors) {\n         this.nodesVisitors = nodesVisitors;\n     }\n \n-    protected void visitNodes(String factoryField, Node[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n-        for (Node node : nodes) {\n-            AbstractNodeVisitor visitor = nodesVisitors.get(node.getClass());\n+    @Override\n+    public void visitNode(T node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        super.visitNode(node, body, variableScope, metadata);\n+    }\n+\n+    protected <U extends Node> void visitNodes(String factoryField, U[] nodes, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        for (U node : nodes) {\n+            AbstractNodeVisitor<U> visitor = (AbstractNodeVisitor<U>) nodesVisitors.get(node.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcef3f83a431f4638d36ebbdaa04893f9aef164c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNjk1Nw==", "bodyText": "Here we are using raw types for example.\nSame issue with unsafe calls now appeared in visitNodes method as well.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r420116957", "createdAt": "2020-05-05T13:40:27Z", "author": {"login": "MarianMacik"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/ProcessVisitor.java", "diffHunk": "@@ -103,6 +105,9 @@ public ProcessVisitor(ClassLoader contextClassLoader) {\n         this.nodesVisitors.put(CompositeContextNode.class, new CompositeContextNodeVisitor(nodesVisitors));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcef3f83a431f4638d36ebbdaa04893f9aef164c"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODMzNjk0", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-405833694", "createdAt": "2020-05-05T14:17:36Z", "commit": {"oid": "dcef3f83a431f4638d36ebbdaa04893f9aef164c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODgxNDI4", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-405881428", "createdAt": "2020-05-05T15:06:13Z", "commit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTE5NDAx", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-407119401", "createdAt": "2020-05-07T03:02:00Z", "commit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowMjowMFrOGRsr4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxOTowMlrOGRt0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMTEwNg==", "bodyText": "@ruromero not sure we should introduce a new extension. Should these just be as regular .bpmn or .bpmn2 ?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421211106", "createdAt": "2020-05-07T03:02:00Z", "author": {"login": "cristianonicolai"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/ProcessCodegen.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ProcessCodegen.class);\n \n     private static final SemanticModules BPMN_SEMANTIC_MODULES = new SemanticModules();\n-    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\")));\n+    public static final Set<String> SUPPORTED_BPMN_EXTENSIONS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\".bpmn\", \".bpmn2\", \".bpmn-cm\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNjc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421216751", "createdAt": "2020-05-07T03:24:44Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODA0OQ==", "bodyText": "@ruromero should these fields be moved to DynamicNodeVisitor?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218049", "createdAt": "2020-05-07T03:30:06Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/DynamicNodeFactory.java", "diffHunk": "@@ -25,6 +25,10 @@\n \n public class DynamicNodeFactory extends CompositeContextNodeFactory {\n \n+\tpublic static final String METHOD_LANGUAGE = \"language\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODI0Nw==", "bodyText": "similar here, move to EventSubprocessNodeVisitor?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218247", "createdAt": "2020-05-07T03:30:53Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -16,13 +16,16 @@\n \n package org.jbpm.ruleflow.core.factory;\n \n+import org.jbpm.process.core.event.EventTypeFilter;\n import org.jbpm.ruleflow.core.RuleFlowNodeContainerFactory;\n import org.jbpm.workflow.core.NodeContainer;\n import org.jbpm.workflow.core.node.CompositeContextNode;\n import org.jbpm.workflow.core.node.EventSubProcessNode;\n \n public class EventSubProcessNodeFactory extends CompositeContextNodeFactory {\n \n+    public static final String METHOD_KEEP_ACTIVE = \"keepActive\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODQ3NQ==", "bodyText": "@ruromero seems like method is not used, could it be removed?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218475", "createdAt": "2020-05-07T03:31:50Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODgxNg==", "bodyText": "same here, not used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218816", "createdAt": "2020-05-07T03:33:14Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/EventSubProcessNodeFactory.java", "diffHunk": "@@ -32,4 +35,16 @@ public EventSubProcessNodeFactory(RuleFlowNodeContainerFactory nodeContainerFact\n     protected CompositeContextNode createNode() {\n         return new EventSubProcessNode();\n     }\n+\n+    public EventSubProcessNodeFactory keepActive(boolean keepActive) {\n+        ((EventSubProcessNode) getCompositeNode()).setKeepActive(keepActive);\n+        return this;\n+    }\n+\n+    public EventSubProcessNodeFactory event(String event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODkzMg==", "bodyText": "move to MilestoneNodeVisitor?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421218932", "createdAt": "2020-05-07T03:33:43Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/MilestoneNodeFactory.java", "diffHunk": "@@ -23,6 +23,9 @@\n \n public class MilestoneNodeFactory extends StateBasedNodeFactory {\n \n+    public static final String METHOD_CONSTRAINT = \"constraint\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTA0OQ==", "bodyText": "not used?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421219049", "createdAt": "2020-05-07T03:34:05Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/ruleflow/core/factory/StateBasedNodeFactory.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n public abstract class StateBasedNodeFactory extends ExtendedNodeFactory {\n \n+    public static final String METHOD_TIMER = \"timer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyOTM5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {\n          \n          \n            \n            public class EventSubProcessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421229394", "createdAt": "2020-05-07T04:17:57Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/EventSubprocessNodeVisitor.java", "diffHunk": "@@ -15,16 +15,27 @@\n \n package org.jbpm.compiler.canonical;\n \n+import com.github.javaparser.ast.expr.BooleanLiteralExpr;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n import org.jbpm.ruleflow.core.factory.CompositeContextNodeFactory;\n import org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory;\n+import org.jbpm.workflow.core.node.EventSubProcessNode;\n+import org.kie.api.definition.process.Node;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Map;\n+import java.util.stream.Stream;\n \n-public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor {\n+import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_EVENT;\n+import static org.jbpm.ruleflow.core.factory.EventSubProcessNodeFactory.METHOD_KEEP_ACTIVE;\n+\n+public class EventSubprocessNodeVisitor extends CompositeContextNodeVisitor<EventSubProcessNode> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyOTY5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))\n          \n          \n            \n                    body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY, new LongLiteralExpr(node.getId())))", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#discussion_r421229698", "createdAt": "2020-05-07T04:19:02Z", "author": {"login": "cristianonicolai"}, "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.compiler.canonical;\n+\n+import com.github.javaparser.ast.expr.LongLiteralExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.utils.StringEscapeUtils;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.ruleflow.core.factory.MilestoneNodeFactory;\n+import org.jbpm.workflow.core.node.MilestoneNode;\n+\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_CONSTRAINT;\n+import static org.jbpm.ruleflow.core.factory.MilestoneNodeFactory.METHOD_MATCH_VARIABLE;\n+\n+public class MilestoneNodeVisitor extends AbstractNodeVisitor<MilestoneNode> {\n+\n+    private static final String NODE_KEY = \"milestoneNode\";\n+\n+    @Override\n+    protected String getNodeKey() {\n+        return NODE_KEY;\n+    }\n+\n+    @Override\n+    public void visitNode(String factoryField, MilestoneNode node, BlockStmt body, VariableScope variableScope, ProcessMetaData metadata) {\n+        body.addStatement(getAssignedFactoryMethod(factoryField, MilestoneNodeFactory.class, getNodeId(node), NODE_KEY,new LongLiteralExpr(node.getId())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e532e9d2eb37d1e4c38a50a3d624d37f5db17a"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1171bc3bc7608a0eb750285cc6d40d3bebf5753c", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1171bc3bc7608a0eb750285cc6d40d3bebf5753c", "committedDate": "2020-05-07T06:51:09Z", "message": "[KOGITO-1248] Rename class\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "committedDate": "2020-05-07T07:29:19Z", "message": "[KOGITO-1248] Remove comment\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/5a1f9f8b8b57d8bbfcec746f4273ce9c2f59cdd2", "committedDate": "2020-05-07T07:29:19Z", "message": "[KOGITO-1248] Remove comment\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "21a3e25eb99d243028a81acee7a233118c5142cf", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/21a3e25eb99d243028a81acee7a233118c5142cf", "committedDate": "2020-05-07T07:30:01Z", "message": "[KOGITO-1248] Rename class\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "127554676f8c3bfc32c1ebeca93eed7464b3144f", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/127554676f8c3bfc32c1ebeca93eed7464b3144f", "committedDate": "2020-05-07T12:52:45Z", "message": "[KOGITO-1248] Remove bpmn-cm extension\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "fddacfd09726ce2aa5fb348c0eda788415f228c1", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/fddacfd09726ce2aa5fb348c0eda788415f228c1", "committedDate": "2020-05-07T12:53:56Z", "message": "[KOGITO-1248] Remove bpmn-cm extension and add missing test class\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a981ade12fb7a21c8cf213320598c06d22fae08", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a981ade12fb7a21c8cf213320598c06d22fae08", "committedDate": "2020-05-08T07:41:31Z", "message": "[KOGITO-1248] Remove code duplications\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "2233c5383c201b9b83d958f9963c0276620b8d93", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2233c5383c201b9b83d958f9963c0276620b8d93", "committedDate": "2020-05-08T07:50:13Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2233c5383c201b9b83d958f9963c0276620b8d93", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2233c5383c201b9b83d958f9963c0276620b8d93", "committedDate": "2020-05-08T07:50:13Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "92f6bf138c2b206a581efd77a4d3b03e86f4f9e1", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/92f6bf138c2b206a581efd77a4d3b03e86f4f9e1", "committedDate": "2020-05-08T07:50:54Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92f6bf138c2b206a581efd77a4d3b03e86f4f9e1", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/92f6bf138c2b206a581efd77a4d3b03e86f4f9e1", "committedDate": "2020-05-08T07:50:54Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "7934ed01f2fe8fe8280cd7500e7cdfe4f2e68b5e", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7934ed01f2fe8fe8280cd7500e7cdfe4f2e68b5e", "committedDate": "2020-05-08T08:57:20Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c97bd6558da8743206b97c7d80cb744516f13d2e", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c97bd6558da8743206b97c7d80cb744516f13d2e", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Add casemgmt tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e9ea2281f44ecb2f73dcc4425e4aaf5a2da3c1", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/53e9ea2281f44ecb2f73dcc4425e4aaf5a2da3c1", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Create Metadata interface\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "426252e175516b9f47581b8ed8d973a749ee6652", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/426252e175516b9f47581b8ed8d973a749ee6652", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Use generics in Visitors\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8fb6a601ecfc066c9a9bd83cb9037190ed9497f", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c8fb6a601ecfc066c9a9bd83cb9037190ed9497f", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Use missing generics in ProcessVisitors\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f2f1966019ac1f073ae745d78e56cde585e0929", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/2f2f1966019ac1f073ae745d78e56cde585e0929", "committedDate": "2020-05-08T13:08:20Z", "message": "Update jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/DynamicNodeVisitor.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163b8634edc6180ee8e5760bb40361fa35862d58", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/163b8634edc6180ee8e5760bb40361fa35862d58", "committedDate": "2020-05-08T13:08:20Z", "message": "Update jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/MilestoneNodeVisitor.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d259a828a67d282cc30a27ad31f3d640d82ffa", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/c6d259a828a67d282cc30a27ad31f3d640d82ffa", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Rename class\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052f01891cd6939c93c6623caf4fa2b42aa47e2f", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/052f01891cd6939c93c6623caf4fa2b42aa47e2f", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Remove bpmn-cm extension and add missing test class\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7934ed01f2fe8fe8280cd7500e7cdfe4f2e68b5e", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/7934ed01f2fe8fe8280cd7500e7cdfe4f2e68b5e", "committedDate": "2020-05-08T08:57:20Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-runtimes/commit/1e23933bb10e3fce8e8dbb78ca770ee60599acc8", "committedDate": "2020-05-08T13:08:20Z", "message": "[KOGITO-1248] Remove code duplications and code smells\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODA4Mjc5", "url": "https://github.com/kiegroup/kogito-runtimes/pull/467#pullrequestreview-408808279", "createdAt": "2020-05-11T01:29:37Z", "commit": {"oid": "1e23933bb10e3fce8e8dbb78ca770ee60599acc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3668, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}