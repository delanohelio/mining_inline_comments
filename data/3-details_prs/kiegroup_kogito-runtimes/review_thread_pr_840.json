{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Nzk3MzMx", "number": 840, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzowNDoyMFrOEwGeKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxOToyN1rOEyQJgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODczMTMxOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzowNDoyMFrOHldEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoyNTowMFrOHlr1Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg==", "bodyText": "Note 1: both are returning SpringBootDecisionTracingCollectorAsync instance\nNote 2: what about adding the property as method parameter to have a single method? In this way we can prevent wrong situations like generate both beans if we will change parameter logic. Then please add a test to verify this producer method\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n          \n          \n            \n                public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n          \n          \n            \n                                                                                final ConfigBean configBean,\n          \n          \n            \n                                                                                final Application application) {\n          \n          \n            \n                    return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Bean\n          \n          \n            \n                @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n          \n          \n            \n                public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n          \n          \n            \n                                                                               final ConfigBean configBean,\n          \n          \n            \n                                                                               final Application application) {\n          \n          \n            \n                    return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n          \n          \n            \n                }\n          \n          \n            \n                @Bean\n          \n          \n            \n                public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n          \n          \n            \n                                                                                final ConfigBean configBean,\n          \n          \n            \n                                                                                final Application application,\n          \n          \n            \n                                                                                @Value(value = \"${kogito.addon.tracing.decision.asyncEnabled:true}\") final boolean asyncEnabled) {\n          \n          \n            \n                    if (asyncEnabled) {\n          \n          \n            \n                        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return new SpringBootDecisionTracingCollector(eventEmitter, configBean, application);\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509035702", "createdAt": "2020-10-21T07:04:20Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "diffHunk": "@@ -55,6 +58,22 @@ public SpringBootDecisionTracingConfiguration(\n         this.kafkaTopicReplicationFactor = kafkaTopicReplicationFactor;\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n+    public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                    final ConfigBean configBean,\n+                                                                    final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n+    public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                   final ConfigBean configBean,\n+                                                                   final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653a1a4b4985f0b061fb6d32ed0fcb662eee86eb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNTk2Mw==", "bodyText": "Thanks for the catch and the suggestion. It's way better now.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509135963", "createdAt": "2020-10-21T09:38:25Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "diffHunk": "@@ -55,6 +58,22 @@ public SpringBootDecisionTracingConfiguration(\n         this.kafkaTopicReplicationFactor = kafkaTopicReplicationFactor;\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n+    public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                    final ConfigBean configBean,\n+                                                                    final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n+    public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                   final ConfigBean configBean,\n+                                                                   final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg=="}, "originalCommit": {"oid": "653a1a4b4985f0b061fb6d32ed0fcb662eee86eb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyMzEwOQ==", "bodyText": "Can you please add a test for this method?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509223109", "createdAt": "2020-10-21T12:08:01Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "diffHunk": "@@ -55,6 +58,22 @@ public SpringBootDecisionTracingConfiguration(\n         this.kafkaTopicReplicationFactor = kafkaTopicReplicationFactor;\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n+    public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                    final ConfigBean configBean,\n+                                                                    final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n+    public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                   final ConfigBean configBean,\n+                                                                   final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg=="}, "originalCommit": {"oid": "653a1a4b4985f0b061fb6d32ed0fcb662eee86eb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3NzQ1OA==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509277458", "createdAt": "2020-10-21T13:25:00Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "diffHunk": "@@ -55,6 +58,22 @@ public SpringBootDecisionTracingConfiguration(\n         this.kafkaTopicReplicationFactor = kafkaTopicReplicationFactor;\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n+    public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                    final ConfigBean configBean,\n+                                                                    final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n+    public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                   final ConfigBean configBean,\n+                                                                   final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg=="}, "originalCommit": {"oid": "653a1a4b4985f0b061fb6d32ed0fcb662eee86eb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTI3NjkzOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxNjozOFrOHoyKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo0NjoxOVrOHo8_rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNjk5Mg==", "bodyText": "Can we avoid underscores in the name of methods?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512526992", "createdAt": "2020-10-27T09:16:38Z", "author": {"login": "jiripetrlik"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "diffHunk": "@@ -35,76 +36,114 @@\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n import org.mockito.ArgumentCaptor;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class QuarkusDecisionTracingTest {\n \n-    static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-    static final String MODEL_NAME = \"Traffic Violation\";\n-\n-    private static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n-    private static final ObjectMapper MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    public static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    public static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+    private static final String TEST_RESOURCE = \"/\" + TEST_MODEL_NAME + \".dmn\";\n     private static final String TEST_SERVICE_URL = \"localhost:8080\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                QuarkusDecisionTracingTest.class.getResourceAsStream(MODEL_RESOURCE)\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNDQzMA==", "bodyText": "Removed all the underscores from test method names \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512704430", "createdAt": "2020-10-27T13:46:19Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "diffHunk": "@@ -35,76 +36,114 @@\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n import org.mockito.ArgumentCaptor;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class QuarkusDecisionTracingTest {\n \n-    static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-    static final String MODEL_NAME = \"Traffic Violation\";\n-\n-    private static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n-    private static final ObjectMapper MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    public static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    public static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+    private static final String TEST_RESOURCE = \"/\" + TEST_MODEL_NAME + \".dmn\";\n     private static final String TEST_SERVICE_URL = \"localhost:8080\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                QuarkusDecisionTracingTest.class.getResourceAsStream(MODEL_RESOURCE)\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNjk5Mg=="}, "originalCommit": {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTI4MzkwOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxODoyNFrOHoyO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo0NjoyNlrOHo9ABQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODA4NQ==", "bodyText": "Would it be possible to add some message with description into the Exception.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512528085", "createdAt": "2020-10-27T09:18:24Z", "author": {"login": "jiripetrlik"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "diffHunk": "@@ -35,76 +36,114 @@\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n import org.mockito.ArgumentCaptor;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class QuarkusDecisionTracingTest {\n \n-    static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-    static final String MODEL_NAME = \"Traffic Violation\";\n-\n-    private static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n-    private static final ObjectMapper MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    public static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    public static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+    private static final String TEST_RESOURCE = \"/\" + TEST_MODEL_NAME + \".dmn\";\n     private static final String TEST_SERVICE_URL = \"localhost:8080\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                QuarkusDecisionTracingTest.class.getResourceAsStream(MODEL_RESOURCE)\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(true, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    @Test\n+    void test_SyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(false, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    private DMNRuntime buildDMNRuntime() {\n+        return DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                QuarkusDecisionTracingTest.class.getResourceAsStream(TEST_RESOURCE)\n         ));\n+    }\n+\n+    private DecisionModel buildDecisionModel(DMNRuntime runtime) {\n+        return new DmnDecisionModel(runtime, TEST_MODEL_NAMESPACE, TEST_MODEL_NAME, () -> TEST_EXECUTION_ID);\n+    }\n+\n+    private List<EvaluateEvent> testListener(boolean asyncEnabled, DMNRuntime runtime, DecisionModel model) {\n \n-        ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n-        EventBus eventBus = mock(EventBus.class);\n+        final EventBus mockedEventBus = mock(EventBus.class);\n+        final QuarkusDecisionTracingCollector mockedCollector = mock(QuarkusDecisionTracingCollector.class);\n \n-        QuarkusDecisionTracingListener listener = new QuarkusDecisionTracingListener(eventBus);\n+        QuarkusDecisionTracingListener listener = new QuarkusDecisionTracingListener(mockedEventBus, mockedCollector, asyncEnabled);\n         runtime.addListener(listener);\n \n-        final Map<String, Object> driver = new HashMap<>();\n-        driver.put(\"Age\", 25);\n-        driver.put(\"Points\", 10);\n-        final Map<String, Object> violation = new HashMap<>();\n-        violation.put(\"Type\", \"speed\");\n-        violation.put(\"Actual Speed\", 105);\n-        violation.put(\"Speed Limit\", 100);\n-        final Map<String, Object> contextVariables = new HashMap<>();\n-        contextVariables.put(\"Driver\", driver);\n-        contextVariables.put(\"Violation\", violation);\n-\n-        final DecisionModel model = new DmnDecisionModel(runtime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);\n-        final DMNContext context = model.newContext(contextVariables);\n+        final DMNContext context = model.newContext(TEST_CONTEXT_VARIABLES);\n         model.evaluateAll(context);\n \n         ArgumentCaptor<EvaluateEvent> eventCaptor = ArgumentCaptor.forClass(EvaluateEvent.class);\n \n-        verify(eventBus, times(14)).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), eventCaptor.capture());\n+        if (asyncEnabled) {\n+            verify(mockedEventBus, times(14)).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), eventCaptor.capture());\n+            verify(mockedCollector, never()).onEvent(any());\n+        } else {\n+            verify(mockedEventBus, never()).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), any());\n+            verify(mockedCollector, times(14)).onEvent(eventCaptor.capture());\n+        }\n \n+        return eventCaptor.getAllValues();\n+    }\n+\n+    private void testCollector(List<EvaluateEvent> events, DecisionModel model) throws IOException {\n         TestSubscriber<String> subscriber = new TestSubscriber<>();\n \n         final DecisionModels mockedDecisionModels = mock(DecisionModels.class);\n-        when(mockedDecisionModels.getDecisionModel(MODEL_NAMESPACE, MODEL_NAME)).thenReturn(model);\n+        when(mockedDecisionModels.getDecisionModel(TEST_MODEL_NAMESPACE, TEST_MODEL_NAME)).thenReturn(model);\n         final Application mockedApplication = mock(Application.class);\n         when(mockedApplication.decisionModels()).thenReturn(mockedDecisionModels);\n+        final ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n+        final QuarkusTraceEventEmitter eventEmitter = new QuarkusTraceEventEmitter();\n \n-        QuarkusTraceEventEmitter eventEmitter = new QuarkusTraceEventEmitter();\n-        QuarkusDecisionTracingCollector collector = new QuarkusDecisionTracingCollector(mockedApplication, eventEmitter, configBean);\n+        QuarkusDecisionTracingCollector collector = new QuarkusDecisionTracingCollector(eventEmitter, configBean, mockedApplication);\n         eventEmitter.getEventPublisher().subscribe(subscriber);\n-        eventCaptor.getAllValues().forEach(collector::onEvent);\n+        events.forEach(collector::onEvent);\n \n         subscriber.assertValueCount(1);\n \n-        CloudEvent cloudEvent = MAPPER.readValue(subscriber.values().get(0), CloudEvent.class);\n+        CloudEvent cloudEvent = CloudEventUtils.decode(subscriber.values().get(0)).orElseThrow(IllegalStateException::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNDUxNw==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512704517", "createdAt": "2020-10-27T13:46:26Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "diffHunk": "@@ -35,76 +36,114 @@\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n import org.mockito.ArgumentCaptor;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class QuarkusDecisionTracingTest {\n \n-    static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-    static final String MODEL_NAME = \"Traffic Violation\";\n-\n-    private static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n-    private static final ObjectMapper MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    public static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    public static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+    private static final String TEST_RESOURCE = \"/\" + TEST_MODEL_NAME + \".dmn\";\n     private static final String TEST_SERVICE_URL = \"localhost:8080\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                QuarkusDecisionTracingTest.class.getResourceAsStream(MODEL_RESOURCE)\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(true, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    @Test\n+    void test_SyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(false, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    private DMNRuntime buildDMNRuntime() {\n+        return DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                QuarkusDecisionTracingTest.class.getResourceAsStream(TEST_RESOURCE)\n         ));\n+    }\n+\n+    private DecisionModel buildDecisionModel(DMNRuntime runtime) {\n+        return new DmnDecisionModel(runtime, TEST_MODEL_NAMESPACE, TEST_MODEL_NAME, () -> TEST_EXECUTION_ID);\n+    }\n+\n+    private List<EvaluateEvent> testListener(boolean asyncEnabled, DMNRuntime runtime, DecisionModel model) {\n \n-        ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n-        EventBus eventBus = mock(EventBus.class);\n+        final EventBus mockedEventBus = mock(EventBus.class);\n+        final QuarkusDecisionTracingCollector mockedCollector = mock(QuarkusDecisionTracingCollector.class);\n \n-        QuarkusDecisionTracingListener listener = new QuarkusDecisionTracingListener(eventBus);\n+        QuarkusDecisionTracingListener listener = new QuarkusDecisionTracingListener(mockedEventBus, mockedCollector, asyncEnabled);\n         runtime.addListener(listener);\n \n-        final Map<String, Object> driver = new HashMap<>();\n-        driver.put(\"Age\", 25);\n-        driver.put(\"Points\", 10);\n-        final Map<String, Object> violation = new HashMap<>();\n-        violation.put(\"Type\", \"speed\");\n-        violation.put(\"Actual Speed\", 105);\n-        violation.put(\"Speed Limit\", 100);\n-        final Map<String, Object> contextVariables = new HashMap<>();\n-        contextVariables.put(\"Driver\", driver);\n-        contextVariables.put(\"Violation\", violation);\n-\n-        final DecisionModel model = new DmnDecisionModel(runtime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);\n-        final DMNContext context = model.newContext(contextVariables);\n+        final DMNContext context = model.newContext(TEST_CONTEXT_VARIABLES);\n         model.evaluateAll(context);\n \n         ArgumentCaptor<EvaluateEvent> eventCaptor = ArgumentCaptor.forClass(EvaluateEvent.class);\n \n-        verify(eventBus, times(14)).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), eventCaptor.capture());\n+        if (asyncEnabled) {\n+            verify(mockedEventBus, times(14)).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), eventCaptor.capture());\n+            verify(mockedCollector, never()).onEvent(any());\n+        } else {\n+            verify(mockedEventBus, never()).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), any());\n+            verify(mockedCollector, times(14)).onEvent(eventCaptor.capture());\n+        }\n \n+        return eventCaptor.getAllValues();\n+    }\n+\n+    private void testCollector(List<EvaluateEvent> events, DecisionModel model) throws IOException {\n         TestSubscriber<String> subscriber = new TestSubscriber<>();\n \n         final DecisionModels mockedDecisionModels = mock(DecisionModels.class);\n-        when(mockedDecisionModels.getDecisionModel(MODEL_NAMESPACE, MODEL_NAME)).thenReturn(model);\n+        when(mockedDecisionModels.getDecisionModel(TEST_MODEL_NAMESPACE, TEST_MODEL_NAME)).thenReturn(model);\n         final Application mockedApplication = mock(Application.class);\n         when(mockedApplication.decisionModels()).thenReturn(mockedDecisionModels);\n+        final ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n+        final QuarkusTraceEventEmitter eventEmitter = new QuarkusTraceEventEmitter();\n \n-        QuarkusTraceEventEmitter eventEmitter = new QuarkusTraceEventEmitter();\n-        QuarkusDecisionTracingCollector collector = new QuarkusDecisionTracingCollector(mockedApplication, eventEmitter, configBean);\n+        QuarkusDecisionTracingCollector collector = new QuarkusDecisionTracingCollector(eventEmitter, configBean, mockedApplication);\n         eventEmitter.getEventPublisher().subscribe(subscriber);\n-        eventCaptor.getAllValues().forEach(collector::onEvent);\n+        events.forEach(collector::onEvent);\n \n         subscriber.assertValueCount(1);\n \n-        CloudEvent cloudEvent = MAPPER.readValue(subscriber.values().get(0), CloudEvent.class);\n+        CloudEvent cloudEvent = CloudEventUtils.decode(subscriber.values().get(0)).orElseThrow(IllegalStateException::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODA4NQ=="}, "originalCommit": {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTI4ODM1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-springboot-addon/src/test/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToxOToyN1rOHoyRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo0NjozM1rOHo9AYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODc3MQ==", "bodyText": "Can we add some message into the exception?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512528771", "createdAt": "2020-10-27T09:19:27Z", "author": {"login": "jiripetrlik"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/test/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingTest.java", "diffHunk": "@@ -41,73 +43,113 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class SpringBootDecisionTracingTest {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    private static final String TEST_MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n+    private static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    private static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n-    private static final String TEST_TOPIC = \"test-topic\";\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n+    private static final String TEST_SERVICE_URL = \"localhost:8080\";\n+    private static final String TEST_KAFKA_TOPIC = \"kogito-tracing-decision\";\n+\n+    @Test\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(true, runtime, model);\n+        testCollector(events, model);\n+    }\n \n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final String serviceUrl = \"localhost:8080\";\n-        final String modelResource = \"/Traffic Violation.dmn\";\n-        final String modelNamespace = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-        final String modelName = \"Traffic Violation\";\n-\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                SpringBootDecisionTracingTest.class.getResourceAsStream(modelResource)\n+    void test_SyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(false, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    private DMNRuntime buildDMNRuntime() {\n+        return DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                SpringBootDecisionTracingTest.class.getResourceAsStream(TEST_MODEL_RESOURCE)\n         ));\n+    }\n+\n+    private DecisionModel buildDecisionModel(DMNRuntime runtime) {\n+        return new DmnDecisionModel(runtime, TEST_MODEL_NAMESPACE, TEST_MODEL_NAME, () -> TEST_EXECUTION_ID);\n+    }\n+\n+    private List<EvaluateEvent> testListener(boolean asyncEnabled, DMNRuntime runtime, DecisionModel model) {\n \n-        ConfigBean configBean = new StaticConfigBean(serviceUrl);\n-        ApplicationEventPublisher eventPublisher = mock(ApplicationEventPublisher.class);\n+        final ApplicationEventPublisher mockedEventPublisher = mock(ApplicationEventPublisher.class);\n+        final SpringBootDecisionTracingCollector mockedCollector = mock(SpringBootDecisionTracingCollector.class);\n \n-        SpringBootDecisionTracingListener listener = new SpringBootDecisionTracingListener(eventPublisher);\n+        SpringBootDecisionTracingListener listener = new SpringBootDecisionTracingListener(mockedEventPublisher, mockedCollector, asyncEnabled);\n         runtime.addListener(listener);\n \n-        final Map<String, Object> driver = new HashMap<>();\n-        driver.put(\"Age\", 25);\n-        driver.put(\"Points\", 10);\n-        final Map<String, Object> violation = new HashMap<>();\n-        violation.put(\"Type\", \"speed\");\n-        violation.put(\"Actual Speed\", 105);\n-        violation.put(\"Speed Limit\", 100);\n-        final Map<String, Object> contextVariables = new HashMap<>();\n-        contextVariables.put(\"Driver\", driver);\n-        contextVariables.put(\"Violation\", violation);\n-\n-        final DecisionModel model = new DmnDecisionModel(runtime, modelNamespace, modelName, () -> TEST_EXECUTION_ID);\n-        final DMNContext context = model.newContext(contextVariables);\n+        final DMNContext context = model.newContext(TEST_CONTEXT_VARIABLES);\n         model.evaluateAll(context);\n \n         ArgumentCaptor<EvaluateEvent> eventCaptor = ArgumentCaptor.forClass(EvaluateEvent.class);\n-        verify(eventPublisher, times(14)).publishEvent(eventCaptor.capture());\n \n+        if (asyncEnabled) {\n+            verify(mockedEventPublisher, times(14)).publishEvent(eventCaptor.capture());\n+            verify(mockedCollector, never()).onApplicationEvent(any());\n+        } else {\n+            verify(mockedEventPublisher, never()).publishEvent(any());\n+            verify(mockedCollector, times(14)).onApplicationEvent(eventCaptor.capture());\n+        }\n+\n+        return eventCaptor.getAllValues();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void testCollector(List<EvaluateEvent> events, DecisionModel model) throws IOException {\n         final DecisionModels mockedDecisionModels = mock(DecisionModels.class);\n-        when(mockedDecisionModels.getDecisionModel(modelNamespace, modelName)).thenReturn(model);\n+        when(mockedDecisionModels.getDecisionModel(TEST_MODEL_NAMESPACE, TEST_MODEL_NAME)).thenReturn(model);\n+\n         final Application mockedApplication = mock(Application.class);\n         when(mockedApplication.decisionModels()).thenReturn(mockedDecisionModels);\n \n-        KafkaTemplate<String, String> template = mock(KafkaTemplate.class);\n+        final ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n \n-        SpringBootTraceEventEmitter eventEmitter = new SpringBootTraceEventEmitter(template, TEST_TOPIC);\n-        SpringBootDecisionTracingCollector collector = new SpringBootDecisionTracingCollector(mockedApplication, eventEmitter, configBean);\n-        eventCaptor.getAllValues().forEach(collector::onApplicationEvent);\n+        final KafkaTemplate<String, String> mockedTemplate = mock(KafkaTemplate.class);\n+        final SpringBootTraceEventEmitter eventEmitter = new SpringBootTraceEventEmitter(mockedTemplate, TEST_KAFKA_TOPIC);\n \n-        ArgumentCaptor<String> topicCaptor = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n-        verify(template).send(topicCaptor.capture(), payloadCaptor.capture());\n+        SpringBootDecisionTracingCollector collector = new SpringBootDecisionTracingCollector(eventEmitter, configBean, mockedApplication);\n+        events.forEach(collector::onApplicationEvent);\n \n-        assertEquals(TEST_TOPIC, topicCaptor.getValue());\n+        ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n+        verify(mockedTemplate).send(eq(TEST_KAFKA_TOPIC), payloadCaptor.capture());\n \n-        CloudEvent cloudEvent = OBJECT_MAPPER.readValue(payloadCaptor.getValue(), CloudEvent.class);\n+        CloudEvent cloudEvent = CloudEventUtils.decode(payloadCaptor.getValue()).orElseThrow(IllegalStateException::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNDYwOA==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512704608", "createdAt": "2020-10-27T13:46:33Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-springboot-addon/src/test/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingTest.java", "diffHunk": "@@ -41,73 +43,113 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class SpringBootDecisionTracingTest {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    private static final String TEST_MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n+    private static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    private static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n-    private static final String TEST_TOPIC = \"test-topic\";\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n+    private static final String TEST_SERVICE_URL = \"localhost:8080\";\n+    private static final String TEST_KAFKA_TOPIC = \"kogito-tracing-decision\";\n+\n+    @Test\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(true, runtime, model);\n+        testCollector(events, model);\n+    }\n \n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final String serviceUrl = \"localhost:8080\";\n-        final String modelResource = \"/Traffic Violation.dmn\";\n-        final String modelNamespace = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-        final String modelName = \"Traffic Violation\";\n-\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                SpringBootDecisionTracingTest.class.getResourceAsStream(modelResource)\n+    void test_SyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(false, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    private DMNRuntime buildDMNRuntime() {\n+        return DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                SpringBootDecisionTracingTest.class.getResourceAsStream(TEST_MODEL_RESOURCE)\n         ));\n+    }\n+\n+    private DecisionModel buildDecisionModel(DMNRuntime runtime) {\n+        return new DmnDecisionModel(runtime, TEST_MODEL_NAMESPACE, TEST_MODEL_NAME, () -> TEST_EXECUTION_ID);\n+    }\n+\n+    private List<EvaluateEvent> testListener(boolean asyncEnabled, DMNRuntime runtime, DecisionModel model) {\n \n-        ConfigBean configBean = new StaticConfigBean(serviceUrl);\n-        ApplicationEventPublisher eventPublisher = mock(ApplicationEventPublisher.class);\n+        final ApplicationEventPublisher mockedEventPublisher = mock(ApplicationEventPublisher.class);\n+        final SpringBootDecisionTracingCollector mockedCollector = mock(SpringBootDecisionTracingCollector.class);\n \n-        SpringBootDecisionTracingListener listener = new SpringBootDecisionTracingListener(eventPublisher);\n+        SpringBootDecisionTracingListener listener = new SpringBootDecisionTracingListener(mockedEventPublisher, mockedCollector, asyncEnabled);\n         runtime.addListener(listener);\n \n-        final Map<String, Object> driver = new HashMap<>();\n-        driver.put(\"Age\", 25);\n-        driver.put(\"Points\", 10);\n-        final Map<String, Object> violation = new HashMap<>();\n-        violation.put(\"Type\", \"speed\");\n-        violation.put(\"Actual Speed\", 105);\n-        violation.put(\"Speed Limit\", 100);\n-        final Map<String, Object> contextVariables = new HashMap<>();\n-        contextVariables.put(\"Driver\", driver);\n-        contextVariables.put(\"Violation\", violation);\n-\n-        final DecisionModel model = new DmnDecisionModel(runtime, modelNamespace, modelName, () -> TEST_EXECUTION_ID);\n-        final DMNContext context = model.newContext(contextVariables);\n+        final DMNContext context = model.newContext(TEST_CONTEXT_VARIABLES);\n         model.evaluateAll(context);\n \n         ArgumentCaptor<EvaluateEvent> eventCaptor = ArgumentCaptor.forClass(EvaluateEvent.class);\n-        verify(eventPublisher, times(14)).publishEvent(eventCaptor.capture());\n \n+        if (asyncEnabled) {\n+            verify(mockedEventPublisher, times(14)).publishEvent(eventCaptor.capture());\n+            verify(mockedCollector, never()).onApplicationEvent(any());\n+        } else {\n+            verify(mockedEventPublisher, never()).publishEvent(any());\n+            verify(mockedCollector, times(14)).onApplicationEvent(eventCaptor.capture());\n+        }\n+\n+        return eventCaptor.getAllValues();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void testCollector(List<EvaluateEvent> events, DecisionModel model) throws IOException {\n         final DecisionModels mockedDecisionModels = mock(DecisionModels.class);\n-        when(mockedDecisionModels.getDecisionModel(modelNamespace, modelName)).thenReturn(model);\n+        when(mockedDecisionModels.getDecisionModel(TEST_MODEL_NAMESPACE, TEST_MODEL_NAME)).thenReturn(model);\n+\n         final Application mockedApplication = mock(Application.class);\n         when(mockedApplication.decisionModels()).thenReturn(mockedDecisionModels);\n \n-        KafkaTemplate<String, String> template = mock(KafkaTemplate.class);\n+        final ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n \n-        SpringBootTraceEventEmitter eventEmitter = new SpringBootTraceEventEmitter(template, TEST_TOPIC);\n-        SpringBootDecisionTracingCollector collector = new SpringBootDecisionTracingCollector(mockedApplication, eventEmitter, configBean);\n-        eventCaptor.getAllValues().forEach(collector::onApplicationEvent);\n+        final KafkaTemplate<String, String> mockedTemplate = mock(KafkaTemplate.class);\n+        final SpringBootTraceEventEmitter eventEmitter = new SpringBootTraceEventEmitter(mockedTemplate, TEST_KAFKA_TOPIC);\n \n-        ArgumentCaptor<String> topicCaptor = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n-        verify(template).send(topicCaptor.capture(), payloadCaptor.capture());\n+        SpringBootDecisionTracingCollector collector = new SpringBootDecisionTracingCollector(eventEmitter, configBean, mockedApplication);\n+        events.forEach(collector::onApplicationEvent);\n \n-        assertEquals(TEST_TOPIC, topicCaptor.getValue());\n+        ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n+        verify(mockedTemplate).send(eq(TEST_KAFKA_TOPIC), payloadCaptor.capture());\n \n-        CloudEvent cloudEvent = OBJECT_MAPPER.readValue(payloadCaptor.getValue(), CloudEvent.class);\n+        CloudEvent cloudEvent = CloudEventUtils.decode(payloadCaptor.getValue()).orElseThrow(IllegalStateException::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODc3MQ=="}, "originalCommit": {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4872, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}