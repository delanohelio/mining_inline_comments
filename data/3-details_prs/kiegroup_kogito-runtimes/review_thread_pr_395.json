{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0Nzk5NDgz", "number": 395, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDozNjowNVrODtI7gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDozNjowNVrODtI7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjU4ODE5OnYy", "diffSide": "RIGHT", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDozNjowNVrOF-Y8DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTowMzoxNFrOF-aQ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2NDYyMQ==", "bodyText": "A small side note: what about moving this call outside so that you don't have the same call in the following overload?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/395#discussion_r400964621", "createdAt": "2020-03-31T14:36:05Z", "author": {"login": "r00ta"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "diffHunk": "@@ -52,44 +51,41 @@ private DMNKogito() {\n         // intentionally private.\n     }\n \n-    public static DMNRuntime createGenericDMNRuntime(Reader... resources) {\n-        KnowledgeBaseImpl knowledgeBase = new KnowledgeBaseImpl(\"\", new RuleBaseConfiguration());\n-        Map<String, InternalKnowledgePackage> pkgs = knowledgeBase.getPackagesMap();\n-        DMNCompilerImpl compilerImpl = new DMNCompilerImpl();\n-        for (Reader dmnResource : resources) {\n-            try {\n-                DMNModel m = compilerImpl.compile(dmnResource);\n-                InternalKnowledgePackage pkg = pkgs.computeIfAbsent(m.getNamespace(), KnowledgePackageImpl::new);\n-                ResourceTypePackageRegistry rpkg = pkg.getResourceTypePackages();\n-                DMNPackageImpl dmnpkg = rpkg.computeIfAbsent(ResourceType.DMN, rtp -> new DMNPackageImpl(m.getNamespace()));\n-                dmnpkg.addModel(m.getName(), m);// TODO add profiles? and check dups over namespace/name\n-            } catch (Exception e) {\n-                LOG.error(\"Failed on DMN resource\", e);\n-            }\n-        }\n-        return new DMNRuntimeImpl(knowledgeBase);\n+    /**\n+     * Internal Utility class.<br/>\n+     * Use {@link Application#decisionModels()} of Kogito API to programmatically access DMN assets and evaluate DMN decisions.\n+     */\n+    public static DMNRuntime createGenericDMNRuntime(Reader... readers) {\n+        List<Resource> resources = Stream.of(readers).map(ReaderResource::new).collect(Collectors.toList());\n+        DMNRuntime dmnRuntime = DMNRuntimeBuilder.fromDefaults()\n+                                                 .setRootClassLoader(null)\n+                                                 .buildConfiguration()\n+                                                 .fromResources(resources)\n+                                                 .getOrElseThrow(e -> new RuntimeException(\"Error initalizing DMNRuntime\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "469fbb71a58ea9ff90a5de4962599944a546730e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4NjM0MQ==", "bodyText": "outdated. marking Resolved.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/395#discussion_r400986341", "createdAt": "2020-03-31T15:03:14Z", "author": {"login": "tarilabs"}, "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DMNKogito.java", "diffHunk": "@@ -52,44 +51,41 @@ private DMNKogito() {\n         // intentionally private.\n     }\n \n-    public static DMNRuntime createGenericDMNRuntime(Reader... resources) {\n-        KnowledgeBaseImpl knowledgeBase = new KnowledgeBaseImpl(\"\", new RuleBaseConfiguration());\n-        Map<String, InternalKnowledgePackage> pkgs = knowledgeBase.getPackagesMap();\n-        DMNCompilerImpl compilerImpl = new DMNCompilerImpl();\n-        for (Reader dmnResource : resources) {\n-            try {\n-                DMNModel m = compilerImpl.compile(dmnResource);\n-                InternalKnowledgePackage pkg = pkgs.computeIfAbsent(m.getNamespace(), KnowledgePackageImpl::new);\n-                ResourceTypePackageRegistry rpkg = pkg.getResourceTypePackages();\n-                DMNPackageImpl dmnpkg = rpkg.computeIfAbsent(ResourceType.DMN, rtp -> new DMNPackageImpl(m.getNamespace()));\n-                dmnpkg.addModel(m.getName(), m);// TODO add profiles? and check dups over namespace/name\n-            } catch (Exception e) {\n-                LOG.error(\"Failed on DMN resource\", e);\n-            }\n-        }\n-        return new DMNRuntimeImpl(knowledgeBase);\n+    /**\n+     * Internal Utility class.<br/>\n+     * Use {@link Application#decisionModels()} of Kogito API to programmatically access DMN assets and evaluate DMN decisions.\n+     */\n+    public static DMNRuntime createGenericDMNRuntime(Reader... readers) {\n+        List<Resource> resources = Stream.of(readers).map(ReaderResource::new).collect(Collectors.toList());\n+        DMNRuntime dmnRuntime = DMNRuntimeBuilder.fromDefaults()\n+                                                 .setRootClassLoader(null)\n+                                                 .buildConfiguration()\n+                                                 .fromResources(resources)\n+                                                 .getOrElseThrow(e -> new RuntimeException(\"Error initalizing DMNRuntime\", e));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2NDYyMQ=="}, "originalCommit": {"oid": "469fbb71a58ea9ff90a5de4962599944a546730e"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 197, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}