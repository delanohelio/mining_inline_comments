{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MTk3NDA3", "number": 468, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MTozN1rOD0sSFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzowNTozN1rOD7o_dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTc4MDcxOnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/resources/class-templates/DMNApplicationClassDeclTemplate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1MTozN1rOGJwERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo1MToyMlrOGNYBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3Nzg5NQ==", "bodyText": "not 100% what is the decision from Trusty side of things, but shouldn't this type of configuration be a compile-time decision?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r412877895", "createdAt": "2020-04-22T10:51:37Z", "author": {"login": "tarilabs"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNApplicationClassDeclTemplate.java", "diffHunk": "@@ -2,13 +2,21 @@\n public class DecisionModels implements org.kie.kogito.decision.DecisionModels {\n \n     private final static org.kie.dmn.api.core.DMNRuntime dmnRuntime = org.kie.kogito.dmn.DMNKogito.createGenericDMNRuntime();\n+    private org.kie.kogito.ExecutionIdSupplier execIdSupplier = null;\n \n     public void init(org.kie.kogito.Application app) {\n         app.config().decision().decisionEventListeners().listeners().forEach(dmnRuntime::addListener);\n+        if (requiresExecutionIdSupplier(app)) {\n+            execIdSupplier = new org.kie.kogito.dmn.DmnExecutionIdSupplier();\n+        }\n+    }\n+\n+    private boolean requiresExecutionIdSupplier(org.kie.kogito.Application app) {\n+        return app.config().addons().availableAddons().contains(\"tracing-decision\");\n     }\n \n     public org.kie.kogito.decision.DecisionModel getDecisionModel(java.lang.String namespace, java.lang.String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name);\n+        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyNTYzOQ==", "bodyText": "Definitely. It's implemented this way at the moment because it was the quickest to have the addon working to do local tests. I will change it for sure before the final review.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r412925639", "createdAt": "2020-04-22T12:10:44Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNApplicationClassDeclTemplate.java", "diffHunk": "@@ -2,13 +2,21 @@\n public class DecisionModels implements org.kie.kogito.decision.DecisionModels {\n \n     private final static org.kie.dmn.api.core.DMNRuntime dmnRuntime = org.kie.kogito.dmn.DMNKogito.createGenericDMNRuntime();\n+    private org.kie.kogito.ExecutionIdSupplier execIdSupplier = null;\n \n     public void init(org.kie.kogito.Application app) {\n         app.config().decision().decisionEventListeners().listeners().forEach(dmnRuntime::addListener);\n+        if (requiresExecutionIdSupplier(app)) {\n+            execIdSupplier = new org.kie.kogito.dmn.DmnExecutionIdSupplier();\n+        }\n+    }\n+\n+    private boolean requiresExecutionIdSupplier(org.kie.kogito.Application app) {\n+        return app.config().addons().availableAddons().contains(\"tracing-decision\");\n     }\n \n     public org.kie.kogito.decision.DecisionModel getDecisionModel(java.lang.String namespace, java.lang.String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name);\n+        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3Nzg5NQ=="}, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3ODE2OQ==", "bodyText": "Now I'm checking if the addon is enabled at compile time and, if true, the instantiation of execIdSupplier is code-generated.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416678169", "createdAt": "2020-04-28T14:51:22Z", "author": {"login": "kostola"}, "path": "kogito-codegen/src/main/resources/class-templates/DMNApplicationClassDeclTemplate.java", "diffHunk": "@@ -2,13 +2,21 @@\n public class DecisionModels implements org.kie.kogito.decision.DecisionModels {\n \n     private final static org.kie.dmn.api.core.DMNRuntime dmnRuntime = org.kie.kogito.dmn.DMNKogito.createGenericDMNRuntime();\n+    private org.kie.kogito.ExecutionIdSupplier execIdSupplier = null;\n \n     public void init(org.kie.kogito.Application app) {\n         app.config().decision().decisionEventListeners().listeners().forEach(dmnRuntime::addListener);\n+        if (requiresExecutionIdSupplier(app)) {\n+            execIdSupplier = new org.kie.kogito.dmn.DmnExecutionIdSupplier();\n+        }\n+    }\n+\n+    private boolean requiresExecutionIdSupplier(org.kie.kogito.Application app) {\n+        return app.config().addons().availableAddons().contains(\"tracing-decision\");\n     }\n \n     public org.kie.kogito.decision.DecisionModel getDecisionModel(java.lang.String namespace, java.lang.String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name);\n+        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, execIdSupplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3Nzg5NQ=="}, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDU4MjAyOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/DecisionTracingCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMToxM1rOGKcDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzoxMzoxOVrOGMiddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5ODYyMw==", "bodyText": "Why this? io.cloudevents already provide a builder for the cloud event import io.cloudevents.v1.CloudEventBuilder;", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r413598623", "createdAt": "2020-04-23T08:01:13Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/DecisionTracingCollector.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\n+import io.quarkus.vertx.ConsumeEvent;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateDecisionEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Singleton\n+public class DecisionTracingCollector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DecisionTracingCollector.class);\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(new ParameterNamesModule())\n+            .registerModule(new Jdk8Module())\n+            .registerModule(new JavaTimeModule());\n+\n+    private final Map<String, List<EvaluateEvent>> cacheMap = new HashMap<>();\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    @Outgoing(\"kogito-tracing-decision\")\n+    public Publisher<String> getEventPublisher() {\n+        return eventSubject.toFlowable(BackpressureStrategy.BUFFER);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_BeforeEvaluateAllEvent\")\n+    public String handleEvent(BeforeEvaluateAllEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_AfterEvaluateAllEvent\")\n+    public String handleEvent(AfterEvaluateAllEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_BeforeEvaluateDecisionEvent\")\n+    public String handleEvent(org.kie.kogito.tracing.decision.event.BeforeEvaluateDecisionEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_AfterEvaluateDecisionEvent\")\n+    public String handleEvent(org.kie.kogito.tracing.decision.event.AfterEvaluateDecisionEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    public String handleEvaluateEvent(EvaluateEvent event) {\n+        try {\n+            if (LOG.isInfoEnabled()) {\n+                if (event instanceof EvaluateDecisionEvent) {\n+                    LOG.trace(\n+                            \"Received {}(evaluationId: {}, modelName: {}, modelNamespace: {}, decisionId: {})\",\n+                            event.getClass().getSimpleName(),\n+                            event.getExecutionId(),\n+                            event.getModelName(),\n+                            event.getModelNamespace(),\n+                            ((EvaluateDecisionEvent) event).getDecisionId()\n+                    );\n+                } else {\n+                    LOG.trace(\n+                            \"Received {}(evaluationId: {}, modelName: {}, modelNamespace: {})\",\n+                            event.getClass().getSimpleName(),\n+                            event.getExecutionId(),\n+                            event.getModelName(),\n+                            event.getModelNamespace()\n+                    );\n+                }\n+            }\n+\n+            String evaluationId = event.getExecutionId();\n+            if (cacheMap.containsKey(evaluationId)) {\n+                cacheMap.get(evaluationId).add(event);\n+            } else {\n+                List<EvaluateEvent> list = new LinkedList<>();\n+                list.add(event);\n+                cacheMap.put(evaluationId, list);\n+                LOG.trace(\"Added evaluation {} to cache (current size: {})\", evaluationId, cacheMap.size());\n+            }\n+\n+            if (event instanceof AfterEvaluateAllEvent) {\n+                Pair<String, String> payload = aggregate(evaluationId, cacheMap.get(evaluationId));\n+                eventSubject.onNext(payload.getRight());\n+                LOG.debug(\"Generated aggregated event for evaluation {} (length {})\", payload.getKey(), payload.getValue().length());\n+                cacheMap.remove(evaluationId);\n+                LOG.trace(\"Removed evaluation {} from cache (current size: {})\", evaluationId, cacheMap.size());\n+            }\n+\n+            return \"\";\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static Pair<String, String> aggregate(String evaluationId, List<EvaluateEvent> events) {\n+        AfterEvaluateAllEvent event = (AfterEvaluateAllEvent) events.get(events.size() - 1);\n+\n+        final CloudEvent<AfterEvaluateAllEvent> cloudEvent = new CloudEvent<>(\n+                evaluationId,\n+                AfterEvaluateAllEvent.class.getName(),\n+                sourceFrom(event),\n+                event\n+        );\n+\n+        try {\n+            return Pair.of(evaluationId, MAPPER.writer().writeValueAsString(cloudEvent));\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"JsonProcessingException\", e);\n+            e.printStackTrace();\n+            return Pair.of(evaluationId, \"ERROR\");\n+        }\n+    }\n+\n+    private static URI sourceFrom(EvaluateEvent event) {\n+        return URI.create(String.format(\"%s/%s\", event.getModelNamespace(), urlEncode(event.getModelName())));\n+    }\n+\n+    private static String urlEncode(String input) {\n+        try {\n+            return URLEncoder.encode(input, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static class CloudEvent<T> {\n+        private final String specversion;\n+        private final String id;\n+        private final String type;\n+        private final URI source;\n+        private final T data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDY5Mw==", "bodyText": "When you wrote this comment the official CloudEvents SDK (that contains the package you mentioned) was not imported and this class was used as POJO for the event.\nNow we decided to use it because of some useful extensions and this was removed.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415800693", "createdAt": "2020-04-27T13:13:19Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/DecisionTracingCollector.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Singleton;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\n+import io.quarkus.vertx.ConsumeEvent;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateDecisionEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Singleton\n+public class DecisionTracingCollector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DecisionTracingCollector.class);\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(new ParameterNamesModule())\n+            .registerModule(new Jdk8Module())\n+            .registerModule(new JavaTimeModule());\n+\n+    private final Map<String, List<EvaluateEvent>> cacheMap = new HashMap<>();\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    @Outgoing(\"kogito-tracing-decision\")\n+    public Publisher<String> getEventPublisher() {\n+        return eventSubject.toFlowable(BackpressureStrategy.BUFFER);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_BeforeEvaluateAllEvent\")\n+    public String handleEvent(BeforeEvaluateAllEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_AfterEvaluateAllEvent\")\n+    public String handleEvent(AfterEvaluateAllEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_BeforeEvaluateDecisionEvent\")\n+    public String handleEvent(org.kie.kogito.tracing.decision.event.BeforeEvaluateDecisionEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    @ConsumeEvent(\"kogito-tracing-decision_AfterEvaluateDecisionEvent\")\n+    public String handleEvent(org.kie.kogito.tracing.decision.event.AfterEvaluateDecisionEvent event) {\n+        return handleEvaluateEvent(event);\n+    }\n+\n+    public String handleEvaluateEvent(EvaluateEvent event) {\n+        try {\n+            if (LOG.isInfoEnabled()) {\n+                if (event instanceof EvaluateDecisionEvent) {\n+                    LOG.trace(\n+                            \"Received {}(evaluationId: {}, modelName: {}, modelNamespace: {}, decisionId: {})\",\n+                            event.getClass().getSimpleName(),\n+                            event.getExecutionId(),\n+                            event.getModelName(),\n+                            event.getModelNamespace(),\n+                            ((EvaluateDecisionEvent) event).getDecisionId()\n+                    );\n+                } else {\n+                    LOG.trace(\n+                            \"Received {}(evaluationId: {}, modelName: {}, modelNamespace: {})\",\n+                            event.getClass().getSimpleName(),\n+                            event.getExecutionId(),\n+                            event.getModelName(),\n+                            event.getModelNamespace()\n+                    );\n+                }\n+            }\n+\n+            String evaluationId = event.getExecutionId();\n+            if (cacheMap.containsKey(evaluationId)) {\n+                cacheMap.get(evaluationId).add(event);\n+            } else {\n+                List<EvaluateEvent> list = new LinkedList<>();\n+                list.add(event);\n+                cacheMap.put(evaluationId, list);\n+                LOG.trace(\"Added evaluation {} to cache (current size: {})\", evaluationId, cacheMap.size());\n+            }\n+\n+            if (event instanceof AfterEvaluateAllEvent) {\n+                Pair<String, String> payload = aggregate(evaluationId, cacheMap.get(evaluationId));\n+                eventSubject.onNext(payload.getRight());\n+                LOG.debug(\"Generated aggregated event for evaluation {} (length {})\", payload.getKey(), payload.getValue().length());\n+                cacheMap.remove(evaluationId);\n+                LOG.trace(\"Removed evaluation {} from cache (current size: {})\", evaluationId, cacheMap.size());\n+            }\n+\n+            return \"\";\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static Pair<String, String> aggregate(String evaluationId, List<EvaluateEvent> events) {\n+        AfterEvaluateAllEvent event = (AfterEvaluateAllEvent) events.get(events.size() - 1);\n+\n+        final CloudEvent<AfterEvaluateAllEvent> cloudEvent = new CloudEvent<>(\n+                evaluationId,\n+                AfterEvaluateAllEvent.class.getName(),\n+                sourceFrom(event),\n+                event\n+        );\n+\n+        try {\n+            return Pair.of(evaluationId, MAPPER.writer().writeValueAsString(cloudEvent));\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"JsonProcessingException\", e);\n+            e.printStackTrace();\n+            return Pair.of(evaluationId, \"ERROR\");\n+        }\n+    }\n+\n+    private static URI sourceFrom(EvaluateEvent event) {\n+        return URI.create(String.format(\"%s/%s\", event.getModelNamespace(), urlEncode(event.getModelName())));\n+    }\n+\n+    private static String urlEncode(String input) {\n+        try {\n+            return URLEncoder.encode(input, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static class CloudEvent<T> {\n+        private final String specversion;\n+        private final String id;\n+        private final String type;\n+        private final URI source;\n+        private final T data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5ODYyMw=="}, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDU4ODQyOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMjozNlrOGKcHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzoxNDowMVrOGMifkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5OTU2OA==", "bodyText": "Move to another file", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r413599568", "createdAt": "2020-04-23T08:02:36Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNMessageType;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent implements Serializable {\n+\n+    private final String executionId;\n+    private final String modelName;\n+    private final String modelNamespace;\n+    private final Map<String, Object> context;\n+    private final Map<String, Object> contextMetadata;\n+    private final Result result;\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNContext context) {\n+        DMNContext clone = context.clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = null;\n+    }\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNResult result) {\n+        DMNContext clone = result.getContext().clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = from(result);\n+    }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    public String getModelNamespace() {\n+        return modelNamespace;\n+    }\n+\n+    public Map<String, Object> getContext() {\n+        return context;\n+    }\n+\n+    public Map<String, Object> getContextMetadata() {\n+        return contextMetadata;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public static class Result {\n+\n+        private final List<DecisionResult> decisionResults;\n+        private final List<Message> messages;\n+\n+        public Result(List<DecisionResult> decisionResults, List<Message> messages) {\n+            this.decisionResults = decisionResults;\n+            this.messages = messages;\n+        }\n+\n+        public List<DecisionResult> getDecisionResults() {\n+            return decisionResults;\n+        }\n+\n+        public List<Message> getMessages() {\n+            return messages;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMTIzNA==", "bodyText": "I will definitely refactor this part once we have a clear agreement on the first version of the data we want to export.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415801234", "createdAt": "2020-04-27T13:14:01Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNMessageType;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent implements Serializable {\n+\n+    private final String executionId;\n+    private final String modelName;\n+    private final String modelNamespace;\n+    private final Map<String, Object> context;\n+    private final Map<String, Object> contextMetadata;\n+    private final Result result;\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNContext context) {\n+        DMNContext clone = context.clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = null;\n+    }\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNResult result) {\n+        DMNContext clone = result.getContext().clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = from(result);\n+    }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    public String getModelNamespace() {\n+        return modelNamespace;\n+    }\n+\n+    public Map<String, Object> getContext() {\n+        return context;\n+    }\n+\n+    public Map<String, Object> getContextMetadata() {\n+        return contextMetadata;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public static class Result {\n+\n+        private final List<DecisionResult> decisionResults;\n+        private final List<Message> messages;\n+\n+        public Result(List<DecisionResult> decisionResults, List<Message> messages) {\n+            this.decisionResults = decisionResults;\n+            this.messages = messages;\n+        }\n+\n+        public List<DecisionResult> getDecisionResults() {\n+            return decisionResults;\n+        }\n+\n+        public List<Message> getMessages() {\n+            return messages;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5OTU2OA=="}, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDU5NDkwOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowMzo1OFrOGKcK_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzoxNDowOFrOGMif5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwMDUxMA==", "bodyText": "Move to another file (also for all the other files/classes)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r413600510", "createdAt": "2020-04-23T08:03:58Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNMessageType;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent implements Serializable {\n+\n+    private final String executionId;\n+    private final String modelName;\n+    private final String modelNamespace;\n+    private final Map<String, Object> context;\n+    private final Map<String, Object> contextMetadata;\n+    private final Result result;\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNContext context) {\n+        DMNContext clone = context.clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = null;\n+    }\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNResult result) {\n+        DMNContext clone = result.getContext().clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = from(result);\n+    }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    public String getModelNamespace() {\n+        return modelNamespace;\n+    }\n+\n+    public Map<String, Object> getContext() {\n+        return context;\n+    }\n+\n+    public Map<String, Object> getContextMetadata() {\n+        return contextMetadata;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public static class Result {\n+\n+        private final List<DecisionResult> decisionResults;\n+        private final List<Message> messages;\n+\n+        public Result(List<DecisionResult> decisionResults, List<Message> messages) {\n+            this.decisionResults = decisionResults;\n+            this.messages = messages;\n+        }\n+\n+        public List<DecisionResult> getDecisionResults() {\n+            return decisionResults;\n+        }\n+\n+        public List<Message> getMessages() {\n+            return messages;\n+        }\n+    }\n+\n+    public static class DecisionResult {\n+\n+        private final String decisionId;\n+        private final String decisionName;\n+        private final DMNDecisionResult.DecisionEvaluationStatus evaluationStatus;\n+        private final Object result;\n+        private final List<Message> messages;\n+        private final boolean errors;\n+\n+        public DecisionResult(String decisionId, String decisionName, DMNDecisionResult.DecisionEvaluationStatus evaluationStatus, Object result, List<Message> messages, boolean errors) {\n+            this.decisionId = decisionId;\n+            this.decisionName = decisionName;\n+            this.evaluationStatus = evaluationStatus;\n+            this.result = result;\n+            this.messages = messages;\n+            this.errors = errors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMTMxOA==", "bodyText": "I will definitely refactor this part once we have a clear agreement on the first version of the data we want to export.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415801318", "createdAt": "2020-04-27T13:14:08Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNMessageType;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent implements Serializable {\n+\n+    private final String executionId;\n+    private final String modelName;\n+    private final String modelNamespace;\n+    private final Map<String, Object> context;\n+    private final Map<String, Object> contextMetadata;\n+    private final Result result;\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNContext context) {\n+        DMNContext clone = context.clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = null;\n+    }\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNResult result) {\n+        DMNContext clone = result.getContext().clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = from(result);\n+    }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public String getModelName() {\n+        return modelName;\n+    }\n+\n+    public String getModelNamespace() {\n+        return modelNamespace;\n+    }\n+\n+    public Map<String, Object> getContext() {\n+        return context;\n+    }\n+\n+    public Map<String, Object> getContextMetadata() {\n+        return contextMetadata;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public static class Result {\n+\n+        private final List<DecisionResult> decisionResults;\n+        private final List<Message> messages;\n+\n+        public Result(List<DecisionResult> decisionResults, List<Message> messages) {\n+            this.decisionResults = decisionResults;\n+            this.messages = messages;\n+        }\n+\n+        public List<DecisionResult> getDecisionResults() {\n+            return decisionResults;\n+        }\n+\n+        public List<Message> getMessages() {\n+            return messages;\n+        }\n+    }\n+\n+    public static class DecisionResult {\n+\n+        private final String decisionId;\n+        private final String decisionName;\n+        private final DMNDecisionResult.DecisionEvaluationStatus evaluationStatus;\n+        private final Object result;\n+        private final List<Message> messages;\n+        private final boolean errors;\n+\n+        public DecisionResult(String decisionId, String decisionName, DMNDecisionResult.DecisionEvaluationStatus evaluationStatus, Object result, List<Message> messages, boolean errors) {\n+            this.decisionId = decisionId;\n+            this.decisionName = decisionName;\n+            this.evaluationStatus = evaluationStatus;\n+            this.result = result;\n+            this.messages = messages;\n+            this.errors = errors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwMDUxMA=="}, "originalCommit": {"oid": "f7d6916c3629b9314bda96a2de6f9ef0c0c5a0dc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTA1NTI1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoyOTozNVrOGMUvyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0ODowN1rOGNL61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NjAxMQ==", "bodyText": "Please use dependencyManagement in this pom to add a property and declare this new dependency", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415576011", "createdAt": "2020-04-27T07:29:35Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/pom.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-common</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+      <version>1.3.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3OTk1OQ==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416479959", "createdAt": "2020-04-28T09:48:07Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/pom.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-common</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+      <version>1.3.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NjAxMQ=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTA1NzU1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozMDoxNVrOGMUxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0ODoyN1rOGNL7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NjM1MA==", "bodyText": "Same as above, use root pom to declare this new dependency", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415576350", "createdAt": "2020-04-27T07:30:15Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/pom.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-common</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+      <version>1.3.0</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-nop</artifactId>\n+      <version>${version.org.slf4j}</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDE4OQ==", "bodyText": "I realized this wasn't even needed", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416480189", "createdAt": "2020-04-28T09:48:27Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/pom.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-common</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-dmn</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+      <version>1.3.0</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-nop</artifactId>\n+      <version>${version.org.slf4j}</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NjM1MA=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTA3MDg5OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/Aggregator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozMzozNFrOGMU4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozNTo0OVrOGQnSgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODI4NQ==", "bodyText": "Is it possible to use an interface instead of CloudEventImpl?\nWhy the package of this class contains v1? Is it version specific?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415578285", "createdAt": "2020-04-27T07:33:34Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/Aggregator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.tracing.decision.aggregator;\n+\n+import java.util.List;\n+\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+@FunctionalInterface\n+public interface Aggregator<T> {\n+\n+    CloudEventImpl<T> aggregate(String evaluationId, List<EvaluateEvent> events);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5ODYyMw==", "bodyText": "The v1 contained in the package is the version of the CloudEvents specification v1.0, so it makes sense to me to have it there.\nI used CloudEventImpl because it's the standard implementation. The CloudEvent interface seems too generic for me: it requires two type parameters, one for the attributes of the CloudEvent itself and one for the payload.\nCloudEventImpl, instead, implements CloudEvent fixing the first type parameter to a standard implementation that matches the specification, and allows to specify only the payload type (the one we care about).\nIdk why it's implemented this way but I assume for compatibility between different specs. I don't like the idea of using CloudEvent and specifying the attribute type everywhere to be honest.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416498623", "createdAt": "2020-04-28T10:18:12Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/Aggregator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.tracing.decision.aggregator;\n+\n+import java.util.List;\n+\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+@FunctionalInterface\n+public interface Aggregator<T> {\n+\n+    CloudEventImpl<T> aggregate(String evaluationId, List<EvaluateEvent> events);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODI4NQ=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NDExMw==", "bodyText": "ok let's keep it for now and see if this is solved in the new sdk version (if I remember correctly it is supposed to abstract over the different versions)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r420074113", "createdAt": "2020-05-05T12:35:49Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/aggregator/Aggregator.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.tracing.decision.aggregator;\n+\n+import java.util.List;\n+\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+@FunctionalInterface\n+public interface Aggregator<T> {\n+\n+    CloudEventImpl<T> aggregate(String evaluationId, List<EvaluateEvent> events);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODI4NQ=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTA4MzMxOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/testimpl/TestAfterEvaluateAllEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozNjoyN1rOGMU_ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDowNDowOFrOGNMiaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MDA5OQ==", "bodyText": "Missing license (here and in all new files :D )", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415580099", "createdAt": "2020-04-27T07:36:27Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/testimpl/TestAfterEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.kogito.tracing.decision.testimpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MDA5MQ==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416490091", "createdAt": "2020-04-28T10:04:08Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/testimpl/TestAfterEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.kogito.tracing.decision.testimpl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MDA5OQ=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTA5Mzg4OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/testimpl/TestAfterEvaluateAllEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozOTowOVrOGMVF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0ODo0MlrOGNL8Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MTY3Mg==", "bodyText": "I would prefer a different prefix for this class name because maven will consider this class as a test (see doc).\nWhat about Mock*?\nSame comment for all the other classes in this package", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415581672", "createdAt": "2020-04-27T07:39:09Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/testimpl/TestAfterEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.kogito.tracing.decision.testimpl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.AfterEvaluateAllEvent;\n+\n+public class TestAfterEvaluateAllEvent implements AfterEvaluateAllEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDM1NQ==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416480355", "createdAt": "2020-04-28T09:48:42Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/test/java/org/kie/kogito/tracing/decision/testimpl/TestAfterEvaluateAllEvent.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.kie.kogito.tracing.decision.testimpl;\n+\n+import org.kie.dmn.api.core.DMNResult;\n+import org.kie.dmn.api.core.event.AfterEvaluateAllEvent;\n+\n+public class TestAfterEvaluateAllEvent implements AfterEvaluateAllEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MTY3Mg=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTEwMDc2OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0MDo0OFrOGMVJ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNTo1NVrOGNUWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjcwNA==", "bodyText": "Use DependencyManagement in root pom", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415582704", "createdAt": "2020-04-27T07:40:48Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-quarkus-addon</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-common</artifactId>\n+      <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxODExMg==", "bodyText": "I used kogito-bom like in process-management addon", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416618112", "createdAt": "2020-04-28T13:35:55Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-quarkus-addon</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-common</artifactId>\n+      <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjcwNA=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTEwMTYwOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0MTowMFrOGMVKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0ODo1NFrOGNL89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjgzMw==", "bodyText": "Use dependencyManagement", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415582833", "createdAt": "2020-04-27T07:41:00Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-quarkus-addon</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-vertx</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-nop</artifactId>\n+      <version>${version.org.slf4j}</version>\n+      <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDUwMQ==", "bodyText": "This wasn't needed here as well", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416480501", "createdAt": "2020-04-28T09:48:54Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>tracing</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-tracing-decision-quarkus-addon</artifactId>\n+\n+  <properties>\n+    <maven.compiler.release>11</maven.compiler.release>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-vertx</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-nop</artifactId>\n+      <version>${version.org.slf4j}</version>\n+      <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjgzMw=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTE5MzE1OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/DecisionTracingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODowMToxM1rOGMV-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0OTowM1rOGNL9VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5NjIzNw==", "bodyText": "I would prefer to use mockito and mock EventBus instead of implement a mock. What you are doing here can be easily obtained with an empty mock (just Mockito.mock(EventBus.class)) + verify + ArgumentCaptor", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415596237", "createdAt": "2020-04-27T08:01:13Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/DecisionTracingTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.subscribers.TestSubscriber;\n+import org.junit.jupiter.api.Test;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.dmn.feel.util.Pair;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.dmn.DMNKogito;\n+import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.testimpl.TestEventBus;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionTracingTest {\n+\n+    private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+\n+    @Test\n+    public void test_ListenerAndCollector_UseRealEvents_Working() {\n+        final String modelResource = \"/Traffic Violation.dmn\";\n+        final String modelNamespace = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+        final String modelName = \"Traffic Violation\";\n+\n+        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                DecisionTracingTest.class.getResourceAsStream(modelResource)\n+        ));\n+\n+        TestEventBus eventBus = new TestEventBus();\n+        DecisionTracingListener listener = new DecisionTracingListener(eventBus);\n+        runtime.addListener(listener);\n+\n+        final Map<String, Object> driver = new HashMap<>();\n+        driver.put(\"Points\", 10);\n+        final Map<String, Object> violation = new HashMap<>();\n+        violation.put(\"Type\", \"speed\");\n+        violation.put(\"Actual Speed\", 105);\n+        violation.put(\"Speed Limit\", 100);\n+        final Map<String, Object> contextVariables = new HashMap<>();\n+        contextVariables.put(\"Driver\", driver);\n+        contextVariables.put(\"Violation\", violation);\n+\n+        final DecisionModel model = new DmnDecisionModel(runtime, modelNamespace, modelName, () -> TEST_EXECUTION_ID);\n+        final DMNContext context = model.newContext(contextVariables);\n+        model.evaluateAll(context);\n+\n+        List<Pair<String, Object>> eventBusCalls = eventBus.getCalls();\n+        assertEquals(2, eventBusCalls.size());\n+        assertEquals(\"kogito-tracing-decision_BeforeEvaluateAllEvent\", eventBusCalls.get(0).getLeft());\n+        assertTrue(eventBusCalls.get(0).getRight() instanceof BeforeEvaluateAllEvent);\n+        assertEquals(\"kogito-tracing-decision_AfterEvaluateAllEvent\", eventBusCalls.get(1).getLeft());\n+        assertTrue(eventBusCalls.get(1).getRight() instanceof AfterEvaluateAllEvent);\n+\n+        BeforeEvaluateAllEvent beforeEvent = (BeforeEvaluateAllEvent) eventBusCalls.get(0).getRight();\n+        AfterEvaluateAllEvent afterEvent = (AfterEvaluateAllEvent) eventBusCalls.get(1).getRight();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDU5Nw==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416480597", "createdAt": "2020-04-28T09:49:03Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/DecisionTracingTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.subscribers.TestSubscriber;\n+import org.junit.jupiter.api.Test;\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.dmn.feel.util.Pair;\n+import org.kie.kogito.decision.DecisionModel;\n+import org.kie.kogito.dmn.DMNKogito;\n+import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.testimpl.TestEventBus;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DecisionTracingTest {\n+\n+    private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+\n+    @Test\n+    public void test_ListenerAndCollector_UseRealEvents_Working() {\n+        final String modelResource = \"/Traffic Violation.dmn\";\n+        final String modelNamespace = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+        final String modelName = \"Traffic Violation\";\n+\n+        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                DecisionTracingTest.class.getResourceAsStream(modelResource)\n+        ));\n+\n+        TestEventBus eventBus = new TestEventBus();\n+        DecisionTracingListener listener = new DecisionTracingListener(eventBus);\n+        runtime.addListener(listener);\n+\n+        final Map<String, Object> driver = new HashMap<>();\n+        driver.put(\"Points\", 10);\n+        final Map<String, Object> violation = new HashMap<>();\n+        violation.put(\"Type\", \"speed\");\n+        violation.put(\"Actual Speed\", 105);\n+        violation.put(\"Speed Limit\", 100);\n+        final Map<String, Object> contextVariables = new HashMap<>();\n+        contextVariables.put(\"Driver\", driver);\n+        contextVariables.put(\"Violation\", violation);\n+\n+        final DecisionModel model = new DmnDecisionModel(runtime, modelNamespace, modelName, () -> TEST_EXECUTION_ID);\n+        final DMNContext context = model.newContext(contextVariables);\n+        model.evaluateAll(context);\n+\n+        List<Pair<String, Object>> eventBusCalls = eventBus.getCalls();\n+        assertEquals(2, eventBusCalls.size());\n+        assertEquals(\"kogito-tracing-decision_BeforeEvaluateAllEvent\", eventBusCalls.get(0).getLeft());\n+        assertTrue(eventBusCalls.get(0).getRight() instanceof BeforeEvaluateAllEvent);\n+        assertEquals(\"kogito-tracing-decision_AfterEvaluateAllEvent\", eventBusCalls.get(1).getLeft());\n+        assertTrue(eventBusCalls.get(1).getRight() instanceof AfterEvaluateAllEvent);\n+\n+        BeforeEvaluateAllEvent beforeEvent = (BeforeEvaluateAllEvent) eventBusCalls.get(0).getRight();\n+        AfterEvaluateAllEvent afterEvent = (AfterEvaluateAllEvent) eventBusCalls.get(1).getRight();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5NjIzNw=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ1NTIwOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/AbstractDecisionTracingCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1NzoxOVrOGMYV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNDo0MFrOGNUS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDkyNA==", "bodyText": "I'm thinking at the possibility to hide publisher with an interface (we can start with a simple Consumer<String>) so that we can also implement handlePayload and the specific implementation will just provide the impl of that interface.\nWe can keep here an abstract protected getConsumer() method to implement.\nWdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415634924", "createdAt": "2020-04-27T08:57:19Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/AbstractDecisionTracingCollector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.cloudevents.json.Json;\n+import org.kie.kogito.tracing.decision.aggregator.Aggregator;\n+import org.kie.kogito.tracing.decision.aggregator.DefaultAggregator;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractDecisionTracingCollector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractDecisionTracingCollector.class);\n+\n+    private final Map<String, List<EvaluateEvent>> cacheMap;\n+    private final Aggregator<?> aggregator;\n+\n+    public AbstractDecisionTracingCollector() {\n+        this(new DefaultAggregator());\n+    }\n+\n+    public AbstractDecisionTracingCollector(Aggregator<?> aggregator) {\n+        this.cacheMap = new HashMap<>();\n+        this.aggregator = aggregator;\n+    }\n+\n+    protected void handleEvaluateEvent(EvaluateEvent event) {\n+        LOG.trace(\n+                \"Received {}(evaluationId: {}, modelName: {}, modelNamespace: {})\",\n+                event.getClass().getSimpleName(),\n+                event.getExecutionId(),\n+                event.getModelName(),\n+                event.getModelNamespace()\n+        );\n+\n+        String evaluationId = event.getExecutionId();\n+        if (cacheMap.containsKey(evaluationId)) {\n+            cacheMap.get(evaluationId).add(event);\n+        } else {\n+            List<EvaluateEvent> list = new LinkedList<>();\n+            list.add(event);\n+            cacheMap.put(evaluationId, list);\n+            LOG.trace(\"Added evaluation {} to cache (current size: {})\", evaluationId, cacheMap.size());\n+        }\n+\n+        if (event instanceof AfterEvaluateAllEvent) {\n+            String payload = aggregate(evaluationId, cacheMap.get(evaluationId));\n+            handlePayload(payload);\n+            LOG.debug(\"Generated aggregated event for evaluation {} (length {})\", evaluationId, payload.length());\n+            cacheMap.remove(evaluationId);\n+            LOG.trace(\"Removed evaluation {} from cache (current size: {})\", evaluationId, cacheMap.size());\n+        }\n+    }\n+\n+    protected abstract void handlePayload(String payload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNzE5OA==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416617198", "createdAt": "2020-04-28T13:34:40Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/AbstractDecisionTracingCollector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.cloudevents.json.Json;\n+import org.kie.kogito.tracing.decision.aggregator.Aggregator;\n+import org.kie.kogito.tracing.decision.aggregator.DefaultAggregator;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractDecisionTracingCollector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractDecisionTracingCollector.class);\n+\n+    private final Map<String, List<EvaluateEvent>> cacheMap;\n+    private final Aggregator<?> aggregator;\n+\n+    public AbstractDecisionTracingCollector() {\n+        this(new DefaultAggregator());\n+    }\n+\n+    public AbstractDecisionTracingCollector(Aggregator<?> aggregator) {\n+        this.cacheMap = new HashMap<>();\n+        this.aggregator = aggregator;\n+    }\n+\n+    protected void handleEvaluateEvent(EvaluateEvent event) {\n+        LOG.trace(\n+                \"Received {}(evaluationId: {}, modelName: {}, modelNamespace: {})\",\n+                event.getClass().getSimpleName(),\n+                event.getExecutionId(),\n+                event.getModelName(),\n+                event.getModelNamespace()\n+        );\n+\n+        String evaluationId = event.getExecutionId();\n+        if (cacheMap.containsKey(evaluationId)) {\n+            cacheMap.get(evaluationId).add(event);\n+        } else {\n+            List<EvaluateEvent> list = new LinkedList<>();\n+            list.add(event);\n+            cacheMap.put(evaluationId, list);\n+            LOG.trace(\"Added evaluation {} to cache (current size: {})\", evaluationId, cacheMap.size());\n+        }\n+\n+        if (event instanceof AfterEvaluateAllEvent) {\n+            String payload = aggregate(evaluationId, cacheMap.get(evaluationId));\n+            handlePayload(payload);\n+            LOG.debug(\"Generated aggregated event for evaluation {} (length {})\", evaluationId, payload.length());\n+            cacheMap.remove(evaluationId);\n+            LOG.trace(\"Removed evaluation {} from cache (current size: {})\", evaluationId, cacheMap.size());\n+        }\n+    }\n+\n+    protected abstract void handlePayload(String payload);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDkyNA=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ2MTExOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/AbstractDecisionTracingListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODo1ODozMlrOGMYZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNDo1MFrOGNUTfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTgyNA==", "bodyText": "Same comment of AbstractDecisionTracingCollector: we can abstract over EventBus with  a simple Consumer and keep here all the rest of the logic.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415635824", "createdAt": "2020-04-27T08:58:32Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/AbstractDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+public abstract class AbstractDecisionTracingListener implements DMNRuntimeEventListener {\n+\n+    @Override\n+    public void beforeEvaluateAll(org.kie.dmn.api.core.event.BeforeEvaluateAllEvent event) {\n+        handleEvaluateEvent(new BeforeEvaluateAllEvent(\n+                extractExecutionId(event.getResult().getContext()),\n+                event.getModelName(),\n+                event.getModelNamespace(),\n+                event.getResult().getContext()\n+        ));\n+    }\n+\n+    @Override\n+    public void afterEvaluateAll(org.kie.dmn.api.core.event.AfterEvaluateAllEvent event) {\n+        handleEvaluateEvent(new AfterEvaluateAllEvent(\n+                extractExecutionId(event.getResult().getContext()),\n+                event.getModelName(),\n+                event.getModelNamespace(),\n+                event.getResult()\n+        ));\n+    }\n+\n+    protected abstract void handleEvaluateEvent(EvaluateEvent event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNzM0Mw==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416617343", "createdAt": "2020-04-28T13:34:50Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/AbstractDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.kie.kogito.tracing.decision;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+public abstract class AbstractDecisionTracingListener implements DMNRuntimeEventListener {\n+\n+    @Override\n+    public void beforeEvaluateAll(org.kie.dmn.api.core.event.BeforeEvaluateAllEvent event) {\n+        handleEvaluateEvent(new BeforeEvaluateAllEvent(\n+                extractExecutionId(event.getResult().getContext()),\n+                event.getModelName(),\n+                event.getModelNamespace(),\n+                event.getResult().getContext()\n+        ));\n+    }\n+\n+    @Override\n+    public void afterEvaluateAll(org.kie.dmn.api.core.event.AfterEvaluateAllEvent event) {\n+        handleEvaluateEvent(new AfterEvaluateAllEvent(\n+                extractExecutionId(event.getResult().getContext()),\n+                event.getModelName(),\n+                event.getModelNamespace(),\n+                event.getResult()\n+        ));\n+    }\n+\n+    protected abstract void handleEvaluateEvent(EvaluateEvent event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTgyNA=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTQ5NTM2OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTowNTo0MFrOGMYtMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNToxNFrOGNUUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY0MDg4MA==", "bodyText": "This class will be probably changed a lot soon but in general I would prefer to have few/none inner classes, especially when it is not a sub-component of the outer class but a proper concept like DecisionResult, Result etc.\nMy proposal is to promote all of them as proper classes, wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r415640880", "createdAt": "2020-04-27T09:05:40Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNMessageType;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNzYwOQ==", "bodyText": "Promoted all inner classes to top level Java classes \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r416617609", "createdAt": "2020-04-28T13:35:14Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.api.core.DMNMessageType;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY0MDg4MA=="}, "originalCommit": {"oid": "6916c092e1e64f1f47c312737f50f40d9cc1c8d7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE0MDczOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/DecisionTracingListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxODo0M1rOGOrdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0Nzo0MFrOGQBJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NTI4Nw==", "bodyText": "Sorry for asking again, but is there a specific reason why we are implementing this \"decision export\" using a listener in the runtime? What are the additional information that we might get from it (that we don't have in the DMNResult?)", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r418045287", "createdAt": "2020-04-30T14:18:43Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/DecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.function.Consumer;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+public class DecisionTracingListener implements DMNRuntimeEventListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea655b43c1e26620ef401485d4f5cc002ccb85c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTExMQ==", "bodyText": "We're using a listener because we already planned to increase the amount of exported information with additional data that can be obtained only via a listener (e.g. inputs/outputs of BKM model invocations)\nThus, even if in this version we're basically just exporting the final DMNResult, the implementation via listener already enables the next improvements.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r419449111", "createdAt": "2020-05-04T13:47:40Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/DecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.function.Consumer;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.kogito.decision.DecisionExecutionIdUtils;\n+import org.kie.kogito.tracing.decision.event.AfterEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.BeforeEvaluateAllEvent;\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+\n+public class DecisionTracingListener implements DMNRuntimeEventListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NTI4Nw=="}, "originalCommit": {"oid": "fea655b43c1e26620ef401485d4f5cc002ccb85c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMxNTA0OnYy", "diffSide": "RIGHT", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozNjozOFrOGRHQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoxMToxMlrOGRITVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NzgxMw==", "bodyText": "Please avoid Quarkus keyword here. This is the \"marker\" class we expect to have to recognize tracing is enable. Please rename it as KogitoDecisionTracingListener (of course rename the original class too, not only this variable :) )", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r420597813", "createdAt": "2020-05-06T07:36:38Z", "author": {"login": "danielezonca"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -75,7 +74,7 @@\n     private final transient String appPackageName = \"org.kie.kogito.app\";\n     private final transient String persistenceFactoryClass = \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\";\n     private final transient String metricsClass = \"org.kie.kogito.monitoring.rest.MetricsResource\";\n-\n+    private final transient String tracingClass = \"org.kie.kogito.tracing.decision.QuarkusDecisionTracingListener\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea655b43c1e26620ef401485d4f5cc002ccb85c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNDk5OQ==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r420614999", "createdAt": "2020-05-06T08:11:12Z", "author": {"login": "kostola"}, "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -75,7 +74,7 @@\n     private final transient String appPackageName = \"org.kie.kogito.app\";\n     private final transient String persistenceFactoryClass = \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\";\n     private final transient String metricsClass = \"org.kie.kogito.monitoring.rest.MetricsResource\";\n-\n+    private final transient String tracingClass = \"org.kie.kogito.tracing.decision.QuarkusDecisionTracingListener\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NzgxMw=="}, "originalCommit": {"oid": "fea655b43c1e26620ef401485d4f5cc002ccb85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODYxODQyOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTowOTozMVrOGRKRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozNzo0NVrOGT-fRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NzMwMw==", "bodyText": "Can you please add a comment like this one", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r420647303", "createdAt": "2020-05-06T09:09:31Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+@ApplicationScoped\n+public final class KogitoDecisionTracingListener extends DecisionTracingListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ed65da7829c3a21acad3722965d569557df8d0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MTkwOA==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r420651908", "createdAt": "2020-05-06T09:17:50Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+@ApplicationScoped\n+public final class KogitoDecisionTracingListener extends DecisionTracingListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NzMwMw=="}, "originalCommit": {"oid": "95ed65da7829c3a21acad3722965d569557df8d0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5OTk0MQ==", "bodyText": "Can you put a link to the Doc about why \"must always have\" the exact FQN, please?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423599941", "createdAt": "2020-05-12T09:37:45Z", "author": {"login": "tarilabs"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+@ApplicationScoped\n+public final class KogitoDecisionTracingListener extends DecisionTracingListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NzMwMw=="}, "originalCommit": {"oid": "95ed65da7829c3a21acad3722965d569557df8d0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzkzNjg3OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo0MTo0OFrOGT-pHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzoxMzowNFrOGVO62Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwMjQ2Mg==", "bodyText": "Can you put a link to the Doc about why \"must always have\" the exact FQN, please?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423602462", "createdAt": "2020-05-12T09:41:48Z", "author": {"login": "tarilabs"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.tracing.decision.KogitoDecisionTracingListener</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5NDk2Ng==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423794966", "createdAt": "2020-05-12T14:48:13Z", "author": {"login": "MarianMacik"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.tracing.decision.KogitoDecisionTracingListener</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwMjQ2Mg=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MTI1NQ==", "bodyText": "I agree that this should be documented but it is following the same \"convention\" of other classes like this one. It is possible to improve the javadoc but If we really want to make this design choice explicit, I think we should create a new task for document it.\nBtw it is not clear where we want to document this because we do not support \"custom addon\" in Kogito (yet?) so the way to load an addon class is an implementation detail and not an information that user should be aware of", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r424441255", "createdAt": "2020-05-13T13:34:18Z", "author": {"login": "danielezonca"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.tracing.decision.KogitoDecisionTracingListener</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwMjQ2Mg=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNzcyMQ==", "bodyText": "Let's keep this aligned with other classes in this PR so it can be merged.\nI will take care of opening a dedicated ticket for enhancing the documentation.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r424917721", "createdAt": "2020-05-14T07:13:04Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingListener.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.vertx.core.eventbus.EventBus;\n+\n+/**\n+ * This class must always have exact FQCN as <code>org.kie.kogito.tracing.decision.KogitoDecisionTracingListener</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYwMjQ2Mg=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODUxMjkzOnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjozMjo0MlrOGUEUCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo0OTo0MlrOGUyjSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5NTM3MA==", "bodyText": "Just a consideration from my side: this EvaluateEvent is collecting exacly the DMNResult. As we have already discussed in the past, if we need to export just the DMNResult I think we should do that in another way.\nBut since we are using a listener 'cause potentially we might extract more information (that is not contained in the DMNResult), I'm a bit worried to expose here exactly the DMNResult structure. This is going to be deprecated/changed very soon by design, just saying that nobody should base his implementation on the DMNResult exposed here.. wdyt?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423695370", "createdAt": "2020-05-12T12:32:42Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent {\n+\n+    private final String executionId;\n+    private final String modelName;\n+    private final String modelNamespace;\n+    private final Map<String, Object> context;\n+    private final Map<String, Object> contextMetadata;\n+    private final EvaluateEventResult result;\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNContext context) {\n+        DMNContext clone = context.clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = null;\n+    }\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNResult result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MjkzOQ==", "bodyText": "The implementation of the addon was split in several tasks, as we discussed, because of its size and to have intermediate working \"checkpoints\" to validate our design.\nThis is the first one that implements a initial version of the addon that exports a limited amount of data.\nI am already working on the second one that will refactor the exported data structure so that it won't expose any internal class of the DMN runtime anymore (which is your concern).\nI agree that nobody should base any implementation on this DMNResult, but I don't think it's a big issue here because I don't think anyone will use this version of the addon since it will soon be enhanced.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r424452939", "createdAt": "2020-05-13T13:49:42Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/event/EvaluateEvent.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event;\n+\n+import java.util.Map;\n+\n+import org.kie.dmn.api.core.DMNContext;\n+import org.kie.dmn.api.core.DMNResult;\n+\n+public abstract class EvaluateEvent {\n+\n+    private final String executionId;\n+    private final String modelName;\n+    private final String modelNamespace;\n+    private final Map<String, Object> context;\n+    private final Map<String, Object> contextMetadata;\n+    private final EvaluateEventResult result;\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNContext context) {\n+        DMNContext clone = context.clone();\n+        this.executionId = executionId;\n+        this.modelName = modelName;\n+        this.modelNamespace = modelNamespace;\n+        this.context = clone.getAll();\n+        this.contextMetadata = clone.getMetadata().asMap();\n+        this.result = null;\n+    }\n+\n+    public EvaluateEvent(String executionId, String modelName, String modelNamespace, DMNResult result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5NTM3MA=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODUzMTM0OnYy", "diffSide": "RIGHT", "path": "addons/tracing/tracing-decision-common/src/test/resources/Traffic Violation.dmn", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjozNzo0M1rOGUEfwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowODozMlrOGUza6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5ODM2OQ==", "bodyText": "I see that this dmn is already present in another module of kogito (https://github.com/kiegroup/kogito-runtimes/blob/faf3780d9b9a2e004154f4810fa702cfefaa5e55/drools/kogito-dmn/src/test/resources/org/kie/kogito/dmn/TrafficViolation.dmn), is it ok to duplicate it in this module?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423698369", "createdAt": "2020-05-12T12:37:43Z", "author": {"login": "r00ta"}, "path": "addons/tracing/tracing-decision-common/src/test/resources/Traffic Violation.dmn", "diffHunk": "@@ -0,0 +1,230 @@\n+<?xml version='1.0' encoding='UTF-8'?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2NzE3OA==", "bodyText": "It's a test resource, so I think it's ok.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r424467178", "createdAt": "2020-05-13T14:08:32Z", "author": {"login": "kostola"}, "path": "addons/tracing/tracing-decision-common/src/test/resources/Traffic Violation.dmn", "diffHunk": "@@ -0,0 +1,230 @@\n+<?xml version='1.0' encoding='UTF-8'?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY5ODM2OQ=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODYxNzE0OnYy", "diffSide": "RIGHT", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo1OTozNlrOGUFVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo1OTozNlrOGUFVrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMjE3NQ==", "bodyText": "remove newline", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423712175", "createdAt": "2020-05-12T12:59:36Z", "author": {"login": "r00ta"}, "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationGenerator.java", "diffHunk": "@@ -204,6 +204,7 @@ public ApplicationGenerator withMonitoring(boolean monitoring) {\n        return this;\n    }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODYzNzY2OnYy", "diffSide": "RIGHT", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzowNDozMFrOGUFizw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowOTo1NlrOGUze2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNTUzNQ==", "bodyText": "Just a small consideration from my side: since we injecting some booleans as configurations, I think it's better to have a configuration object instead of many booleans, it would be much easier to maintain imo. If this is fine for the others we might do this refactoring in another PR", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423715535", "createdAt": "2020-05-12T13:04:30Z", "author": {"login": "r00ta"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -206,7 +207,7 @@ private ApplicationGenerator createApplicationGenerator(\n         }\n \n         if (generateDecisions) {\n-            appGen.withGenerator(DecisionCodegen.ofPath(kieSourcesDirectory.toPath()))\n+            appGen.withGenerator(DecisionCodegen.ofPath(kieSourcesDirectory.toPath()).withTracing(useTracing))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2ODE4Ng==", "bodyText": "Yes it's a good idea. We can open a dedicated ticket for this and extend the discussion to other Kogito devs.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r424468186", "createdAt": "2020-05-13T14:09:56Z", "author": {"login": "kostola"}, "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -206,7 +207,7 @@ private ApplicationGenerator createApplicationGenerator(\n         }\n \n         if (generateDecisions) {\n-            appGen.withGenerator(DecisionCodegen.ofPath(kieSourcesDirectory.toPath()))\n+            appGen.withGenerator(DecisionCodegen.ofPath(kieSourcesDirectory.toPath()).withTracing(useTracing))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNTUzNQ=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODY0MTgwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzowNTozN1rOGUFlhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMDo1M1rOGUzhpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjIyOA==", "bodyText": "Is this used somewhere?", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r423716228", "createdAt": "2020-05-12T13:05:37Z", "author": {"login": "r00ta"}, "path": "pom.xml", "diffHunk": "@@ -752,6 +753,13 @@\n         <version>${version.io.fabric8.kubernetes-client}</version>\n         <scope>test</scope>\n       </dependency>\n+\n+      <!-- CloudEvents -->\n+      <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2ODkwMw==", "bodyText": "Yes now this sdk is being used in the addon.", "url": "https://github.com/kiegroup/kogito-runtimes/pull/468#discussion_r424468903", "createdAt": "2020-05-13T14:10:53Z", "author": {"login": "kostola"}, "path": "pom.xml", "diffHunk": "@@ -752,6 +753,13 @@\n         <version>${version.io.fabric8.kubernetes-client}</version>\n         <scope>test</scope>\n       </dependency>\n+\n+      <!-- CloudEvents -->\n+      <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjIyOA=="}, "originalCommit": {"oid": "3d144524b2db4a1ae8a4855b9c57b28213c54bb3"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 261, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}