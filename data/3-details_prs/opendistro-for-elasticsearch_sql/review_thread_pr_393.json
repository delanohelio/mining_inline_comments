{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTk5NDc5", "number": 393, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDowNTo1MVrODq82DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDowNjozNlrODq825w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzYzNjYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/SQLIntegTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDowNTo1MVrOF7BExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyODowN1rOF7BzAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNzkwOA==", "bodyText": "Would be better if we keep the full error stack by throw new RuntimeException(\"Failed to dump coverage\", ex);", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/393#discussion_r397427908", "createdAt": "2020-03-24T20:05:51Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/SQLIntegTestCase.java", "diffHunk": "@@ -107,23 +106,25 @@ protected boolean preserveClusterUponCompletion() {\n     }\n \n     @AfterClass\n-    public static void dumpCoverage() throws IOException, MalformedObjectNameException {\n+    public static void dumpCoverage() {\n         // jacoco.dir is set in sqlplugin-coverage.gradle, if it doesn't exist we don't\n         // want to collect coverage so we can return early\n         String jacocoBuildPath = System.getProperty(\"jacoco.dir\");\n-        if (jacocoBuildPath.isEmpty()) {\n+        if (jacocoBuildPath == null || jacocoBuildPath.isEmpty()) {\n             return;\n         }\n \n         String serverUrl = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:7777/jmxrmi\";\n-        JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(serverUrl));\n-        IProxy proxy = MBeanServerInvocationHandler.newProxyInstance(\n-                connector.getMBeanServerConnection(), new ObjectName(\"org.jacoco:type=Runtime\"), IProxy.class,\n-                false);\n-\n-        Path path = Paths.get(jacocoBuildPath + \"/integTest.exec\");\n-        Files.write(path, proxy.getExecutionData(false));\n-        connector.close();\n+        try(JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(serverUrl))) {\n+            IProxy proxy = MBeanServerInvocationHandler.newProxyInstance(\n+                    connector.getMBeanServerConnection(), new ObjectName(\"org.jacoco:type=Runtime\"), IProxy.class,\n+                    false);\n+\n+            Path path = Paths.get(jacocoBuildPath + \"/integTest.exec\");\n+            Files.write(path, proxy.getExecutionData(false));\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Failed to dump coverage: \" + ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e43ac5686abc8cd8a572c111cff65b386878c3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzOTc0NQ==", "bodyText": "Agreed.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/393#discussion_r397439745", "createdAt": "2020-03-24T20:28:07Z", "author": {"login": "zhongnansu"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/SQLIntegTestCase.java", "diffHunk": "@@ -107,23 +106,25 @@ protected boolean preserveClusterUponCompletion() {\n     }\n \n     @AfterClass\n-    public static void dumpCoverage() throws IOException, MalformedObjectNameException {\n+    public static void dumpCoverage() {\n         // jacoco.dir is set in sqlplugin-coverage.gradle, if it doesn't exist we don't\n         // want to collect coverage so we can return early\n         String jacocoBuildPath = System.getProperty(\"jacoco.dir\");\n-        if (jacocoBuildPath.isEmpty()) {\n+        if (jacocoBuildPath == null || jacocoBuildPath.isEmpty()) {\n             return;\n         }\n \n         String serverUrl = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:7777/jmxrmi\";\n-        JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(serverUrl));\n-        IProxy proxy = MBeanServerInvocationHandler.newProxyInstance(\n-                connector.getMBeanServerConnection(), new ObjectName(\"org.jacoco:type=Runtime\"), IProxy.class,\n-                false);\n-\n-        Path path = Paths.get(jacocoBuildPath + \"/integTest.exec\");\n-        Files.write(path, proxy.getExecutionData(false));\n-        connector.close();\n+        try(JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(serverUrl))) {\n+            IProxy proxy = MBeanServerInvocationHandler.newProxyInstance(\n+                    connector.getMBeanServerConnection(), new ObjectName(\"org.jacoco:type=Runtime\"), IProxy.class,\n+                    false);\n+\n+            Path path = Paths.get(jacocoBuildPath + \"/integTest.exec\");\n+            Files.write(path, proxy.getExecutionData(false));\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Failed to dump coverage: \" + ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNzkwOA=="}, "originalCommit": {"oid": "59e43ac5686abc8cd8a572c111cff65b386878c3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzYzODc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/SQLIntegTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDowNjozNlrOF7BGOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyODoxM1rOF7BzPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyODI4Mw==", "bodyText": "np: isNullOrEmpty in Strings or StringUtils is cleaner.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/393#discussion_r397428283", "createdAt": "2020-03-24T20:06:36Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/SQLIntegTestCase.java", "diffHunk": "@@ -107,23 +106,25 @@ protected boolean preserveClusterUponCompletion() {\n     }\n \n     @AfterClass\n-    public static void dumpCoverage() throws IOException, MalformedObjectNameException {\n+    public static void dumpCoverage() {\n         // jacoco.dir is set in sqlplugin-coverage.gradle, if it doesn't exist we don't\n         // want to collect coverage so we can return early\n         String jacocoBuildPath = System.getProperty(\"jacoco.dir\");\n-        if (jacocoBuildPath.isEmpty()) {\n+        if (jacocoBuildPath == null || jacocoBuildPath.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e43ac5686abc8cd8a572c111cff65b386878c3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzOTgwNQ==", "bodyText": "good catch, use Strings.isNullOrEmpty(Guava) instead.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/393#discussion_r397439805", "createdAt": "2020-03-24T20:28:13Z", "author": {"login": "zhongnansu"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/SQLIntegTestCase.java", "diffHunk": "@@ -107,23 +106,25 @@ protected boolean preserveClusterUponCompletion() {\n     }\n \n     @AfterClass\n-    public static void dumpCoverage() throws IOException, MalformedObjectNameException {\n+    public static void dumpCoverage() {\n         // jacoco.dir is set in sqlplugin-coverage.gradle, if it doesn't exist we don't\n         // want to collect coverage so we can return early\n         String jacocoBuildPath = System.getProperty(\"jacoco.dir\");\n-        if (jacocoBuildPath.isEmpty()) {\n+        if (jacocoBuildPath == null || jacocoBuildPath.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyODI4Mw=="}, "originalCommit": {"oid": "59e43ac5686abc8cd8a572c111cff65b386878c3"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2202, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}