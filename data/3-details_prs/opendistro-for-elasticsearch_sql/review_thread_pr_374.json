{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDE2OTE1", "number": 374, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NTozNlrODlkCiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDoxOTowM1rODlkhqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE0Mzc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NTozNlrOFyh4rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowNjowM1rOFyiNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyODMwMA==", "bodyText": "What is the reason to change this? Aren't we loosing the assertion.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388528300", "createdAt": "2020-03-05T19:55:36Z", "author": {"login": "abbashus"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "diffHunk": "@@ -256,7 +256,7 @@ public void showWildcardIndex() throws IOException {\n \n         String pattern = String.format(\"%s.*\", TestsConstants.TEST_INDEX);\n         JSONArray dataRows = getDataRows(response);\n-        assertThat(dataRows.length(), equalTo(3));\n+        assertThat(dataRows.length(), greaterThan(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3507e3783a9d87004b51069ae88924fcb5f53bfb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMzYxNw==", "bodyText": "Good catch! I didn't figure out how to do index clean up after each set of class with the new base class. This caused this SHOW TABLE got more than the tables it use. The cleanup works now so I'm reverting this line of change. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388533617", "createdAt": "2020-03-05T20:06:03Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "diffHunk": "@@ -256,7 +256,7 @@ public void showWildcardIndex() throws IOException {\n \n         String pattern = String.format(\"%s.*\", TestsConstants.TEST_INDEX);\n         JSONArray dataRows = getDataRows(response);\n-        assertThat(dataRows.length(), equalTo(3));\n+        assertThat(dataRows.length(), greaterThan(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyODMwMA=="}, "originalCommit": {"oid": "3507e3783a9d87004b51069ae88924fcb5f53bfb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzIxNTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/maker/AggMaker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDoxNzoxOVrOFyikEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDoyMTowMlrOFyisig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTQxMA==", "bodyText": "What is this change about?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388539410", "createdAt": "2020-03-05T20:17:19Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/maker/AggMaker.java", "diffHunk": "@@ -555,6 +555,9 @@ private DateHistogramAggregationBuilder dateHistogram(MethodField field) throws\n                     case \"interval\":\n                         dateHistogram.dateHistogramInterval(new DateHistogramInterval(kv.value.toString()));\n                         break;\n+                    case \"fixed_interval\":\n+                        dateHistogram.fixedInterval(new DateHistogramInterval(kv.value.toString()));\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677f46e847b95666f1a9875993c14aa0add439f0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MTU3OA==", "bodyText": "Changes regarding ES and painless API are due to the old ones we used are deprecated. The previous testing with internal cluster didn't complain about this but it became problem now with external cluster.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388541578", "createdAt": "2020-03-05T20:21:02Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/maker/AggMaker.java", "diffHunk": "@@ -555,6 +555,9 @@ private DateHistogramAggregationBuilder dateHistogram(MethodField field) throws\n                     case \"interval\":\n                         dateHistogram.dateHistogramInterval(new DateHistogramInterval(kv.value.toString()));\n                         break;\n+                    case \"fixed_interval\":\n+                        dateHistogram.fixedInterval(new DateHistogramInterval(kv.value.toString()));\n+                        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTQxMA=="}, "originalCommit": {"oid": "677f46e847b95666f1a9875993c14aa0add439f0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzIyMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDoxOTowM1rOFyioTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozMDoyOVrOFyjBoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MDQ5Mg==", "bodyText": "Sorry, not very clear about this change. Can you give an example how this affects things.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388540492", "createdAt": "2020-03-05T20:19:03Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -530,9 +536,14 @@ private static String quoteParams(String... params) {\n         }\n     }\n \n+    /** Explicitly pass in name used to generate variable ID because methodName is not always valid */\n+    private Tuple<String, String> dateFunctionTemplate(String name, String methodName, SQLExpr field) {\n+        String id = nextId(name);\n+        return new Tuple<>(id, def(id, doc(field) + \".value.\" + methodName));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677f46e847b95666f1a9875993c14aa0add439f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MzcyOA==", "bodyText": "Sorry for confusion. Basically this is caused by the painless API changes above, for example:\nfunctionStr = dateFunctionTemplate(\"weekOfWeekyear\",\n                                   \"get(WeekFields.ISO.weekOfWeekBasedYear())\",\n                                   (SQLExpr) paramers.get(0).value);\n\nThe old dateFunctionTemplate(methodName, field) passes get(WeekFields.ISO.weekOfWeekBasedYear()) to nextId() which generates an invalid variable name in painless script. Will add a little more elaboration in JavaDoc.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388543728", "createdAt": "2020-03-05T20:24:32Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -530,9 +536,14 @@ private static String quoteParams(String... params) {\n         }\n     }\n \n+    /** Explicitly pass in name used to generate variable ID because methodName is not always valid */\n+    private Tuple<String, String> dateFunctionTemplate(String name, String methodName, SQLExpr field) {\n+        String id = nextId(name);\n+        return new Tuple<>(id, def(id, doc(field) + \".value.\" + methodName));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MDQ5Mg=="}, "originalCommit": {"oid": "677f46e847b95666f1a9875993c14aa0add439f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0NTg1Nw==", "bodyText": "Thanks, clear now.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388545857", "createdAt": "2020-03-05T20:28:23Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -530,9 +536,14 @@ private static String quoteParams(String... params) {\n         }\n     }\n \n+    /** Explicitly pass in name used to generate variable ID because methodName is not always valid */\n+    private Tuple<String, String> dateFunctionTemplate(String name, String methodName, SQLExpr field) {\n+        String id = nextId(name);\n+        return new Tuple<>(id, def(id, doc(field) + \".value.\" + methodName));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MDQ5Mg=="}, "originalCommit": {"oid": "677f46e847b95666f1a9875993c14aa0add439f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0Njk3Ng==", "bodyText": "Cool. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/374#discussion_r388546976", "createdAt": "2020-03-05T20:30:29Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -530,9 +536,14 @@ private static String quoteParams(String... params) {\n         }\n     }\n \n+    /** Explicitly pass in name used to generate variable ID because methodName is not always valid */\n+    private Tuple<String, String> dateFunctionTemplate(String name, String methodName, SQLExpr field) {\n+        String id = nextId(name);\n+        return new Tuple<>(id, def(id, doc(field) + \".value.\" + methodName));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MDQ5Mg=="}, "originalCommit": {"oid": "677f46e847b95666f1a9875993c14aa0add439f0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2184, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}