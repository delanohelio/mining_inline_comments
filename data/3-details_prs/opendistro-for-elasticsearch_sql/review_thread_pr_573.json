{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTM3NjU0", "number": 573, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzoxMjoyM1rOEPVkcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzoxMzowN1rOEPVlBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTE3NDkwOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/antlr/SQLSyntaxParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzoxMjoyM1rOGy_3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNzozMFrOG0V9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyODM0OA==", "bodyText": "could you add test with single quota identifier, e.g. SELECT * FROM 'hello+world'", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/573#discussion_r456128348", "createdAt": "2020-07-16T23:12:23Z", "author": {"login": "penghuo"}, "path": "sql/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/antlr/SQLSyntaxParserTest.java", "diffHunk": "@@ -29,13 +28,36 @@\n \n   @Test\n   public void canParseSelectLiterals() {\n-    ParseTree parseTree = parser.parse(\"SELECT 123, 'hello'\");\n-    assertNotNull(parseTree);\n+    assertNotNull(parser.parse(\"SELECT 123, 'hello'\"));\n+  }\n+\n+  @Test\n+  public void canParseIndexNameWithDate() {\n+    assertNotNull(parser.parse(\"SELECT * FROM logs_2020_01\"));\n+    assertNotNull(parser.parse(\"SELECT * FROM logs-2020-01\"));\n+  }\n+\n+  @Test\n+  public void canParseHiddenIndexName() {\n+    assertNotNull(parser.parse(\"SELECT * FROM .kibana\"));\n+  }\n+\n+  @Test\n+  public void canNotParseIndexNameWithSpecialChar() {\n+    assertThrows(SyntaxCheckException.class,\n+        () -> parser.parse(\"SELECT * FROM hello+world\"));\n+  }\n+\n+  @Test\n+  public void canParseIndexNameWithSpecialCharQuoted() {\n+    assertNotNull(parser.parse(\"SELECT * FROM `hello+world`\"));\n+    assertNotNull(parser.parse(\"SELECT * FROM \\\"hello$world\\\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bb2895520c35ad810bbbe6a4f39f6afdd68efa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODk0Nw==", "bodyText": "I missed this. Will add test case and change grammar. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/573#discussion_r457538947", "createdAt": "2020-07-20T16:27:30Z", "author": {"login": "dai-chen"}, "path": "sql/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/antlr/SQLSyntaxParserTest.java", "diffHunk": "@@ -29,13 +28,36 @@\n \n   @Test\n   public void canParseSelectLiterals() {\n-    ParseTree parseTree = parser.parse(\"SELECT 123, 'hello'\");\n-    assertNotNull(parseTree);\n+    assertNotNull(parser.parse(\"SELECT 123, 'hello'\"));\n+  }\n+\n+  @Test\n+  public void canParseIndexNameWithDate() {\n+    assertNotNull(parser.parse(\"SELECT * FROM logs_2020_01\"));\n+    assertNotNull(parser.parse(\"SELECT * FROM logs-2020-01\"));\n+  }\n+\n+  @Test\n+  public void canParseHiddenIndexName() {\n+    assertNotNull(parser.parse(\"SELECT * FROM .kibana\"));\n+  }\n+\n+  @Test\n+  public void canNotParseIndexNameWithSpecialChar() {\n+    assertThrows(SyntaxCheckException.class,\n+        () -> parser.parse(\"SELECT * FROM hello+world\"));\n+  }\n+\n+  @Test\n+  public void canParseIndexNameWithSpecialCharQuoted() {\n+    assertNotNull(parser.parse(\"SELECT * FROM `hello+world`\"));\n+    assertNotNull(parser.parse(\"SELECT * FROM \\\"hello$world\\\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyODM0OA=="}, "originalCommit": {"oid": "b6bb2895520c35ad810bbbe6a4f39f6afdd68efa"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTE3NjM3OnYy", "diffSide": "RIGHT", "path": "docs/user/general/identifiers.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzoxMzowOFrOGy_4Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxMjoxMlrOG0bsTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyODU3MQ==", "bodyText": "what is the difference between back ticks and double quotation?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/573#discussion_r456128571", "createdAt": "2020-07-16T23:13:08Z", "author": {"login": "penghuo"}, "path": "docs/user/general/identifiers.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+===========\n+Identifiers\n+===========\n+\n+.. rubric:: Table of contents\n+\n+.. contents::\n+   :local:\n+   :depth: 2\n+\n+\n+Introduction\n+============\n+\n+Identifiers are used for naming your database objects, such as index name, field name etc. Basically there are two types of identifiers: regular identifiers and delimited identifiers.\n+\n+\n+Regular Identifiers\n+===================\n+\n+Description\n+-----------\n+\n+According to ANSI SQL standard, a regular identifier can start with ASCII letter (lower or upper case) or digit. The subsequent character can consist of letter, digit, underscore (``_``). It cannot be a reversed key word. And whitespace and other special characters are not allowed. In our SQL parser, we make extension to the rule for Elasticsearch storage as shown in next sub-section.\n+\n+Extensions\n+----------\n+\n+Additionally for Elasticsearch, the following identifiers are supported extensionally by our SQL parser for convenience (without the need of being delimited as shown in next section):\n+\n+1. Identifiers prefixed by dot ``.``: this is called hidden index in Elasticsearch, for example ``.kibana``.\n+2. Identifiers prefixed by at sign ``@``: this is common for meta fields generated in Logstash ingestion.\n+3. Identifiers with ``-`` in the middle: this is mostly the case for index name with date information.\n+4. Identifiers with star ``*`` present: this is mostly an index pattern for wildcard match.\n+\n+Examples\n+--------\n+\n+Here are examples for using index pattern directly without quotes::\n+\n+    od> SELECT * FROM *cc*nt*;\n+    fetched rows / total rows = 4/4\n+    +------------------+-------------+----------------------+-----------+----------+--------+------------+---------+-------+-----------------------+------------+\n+    | account_number   | firstname   | address              | balance   | gender   | city   | employer   | state   | age   | email                 | lastname   |\n+    |------------------+-------------+----------------------+-----------+----------+--------+------------+---------+-------+-----------------------+------------|\n+    | 1                | Amber       | 880 Holmes Lane      | 39225     | M        | Brogan | Pyrami     | IL      | 32    | amberduke@pyrami.com  | Duke       |\n+    | 6                | Hattie      | 671 Bristol Street   | 5686      | M        | Dante  | Netagy     | TN      | 36    | hattiebond@netagy.com | Bond       |\n+    | 13               | Nanette     | 789 Madison Street   | 32838     | F        | Nogal  | Quility    | VA      | 28    | null                  | Bates      |\n+    | 18               | Dale        | 467 Hutchinson Court | 4180      | M        | Orick  | null       | MD      | 33    | daleadams@boink.com   | Adams      |\n+    +------------------+-------------+----------------------+-----------+----------+--------+------------+---------+-------+-----------------------+------------+\n+\n+\n+Delimited Identifiers\n+=====================\n+\n+Description\n+-----------\n+\n+A delimited identifier is an identifier enclosed in back ticks ````` or double quotation marks ``\"``. In this case, the identifier enclosed is not necessarily a regular identifier. In other words, it can contain any special character not allowed by regular identifier.\n+\n+Please note the difference between single quote and double quotes in SQL syntax. The former is used to enclose a string literal while the latter is for escaping special characters in an identifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bb2895520c35ad810bbbe6a4f39f6afdd68efa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMjg0Nw==", "bodyText": "Sure, make it clear now. Thanks.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/573#discussion_r457632847", "createdAt": "2020-07-20T19:12:12Z", "author": {"login": "dai-chen"}, "path": "docs/user/general/identifiers.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+===========\n+Identifiers\n+===========\n+\n+.. rubric:: Table of contents\n+\n+.. contents::\n+   :local:\n+   :depth: 2\n+\n+\n+Introduction\n+============\n+\n+Identifiers are used for naming your database objects, such as index name, field name etc. Basically there are two types of identifiers: regular identifiers and delimited identifiers.\n+\n+\n+Regular Identifiers\n+===================\n+\n+Description\n+-----------\n+\n+According to ANSI SQL standard, a regular identifier can start with ASCII letter (lower or upper case) or digit. The subsequent character can consist of letter, digit, underscore (``_``). It cannot be a reversed key word. And whitespace and other special characters are not allowed. In our SQL parser, we make extension to the rule for Elasticsearch storage as shown in next sub-section.\n+\n+Extensions\n+----------\n+\n+Additionally for Elasticsearch, the following identifiers are supported extensionally by our SQL parser for convenience (without the need of being delimited as shown in next section):\n+\n+1. Identifiers prefixed by dot ``.``: this is called hidden index in Elasticsearch, for example ``.kibana``.\n+2. Identifiers prefixed by at sign ``@``: this is common for meta fields generated in Logstash ingestion.\n+3. Identifiers with ``-`` in the middle: this is mostly the case for index name with date information.\n+4. Identifiers with star ``*`` present: this is mostly an index pattern for wildcard match.\n+\n+Examples\n+--------\n+\n+Here are examples for using index pattern directly without quotes::\n+\n+    od> SELECT * FROM *cc*nt*;\n+    fetched rows / total rows = 4/4\n+    +------------------+-------------+----------------------+-----------+----------+--------+------------+---------+-------+-----------------------+------------+\n+    | account_number   | firstname   | address              | balance   | gender   | city   | employer   | state   | age   | email                 | lastname   |\n+    |------------------+-------------+----------------------+-----------+----------+--------+------------+---------+-------+-----------------------+------------|\n+    | 1                | Amber       | 880 Holmes Lane      | 39225     | M        | Brogan | Pyrami     | IL      | 32    | amberduke@pyrami.com  | Duke       |\n+    | 6                | Hattie      | 671 Bristol Street   | 5686      | M        | Dante  | Netagy     | TN      | 36    | hattiebond@netagy.com | Bond       |\n+    | 13               | Nanette     | 789 Madison Street   | 32838     | F        | Nogal  | Quility    | VA      | 28    | null                  | Bates      |\n+    | 18               | Dale        | 467 Hutchinson Court | 4180      | M        | Orick  | null       | MD      | 33    | daleadams@boink.com   | Adams      |\n+    +------------------+-------------+----------------------+-----------+----------+--------+------------+---------+-------+-----------------------+------------+\n+\n+\n+Delimited Identifiers\n+=====================\n+\n+Description\n+-----------\n+\n+A delimited identifier is an identifier enclosed in back ticks ````` or double quotation marks ``\"``. In this case, the identifier enclosed is not necessarily a regular identifier. In other words, it can contain any special character not allowed by regular identifier.\n+\n+Please note the difference between single quote and double quotes in SQL syntax. The former is used to enclose a string literal while the latter is for escaping special characters in an identifier.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyODU3MQ=="}, "originalCommit": {"oid": "b6bb2895520c35ad810bbbe6a4f39f6afdd68efa"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2136, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}