{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4Nzg2NjE5", "number": 469, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoxMjoxNVrOD9Ccog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyODo0N1rOD9Clxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzI5ODI2OnYy", "diffSide": "RIGHT", "path": "elasticsearch/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoxMjoxNVrOGWWGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMzoyM1rOGW_ATw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4Mzg1NQ==", "bodyText": "remove this?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426083855", "createdAt": "2020-05-15T23:12:15Z", "author": {"login": "penghuo"}, "path": "elasticsearch/build.gradle", "diffHunk": "@@ -1,10 +1,65 @@\n-apply plugin: 'java'\n+plugins {\n+    id 'java'\n+    id \"io.freefair.lombok\"\n+    id 'jacoco'\n+}\n \n repositories {\n     mavenCentral()\n }\n \n dependencies {\n+    compile project(':core')\n     compile group: 'org.elasticsearch', name: 'elasticsearch', version: \"${es_version}\"\n-    testCompile group: 'junit', name: 'junit', version: '4.12'\n+\n+    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')\n+    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'\n+    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'\n+    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+jacoco {\n+    toolVersion = \"0.8.3\"\n+}\n+jacocoTestReport {\n+    reports {\n+        html.enabled true\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])\n+        }))\n+    }\n+}\n+test.finalizedBy(project.tasks.jacocoTestReport)\n+\n+jacocoTestCoverageVerification {\n+    violationRules {\n+        rule {\n+            element = 'CLASS'\n+            excludes = [\n+                'com.amazon.opendistroforelasticsearch.sql.elasticsearch.security.SecurityAccess'\n+            ]\n+            limit {\n+                minimum = 1.0\n+            }\n+\n+        }\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MzE1OQ==", "bodyText": "Sure. Copy-pasted by mistake.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426093159", "createdAt": "2020-05-16T00:00:18Z", "author": {"login": "dai-chen"}, "path": "elasticsearch/build.gradle", "diffHunk": "@@ -1,10 +1,65 @@\n-apply plugin: 'java'\n+plugins {\n+    id 'java'\n+    id \"io.freefair.lombok\"\n+    id 'jacoco'\n+}\n \n repositories {\n     mavenCentral()\n }\n \n dependencies {\n+    compile project(':core')\n     compile group: 'org.elasticsearch', name: 'elasticsearch', version: \"${es_version}\"\n-    testCompile group: 'junit', name: 'junit', version: '4.12'\n+\n+    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')\n+    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'\n+    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'\n+    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+jacoco {\n+    toolVersion = \"0.8.3\"\n+}\n+jacocoTestReport {\n+    reports {\n+        html.enabled true\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])\n+        }))\n+    }\n+}\n+test.finalizedBy(project.tasks.jacocoTestReport)\n+\n+jacocoTestCoverageVerification {\n+    violationRules {\n+        rule {\n+            element = 'CLASS'\n+            excludes = [\n+                'com.amazon.opendistroforelasticsearch.sql.elasticsearch.security.SecurityAccess'\n+            ]\n+            limit {\n+                minimum = 1.0\n+            }\n+\n+        }\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4Mzg1NQ=="}, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NDEyNw==", "bodyText": "Added JavaDoc and UT. Thanks.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426754127", "createdAt": "2020-05-18T16:33:23Z", "author": {"login": "dai-chen"}, "path": "elasticsearch/build.gradle", "diffHunk": "@@ -1,10 +1,65 @@\n-apply plugin: 'java'\n+plugins {\n+    id 'java'\n+    id \"io.freefair.lombok\"\n+    id 'jacoco'\n+}\n \n repositories {\n     mavenCentral()\n }\n \n dependencies {\n+    compile project(':core')\n     compile group: 'org.elasticsearch', name: 'elasticsearch', version: \"${es_version}\"\n-    testCompile group: 'junit', name: 'junit', version: '4.12'\n+\n+    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')\n+    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'\n+    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'\n+    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'\n+}\n+\n+test {\n+    useJUnitPlatform()\n+    testLogging {\n+        events \"passed\", \"skipped\", \"failed\"\n+    }\n+}\n+\n+jacoco {\n+    toolVersion = \"0.8.3\"\n+}\n+jacocoTestReport {\n+    reports {\n+        html.enabled true\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])\n+        }))\n+    }\n+}\n+test.finalizedBy(project.tasks.jacocoTestReport)\n+\n+jacocoTestCoverageVerification {\n+    violationRules {\n+        rule {\n+            element = 'CLASS'\n+            excludes = [\n+                'com.amazon.opendistroforelasticsearch.sql.elasticsearch.security.SecurityAccess'\n+            ]\n+            limit {\n+                minimum = 1.0\n+            }\n+\n+        }\n+    }\n+    afterEvaluate {\n+        classDirectories.setFrom(files(classDirectories.files.collect {\n+            fileTree(dir: it,\n+                    exclude: ['**/ast/**'])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4Mzg1NQ=="}, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMxOTI1OnYy", "diffSide": "RIGHT", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyNzozOVrOGWWSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozNDoxMVrOGW_CBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzAzMw==", "bodyText": "The null value should be filtered out.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426087033", "createdAt": "2020-05-15T23:27:39Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.mapping;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.ToString;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyMap;\n+\n+/**\n+ * Elasticsearch index mapping. Because there is no specific behavior for different field types,\n+ * string is used to represent field types.\n+ */\n+@ToString\n+public class IndexMapping {\n+\n+    /**\n+     * Field mappings from field name to field type in Elasticsearch date type system.\n+     */\n+    private final Map<String, String> fieldMappings;\n+\n+    public IndexMapping(Map<String, String> fieldMappings) {\n+        this.fieldMappings = fieldMappings;\n+    }\n+\n+    public IndexMapping(MappingMetaData metaData) {\n+        this.fieldMappings = flatMappings(metaData.getSourceAsMap());\n+    }\n+\n+    /**\n+     * How many fields in the index (after flatten)\n+     * @return  field size\n+     */\n+    public int size() {\n+        return fieldMappings.size();\n+    }\n+\n+    /**\n+     * Return field type by its name.\n+     * @param fieldName     field name\n+     * @return              field type in string\n+     */\n+    public String getFieldType(String fieldName) {\n+        return fieldMappings.get(fieldName);\n+    }\n+\n+    /**\n+     * Get all field types and transform raw string type to expected type.\n+     * @param transform     transform function to transform field type in string to another type\n+     * @param <Type>        expected field type class\n+     * @return              mapping from field name to field type\n+     */\n+    public <Type> Map<String, Type> getAllFieldTypes(Function<String, Type> transform) {\n+        return fieldMappings.entrySet().\n+                             stream().\n+                             collect(Collectors.toMap(\n+                                 Map.Entry::getKey,\n+                                 e -> transform.apply(e.getValue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NDU2Ng==", "bodyText": "Thanks. Double checked there is only null value in Elasticsearch so we should be good. https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-data-types.html", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426754566", "createdAt": "2020-05-18T16:34:11Z", "author": {"login": "dai-chen"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.mapping;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.ToString;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyMap;\n+\n+/**\n+ * Elasticsearch index mapping. Because there is no specific behavior for different field types,\n+ * string is used to represent field types.\n+ */\n+@ToString\n+public class IndexMapping {\n+\n+    /**\n+     * Field mappings from field name to field type in Elasticsearch date type system.\n+     */\n+    private final Map<String, String> fieldMappings;\n+\n+    public IndexMapping(Map<String, String> fieldMappings) {\n+        this.fieldMappings = fieldMappings;\n+    }\n+\n+    public IndexMapping(MappingMetaData metaData) {\n+        this.fieldMappings = flatMappings(metaData.getSourceAsMap());\n+    }\n+\n+    /**\n+     * How many fields in the index (after flatten)\n+     * @return  field size\n+     */\n+    public int size() {\n+        return fieldMappings.size();\n+    }\n+\n+    /**\n+     * Return field type by its name.\n+     * @param fieldName     field name\n+     * @return              field type in string\n+     */\n+    public String getFieldType(String fieldName) {\n+        return fieldMappings.get(fieldName);\n+    }\n+\n+    /**\n+     * Get all field types and transform raw string type to expected type.\n+     * @param transform     transform function to transform field type in string to another type\n+     * @param <Type>        expected field type class\n+     * @return              mapping from field name to field type\n+     */\n+    public <Type> Map<String, Type> getAllFieldTypes(Function<String, Type> transform) {\n+        return fieldMappings.entrySet().\n+                             stream().\n+                             collect(Collectors.toMap(\n+                                 Map.Entry::getKey,\n+                                 e -> transform.apply(e.getValue())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzAzMw=="}, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMyMTY2OnYy", "diffSide": "RIGHT", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzoyODo0N1rOGWWTqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMDowMzowM1rOGWWsKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzMzOQ==", "bodyText": "Is it possible to return null value? or we accept null value as return value?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426087339", "createdAt": "2020-05-15T23:28:47Z", "author": {"login": "penghuo"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.mapping;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.ToString;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyMap;\n+\n+/**\n+ * Elasticsearch index mapping. Because there is no specific behavior for different field types,\n+ * string is used to represent field types.\n+ */\n+@ToString\n+public class IndexMapping {\n+\n+    /**\n+     * Field mappings from field name to field type in Elasticsearch date type system.\n+     */\n+    private final Map<String, String> fieldMappings;\n+\n+    public IndexMapping(Map<String, String> fieldMappings) {\n+        this.fieldMappings = fieldMappings;\n+    }\n+\n+    public IndexMapping(MappingMetaData metaData) {\n+        this.fieldMappings = flatMappings(metaData.getSourceAsMap());\n+    }\n+\n+    /**\n+     * How many fields in the index (after flatten)\n+     * @return  field size\n+     */\n+    public int size() {\n+        return fieldMappings.size();\n+    }\n+\n+    /**\n+     * Return field type by its name.\n+     * @param fieldName     field name\n+     * @return              field type in string\n+     */\n+    public String getFieldType(String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MzYxMQ==", "bodyText": "Yeah, it is. For now this is used in UT. Will add an existential check method or refactor it to return Optional if in use in future.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/469#discussion_r426093611", "createdAt": "2020-05-16T00:03:03Z", "author": {"login": "dai-chen"}, "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/mapping/IndexMapping.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.mapping;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.ToString;\n+import org.elasticsearch.cluster.metadata.MappingMetaData;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyMap;\n+\n+/**\n+ * Elasticsearch index mapping. Because there is no specific behavior for different field types,\n+ * string is used to represent field types.\n+ */\n+@ToString\n+public class IndexMapping {\n+\n+    /**\n+     * Field mappings from field name to field type in Elasticsearch date type system.\n+     */\n+    private final Map<String, String> fieldMappings;\n+\n+    public IndexMapping(Map<String, String> fieldMappings) {\n+        this.fieldMappings = fieldMappings;\n+    }\n+\n+    public IndexMapping(MappingMetaData metaData) {\n+        this.fieldMappings = flatMappings(metaData.getSourceAsMap());\n+    }\n+\n+    /**\n+     * How many fields in the index (after flatten)\n+     * @return  field size\n+     */\n+    public int size() {\n+        return fieldMappings.size();\n+    }\n+\n+    /**\n+     * Return field type by its name.\n+     * @param fieldName     field name\n+     * @return              field type in string\n+     */\n+    public String getFieldType(String fieldName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NzMzOQ=="}, "originalCommit": {"oid": "cf6bff1ee7067fae53cd067472f2b4fffb7030c5"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2071, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}