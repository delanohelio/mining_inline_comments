{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODMzNTIy", "number": 750, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyNDowN1rOElxCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0OTo0MVrOEmqsXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDM2MTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyNDowN1rOHVbE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo1MDowN1rOHW1Ndg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNTc3Ng==", "bodyText": "same with substring?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492225776", "createdAt": "2020-09-21T17:24:07Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NjMyNA==", "bodyText": "Yeah they are synonyms.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492966324", "createdAt": "2020-09-22T18:59:58Z", "author": {"login": "lyndonb-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNTc3Ng=="}, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMjUxOA==", "bodyText": "could you merge them, if they are same.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r493702518", "createdAt": "2020-09-23T15:50:07Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNTc3Ng=="}, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDM3MDk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyNjo0NlrOHVbLHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowMDo1OVrOHWIUEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzM1OA==", "bodyText": "minor, add EMPTY_STRING?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492227358", "createdAt": "2020-09-21T17:26:46Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {\n+    return define(BuiltinFunctionName.SUBSTR.getName(),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+        STRING, STRING, INTEGER),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+        STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Removes leading whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver ltrim() {\n+    return define(BuiltinFunctionName.LTRIM.getName(),\n+            impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripLeading())),\n+                    STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes trailing whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver rtrim() {\n+    return define(BuiltinFunctionName.RTRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripTrailing())),\n+                STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes leading and trailing whitespace from string.\n+   * Has option to specify a String to trim instead of whitespace but this is not yet supported.\n+   * Supporting String specification requires finding keywords inside TRIM command.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver trim() {\n+    return define(BuiltinFunctionName.TRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().trim())),\n+            STRING, STRING));\n+  }\n+\n+  /**\n+   * Converts String to lowercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver lower() {\n+    return define(BuiltinFunctionName.LOWER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toLowerCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * Converts String to uppercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver upper() {\n+    return define(BuiltinFunctionName.UPPER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toUpperCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat() {\n+    return define(BuiltinFunctionName.CONCAT.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + str2.stringValue())), STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings with a separator string.\n+   * Supports following signatures:\n+   * (STRING, STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat_ws() {\n+    return define(BuiltinFunctionName.CONCAT_WS.getName(),\n+        impl(nullMissingHandling((sep, str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + sep.stringValue() + str2.stringValue())),\n+                STRING, STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * Calculates length of String in bytes.\n+   * Supports following signatures:\n+   * STRING -> INTEGER\n+   */\n+  private FunctionResolver length() {\n+    return define(BuiltinFunctionName.LENGTH.getName(),\n+        impl(nullMissingHandling((str) ->\n+            new ExprIntegerValue(str.stringValue().getBytes().length)), INTEGER, STRING));\n+  }\n+\n+  /**\n+   * Does String comparison of two Strings and returns Integer value.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> INTEGER\n+   */\n+  private FunctionResolver strcmp() {\n+    return define(BuiltinFunctionName.STRCMP.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprIntegerValue(Integer.compare(\n+                str1.stringValue().compareTo(str2.stringValue()), 0))),\n+            INTEGER, STRING, STRING));\n+  }\n+\n+  private static ExprValue exprSubstrStart(ExprValue exprValue, ExprValue start) {\n+    int startIdx = start.integerValue();\n+    if (startIdx == 0) {\n+      return new ExprStringValue(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NjkyOA==", "bodyText": "Added EMPTY_STRING constant.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492966928", "createdAt": "2020-09-22T19:00:59Z", "author": {"login": "lyndonb-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {\n+    return define(BuiltinFunctionName.SUBSTR.getName(),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+        STRING, STRING, INTEGER),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+        STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Removes leading whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver ltrim() {\n+    return define(BuiltinFunctionName.LTRIM.getName(),\n+            impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripLeading())),\n+                    STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes trailing whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver rtrim() {\n+    return define(BuiltinFunctionName.RTRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripTrailing())),\n+                STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes leading and trailing whitespace from string.\n+   * Has option to specify a String to trim instead of whitespace but this is not yet supported.\n+   * Supporting String specification requires finding keywords inside TRIM command.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver trim() {\n+    return define(BuiltinFunctionName.TRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().trim())),\n+            STRING, STRING));\n+  }\n+\n+  /**\n+   * Converts String to lowercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver lower() {\n+    return define(BuiltinFunctionName.LOWER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toLowerCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * Converts String to uppercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver upper() {\n+    return define(BuiltinFunctionName.UPPER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toUpperCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat() {\n+    return define(BuiltinFunctionName.CONCAT.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + str2.stringValue())), STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings with a separator string.\n+   * Supports following signatures:\n+   * (STRING, STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat_ws() {\n+    return define(BuiltinFunctionName.CONCAT_WS.getName(),\n+        impl(nullMissingHandling((sep, str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + sep.stringValue() + str2.stringValue())),\n+                STRING, STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * Calculates length of String in bytes.\n+   * Supports following signatures:\n+   * STRING -> INTEGER\n+   */\n+  private FunctionResolver length() {\n+    return define(BuiltinFunctionName.LENGTH.getName(),\n+        impl(nullMissingHandling((str) ->\n+            new ExprIntegerValue(str.stringValue().getBytes().length)), INTEGER, STRING));\n+  }\n+\n+  /**\n+   * Does String comparison of two Strings and returns Integer value.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> INTEGER\n+   */\n+  private FunctionResolver strcmp() {\n+    return define(BuiltinFunctionName.STRCMP.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprIntegerValue(Integer.compare(\n+                str1.stringValue().compareTo(str2.stringValue()), 0))),\n+            INTEGER, STRING, STRING));\n+  }\n+\n+  private static ExprValue exprSubstrStart(ExprValue exprValue, ExprValue start) {\n+    int startIdx = start.integerValue();\n+    if (startIdx == 0) {\n+      return new ExprStringValue(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNzM1OA=="}, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDM4MTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyOToyM1rOHVbRYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowMDoyN1rOHWIS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyODk2MA==", "bodyText": "considering merge whith exprSubstrStart", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492228960", "createdAt": "2020-09-21T17:29:23Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {\n+    return define(BuiltinFunctionName.SUBSTR.getName(),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+        STRING, STRING, INTEGER),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+        STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Removes leading whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver ltrim() {\n+    return define(BuiltinFunctionName.LTRIM.getName(),\n+            impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripLeading())),\n+                    STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes trailing whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver rtrim() {\n+    return define(BuiltinFunctionName.RTRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripTrailing())),\n+                STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes leading and trailing whitespace from string.\n+   * Has option to specify a String to trim instead of whitespace but this is not yet supported.\n+   * Supporting String specification requires finding keywords inside TRIM command.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver trim() {\n+    return define(BuiltinFunctionName.TRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().trim())),\n+            STRING, STRING));\n+  }\n+\n+  /**\n+   * Converts String to lowercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver lower() {\n+    return define(BuiltinFunctionName.LOWER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toLowerCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * Converts String to uppercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver upper() {\n+    return define(BuiltinFunctionName.UPPER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toUpperCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat() {\n+    return define(BuiltinFunctionName.CONCAT.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + str2.stringValue())), STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings with a separator string.\n+   * Supports following signatures:\n+   * (STRING, STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat_ws() {\n+    return define(BuiltinFunctionName.CONCAT_WS.getName(),\n+        impl(nullMissingHandling((sep, str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + sep.stringValue() + str2.stringValue())),\n+                STRING, STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * Calculates length of String in bytes.\n+   * Supports following signatures:\n+   * STRING -> INTEGER\n+   */\n+  private FunctionResolver length() {\n+    return define(BuiltinFunctionName.LENGTH.getName(),\n+        impl(nullMissingHandling((str) ->\n+            new ExprIntegerValue(str.stringValue().getBytes().length)), INTEGER, STRING));\n+  }\n+\n+  /**\n+   * Does String comparison of two Strings and returns Integer value.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> INTEGER\n+   */\n+  private FunctionResolver strcmp() {\n+    return define(BuiltinFunctionName.STRCMP.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprIntegerValue(Integer.compare(\n+                str1.stringValue().compareTo(str2.stringValue()), 0))),\n+            INTEGER, STRING, STRING));\n+  }\n+\n+  private static ExprValue exprSubstrStart(ExprValue exprValue, ExprValue start) {\n+    int startIdx = start.integerValue();\n+    if (startIdx == 0) {\n+      return new ExprStringValue(\"\");\n+    }\n+    String str = exprValue.stringValue();\n+    startIdx = (startIdx > 0) ? (startIdx - 1) : (str.length() + startIdx);\n+    if (startIdx > str.length()) {\n+      return new ExprStringValue(\"\");\n+    }\n+\n+    return new ExprStringValue(str.substring(startIdx));\n+  }\n+\n+  private static ExprValue exprSubstrStartLength(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NjYxMA==", "bodyText": "Merged together to use function below.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492966610", "createdAt": "2020-09-22T19:00:27Z", "author": {"login": "lyndonb-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substr() {\n+    return define(BuiltinFunctionName.SUBSTR.getName(),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+        STRING, STRING, INTEGER),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+        STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Removes leading whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver ltrim() {\n+    return define(BuiltinFunctionName.LTRIM.getName(),\n+            impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripLeading())),\n+                    STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes trailing whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver rtrim() {\n+    return define(BuiltinFunctionName.RTRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripTrailing())),\n+                STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes leading and trailing whitespace from string.\n+   * Has option to specify a String to trim instead of whitespace but this is not yet supported.\n+   * Supporting String specification requires finding keywords inside TRIM command.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver trim() {\n+    return define(BuiltinFunctionName.TRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().trim())),\n+            STRING, STRING));\n+  }\n+\n+  /**\n+   * Converts String to lowercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver lower() {\n+    return define(BuiltinFunctionName.LOWER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toLowerCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * Converts String to uppercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver upper() {\n+    return define(BuiltinFunctionName.UPPER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toUpperCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat() {\n+    return define(BuiltinFunctionName.CONCAT.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + str2.stringValue())), STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings with a separator string.\n+   * Supports following signatures:\n+   * (STRING, STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat_ws() {\n+    return define(BuiltinFunctionName.CONCAT_WS.getName(),\n+        impl(nullMissingHandling((sep, str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + sep.stringValue() + str2.stringValue())),\n+                STRING, STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * Calculates length of String in bytes.\n+   * Supports following signatures:\n+   * STRING -> INTEGER\n+   */\n+  private FunctionResolver length() {\n+    return define(BuiltinFunctionName.LENGTH.getName(),\n+        impl(nullMissingHandling((str) ->\n+            new ExprIntegerValue(str.stringValue().getBytes().length)), INTEGER, STRING));\n+  }\n+\n+  /**\n+   * Does String comparison of two Strings and returns Integer value.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> INTEGER\n+   */\n+  private FunctionResolver strcmp() {\n+    return define(BuiltinFunctionName.STRCMP.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprIntegerValue(Integer.compare(\n+                str1.stringValue().compareTo(str2.stringValue()), 0))),\n+            INTEGER, STRING, STRING));\n+  }\n+\n+  private static ExprValue exprSubstrStart(ExprValue exprValue, ExprValue start) {\n+    int startIdx = start.integerValue();\n+    if (startIdx == 0) {\n+      return new ExprStringValue(\"\");\n+    }\n+    String str = exprValue.stringValue();\n+    startIdx = (startIdx > 0) ? (startIdx - 1) : (str.length() + startIdx);\n+    if (startIdx > str.length()) {\n+      return new ExprStringValue(\"\");\n+    }\n+\n+    return new ExprStringValue(str.substring(startIdx));\n+  }\n+\n+  private static ExprValue exprSubstrStartLength(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyODk2MA=="}, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDQyMjcyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunctionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo0MDoxNVrOHVbrSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzo0MDoxNVrOHVbrSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzNTU5Mw==", "bodyText": "duplicate with substrTest", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r492235593", "createdAt": "2020-09-21T17:40:15Z", "author": {"login": "penghuo"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunctionTest.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.missingValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.nullValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.stringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.when;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.DSL;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionTestBase;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TextFunctionTest extends ExpressionTestBase {\n+  @Mock\n+  Environment<Expression, ExprValue> env;\n+\n+  @Mock\n+  Expression nullRef;\n+\n+  @Mock\n+  Expression missingRef;\n+\n+\n+  private static List<SubstringInfo> SUBSTRING_STRINGS = ImmutableList.of(\n+      new SubstringInfo(\"\", 1, 1, \"\"),\n+      new SubstringInfo(\"Quadratically\", 5, null, \"ratically\"),\n+      new SubstringInfo(\"foobarbar\", 4, null, \"barbar\"),\n+      new SubstringInfo(\"Quadratically\", 5, 6, \"ratica\"),\n+      new SubstringInfo(\"Quadratically\", 5, 600, \"ratically\"),\n+      new SubstringInfo(\"Quadratically\", 500, 1, \"\"),\n+      new SubstringInfo(\"Quadratically\", 500, null, \"\"),\n+      new SubstringInfo(\"Sakila\", -3, null, \"ila\"),\n+      new SubstringInfo(\"Sakila\", -5, 3, \"aki\"),\n+      new SubstringInfo(\"Sakila\", -4, 2, \"ki\"),\n+      new SubstringInfo(\"Quadratically\", 0, null, \"\"),\n+      new SubstringInfo(\"Sakila\", 0, 2, \"\"),\n+      new SubstringInfo(\"Sakila\", 2, 0, \"\"),\n+      new SubstringInfo(\"Sakila\", 0, 0, \"\"));\n+  private static List<String> UPPER_LOWER_STRINGS = ImmutableList.of(\n+      \"test\", \" test\", \"test \", \" test \", \"TesT\", \"TEST\", \" TEST\", \"TEST \", \" TEST \", \" \", \"\");\n+  private static List<StringPatternPair> STRING_PATTERN_PAIRS = ImmutableList.of(\n+      new StringPatternPair(\"Michael!\", \"Michael!\"),\n+      new StringPatternPair(\"hello\", \"world\"),\n+      new StringPatternPair(\"world\", \"hello\"));\n+  private static List<String> TRIM_STRINGS = ImmutableList.of(\n+      \" test\", \"     test\", \"test     \", \"test\", \"     test    \", \"\", \" \");\n+  private static List<List<String>> CONCAT_STRING_LISTS = ImmutableList.of(\n+      ImmutableList.of(\"hello\", \"world\"),\n+      ImmutableList.of(\"123\", \"5325\"));\n+\n+  @AllArgsConstructor\n+  @Getter\n+  static class StringPatternPair {\n+    private final String str;\n+    private final String patt;\n+\n+    int strCmpTest() {\n+      return Integer.compare(str.compareTo(patt), 0);\n+    }\n+  }\n+\n+  @AllArgsConstructor\n+  @Getter\n+  static class SubstringInfo {\n+    String expr;\n+    Integer start;\n+    Integer len;\n+    String res;\n+  }\n+\n+  @BeforeEach\n+  public void setup() {\n+    when(nullRef.valueOf(env)).thenReturn(nullValue());\n+    when(missingRef.valueOf(env)).thenReturn(missingValue());\n+  }\n+\n+  @Test\n+  public void substr() {\n+    SUBSTRING_STRINGS.forEach(this::substrTest);\n+\n+    when(nullRef.type()).thenReturn(STRING);\n+    when(missingRef.type()).thenReturn(STRING);\n+    assertEquals(missingValue(), eval(dsl.substr(missingRef, DSL.literal(1))));\n+    assertEquals(nullValue(), eval(dsl.substr(nullRef, DSL.literal(1))));\n+\n+    when(nullRef.type()).thenReturn(INTEGER);\n+    when(missingRef.type()).thenReturn(INTEGER);\n+    assertEquals(missingValue(), eval(dsl.substr(DSL.literal(\"hello\"), missingRef)));\n+    assertEquals(nullValue(), eval(dsl.substr(DSL.literal(\"hello\"), nullRef)));\n+  }\n+\n+  void substrTest(SubstringInfo strInfo) {\n+    FunctionExpression expr;\n+    if (strInfo.getLen() == null) {\n+      expr = dsl.substr(DSL.literal(strInfo.getExpr()), DSL.literal(strInfo.getStart()));\n+    } else {\n+      expr = dsl.substr(DSL.literal(strInfo.getExpr()),\n+          DSL.literal(strInfo.getStart()),\n+          DSL.literal(strInfo.getLen()));\n+    }\n+    assertEquals(STRING, expr.type());\n+    assertEquals(strInfo.getRes(), eval(expr).stringValue());\n+  }\n+\n+  void substringTest(SubstringInfo strInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2ee9738b2349b72f86ba5c146a897532c9091f"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTgwODMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0OTo0MVrOHW1L6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0OTo0MVrOHW1L6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMjEyMQ==", "bodyText": "the length=0 is misunderstanding, in Java SDK, the definition like below\n    public String substring(int beginIndex) {\n        return substring(beginIndex, length());\n    }", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/750#discussion_r493702121", "createdAt": "2020-09-23T15:49:41Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/text/TextFunction.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.text;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.impl;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.nullMissingHandling;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntegerValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprStringValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+\n+import lombok.experimental.UtilityClass;\n+\n+\n+/**\n+ * The definition of text functions.\n+ * 1) have the clear interface for function define.\n+ * 2) the implementation should rely on ExprValue.\n+ */\n+@UtilityClass\n+public class TextFunction {\n+  private static String EMPTY_STRING = \"\";\n+\n+  /**\n+   * Register String Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(substr());\n+    repository.register(substring());\n+    repository.register(ltrim());\n+    repository.register(rtrim());\n+    repository.register(trim());\n+    repository.register(lower());\n+    repository.register(upper());\n+    repository.register(concat());\n+    repository.register(concat_ws());\n+    repository.register(length());\n+    repository.register(strcmp());\n+  }\n+\n+  /**\n+   * Gets substring starting at given point, for optional given length.\n+   * Form of this function using keywords instead of comma delimited variables is not supported.\n+   * Supports following signatures:\n+   * (STRING, INTEGER)/(STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private FunctionResolver substring() {\n+    return define(BuiltinFunctionName.SUBSTRING.getName(),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+                    STRING, STRING, INTEGER),\n+            impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+                    STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  private FunctionResolver substr() {\n+    return define(BuiltinFunctionName.SUBSTR.getName(),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStart),\n+        STRING, STRING, INTEGER),\n+      impl(nullMissingHandling(TextFunction::exprSubstrStartLength),\n+        STRING, STRING, INTEGER, INTEGER));\n+  }\n+\n+  /**\n+   * Removes leading whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver ltrim() {\n+    return define(BuiltinFunctionName.LTRIM.getName(),\n+            impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripLeading())),\n+                    STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes trailing whitespace from string.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver rtrim() {\n+    return define(BuiltinFunctionName.RTRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().stripTrailing())),\n+                STRING, STRING));\n+  }\n+\n+  /**\n+   * Removes leading and trailing whitespace from string.\n+   * Has option to specify a String to trim instead of whitespace but this is not yet supported.\n+   * Supporting String specification requires finding keywords inside TRIM command.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver trim() {\n+    return define(BuiltinFunctionName.TRIM.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue(v.stringValue().trim())),\n+            STRING, STRING));\n+  }\n+\n+  /**\n+   * Converts String to lowercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver lower() {\n+    return define(BuiltinFunctionName.LOWER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toLowerCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * Converts String to uppercase.\n+   * Supports following signatures:\n+   * STRING -> STRING\n+   */\n+  private FunctionResolver upper() {\n+    return define(BuiltinFunctionName.UPPER.getName(),\n+        impl(nullMissingHandling((v) -> new ExprStringValue((v.stringValue().toUpperCase()))),\n+            STRING, STRING)\n+    );\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat() {\n+    return define(BuiltinFunctionName.CONCAT.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + str2.stringValue())), STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * TODO: https://github.com/opendistro-for-elasticsearch/sql/issues/710\n+   *  Extend to accept variable argument amounts.\n+   * Concatenates a list of Strings with a separator string.\n+   * Supports following signatures:\n+   * (STRING, STRING, STRING) -> STRING\n+   */\n+  private FunctionResolver concat_ws() {\n+    return define(BuiltinFunctionName.CONCAT_WS.getName(),\n+        impl(nullMissingHandling((sep, str1, str2) ->\n+            new ExprStringValue(str1.stringValue() + sep.stringValue() + str2.stringValue())),\n+                STRING, STRING, STRING, STRING));\n+  }\n+\n+  /**\n+   * Calculates length of String in bytes.\n+   * Supports following signatures:\n+   * STRING -> INTEGER\n+   */\n+  private FunctionResolver length() {\n+    return define(BuiltinFunctionName.LENGTH.getName(),\n+        impl(nullMissingHandling((str) ->\n+            new ExprIntegerValue(str.stringValue().getBytes().length)), INTEGER, STRING));\n+  }\n+\n+  /**\n+   * Does String comparison of two Strings and returns Integer value.\n+   * Supports following signatures:\n+   * (STRING, STRING) -> INTEGER\n+   */\n+  private FunctionResolver strcmp() {\n+    return define(BuiltinFunctionName.STRCMP.getName(),\n+        impl(nullMissingHandling((str1, str2) ->\n+            new ExprIntegerValue(Integer.compare(\n+                str1.stringValue().compareTo(str2.stringValue()), 0))),\n+            INTEGER, STRING, STRING));\n+  }\n+\n+  private static ExprValue exprSubstrStart(ExprValue exprValue, ExprValue start) {\n+    int startIdx = start.integerValue();\n+    if (startIdx == 0) {\n+      return new ExprStringValue(EMPTY_STRING);\n+    }\n+    String str = exprValue.stringValue();\n+    return exprSubStr(str, startIdx, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7342fb97f0f1ae5c9ba1dc5d3920a2218e3c6034"}, "originalPosition": 202}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2039, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}