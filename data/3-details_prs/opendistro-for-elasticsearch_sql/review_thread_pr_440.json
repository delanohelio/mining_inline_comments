{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Nzk0NjQ1", "number": 440, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzozMjoxNlrOD3utRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODozNjowMVrOD5HTag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzYzNTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/AggregateFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzozMjoxNlrOGOJjJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTowNTozN1rOGQOHLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4OTcwMA==", "bodyText": "could be this(funcName, field, emptyList());?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r417489700", "createdAt": "2020-04-29T17:32:16Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/AggregateFunction.java", "diffHunk": "@@ -34,6 +34,13 @@\n public class AggregateFunction extends Expression {\n     private final String funcName;\n     private final Expression field;\n+    private final List<Expression> argList;\n+\n+    public AggregateFunction(String funcName, Expression field) {\n+        this.funcName = funcName;\n+        this.field = field;\n+        this.argList = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40c88eafe22fadaa5d3495d947719f0ff3419b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2MTYxMg==", "bodyText": "Yes", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419661612", "createdAt": "2020-05-04T19:05:37Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/AggregateFunction.java", "diffHunk": "@@ -34,6 +34,13 @@\n public class AggregateFunction extends Expression {\n     private final String funcName;\n     private final Expression field;\n+    private final List<Expression> argList;\n+\n+    public AggregateFunction(String funcName, Expression field) {\n+        this.funcName = funcName;\n+        this.field = field;\n+        this.argList = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4OTcwMA=="}, "originalCommit": {"oid": "de40c88eafe22fadaa5d3495d947719f0ff3419b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzY1OTM5OnYy", "diffSide": "RIGHT", "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/PPLServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzozODo0NlrOGOJybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo1MDozNlrOGSJoSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MzYxNQ==", "bodyText": "Should we add assertion in callback methods?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r417493615", "createdAt": "2020-04-29T17:38:46Z", "author": {"login": "dai-chen"}, "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/PPLServiceTest.java", "diffHunk": "@@ -15,19 +15,33 @@\n \n package com.amazon.opendistroforelasticsearch.sql.ppl;\n \n-import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.PPLSyntaxParser;\n import com.amazon.opendistroforelasticsearch.sql.ppl.config.PPLServiceConfig;\n import com.amazon.opendistroforelasticsearch.sql.ppl.domain.PPLQueryRequest;\n import com.amazon.opendistroforelasticsearch.sql.ppl.domain.PPLQueryResponse;\n import org.junit.Test;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n \n public class PPLServiceTest {\n+    private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+            PPLServiceConfig.class);\n+    private PPLService pplService = context.getBean(PPLService.class);\n     @Test\n     public void testExecuteShouldPass() {\n-        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n-                PPLServiceConfig.class);\n-        PPLService pplService = context.getBean(PPLService.class);\n+        pplService.execute(new PPLQueryRequest(\"search source=t a=1\", null), new ResponseListener<PPLQueryResponse>() {\n+            @Override\n+            public void onResponse(PPLQueryResponse pplQueryResponse) {\n+\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40c88eafe22fadaa5d3495d947719f0ff3419b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NzE3OQ==", "bodyText": "Yes sounds good, done! Could you take a look if the assertion I added is proper? Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r421677179", "createdAt": "2020-05-07T17:37:08Z", "author": {"login": "chloe-zh"}, "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/PPLServiceTest.java", "diffHunk": "@@ -15,19 +15,33 @@\n \n package com.amazon.opendistroforelasticsearch.sql.ppl;\n \n-import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.PPLSyntaxParser;\n import com.amazon.opendistroforelasticsearch.sql.ppl.config.PPLServiceConfig;\n import com.amazon.opendistroforelasticsearch.sql.ppl.domain.PPLQueryRequest;\n import com.amazon.opendistroforelasticsearch.sql.ppl.domain.PPLQueryResponse;\n import org.junit.Test;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n \n public class PPLServiceTest {\n+    private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+            PPLServiceConfig.class);\n+    private PPLService pplService = context.getBean(PPLService.class);\n     @Test\n     public void testExecuteShouldPass() {\n-        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n-                PPLServiceConfig.class);\n-        PPLService pplService = context.getBean(PPLService.class);\n+        pplService.execute(new PPLQueryRequest(\"search source=t a=1\", null), new ResponseListener<PPLQueryResponse>() {\n+            @Override\n+            public void onResponse(PPLQueryResponse pplQueryResponse) {\n+\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MzYxNQ=="}, "originalCommit": {"oid": "de40c88eafe22fadaa5d3495d947719f0ff3419b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4NTMyMw==", "bodyText": "Approved. Thanks for addressing all the comments!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r421685323", "createdAt": "2020-05-07T17:50:36Z", "author": {"login": "dai-chen"}, "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/PPLServiceTest.java", "diffHunk": "@@ -15,19 +15,33 @@\n \n package com.amazon.opendistroforelasticsearch.sql.ppl;\n \n-import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.PPLSyntaxParser;\n import com.amazon.opendistroforelasticsearch.sql.ppl.config.PPLServiceConfig;\n import com.amazon.opendistroforelasticsearch.sql.ppl.domain.PPLQueryRequest;\n import com.amazon.opendistroforelasticsearch.sql.ppl.domain.PPLQueryResponse;\n import org.junit.Test;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n \n public class PPLServiceTest {\n+    private AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+            PPLServiceConfig.class);\n+    private PPLService pplService = context.getBean(PPLService.class);\n     @Test\n     public void testExecuteShouldPass() {\n-        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n-                PPLServiceConfig.class);\n-        PPLService pplService = context.getBean(PPLService.class);\n+        pplService.execute(new PPLQueryRequest(\"search source=t a=1\", null), new ResponseListener<PPLQueryResponse>() {\n+            @Override\n+            public void onResponse(PPLQueryResponse pplQueryResponse) {\n+\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5MzYxNQ=="}, "originalCommit": {"oid": "de40c88eafe22fadaa5d3495d947719f0ff3419b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY4ODc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/AttributeList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozODo0MVrOGQIk0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozODo0MVrOGQIk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MDg5OQ==", "bodyText": "return attrList?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419570899", "createdAt": "2020-05-04T16:38:41Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/AttributeList.java", "diffHunk": "@@ -29,12 +29,12 @@\n @ToString\n @EqualsAndHashCode(callSuper = false)\n @AllArgsConstructor\n-public class AttributeList extends Expression {\n+public class AttributeList extends UnresolvedExpression {\n     @Getter\n-    private List<Expression> attrList;\n+    private List<UnresolvedExpression> attrList;\n \n     @Override\n-    public List<Expression> getChild() {\n+    public List<UnresolvedExpression> getChild() {\n         return ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY5NDg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/Field.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0MDoxOFrOGQIoqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0MDoxOFrOGQIoqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MTg4Mg==", "bodyText": "return fieldArgs?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419571882", "createdAt": "2020-05-04T16:40:18Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/Field.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ast.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+@AllArgsConstructor\n+public class Field extends UnresolvedExpression {\n+    private QualifiedName field;\n+    private List<UnresolvedExpression> fieldArgs;\n+\n+    public Field(QualifiedName field) {\n+        this.field = field;\n+        this.fieldArgs = null;\n+    }\n+\n+    public Field(String field) {\n+        this.field = new QualifiedName(field);\n+    }\n+\n+    public Field(String field, List<UnresolvedExpression> fieldArgs) {\n+        this.field = new QualifiedName(field);\n+        this.fieldArgs = fieldArgs;\n+    }\n+\n+    @Override\n+    public List<UnresolvedExpression> getChild() {\n+        return ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTcwNDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/Field.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0Mjo0MlrOGQIupw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTozNToyNVrOGQPJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzQxNQ==", "bodyText": "Please make them final if not optional and prefer emptyList over null.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419573415", "createdAt": "2020-05-04T16:42:42Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/Field.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ast.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+@AllArgsConstructor\n+public class Field extends UnresolvedExpression {\n+    private QualifiedName field;\n+    private List<UnresolvedExpression> fieldArgs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3ODUzNQ==", "bodyText": "Ok, I've changed the optional to emptyList, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419678535", "createdAt": "2020-05-04T19:35:25Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/Field.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ast.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+@AllArgsConstructor\n+public class Field extends UnresolvedExpression {\n+    private QualifiedName field;\n+    private List<UnresolvedExpression> fieldArgs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3MzQxNQ=="}, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjEzMzc5OnYy", "diffSide": "RIGHT", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODozMToxMlrOGQM3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTozMzowN1rOGQPEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MTE2Ng==", "bodyText": "Use util methods in AstDSL?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419641166", "createdAt": "2020-05-04T18:31:12Z", "author": {"login": "dai-chen"}, "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "diffHunk": "@@ -102,40 +103,53 @@ public Expression visitInExpr(InExprContext ctx) {\n                         .collect(Collectors.toList()));\n     }\n \n-    /** Boolean expression */\n+    /** Field expression */\n     @Override\n-    public Expression visitBooleanExpression(BooleanExpressionContext ctx) {\n-        return new Literal(ctx.booleanLiteral().getText(), DataType.BOOLEAN);\n+    public UnresolvedExpression visitFieldExpression(FieldExpressionContext ctx) {\n+        return new Field((QualifiedName) visit(ctx.qualifiedName()));\n     }\n \n-\n-    /** Field expression */\n     @Override\n-    public Expression visitFieldExpression(FieldExpressionContext ctx) {\n-        return new UnresolvedAttribute(ctx.getText());\n+    public UnresolvedExpression visitWcFieldExpression(WcFieldExpressionContext ctx) {\n+        return new Field((QualifiedName) visit(ctx.wcQualifiedName()));\n     }\n \n     @Override\n-    public Expression visitWcFieldExpression(WcFieldExpressionContext ctx) {\n-        return new UnresolvedAttribute(ctx.getText());\n+    public UnresolvedExpression visitSortField(SortFieldContext ctx) {\n+        return new Field(\n+                ctx.sortFieldExpression().fieldExpression().getText(),\n+                Arrays.asList(\n+                        ctx.MINUS() != null\n+                                ? new Argument(\"exclude\", new Literal(true, DataType.BOOLEAN))\n+                                : new Argument(\"exclude\", new Literal(false, DataType.BOOLEAN)),\n+                        ctx.sortFieldExpression().AUTO() != null\n+                                ? new Argument(\"type\", new Literal(\"auto\", DataType.STRING))\n+                                : ctx.sortFieldExpression().IP() != null\n+                                ? new Argument(\"type\", new Literal(\"ip\", DataType.STRING))\n+                                : ctx.sortFieldExpression().NUM() != null\n+                                ? new Argument(\"type\", new Literal(\"num\", DataType.STRING))\n+                                : ctx.sortFieldExpression().STR() != null\n+                                ? new Argument(\"type\", new Literal(\"str\", DataType.STRING))\n+                                : new Argument(\"type\", new Literal(null, DataType.NULL))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NzE4Nw==", "bodyText": "Added into ArgumentFactory class", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419677187", "createdAt": "2020-05-04T19:33:07Z", "author": {"login": "chloe-zh"}, "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "diffHunk": "@@ -102,40 +103,53 @@ public Expression visitInExpr(InExprContext ctx) {\n                         .collect(Collectors.toList()));\n     }\n \n-    /** Boolean expression */\n+    /** Field expression */\n     @Override\n-    public Expression visitBooleanExpression(BooleanExpressionContext ctx) {\n-        return new Literal(ctx.booleanLiteral().getText(), DataType.BOOLEAN);\n+    public UnresolvedExpression visitFieldExpression(FieldExpressionContext ctx) {\n+        return new Field((QualifiedName) visit(ctx.qualifiedName()));\n     }\n \n-\n-    /** Field expression */\n     @Override\n-    public Expression visitFieldExpression(FieldExpressionContext ctx) {\n-        return new UnresolvedAttribute(ctx.getText());\n+    public UnresolvedExpression visitWcFieldExpression(WcFieldExpressionContext ctx) {\n+        return new Field((QualifiedName) visit(ctx.wcQualifiedName()));\n     }\n \n     @Override\n-    public Expression visitWcFieldExpression(WcFieldExpressionContext ctx) {\n-        return new UnresolvedAttribute(ctx.getText());\n+    public UnresolvedExpression visitSortField(SortFieldContext ctx) {\n+        return new Field(\n+                ctx.sortFieldExpression().fieldExpression().getText(),\n+                Arrays.asList(\n+                        ctx.MINUS() != null\n+                                ? new Argument(\"exclude\", new Literal(true, DataType.BOOLEAN))\n+                                : new Argument(\"exclude\", new Literal(false, DataType.BOOLEAN)),\n+                        ctx.sortFieldExpression().AUTO() != null\n+                                ? new Argument(\"type\", new Literal(\"auto\", DataType.STRING))\n+                                : ctx.sortFieldExpression().IP() != null\n+                                ? new Argument(\"type\", new Literal(\"ip\", DataType.STRING))\n+                                : ctx.sortFieldExpression().NUM() != null\n+                                ? new Argument(\"type\", new Literal(\"num\", DataType.STRING))\n+                                : ctx.sortFieldExpression().STR() != null\n+                                ? new Argument(\"type\", new Literal(\"str\", DataType.STRING))\n+                                : new Argument(\"type\", new Literal(null, DataType.NULL))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MTE2Ng=="}, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjE1MDgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/Relation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODozNjowMVrOGQNCGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTozMzoyNlrOGQPEtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MzkyOA==", "bodyText": "Could tableName be only QualifiedName? Or it could some other UnresolvedExpression in some case?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419643928", "createdAt": "2020-05-04T18:36:01Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/Relation.java", "diffHunk": "@@ -16,22 +16,25 @@\n package com.amazon.opendistroforelasticsearch.sql.ast.tree;\n \n import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ast.expression.UnresolvedExpression;\n import com.google.common.collect.ImmutableList;\n import java.util.List;\n import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n \n /**\n  * Logical plan node of Relation, the interface for building the searching sources\n  */\n-@Getter\n @ToString\n @EqualsAndHashCode(callSuper = false)\n @RequiredArgsConstructor\n public class Relation extends UnresolvedPlan {\n-    private final String tableName;\n+    private final UnresolvedExpression tableName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3NzM2Nw==", "bodyText": "It should always be QualifiedName", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/440#discussion_r419677367", "createdAt": "2020-05-04T19:33:26Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/Relation.java", "diffHunk": "@@ -16,22 +16,25 @@\n package com.amazon.opendistroforelasticsearch.sql.ast.tree;\n \n import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ast.expression.UnresolvedExpression;\n import com.google.common.collect.ImmutableList;\n import java.util.List;\n import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n \n /**\n  * Logical plan node of Relation, the interface for building the searching sources\n  */\n-@Getter\n @ToString\n @EqualsAndHashCode(callSuper = false)\n @RequiredArgsConstructor\n public class Relation extends UnresolvedPlan {\n-    private final String tableName;\n+    private final UnresolvedExpression tableName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MzkyOA=="}, "originalCommit": {"oid": "c3c1445258c9cff3684f5bd57dc0dd3e6634fde1"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2053, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}