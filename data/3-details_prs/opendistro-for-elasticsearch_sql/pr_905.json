{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NTg0Mjcw", "number": 905, "title": "Added metrics for SQL query requests in new engine", "bodyText": "Issue #, if available:\nDescription of changes:\nCurrently the strategy of the rest query action can inform the metrics and increment the request total before deciding which engine the query should go into. But after the query comes to the new engine, the metrics publish is missing if any error turns up during executing or explaining in new engine (while the old engine can still publish the metrics if meets with errors).\nThis pull request is to add metrics publish when new engine meets request failure. If the exception QueryEngineException type of its extension type, the stats for failed request count in server (FAILED_REQ_COUNT_SYS) increments. Else the stats for failed request count in client (FAILED_REQ_COUNT_CUS) increments.\nBesides here also adds the metrics integration tests of success request cases for SQL query requests in new engine.\nThe failure cases are not tested in integration test because time amount to finish the metrics update might vary. Here attaches the manual sanity test of related stats in metrics, the sleep time was set to 30s, the stats were obtained from local ES log:\n\nExecute a query supported in new engine and does not meet any errors\n\n[2020-12-10T15:43:31,936][INFO ][c.a.o.s.l.p.RestSqlAction] [147dda5ddf8a.ant.amazon.com] \nBefore executing SQL query:\nRequest total: 0,\nFailed client request count: 0,\nFailed server request count 0\n[2020-12-10T15:43:32,004][INFO ][c.a.o.s.l.p.RestSqlAction] [147dda5ddf8a.ant.amazon.com] [9d2e3afa-4663-492d-acee-8dcc1a7d28d7] Incoming request /_opendistro/_sql?pretty=true: ( SELECT DATE('string_literal') )\n[2020-12-10T15:43:32,626][INFO ][c.a.o.s.l.p.RestSqlAction] [147dda5ddf8a.ant.amazon.com] [9d2e3afa-4663-492d-acee-8dcc1a7d28d7] Request SQLQueryRequest(jsonContent={\"query\":\"SELECT DATE('2020-12-10')\"}, query=SELECT DATE('2020-12-10'), path=/_opendistro/_sql, format=jdbc) is handled by new SQL query engine\n[2020-12-10T15:43:42,681][INFO ][c.a.o.s.l.p.RestSQLQueryAction] [147dda5ddf8a.ant.amazon.com] \nAfter executing SQL query:\nRequest total: 1,\nFailed client request count: 0,\nFailed server request count 0\n\n\nExecute a query supported in new engine but meet some errors in core engine computing:\n\n[2020-12-10T15:43:48,180][INFO ][c.a.o.s.l.p.RestSqlAction] [147dda5ddf8a.ant.amazon.com] \nBefore executing SQL query:\nRequest total: 1,\nFailed client request count: 0,\nFailed server request count 0\n[2020-12-10T15:43:48,181][INFO ][c.a.o.s.l.p.RestSqlAction] [147dda5ddf8a.ant.amazon.com] [0f2e4929-353c-4a92-b722-8e995e315cd9] Incoming request /_opendistro/_sql?pretty=true: ( SELECT DATE('string_literal') )\n[2020-12-10T15:43:48,202][INFO ][c.a.o.s.l.p.RestSqlAction] [147dda5ddf8a.ant.amazon.com] [0f2e4929-353c-4a92-b722-8e995e315cd9] Request SQLQueryRequest(jsonContent={\"query\":\"SELECT DATE('0')\"}, query=SELECT DATE('0'), path=/_opendistro/_sql, format=jdbc) is handled by new SQL query engine\n[2020-12-10T15:43:48,203][ERROR][c.a.o.s.l.p.RestSQLQueryAction] [147dda5ddf8a.ant.amazon.com] Error happened during query handling\ncom.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException: date:0 in unsupported format, please use yyyy-MM-dd\n\tat com.amazon.opendistroforelasticsearch.sql.data.model.ExprDateValue.<init>(ExprDateValue.java:49) ~[core-1.12.0.0.jar:?]\n\tat com.amazon.opendistroforelasticsearch.sql.expression.datetime.DateTimeFunction.exprDate(DateTimeFunction.java:459) ~[core-1.12.0.0.jar:?]\n\tat com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.lambda$nullMissingHandling$5e7b55fb$1(FunctionDSL.java:245) ~[core-1.12.0.0.jar:?]\n\n...\n\n[2020-12-10T15:43:58,217][INFO ][c.a.o.s.l.p.RestSQLQueryAction] [147dda5ddf8a.ant.amazon.com] \nAfter executing SQL query:\nRequest total: 2,\nFailed client request count: 0,\nFailed server request count 1\n\n\nStats API behavior:\n\n// before executing\nGET /_opendistro/_sql/stats\n\n{\"ppl_request_total\":0,\"failed_request_count_cb\":0,\"default_cursor_request_count\":0,\"default_cursor_request_total\":0,\"ppl_failed_request_count_syserr\":0,\"failed_request_count_cuserr\":0,\"circuit_breaker\":0,\"request_total\":0,\"ppl_failed_request_count_cuserr\":0,\"ppl_request_count\":0,\"request_count\":0,\"failed_request_count_syserr\":0}\n\n// executed a good query\nPOST _opendistro/_sql\n{\n  \"query\": \"SELECT DATE('2020-12-10')\"\n}\n\nGET /_opendistro/_sql/stats\n\n{\"ppl_request_total\":0,\"failed_request_count_cb\":0,\"default_cursor_request_count\":0,\"default_cursor_request_total\":0,\"ppl_failed_request_count_syserr\":0,\"failed_request_count_cuserr\":0,\"circuit_breaker\":0,\"request_total\":1,\"ppl_failed_request_count_cuserr\":0,\"ppl_request_count\":0,\"request_count\":0,\"failed_request_count_syserr\":0}\n\n// executed a bad query and threw `SemanticCheckException`\nPOST /_opendistro/_sql\n{\n  \"query\": \"SELECT DATE('0')\"\n}\n\nAfter around 30 sec...\n\nGET /_opendistro/_sql/stats\n\n{\"ppl_request_total\":0,\"failed_request_count_cb\":0,\"default_cursor_request_count\":0,\"default_cursor_request_total\":0,\"ppl_failed_request_count_syserr\":0,\"failed_request_count_cuserr\":0,\"circuit_breaker\":0,\"request_total\":2,\"ppl_failed_request_count_cuserr\":0,\"ppl_request_count\":0,\"request_count\":2,\"failed_request_count_syserr\":1}\n\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-12-10T02:04:27Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905", "merged": true, "mergeCommit": {"oid": "ca9f578b09ef70e8b084de231974a5a99181e317"}, "closed": true, "closedAt": "2020-12-16T00:19:10Z", "author": {"login": "chloe-zh"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkovH7gH2gAyNTM1NTg0MjcwOjUwMmUxNTA4ZjI1ODVlM2I1ZDc1ZmM1YTMwMWQ4YzU0Njg3ZDJmZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmjU_rAFqTU1MzEyNzE4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/502e1508f2585e3b5d75fc5a301d8c54687d2ffc", "committedDate": "2020-12-10T01:06:11Z", "message": "added metrics in sql new engine query action when errors occur during query execution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDMyNTA0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#pullrequestreview-549432504", "createdAt": "2020-12-10T17:24:58Z", "commit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDo1OFrOIDUt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNjo1NFrOIDUzQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjA4OQ==", "bodyText": "As I understand, SQLService will execute/explain the request by ElasticsearchExecutionEngine which delegates to ES worker thread. In this case, this try-catch won't capture the exception (if I recall right ES's listener will intercepts and writes response so control flow won't come back here).\nIn my opinion, we should create a metric collector that implements ResponseListener. The metric collector and response formatter forms a chain which is passed to execution engine and handles response/error in Chain of Responsibility style.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540356089", "createdAt": "2020-12-10T17:24:58Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -109,10 +124,15 @@ public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient no\n       return NOT_SUPPORTED_YET;\n     }\n \n-    if (request.isExplainRequest()) {\n-      return channel -> sqlService.explain(plan, createExplainResponseListener(channel));\n+    try {\n+      if (request.isExplainRequest()) {\n+        return channel -> sqlService.explain(plan, createExplainResponseListener(channel));\n+      }\n+      return channel -> sqlService.execute(plan, createQueryResponseListener(channel));\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NzQ0Mw==", "bodyText": "Because this is in new engine, exceptions like SqlParseException, ParserException and some others won't happen. Probably only SyntaxCheckException and QueryEngineException are required same as here: \n  \n    \n      sql/protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/JdbcResponseFormatter.java\n    \n    \n         Line 104\n      in\n      85202b6\n    \n    \n    \n    \n\n        \n          \n           return (t instanceof SyntaxCheckException", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540357443", "createdAt": "2020-12-10T17:26:54Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +199,33 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private void reportError(RestChannel channel, Exception e, RestStatus status) {\n+    sendResponse(\n+        channel, status, ErrorMessageFactory.createErrorMessage(e, status.getStatus()).toString());\n+  }\n+\n+  private static void logAndPublishMetrics(Exception e) {\n+    if (isClientError(e)) {\n+      LOG.error(LogUtils.getRequestId() + \" Client side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+    } else {\n+      LOG.error(LogUtils.getRequestId() + \" Server side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+    }\n+  }\n+\n+  private static boolean isClientError(Exception e) {\n+    return e instanceof NullPointerException // NPE is hard to differentiate but more likely caused by bad query\n+        || e instanceof SqlParseException\n+        || e instanceof ParserException\n+        || e instanceof SQLFeatureNotSupportedException\n+        || e instanceof SQLFeatureDisabledException\n+        || e instanceof IllegalArgumentException\n+        || e instanceof IndexNotFoundException\n+        || e instanceof VerificationException\n+        || e instanceof SqlAnalysisException\n+        || e instanceof SyntaxCheckException\n+        || e instanceof SemanticCheckException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24d86c14a7386c0ca32be67ba0af150c756e4739", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/24d86c14a7386c0ca32be67ba0af150c756e4739", "committedDate": "2020-12-10T22:04:15Z", "message": "addressed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ec592eb7c923084e49a30e76c7dffcbdfa51ce39", "committedDate": "2020-12-11T00:07:29Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzU2NTgz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#pullrequestreview-549756583", "createdAt": "2020-12-11T02:24:17Z", "commit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMjoyNDoxN1rOIDmLsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMjo1NzoyNVrOIDm4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY0MjIyNQ==", "bodyText": "I'm thinking should we publish server error metrics always in this method? Because at this point we've passed parsing, analyzing and planning, I assume any exception occurred should be treated as server error.\nBut this seems not true from the SELECT DATE('0') example in PR description. The semantic error can also be thrown here?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540642225", "createdAt": "2020-12-11T02:24:17Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +197,17 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private static void logAndPublishMetrics(Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MzU4Ng==", "bodyText": "(Assuming this check is necessary as discussed above) I think this method should be isClientError() { return e is SyntaxCheckException or SemanticCheckException}? Otherwise like the SELECT DATE('0') example in PR description, semantic error is counted as server error.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540653586", "createdAt": "2020-12-11T02:57:25Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +197,17 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private static void logAndPublishMetrics(Exception e) {\n+    if (isServerError(e)) {\n+      LOG.error(LogUtils.getRequestId() + \" Server side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+    } else {\n+      LOG.error(LogUtils.getRequestId() + \" Client side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+    }\n+  }\n+\n+  private static boolean isServerError(Exception e) {\n+    return e instanceof QueryEngineException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a0bb6a95aec5fd0ea62182e27f4ed553b26452", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/40a0bb6a95aec5fd0ea62182e27f4ed553b26452", "committedDate": "2020-12-14T19:16:41Z", "message": "take all errors from new query engine as server errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMDk5NTU4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#pullrequestreview-553099558", "createdAt": "2020-12-15T23:37:45Z", "commit": {"oid": "40a0bb6a95aec5fd0ea62182e27f4ed553b26452"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMTI3MTg2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#pullrequestreview-553127186", "createdAt": "2020-12-15T23:55:58Z", "commit": {"oid": "40a0bb6a95aec5fd0ea62182e27f4ed553b26452"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 590, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}