{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjU4MjMy", "number": 425, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxMTowMlrODw_hmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxMTowMlrODw_hmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk5MDMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/rewriter/term/TermFieldRewriterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxMTowMlrOGEQtpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzowMDo0NlrOGEXDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTMxNw==", "bodyText": "Would it be better to move it to utils/stringutils?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/425#discussion_r407121317", "createdAt": "2020-04-11T23:11:02Z", "author": {"login": "chloe-zh"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/rewriter/term/TermFieldRewriterTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.rewriter.term;\n+\n+\n+import com.alibaba.druid.sql.SQLUtils;\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.TermFieldRewriter;\n+import com.amazon.opendistroforelasticsearch.sql.util.SqlParserUtils;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.CheckScriptContents.mockLocalClusterState;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+public class TermFieldRewriterTest {\n+    private static final String TEST_MAPPING_FILE = \"mappings/semantics.json\";\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setup() throws IOException {\n+        URL url = Resources.getResource(TEST_MAPPING_FILE);\n+        String mappings = Resources.toString(url, Charsets.UTF_8);\n+        LocalClusterState.state(null);\n+        mockLocalClusterState(mappings);\n+    }\n+\n+    @Test\n+    public void testFromSubqueryShouldPass() {\n+        String sql = \"SELECT t.age as a FROM (SELECT age FROM semantics WHERE employer = 'david') t\";\n+        String expected = \"SELECT t.age as a FROM (SELECT age FROM semantics WHERE employer.keyword = 'david') t\";\n+\n+        assertThat(rewriteTerm(sql),\n+                IsEqualIgnoreCaseAndWhiteSpace.equalToIgnoreCaseAndWhiteSpace(expected));\n+    }\n+\n+    @Test\n+    public void testFromSubqueryWithoutTermShouldPass() {\n+        String sql = \"SELECT t.age as a FROM (SELECT age FROM semantics WHERE age = 10) t\";\n+        String expected = sql;\n+\n+        assertThat(rewriteTerm(sql),\n+                IsEqualIgnoreCaseAndWhiteSpace.equalToIgnoreCaseAndWhiteSpace(expected));\n+    }\n+\n+    private String rewriteTerm(String sql) {\n+        SQLQueryExpr sqlQueryExpr = SqlParserUtils.parse(sql);\n+        sqlQueryExpr.accept(new TermFieldRewriter());\n+        return SQLUtils.toMySqlString(sqlQueryExpr)\n+                .replaceAll(\"[\\\\n\\\\t]+\", \" \")\n+                .replaceAll(\"^\\\\(\", \" \")\n+                .replaceAll(\"\\\\)$\", \" \")\n+                .trim();\n+    }\n+\n+    /**\n+     * Tests if a string is equal to another string, ignore the case and whitespace.\n+     */\n+    public static class IsEqualIgnoreCaseAndWhiteSpace extends TypeSafeMatcher<String> {\n+        private final String string;\n+\n+        public IsEqualIgnoreCaseAndWhiteSpace(String string) {\n+            if (string == null) {\n+                throw new IllegalArgumentException(\"Non-null value required\");\n+            }\n+            this.string = string;\n+        }\n+\n+        @Override\n+        public boolean matchesSafely(String item) {\n+            return ignoreCase(ignoreSpaces(string)).equals(ignoreCase(ignoreSpaces(item)));\n+        }\n+\n+        @Override\n+        public void describeMismatchSafely(String item, Description mismatchDescription) {\n+            mismatchDescription.appendText(\"was \").appendValue(item);\n+        }\n+\n+        @Override\n+        public void describeTo(Description description) {\n+            description.appendText(\"a string equal to \")\n+                    .appendValue(string)\n+                    .appendText(\" ignore case and white space\");\n+        }\n+\n+        public String ignoreSpaces(String toBeStripped) {\n+            return toBeStripped.replaceAll(\"\\\\s+\", \"\").trim();\n+        }\n+\n+        public String ignoreCase(String toBeLower) {\n+            return toBeLower.toLowerCase();\n+        }\n+\n+        public static Matcher<String> equalToIgnoreCaseAndWhiteSpace(String expectedString) {\n+            return new IsEqualIgnoreCaseAndWhiteSpace(expectedString);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97cd217ae5307eea66b01ff5c0f1782f5943f87a"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyNTE3OA==", "bodyText": "Make sense. Done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/425#discussion_r407225178", "createdAt": "2020-04-12T17:00:46Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/rewriter/term/TermFieldRewriterTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.rewriter.term;\n+\n+\n+import com.alibaba.druid.sql.SQLUtils;\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.TermFieldRewriter;\n+import com.amazon.opendistroforelasticsearch.sql.util.SqlParserUtils;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.CheckScriptContents.mockLocalClusterState;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+public class TermFieldRewriterTest {\n+    private static final String TEST_MAPPING_FILE = \"mappings/semantics.json\";\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setup() throws IOException {\n+        URL url = Resources.getResource(TEST_MAPPING_FILE);\n+        String mappings = Resources.toString(url, Charsets.UTF_8);\n+        LocalClusterState.state(null);\n+        mockLocalClusterState(mappings);\n+    }\n+\n+    @Test\n+    public void testFromSubqueryShouldPass() {\n+        String sql = \"SELECT t.age as a FROM (SELECT age FROM semantics WHERE employer = 'david') t\";\n+        String expected = \"SELECT t.age as a FROM (SELECT age FROM semantics WHERE employer.keyword = 'david') t\";\n+\n+        assertThat(rewriteTerm(sql),\n+                IsEqualIgnoreCaseAndWhiteSpace.equalToIgnoreCaseAndWhiteSpace(expected));\n+    }\n+\n+    @Test\n+    public void testFromSubqueryWithoutTermShouldPass() {\n+        String sql = \"SELECT t.age as a FROM (SELECT age FROM semantics WHERE age = 10) t\";\n+        String expected = sql;\n+\n+        assertThat(rewriteTerm(sql),\n+                IsEqualIgnoreCaseAndWhiteSpace.equalToIgnoreCaseAndWhiteSpace(expected));\n+    }\n+\n+    private String rewriteTerm(String sql) {\n+        SQLQueryExpr sqlQueryExpr = SqlParserUtils.parse(sql);\n+        sqlQueryExpr.accept(new TermFieldRewriter());\n+        return SQLUtils.toMySqlString(sqlQueryExpr)\n+                .replaceAll(\"[\\\\n\\\\t]+\", \" \")\n+                .replaceAll(\"^\\\\(\", \" \")\n+                .replaceAll(\"\\\\)$\", \" \")\n+                .trim();\n+    }\n+\n+    /**\n+     * Tests if a string is equal to another string, ignore the case and whitespace.\n+     */\n+    public static class IsEqualIgnoreCaseAndWhiteSpace extends TypeSafeMatcher<String> {\n+        private final String string;\n+\n+        public IsEqualIgnoreCaseAndWhiteSpace(String string) {\n+            if (string == null) {\n+                throw new IllegalArgumentException(\"Non-null value required\");\n+            }\n+            this.string = string;\n+        }\n+\n+        @Override\n+        public boolean matchesSafely(String item) {\n+            return ignoreCase(ignoreSpaces(string)).equals(ignoreCase(ignoreSpaces(item)));\n+        }\n+\n+        @Override\n+        public void describeMismatchSafely(String item, Description mismatchDescription) {\n+            mismatchDescription.appendText(\"was \").appendValue(item);\n+        }\n+\n+        @Override\n+        public void describeTo(Description description) {\n+            description.appendText(\"a string equal to \")\n+                    .appendValue(string)\n+                    .appendText(\" ignore case and white space\");\n+        }\n+\n+        public String ignoreSpaces(String toBeStripped) {\n+            return toBeStripped.replaceAll(\"\\\\s+\", \"\").trim();\n+        }\n+\n+        public String ignoreCase(String toBeLower) {\n+            return toBeLower.toLowerCase();\n+        }\n+\n+        public static Matcher<String> equalToIgnoreCaseAndWhiteSpace(String expectedString) {\n+            return new IsEqualIgnoreCaseAndWhiteSpace(expectedString);\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTMxNw=="}, "originalCommit": {"oid": "97cd217ae5307eea66b01ff5c0f1782f5943f87a"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2224, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}