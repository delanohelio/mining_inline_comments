{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjI2MjA5", "number": 466, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoxODoxN1rOD8-I1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTozNDowMFrOD9cluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjU5MjIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/FilterOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoxODoxN1rOGWPNzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0Njo0MVrOGXLDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3MTE1MQ==", "bodyText": "Could you add license for this source file?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/466#discussion_r425971151", "createdAt": "2020-05-15T18:18:17Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/FilterOperator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ad66e6c5cacc2213d0cdec2fd34ed9f40674bc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MTQ1Nw==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/466#discussion_r426951457", "createdAt": "2020-05-18T23:46:41Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/FilterOperator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3MTE1MQ=="}, "originalCommit": {"oid": "43ad66e6c5cacc2213d0cdec2fd34ed9f40674bc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjYwOTEwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/PhysicalPlanNodeVisitorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyMzozOVrOGWPYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODoyMzozOVrOGWPYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk3Mzg2NA==", "bodyText": "Remove this comment?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/466#discussion_r425973864", "createdAt": "2020-05-15T18:23:39Z", "author": {"login": "chloe-zh"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/PhysicalPlanNodeVisitorTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.DSL;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+/**\n+ * Todo, testing purpose, delete later.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ad66e6c5cacc2213d0cdec2fd34ed9f40674bc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzU4MTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/PhysicalPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTozNDowMVrOGW8lXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTozNDowMVrOGW8lXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxNDQ2MQ==", "bodyText": "PhysicalPlan::close?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/466#discussion_r426714461", "createdAt": "2020-05-18T15:34:01Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/PhysicalPlan.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.planner.PlanNode;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Physical plan\n+ */\n+public abstract class PhysicalPlan implements PlanNode<PhysicalPlan>,\n+        Iterator<BindingTuple>,\n+        AutoCloseable {\n+    /**\n+     * Accept the {@link PhysicalPlanNodeVisitor}.\n+     *\n+     * @param visitor visitor.\n+     * @param context visitor context.\n+     * @param <R>     returned object type.\n+     * @param <C>     context type.\n+     * @return returned object.\n+     */\n+    public abstract <R, C> R accept(PhysicalPlanNodeVisitor<R, C> visitor, C context);\n+\n+    public void open() {\n+        getChild().forEach(PhysicalPlan::open);\n+    }\n+\n+    public void close() {\n+        getChild().forEach(PhysicalPlan::open);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ad66e6c5cacc2213d0cdec2fd34ed9f40674bc"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2066, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}