{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTI3ODkx", "number": 352, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjozNToxMVrODaVZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjozNToxMVrODaVZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTQwMDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/expression/core/UnaryExpressionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjozNToxMlrOFhO5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowNjo1MlrOFhkVng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5MTM5MA==", "bodyText": "Any specific reason only ABS() and Tan2() were tested against with String values?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/352#discussion_r370391390", "createdAt": "2020-01-23T22:35:12Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/expression/core/UnaryExpressionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.expression.core;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.core.operator.ScalarOperation;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.core.ExpressionFactory.literal;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.stringValue;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UnaryExpressionTest extends ExpressionTest {\n+\n+    @Rule\n+    public ExpectedException exceptionRule = ExpectedException.none();\n+\n+    @Test\n+    public void absShouldPass() {\n+        assertEquals(2.0d, apply(ScalarOperation.ABS, literal(doubleValue(-2d))));\n+    }\n+\n+    @Test\n+    public void asinShouldPass() {\n+        assertEquals(0.1001674211615598d, apply(ScalarOperation.ASIN, literal(doubleValue(0.1d))));\n+    }\n+\n+    @Test\n+    public void atanShouldPass() {\n+        assertEquals(1.1071487177940904d, apply(ScalarOperation.ATAN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void tanShouldPass() {\n+        assertEquals(-2.185039863261519, apply(ScalarOperation.TAN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void atan2ShouldPass() {\n+        assertEquals(1.1071487177940904d,\n+                     apply(ScalarOperation.ATAN2, literal(doubleValue(2d)), literal(doubleValue(1d))));\n+    }\n+\n+    @Test\n+    public void cbrtShouldPass() {\n+        assertEquals(1.2599210498948732d,\n+                     apply(ScalarOperation.CBRT, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void ceilShouldPass() {\n+        assertEquals(3.0d,\n+                     apply(ScalarOperation.CEIL, literal(doubleValue(2.1d))));\n+    }\n+\n+    @Test\n+    public void floorShouldPass() {\n+        assertEquals(2.0d,\n+                     apply(ScalarOperation.FLOOR, literal(doubleValue(2.1d))));\n+    }\n+\n+    @Test\n+    public void cosShouldPass() {\n+        assertEquals(-0.4161468365471424d,\n+                     apply(ScalarOperation.COS, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void coshShouldPass() {\n+        assertEquals(3.7621956910836314d,\n+                     apply(ScalarOperation.COSH, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void expShouldPass() {\n+        assertEquals(7.38905609893065d,\n+                     apply(ScalarOperation.EXP, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void lnShouldPass() {\n+        assertEquals(0.6931471805599453d,\n+                     apply(ScalarOperation.LN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void logShouldPass() {\n+        assertEquals(0.6931471805599453d,\n+                     apply(ScalarOperation.LOG, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void log2ShouldPass() {\n+        assertEquals(1.0d,\n+                     apply(ScalarOperation.LOG2, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void log10ShouldPass() {\n+        assertEquals(0.3010299956639812,\n+                     apply(ScalarOperation.LOG10, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void absWithStringShouldThrowException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92497d0409ae423ef3fbe6a047fddfbf64499f15"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjY4Ng==", "bodyText": "ideally all the type should been tested. the purpose of the test is to verify the error message is as expected.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/352#discussion_r370742686", "createdAt": "2020-01-24T17:06:52Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/expression/core/UnaryExpressionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.expression.core;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.core.operator.ScalarOperation;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.core.ExpressionFactory.literal;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.stringValue;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UnaryExpressionTest extends ExpressionTest {\n+\n+    @Rule\n+    public ExpectedException exceptionRule = ExpectedException.none();\n+\n+    @Test\n+    public void absShouldPass() {\n+        assertEquals(2.0d, apply(ScalarOperation.ABS, literal(doubleValue(-2d))));\n+    }\n+\n+    @Test\n+    public void asinShouldPass() {\n+        assertEquals(0.1001674211615598d, apply(ScalarOperation.ASIN, literal(doubleValue(0.1d))));\n+    }\n+\n+    @Test\n+    public void atanShouldPass() {\n+        assertEquals(1.1071487177940904d, apply(ScalarOperation.ATAN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void tanShouldPass() {\n+        assertEquals(-2.185039863261519, apply(ScalarOperation.TAN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void atan2ShouldPass() {\n+        assertEquals(1.1071487177940904d,\n+                     apply(ScalarOperation.ATAN2, literal(doubleValue(2d)), literal(doubleValue(1d))));\n+    }\n+\n+    @Test\n+    public void cbrtShouldPass() {\n+        assertEquals(1.2599210498948732d,\n+                     apply(ScalarOperation.CBRT, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void ceilShouldPass() {\n+        assertEquals(3.0d,\n+                     apply(ScalarOperation.CEIL, literal(doubleValue(2.1d))));\n+    }\n+\n+    @Test\n+    public void floorShouldPass() {\n+        assertEquals(2.0d,\n+                     apply(ScalarOperation.FLOOR, literal(doubleValue(2.1d))));\n+    }\n+\n+    @Test\n+    public void cosShouldPass() {\n+        assertEquals(-0.4161468365471424d,\n+                     apply(ScalarOperation.COS, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void coshShouldPass() {\n+        assertEquals(3.7621956910836314d,\n+                     apply(ScalarOperation.COSH, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void expShouldPass() {\n+        assertEquals(7.38905609893065d,\n+                     apply(ScalarOperation.EXP, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void lnShouldPass() {\n+        assertEquals(0.6931471805599453d,\n+                     apply(ScalarOperation.LN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void logShouldPass() {\n+        assertEquals(0.6931471805599453d,\n+                     apply(ScalarOperation.LOG, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void log2ShouldPass() {\n+        assertEquals(1.0d,\n+                     apply(ScalarOperation.LOG2, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void log10ShouldPass() {\n+        assertEquals(0.3010299956639812,\n+                     apply(ScalarOperation.LOG10, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void absWithStringShouldThrowException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5MTM5MA=="}, "originalCommit": {"oid": "92497d0409ae423ef3fbe6a047fddfbf64499f15"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2161, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}