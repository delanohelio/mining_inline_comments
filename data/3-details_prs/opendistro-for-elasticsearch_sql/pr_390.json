{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjQ1OTk5", "number": 390, "title": "Simple Query Cursor support", "bodyText": "Issue #16\nDescription of changes: This is the 1st phase of Cursor support  work. This PR implements the pagination support for simple SQL queries of the form SELECT ... FROM ... WHERE ... ORDER BY\nReviewer: To make CR easier, please have a look at the following sections of the design doc.\nProtocol, JDBC, Salient points, Settings.\nAlso the integration tests in CursorIT.java\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-03-19T21:27:17Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390", "merged": true, "mergeCommit": {"oid": "bf4810dc26cc1782ab433bc97d63a6a0b326da11"}, "closed": true, "closedAt": "2020-04-14T16:58:47Z", "author": {"login": "abbashus"}, "timelineItems": {"totalCount": 86, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMhr4LAH2gAyMzkxMjQ1OTk5OjE5NDk5ZDZkOWIwODE2OGU4YWFkNDQ5MjM5Mjc2YTNlZGFmN2I1NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXlT5xAFqTM5MzA0ODg5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19499d6d9b08168e8aad449239276a3edaf7b574", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/19499d6d9b08168e8aad449239276a3edaf7b574", "committedDate": "2020-03-11T07:07:58Z", "message": "Add  integ tests to be passed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd400f39d6d2081deb74369bb7247ef6ab20bef8", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/dd400f39d6d2081deb74369bb7247ef6ab20bef8", "committedDate": "2020-03-11T22:48:23Z", "message": "Add cluster settings for cursor - enabled, fetch_size, keep_alive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abf7d653e817222c85faa43dc75506f8b08cda16", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/abf7d653e817222c85faa43dc75506f8b08cda16", "committedDate": "2020-03-12T02:33:34Z", "message": "Add fetch_size and cursor params. fetch_size valisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496335c097935fc417f33fa6a10aef60fd0ba591", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/496335c097935fc417f33fa6a10aef60fd0ba591", "committedDate": "2020-03-12T03:57:21Z", "message": "new SqlRequest constructor for cursor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68efc8b663e504d8457e884ae6824b9cf1141864", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/68efc8b663e504d8457e884ae6824b9cf1141864", "committedDate": "2020-03-12T06:40:13Z", "message": "Add logic to open scroll based on settings, fetch_size and limit values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5bc18b87c86ec90605005467b1e3dac20e9a2f0", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e5bc18b87c86ec90605005467b1e3dac20e9a2f0", "committedDate": "2020-03-12T06:58:54Z", "message": "Add curosr close endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6871b355017e1ef3e43f20e76cd1b7cf8d46d44d", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6871b355017e1ef3e43f20e76cd1b7cf8d46d44d", "committedDate": "2020-03-16T18:15:43Z", "message": "Some updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7818bd624586eaf4674c383dd0b9385b74ba0a7f", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7818bd624586eaf4674c383dd0b9385b74ba0a7f", "committedDate": "2020-03-18T05:06:40Z", "message": "Remove date formatting changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b82f75ad647cb9b8e4d531c8e8f1f682f9df7b5", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9b82f75ad647cb9b8e4d531c8e8f1f682f9df7b5", "committedDate": "2020-03-18T07:57:59Z", "message": "Fix unit and integ tests, Ignored date format tests for a while, synced previous cursor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444fc0649920b995c191f4f9e7d8309111624b1f", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/444fc0649920b995c191f4f9e7d8309111624b1f", "committedDate": "2020-03-18T16:28:42Z", "message": "Add cursor generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5a52633bca5712bf4af503c2143047e8d0ba436", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d5a52633bca5712bf4af503c2143047e8d0ba436", "committedDate": "2020-03-18T17:15:20Z", "message": "Add test helper methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc1dc3a7c0173f303aa70240e4598434c3033cbb", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/fc1dc3a7c0173f303aa70240e4598434c3033cbb", "committedDate": "2020-03-18T21:17:38Z", "message": "Add test hepler method to get query with explicit fetch_size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b46c3338a6a8013659774264152ee6249ef7afc", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1b46c3338a6a8013659774264152ee6249ef7afc", "committedDate": "2020-03-18T21:18:22Z", "message": "Add some integ test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "718a773619b6d344fa6104eb89a27ad18715ca14", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/718a773619b6d344fa6104eb89a27ad18715ca14", "committedDate": "2020-03-18T22:26:24Z", "message": "More integ tests, more test hepler methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "527f6f91408c9fb01289a95b117017ba77476436", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/527f6f91408c9fb01289a95b117017ba77476436", "committedDate": "2020-03-18T22:51:50Z", "message": "Add two more integ tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a8642d7f99ed60a75c3945688d0da165aa59dd", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c1a8642d7f99ed60a75c3945688d0da165aa59dd", "committedDate": "2020-03-19T05:13:45Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c623bb9fffecfca3cf1f3b2b8438b5280c7855", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d6c623bb9fffecfca3cf1f3b2b8438b5280c7855", "committedDate": "2020-03-19T16:03:26Z", "message": "Cursor close API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbaf8c137383b76361f0cb6c91d311aff36a549d", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/dbaf8c137383b76361f0cb6c91d311aff36a549d", "committedDate": "2020-03-19T17:10:17Z", "message": "Close cursor integ tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0213e603e90392635e51adcbc9079a79e26932", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3c0213e603e90392635e51adcbc9079a79e26932", "committedDate": "2020-03-19T17:40:08Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82f98fb2e725538dec1d43ac9af005cdc0dd2e9", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b82f98fb2e725538dec1d43ac9af005cdc0dd2e9", "committedDate": "2020-03-19T18:26:57Z", "message": "Fix typo causing cursor close API to fail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f592e8884c59b1fa207e64d6ca3f5e1aade2207f", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f592e8884c59b1fa207e64d6ca3f5e1aade2207f", "committedDate": "2020-03-19T18:28:03Z", "message": "Remove commented code and add partial date formatting change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d13a83b6aa240081ddee6f89363731c3306abc7", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1d13a83b6aa240081ddee6f89363731c3306abc7", "committedDate": "2020-03-19T18:32:50Z", "message": "Remove unused import causing build failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a174917139ec947ab58d388ed4923c7cc6bd15", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/25a174917139ec947ab58d388ed4923c7cc6bd15", "committedDate": "2020-03-19T20:17:37Z", "message": "Add error metrics when not able to close cursor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe4f93faaed56695d7e9fc29cd063c236ce58b8", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cbe4f93faaed56695d7e9fc29cd063c236ce58b8", "committedDate": "2020-03-19T20:30:05Z", "message": "Add indexname and fieldAliasMap to cursor context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7df8df42fee34f2f9f23894baf65b85d21f2573", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c7df8df42fee34f2f9f23894baf65b85d21f2573", "committedDate": "2020-03-19T20:40:19Z", "message": "Remove ignored test cases affected by date formatting changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f00ff7bbff5af6854d3b7d701fc4a59675f10c", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/21f00ff7bbff5af6854d3b7d701fc4a59675f10c", "committedDate": "2020-03-19T20:47:29Z", "message": "Remove unneeded interface, refactor CursorType enum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392defdabad00c3e2b73c6bf6fd5b13eca4fb77e", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/392defdabad00c3e2b73c6bf6fd5b13eca4fb77e", "committedDate": "2020-03-19T21:13:27Z", "message": "Remove logs, unneeded fields, comments, refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "committedDate": "2020-03-19T21:15:53Z", "message": "Add more assert and remove comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTI3NDQ3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378127447", "createdAt": "2020-03-19T22:07:48Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNzo0OFrOF5CDCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowNzo0OFrOF5CDCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjY5OA==", "bodyText": "suggestion: tempResponse -> firstResponse", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395346698", "createdAt": "2020-03-19T22:07:48Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/CursorIT.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class CursorIT extends SQLIntegTestCase {\n+\n+    private static final String JDBC = \"jdbc\";\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    @Test\n+    public void invalidFetchSize() throws IOException {\n+        // invalid fetch_size --> negative(-2), non-numeric(\"hello\")\n+        // acceptable fetch_size --> positive numbers, even in string form \"532.4\"\n+        String query = StringUtils.format(\"SELECT firstname, state FROM %s\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        Response response = null;\n+        try {\n+            String queryResult = executeFetchQuery(query, -2, JDBC);\n+        } catch (ResponseException ex) {\n+            response = ex.getResponse();\n+        }\n+\n+        JSONObject resp = new JSONObject(TestUtils.getResponseBody(response));\n+        assertThat(resp.getInt(\"status\"), equalTo(400));\n+        assertThat(resp.query(\"/error/reason\"), equalTo(\"Invalid SQL query\"));\n+        assertThat(resp.query(\"/error/details\"), equalTo(\"Fetch_size must be greater or equal to 0\"));\n+        assertThat(resp.query(\"/error/type\"), equalTo(\"IllegalArgumentException\"));\n+    }\n+\n+    @Test\n+    public void noPaginationWhenFetchSizeZero() throws IOException {\n+        // fetch_size = 0, default to non-pagination behaviour for simple queries\n+        // this can be checked by checking that cursor is not present, and old default limit applies\n+        String selectQuery = StringUtils.format(\"SELECT firstname, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchQuery(selectQuery, 0, JDBC));\n+        assertFalse(response.has(\"cursor\"));\n+        assertThat(response.getJSONArray(\"datarows\").length(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void validNumberOfPages() throws IOException {\n+        // the index has 1000 records, with fetch size of 50 we should get 20 pages with no cursor on last page\n+        String selectQuery = StringUtils.format(\"SELECT firstname, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchQuery(selectQuery, 50, JDBC));\n+        String cursor = response.getString(\"cursor\");\n+        int pageCount = 1;\n+\n+        while (!cursor.isEmpty()) { //this condition also checks that there is no cursor on last page\n+            response = executeCursorQuery(cursor);\n+            cursor = response.optString(\"cursor\");\n+            pageCount++;\n+        }\n+\n+        assertThat(pageCount, equalTo(20));\n+\n+        // using random value here, with fetch size of 28 we should get 36 pages (ceil of 1000/28)\n+        response = new JSONObject(executeFetchQuery(selectQuery, 28, JDBC));\n+        cursor = response.getString(\"cursor\");\n+        System.out.println(response);\n+        pageCount = 1;\n+\n+        while (!cursor.isEmpty()) {\n+            response = executeCursorQuery(cursor);\n+            cursor = response.optString(\"cursor\");\n+            pageCount++;\n+        }\n+        assertThat(pageCount, equalTo(36));\n+    }\n+\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPagination() throws IOException {\n+        // simple query - accounts index has 1000 docs, using higher limit to get all docs\n+        String selectQuery = StringUtils.format(\"SELECT firstname, state FROM %s \", TEST_INDEX_ACCOUNT );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 80);\n+    }\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPaginationWhereClause() throws IOException {\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s WHERE balance < 25000 AND age > 32\", TEST_INDEX_ACCOUNT\n+        );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 17);\n+    }\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPaginationOrderBy() throws IOException {\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s ORDER BY balance DESC \", TEST_INDEX_ACCOUNT\n+        );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 26);\n+    }\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPaginationWhereAndOrderBy() throws IOException {\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s WHERE balance < 25000 ORDER BY balance ASC \", TEST_INDEX_ACCOUNT\n+        );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 80);\n+\n+    }\n+\n+    //TODO: add test cases for nested and subqueries after checking both works as part of query coverage test\n+\n+    @Test\n+    public void noCursorWhenResultsLessThanFetchSize() throws IOException {\n+        // fetch_size is 100, but actual number of rows returned from ElasticSearch is 97\n+        // a scroll context will be opened but will be closed after first page as all records are fetched\n+        String selectQuery = StringUtils.format(\n+                \"SELECT * FROM %s WHERE balance < 25000 AND age > 36 LIMIT 2000\", TEST_INDEX_ACCOUNT\n+        );\n+        JSONObject response = new JSONObject(executeFetchQuery(selectQuery, 100, JDBC));\n+        assertFalse(response.has(\"cursor\"));\n+    }\n+\n+\n+\n+    @Test\n+    public void defaultBehaviorWhenCursorSettingIsDisabled() throws IOException {\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.enabled\", \"false\"));\n+        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchQuery(query, 100, JDBC));\n+        assertFalse(response.has(\"cursor\"));\n+\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.enabled\", null));\n+        query = StringUtils.format(\"SELECT firstname, email, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        response = new JSONObject(executeFetchQuery(query, 100, JDBC));\n+        assertTrue(response.has(\"cursor\"));\n+\n+        wipeAllClusterSettings();\n+    }\n+\n+\n+    @Test\n+    public void testCursorSettings() throws IOException {\n+        // Assert default cursor settings\n+        JSONObject clusterSettings = getAllClusterSettings();\n+        assertThat(clusterSettings.query(\"/defaults/opendistro.sql.cursor.enabled\"), equalTo(\"true\"));\n+        assertThat(clusterSettings.query(\"/defaults/opendistro.sql.cursor.fetch_size\"), equalTo(\"1000\"));\n+        assertThat(clusterSettings.query(\"/defaults/opendistro.sql.cursor.keep_alive\"), equalTo(\"1m\"));\n+\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.enabled\", \"false\"));\n+        updateClusterSettings(new ClusterSetting(TRANSIENT, \"opendistro.sql.cursor.fetch_size\", \"400\"));\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.keep_alive\", \"200s\"));\n+\n+        clusterSettings = getAllClusterSettings();\n+        assertThat(clusterSettings.query(\"/persistent/opendistro.sql.cursor.enabled\"), equalTo(\"false\"));\n+        assertThat(clusterSettings.query(\"/transient/opendistro.sql.cursor.fetch_size\"), equalTo(\"400\"));\n+        assertThat(clusterSettings.query(\"/persistent/opendistro.sql.cursor.keep_alive\"), equalTo(\"200s\"));\n+\n+        wipeAllClusterSettings();\n+    }\n+\n+\n+    @Test\n+    public void testDefaultFetchSize() throws IOException {\n+        // the default fetch size is 1000\n+        // using non-nested query here as page will have more rows on flattening\n+        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchLessQuery(query, JDBC));\n+        JSONArray datawRows = response.optJSONArray(\"datarows\");\n+        assertThat(datawRows.length(), equalTo(1000));\n+\n+        updateClusterSettings(new ClusterSetting(TRANSIENT, \"opendistro.sql.cursor.fetch_size\", \"786\"));\n+        response = new JSONObject(executeFetchLessQuery(query, JDBC));\n+        datawRows = response.optJSONArray(\"datarows\");\n+        assertThat(datawRows.length(), equalTo(786));\n+\n+        wipeAllClusterSettings();\n+    }\n+\n+    @Test\n+    public void testCursorCloseAPI() throws IOException {\n+        // multiple invocation of closing cursor should return success\n+        // fetch page using old cursor should throw error\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s WHERE balance > 100 and age < 40\", TEST_INDEX_ACCOUNT);\n+        JSONObject result = new JSONObject(executeFetchQuery(selectQuery, 50, JDBC));\n+        String cursor = result.getString(\"cursor\");\n+\n+        // Retrieving next 10 pages out of remaining 19 pages\n+        for(int i =0 ; i < 10 ; i++) {\n+            result = executeCursorQuery(cursor);\n+            cursor = result.optString(\"cursor\");\n+        }\n+        //Closing the cursor\n+        JSONObject closeResp = executeCursorCloseQuery(cursor);\n+        assertThat(closeResp.getBoolean(\"succeeded\"), equalTo(true));\n+\n+        //Closing the cursor multiple times is idempotent\n+        for(int i =0 ; i < 5 ; i++) {\n+            closeResp = executeCursorCloseQuery(cursor);\n+            assertThat(closeResp.getBoolean(\"succeeded\"), equalTo(true));\n+        }\n+\n+        // using the cursor after its cleared, will throw exception\n+        Response response = null;\n+        try {\n+            JSONObject queryResult = executeCursorQuery(cursor);\n+        } catch (ResponseException ex) {\n+            response = ex.getResponse();\n+        }\n+\n+        JSONObject resp = new JSONObject(TestUtils.getResponseBody(response));\n+        assertThat(resp.getInt(\"status\"), equalTo(404));\n+        assertThat(resp.query(\"/error/reason\"), equalTo(\"all shards failed\"));\n+        assertThat(resp.query(\"/error/caused_by/reason\").toString(), containsString(\"No search context found\"));\n+        assertThat(resp.query(\"/error/type\"), equalTo(\"search_phase_execution_exception\"));\n+    }\n+\n+\n+    @Test\n+    public void invalidCursorIdNotDecodable() throws IOException {\n+        // could be either not decode-able\n+        String randomCursor = \"eyJzY2hlbWEiOlt7Im5hbWUiOiJmaXJzdG5hbWUiLCJ0eXBlIjoidGV4dCJ9LHsibmFtZSI6InN0Y\";\n+\n+        Response response = null;\n+        try {\n+            JSONObject resp = executeCursorQuery(randomCursor);\n+        } catch (ResponseException ex) {\n+            response = ex.getResponse();\n+        }\n+\n+        JSONObject resp = new JSONObject(TestUtils.getResponseBody(response));\n+        assertThat(resp.getInt(\"status\"), equalTo(400));\n+        assertThat(resp.query(\"/error/type\"), equalTo(\"illegal_argument_exception\"));\n+    }\n+\n+    @Test\n+    public void respectLimitPassedInSelectClause() throws IOException {\n+        //TODO:\n+//        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s LIMIT 800\", TEST_INDEX_ACCOUNT);\n+//        String result = executeFetchQuery(query, 50, \"jdbc\");\n+        assertThat(1, equalTo(1));\n+    }\n+\n+\n+    @Test\n+    public void noPaginationWithNonJDBCFormat() throws IOException {\n+        // checking for CSV, RAW format\n+        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s LIMIT 2000\", TEST_INDEX_ACCOUNT);\n+        String csvResult = executeFetchQuery(query, 100, \"csv\");\n+        String[] rows = csvResult.split(\"\\n\");\n+        // all the 1000 records (+1 for header) are retrieved instead of fetch_size number of records\n+        assertThat(rows.length, equalTo(1001));\n+\n+        String rawResult = executeFetchQuery(query, 100, \"raw\");\n+        rows = rawResult.split(\"\\n\");\n+        // all the 1000 records (NO headers) are retrieved instead of fetch_size number of records\n+        assertThat(rows.length, equalTo(1000));\n+    }\n+\n+\n+    public void verifyWithAndWithoutPaginationResponse(String sqlQuery, String cursorQuery, int fetch_size) throws IOException {\n+        // we are only checking here for schema and aatarows\n+        JSONObject withoutCursorResponse = new JSONObject(executeFetchQuery(sqlQuery, 0, JDBC));\n+\n+        JSONObject withCursorResponse = new JSONObject(\"{\\\"schema\\\":[],\\\"datarows\\\":[]}\");\n+        JSONArray schema = withCursorResponse.getJSONArray(\"schema\");\n+        JSONArray dataRows = withCursorResponse.getJSONArray(\"datarows\");\n+\n+        JSONObject tempResponse = new JSONObject(executeFetchQuery(cursorQuery, fetch_size, JDBC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 291}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTM1NzA1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378135705", "createdAt": "2020-03-19T22:25:45Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyNTo0NVrOF5CenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyNTo0NVrOF5CenQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1Mzc1Nw==", "bodyText": "delete it", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395353757", "createdAt": "2020-03-19T22:25:45Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -57,6 +68,16 @@ public String getSql() {\n         return this.sql;\n     }\n \n+    public String cursor() {\n+        return this.cursor;\n+//        return (jsonContent == null) ? null : jsonContent.getString(SqlRequestFactory.SQL_CURSOR_FIELD_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTM3MzU3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378137357", "createdAt": "2020-03-19T22:29:22Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyOToyMlrOF5Cj2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoyOToyMlrOF5Cj2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA==", "bodyText": "null or 0?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395355098", "createdAt": "2020-03-19T22:29:22Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTM5Mzkz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378139393", "createdAt": "2020-03-19T22:33:56Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjozMzo1NlrOF5Cqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjozMzo1NlrOF5Cqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NjgxMA==", "bodyText": "In which case the exception will been throw? Does it been tested?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395356810", "createdAt": "2020-03-19T22:33:56Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;\n+        try {\n+            if (jsonContent.has(SQL_FETCH_FIELD_NAME)) {\n+                fetchSize = jsonContent.getInt(SQL_FETCH_FIELD_NAME);\n+                if (fetchSize < 0) {\n+                    throw new IllegalArgumentException(\"Fetch_size must be greater or equal to 0\");\n+                }\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Failed to parse field [\" + SQL_FETCH_FIELD_NAME +\"]\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTQwNTk0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378140594", "createdAt": "2020-03-19T22:36:47Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjozNjo0N1rOF5CuGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjozNjo0N1rOF5CuGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NzcyMw==", "bodyText": "Have you updated the doc in PluginSettingIT?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395357723", "createdAt": "2020-03-19T22:36:47Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/SqlSettings.java", "diffHunk": "@@ -68,6 +73,13 @@ public SqlSettings() {\n         settings.put(METRICS_ROLLING_INTERVAL, Setting.longSetting(METRICS_ROLLING_INTERVAL, 60L, 1L,\n                 NodeScope, Dynamic));\n \n+        // Settings for cursor\n+        settings.put(CURSOR_ENABLED, Setting.boolSetting(CURSOR_ENABLED, true, NodeScope, Dynamic));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTQ2OTk2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378146996", "createdAt": "2020-03-19T22:52:34Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjo1MjozNFrOF5DDwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjo1MjozNFrOF5DDwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzI2NA==", "bodyText": "what happen if it is an explain request", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395363264", "createdAt": "2020-03-19T22:52:34Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorActionRequestRestExecutorFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class CursorActionRequestRestExecutorFactory {\n+    //TODO: add javadocs, see RestExecutor\n+\n+    public static CursorRestExecutor createExecutor(RestRequest request, String cursor, Format format) {\n+        if (isCursorCloseRequest(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTQ3MzQz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378147343", "createdAt": "2020-03-19T22:53:30Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjo1MzozMFrOF5DFEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjo1MzozMFrOF5DFEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzYwMw==", "bodyText": "Doc", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395363603", "createdAt": "2020-03-19T22:53:30Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorRestExecutor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.RestChannel;\n+\n+import java.util.Map;\n+\n+public interface CursorRestExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTUwNTg1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378150585", "createdAt": "2020-03-19T23:01:38Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowMTozOVrOF5DQPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowMTozOVrOF5DQPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NjQ2MQ==", "bodyText": "What is the function of this? If it is not supported, just thrown an exception.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395366461", "createdAt": "2020-03-19T23:01:39Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorAsyncRestExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.query.QueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.join.BackOffRetryStrategy;\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.QUERY_SLOWLOG;\n+\n+public class CursorAsyncRestExecutor implements CursorRestExecutor {\n+    /**\n+     * Custom thread pool name managed by ES\n+     */\n+    public static final String SQL_WORKER_THREAD_POOL_NAME = \"sql-worker\";\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorAsyncRestExecutor.class);\n+\n+    private static final Predicate<QueryAction> ALL_ACTION_IS_BLOCKING = anyAction -> true;\n+\n+    /**\n+     * Delegated rest executor to async\n+     */\n+    private final CursorRestExecutor executor;\n+\n+    /**\n+     * Request type that expect to async to avoid blocking\n+     */\n+    private final Predicate<QueryAction> isBlocking;\n+\n+    CursorAsyncRestExecutor(CursorRestExecutor executor) {\n+        this(executor, ALL_ACTION_IS_BLOCKING);\n+    }\n+\n+    CursorAsyncRestExecutor(CursorRestExecutor executor, Predicate<QueryAction> isBlocking) {\n+        this.executor = executor;\n+        this.isBlocking = isBlocking;\n+    }\n+\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        LOG.info(\"executing something inside CursorAsyncRestExecutor execute \");\n+        async(client, params, channel);\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTUxNzc4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378151778", "createdAt": "2020-03-19T23:04:49Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNDo0OVrOF5DUBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNDo0OVrOF5DUBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NzQyOQ==", "bodyText": "It almost as same as AsyncRestExecutor. Any improvement?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395367429", "createdAt": "2020-03-19T23:04:49Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorAsyncRestExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.query.QueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.join.BackOffRetryStrategy;\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.QUERY_SLOWLOG;\n+\n+public class CursorAsyncRestExecutor implements CursorRestExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTUyMjEx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378152211", "createdAt": "2020-03-19T23:06:03Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNjowM1rOF5DVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNjowM1rOF5DVog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2Nzg0Mg==", "bodyText": "Log.error?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395367842", "createdAt": "2020-03-19T23:06:03Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTUzNDU3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378153457", "createdAt": "2020-03-19T23:09:15Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowOToxNVrOF5DZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowOToxNVrOF5DZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2ODg2MA==", "bodyText": "Add separate class to encapsulate is much better.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395368860", "createdAt": "2020-03-19T23:09:15Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTU1OTk4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378155998", "createdAt": "2020-03-19T23:15:59Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxNTo1OVrOF5DiBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxNTo1OVrOF5DiBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MTAxNA==", "bodyText": "Instead of using JSONObject, I suggest to abstract cursor as JavaBean.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395371014", "createdAt": "2020-03-19T23:15:59Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTU3NDE1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378157415", "createdAt": "2020-03-19T23:19:46Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxOTo0NlrOF5DmmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxOTo0NlrOF5DmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjE4NA==", "bodyText": "Why the response is different?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395372184", "createdAt": "2020-03-19T23:19:46Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);\n+\n+        String type = cursorJson.optString(\"type\", null); // see if it is a good case to use Optionals\n+        CursorType cursorType = null;\n+\n+        if (type != null) {\n+            cursorType = CursorType.valueOf(type);\n+        }\n+\n+        if (cursorType!=null) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    return handleDefaultCursorCloseRequest(client, cursorJson);\n+                case AGGREGATION:\n+                    return handleAggregationCursorCloseRequest(client, cursorJson);\n+                case JOIN:\n+                    return handleJoinCursorCloseRequest(client, cursorJson);\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Invalid cursor\");\n+    }\n+\n+    private String handleDefaultCursorCloseRequest(Client client, JSONObject cursorContext) {\n+        String scrollId = cursorContext.getString(\"scrollId\");\n+        ClearScrollResponse clearScrollResponse = client.prepareClearScroll().addScrollId(scrollId).get();\n+        if (clearScrollResponse.isSucceeded()) {\n+            return SUCCEEDED_TRUE;\n+        } else {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            return SUCCEEDED_FALSE;\n+        }\n+    }\n+\n+    private String handleAggregationCursorCloseRequest(Client client, JSONObject cursorContext) {\n+        return SUCCEEDED_TRUE;\n+    }\n+\n+    private String handleJoinCursorCloseRequest(Client client, JSONObject cursorContext) {\n+        return SUCCEEDED_FALSE;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTU4OTA5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378158909", "createdAt": "2020-03-19T23:24:14Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNDoxNFrOF5Drsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNDoxNFrOF5Drsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzQ5MQ==", "bodyText": "Should we also catch SQLFeatureNotSupportedException in here?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395373491", "createdAt": "2020-03-19T23:24:14Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTY0MzI3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378164327", "createdAt": "2020-03-19T23:39:33Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzozOTozM1rOF5D9Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzozOTozM1rOF5D9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NzkzOQ==", "bodyText": "could be removed.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395377939", "createdAt": "2020-03-19T23:39:33Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -153,6 +198,36 @@ private String outputInTableFormat() {\n         return null;\n     }\n \n+\n+    public String cursorFormat() {\n+        if (status == OK_STATUS && cursorContext!=null) {\n+            switch (formatType) {\n+                case \"jdbc\":\n+                    return cursorOutputInJDBCFormat();\n+                case \"table\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTY5ODk5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378169899", "createdAt": "2020-03-19T23:56:39Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Njo0MFrOF5EPcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Njo0MFrOF5EPcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MjY0Mg==", "bodyText": "return null or cursor?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395382642", "createdAt": "2020-03-19T23:56:40Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ResultSet.java", "diffHunk": "@@ -48,4 +50,8 @@ protected boolean matchesPattern(String string, String pattern) {\n         Matcher matcher = p.matcher(string);\n         return matcher.find();\n     }\n+\n+    public String getCursor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTcyMjgz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378172283", "createdAt": "2020-03-20T00:04:28Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowNDoyOFrOF5EXkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowNDoyOFrOF5EXkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NDcyMg==", "bodyText": "FeatureNotSupportedExecption?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395384722", "createdAt": "2020-03-20T00:04:28Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -203,4 +278,79 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n-}\n+\n+    public void generateCursorId() {\n+        // TODO: only to be used for generating cursor from first page\n+        // for subsequent pages the cursorType and cursor should be set from\n+        switch(cursorType) {\n+            case DEFAULT:\n+                int pages_left = pagesLeft();\n+                if (options.get(\"scrollId\") != null && pages_left > 0) {\n+                    JSONObject cursorJson = new JSONObject();\n+                    cursorJson.put(\"type\", cursorType.name());\n+                    cursorJson.put(\"schema\", getSchemaAsJson());\n+                    cursorJson.put(\"scrollId\", options.get(\"scrollId\"));\n+                    cursorJson.put(\"left\", pagesLeft());\n+                    setIndexNameInCursor(cursorJson);\n+                    setFieldAliasMapInCursor(cursorJson);\n+                    cursor = encodeCursorContext(cursorJson);\n+\n+                } else {\n+                    // explicitly setting this to null to avoid any ambiguity\n+                    cursor = null;\n+                }\n+                options.remove(\"scrollId\");\n+                options.remove(\"fetch_size\");\n+                break;\n+            case AGGREGATION:\n+                throw new ElasticsearchException(\"Cursor not yet supported for GROUP BY queries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTcyODAz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378172803", "createdAt": "2020-03-20T00:06:16Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowNjoxNlrOF5EZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowNjoxNlrOF5EZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NTE1Mw==", "bodyText": "why remove?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395385153", "createdAt": "2020-03-20T00:06:16Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -203,4 +278,79 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n-}\n+\n+    public void generateCursorId() {\n+        // TODO: only to be used for generating cursor from first page\n+        // for subsequent pages the cursorType and cursor should be set from\n+        switch(cursorType) {\n+            case DEFAULT:\n+                int pages_left = pagesLeft();\n+                if (options.get(\"scrollId\") != null && pages_left > 0) {\n+                    JSONObject cursorJson = new JSONObject();\n+                    cursorJson.put(\"type\", cursorType.name());\n+                    cursorJson.put(\"schema\", getSchemaAsJson());\n+                    cursorJson.put(\"scrollId\", options.get(\"scrollId\"));\n+                    cursorJson.put(\"left\", pagesLeft());\n+                    setIndexNameInCursor(cursorJson);\n+                    setFieldAliasMapInCursor(cursorJson);\n+                    cursor = encodeCursorContext(cursorJson);\n+\n+                } else {\n+                    // explicitly setting this to null to avoid any ambiguity\n+                    cursor = null;\n+                }\n+                options.remove(\"scrollId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTczMjIx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378173221", "createdAt": "2020-03-20T00:07:37Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowNzozN1rOF5Eanw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowNzozN1rOF5Eanw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NTUwMw==", "bodyText": "suggest to separate cursor related code from Protocol and add UT for that.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395385503", "createdAt": "2020-03-20T00:07:37Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -203,4 +278,79 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n-}\n+\n+    public void generateCursorId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTczODE1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378173815", "createdAt": "2020-03-20T00:09:45Z", "commit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDowOTo0NlrOF5EcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoxMjo1OFrOF5Efmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjAxMw==", "bodyText": "if fetchSize is initialized to null, will this throw a NullPointerException?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386013", "createdAt": "2020-03-20T00:09:46Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;\n+        try {\n+            if (jsonContent.has(SQL_FETCH_FIELD_NAME)) {\n+                fetchSize = jsonContent.getInt(SQL_FETCH_FIELD_NAME);\n+                if (fetchSize < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjA0OQ==", "bodyText": "+1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386049", "createdAt": "2020-03-20T00:09:52Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA=="}, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjQwMg==", "bodyText": "should these style of comments go outside of the actual test case as a JavaDoc comment?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386402", "createdAt": "2020-03-20T00:11:21Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/CursorIT.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class CursorIT extends SQLIntegTestCase {\n+\n+    private static final String JDBC = \"jdbc\";\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    @Test\n+    public void invalidFetchSize() throws IOException {\n+        // invalid fetch_size --> negative(-2), non-numeric(\"hello\")\n+        // acceptable fetch_size --> positive numbers, even in string form \"532.4\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4Njc3OA==", "bodyText": "if the scrollhint is deprecated should we delete these tests?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386778", "createdAt": "2020-03-20T00:12:58Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/QueryIT.java", "diffHunk": "@@ -1297,6 +1297,7 @@ public void isNotNullTest() throws IOException {\n     }\n \n     @Test\n+    @Ignore(\"Use of scroll hint is deprecated in lieu of cursor support\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edbb36c61572c9207bef39b92a153ce89589f7d5", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/edbb36c61572c9207bef39b92a153ce89589f7d5", "committedDate": "2020-03-20T17:51:19Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d9a6e8507e20729f41f7b5f6c1a459175deb154", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4d9a6e8507e20729f41f7b5f6c1a459175deb154", "committedDate": "2020-03-20T17:57:32Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4Njk4NDg4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-378698488", "createdAt": "2020-03-20T17:55:49Z", "commit": {"oid": "edbb36c61572c9207bef39b92a153ce89589f7d5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo1NTo0OVrOF5d27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowNzoxOFrOF5ePsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMjM0OQ==", "bodyText": "Add type in error message?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395802349", "createdAt": "2020-03-20T17:55:49Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);\n+\n+        String type = cursorJson.optString(\"type\", null); // see if it is a good case to use Optionals\n+        CursorType cursorType = null;\n+\n+        if (type != null) {\n+            cursorType = CursorType.valueOf(type);\n+        }\n+\n+        if (cursorType!=null) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    return handleDefaultCursorCloseRequest(client, cursorJson);\n+                case AGGREGATION:\n+                    return handleAggregationCursorCloseRequest(client, cursorJson);\n+                case JOIN:\n+                    return handleJoinCursorCloseRequest(client, cursorJson);\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Invalid cursor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbb36c61572c9207bef39b92a153ce89589f7d5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwODY5MQ==", "bodyText": "I recall this may throw Enum exception.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395808691", "createdAt": "2020-03-20T18:07:18Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);\n+\n+        String type = cursorJson.optString(\"type\", null); // see if it is a good case to use Optionals\n+        CursorType cursorType = null;\n+\n+        if (type != null) {\n+            cursorType = CursorType.valueOf(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edbb36c61572c9207bef39b92a153ce89589f7d5"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29941ad14ec95f84d733196bf8ed31ebf68c2d8d", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/29941ad14ec95f84d733196bf8ed31ebf68c2d8d", "committedDate": "2020-03-24T21:35:54Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd251fd2c05322d494dfd711936c85c02d6ccd2", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/afd251fd2c05322d494dfd711936c85c02d6ccd2", "committedDate": "2020-03-26T20:17:51Z", "message": "Disable cursor by default, remove comments, fixed tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Njg3NTAx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-385687501", "createdAt": "2020-04-01T15:16:17Z", "commit": {"oid": "afd251fd2c05322d494dfd711936c85c02d6ccd2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToxNjoxOFrOF_Fjgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToyMzoyNFrOF_F4Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTYxOQ==", "bodyText": "Since we're adding new fields to the protocol and version information is missing, could you add a version field too? For example, version missing or 1.0 means \"old\" client code and version = 2.0 means \"new\".", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r401695619", "createdAt": "2020-04-01T15:16:18Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -36,11 +36,22 @@\n \n     String sql;\n     JSONObject jsonContent;\n+    String cursor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd251fd2c05322d494dfd711936c85c02d6ccd2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMDk0Mg==", "bodyText": "I assume cursor can work with PreparedStatement. If so, could you check if our cursor implementation can work with prepared statement request and add test case here?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r401700942", "createdAt": "2020-04-01T15:23:24Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/CursorIT.java", "diffHunk": "@@ -0,0 +1,373 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestUtils.getResponseBody;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class CursorIT extends SQLIntegTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd251fd2c05322d494dfd711936c85c02d6ccd2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "153d91a7c9e76b4a4cb786d0a96bea770808228a", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/153d91a7c9e76b4a4cb786d0a96bea770808228a", "committedDate": "2020-04-03T01:01:00Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16712b396f7d5246ac560f70acc9c8723ea74641", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/16712b396f7d5246ac560f70acc9c8723ea74641", "committedDate": "2020-04-03T02:31:10Z", "message": "Fix cursor for parameterized request, add integration test for same"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c272ec42bffafbfff21f7f1bde1f0216e037357", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7c272ec42bffafbfff21f7f1bde1f0216e037357", "committedDate": "2020-04-06T18:38:23Z", "message": "LIMIT changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a285d1015a2a4a99ed55837dc21f0fd20dd3b74d", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a285d1015a2a4a99ed55837dc21f0fd20dd3b74d", "committedDate": "2020-04-06T21:35:23Z", "message": "Changes to handle different LIMIT cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230f8e7a55f39becd90b4b56ece50772dae64055", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/230f8e7a55f39becd90b4b56ece50772dae64055", "committedDate": "2020-04-06T23:26:12Z", "message": "Add default cursor metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f48ab5f159ba7e692cbd4a8624f28b1d6289a4aa", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f48ab5f159ba7e692cbd4a8624f28b1d6289a4aa", "committedDate": "2020-04-07T16:59:49Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b7c5b67f6199c07fe2209e0ba5ae76b44929da2", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0b7c5b67f6199c07fe2209e0ba5ae76b44929da2", "committedDate": "2020-04-09T02:19:08Z", "message": "Refactoring and integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160754c3f30114dac78a287e10b51dfc46fb7298", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/160754c3f30114dac78a287e10b51dfc46fb7298", "committedDate": "2020-04-09T02:23:00Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bbbd5fdd377d1c3a3ac1bbec5224dca8dc8f191", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4bbbd5fdd377d1c3a3ac1bbec5224dca8dc8f191", "committedDate": "2020-04-09T03:33:32Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641ed2819724c9e506b249213772312f727e0f30", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/641ed2819724c9e506b249213772312f727e0f30", "committedDate": "2020-04-09T04:14:43Z", "message": "Add integration test on explain cursor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc00b1ac9d3f12d47e651a3f846765a497ef50a", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6bc00b1ac9d3f12d47e651a3f846765a497ef50a", "committedDate": "2020-04-09T13:55:49Z", "message": "Update monitoring, settings and endpoint docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/63868ec5991b1849ca1b40eadf1a0b46572d225a", "committedDate": "2020-04-09T14:49:29Z", "message": "Refactor cursor classes to separate package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTA4MTgy", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-390908182", "createdAt": "2020-04-09T15:39:12Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozOToxMlrOGDeUqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozOToxMlrOGDeUqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NTcyMw==", "bodyText": "what is the meaning of \"node scope\"? does it means the setting only apply to specific node?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406295723", "createdAt": "2020-04-09T15:39:12Z", "author": {"login": "penghuo"}, "path": "docs/user/admin/settings.rst", "diffHunk": "@@ -384,3 +384,129 @@ Result set::\n \t  \"timed_out\" : false\n \t}\n \n+opendistro.sql.cursor.enabled\n+=============================\n+\n+Description\n+-----------\n+\n+User can enable/disable pagination for all queries that are supported.\n+\n+1. The default value is false.\n+2. This setting is node scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTQxMzQ1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-390941345", "createdAt": "2020-04-09T16:19:57Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxOTo1N1rOGDf59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxOTo1N1rOGDf59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMTY1NQ==", "bodyText": "Do we have UT to test the logic in here. IMO, the  setting, fetchSize, rowCount has different combination which determine the scroll logic which should be covered in the UT.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406321655", "createdAt": "2020-04-09T16:19:57Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/DefaultQueryAction.java", "diffHunk": "@@ -78,51 +84,61 @@ public void initialize(SearchRequestBuilder request) {\n \n     @Override\n     public SqlElasticSearchRequestBuilder explain() throws SqlParseException {\n-        Hint scrollHint = null;\n-        for (Hint hint : select.getHints()) {\n-            if (hint.getType() == HintType.USE_SCROLL) {\n-                scrollHint = hint;\n-                break;\n-            }\n-        }\n-        if (scrollHint != null && scrollHint.getParams()[0] instanceof String) {\n-            return new SqlElasticSearchRequestBuilder(new SearchScrollRequestBuilder(client,\n-                    SearchScrollAction.INSTANCE, (String) scrollHint.getParams()[0])\n-                    .setScroll(new TimeValue((Integer) scrollHint.getParams()[1])));\n-        }\n+        Objects.requireNonNull(this.sqlRequest, \"SqlRequest is required for ES request build\");\n+        buildRequest();\n+        checkAndSetScroll();\n+        return new SqlElasticSearchRequestBuilder(request);\n+    }\n \n+    private void buildRequest() throws SqlParseException {\n         this.request = new SearchRequestBuilder(client, SearchAction.INSTANCE);\n         setIndicesAndTypes();\n-\n         setFields(select.getFields());\n         setWhere(select.getWhere());\n         setSorts(select.getOrderBys());\n-        setLimit(select.getOffset(), select.getRowCount());\n-\n-        if (scrollHint != null) {\n-            if (!select.isOrderdSelect()) {\n-                request.addSort(FieldSortBuilder.DOC_FIELD_NAME, SortOrder.ASC);\n-            }\n-            request.setSize((Integer) scrollHint.getParams()[0])\n-                    .setScroll(new TimeValue((Integer) scrollHint.getParams()[1]));\n-        } else {\n-            request.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);\n-        }\n         updateRequestWithIndexAndRoutingOptions(select, request);\n         updateRequestWithHighlight(select, request);\n         updateRequestWithCollapse(select, request);\n         updateRequestWithPostFilter(select, request);\n         updateRequestWithInnerHits(select, request);\n+    }\n \n-        return new SqlElasticSearchRequestBuilder(request);\n+    private void checkAndSetScroll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTU3NTgx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-390957581", "createdAt": "2020-04-09T16:41:23Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MToyM1rOGDgttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MToyM1rOGDgttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDkwMQ==", "bodyText": "Two concerns.\n\nThe execute method is almost as same as CursorResultExecutor.execute, only difference is the LOG.error. Is it possible to avoid the duplication.\nIn case we already define the Curser, could we construct CursorCloseExecutor by using cursor and encapsulate the Cursor construct operation in CursorFactory?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406334901", "createdAt": "2020-04-09T16:41:23Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorCloseExecutor.class);\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTY1NzE5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-390965719", "createdAt": "2020-04-09T16:52:41Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1Mjo0MVrOGDhG-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1Mjo0MVrOGDhG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MTM2OQ==", "bodyText": "In case of rowsLeft = 0, we still include the newScrollId in response?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406341369", "createdAt": "2020-04-09T16:52:41Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }\n+\n+        String type = splittedCursor[0];\n+        CursorType cursorType = CursorType.getById(type);\n+\n+        if (cursorType!=CursorType.NULL) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    DefaultCursor defaultCursor = DefaultCursor.from(splittedCursor[1]);\n+                    return handleDefaultCursorRequest(client, defaultCursor);\n+                case AGGREGATION:\n+                case JOIN:\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Not able to parse invalid cursor\");\n+    }\n+\n+    private String handleDefaultCursorRequest(Client client, DefaultCursor cursor) {\n+        String previousScrollId = cursor.getScrollId();\n+        LocalClusterState clusterState = LocalClusterState.state();\n+        TimeValue scrollTimeout = clusterState.getSettingValue(CURSOR_KEEPALIVE);\n+        SearchResponse scrollResponse = client.prepareSearchScroll(previousScrollId).setScroll(scrollTimeout).get();\n+        SearchHits searchHits = scrollResponse.getHits();\n+        SearchHit[] searchHitArray = searchHits.getHits();\n+        String newScrollId = scrollResponse.getScrollId();\n+\n+        int rowsLeft = (int) cursor.getRowsLeft();\n+        int fetch = cursor.getFetchSize();\n+\n+        if (rowsLeft < fetch && rowsLeft < searchHitArray.length) {\n+            /**\n+             * This condition implies we are on the last page, and we might need to truncate the result from SearchHit[]\n+             * Avoid truncating in following two scenarios\n+             * 1. number of rows to be sent equals fetchSize\n+             * 2. size of SearchHit[] is already less that rows that needs to be sent\n+             *\n+             * Else truncate to desired number of rows\n+             */\n+            SearchHit[] newSearchHits = Arrays.copyOf(searchHitArray, rowsLeft);\n+            searchHits = new SearchHits(newSearchHits, searchHits.getTotalHits(), searchHits.getMaxScore());\n+        }\n+\n+        rowsLeft = rowsLeft - fetch;\n+\n+        if (rowsLeft <=0) {\n+            /** Clear the scroll context on last page */\n+            ClearScrollResponse clearScrollResponse = client.prepareClearScroll().addScrollId(newScrollId).get();\n+            if (!clearScrollResponse.isSucceeded()) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+                LOG.info(\"Error closing the cursor context {} \", newScrollId);\n+            }\n+        }\n+\n+        cursor.setRowsLeft(rowsLeft);\n+        cursor.setScrollId(newScrollId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTY3MTY2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-390967166", "createdAt": "2020-04-09T16:54:42Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NDo0MlrOGDhLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NDo0MlrOGDhLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MjU0Mg==", "bodyText": "minor: consider to use Lombok to auto generate get/set method.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406342542", "createdAt": "2020-04-09T16:54:42Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/cursor/DefaultCursor.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Schema;\n+import com.google.common.base.Strings;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+\n+/**\n+ * Minimum metdata that will be serialized for generating cursorId for\n+ * SELECT .... FROM .. ORDER BY .... queries\n+ */\n+public class DefaultCursor implements Cursor {\n+\n+    /** Make sure all keys are unique to prevent overriding\n+     * and as small as possible to make cursor compact\n+     */\n+    private static final String FETCH_SIZE = \"f\";\n+    private static final String ROWS_LEFT = \"l\";\n+    private static final String INDEX_PATTERN = \"i\";\n+    private static final String SCROLL_ID = \"s\";\n+    private static final String SCHEMA_COLUMNS = \"c\";\n+    private static final String FIELD_ALIAS_MAP = \"a\";\n+\n+    /** To get mappings for index to check if type is date needed for\n+     * @see com.amazon.opendistroforelasticsearch.sql.executor.format.DateFieldFormatter */\n+    private String indexPattern;\n+\n+    /** List of Schema.Column for maintaining field order and generating null values of missing fields */\n+    private List<Schema.Column> columns;\n+\n+    /** To delegate to correct cursor handler to get next page*/\n+    private final CursorType type = CursorType.DEFAULT;\n+\n+    /**\n+     * Truncate the @see DataRows to respect LIMIT clause and/or to identify last page to close scroll context.\n+     * docsLeft is decremented by fetch_size for call to get page of result.\n+     */\n+    private long rowsLeft;\n+\n+    /** @see com.amazon.opendistroforelasticsearch.sql.executor.format.SelectResultSet */\n+    private Map<String, String> fieldAliasMap;\n+\n+    /** To get next batch of result */\n+    private String scrollId;\n+\n+    /** To reduce the number of rows left by fetchSize */\n+    private Integer fetchSize;\n+\n+\n+    private Integer limit;\n+\n+    @Override\n+    public CursorType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String generateCursorId() {\n+        if (rowsLeft <=0 || Strings.isNullOrEmpty(scrollId)) {\n+            return null;\n+        }\n+        JSONObject json = new JSONObject();\n+        json.put(FETCH_SIZE, fetchSize);\n+        json.put(ROWS_LEFT, rowsLeft);\n+        json.put(INDEX_PATTERN, indexPattern);\n+        json.put(SCROLL_ID, scrollId);\n+        json.put(SCHEMA_COLUMNS, getSchemaAsJson());\n+        json.put(FIELD_ALIAS_MAP, fieldAliasMap);\n+        return String.format(\"%s:%s\", type.getId(), encodeCursor(json));\n+    }\n+\n+    public static DefaultCursor from(String cursorId) {\n+        /**\n+         * It is assumed that cursorId here is the second part of the original cursor passed\n+         * by the client after removing first part which identifies cursor type\n+         */\n+         JSONObject json = decodeCursor(cursorId);\n+         DefaultCursor cursor = new DefaultCursor();\n+         cursor.setFetchSize(json.getInt(FETCH_SIZE));\n+         cursor.setRowsLeft(json.getLong(ROWS_LEFT));\n+         cursor.setIndexPattern(json.getString(INDEX_PATTERN));\n+         cursor.setScrollId(json.getString(SCROLL_ID));\n+         cursor.setColumns(getColumnsFromSchema(json.getJSONArray(SCHEMA_COLUMNS)));\n+         cursor.setFieldAliasMap(fieldAliasMap(json.getJSONObject(FIELD_ALIAS_MAP)));\n+\n+         return cursor;\n+    }\n+\n+\n+    public String getIndexPattern() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTY5Mjg3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-390969287", "createdAt": "2020-04-09T16:57:21Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579d12cefd8758c43badac119b6a14194ab4b692", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/579d12cefd8758c43badac119b6a14194ab4b692", "committedDate": "2020-04-09T19:22:44Z", "message": "Add Lombok for DefaultCursor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef6d7a840e9a173e49d08fb4434959690967d05", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3ef6d7a840e9a173e49d08fb4434959690967d05", "committedDate": "2020-04-09T20:21:17Z", "message": "Add unit test for DefaultCursor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTg2NTU1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-391186555", "createdAt": "2020-04-09T23:07:27Z", "commit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzowNzoyN1rOGDsR2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo0MToxMFrOGDs24A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNDM3OA==", "bodyText": "I may have a little context here. I recall the name was from ES Setting in which there is a NodeScope and IndexScope.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406524378", "createdAt": "2020-04-09T23:07:27Z", "author": {"login": "dai-chen"}, "path": "docs/user/admin/settings.rst", "diffHunk": "@@ -384,3 +384,129 @@ Result set::\n \t  \"timed_out\" : false\n \t}\n \n+opendistro.sql.cursor.enabled\n+=============================\n+\n+Description\n+-----------\n+\n+User can enable/disable pagination for all queries that are supported.\n+\n+1. The default value is false.\n+2. This setting is node scope.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NTcyMw=="}, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNzI1OQ==", "bodyText": "np: space between open.Cursor", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406527259", "createdAt": "2020-04-09T23:16:50Z", "author": {"login": "dai-chen"}, "path": "docs/user/admin/settings.rst", "diffHunk": "@@ -384,3 +384,129 @@ Result set::\n \t  \"timed_out\" : false\n \t}\n \n+opendistro.sql.cursor.enabled\n+=============================\n+\n+Description\n+-----------\n+\n+User can enable/disable pagination for all queries that are supported.\n+\n+1. The default value is false.\n+2. This setting is node scope.\n+3. This setting can be updated dynamically.\n+\n+\n+Example\n+-------\n+\n+You can update the setting with a new value like this.\n+\n+SQL query::\n+\n+\t>> curl -H 'Content-Type: application/json' -X PUT localhost:9200/_opendistro/_sql/settings -d '{\n+\t  \"transient\" : {\n+\t    \"opendistro.sql.cursor.enabled\" : \"true\"\n+\t  }\n+\t}'\n+\n+Result set::\n+\n+\t{\n+\t  \"acknowledged\" : true,\n+\t  \"persistent\" : { },\n+\t  \"transient\" : {\n+\t    \"opendistro\" : {\n+\t      \"sql\" : {\n+\t        \"cursor\" : {\n+\t          \"enabled\" : \"true\"\n+\t        }\n+\t      }\n+\t    }\n+\t  }\n+\t}\n+\n+opendistro.sql.cursor.fetch_size\n+================================\n+\n+Description\n+-----------\n+\n+User can set the default fetch_size for all queries that are supported by pagination.explicit `fetch_size` passed in request will override this value\n+\n+1. The default value is 1000.\n+2. This setting is node scope.\n+3. This setting can be updated dynamically.\n+\n+\n+Example\n+-------\n+\n+You can update the setting with a new value like this.\n+\n+SQL query::\n+\n+\t>> curl -H 'Content-Type: application/json' -X PUT localhost:9200/_opendistro/_sql/settings -d '{\n+\t  \"transient\" : {\n+\t    \"opendistro.sql.cursor.fetch_size\" : \"50\"\n+\t  }\n+\t}'\n+\n+Result set::\n+\n+\t{\n+\t  \"acknowledged\" : true,\n+\t  \"persistent\" : { },\n+\t  \"transient\" : {\n+\t    \"opendistro\" : {\n+\t      \"sql\" : {\n+\t        \"cursor\" : {\n+\t          \"fetch_size\" : \"50\"\n+\t        }\n+\t      }\n+\t    }\n+\t  }\n+\t}\n+\n+opendistro.sql.cursor.keep_alive\n+================================\n+\n+Description\n+-----------\n+\n+User can set this value to indicate how long the cursor context should be kept open.Cursor contexts are resource heavy, and a lower value should be used if possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyODY4Nw==", "bodyText": "I think this section can be moved to new example 3 in Request Format in protocol doc: https://github.com/opendistro-for-elasticsearch/sql/blob/master/docs/user/interfaces/protocol.rst#request-format.\nAs for endpoint, I think the new cursor close API can be documented here?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406528687", "createdAt": "2020-04-09T23:21:48Z", "author": {"login": "dai-chen"}, "path": "docs/user/interfaces/endpoint.rst", "diffHunk": "@@ -91,3 +91,62 @@ Explain::\n \t  }\n \t}\n \n+Cursor\n+======\n+\n+Description\n+-----------\n+\n+To get paginated response for a query, user needs to provide `fetch_size` parameter as part of normal query. The value of `fetch_size` should be greater than `0`. In absence of `fetch_size`, default value of 1000 is used. A value of `0` will fallback to non-paginated response. This feature is only available over `jdbc` format for now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyODk5NQ==", "bodyText": "Could you add some JavaDoc here?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406528995", "createdAt": "2020-04-09T23:22:52Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/cursor/CursorType.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.cursor;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public enum CursorType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzg1Ng==", "bodyText": "Any chance to reuse AsyncRestExecutor? I don't see any special logic here and you can make AsyncRestExecutor async all cursor request.\n    AsyncRestExecutor(RestExecutor executor) {\n        this(executor, ALL_ACTION_IS_BLOCKING);\n    }", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406533856", "createdAt": "2020-04-09T23:41:10Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorAsyncRestExecutor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.query.join.BackOffRetryStrategy;\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.QUERY_SLOWLOG;\n+\n+public class CursorAsyncRestExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cafa9d93846f132e561efbc924a33ebc5b055269", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cafa9d93846f132e561efbc924a33ebc5b055269", "committedDate": "2020-04-10T19:48:18Z", "message": "Update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06be5e537617525b440ca4c6a0da78aa07f46810", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/06be5e537617525b440ca4c6a0da78aa07f46810", "committedDate": "2020-04-11T01:19:14Z", "message": "Unit tests, bug fix , refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "committedDate": "2020-04-11T01:27:39Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14d2b7c9be30398188705911e319b055a511239f", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/14d2b7c9be30398188705911e319b055a511239f", "committedDate": "2020-04-13T17:30:06Z", "message": "Updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzIyNDg3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-392322487", "createdAt": "2020-04-13T18:04:47Z", "commit": {"oid": "14d2b7c9be30398188705911e319b055a511239f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjg0OTI3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-392284927", "createdAt": "2020-04-13T17:09:25Z", "commit": {"oid": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowOToyNVrOGEthVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzo1OTo0MVrOGEvPfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzMwMw==", "bodyText": "Where is this used?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407593303", "createdAt": "2020-04-13T17:09:25Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/cursor/DefaultCursor.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Schema;\n+import com.google.common.base.Strings;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+\n+/**\n+ * Minimum metdata that will be serialized for generating cursorId for\n+ * SELECT .... FROM .. ORDER BY .... queries\n+ */\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class DefaultCursor implements Cursor {\n+\n+    /** Make sure all keys are unique to prevent overriding\n+     * and as small as possible to make cursor compact\n+     */\n+    private static final String FETCH_SIZE = \"f\";\n+    private static final String ROWS_LEFT = \"l\";\n+    private static final String INDEX_PATTERN = \"i\";\n+    private static final String SCROLL_ID = \"s\";\n+    private static final String SCHEMA_COLUMNS = \"c\";\n+    private static final String FIELD_ALIAS_MAP = \"a\";\n+\n+    /** To get mappings for index to check if type is date needed for\n+     * @see com.amazon.opendistroforelasticsearch.sql.executor.format.DateFieldFormatter */\n+    @NonNull\n+    private String indexPattern;\n+\n+    /** List of Schema.Column for maintaining field order and generating null values of missing fields */\n+    @NonNull\n+    private List<Schema.Column> columns;\n+\n+    /** To delegate to correct cursor handler to get next page*/\n+    private final CursorType type = CursorType.DEFAULT;\n+\n+    /**\n+     * Truncate the @see DataRows to respect LIMIT clause and/or to identify last page to close scroll context.\n+     * docsLeft is decremented by fetch_size for call to get page of result.\n+     */\n+    private long rowsLeft;\n+\n+    /** @see com.amazon.opendistroforelasticsearch.sql.executor.format.SelectResultSet */\n+    @NonNull\n+    private Map<String, String> fieldAliasMap;\n+\n+    /** To get next batch of result */\n+    private String scrollId;\n+\n+    /** To reduce the number of rows left by fetchSize */\n+    @NonNull\n+    private Integer fetchSize;\n+\n+    private Integer limit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMDM3NQ==", "bodyText": "Is it possible that more colons present in Base64 encoded string after first colon? ex. colon in field name selected. If so could we only split the whole string by first colon found?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407600375", "createdAt": "2020-04-13T17:22:17Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMjg1Ng==", "bodyText": "To simplify the logic and handle all invalid cursor (ex. helloworld:..., I think this should be handled in the switch too.\nswitch (cursorType) {\n    case DEFAULT: return ...\n    case AGGREGATION or JOIN: throw unsupported feature exception with cursor type\n    default: throw verification exception with cursor type\n}", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407602856", "createdAt": "2020-04-13T17:26:51Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }\n+\n+        String type = splittedCursor[0];\n+        CursorType cursorType = CursorType.getById(type);\n+\n+        if (cursorType!=CursorType.NULL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxMjg4OA==", "bodyText": "I think you can pass a number, say limit, to your new added Protocol constructor to skip unwanted rows when generating  response. Then you don't need to create and copy to another array which may be costly.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407612888", "createdAt": "2020-04-13T17:44:40Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }\n+\n+        String type = splittedCursor[0];\n+        CursorType cursorType = CursorType.getById(type);\n+\n+        if (cursorType!=CursorType.NULL) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    DefaultCursor defaultCursor = DefaultCursor.from(splittedCursor[1]);\n+                    return handleDefaultCursorRequest(client, defaultCursor);\n+                case AGGREGATION:\n+                case JOIN:\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Not able to parse invalid cursor\");\n+    }\n+\n+    private String handleDefaultCursorRequest(Client client, DefaultCursor cursor) {\n+        String previousScrollId = cursor.getScrollId();\n+        LocalClusterState clusterState = LocalClusterState.state();\n+        TimeValue scrollTimeout = clusterState.getSettingValue(CURSOR_KEEPALIVE);\n+        SearchResponse scrollResponse = client.prepareSearchScroll(previousScrollId).setScroll(scrollTimeout).get();\n+        SearchHits searchHits = scrollResponse.getHits();\n+        SearchHit[] searchHitArray = searchHits.getHits();\n+        String newScrollId = scrollResponse.getScrollId();\n+\n+        int rowsLeft = (int) cursor.getRowsLeft();\n+        int fetch = cursor.getFetchSize();\n+\n+        if (rowsLeft < fetch && rowsLeft < searchHitArray.length) {\n+            /**\n+             * This condition implies we are on the last page, and we might need to truncate the result from SearchHit[]\n+             * Avoid truncating in following two scenarios\n+             * 1. number of rows to be sent equals fetchSize\n+             * 2. size of SearchHit[] is already less that rows that needs to be sent\n+             *\n+             * Else truncate to desired number of rows\n+             */\n+            SearchHit[] newSearchHits = Arrays.copyOf(searchHitArray, rowsLeft);\n+            searchHits = new SearchHits(newSearchHits, searchHits.getTotalHits(), searchHits.getMaxScore());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d2b7c9be30398188705911e319b055a511239f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxNzQ0NA==", "bodyText": "I think NullCursor could be a constant in Cursor interface and no need to create every time.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407617444", "createdAt": "2020-04-13T17:52:57Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/PrettyFormatRestExecutor.java", "diffHunk": "@@ -81,4 +91,29 @@ public String execute(Client client, Map<String, String> params, QueryAction que\n \n         return protocol.format();\n     }\n+\n+    /**\n+     * QueryActionElasticExecutor.executeAnyAction() returns SearchHits inside SearchResponse.\n+     * In order to get scroll ID if any, we need to execute DefaultQueryAction ourselves for SearchResponse.\n+     */\n+    private Protocol buildProtocolForDefaultQuery(Client client, DefaultQueryAction queryAction)\n+            throws SqlParseException {\n+\n+        SearchResponse response = (SearchResponse) queryAction.explain().get();\n+        String scrollId = response.getScrollId();\n+\n+        Protocol protocol;\n+        if (!Strings.isNullOrEmpty(scrollId)) {\n+            DefaultCursor defaultCursor = new DefaultCursor();\n+            defaultCursor.setScrollId(scrollId);\n+            defaultCursor.setLimit(queryAction.getSelect().getRowCount());\n+            defaultCursor.setFetchSize(queryAction.getSqlRequest().fetchSize());\n+            protocol = new Protocol(client, queryAction, response.getHits(), format, defaultCursor);\n+        } else {\n+            NullCursor nullCursor = new NullCursor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d2b7c9be30398188705911e319b055a511239f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMTUwMw==", "bodyText": "Why not just change existing format and outputInJdbcFormat? I think ideally we should have single interface method in Protocol.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407621503", "createdAt": "2020-04-13T17:59:41Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -153,6 +182,30 @@ private String outputInTableFormat() {\n         return null;\n     }\n \n+    public String cursorFormat() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d2b7c9be30398188705911e319b055a511239f"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzM4NDMw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-392338430", "createdAt": "2020-04-13T18:29:00Z", "commit": {"oid": "14d2b7c9be30398188705911e319b055a511239f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoyOTowMFrOGEwN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoyOTowMFrOGEwN7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNzQ4NQ==", "bodyText": "I saw this cursor populate logic and scroll close logic in both here and CursorResultExecutor. Is it due to different code path?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407637485", "createdAt": "2020-04-13T18:29:00Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -525,20 +579,66 @@ private void extractData() {\n \n             this.rows = populateRows(searchHits);\n             this.size = rows.size();\n-            this.totalHits = Math.max(size, // size may be greater than totalHits after nested rows be flatten\n-                    Optional.ofNullable(searchHits.getTotalHits()).map(th -> th.value)\n-                            .orElse(0L));\n-\n+            this.internalTotalHits = Optional.ofNullable(searchHits.getTotalHits()).map(th -> th.value).orElse(0L);\n+            // size may be greater than totalHits after nested rows be flatten\n+            this.totalHits = Math.max(size, internalTotalHits);\n         } else if (queryResult instanceof Aggregations) {\n             Aggregations aggregations = (Aggregations) queryResult;\n \n             this.rows = populateRows(aggregations);\n             this.size = rows.size();\n+            this.internalTotalHits = size;\n             // Total hits is not available from Aggregations so 'size' is used\n             this.totalHits = size;\n         }\n     }\n \n+    private void populateCursor() {\n+        switch(cursor.getType()) {\n+            case DEFAULT:\n+                populateDefaultCursor((DefaultCursor) cursor);\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private void populateDefaultCursor(DefaultCursor cursor) {\n+        /**\n+         * Assumption: scrollId, fetchSize, limit already being set in\n+         * @see PrettyFormatRestExecutor.buildProtocolForDefaultQuery()\n+         */\n+\n+        Integer limit = cursor.getLimit();\n+        long rowsLeft = rowsLeft(cursor.getFetchSize(), cursor.getLimit());\n+        if (rowsLeft <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d2b7c9be30398188705911e319b055a511239f"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32bbfe52e9b1333d621aa15bb2ac96a31cb54c9d", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/32bbfe52e9b1333d621aa15bb2ac96a31cb54c9d", "committedDate": "2020-04-13T20:04:14Z", "message": "Merge branch 'master' into cursor-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f344b73ad7caf7445978369a00095a95b5367c", "author": {"user": {"login": "abbashus", "name": "Abbas Hussain"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e5f344b73ad7caf7445978369a00095a95b5367c", "committedDate": "2020-04-13T20:04:45Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTcwNzk0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-392570794", "createdAt": "2020-04-14T02:57:21Z", "commit": {"oid": "e5f344b73ad7caf7445978369a00095a95b5367c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDQ4ODk3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#pullrequestreview-393048897", "createdAt": "2020-04-14T15:34:34Z", "commit": {"oid": "e5f344b73ad7caf7445978369a00095a95b5367c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 764, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}