{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NTg0Mjcw", "number": 905, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDo1OFrOFDmBuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMjo1NzoyNVrOFDydmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzEzMDgwOnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDo1OFrOIDUt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNDo1OFrOIDUt-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjA4OQ==", "bodyText": "As I understand, SQLService will execute/explain the request by ElasticsearchExecutionEngine which delegates to ES worker thread. In this case, this try-catch won't capture the exception (if I recall right ES's listener will intercepts and writes response so control flow won't come back here).\nIn my opinion, we should create a metric collector that implements ResponseListener. The metric collector and response formatter forms a chain which is passed to execution engine and handles response/error in Chain of Responsibility style.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540356089", "createdAt": "2020-12-10T17:24:58Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -109,10 +124,15 @@ public RestChannelConsumer prepareRequest(SQLQueryRequest request, NodeClient no\n       return NOT_SUPPORTED_YET;\n     }\n \n-    if (request.isExplainRequest()) {\n-      return channel -> sqlService.explain(plan, createExplainResponseListener(channel));\n+    try {\n+      if (request.isExplainRequest()) {\n+        return channel -> sqlService.explain(plan, createExplainResponseListener(channel));\n+      }\n+      return channel -> sqlService.execute(plan, createQueryResponseListener(channel));\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzEzOTU0OnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNjo1NFrOIDUzQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNDowMVrOIDVGnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NzQ0Mw==", "bodyText": "Because this is in new engine, exceptions like SqlParseException, ParserException and some others won't happen. Probably only SyntaxCheckException and QueryEngineException are required same as here: \n  \n    \n      sql/protocol/src/main/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/JdbcResponseFormatter.java\n    \n    \n         Line 104\n      in\n      85202b6\n    \n    \n    \n    \n\n        \n          \n           return (t instanceof SyntaxCheckException", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540357443", "createdAt": "2020-12-10T17:26:54Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +199,33 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private void reportError(RestChannel channel, Exception e, RestStatus status) {\n+    sendResponse(\n+        channel, status, ErrorMessageFactory.createErrorMessage(e, status.getStatus()).toString());\n+  }\n+\n+  private static void logAndPublishMetrics(Exception e) {\n+    if (isClientError(e)) {\n+      LOG.error(LogUtils.getRequestId() + \" Client side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+    } else {\n+      LOG.error(LogUtils.getRequestId() + \" Server side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+    }\n+  }\n+\n+  private static boolean isClientError(Exception e) {\n+    return e instanceof NullPointerException // NPE is hard to differentiate but more likely caused by bad query\n+        || e instanceof SqlParseException\n+        || e instanceof ParserException\n+        || e instanceof SQLFeatureNotSupportedException\n+        || e instanceof SQLFeatureDisabledException\n+        || e instanceof IllegalArgumentException\n+        || e instanceof IndexNotFoundException\n+        || e instanceof VerificationException\n+        || e instanceof SqlAnalysisException\n+        || e instanceof SyntaxCheckException\n+        || e instanceof SemanticCheckException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MjM5Ng==", "bodyText": "Another thought: since earlier we've already passed \"compiling process\" in new engine, all exception occurs in execution engine should be treated as server error?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540362396", "createdAt": "2020-12-10T17:34:01Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +199,33 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private void reportError(RestChannel channel, Exception e, RestStatus status) {\n+    sendResponse(\n+        channel, status, ErrorMessageFactory.createErrorMessage(e, status.getStatus()).toString());\n+  }\n+\n+  private static void logAndPublishMetrics(Exception e) {\n+    if (isClientError(e)) {\n+      LOG.error(LogUtils.getRequestId() + \" Client side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+    } else {\n+      LOG.error(LogUtils.getRequestId() + \" Server side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+    }\n+  }\n+\n+  private static boolean isClientError(Exception e) {\n+    return e instanceof NullPointerException // NPE is hard to differentiate but more likely caused by bad query\n+        || e instanceof SqlParseException\n+        || e instanceof ParserException\n+        || e instanceof SQLFeatureNotSupportedException\n+        || e instanceof SQLFeatureDisabledException\n+        || e instanceof IllegalArgumentException\n+        || e instanceof IndexNotFoundException\n+        || e instanceof VerificationException\n+        || e instanceof SqlAnalysisException\n+        || e instanceof SyntaxCheckException\n+        || e instanceof SemanticCheckException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NzQ0Mw=="}, "originalCommit": {"oid": "502e1508f2585e3b5d75fc5a301d8c54687d2ffc"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTA4NDYyOnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMjoyNDoxN1rOIDmLsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzo0ODowMVrOIEV9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY0MjIyNQ==", "bodyText": "I'm thinking should we publish server error metrics always in this method? Because at this point we've passed parsing, analyzing and planning, I assume any exception occurred should be treated as server error.\nBut this seems not true from the SELECT DATE('0') example in PR description. The semantic error can also be thrown here?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540642225", "createdAt": "2020-12-11T02:24:17Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +197,17 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private static void logAndPublishMetrics(Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyNTAwMA==", "bodyText": "+1, after analyer/parser, all the execption should be treat as SYS error. The example like is DATE('0') may throw through runtim execption, but it is hard to know it is because of CUS error or data issue. I think it should be fine to treat it as SYS error.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r541425000", "createdAt": "2020-12-11T23:48:01Z", "author": {"login": "penghuo"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +197,17 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private static void logAndPublishMetrics(Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY0MjIyNQ=="}, "originalCommit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTE2ODI0OnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMjo1NzoyNVrOIDm4Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo0Njo1MFrOIEJDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MzU4Ng==", "bodyText": "(Assuming this check is necessary as discussed above) I think this method should be isClientError() { return e is SyntaxCheckException or SemanticCheckException}? Otherwise like the SELECT DATE('0') example in PR description, semantic error is counted as server error.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r540653586", "createdAt": "2020-12-11T02:57:25Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +197,17 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private static void logAndPublishMetrics(Exception e) {\n+    if (isServerError(e)) {\n+      LOG.error(LogUtils.getRequestId() + \" Server side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+    } else {\n+      LOG.error(LogUtils.getRequestId() + \" Client side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+    }\n+  }\n+\n+  private static boolean isServerError(Exception e) {\n+    return e instanceof QueryEngineException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxMzYzNw==", "bodyText": "I think it's ambiguous in the definition query engine exception now, since it consists of semantic check and expression evaluation, but we are treating semantic check exception as client error", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/905#discussion_r541213637", "createdAt": "2020-12-11T19:46:50Z", "author": {"login": "chloe-zh"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSQLQueryAction.java", "diffHunk": "@@ -179,4 +197,17 @@ private void sendResponse(RestChannel channel, RestStatus status, String content\n         status, \"application/json; charset=UTF-8\", content));\n   }\n \n+  private static void logAndPublishMetrics(Exception e) {\n+    if (isServerError(e)) {\n+      LOG.error(LogUtils.getRequestId() + \" Server side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+    } else {\n+      LOG.error(LogUtils.getRequestId() + \" Client side error during query execution\", e);\n+      Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+    }\n+  }\n+\n+  private static boolean isServerError(Exception e) {\n+    return e instanceof QueryEngineException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MzU4Ng=="}, "originalCommit": {"oid": "ec592eb7c923084e49a30e76c7dffcbdfa51ce39"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1950, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}