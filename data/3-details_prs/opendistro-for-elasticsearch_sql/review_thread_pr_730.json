{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNDM4MDgy", "number": 730, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoyODoyN1rOEiU5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoyODoyN1rOEiU5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDI5MzE1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoyODoyN1rOHQJFXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo0ODo1OVrOHQmT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODA5NA==", "bodyText": "np: same as AstBuilder.getTextInQuery() and can move to some parsing util class?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/730#discussion_r486688094", "createdAt": "2020-09-10T23:28:27Z", "author": {"login": "dai-chen"}, "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "diffHunk": "@@ -117,13 +125,22 @@ public Void visitGroupByElement(GroupByElementContext ctx) {\n \n     @Override\n     public Void visitAggregateFunctionCall(AggregateFunctionCallContext ctx) {\n-      aggregators.add((AggregateFunction) visitAstExpression(ctx));\n+      aggregators.add(AstDSL.alias(getTextInQuery(ctx), visitAstExpression(ctx)));\n       return super.visitAggregateFunctionCall(ctx);\n     }\n \n     private UnresolvedExpression visitAstExpression(ParseTree tree) {\n       return expressionBuilder.visit(tree);\n     }\n+\n+    /**\n+     * Get original text in query.\n+     */\n+    private String getTextInQuery(ParserRuleContext ctx) {\n+      Token start = ctx.getStart();\n+      Token stop = ctx.getStop();\n+      return queryString.substring(start.getStartIndex(), stop.getStopIndex() + 1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e89512a3a031e5201c70e20ff7ab2b73559f99d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2Njk3NQ==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/730#discussion_r487166975", "createdAt": "2020-09-11T16:48:59Z", "author": {"login": "penghuo"}, "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "diffHunk": "@@ -117,13 +125,22 @@ public Void visitGroupByElement(GroupByElementContext ctx) {\n \n     @Override\n     public Void visitAggregateFunctionCall(AggregateFunctionCallContext ctx) {\n-      aggregators.add((AggregateFunction) visitAstExpression(ctx));\n+      aggregators.add(AstDSL.alias(getTextInQuery(ctx), visitAstExpression(ctx)));\n       return super.visitAggregateFunctionCall(ctx);\n     }\n \n     private UnresolvedExpression visitAstExpression(ParseTree tree) {\n       return expressionBuilder.visit(tree);\n     }\n+\n+    /**\n+     * Get original text in query.\n+     */\n+    private String getTextInQuery(ParserRuleContext ctx) {\n+      Token start = ctx.getStart();\n+      Token stop = ctx.getStop();\n+      return queryString.substring(start.getStartIndex(), stop.getStopIndex() + 1);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODA5NA=="}, "originalCommit": {"oid": "7e89512a3a031e5201c70e20ff7ab2b73559f99d"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2015, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}