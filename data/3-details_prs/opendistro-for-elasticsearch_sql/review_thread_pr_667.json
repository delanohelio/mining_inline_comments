{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNzE3MDA2", "number": 667, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDozNTozN1rOEWZYKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDozNTozN1rOEWZYKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTE5OTE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDozNTozOFrOG9sC7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjo1Mzo1N1rOG-XKrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzk2Nw==", "bodyText": "Should we pass expr.getAlias() as second argument?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/667#discussion_r467337967", "createdAt": "2020-08-08T00:35:38Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "diffHunk": "@@ -60,11 +62,15 @@ public ExprValue next() {\n     ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n     for (NamedExpression expr : projectList) {\n       ExprValue exprValue = expr.valueOf(inputValue.bindingTuples());\n-      // missing value is ignored.\n-      if (!exprValue.isMissing()) {\n-        mapBuilder.put(expr.getName(), exprValue);\n-      }\n+      mapBuilder.put(expr.getName(), exprValue);\n     }\n     return ExprTupleValue.fromExprValueMap(mapBuilder.build());\n   }\n+\n+  @Override\n+  public ExecutionEngine.Schema schema() {\n+    return new ExecutionEngine.Schema(getProjectList().stream()\n+        .map(expr -> new ExecutionEngine.Schema.Column(expr.getName(),\n+            expr.getName(), expr.type())).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5492053b9ea3caa2e2c16003a6d41fcf8da5065"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0NDQ2MQ==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/667#discussion_r468044461", "createdAt": "2020-08-10T16:53:57Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "diffHunk": "@@ -60,11 +62,15 @@ public ExprValue next() {\n     ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n     for (NamedExpression expr : projectList) {\n       ExprValue exprValue = expr.valueOf(inputValue.bindingTuples());\n-      // missing value is ignored.\n-      if (!exprValue.isMissing()) {\n-        mapBuilder.put(expr.getName(), exprValue);\n-      }\n+      mapBuilder.put(expr.getName(), exprValue);\n     }\n     return ExprTupleValue.fromExprValueMap(mapBuilder.build());\n   }\n+\n+  @Override\n+  public ExecutionEngine.Schema schema() {\n+    return new ExecutionEngine.Schema(getProjectList().stream()\n+        .map(expr -> new ExecutionEngine.Schema.Column(expr.getName(),\n+            expr.getName(), expr.type())).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzk2Nw=="}, "originalCommit": {"oid": "f5492053b9ea3caa2e2c16003a6d41fcf8da5065"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1984, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}