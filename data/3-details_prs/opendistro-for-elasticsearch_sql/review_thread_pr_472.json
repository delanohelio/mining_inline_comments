{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjI2Nzc3", "number": 472, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyNzo0NFrOD-VuNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo1MDo1MVrOD-WYeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njk0MTk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoyNzo0NFrOGYYe6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyOToxNVrOGYcqvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDEzNw==", "bodyText": "The indent is changed to 2 spaces in this file and some other files?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428220137", "createdAt": "2020-05-20T18:27:44Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java", "diffHunk": "@@ -18,30 +18,39 @@\n import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Arrays;\n import lombok.experimental.UtilityClass;\n \n import java.util.List;\n import java.util.Map;\n \n-/**\n- * Logical Plan DSL.\n- */\n+/** Logical Plan DSL. */\n @UtilityClass\n public class LogicalPlanDSL {\n-    public static LogicalPlan aggregation(LogicalPlan input, List<Aggregator> aggregatorList,\n-                                          List<Expression> groupByList) {\n-        return new LogicalAggregation(input, aggregatorList, groupByList);\n-    }\n-\n-    public static LogicalPlan filter(LogicalPlan input, Expression expression) {\n-        return new LogicalFilter(input, expression);\n-    }\n-\n-    public static LogicalPlan relation(String tableName) {\n-        return new LogicalRelation(tableName);\n-    }\n-\n-    public static LogicalPlan rename(LogicalPlan input, Map<ReferenceExpression, ReferenceExpression> renameMap) {\n-        return new LogicalRename(input, renameMap);\n-    }\n+  public static LogicalPlan aggregation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc02bb923318eb04f6d8661050b52ab4455bfd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MDcyNQ==", "bodyText": "yes, enable https://plugins.jetbrains.com/plugin/8527-google-java-format.\nlet's talk whether we should enable for the project.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428280725", "createdAt": "2020-05-20T20:13:23Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java", "diffHunk": "@@ -18,30 +18,39 @@\n import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Arrays;\n import lombok.experimental.UtilityClass;\n \n import java.util.List;\n import java.util.Map;\n \n-/**\n- * Logical Plan DSL.\n- */\n+/** Logical Plan DSL. */\n @UtilityClass\n public class LogicalPlanDSL {\n-    public static LogicalPlan aggregation(LogicalPlan input, List<Aggregator> aggregatorList,\n-                                          List<Expression> groupByList) {\n-        return new LogicalAggregation(input, aggregatorList, groupByList);\n-    }\n-\n-    public static LogicalPlan filter(LogicalPlan input, Expression expression) {\n-        return new LogicalFilter(input, expression);\n-    }\n-\n-    public static LogicalPlan relation(String tableName) {\n-        return new LogicalRelation(tableName);\n-    }\n-\n-    public static LogicalPlan rename(LogicalPlan input, Map<ReferenceExpression, ReferenceExpression> renameMap) {\n-        return new LogicalRename(input, renameMap);\n-    }\n+  public static LogicalPlan aggregation(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDEzNw=="}, "originalCommit": {"oid": "dc02bb923318eb04f6d8661050b52ab4455bfd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4ODcwMw==", "bodyText": "Sure.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428288703", "createdAt": "2020-05-20T20:29:15Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalPlanDSL.java", "diffHunk": "@@ -18,30 +18,39 @@\n import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Arrays;\n import lombok.experimental.UtilityClass;\n \n import java.util.List;\n import java.util.Map;\n \n-/**\n- * Logical Plan DSL.\n- */\n+/** Logical Plan DSL. */\n @UtilityClass\n public class LogicalPlanDSL {\n-    public static LogicalPlan aggregation(LogicalPlan input, List<Aggregator> aggregatorList,\n-                                          List<Expression> groupByList) {\n-        return new LogicalAggregation(input, aggregatorList, groupByList);\n-    }\n-\n-    public static LogicalPlan filter(LogicalPlan input, Expression expression) {\n-        return new LogicalFilter(input, expression);\n-    }\n-\n-    public static LogicalPlan relation(String tableName) {\n-        return new LogicalRelation(tableName);\n-    }\n-\n-    public static LogicalPlan rename(LogicalPlan input, Map<ReferenceExpression, ReferenceExpression> renameMap) {\n-        return new LogicalRename(input, renameMap);\n-    }\n+  public static LogicalPlan aggregation(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDEzNw=="}, "originalCommit": {"oid": "dc02bb923318eb04f6d8661050b52ab4455bfd5e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzA1MDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo1MDo1MVrOGYZfKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoxODo1MVrOGYcWsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNjU4NA==", "bodyText": "Use exprValue directly?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428236584", "createdAt": "2020-05-20T18:50:51Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/** Project the fields specified in {@link ProjectOperator#projectList} from input. */\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class ProjectOperator extends PhysicalPlan {\n+  private final PhysicalPlan input;\n+  private final List<ReferenceExpression> projectList;\n+\n+  @Override\n+  public <R, C> R accept(PhysicalPlanNodeVisitor<R, C> visitor, C context) {\n+    return visitor.visitProject(this, context);\n+  }\n+\n+  @Override\n+  public List<PhysicalPlan> getChild() {\n+    return Collections.singletonList(input);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return input.hasNext();\n+  }\n+\n+  @Override\n+  public ExprValue next() {\n+    ExprValue inputValue = input.next();\n+    ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n+    for (ReferenceExpression ref : projectList) {\n+      ExprValue exprValue = ref.valueOf(inputValue.bindingTuples());\n+      // missing value is ignored.\n+      if (!exprValue.isMissing()) {\n+        mapBuilder.put(ref.toString(), ref.valueOf(inputValue.bindingTuples()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc02bb923318eb04f6d8661050b52ab4455bfd5e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MzU2OQ==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/472#discussion_r428283569", "createdAt": "2020-05-20T20:18:51Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/physical/ProjectOperator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.physical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+import java.util.Collections;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/** Project the fields specified in {@link ProjectOperator#projectList} from input. */\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class ProjectOperator extends PhysicalPlan {\n+  private final PhysicalPlan input;\n+  private final List<ReferenceExpression> projectList;\n+\n+  @Override\n+  public <R, C> R accept(PhysicalPlanNodeVisitor<R, C> visitor, C context) {\n+    return visitor.visitProject(this, context);\n+  }\n+\n+  @Override\n+  public List<PhysicalPlan> getChild() {\n+    return Collections.singletonList(input);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    return input.hasNext();\n+  }\n+\n+  @Override\n+  public ExprValue next() {\n+    ExprValue inputValue = input.next();\n+    ImmutableMap.Builder<String, ExprValue> mapBuilder = new Builder<>();\n+    for (ReferenceExpression ref : projectList) {\n+      ExprValue exprValue = ref.valueOf(inputValue.bindingTuples());\n+      // missing value is ignored.\n+      if (!exprValue.isMissing()) {\n+        mapBuilder.put(ref.toString(), ref.valueOf(inputValue.bindingTuples()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNjU4NA=="}, "originalCommit": {"oid": "dc02bb923318eb04f6d8661050b52ab4455bfd5e"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2078, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}