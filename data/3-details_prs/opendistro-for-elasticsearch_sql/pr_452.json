{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDI1MDgy", "number": 452, "title": "Bug Fix, support using aggregation function in order by clause", "bodyText": "Issue #, if available: #277\nDescription of changes:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-29T23:55:52Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452", "merged": true, "mergeCommit": {"oid": "30b76ce18c60186c7a7a86a73a689ff9f1abad0e"}, "closed": true, "closedAt": "2020-05-04T16:13:25Z", "author": {"login": "penghuo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcchLCUgH2gAyNDExMDI1MDgyOjcyYmI3YTI3ZGE5ZjczMzM5OTI4NDBhZjI2NjMxNmE3NTY3OTUxNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc0kRxgFqTQwMzkxMjIzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72bb7a27da9f7333992840af266316a756795169", "author": {"user": {"login": "penghuo", "name": "Peng Huo"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/72bb7a27da9f7333992840af266316a756795169", "committedDate": "2020-04-29T23:34:53Z", "message": "Bug Fix, support using aggregation function in order by clause"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjM0OTY4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#pullrequestreview-403234968", "createdAt": "2020-04-30T06:29:02Z", "commit": {"oid": "72bb7a27da9f7333992840af266316a756795169"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjY3Mzc5", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#pullrequestreview-403667379", "createdAt": "2020-04-30T16:07:56Z", "commit": {"oid": "72bb7a27da9f7333992840af266316a756795169"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowNzo1N1rOGOwPQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowNzo1N1rOGOwPQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMzU4Nw==", "bodyText": "So this one is testing ORDER BY count DESC, should we assert the rows in reversed order?\nProbably we need to replace the Hamcrest matcher containsInAnyOrder:\n    @SuppressWarnings(\"unchecked\")\n    public static void verifyDataRows(JSONObject response, Matcher<JSONArray>... matchers) {\n        verify(response.getJSONArray(\"datarows\"), matchers);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> void verify(JSONArray array, Matcher<T>... matchers) {\n        List<T> objects = new ArrayList<>();\n        array.iterator().forEachRemaining(o -> objects.add((T) o));\n        assertEquals(matchers.length, objects.size());\n        assertThat(objects, containsInAnyOrder(matchers));\n    }", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#discussion_r418123587", "createdAt": "2020-04-30T16:07:57Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java", "diffHunk": "@@ -426,59 +426,61 @@ public void termsWithOrder() throws Exception {\n     }\n \n     @Test\n-    public void orderByAscTest() throws IOException {\n-\n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age ORDER BY COUNT(*)\",\n-                TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+    public void orderByAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*)\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, greaterThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n     }\n \n     @Test\n     public void orderByDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n \n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age\" +\n-                \" ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, lessThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count DESC\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72bb7a27da9f7333992840af266316a756795169"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1813fef94b81091e40d3c4a835d87979113153", "author": {"user": {"login": "penghuo", "name": "Peng Huo"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cf1813fef94b81091e40d3c4a835d87979113153", "committedDate": "2020-04-30T22:08:28Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTEyMjM0", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#pullrequestreview-403912234", "createdAt": "2020-04-30T22:10:39Z", "commit": {"oid": "cf1813fef94b81091e40d3c4a835d87979113153"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 665, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}