{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjM0NjQw", "number": 687, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMjoyMVrOEZjtiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzoxNDo0MVrOEZk-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjM0OTUzOnYy", "diffSide": "RIGHT", "path": "docs/user/general/datatypes.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjoyMjoyMVrOHCcNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTozMToxN1rOHCi7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMTM5MQ==", "bodyText": "Typo, Bides -> ?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472321391", "createdAt": "2020-08-18T16:22:21Z", "author": {"login": "penghuo"}, "path": "docs/user/general/datatypes.rst", "diffHunk": "@@ -0,0 +1,206 @@\n+\n+==========\n+Data Types\n+==========\n+\n+.. rubric:: Table of contents\n+\n+.. contents::\n+   :local:\n+   :depth: 2\n+\n+\n+Overview\n+========\n+\n+ODFE SQL Data Types\n+-------------------\n+\n+The ODFE SQL Engine support the following data types.\n+\n++---------------+\n+| ODFE SQL Type |\n++===============+\n+| boolean       |\n++---------------+\n+| integer       |\n++---------------+\n+| long          |\n++---------------+\n+| float         |\n++---------------+\n+| double        |\n++---------------+\n+| string        |\n++---------------+\n+| text          |\n++---------------+\n+| timestamp     |\n++---------------+\n+| datetime      |\n++---------------+\n+| date          |\n++---------------+\n+| time          |\n++---------------+\n+| interval      |\n++---------------+\n+| struct        |\n++---------------+\n+| array         |\n++---------------+\n+\n+Data Types Mapping\n+------------------\n+\n+The table below list the mapping between Elasticsearch Data Type, ODFE SQL Data Type and SQL Type.\n+\n++--------------------+---------------+-----------+\n+| Elasticsearch Type | ODFE SQL Type | SQL Type  |\n++====================+===============+===========+\n+| boolean            | boolean       | BOOLEAN   |\n++--------------------+---------------+-----------+\n+| integer            | integer       | INTEGER   |\n++--------------------+---------------+-----------+\n+| long               | long          | LONG      |\n++--------------------+---------------+-----------+\n+| float              | float         | FLOAT     |\n++--------------------+---------------+-----------+\n+| double             | double        | DOUBLE    |\n++--------------------+---------------+-----------+\n+| keyword            | string        | VARCHAR   |\n++--------------------+---------------+-----------+\n+| text               | text          | VARCHAR   |\n++--------------------+---------------+-----------+\n+| date               | timestamp     | TIMESTAMP |\n++--------------------+---------------+-----------+\n+| object             | struct        | STRUCT    |\n++--------------------+---------------+-----------+\n+| nested             | array         | TBD       |\n++--------------------+---------------+-----------+\n+\n+Notes: Not all the ODFE SQL Type has correspond Elasticsearch Type. e.g. data and time. To use function which required such data type, user should explict convert the data type.\n+\n+\n+\n+Numeric Data Types\n+==================\n+\n+TODO\n+\n+\n+Date and Time Data Types\n+========================\n+\n+The date and time data types are the types that represent temporal values and SQL plugin supports types including DATE, TIME, DATETIME, TIMESTAMP and INTERVAL. By default, the Elasticsearch DSL uses date type as the only date and time related type, which has contained all information about an absolute time point. To integrate with SQL language, each of the types other than timestamp is holding part of temporal or timezone information, and the usage to explicitly clarify the date and time types is reflected in the datetime functions (see `Functions <functions.rst>`_ for details), where some functions might have restrictions in the input argument type.\n+\n+\n+Date\n+----\n+\n+Date represents the calendar date regardless of the time zone. A given date value represents a 24-hour period, or say a day, but this period varies in different timezones and might have flexible hours during Daylight Savings Time programs. Besides, the date type does not contain time information as well. The supported range is '1000-01-01' to '9999-12-31'.\n+\n++------+--------------+------------------------------+\n+| Type | Syntax       | Range                        |\n++======+==============+==============================+\n+| Date | 'yyyy-MM-dd' | '0001-01-01' to '9999-12-31' |\n++------+--------------+------------------------------+\n+\n+\n+Time\n+----\n+\n+Time represents the time on the clock or watch with no regard for which timezone it might be related with. Time type data does not have date information.\n+\n++------+-----------------------+----------------------------------------+\n+| Type | Syntax                | Range                                  |\n++======+=======================+========================================+\n+| Time | 'hh:mm:ss[.fraction]' | '00:00:00.000000' to '23:59:59.999999' |\n++------+-----------------------+----------------------------------------+\n+\n+\n+Datetime\n+--------\n+\n+Datetime type is the combination of date and time. The conversion rule of date or time to datetime is described in `Conversion between date and time types`_. Datetime type does not contain timezone information. For an absolute time point that contains both date time and timezone information, see `Timestamp`_.\n+\n++----------+----------------------------------+--------------------------------------------------------------+\n+| Type     | Syntax                           | Range                                                        |\n++==========+==================================+==============================================================+\n+| Datetime | 'yyyy-MM-dd hh:mm:ss[.fraction]' | '0001-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999' |\n++----------+----------------------------------+--------------------------------------------------------------+\n+\n+\n+\n+Timestamp\n+---------\n+\n+A timestamp instance is an absolute instant independent of timezone or convention. For example, for a given point of time, if we set the timestamp of this time point into another timezone, the value should also be different accordingly. Bides, the storage of timestamp type is also different from the other types. The timestamp is converted from the current timezone to UTC for storage, and is converted back to the set timezone from UTC when retrieving.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMTQ2NA==", "bodyText": "Corrected it, thanks", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472431464", "createdAt": "2020-08-18T19:31:17Z", "author": {"login": "chloe-zh"}, "path": "docs/user/general/datatypes.rst", "diffHunk": "@@ -0,0 +1,206 @@\n+\n+==========\n+Data Types\n+==========\n+\n+.. rubric:: Table of contents\n+\n+.. contents::\n+   :local:\n+   :depth: 2\n+\n+\n+Overview\n+========\n+\n+ODFE SQL Data Types\n+-------------------\n+\n+The ODFE SQL Engine support the following data types.\n+\n++---------------+\n+| ODFE SQL Type |\n++===============+\n+| boolean       |\n++---------------+\n+| integer       |\n++---------------+\n+| long          |\n++---------------+\n+| float         |\n++---------------+\n+| double        |\n++---------------+\n+| string        |\n++---------------+\n+| text          |\n++---------------+\n+| timestamp     |\n++---------------+\n+| datetime      |\n++---------------+\n+| date          |\n++---------------+\n+| time          |\n++---------------+\n+| interval      |\n++---------------+\n+| struct        |\n++---------------+\n+| array         |\n++---------------+\n+\n+Data Types Mapping\n+------------------\n+\n+The table below list the mapping between Elasticsearch Data Type, ODFE SQL Data Type and SQL Type.\n+\n++--------------------+---------------+-----------+\n+| Elasticsearch Type | ODFE SQL Type | SQL Type  |\n++====================+===============+===========+\n+| boolean            | boolean       | BOOLEAN   |\n++--------------------+---------------+-----------+\n+| integer            | integer       | INTEGER   |\n++--------------------+---------------+-----------+\n+| long               | long          | LONG      |\n++--------------------+---------------+-----------+\n+| float              | float         | FLOAT     |\n++--------------------+---------------+-----------+\n+| double             | double        | DOUBLE    |\n++--------------------+---------------+-----------+\n+| keyword            | string        | VARCHAR   |\n++--------------------+---------------+-----------+\n+| text               | text          | VARCHAR   |\n++--------------------+---------------+-----------+\n+| date               | timestamp     | TIMESTAMP |\n++--------------------+---------------+-----------+\n+| object             | struct        | STRUCT    |\n++--------------------+---------------+-----------+\n+| nested             | array         | TBD       |\n++--------------------+---------------+-----------+\n+\n+Notes: Not all the ODFE SQL Type has correspond Elasticsearch Type. e.g. data and time. To use function which required such data type, user should explict convert the data type.\n+\n+\n+\n+Numeric Data Types\n+==================\n+\n+TODO\n+\n+\n+Date and Time Data Types\n+========================\n+\n+The date and time data types are the types that represent temporal values and SQL plugin supports types including DATE, TIME, DATETIME, TIMESTAMP and INTERVAL. By default, the Elasticsearch DSL uses date type as the only date and time related type, which has contained all information about an absolute time point. To integrate with SQL language, each of the types other than timestamp is holding part of temporal or timezone information, and the usage to explicitly clarify the date and time types is reflected in the datetime functions (see `Functions <functions.rst>`_ for details), where some functions might have restrictions in the input argument type.\n+\n+\n+Date\n+----\n+\n+Date represents the calendar date regardless of the time zone. A given date value represents a 24-hour period, or say a day, but this period varies in different timezones and might have flexible hours during Daylight Savings Time programs. Besides, the date type does not contain time information as well. The supported range is '1000-01-01' to '9999-12-31'.\n+\n++------+--------------+------------------------------+\n+| Type | Syntax       | Range                        |\n++======+==============+==============================+\n+| Date | 'yyyy-MM-dd' | '0001-01-01' to '9999-12-31' |\n++------+--------------+------------------------------+\n+\n+\n+Time\n+----\n+\n+Time represents the time on the clock or watch with no regard for which timezone it might be related with. Time type data does not have date information.\n+\n++------+-----------------------+----------------------------------------+\n+| Type | Syntax                | Range                                  |\n++======+=======================+========================================+\n+| Time | 'hh:mm:ss[.fraction]' | '00:00:00.000000' to '23:59:59.999999' |\n++------+-----------------------+----------------------------------------+\n+\n+\n+Datetime\n+--------\n+\n+Datetime type is the combination of date and time. The conversion rule of date or time to datetime is described in `Conversion between date and time types`_. Datetime type does not contain timezone information. For an absolute time point that contains both date time and timezone information, see `Timestamp`_.\n+\n++----------+----------------------------------+--------------------------------------------------------------+\n+| Type     | Syntax                           | Range                                                        |\n++==========+==================================+==============================================================+\n+| Datetime | 'yyyy-MM-dd hh:mm:ss[.fraction]' | '0001-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999' |\n++----------+----------------------------------+--------------------------------------------------------------+\n+\n+\n+\n+Timestamp\n+---------\n+\n+A timestamp instance is an absolute instant independent of timezone or convention. For example, for a given point of time, if we set the timestamp of this time point into another timezone, the value should also be different accordingly. Bides, the storage of timestamp type is also different from the other types. The timestamp is converted from the current timezone to UTC for storage, and is converted back to the set timezone from UTC when retrieving.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMTM5MQ=="}, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQ0MTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0NDo1N1rOHCdGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyODozM1rOHCi15A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTk0OQ==", "bodyText": "do we need this method?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472335949", "createdAt": "2020-08-18T16:44:57Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "diffHunk": "@@ -172,4 +171,8 @@ public static Boolean getBooleanValue(ExprValue exprValue) {\n   public static ZonedDateTime getDateValue(ExprValue exprValue) {\n     return exprValue.dateValue();\n   }\n+\n+  public static TemporalAmount getIntervalValue(ExprValue exprValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMDA1Mg==", "bodyText": "yes, i've also added getTimeValue, getDatetimeValue, getTimestampValue in the other PR #694  to stay consistent. We can also remove all these methods including the getDateValue actually", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472430052", "createdAt": "2020-08-18T19:28:33Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "diffHunk": "@@ -172,4 +171,8 @@ public static Boolean getBooleanValue(ExprValue exprValue) {\n   public static ZonedDateTime getDateValue(ExprValue exprValue) {\n     return exprValue.dateValue();\n   }\n+\n+  public static TemporalAmount getIntervalValue(ExprValue exprValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTk0OQ=="}, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQ4Mjc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/DataType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo1NjowOFrOHCdhEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToyODo0NFrOHCi2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0MjgwMw==", "bodyText": "Datetime is not implemented yet?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472342803", "createdAt": "2020-08-18T16:56:08Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/DataType.java", "diffHunk": "@@ -29,13 +29,15 @@\n   NULL(ExprCoreType.UNKNOWN),\n \n   INTEGER(ExprCoreType.INTEGER),\n+  LONG(ExprCoreType.LONG),\n   DOUBLE(ExprCoreType.DOUBLE),\n   STRING(ExprCoreType.STRING),\n   BOOLEAN(ExprCoreType.BOOLEAN),\n \n   DATE(ExprCoreType.DATE),\n   TIME(ExprCoreType.TIME),\n-  TIMESTAMP(ExprCoreType.TIMESTAMP);\n+  TIMESTAMP(ExprCoreType.TIMESTAMP),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMDE1MQ==", "bodyText": "it's in #694", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472430151", "createdAt": "2020-08-18T19:28:44Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/DataType.java", "diffHunk": "@@ -29,13 +29,15 @@\n   NULL(ExprCoreType.UNKNOWN),\n \n   INTEGER(ExprCoreType.INTEGER),\n+  LONG(ExprCoreType.LONG),\n   DOUBLE(ExprCoreType.DOUBLE),\n   STRING(ExprCoreType.STRING),\n   BOOLEAN(ExprCoreType.BOOLEAN),\n \n   DATE(ExprCoreType.DATE),\n   TIME(ExprCoreType.TIME),\n-  TIMESTAMP(ExprCoreType.TIMESTAMP);\n+  TIMESTAMP(ExprCoreType.TIMESTAMP),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0MjgwMw=="}, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjUyMTM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzowNjoxOVrOHCd53w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDo1Mjo0MVrOHCrjCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0OTE1MQ==", "bodyText": "@UtilityClass will add static automatically.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472349151", "createdAt": "2020-08-18T17:06:19Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -56,7 +57,7 @@ public FunctionResolver define(FunctionName functionName,\n    * @param functions    a list of function implementation.\n    * @return FunctionResolver.\n    */\n-  public FunctionResolver define(FunctionName functionName,\n+  public static FunctionResolver define(FunctionName functionName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3MjY4Mg==", "bodyText": "Removed static keywords", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472572682", "createdAt": "2020-08-19T00:52:41Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -56,7 +57,7 @@ public FunctionResolver define(FunctionName functionName,\n    * @param functions    a list of function implementation.\n    * @return FunctionResolver.\n    */\n-  public FunctionResolver define(FunctionName functionName,\n+  public static FunctionResolver define(FunctionName functionName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0OTE1MQ=="}, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjU1NzM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/IntervalClause.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzoxNDo0MVrOHCeQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzoxMzo0NFrOHCpyCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NTA0Nw==", "bodyText": "could we reuse the FunctionDSL.impl?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472355047", "createdAt": "2020-08-18T17:14:41Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/IntervalClause.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.utils.StringUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntervalValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionSignature;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableBiFunction;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableFunction;\n+import java.time.Duration;\n+import java.time.Period;\n+import java.util.Arrays;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+@UtilityClass\n+public class IntervalClause {\n+\n+  private static final String MICRO_SECOND = \"microsecond\";\n+  private static final String SECOND = \"second\";\n+  private static final String MINUTE = \"minute\";\n+  private static final String HOUR = \"hour\";\n+  private static final String DAY = \"day\";\n+  private static final String WEEK = \"week\";\n+  private static final String MONTH = \"month\";\n+  private static final String QUARTER = \"quarter\";\n+  private static final String YEAR = \"year\";\n+\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(interval());\n+  }\n+\n+  private FunctionResolver interval() {\n+    return define(BuiltinFunctionName.INTERVAL.getName(),\n+        intervalImp(IntervalClause::interval, INTEGER),\n+        intervalImp(IntervalClause::interval, LONG),\n+        intervalImp(IntervalClause::interval, FLOAT),\n+        intervalImp(IntervalClause::interval, DOUBLE));\n+  }\n+\n+  private ExprValue interval(ExprValue value, ExprValue unit) {\n+    switch (getStringValue(unit).toLowerCase()) {\n+      case MICRO_SECOND:\n+        return microsecond(value);\n+      case SECOND:\n+        return second(value);\n+      case MINUTE:\n+        return minute(value);\n+      case HOUR:\n+        return hour(value);\n+      case DAY:\n+        return day(value);\n+      case WEEK:\n+        return week(value);\n+      case MONTH:\n+        return month(value);\n+      case QUARTER:\n+        return quarter(value);\n+      case YEAR:\n+        return year(value);\n+      default:\n+        throw new ExpressionEvaluationException(\n+            String.format(\"interval unit %s is not supported\", getStringValue(unit)));\n+    }\n+  }\n+\n+  private ExprValue microsecond(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofNanos(getLongValue(value) * 1000));\n+  }\n+\n+  private ExprValue second(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofSeconds(getLongValue(value)));\n+  }\n+\n+  private ExprValue minute(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofMinutes(getLongValue(value)));\n+  }\n+\n+  private ExprValue hour(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofHours(getLongValue(value)));\n+  }\n+\n+  private ExprValue day(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofDays(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue week(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofWeeks(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue month(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue quarter(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value) * 3));\n+  }\n+\n+  private ExprValue year(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofYears(getIntegerValue(value)));\n+  }\n+\n+  /**\n+   * Interval argument implementation as function.\n+   */\n+  private static SerializableFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMTA2Mw==", "bodyText": "toString() method needs to be overridden", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472431063", "createdAt": "2020-08-18T19:30:32Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/IntervalClause.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.utils.StringUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntervalValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionSignature;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableBiFunction;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableFunction;\n+import java.time.Duration;\n+import java.time.Period;\n+import java.util.Arrays;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+@UtilityClass\n+public class IntervalClause {\n+\n+  private static final String MICRO_SECOND = \"microsecond\";\n+  private static final String SECOND = \"second\";\n+  private static final String MINUTE = \"minute\";\n+  private static final String HOUR = \"hour\";\n+  private static final String DAY = \"day\";\n+  private static final String WEEK = \"week\";\n+  private static final String MONTH = \"month\";\n+  private static final String QUARTER = \"quarter\";\n+  private static final String YEAR = \"year\";\n+\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(interval());\n+  }\n+\n+  private FunctionResolver interval() {\n+    return define(BuiltinFunctionName.INTERVAL.getName(),\n+        intervalImp(IntervalClause::interval, INTEGER),\n+        intervalImp(IntervalClause::interval, LONG),\n+        intervalImp(IntervalClause::interval, FLOAT),\n+        intervalImp(IntervalClause::interval, DOUBLE));\n+  }\n+\n+  private ExprValue interval(ExprValue value, ExprValue unit) {\n+    switch (getStringValue(unit).toLowerCase()) {\n+      case MICRO_SECOND:\n+        return microsecond(value);\n+      case SECOND:\n+        return second(value);\n+      case MINUTE:\n+        return minute(value);\n+      case HOUR:\n+        return hour(value);\n+      case DAY:\n+        return day(value);\n+      case WEEK:\n+        return week(value);\n+      case MONTH:\n+        return month(value);\n+      case QUARTER:\n+        return quarter(value);\n+      case YEAR:\n+        return year(value);\n+      default:\n+        throw new ExpressionEvaluationException(\n+            String.format(\"interval unit %s is not supported\", getStringValue(unit)));\n+    }\n+  }\n+\n+  private ExprValue microsecond(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofNanos(getLongValue(value) * 1000));\n+  }\n+\n+  private ExprValue second(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofSeconds(getLongValue(value)));\n+  }\n+\n+  private ExprValue minute(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofMinutes(getLongValue(value)));\n+  }\n+\n+  private ExprValue hour(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofHours(getLongValue(value)));\n+  }\n+\n+  private ExprValue day(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofDays(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue week(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofWeeks(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue month(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue quarter(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value) * 3));\n+  }\n+\n+  private ExprValue year(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofYears(getIntegerValue(value)));\n+  }\n+\n+  /**\n+   * Interval argument implementation as function.\n+   */\n+  private static SerializableFunction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NTA0Nw=="}, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0Mzc1NQ==", "bodyText": "toString() method needs to be overridden\n\nWhere is the toString method used? I recall it was required earlier because we didn't have original field name in SELECT?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472543755", "createdAt": "2020-08-18T23:13:44Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/IntervalClause.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.utils.StringUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntervalValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionSignature;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableBiFunction;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableFunction;\n+import java.time.Duration;\n+import java.time.Period;\n+import java.util.Arrays;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+@UtilityClass\n+public class IntervalClause {\n+\n+  private static final String MICRO_SECOND = \"microsecond\";\n+  private static final String SECOND = \"second\";\n+  private static final String MINUTE = \"minute\";\n+  private static final String HOUR = \"hour\";\n+  private static final String DAY = \"day\";\n+  private static final String WEEK = \"week\";\n+  private static final String MONTH = \"month\";\n+  private static final String QUARTER = \"quarter\";\n+  private static final String YEAR = \"year\";\n+\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(interval());\n+  }\n+\n+  private FunctionResolver interval() {\n+    return define(BuiltinFunctionName.INTERVAL.getName(),\n+        intervalImp(IntervalClause::interval, INTEGER),\n+        intervalImp(IntervalClause::interval, LONG),\n+        intervalImp(IntervalClause::interval, FLOAT),\n+        intervalImp(IntervalClause::interval, DOUBLE));\n+  }\n+\n+  private ExprValue interval(ExprValue value, ExprValue unit) {\n+    switch (getStringValue(unit).toLowerCase()) {\n+      case MICRO_SECOND:\n+        return microsecond(value);\n+      case SECOND:\n+        return second(value);\n+      case MINUTE:\n+        return minute(value);\n+      case HOUR:\n+        return hour(value);\n+      case DAY:\n+        return day(value);\n+      case WEEK:\n+        return week(value);\n+      case MONTH:\n+        return month(value);\n+      case QUARTER:\n+        return quarter(value);\n+      case YEAR:\n+        return year(value);\n+      default:\n+        throw new ExpressionEvaluationException(\n+            String.format(\"interval unit %s is not supported\", getStringValue(unit)));\n+    }\n+  }\n+\n+  private ExprValue microsecond(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofNanos(getLongValue(value) * 1000));\n+  }\n+\n+  private ExprValue second(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofSeconds(getLongValue(value)));\n+  }\n+\n+  private ExprValue minute(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofMinutes(getLongValue(value)));\n+  }\n+\n+  private ExprValue hour(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofHours(getLongValue(value)));\n+  }\n+\n+  private ExprValue day(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofDays(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue week(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofWeeks(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue month(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue quarter(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value) * 3));\n+  }\n+\n+  private ExprValue year(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofYears(getIntegerValue(value)));\n+  }\n+\n+  /**\n+   * Interval argument implementation as function.\n+   */\n+  private static SerializableFunction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NTA0Nw=="}, "originalCommit": {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5"}, "originalPosition": 140}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1994, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}