{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTcxMjcx", "number": 577, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1Nzo1OVrOEPK4_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDowNDo0OVrOEPWP9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzQyNTI0OnYy", "diffSide": "RIGHT", "path": "ppl/src/main/antlr/OpenDistroPPLLexer.g4", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1Nzo1OVrOGyvAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTozOTowM1rOGy9ttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MjIxMg==", "bodyText": "Unrelated change?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455852212", "createdAt": "2020-07-16T14:57:59Z", "author": {"login": "dai-chen"}, "path": "ppl/src/main/antlr/OpenDistroPPLLexer.g4", "diffHunk": "@@ -137,20 +137,29 @@ DC:                                 'DC';\n ABS:                                'ABS';\n CEIL:                               'CEIL';\n CEILING:                            'CEILING';\n+CONV:                               'CONV';\n+CRC32:                              'CRC32';\n EXP:                                'EXP';\n FLOOR:                              'FLOOR';\n LN:                                 'LN';\n LOG:                                'LOG';\n LOG10:                              'LOG10';\n LOG2:                               'LOG2';\n+MOD:                                'MOD';\n+POW:                                'POW';\n+POWER:                              'POWER';\n+ROUND:                              'ROUND';\n+SIGN:                               'SIGN';\n+SQRT:                               'SQRT';\n+TRUNCATE:                           'TRUNCATE';\n \n // LITERALS AND VALUES\n //STRING_LITERAL:                     DQUOTA_STRING | SQUOTA_STRING | BQUOTA_STRING;\n ID:                                 ID_LITERAL;\n INTEGER_LITERAL:                    DEC_DIGIT+;\n DECIMAL_LITERAL:                    (DEC_DIGIT+)? '.' DEC_DIGIT+;\n \n-fragment ID_LITERAL:                [A-Z_$0-9@]*?[A-Z_$\\-]+?[A-Z_$\\-0-9]*;\n+fragment ID_LITERAL:                [A-Z_]+[A-Z_$0-9@\\-]*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NDg4MQ==", "bodyText": "The original ID_LITERAL regex allows digital numbers and special char @, \\- at the starting place. The negative numbers are also recognized as IDs when I tested out some cases in functions. So I changes the rule to only allow letters and underscore(_) as the start character.\nI've not referred MySQL rule in ID, will take a look at the manual. But any suggestion in this rule?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455984881", "createdAt": "2020-07-16T18:22:54Z", "author": {"login": "chloe-zh"}, "path": "ppl/src/main/antlr/OpenDistroPPLLexer.g4", "diffHunk": "@@ -137,20 +137,29 @@ DC:                                 'DC';\n ABS:                                'ABS';\n CEIL:                               'CEIL';\n CEILING:                            'CEILING';\n+CONV:                               'CONV';\n+CRC32:                              'CRC32';\n EXP:                                'EXP';\n FLOOR:                              'FLOOR';\n LN:                                 'LN';\n LOG:                                'LOG';\n LOG10:                              'LOG10';\n LOG2:                               'LOG2';\n+MOD:                                'MOD';\n+POW:                                'POW';\n+POWER:                              'POWER';\n+ROUND:                              'ROUND';\n+SIGN:                               'SIGN';\n+SQRT:                               'SQRT';\n+TRUNCATE:                           'TRUNCATE';\n \n // LITERALS AND VALUES\n //STRING_LITERAL:                     DQUOTA_STRING | SQUOTA_STRING | BQUOTA_STRING;\n ID:                                 ID_LITERAL;\n INTEGER_LITERAL:                    DEC_DIGIT+;\n DECIMAL_LITERAL:                    (DEC_DIGIT+)? '.' DEC_DIGIT+;\n \n-fragment ID_LITERAL:                [A-Z_$0-9@]*?[A-Z_$\\-]+?[A-Z_$\\-0-9]*;\n+fragment ID_LITERAL:                [A-Z_]+[A-Z_$0-9@\\-]*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MjIxMg=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MzEwOQ==", "bodyText": "Sure, I will check this issue too. Because I'm changing this to define what is identifier, will see if digit should be not allowed as prefix. You can keep this change in your PR.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456093109", "createdAt": "2020-07-16T21:39:03Z", "author": {"login": "dai-chen"}, "path": "ppl/src/main/antlr/OpenDistroPPLLexer.g4", "diffHunk": "@@ -137,20 +137,29 @@ DC:                                 'DC';\n ABS:                                'ABS';\n CEIL:                               'CEIL';\n CEILING:                            'CEILING';\n+CONV:                               'CONV';\n+CRC32:                              'CRC32';\n EXP:                                'EXP';\n FLOOR:                              'FLOOR';\n LN:                                 'LN';\n LOG:                                'LOG';\n LOG10:                              'LOG10';\n LOG2:                               'LOG2';\n+MOD:                                'MOD';\n+POW:                                'POW';\n+POWER:                              'POWER';\n+ROUND:                              'ROUND';\n+SIGN:                               'SIGN';\n+SQRT:                               'SQRT';\n+TRUNCATE:                           'TRUNCATE';\n \n // LITERALS AND VALUES\n //STRING_LITERAL:                     DQUOTA_STRING | SQUOTA_STRING | BQUOTA_STRING;\n ID:                                 ID_LITERAL;\n INTEGER_LITERAL:                    DEC_DIGIT+;\n DECIMAL_LITERAL:                    (DEC_DIGIT+)? '.' DEC_DIGIT+;\n \n-fragment ID_LITERAL:                [A-Z_$0-9@]*?[A-Z_$\\-]+?[A-Z_$\\-0-9]*;\n+fragment ID_LITERAL:                [A-Z_]+[A-Z_$0-9@\\-]*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MjIxMg=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzQ0NzU2OnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/MathematicalFunctionIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTowMjo0OVrOGyvOtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0MTo0NFrOGy1mAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1NTc5Nw==", "bodyText": "Is this case and all others in this IT unable to cover in comparison test?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455855797", "createdAt": "2020-07-16T15:02:49Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/MathematicalFunctionIT.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.sql;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.plugin.RestSqlAction.QUERY_API_ENDPOINT;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.TestUtils.getResponseBody;\n+\n+import com.amazon.opendistroforelasticsearch.sql.legacy.SQLIntegTestCase;\n+import com.amazon.opendistroforelasticsearch.sql.util.TestUtils;\n+import java.io.IOException;\n+import java.util.Locale;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+public class MathematicalFunctionIT extends SQLIntegTestCase {\n+\n+  @Override\n+  public void init() throws Exception {\n+    super.init();\n+    TestUtils.enableNewQueryEngine(client());\n+  }\n+\n+  @Test\n+  public void testConv() throws IOException {\n+    JSONObject result = executeQuery(\"select conv(11, 10, 16)\");\n+    verifySchema(result, schema(\"conv(11, 10, 16)\", null, \"string\"));\n+    verifyDataRows(result, rows(\"b\"));\n+\n+    result = executeQuery(\"select conv(11, 16, 10)\");\n+    verifySchema(result, schema(\"conv(11, 16, 10)\", null, \"string\"));\n+    verifyDataRows(result, rows(\"17\"));\n+  }\n+\n+  @Test\n+  public void testCrc32() throws IOException {\n+    JSONObject result = executeQuery(\"select crc32('MySQL')\");\n+    verifySchema(result, schema(\"crc32(\\\"MySQL\\\")\", null, \"long\"));\n+    verifyDataRows(result, rows(3259397556L));\n+  }\n+\n+  @Test\n+  public void testMod() throws IOException {\n+    JSONObject result = executeQuery(\"select mod(3, 2)\");\n+    verifySchema(result, schema(\"mod(3, 2)\", null, \"integer\"));\n+    verifyDataRows(result, rows(1));\n+\n+    result = executeQuery(\"select mod(3.1, 2)\");\n+    verifySchema(result, schema(\"mod(3.1, 2)\", null, \"double\"));\n+    verifyDataRows(result, rows(1.1));\n+  }\n+\n+  @Test\n+  public void testRound() throws IOException {\n+    JSONObject result = executeQuery(\"select round(56.78)\");\n+    verifySchema(result, schema(\"round(56.78)\", null, \"double\"));\n+    verifyDataRows(result, rows(57));\n+\n+    result = executeQuery(\"select round(56.78, 1)\");\n+    verifySchema(result, schema(\"round(56.78, 1)\", null, \"double\"));\n+    verifyDataRows(result, rows(56.8));\n+\n+    result = executeQuery(\"select round(56.78, -1)\");\n+    verifySchema(result, schema(\"round(56.78, -1)\", null, \"double\"));\n+    verifyDataRows(result, rows(60));\n+\n+    result = executeQuery(\"select round(-56)\");\n+    verifySchema(result, schema(\"round(-56)\", null, \"long\"));\n+    verifyDataRows(result, rows(-56));\n+\n+    result = executeQuery(\"select round(-56, 1)\");\n+    verifySchema(result, schema(\"round(-56, 1)\", null, \"long\"));\n+    verifyDataRows(result, rows(-56));\n+\n+    result = executeQuery(\"select round(-56, -1)\");\n+    verifySchema(result, schema(\"round(-56, -1)\", null, \"long\"));\n+    verifyDataRows(result, rows(-60));\n+  }\n+\n+  /**\n+   * Test sign function with double value.\n+   */\n+  @Test\n+  public void testSign() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDA2NQ==", "bodyText": "the sign function in comparison test is covered by H2, but the schema doesn't match for now", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455960065", "createdAt": "2020-07-16T17:41:44Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/MathematicalFunctionIT.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.sql;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.plugin.RestSqlAction.QUERY_API_ENDPOINT;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.TestUtils.getResponseBody;\n+\n+import com.amazon.opendistroforelasticsearch.sql.legacy.SQLIntegTestCase;\n+import com.amazon.opendistroforelasticsearch.sql.util.TestUtils;\n+import java.io.IOException;\n+import java.util.Locale;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+public class MathematicalFunctionIT extends SQLIntegTestCase {\n+\n+  @Override\n+  public void init() throws Exception {\n+    super.init();\n+    TestUtils.enableNewQueryEngine(client());\n+  }\n+\n+  @Test\n+  public void testConv() throws IOException {\n+    JSONObject result = executeQuery(\"select conv(11, 10, 16)\");\n+    verifySchema(result, schema(\"conv(11, 10, 16)\", null, \"string\"));\n+    verifyDataRows(result, rows(\"b\"));\n+\n+    result = executeQuery(\"select conv(11, 16, 10)\");\n+    verifySchema(result, schema(\"conv(11, 16, 10)\", null, \"string\"));\n+    verifyDataRows(result, rows(\"17\"));\n+  }\n+\n+  @Test\n+  public void testCrc32() throws IOException {\n+    JSONObject result = executeQuery(\"select crc32('MySQL')\");\n+    verifySchema(result, schema(\"crc32(\\\"MySQL\\\")\", null, \"long\"));\n+    verifyDataRows(result, rows(3259397556L));\n+  }\n+\n+  @Test\n+  public void testMod() throws IOException {\n+    JSONObject result = executeQuery(\"select mod(3, 2)\");\n+    verifySchema(result, schema(\"mod(3, 2)\", null, \"integer\"));\n+    verifyDataRows(result, rows(1));\n+\n+    result = executeQuery(\"select mod(3.1, 2)\");\n+    verifySchema(result, schema(\"mod(3.1, 2)\", null, \"double\"));\n+    verifyDataRows(result, rows(1.1));\n+  }\n+\n+  @Test\n+  public void testRound() throws IOException {\n+    JSONObject result = executeQuery(\"select round(56.78)\");\n+    verifySchema(result, schema(\"round(56.78)\", null, \"double\"));\n+    verifyDataRows(result, rows(57));\n+\n+    result = executeQuery(\"select round(56.78, 1)\");\n+    verifySchema(result, schema(\"round(56.78, 1)\", null, \"double\"));\n+    verifyDataRows(result, rows(56.8));\n+\n+    result = executeQuery(\"select round(56.78, -1)\");\n+    verifySchema(result, schema(\"round(56.78, -1)\", null, \"double\"));\n+    verifyDataRows(result, rows(60));\n+\n+    result = executeQuery(\"select round(-56)\");\n+    verifySchema(result, schema(\"round(-56)\", null, \"long\"));\n+    verifyDataRows(result, rows(-56));\n+\n+    result = executeQuery(\"select round(-56, 1)\");\n+    verifySchema(result, schema(\"round(-56, 1)\", null, \"long\"));\n+    verifyDataRows(result, rows(-56));\n+\n+    result = executeQuery(\"select round(-56, -1)\");\n+    verifySchema(result, schema(\"round(-56, -1)\", null, \"long\"));\n+    verifyDataRows(result, rows(-60));\n+  }\n+\n+  /**\n+   * Test sign function with double value.\n+   */\n+  @Test\n+  public void testSign() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1NTc5Nw=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzQ3NjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTowOTowN1rOGyvgvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzoyMDo0M1rOGy01hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2MDQxNQ==", "bodyText": "Could we use more readable argument name such as (num, fromBase, toBase) -> ?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455860415", "createdAt": "2020-07-16T15:09:07Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -97,6 +110,58 @@ private static FunctionResolver ceiling() {\n             .build());\n   }\n \n+  /**\n+   * Definition of conv(x, a, b) function.\n+   * Convert number x from base a to base b\n+   * The supported signature of floor function is\n+   * (STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private static FunctionResolver conv() {\n+    FunctionName functionName = BuiltinFunctionName.CONV.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName,\n+                    Arrays.asList(ExprCoreType.STRING, ExprCoreType.INTEGER, ExprCoreType.INTEGER)),\n+                tripleArgFunc(\n+                    functionName, (t, u, v) -> Integer.toString(Integer.parseInt(t, u), v),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NzY1NQ==", "bodyText": "sounds good, will do", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455947655", "createdAt": "2020-07-16T17:20:43Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -97,6 +110,58 @@ private static FunctionResolver ceiling() {\n             .build());\n   }\n \n+  /**\n+   * Definition of conv(x, a, b) function.\n+   * Convert number x from base a to base b\n+   * The supported signature of floor function is\n+   * (STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private static FunctionResolver conv() {\n+    FunctionName functionName = BuiltinFunctionName.CONV.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName,\n+                    Arrays.asList(ExprCoreType.STRING, ExprCoreType.INTEGER, ExprCoreType.INTEGER)),\n+                tripleArgFunc(\n+                    functionName, (t, u, v) -> Integer.toString(Integer.parseInt(t, u), v),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2MDQxNQ=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzcxNDY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMjo1NVrOGyx2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyNTo1MlrOGy9WOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng==", "bodyText": "does mod support LONG and FLOAT?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455898666", "createdAt": "2020-07-16T16:02:55Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -182,6 +247,186 @@ private static FunctionResolver log2() {\n         singleArgumentFunction(BuiltinFunctionName.LOG2.getName(), v -> Math.log(v) / Math.log(2)));\n   }\n \n+  /**\n+   * Definition of mod(x, y) function.\n+   * Calculate the remainder of x divided by y\n+   * The supported signature of mod function is\n+   * (INTEGER, INTEGER) -> INTEGER\n+   * (LONG, LONG) -> LONG\n+   * (FLOAT, FLOAT) -> FLOAT\n+   * (DOUBLE, DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver mod() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzgzNA==", "bodyText": "MySQL seems support float and long? https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_mod\n@chloe-zh Btw, does Java native '%' cover this case in MySQL doc above? \"MOD(N,0) returns NULL.\" I recall our '/' throw divide zero exception which should have returned NULL too.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455913834", "createdAt": "2020-07-16T16:25:16Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -182,6 +247,186 @@ private static FunctionResolver log2() {\n         singleArgumentFunction(BuiltinFunctionName.LOG2.getName(), v -> Math.log(v) / Math.log(2)));\n   }\n \n+  /**\n+   * Definition of mod(x, y) function.\n+   * Calculate the remainder of x divided by y\n+   * The supported signature of mod function is\n+   * (INTEGER, INTEGER) -> INTEGER\n+   * (LONG, LONG) -> LONG\n+   * (FLOAT, FLOAT) -> FLOAT\n+   * (DOUBLE, DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver mod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MzAyMw==", "bodyText": "LONG type should be good as says in MySQL manual (as BIGINT), but it doesn't mention about FLOAT.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455983023", "createdAt": "2020-07-16T18:19:34Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -182,6 +247,186 @@ private static FunctionResolver log2() {\n         singleArgumentFunction(BuiltinFunctionName.LOG2.getName(), v -> Math.log(v) / Math.log(2)));\n   }\n \n+  /**\n+   * Definition of mod(x, y) function.\n+   * Calculate the remainder of x divided by y\n+   * The supported signature of mod function is\n+   * (INTEGER, INTEGER) -> INTEGER\n+   * (LONG, LONG) -> LONG\n+   * (FLOAT, FLOAT) -> FLOAT\n+   * (DOUBLE, DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver mod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NzA5Nw==", "bodyText": "@dai-chen Good point! yes currently it also throws arithmetic exception. Will change its behavior to return NULL instead.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456087097", "createdAt": "2020-07-16T21:25:52Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -182,6 +247,186 @@ private static FunctionResolver log2() {\n         singleArgumentFunction(BuiltinFunctionName.LOG2.getName(), v -> Math.log(v) / Math.log(2)));\n   }\n \n+  /**\n+   * Definition of mod(x, y) function.\n+   * Calculate the remainder of x divided by y\n+   * The supported signature of mod function is\n+   * (INTEGER, INTEGER) -> INTEGER\n+   * (LONG, LONG) -> LONG\n+   * (FLOAT, FLOAT) -> FLOAT\n+   * (DOUBLE, DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver mod() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzgyMzMxOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/resources/correctness/expressions/functions.txt", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyODo0N1rOGyy56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTozNTo0MFrOGy9nxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjAwOA==", "bodyText": "Any reason why not test mod here? I can see the support in H2: http://www.h2database.com/html/functions.html#mod", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455916008", "createdAt": "2020-07-16T16:28:47Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/resources/correctness/expressions/functions.txt", "diffHunk": "@@ -10,6 +10,19 @@ ceil(-1)\n ceil(0.0)\n ceil(0.4999)\n ceil(abs(1))\n+power(2, 2)\n+power(2, -2)\n+power(2.1, 2)\n+power(2, -2.1)\n+power(abs(2), 2)\n+sign(0)\n+sign(-1)\n+sign(1)\n+sign(abs(1))\n+sqrt(0)\n+sqrt(1)\n+sqrt(1.1)\n+sqrt(abs(1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MzE0Mg==", "bodyText": "currently the schema does not match with H2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455943142", "createdAt": "2020-07-16T17:13:32Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/resources/correctness/expressions/functions.txt", "diffHunk": "@@ -10,6 +10,19 @@ ceil(-1)\n ceil(0.0)\n ceil(0.4999)\n ceil(abs(1))\n+power(2, 2)\n+power(2, -2)\n+power(2.1, 2)\n+power(2, -2.1)\n+power(abs(2), 2)\n+sign(0)\n+sign(-1)\n+sign(1)\n+sign(abs(1))\n+sqrt(0)\n+sqrt(1)\n+sqrt(1.1)\n+sqrt(abs(1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjAwOA=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODMwNQ==", "bodyText": "Is name or type different?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455968305", "createdAt": "2020-07-16T17:55:06Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/resources/correctness/expressions/functions.txt", "diffHunk": "@@ -10,6 +10,19 @@ ceil(-1)\n ceil(0.0)\n ceil(0.4999)\n ceil(abs(1))\n+power(2, 2)\n+power(2, -2)\n+power(2.1, 2)\n+power(2, -2.1)\n+power(abs(2), 2)\n+sign(0)\n+sign(-1)\n+sign(1)\n+sign(abs(1))\n+sqrt(0)\n+sqrt(1)\n+sqrt(1.1)\n+sqrt(abs(1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjAwOA=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MDc5Mw==", "bodyText": "@dai-chen It's name. Currently all tests of functions have different name in schema with H2. For example the query SELECT SIGN(1.1) has a column name of SIGN(1.1) while H2 has the result as the column name, which looks like:\n\"schema\": [{\n    \"name\": \"1\",\n    \"type\": \"INTEGER\"\n}]\n\nThere are still a couple of functions that have different behavior compared to SQLite, while has the same behavior with H2, like the sign function above but schema name is different. These cases are also added to manual test rather than the comparison test cases for now.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456090793", "createdAt": "2020-07-16T21:33:59Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/resources/correctness/expressions/functions.txt", "diffHunk": "@@ -10,6 +10,19 @@ ceil(-1)\n ceil(0.0)\n ceil(0.4999)\n ceil(abs(1))\n+power(2, 2)\n+power(2, -2)\n+power(2.1, 2)\n+power(2, -2.1)\n+power(abs(2), 2)\n+sign(0)\n+sign(-1)\n+sign(1)\n+sign(abs(1))\n+sqrt(0)\n+sqrt(1)\n+sqrt(1.1)\n+sqrt(abs(1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjAwOA=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MTU4OQ==", "bodyText": "I see. Sorry I forgot that! We should be able to overcome this once we support column alias.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456091589", "createdAt": "2020-07-16T21:35:40Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/resources/correctness/expressions/functions.txt", "diffHunk": "@@ -10,6 +10,19 @@ ceil(-1)\n ceil(0.0)\n ceil(0.4999)\n ceil(abs(1))\n+power(2, 2)\n+power(2, -2)\n+power(2.1, 2)\n+power(2, -2.1)\n+power(abs(2), 2)\n+sign(0)\n+sign(-1)\n+sign(1)\n+sign(abs(1))\n+sqrt(0)\n+sqrt(1)\n+sqrt(1.1)\n+sqrt(abs(1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjAwOA=="}, "originalCommit": {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTI4NjMxOnYy", "diffSide": "RIGHT", "path": "docs/user/dql/functions.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDowNDo0OVrOGzA2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoxMjozMlrOGzUm3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0NDYzOQ==", "bodyText": "Could you add example for each function? Reference: https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_mod\nFor example,\n    od> SELECT MOD(5, 2), MOD(-5, 2), MOD(5, 0);\n    fetched rows / total rows = 1/1\n    +---------+-------------+-------------+\n    ...", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456144639", "createdAt": "2020-07-17T00:04:49Z", "author": {"login": "dai-chen"}, "path": "docs/user/dql/functions.rst", "diffHunk": "@@ -139,6 +139,20 @@ Description\n \n Specification is undefined and type check is skipped for now\n \n+\n+CONV\n+====\n+\n+Description\n+-----------\n+\n+Usage: CONV(x, a, b) converts the number x from a base to b base\n+\n+Argument type: x: string, a: integer, b: integer\n+\n+Return type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b7dfd329aa2e0c12d9f596f4db42adab92835e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2ODE4OA==", "bodyText": "Sorry I forgot to add examples here. Will do", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456468188", "createdAt": "2020-07-17T14:12:32Z", "author": {"login": "chloe-zh"}, "path": "docs/user/dql/functions.rst", "diffHunk": "@@ -139,6 +139,20 @@ Description\n \n Specification is undefined and type check is skipped for now\n \n+\n+CONV\n+====\n+\n+Description\n+-----------\n+\n+Usage: CONV(x, a, b) converts the number x from a base to b base\n+\n+Argument type: x: string, a: integer, b: integer\n+\n+Return type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE0NDYzOQ=="}, "originalCommit": {"oid": "92b7dfd329aa2e0c12d9f596f4db42adab92835e"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2138, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}