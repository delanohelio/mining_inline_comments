{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzMxNTQ1", "number": 346, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowMDoxMVrODX-LaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTo0NTozOVrODZsU5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDYyNTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/domain/BindingTuple.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowMDoxMVrOFdkF1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowNDo1NVrOFe_d7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NDM0Mg==", "bodyText": "can use .collect(Collectors.joining(\",\", \"<\", \">\")) directly and same suggestion for ExprTupleValue.toString().", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r366544342", "createdAt": "2020-01-14T20:00:11Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/domain/BindingTuple.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.domain;\n+\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprMissingValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Singular;\n+import org.json.JSONObject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.fromJson;\n+\n+/**\n+ * BindingTuple represents the a relationship between bindingName and ExprValue.\n+ * e.g. The operation output column name is bindingName, the value is the ExprValue.\n+ */\n+@Builder\n+@Getter\n+@EqualsAndHashCode\n+public class BindingTuple {\n+    @Singular(\"binding\")\n+    private Map<String, ExprValue> bindingMap;\n+\n+    /**\n+     * Resolve the Binding Name in BindingTuple context.\n+     * @param bindingName binding name.\n+     * @return binding value.\n+     */\n+    public ExprValue resolve(String bindingName) {\n+        return bindingMap.getOrDefault(bindingName, new ExprMissingValue());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuffer sb = new StringBuffer(\"<\");\n+        final List<String> list = bindingMap.entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"%s:%s\", entry.getKey(), entry.getValue()))\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MTQ1NQ==", "bodyText": "Done. For BindingTuple and ExprTupleValue.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r368041455", "createdAt": "2020-01-17T17:04:55Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/domain/BindingTuple.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.domain;\n+\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprMissingValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Singular;\n+import org.json.JSONObject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.fromJson;\n+\n+/**\n+ * BindingTuple represents the a relationship between bindingName and ExprValue.\n+ * e.g. The operation output column name is bindingName, the value is the ExprValue.\n+ */\n+@Builder\n+@Getter\n+@EqualsAndHashCode\n+public class BindingTuple {\n+    @Singular(\"binding\")\n+    private Map<String, ExprValue> bindingMap;\n+\n+    /**\n+     * Resolve the Binding Name in BindingTuple context.\n+     * @param bindingName binding name.\n+     * @return binding value.\n+     */\n+    public ExprValue resolve(String bindingName) {\n+        return bindingMap.getOrDefault(bindingName, new ExprMissingValue());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuffer sb = new StringBuffer(\"<\");\n+        final List<String> list = bindingMap.entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"%s:%s\", entry.getKey(), entry.getValue()))\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NDM0Mg=="}, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY0MDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/domain/BindingTuple.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowNTo1MlrOFdkPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyNzozOVrOFfAC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjgwNA==", "bodyText": "can reuse return from(json.toMap()) ?\nBtw, what's difference between creating BindingTuple by constructor and builder?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r366546804", "createdAt": "2020-01-14T20:05:52Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/domain/BindingTuple.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.domain;\n+\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprMissingValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Singular;\n+import org.json.JSONObject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.fromJson;\n+\n+/**\n+ * BindingTuple represents the a relationship between bindingName and ExprValue.\n+ * e.g. The operation output column name is bindingName, the value is the ExprValue.\n+ */\n+@Builder\n+@Getter\n+@EqualsAndHashCode\n+public class BindingTuple {\n+    @Singular(\"binding\")\n+    private Map<String, ExprValue> bindingMap;\n+\n+    /**\n+     * Resolve the Binding Name in BindingTuple context.\n+     * @param bindingName binding name.\n+     * @return binding value.\n+     */\n+    public ExprValue resolve(String bindingName) {\n+        return bindingMap.getOrDefault(bindingName, new ExprMissingValue());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuffer sb = new StringBuffer(\"<\");\n+        final List<String> list = bindingMap.entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"%s:%s\", entry.getKey(), entry.getValue()))\n+                .collect(Collectors.toList());\n+        sb.append(String.join(\",\", list));\n+        sb.append('>');\n+        return sb.toString();\n+    }\n+\n+    public static BindingTuple from(Map<String, Object> map) {\n+        Map<String, ExprValue> ssValueMap = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : map.entrySet()) {\n+            ssValueMap.put(entry.getKey(), fromJson(entry.getValue()));\n+        }\n+        return BindingTuple.builder()\n+                .bindingMap(ssValueMap)\n+                .build();\n+    }\n+\n+    public static BindingTuple from(JSONObject json) {\n+        Map<String, ExprValue> valueMap = new HashMap<>();\n+        for (String s : json.keySet()) {\n+            valueMap.put(s, fromJson(json.get(s)));\n+        }\n+        return new BindingTuple(valueMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDg5OQ==", "bodyText": "Done. There is no with constructor and builder. per https://projectlombok.org/features/Builder.\nFinally, applying @Builder to a class is as if you added @AllArgsConstructor(access = AccessLevel.PACKAGE) to the class and applied the @Builder annotation to this all-args-constructor.\nModify the code to use builder instead of constructor to build BindingTuple.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r368050899", "createdAt": "2020-01-17T17:27:39Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/domain/BindingTuple.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.domain;\n+\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprMissingValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import lombok.Builder;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Singular;\n+import org.json.JSONObject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.fromJson;\n+\n+/**\n+ * BindingTuple represents the a relationship between bindingName and ExprValue.\n+ * e.g. The operation output column name is bindingName, the value is the ExprValue.\n+ */\n+@Builder\n+@Getter\n+@EqualsAndHashCode\n+public class BindingTuple {\n+    @Singular(\"binding\")\n+    private Map<String, ExprValue> bindingMap;\n+\n+    /**\n+     * Resolve the Binding Name in BindingTuple context.\n+     * @param bindingName binding name.\n+     * @return binding value.\n+     */\n+    public ExprValue resolve(String bindingName) {\n+        return bindingMap.getOrDefault(bindingName, new ExprMissingValue());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuffer sb = new StringBuffer(\"<\");\n+        final List<String> list = bindingMap.entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"%s:%s\", entry.getKey(), entry.getValue()))\n+                .collect(Collectors.toList());\n+        sb.append(String.join(\",\", list));\n+        sb.append('>');\n+        return sb.toString();\n+    }\n+\n+    public static BindingTuple from(Map<String, Object> map) {\n+        Map<String, ExprValue> ssValueMap = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : map.entrySet()) {\n+            ssValueMap.put(entry.getKey(), fromJson(entry.getValue()));\n+        }\n+        return BindingTuple.builder()\n+                .bindingMap(ssValueMap)\n+                .build();\n+    }\n+\n+    public static BindingTuple from(JSONObject json) {\n+        Map<String, ExprValue> valueMap = new HashMap<>();\n+        for (String s : json.keySet()) {\n+            valueMap.put(s, fromJson(json.get(s)));\n+        }\n+        return new BindingTuple(valueMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjgwNA=="}, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDgyNjg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/model/ExprValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToxNzoyNFrOFdmD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoyMDoxOVrOFgEBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NjYyMA==", "bodyText": "I'm thinking can we use generic type for this interface and method and get rid of all the xxxValue methods below? Because I notice actually each implementation class implements only one of them.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r366576620", "createdAt": "2020-01-14T21:17:24Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/model/ExprValue.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The definition of the Value used in the Expression\n+ */\n+public interface ExprValue {\n+    default Object value() {\n+        throw new IllegalStateException(\"invalid value operation on \" + kind());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5NDU5Nw==", "bodyText": "I suggested to postpone the review of Expression on the next PR which will focus on expression implementation.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r368194597", "createdAt": "2020-01-18T01:15:52Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/model/ExprValue.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The definition of the Value used in the Expression\n+ */\n+public interface ExprValue {\n+    default Object value() {\n+        throw new IllegalStateException(\"invalid value operation on \" + kind());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NjYyMA=="}, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2NDcxMQ==", "bodyText": "Sure. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r369164711", "createdAt": "2020-01-21T18:20:19Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/model/ExprValue.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The definition of the Value used in the Expression\n+ */\n+public interface ExprValue {\n+    default Object value() {\n+        throw new IllegalStateException(\"invalid value operation on \" + kind());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NjYyMA=="}, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzc2NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/physical/node/scroll/PhysicalScroll.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODozMDowMlrOFeCKoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyOToyNlrOFfAFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNzA4OQ==", "bodyText": "Is this same as BindingTuple.from()?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r367037089", "createdAt": "2020-01-15T18:30:02Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/physical/node/scroll/PhysicalScroll.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.query.planner.physical.node.scroll;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SqlParseException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.domain.BindingTuple;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.query.AggregationQueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.QueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.core.ExecuteParams;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.core.PlanNode;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.physical.PhysicalOperator;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.physical.Row;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.physical.estimation.Cost;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.fromJson;\n+import static com.amazon.opendistroforelasticsearch.sql.query.planner.physical.node.scroll.SearchAggregationResponseHelper.flatten;\n+\n+/**\n+ * The definition of Scroll Operator.\n+ */\n+@RequiredArgsConstructor\n+public class PhysicalScroll implements PhysicalOperator<BindingTuple> {\n+    private final QueryAction queryAction;\n+\n+    private Iterator<BindingTupleRow> rowIterator;\n+\n+    @Override\n+    public Cost estimate() {\n+        return null;\n+    }\n+\n+    @Override\n+    public PlanNode[] children() {\n+        return new PlanNode[0];\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return rowIterator.hasNext();\n+    }\n+\n+    @Override\n+    public Row<BindingTuple> next() {\n+        return rowIterator.next();\n+    }\n+\n+    @Override\n+    public void open(ExecuteParams params) {\n+        try {\n+            ActionResponse response = queryAction.explain().get();\n+            if (queryAction instanceof AggregationQueryAction) {\n+                populateSearchAggregationResponse(((SearchResponse) response).getAggregations());\n+            } else {\n+                throw new IllegalStateException(\"Not support QueryAction type: \" + queryAction.getClass());\n+            }\n+        } catch (SqlParseException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void populateSearchAggregationResponse(Aggregations aggs) {\n+        List<Map<String, Object>> flatten = flatten(aggs);\n+        List<BindingTupleRow> bindingTupleList = flatten.stream().map(map -> {\n+            Map<String, ExprValue> ssValueMap = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : map.entrySet()) {\n+                ssValueMap.put(entry.getKey(), fromJson(entry.getValue()));\n+            }\n+            return BindingTuple.builder().bindingMap(ssValueMap).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MTYyNA==", "bodyText": "Done. Using populateSearchAggregationResponse function from SearchAggregationResponseHelper.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r368051624", "createdAt": "2020-01-17T17:29:26Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/physical/node/scroll/PhysicalScroll.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.query.planner.physical.node.scroll;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SqlParseException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.domain.BindingTuple;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.query.AggregationQueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.QueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.core.ExecuteParams;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.core.PlanNode;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.physical.PhysicalOperator;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.physical.Row;\n+import com.amazon.opendistroforelasticsearch.sql.query.planner.physical.estimation.Cost;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import org.elasticsearch.action.ActionResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.fromJson;\n+import static com.amazon.opendistroforelasticsearch.sql.query.planner.physical.node.scroll.SearchAggregationResponseHelper.flatten;\n+\n+/**\n+ * The definition of Scroll Operator.\n+ */\n+@RequiredArgsConstructor\n+public class PhysicalScroll implements PhysicalOperator<BindingTuple> {\n+    private final QueryAction queryAction;\n+\n+    private Iterator<BindingTupleRow> rowIterator;\n+\n+    @Override\n+    public Cost estimate() {\n+        return null;\n+    }\n+\n+    @Override\n+    public PlanNode[] children() {\n+        return new PlanNode[0];\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return rowIterator.hasNext();\n+    }\n+\n+    @Override\n+    public Row<BindingTuple> next() {\n+        return rowIterator.next();\n+    }\n+\n+    @Override\n+    public void open(ExecuteParams params) {\n+        try {\n+            ActionResponse response = queryAction.explain().get();\n+            if (queryAction instanceof AggregationQueryAction) {\n+                populateSearchAggregationResponse(((SearchResponse) response).getAggregations());\n+            } else {\n+                throw new IllegalStateException(\"Not support QueryAction type: \" + queryAction.getClass());\n+            }\n+        } catch (SqlParseException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void populateSearchAggregationResponse(Aggregations aggs) {\n+        List<Map<String, Object>> flatten = flatten(aggs);\n+        List<BindingTupleRow> bindingTupleList = flatten.stream().map(map -> {\n+            Map<String, ExprValue> ssValueMap = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : map.entrySet()) {\n+                ssValueMap.put(entry.getKey(), fromJson(entry.getValue()));\n+            }\n+            return BindingTuple.builder().bindingMap(ssValueMap).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNzA4OQ=="}, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzc4MDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/physical/node/scroll/SearchAggregationResponseHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODozNToxMlrOFeCUMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyOTozNFrOFfAF2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzOTUzOA==", "bodyText": "Is this duplicate as the private method of same name in PhysicalScroll?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r367039538", "createdAt": "2020-01-15T18:35:12Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/physical/node/scroll/SearchAggregationResponseHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.query.planner.physical.node.scroll;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.domain.BindingTuple;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.elasticsearch.search.aggregations.Aggregation;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+import org.elasticsearch.search.aggregations.metrics.Percentile;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * The definition of Search {@link Aggregations} parser helper class.\n+ */\n+public class SearchAggregationResponseHelper {\n+    public static List<BindingTupleRow> populateSearchAggregationResponse(Aggregations aggs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MTY3NA==", "bodyText": "Done. Using populateSearchAggregationResponse function from SearchAggregationResponseHelper.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r368051674", "createdAt": "2020-01-17T17:29:34Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/physical/node/scroll/SearchAggregationResponseHelper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.query.planner.physical.node.scroll;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.domain.BindingTuple;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.elasticsearch.search.aggregations.Aggregation;\n+import org.elasticsearch.search.aggregations.Aggregations;\n+import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregation;\n+import org.elasticsearch.search.aggregations.metrics.Percentile;\n+import org.elasticsearch.search.aggregations.metrics.Percentiles;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * The definition of Search {@link Aggregations} parser helper class.\n+ */\n+public class SearchAggregationResponseHelper {\n+    public static List<BindingTupleRow> populateSearchAggregationResponse(Aggregations aggs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzOTUzOA=="}, "originalCommit": {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjY3MjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/core/ExpressionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTo0NTozOVrOFgOYxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODowNTo0OVrOFglw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNDQ2OQ==", "bodyText": "Does it work if the number of parameters in basic arithmetic expressions is indeterminate? eg. max(field_1) + max(field_2) + max(field_3) + ...", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r369334469", "createdAt": "2020-01-22T01:45:39Z", "author": {"login": "chloe-zh"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/core/ExpressionFactory.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.core;\n+\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.domain.BindingTuple;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.function.BiFunction;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.doubleValue;\n+\n+/**\n+ * The definition of Expression factory.\n+ */\n+public class ExpressionFactory {\n+    /**\n+     * Reference\n+     */\n+    public static Expression ref(String bindingName) {\n+        return new Expression() {\n+            @Override\n+            public String toString() {\n+                return String.format(\"%s\", bindingName);\n+            }\n+\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return tuple.resolve(bindingName);\n+            }\n+        };\n+    }\n+\n+    @RequiredArgsConstructor\n+    enum ArithmeticOperation {\n+        ADD(Integer::sum, Double::sum),\n+        SUB((arg1, arg2) -> arg1 - arg2,\n+            (arg1, arg2) -> arg1 - arg2);\n+\n+        private final BiFunction<Integer, Integer, Integer> integerFunc;\n+        private final BiFunction<Double, Double, Double> doubleFunc;\n+    }\n+\n+    public static Expression add(Expression left, Expression right) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return arithmetic(ArithmeticOperation.ADD, left.valueOf(tuple), right.valueOf(tuple));\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"add(%s,%s)\", left, right);\n+            }\n+        };\n+    }\n+\n+    public static Expression sub(Expression left, Expression right) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return arithmetic(ArithmeticOperation.ADD, left.valueOf(tuple), right.valueOf(tuple));\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"sub(%s,%s)\", left, right);\n+            }\n+        };\n+    }\n+\n+    public static Expression log(Expression expr) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                final ExprValue exprValue = expr.valueOf(tuple);\n+                switch (exprValue.kind()) {\n+                    case INTEGER_VALUE:\n+                        return doubleValue(Math.log(exprValue.numberValue().intValue()));\n+                    case DOUBLE_VALUE:\n+                        return doubleValue(Math.log(exprValue.numberValue().doubleValue()));\n+                    default:\n+                        throw new RuntimeException(\"unsupported log operand: \" + exprValue.kind());\n+                }\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"log(%s)\", expr);\n+            }\n+        };\n+    }\n+\n+    public static Expression cast(Expression expr) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return expr.valueOf(tuple);\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"cast(%s)\", expr);\n+            }\n+        };\n+    }\n+\n+    private static ExprValue arithmetic(ArithmeticOperation op, ExprValue v1, ExprValue v2) {\n+        if (v1.kind() != v2.kind()) {\n+            throw new RuntimeException(\n+                    String.format(\"operation with different type is unsupported: %s(%s, %s)\", op.name(), v1.kind(),\n+                                  v2.kind()));\n+        } else {\n+            switch (v1.kind()) {\n+                case DOUBLE_VALUE:\n+                    return ExprValueFactory.doubleValue(\n+                            op.doubleFunc.apply(v1.numberValue().doubleValue(), v2.numberValue().doubleValue()));\n+                case INTEGER_VALUE:\n+                    return ExprValueFactory\n+                            .integerValue(\n+                                    op.integerFunc.apply(v1.numberValue().intValue(), v2.numberValue().intValue()));\n+                default:\n+                    throw new RuntimeException(String.format(\"unsupported operation: %s(%s, %s)\", op.name(), v1.kind(),\n+                                                             v2.kind()));\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58c195ee1b5c3d3234a6076448dad9067632155c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNzQ5Mw==", "bodyText": "Yes, it will be compile as add(max(field_1),add(max(field_2),max(field_3)).", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/346#discussion_r369717493", "createdAt": "2020-01-22T18:05:49Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/core/ExpressionFactory.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.core;\n+\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.domain.BindingTuple;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.function.BiFunction;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.doubleValue;\n+\n+/**\n+ * The definition of Expression factory.\n+ */\n+public class ExpressionFactory {\n+    /**\n+     * Reference\n+     */\n+    public static Expression ref(String bindingName) {\n+        return new Expression() {\n+            @Override\n+            public String toString() {\n+                return String.format(\"%s\", bindingName);\n+            }\n+\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return tuple.resolve(bindingName);\n+            }\n+        };\n+    }\n+\n+    @RequiredArgsConstructor\n+    enum ArithmeticOperation {\n+        ADD(Integer::sum, Double::sum),\n+        SUB((arg1, arg2) -> arg1 - arg2,\n+            (arg1, arg2) -> arg1 - arg2);\n+\n+        private final BiFunction<Integer, Integer, Integer> integerFunc;\n+        private final BiFunction<Double, Double, Double> doubleFunc;\n+    }\n+\n+    public static Expression add(Expression left, Expression right) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return arithmetic(ArithmeticOperation.ADD, left.valueOf(tuple), right.valueOf(tuple));\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"add(%s,%s)\", left, right);\n+            }\n+        };\n+    }\n+\n+    public static Expression sub(Expression left, Expression right) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return arithmetic(ArithmeticOperation.ADD, left.valueOf(tuple), right.valueOf(tuple));\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"sub(%s,%s)\", left, right);\n+            }\n+        };\n+    }\n+\n+    public static Expression log(Expression expr) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                final ExprValue exprValue = expr.valueOf(tuple);\n+                switch (exprValue.kind()) {\n+                    case INTEGER_VALUE:\n+                        return doubleValue(Math.log(exprValue.numberValue().intValue()));\n+                    case DOUBLE_VALUE:\n+                        return doubleValue(Math.log(exprValue.numberValue().doubleValue()));\n+                    default:\n+                        throw new RuntimeException(\"unsupported log operand: \" + exprValue.kind());\n+                }\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"log(%s)\", expr);\n+            }\n+        };\n+    }\n+\n+    public static Expression cast(Expression expr) {\n+        return new Expression() {\n+            @Override\n+            public ExprValue valueOf(BindingTuple tuple) {\n+                return expr.valueOf(tuple);\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"cast(%s)\", expr);\n+            }\n+        };\n+    }\n+\n+    private static ExprValue arithmetic(ArithmeticOperation op, ExprValue v1, ExprValue v2) {\n+        if (v1.kind() != v2.kind()) {\n+            throw new RuntimeException(\n+                    String.format(\"operation with different type is unsupported: %s(%s, %s)\", op.name(), v1.kind(),\n+                                  v2.kind()));\n+        } else {\n+            switch (v1.kind()) {\n+                case DOUBLE_VALUE:\n+                    return ExprValueFactory.doubleValue(\n+                            op.doubleFunc.apply(v1.numberValue().doubleValue(), v2.numberValue().doubleValue()));\n+                case INTEGER_VALUE:\n+                    return ExprValueFactory\n+                            .integerValue(\n+                                    op.integerFunc.apply(v1.numberValue().intValue(), v2.numberValue().intValue()));\n+                default:\n+                    throw new RuntimeException(String.format(\"unsupported operation: %s(%s, %s)\", op.name(), v1.kind(),\n+                                                             v2.kind()));\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNDQ2OQ=="}, "originalCommit": {"oid": "58c195ee1b5c3d3234a6076448dad9067632155c"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2155, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}