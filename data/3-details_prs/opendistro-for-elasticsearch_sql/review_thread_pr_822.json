{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjczMTg5", "number": 822, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMzowMVrOE41luA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyMjo0MVrOE41wrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMzNzIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/RelationSubquery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxMzowMVrOHy_u8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowMjozMlrOHzBGdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTA1OA==", "bodyText": "Since alias is not optional in ANTLR grammar, is this check necessary?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/822#discussion_r523235058", "createdAt": "2020-11-13T21:13:01Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/RelationSubquery.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ast.tree;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import java.util.Locale;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Logical plan node of RelationSubquery.\n+ */\n+@AllArgsConstructor\n+@EqualsAndHashCode(callSuper = false)\n+@RequiredArgsConstructor\n+@ToString\n+public class RelationSubquery extends UnresolvedPlan {\n+  private UnresolvedPlan query;\n+  private String alias;\n+\n+  /**\n+   * Take subquery alias as table name.\n+   */\n+  public String getAliasAsTableName() {\n+    if (alias == null) {\n+      throw new SemanticCheckException(\n+          String.format(Locale.ROOT, \"missing table alias for subquery %s\", toString()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "348b054a2321789a2fb05df98a2f26f026ffe0d9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODI5NA==", "bodyText": "+1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/822#discussion_r523248294", "createdAt": "2020-11-13T21:44:33Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/RelationSubquery.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ast.tree;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import java.util.Locale;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Logical plan node of RelationSubquery.\n+ */\n+@AllArgsConstructor\n+@EqualsAndHashCode(callSuper = false)\n+@RequiredArgsConstructor\n+@ToString\n+public class RelationSubquery extends UnresolvedPlan {\n+  private UnresolvedPlan query;\n+  private String alias;\n+\n+  /**\n+   * Take subquery alias as table name.\n+   */\n+  public String getAliasAsTableName() {\n+    if (alias == null) {\n+      throw new SemanticCheckException(\n+          String.format(Locale.ROOT, \"missing table alias for subquery %s\", toString()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTA1OA=="}, "originalCommit": {"oid": "348b054a2321789a2fb05df98a2f26f026ffe0d9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1NzQ2Mw==", "bodyText": "forgot to remove this after changing the antlr grammar. Will remove it, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/822#discussion_r523257463", "createdAt": "2020-11-13T22:02:32Z", "author": {"login": "chloe-zh"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/tree/RelationSubquery.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ast.tree;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ast.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import java.util.Locale;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Logical plan node of RelationSubquery.\n+ */\n+@AllArgsConstructor\n+@EqualsAndHashCode(callSuper = false)\n+@RequiredArgsConstructor\n+@ToString\n+public class RelationSubquery extends UnresolvedPlan {\n+  private UnresolvedPlan query;\n+  private String alias;\n+\n+  /**\n+   * Take subquery alias as table name.\n+   */\n+  public String getAliasAsTableName() {\n+    if (alias == null) {\n+      throw new SemanticCheckException(\n+          String.format(Locale.ROOT, \"missing table alias for subquery %s\", toString()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTA1OA=="}, "originalCommit": {"oid": "348b054a2321789a2fb05df98a2f26f026ffe0d9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM0NTg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/analysis/Analyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNjoxMFrOHy_0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowMTowMVrOH0RdjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNjM5OQ==", "bodyText": "Since we can support subquery now, do we need to pop up context somewhere?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/822#discussion_r523236399", "createdAt": "2020-11-13T21:16:10Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/analysis/Analyzer.java", "diffHunk": "@@ -118,6 +119,17 @@ public LogicalPlan visitRelation(Relation node, AnalysisContext context) {\n     return new LogicalRelation(node.getTableName());\n   }\n \n+  @Override\n+  public LogicalPlan visitRelationSubquery(RelationSubquery node, AnalysisContext context) {\n+    context.push();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "348b054a2321789a2fb05df98a2f26f026ffe0d9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3NDA5Mg==", "bodyText": "Just took another look, so context is pushed first when visit RelationSubquery, should we do analyzer recursion before this? In this way, symbol defined by outer won't be accessible to inner, ex. select ... from (select ... from B) as A, is A accessible when visit subquery B?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/822#discussion_r524574092", "createdAt": "2020-11-16T21:01:01Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/analysis/Analyzer.java", "diffHunk": "@@ -118,6 +119,17 @@ public LogicalPlan visitRelation(Relation node, AnalysisContext context) {\n     return new LogicalRelation(node.getTableName());\n   }\n \n+  @Override\n+  public LogicalPlan visitRelationSubquery(RelationSubquery node, AnalysisContext context) {\n+    context.push();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNjM5OQ=="}, "originalCommit": {"oid": "348b054a2321789a2fb05df98a2f26f026ffe0d9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM2NTI2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyMjo0MVrOHy__Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToyMjo0MVrOHy__Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzOTI2Mw==", "bodyText": "Is this visit necessary?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/822#discussion_r523239263", "createdAt": "2020-11-13T21:22:41Z", "author": {"login": "dai-chen"}, "path": "sql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/context/QuerySpecification.java", "diffHunk": "@@ -170,9 +171,10 @@ public QuerySpecificationCollector(String queryString) {\n     }\n \n     @Override\n-    public Void visitQuerySpecification(QuerySpecificationContext ctx) {\n-      // TODO: avoid collect sub-query\n-      return super.visitQuerySpecification(ctx);\n+    public Void visitSubqueryAsRelation(SubqueryAsRelationContext ctx) {\n+      // skip collecting subquery for current layer\n+      visit(ctx.alias());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "348b054a2321789a2fb05df98a2f26f026ffe0d9"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1910, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}