{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NzMzNTM1", "number": 635, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyMDoxNlrOETywhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyODoxNlrOETy7fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTkwMDIzOnYy", "diffSide": "RIGHT", "path": "docs/user/index.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyMDoxNlrOG5uoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1Njo1OFrOG5zjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NTk3Ng==", "bodyText": "Duplicate?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463185976", "createdAt": "2020-07-30T18:20:16Z", "author": {"login": "dai-chen"}, "path": "docs/user/index.rst", "diffHunk": "@@ -22,6 +22,8 @@ Open Distro for Elasticsearch SQL enables you to extract insights out of Elastic\n   - `Identifiers <general/identifiers.rst>`_\n   - `Data Types <general/datatype.rst>`_\n \n+  - `Data Types <general/datatype.rst>`_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NjYzMQ==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463266631", "createdAt": "2020-07-30T20:56:58Z", "author": {"login": "penghuo"}, "path": "docs/user/index.rst", "diffHunk": "@@ -22,6 +22,8 @@ Open Distro for Elasticsearch SQL enables you to extract insights out of Elastic\n   - `Identifiers <general/identifiers.rst>`_\n   - `Data Types <general/datatype.rst>`_\n \n+  - `Data Types <general/datatype.rst>`_", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NTk3Ng=="}, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTkwNTc0OnYy", "diffSide": "RIGHT", "path": "docs/user/dql/expressions.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyMTo1NFrOG5urgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo1ODowMlrOG5zlYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NjgxNg==", "bodyText": "np: should be :: here and below?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463186816", "createdAt": "2020-07-30T18:21:54Z", "author": {"login": "dai-chen"}, "path": "docs/user/dql/expressions.rst", "diffHunk": "@@ -92,6 +92,83 @@ Here is an example for different type of arithmetic expressions::\n     | 3       | 2           | 2           |\n     +---------+-------------+-------------+\n \n+Comparison Operators\n+==================================\n+\n+Description\n+-----------\n+\n+Comparison operators are used to compare values. The MISSING and NULL value comparison has following the rule. MISSING value only equal to MISSING value and less than all the other values. NULL value equals to NULL value, large than MISSING value, but less than all the other values.\n+\n+Operators\n+`````````\n+\n++----------------+--------------------------------+\n+| name           | description                    |\n++----------------+--------------------------------+\n+| >              | Greater than operator          |\n++----------------+--------------------------------+\n+| >=             | Greater than or equal operator |\n++----------------+--------------------------------+\n+| <              | Less than operator             |\n++----------------+--------------------------------+\n+| !=             | Not equal operator             |\n++----------------+--------------------------------+\n+| <=             | Less than or equal operator    |\n++----------------+--------------------------------+\n+| =              | Equal operator                 |\n++----------------+--------------------------------+\n+| LIKE           | Simple pattern matching        |\n++----------------+--------------------------------+\n+| IS NULL        | NULL value test                |\n++----------------+--------------------------------+\n+| IS NOT NULL    | NOT NULL value test            |\n++----------------+--------------------------------+\n+| IS MISSING     | MISSING value test             |\n++----------------+--------------------------------+\n+| IS NOT MISSING | NOT MISSING value test         |\n++----------------+--------------------------------+\n+\n+\n+Basic Comparison Operator\n+-------------------------\n+\n+Here is an example for different type of comparison operators::::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NzE3MQ==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463267171", "createdAt": "2020-07-30T20:58:02Z", "author": {"login": "penghuo"}, "path": "docs/user/dql/expressions.rst", "diffHunk": "@@ -92,6 +92,83 @@ Here is an example for different type of arithmetic expressions::\n     | 3       | 2           | 2           |\n     +---------+-------------+-------------+\n \n+Comparison Operators\n+==================================\n+\n+Description\n+-----------\n+\n+Comparison operators are used to compare values. The MISSING and NULL value comparison has following the rule. MISSING value only equal to MISSING value and less than all the other values. NULL value equals to NULL value, large than MISSING value, but less than all the other values.\n+\n+Operators\n+`````````\n+\n++----------------+--------------------------------+\n+| name           | description                    |\n++----------------+--------------------------------+\n+| >              | Greater than operator          |\n++----------------+--------------------------------+\n+| >=             | Greater than or equal operator |\n++----------------+--------------------------------+\n+| <              | Less than operator             |\n++----------------+--------------------------------+\n+| !=             | Not equal operator             |\n++----------------+--------------------------------+\n+| <=             | Less than or equal operator    |\n++----------------+--------------------------------+\n+| =              | Equal operator                 |\n++----------------+--------------------------------+\n+| LIKE           | Simple pattern matching        |\n++----------------+--------------------------------+\n+| IS NULL        | NULL value test                |\n++----------------+--------------------------------+\n+| IS NOT NULL    | NOT NULL value test            |\n++----------------+--------------------------------+\n+| IS MISSING     | MISSING value test             |\n++----------------+--------------------------------+\n+| IS NOT MISSING | NOT MISSING value test         |\n++----------------+--------------------------------+\n+\n+\n+Basic Comparison Operator\n+-------------------------\n+\n+Here is an example for different type of comparison operators::::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NjgxNg=="}, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTkyODI5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyODoxNlrOG5u5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MDowNFrOG6NaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MDM3MA==", "bodyText": "So 1 < NULL returns FALSE now?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463190370", "createdAt": "2020-07-30T18:28:16Z", "author": {"login": "dai-chen"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperatorTest.java", "diffHunk": "@@ -458,46 +458,46 @@ public void test_less_null() {\n     FunctionExpression less = dsl.less(DSL.literal(1),\n         DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER));\n     assertEquals(BOOLEAN, less.type());\n-    assertEquals(LITERAL_NULL, less.valueOf(valueEnv()));\n+    assertEquals(LITERAL_FALSE, less.valueOf(valueEnv()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2ODA3Nw==", "bodyText": "This is the default order in our system.\nNULL equal to NULL\nNULL large than MISSING\nNULL less than all others.\nIn Order By, the user can also specify the order of NULL and MISSING.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463268077", "createdAt": "2020-07-30T20:59:42Z", "author": {"login": "penghuo"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperatorTest.java", "diffHunk": "@@ -458,46 +458,46 @@ public void test_less_null() {\n     FunctionExpression less = dsl.less(DSL.literal(1),\n         DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER));\n     assertEquals(BOOLEAN, less.type());\n-    assertEquals(LITERAL_NULL, less.valueOf(valueEnv()));\n+    assertEquals(LITERAL_FALSE, less.valueOf(valueEnv()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MDM3MA=="}, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDMyNw==", "bodyText": "Got your point, change the logic, follow the MySQL way now.\nhttps://dev.mysql.com/doc/refman/8.0/en/working-with-null.html", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/635#discussion_r463690327", "createdAt": "2020-07-31T15:50:04Z", "author": {"login": "penghuo"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperatorTest.java", "diffHunk": "@@ -458,46 +458,46 @@ public void test_less_null() {\n     FunctionExpression less = dsl.less(DSL.literal(1),\n         DSL.ref(INT_TYPE_NULL_VALUE_FIELD, INTEGER));\n     assertEquals(BOOLEAN, less.type());\n-    assertEquals(LITERAL_NULL, less.valueOf(valueEnv()));\n+    assertEquals(LITERAL_FALSE, less.valueOf(valueEnv()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MDM3MA=="}, "originalCommit": {"oid": "c5608ddbe84d7861c9c365c5a66c46cdd4458dff"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1971, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}