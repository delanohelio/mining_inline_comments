{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2ODcwNjQw", "number": 854, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTowNjo1OFrOE9ZFng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTowNjo1OFrOE9ZFng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODA5NjMwOnYy", "diffSide": "RIGHT", "path": "protocol/src/test/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/JdbcResponseFormatterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTowNjo1OFrOH6D3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDoxNzowNFrOH6HnfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0MjgwNw==", "bodyText": "How to handle the missing value?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/854#discussion_r530642807", "createdAt": "2020-11-25T21:06:58Z", "author": {"login": "penghuo"}, "path": "protocol/src/test/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/JdbcResponseFormatterTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.tupleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.ARRAY;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRUCT;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static com.amazon.opendistroforelasticsearch.sql.executor.ExecutionEngine.Schema;\n+import static com.amazon.opendistroforelasticsearch.sql.executor.ExecutionEngine.Schema.Column;\n+import static com.amazon.opendistroforelasticsearch.sql.protocol.response.format.JsonResponseFormatter.Style.COMPACT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.antlr.SyntaxCheckException;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.JsonParser;\n+import org.junit.jupiter.api.Test;\n+\n+class JdbcResponseFormatterTest {\n+\n+  private final JdbcResponseFormatter formatter = new JdbcResponseFormatter(COMPACT);\n+\n+  @Test\n+  void format_response() {\n+    QueryResult response = new QueryResult(\n+        new Schema(ImmutableList.of(\n+            new Column(\"name\", \"name\", STRING),\n+            new Column(\"address1\", \"address1\", ES_TEXT),\n+            new Column(\"address2\", \"address2\", ES_TEXT_KEYWORD),\n+            new Column(\"location\", \"location\", STRUCT),\n+            new Column(\"employer\", \"employer\", ARRAY),\n+            new Column(\"age\", \"age\", INTEGER))),\n+        ImmutableList.of(\n+            tupleValue(ImmutableMap.of(\"name\", \"John\", \"age\", 20))));\n+\n+    assertJsonEquals(\n+        \"{\"\n+            + \"\\\"schema\\\":[\"\n+            + \"{\\\"name\\\":\\\"name\\\",\\\"alias\\\":\\\"name\\\",\\\"type\\\":\\\"keyword\\\"},\"\n+            + \"{\\\"name\\\":\\\"address1\\\",\\\"alias\\\":\\\"address1\\\",\\\"type\\\":\\\"text\\\"},\"\n+            + \"{\\\"name\\\":\\\"address2\\\",\\\"alias\\\":\\\"address2\\\",\\\"type\\\":\\\"text\\\"},\"\n+            + \"{\\\"name\\\":\\\"location\\\",\\\"alias\\\":\\\"location\\\",\\\"type\\\":\\\"object\\\"},\"\n+            + \"{\\\"name\\\":\\\"employer\\\",\\\"alias\\\":\\\"employer\\\",\\\"type\\\":\\\"nested\\\"},\"\n+            + \"{\\\"name\\\":\\\"age\\\",\\\"alias\\\":\\\"age\\\",\\\"type\\\":\\\"integer\\\"}\"\n+            + \"],\"\n+            + \"\\\"datarows\\\":[[\\\"John\\\",20]],\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48a5443f131e40ce88d9550633bb2ee338ab864"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MDA2MQ==", "bodyText": "I missed other columns here. Will add and check other formatter's UT. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/854#discussion_r530670061", "createdAt": "2020-11-25T22:16:39Z", "author": {"login": "dai-chen"}, "path": "protocol/src/test/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/JdbcResponseFormatterTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.tupleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.ARRAY;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRUCT;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static com.amazon.opendistroforelasticsearch.sql.executor.ExecutionEngine.Schema;\n+import static com.amazon.opendistroforelasticsearch.sql.executor.ExecutionEngine.Schema.Column;\n+import static com.amazon.opendistroforelasticsearch.sql.protocol.response.format.JsonResponseFormatter.Style.COMPACT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.antlr.SyntaxCheckException;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.JsonParser;\n+import org.junit.jupiter.api.Test;\n+\n+class JdbcResponseFormatterTest {\n+\n+  private final JdbcResponseFormatter formatter = new JdbcResponseFormatter(COMPACT);\n+\n+  @Test\n+  void format_response() {\n+    QueryResult response = new QueryResult(\n+        new Schema(ImmutableList.of(\n+            new Column(\"name\", \"name\", STRING),\n+            new Column(\"address1\", \"address1\", ES_TEXT),\n+            new Column(\"address2\", \"address2\", ES_TEXT_KEYWORD),\n+            new Column(\"location\", \"location\", STRUCT),\n+            new Column(\"employer\", \"employer\", ARRAY),\n+            new Column(\"age\", \"age\", INTEGER))),\n+        ImmutableList.of(\n+            tupleValue(ImmutableMap.of(\"name\", \"John\", \"age\", 20))));\n+\n+    assertJsonEquals(\n+        \"{\"\n+            + \"\\\"schema\\\":[\"\n+            + \"{\\\"name\\\":\\\"name\\\",\\\"alias\\\":\\\"name\\\",\\\"type\\\":\\\"keyword\\\"},\"\n+            + \"{\\\"name\\\":\\\"address1\\\",\\\"alias\\\":\\\"address1\\\",\\\"type\\\":\\\"text\\\"},\"\n+            + \"{\\\"name\\\":\\\"address2\\\",\\\"alias\\\":\\\"address2\\\",\\\"type\\\":\\\"text\\\"},\"\n+            + \"{\\\"name\\\":\\\"location\\\",\\\"alias\\\":\\\"location\\\",\\\"type\\\":\\\"object\\\"},\"\n+            + \"{\\\"name\\\":\\\"employer\\\",\\\"alias\\\":\\\"employer\\\",\\\"type\\\":\\\"nested\\\"},\"\n+            + \"{\\\"name\\\":\\\"age\\\",\\\"alias\\\":\\\"age\\\",\\\"type\\\":\\\"integer\\\"}\"\n+            + \"],\"\n+            + \"\\\"datarows\\\":[[\\\"John\\\",20]],\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0MjgwNw=="}, "originalCommit": {"oid": "b48a5443f131e40ce88d9550633bb2ee338ab864"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwNDI1Mw==", "bodyText": "Fixed this mismatch and added another case for missing and null value.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/854#discussion_r530704253", "createdAt": "2020-11-26T00:17:04Z", "author": {"login": "dai-chen"}, "path": "protocol/src/test/java/com/amazon/opendistroforelasticsearch/sql/protocol/response/format/JdbcResponseFormatterTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.protocol.response.format;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.tupleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.ARRAY;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.STRUCT;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static com.amazon.opendistroforelasticsearch.sql.executor.ExecutionEngine.Schema;\n+import static com.amazon.opendistroforelasticsearch.sql.executor.ExecutionEngine.Schema.Column;\n+import static com.amazon.opendistroforelasticsearch.sql.protocol.response.format.JsonResponseFormatter.Style.COMPACT;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.antlr.SyntaxCheckException;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import com.amazon.opendistroforelasticsearch.sql.protocol.response.QueryResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.JsonParser;\n+import org.junit.jupiter.api.Test;\n+\n+class JdbcResponseFormatterTest {\n+\n+  private final JdbcResponseFormatter formatter = new JdbcResponseFormatter(COMPACT);\n+\n+  @Test\n+  void format_response() {\n+    QueryResult response = new QueryResult(\n+        new Schema(ImmutableList.of(\n+            new Column(\"name\", \"name\", STRING),\n+            new Column(\"address1\", \"address1\", ES_TEXT),\n+            new Column(\"address2\", \"address2\", ES_TEXT_KEYWORD),\n+            new Column(\"location\", \"location\", STRUCT),\n+            new Column(\"employer\", \"employer\", ARRAY),\n+            new Column(\"age\", \"age\", INTEGER))),\n+        ImmutableList.of(\n+            tupleValue(ImmutableMap.of(\"name\", \"John\", \"age\", 20))));\n+\n+    assertJsonEquals(\n+        \"{\"\n+            + \"\\\"schema\\\":[\"\n+            + \"{\\\"name\\\":\\\"name\\\",\\\"alias\\\":\\\"name\\\",\\\"type\\\":\\\"keyword\\\"},\"\n+            + \"{\\\"name\\\":\\\"address1\\\",\\\"alias\\\":\\\"address1\\\",\\\"type\\\":\\\"text\\\"},\"\n+            + \"{\\\"name\\\":\\\"address2\\\",\\\"alias\\\":\\\"address2\\\",\\\"type\\\":\\\"text\\\"},\"\n+            + \"{\\\"name\\\":\\\"location\\\",\\\"alias\\\":\\\"location\\\",\\\"type\\\":\\\"object\\\"},\"\n+            + \"{\\\"name\\\":\\\"employer\\\",\\\"alias\\\":\\\"employer\\\",\\\"type\\\":\\\"nested\\\"},\"\n+            + \"{\\\"name\\\":\\\"age\\\",\\\"alias\\\":\\\"age\\\",\\\"type\\\":\\\"integer\\\"}\"\n+            + \"],\"\n+            + \"\\\"datarows\\\":[[\\\"John\\\",20]],\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0MjgwNw=="}, "originalCommit": {"oid": "b48a5443f131e40ce88d9550633bb2ee338ab864"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1925, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}