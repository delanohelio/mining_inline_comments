{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzU3MDEx", "number": 534, "title": "Support LIKE operator", "bodyText": "Issue #, if available:\nDescription of changes:\nSyntax: string like pattern\nThe pattern supports string literal with percent(%) character for wildcard and underscore(_) character for single character. Here are some examples:\nfoobar like 'foobar%' -> true\nfoobar like '%bar' -> true\nfoobar like '%BAR' -> false\nfoobar like 'fooba_' -> true\nfoobar like 'foobar_' -> false\nfoobar like '%ba_' -> true\nFor null values and missing values in LIKE operation, the results follows AsterixDB standard:\n\n\n\nA\nB\nA like B\n\n\n\n\nNULL\nNULL\nNULL\n\n\nNULL\nMISSING\nMISSING\n\n\nMISSING\nNULL\nMISSING\n\n\nMISSING\nMISSING\nMISSING\n\n\n\nReference: CrateDB\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-06-26T19:44:58Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534", "merged": true, "mergeCommit": {"oid": "05d3699205ce1e12fd8c92e65f901d2882101e09"}, "closed": true, "closedAt": "2020-07-08T17:42:28Z", "author": {"login": "chloe-zh"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvIghQgH2gAyNDQwNzU3MDExOjAzNmM1OTYyMjI5ZDg3NGNhOGQ2NjI4YjM1YjAyNDJmYmY4YWIxNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcy-COBAFqTQ0NDk4OTg4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "036c5962229d874ca8d6628b35b0242fbf8ab177", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/036c5962229d874ca8d6628b35b0242fbf8ab177", "committedDate": "2020-06-26T19:35:17Z", "message": "Added like operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c70847b187adee79cb4865687f54aa3e70b490f7", "committedDate": "2020-06-26T20:02:15Z", "message": "Added integration test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTgyNDQz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#pullrequestreview-438582443", "createdAt": "2020-06-26T20:41:28Z", "commit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTg1MzEz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#pullrequestreview-438585313", "createdAt": "2020-06-26T20:46:47Z", "commit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0Njo0N1rOGpuO2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0Njo0N1rOGpuO2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMjI2NA==", "bodyText": "I checked a few methods in JDK, such as Pattern.matches. I think it's more intuitive to put pattern as first argument for this util method as well as like operator argument?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446402264", "createdAt": "2020-06-26T20:46:47Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -171,4 +171,69 @@ public String toString() {\n    */\n   public static final BiPredicate<ExprValue, ExprValue> COMPARE_WITH_NULL_OR_MISSING =\n       (left, right) -> left.isMissing() || right.isMissing() || left.isNull() || right.isNull();\n+\n+  /**\n+   * Wildcard pattern matcher util.\n+   * Percent (%) character for wildcard,\n+   * Underscore (_) character for a single character match.\n+   * @param pattern string pattern to match.\n+   * @return if text matches pattern returns true; else return false.\n+   */\n+  public static boolean matches(String text, String pattern) {\n+    return Pattern.compile(patternToRegex(pattern)).matcher(text).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTg4NTk1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#pullrequestreview-438588595", "createdAt": "2020-06-26T20:53:11Z", "commit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo1MzoxMVrOGpuY3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo1MzoxMVrOGpuY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDgyOQ==", "bodyText": "Just did a quick look and found this method is very similar to others, ex. compareValue, equalPredicate and binaryPredicate. The equalPredicate method signature looks most generic. I'm curious is there any chance to only keep or reuse a most generic function generator method.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r446404829", "createdAt": "2020-06-26T20:53:11Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java", "diffHunk": "@@ -475,4 +513,34 @@ public String toString() {\n       }\n     };\n   }\n+\n+  private static <T, R> FunctionBuilder likePattern(FunctionName functionName,\n+                                                    BiFunction<T, T, R> function,\n+                                                    Function<ExprValue, T> observer,\n+                                                    ExprType returnType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70847b187adee79cb4865687f54aa3e70b490f7"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33207138007e0e78d0d9c7fae04fac5979334ebe", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/33207138007e0e78d0d9c7fae04fac5979334ebe", "committedDate": "2020-06-26T21:04:33Z", "message": "Change the matches method argument order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37414675b781982e0f13e6a01ba196dcb719aa69", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/37414675b781982e0f13e6a01ba196dcb719aa69", "committedDate": "2020-06-29T18:58:41Z", "message": "generified building methods for function bundles and function builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82f9dc11477ae416e786b83fb5bec1950b4581c", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a82f9dc11477ae416e786b83fb5bec1950b4581c", "committedDate": "2020-06-29T18:58:58Z", "message": "Added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "314b0e06cf0acb8f5b06c85504b2cd85f507f477", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/314b0e06cf0acb8f5b06c85504b2cd85f507f477", "committedDate": "2020-06-29T19:05:52Z", "message": "Merge remote-tracking branch 'upstream/develop' into operator-like\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/DSL.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDY3MjA2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#pullrequestreview-439467206", "createdAt": "2020-06-29T20:15:36Z", "commit": {"oid": "314b0e06cf0acb8f5b06c85504b2cd85f507f477"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjE1NzEz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#pullrequestreview-440215713", "createdAt": "2020-06-30T17:01:17Z", "commit": {"oid": "314b0e06cf0acb8f5b06c85504b2cd85f507f477"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMToxN1rOGrGAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMToxN1rOGrGAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDM3Nw==", "bodyText": "could you seperate it from OperatorUtils in case is more focus on SQL regex to Java regex.\nby define the ESCAPE is defined in SQL language, how do we support it?\nis it possible to seperate the translation rule from translation logic.\nfor example,\nTranslationRule.Buidler.put(\"//%\", %\").put(\"%\", \".*\").build()\nThen, apply rule on the input REGEX.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#discussion_r447840377", "createdAt": "2020-06-30T17:01:17Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -171,4 +171,69 @@ public String toString() {\n    */\n   public static final BiPredicate<ExprValue, ExprValue> COMPARE_WITH_NULL_OR_MISSING =\n       (left, right) -> left.isMissing() || right.isMissing() || left.isNull() || right.isNull();\n+\n+  /**\n+   * Wildcard pattern matcher util.\n+   * Percent (%) character for wildcard,\n+   * Underscore (_) character for a single character match.\n+   * @param pattern string pattern to match.\n+   * @return if text matches pattern returns true; else return false.\n+   */\n+  public static boolean matches(String pattern, String text) {\n+    return Pattern.compile(patternToRegex(pattern)).matcher(text).matches();\n+  }\n+\n+  private static final char DEFAULT_ESCAPE = '\\\\';\n+\n+  private static String patternToRegex(String patternString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "314b0e06cf0acb8f5b06c85504b2cd85f507f477"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "075a260b5bda837cadfed837bc0d442fb64a84c8", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/075a260b5bda837cadfed837bc0d442fb64a84c8", "committedDate": "2020-07-08T15:23:53Z", "message": "Separate matches method from operator utils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c6d18d29d0c5ec3aacc967bf5e5c2cb1ec9597a", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6c6d18d29d0c5ec3aacc967bf5e5c2cb1ec9597a", "committedDate": "2020-07-08T15:33:55Z", "message": "Merge remote-tracking branch 'upstream/develop' into operator-like"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTg5ODg1", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/534#pullrequestreview-444989885", "createdAt": "2020-07-08T17:38:50Z", "commit": {"oid": "6c6d18d29d0c5ec3aacc967bf5e5c2cb1ec9597a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 702, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}