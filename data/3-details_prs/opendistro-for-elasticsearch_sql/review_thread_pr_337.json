{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNjk3Mjc2", "number": 337, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzozNTo1MlrODWs3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyMjoyN1rODW7Ztg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTMwMzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzozNTo1MlrOFbnHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzo0Nzo1OFrOFbnTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5Njc4MA==", "bodyText": "What if the data type is not LONG? Do we need to retrieve the data type from the schema rather than hard coding?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364496780", "createdAt": "2020-01-08T23:35:52Z", "author": {"login": "chloe-zh"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.domain.Delete;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.reindex.BulkByScrollResponse;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DeleteResultSet extends ResultSet {\n+    private Delete query;\n+    private Object queryResult;\n+\n+    private static final String DELETED = \"deleted_rows\";\n+\n+    public DeleteResultSet(Client client, Delete query, Object queryResult) {\n+        this.client = client;\n+        this.query = query;\n+        this.queryResult = queryResult;\n+        this.schema = new Schema(loadColumns());\n+        this.dataRows = new DataRows(loadRows());\n+    }\n+\n+    private List<Schema.Column> loadColumns() {\n+        return Collections.singletonList(new Schema.Column(DELETED, null, Schema.Type.LONG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5OTkxOA==", "bodyText": "It will always be being long. We can change this if there is a breaking change for future ODFE release.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364499918", "createdAt": "2020-01-08T23:47:58Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.domain.Delete;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.reindex.BulkByScrollResponse;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DeleteResultSet extends ResultSet {\n+    private Delete query;\n+    private Object queryResult;\n+\n+    private static final String DELETED = \"deleted_rows\";\n+\n+    public DeleteResultSet(Client client, Delete query, Object queryResult) {\n+        this.client = client;\n+        this.query = query;\n+        this.queryResult = queryResult;\n+        this.schema = new Schema(loadColumns());\n+        this.dataRows = new DataRows(loadRows());\n+    }\n+\n+    private List<Schema.Column> loadColumns() {\n+        return Collections.singletonList(new Schema.Column(DELETED, null, Schema.Type.LONG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5Njc4MA=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTM1NDgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDowNzo0OVrOFbnnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODoyMzoyM1rOFb_NKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNDkwMw==", "bodyText": "Should assertion for total and size be equalTo(totalHits)? And any reason not to use total or size as deleted rows directly?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364504903", "createdAt": "2020-01-09T00:07:49Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNzM0OQ==", "bodyText": "Yes, we could do it. I made my changes based on the solution proposed #131 .  Based on your recommendation should the response look like the following:\n{\n  \"schema\": [],\n  \"total\": <number of deleted rows> ,\n  \"datarows\": [],\n  \"size\": <number of deleted rows> >,\n  \"status\": 200\n}\n\nShould we get rid of schema and datarows altogether?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364507349", "createdAt": "2020-01-09T00:17:29Z", "author": {"login": "abbashus"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNDkwMw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNDg3NQ==", "bodyText": "Yeah, maybe. Or just leave them empty if any issue.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364514875", "createdAt": "2020-01-09T00:49:33Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNDkwMw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NTIyOA==", "bodyText": "I realized , we need the schema with deleted_rows column, because when converting to csv we don't emit the total and size values. Since we plan to derive the csv output directly from the common representation (currently used for jdbc format), in absence of deleted_rows column , the csv output would be empty.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364885228", "createdAt": "2020-01-09T18:08:40Z", "author": {"login": "abbashus"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNDkwMw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5MTQzMw==", "bodyText": "Sure, let's follow your current format. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364891433", "createdAt": "2020-01-09T18:23:23Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNDkwMw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTM2ODE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDoxNjoxNVrOFbnvZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDozNzozNVrOFcjPNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNjk4Mw==", "bodyText": "Probably not necessary for this data class. But it would be better to add a UT for test coverage.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364506983", "createdAt": "2020-01-09T00:16:15Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.domain.Delete;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.reindex.BulkByScrollResponse;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DeleteResultSet extends ResultSet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNzU0MQ==", "bodyText": "Sure, will add unit tests.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364507541", "createdAt": "2020-01-09T00:18:22Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.domain.Delete;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.reindex.BulkByScrollResponse;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DeleteResultSet extends ResultSet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNjk4Mw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNDU3Mg==", "bodyText": "Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364514572", "createdAt": "2020-01-09T00:48:09Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.domain.Delete;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.reindex.BulkByScrollResponse;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DeleteResultSet extends ResultSet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNjk4Mw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MTc4Mg==", "bodyText": "Added unit tests.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r365481782", "createdAt": "2020-01-11T00:37:35Z", "author": {"login": "abbashus"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/DeleteResultSet.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.domain.Delete;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.reindex.BulkByScrollResponse;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DeleteResultSet extends ResultSet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwNjk4Mw=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzY4NTAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyMjoyN1rOFb9nzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo1NToxNVrOFb-fGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2NTQ4Ng==", "bodyText": "Perhaps not necessary- but I think it could be beneficial to add 1-2 more variety of queries to test with", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364865486", "createdAt": "2020-01-09T17:22:27Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));\n+\n+        // The documents are not deleted immediately, causing the next search call to return all results.\n+        // To prevent flakiness, the minimum value of 2000 msec works fine.\n+        Thread.sleep(2000);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(0));\n+\n+        // Multiple invocation of delete query should return deleted == 0\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(0));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3OTY0Mw==", "bodyText": "Can you provide examples of what you kind of variety you are expecting.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/337#discussion_r364879643", "createdAt": "2020-01-09T17:55:15Z", "author": {"login": "abbashus"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/DeleteIT.java", "diffHunk": "@@ -77,12 +68,76 @@ public void deleteWithConditionTest() throws IOException, InterruptedException {\n         // To prevent flakiness, the minimum value of 2000 msec works fine.\n         Thread.sleep(2000);\n \n-        selectQuery = String.format(\n-            Locale.ROOT,\n-            \"SELECT * FROM %s/phrase\",\n+        selectQuery = StringUtils.format(\"SELECT * FROM %s/phrase\", TestsConstants.TEST_INDEX_PHRASE);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(5));\n+    }\n+\n+    @Test\n+    public void deleteAllWithJdbcFormat() throws IOException, InterruptedException {\n+        String selectQuery = StringUtils.format(\"SELECT * FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        JSONObject response = executeRequest(makeRequest(selectQuery));\n+        int totalHits = getTotalHits(response);\n+\n+        String deleteQuery = StringUtils.format(\"DELETE FROM %s/account\", TestsConstants.TEST_INDEX_ACCOUNT);\n+\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        System.out.println(response);\n+        assertThat(response.query(\"/schema/0/name\"), equalTo(\"deleted_rows\"));\n+        assertThat(response.query(\"/schema/0/type\"), equalTo(\"long\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(totalHits));\n+        assertThat(response.query(\"/total\"), equalTo(1));\n+        assertThat(response.query(\"/status\"), equalTo(200));\n+        assertThat(response.query(\"/size\"), equalTo(1));\n+\n+        // The documents are not deleted immediately, causing the next search call to return all results.\n+        // To prevent flakiness, the minimum value of 2000 msec works fine.\n+        Thread.sleep(2000);\n+\n+        response = executeRequest(makeRequest(selectQuery));\n+        assertThat(getTotalHits(response), equalTo(0));\n+\n+        // Multiple invocation of delete query should return deleted == 0\n+        response = new JSONObject(executeQuery(deleteQuery, \"jdbc\"));\n+        assertThat(response.query(\"/datarows/0/0\"), equalTo(0));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2NTQ4Ng=="}, "originalCommit": {"oid": "47fc33aa570e5e54f1e0c4a1ec2d512a2def240a"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2145, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}