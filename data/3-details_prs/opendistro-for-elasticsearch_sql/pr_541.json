{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTYzNjc3", "number": 541, "title": "Support aggregations min, max", "bodyText": "Issue #, if available:\nDescription of changes:\n\nAdded max and min aggregations and corresponding tests\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-06-30T16:55:41Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541", "merged": true, "mergeCommit": {"oid": "a0e9b5c3596eb76bff38ec628823a24d30722082"}, "closed": true, "closedAt": "2020-09-30T20:49:15Z", "author": {"login": "chloe-zh"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwMFzngH2gAyNDQyMTYzNjc3OjJhODJkM2E2ZWRiMDE4MDgyOGEwNDkxM2I5YmM3MDYyMWYyY2E4NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdODGijAFqTQ5OTgwMDE2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2a82d3a6edb0180828a04913b9bc70621f2ca849", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2a82d3a6edb0180828a04913b9bc70621f2ca849", "committedDate": "2020-06-30T02:19:39Z", "message": "Support aggregations min, max"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjIyNTkz", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#pullrequestreview-440222593", "createdAt": "2020-06-30T17:10:10Z", "commit": {"oid": "2a82d3a6edb0180828a04913b9bc70621f2ca849"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMDoxMFrOGrGX9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMDoxMFrOGrGX9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NjM4OQ==", "bodyText": "So if any field is NULL, then null is returned as result? Are we following some spec here? I checked MySQL and ANSI SQL, it seems \"All aggregate functions except COUNT(*) will ignore NULL values when computing their results.\" Unless all fields are null, result won't be null eventually.\nFor example, the result is 2 for the following test data and query.\nCREATE TABLE Test(age INT);\n\nINSERT INTO Test VALUES(1);\nINSERT INTO Test VALUES(null);\nINSERT INTO Test VALUES(2);\n\nSELECT MAX(age) FROM Test", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r447846389", "createdAt": "2020-06-30T17:10:10Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (value.isNull() || value.isMissing()) {\n+      state.isNullResult = true;\n+    } else {\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected class MinState implements AggregationState {\n+    private final ExprType type;\n+    private ExprValue minResult;\n+    private boolean isNullResult;\n+\n+    public MinState(ExprType type) {\n+      this.type = type;\n+      minResult = doubleValue(Double.MAX_VALUE);\n+      isNullResult = false;\n+    }\n+\n+    public void min(ExprValue value) {\n+      switch (type) {\n+        case INTEGER:\n+          minResult = integerValue(Math.min(getIntegerValue(minResult), getIntegerValue(value)));\n+          break;\n+        case LONG:\n+          minResult = longValue(Math.min(getLongValue(minResult), getLongValue(value)));\n+          break;\n+        case FLOAT:\n+          minResult = floatValue(Math.min(getFloatValue(minResult), getFloatValue(value)));\n+          break;\n+        case DOUBLE:\n+          minResult = doubleValue(Math.min(getDoubleValue(minResult), getDoubleValue(value)));\n+          break;\n+        default:\n+          throw new ExpressionEvaluationException(\n+              String.format(\"unexpected type [%s] in min aggregation\", type));\n+      }\n+    }\n+\n+    @Override\n+    public ExprValue result() {\n+      return isNullResult ? ExprNullValue.of() : minResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a82d3a6edb0180828a04913b9bc70621f2ca849"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "300619098fe15a176161331a34b00f94dc2f26b0", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/300619098fe15a176161331a34b00f94dc2f26b0", "committedDate": "2020-07-10T22:46:10Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a50826b20c11a2a4c88f8cb6167a5e26e25738", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/58a50826b20c11a2a4c88f8cb6167a5e26e25738", "committedDate": "2020-07-17T17:55:29Z", "message": "support string in max and min"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0828ef1abaa35a7244cb2fcce8beeadbc05eb28c", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0828ef1abaa35a7244cb2fcce8beeadbc05eb28c", "committedDate": "2020-07-17T18:04:17Z", "message": "Merge remote-tracking branch 'upstream/develop' into agg\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/SumAggregator.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AvgAggregatorTest.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/SumAggregatorTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/68556f8b7510421addcb94b68d898538d9387fcc", "committedDate": "2020-07-17T18:57:40Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODE2NTQ2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#pullrequestreview-452816546", "createdAt": "2020-07-21T20:47:06Z", "commit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NzowNlrOG1JKBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1NjoyNlrOG1JdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzczNQ==", "bodyText": "Can this isEmptyCollection be replaced by count == 0? Because I notice count already represents the count of non-null/missing value only. Same question for all other aggregators.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r458377735", "createdAt": "2020-07-21T20:47:06Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AvgAggregator.java", "diffHunk": "@@ -63,19 +62,19 @@ public String toString() {\n   /**\n    * Average State.\n    */\n-  protected class AvgState implements AggregationState {\n+  protected static class AvgState implements AggregationState {\n     private int count;\n     private double total;\n-    private boolean isNullResult = false;\n+    private boolean isEmptyCollection = true;\n \n-    public AvgState() {\n+    AvgState() {\n       this.count = 0;\n       this.total = 0d;\n     }\n \n     @Override\n     public ExprValue result() {\n-      return isNullResult ? ExprNullValue.of() : ExprValueUtils.doubleValue(total / count);\n+      return isEmptyCollection ? ExprNullValue.of() : ExprValueUtils.doubleValue(total / count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MjY2Ng==", "bodyText": "Just a thought: if we see more aggregate functions like MIN and MAX later (ex. window functions), probably we can consider using a single class for generalization. Because I notice only several lines different between MinAggregator and MaxAggregator.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r458382666", "createdAt": "2020-07-21T20:56:26Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68556f8b7510421addcb94b68d898538d9387fcc"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9796b096ec56491b670b9f24ba793e14c9180020", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9796b096ec56491b670b9f24ba793e14c9180020", "committedDate": "2020-07-31T21:11:56Z", "message": "Merge remote-tracking branch 'upstream/develop' into agg\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/BuiltinFunctionName.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb7af213c465f2018c1d9f93acc2c79e1b7360c", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0cb7af213c465f2018c1d9f93acc2c79e1b7360c", "committedDate": "2020-08-03T21:04:49Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff06f23f69e68248b8f6bec67f8f9e29afd3bad", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6ff06f23f69e68248b8f6bec67f8f9e29afd3bad", "committedDate": "2020-08-27T19:25:40Z", "message": "Merge remote-tracking branch 'upstream/develop' into agg\n\n# Conflicts:\n#\tinteg-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/StatsCommandIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f", "committedDate": "2020-08-27T20:26:52Z", "message": "added min/max support for date, datetime, time, timestamp types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTIwMzEx", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#pullrequestreview-477120311", "createdAt": "2020-08-27T22:13:25Z", "commit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxMzoyNVrOHIjDCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxOTo0MFrOHIjMAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNDg3Mw==", "bodyText": "np: could you add parentheses or split it into multi-line?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478724873", "createdAt": "2020-08-27T22:13:25Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;\n+      isEmptyCollection = true;\n+    }\n+\n+    public void min(ExprValue value) {\n+      minResult = minResult.isNull() ? value : minResult.compareTo(value) < 0 ? minResult : value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNjAyMA==", "bodyText": "Trying to understand why we need different initial values for minResult. Can we just use literal null?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478726020", "createdAt": "2020-08-27T22:16:28Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNzE3MQ==", "bodyText": "So isEmptyCollection is true only when minResult is not updated initially right? Could we remove this flag and just return minResult?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#discussion_r478727171", "createdAt": "2020-08-27T22:19:40Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/MinAggregator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.aggregation;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.LITERAL_NULL;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.floatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getDoubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getFloatValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.integerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.longValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.SHORT;\n+import static com.amazon.opendistroforelasticsearch.sql.utils.ExpressionUtils.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprNullValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.storage.bindingtuple.BindingTuple;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * The minimum aggregator aggregate the value evaluated by the expression.\n+ * If the expression evaluated result is NULL or MISSING, then the result is NULL.\n+ */\n+public class MinAggregator extends Aggregator<MinAggregator.MinState> {\n+\n+  public MinAggregator(List<Expression> arguments, ExprCoreType returnType) {\n+    super(BuiltinFunctionName.MIN.getName(), arguments, returnType);\n+  }\n+\n+\n+  @Override\n+  public MinState create() {\n+    return new MinState(returnType);\n+  }\n+\n+  @Override\n+  public MinState iterate(BindingTuple tuple, MinState state) {\n+    Expression expression = getArguments().get(0);\n+    ExprValue value = expression.valueOf(tuple);\n+    if (!(value.isNull() || value.isMissing())) {\n+      state.isEmptyCollection = false;\n+      state.min(value);\n+    }\n+    return state;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"min(%s)\", format(getArguments()));\n+  }\n+\n+  protected static class MinState implements AggregationState {\n+    private ExprValue minResult;\n+    private boolean isEmptyCollection;\n+\n+    MinState(ExprCoreType type) {\n+      minResult = isNumber(type) ? doubleValue(Double.MAX_VALUE) : LITERAL_NULL;\n+      isEmptyCollection = true;\n+    }\n+\n+    public void min(ExprValue value) {\n+      minResult = minResult.isNull() ? value : minResult.compareTo(value) < 0 ? minResult : value;\n+    }\n+\n+    @Override\n+    public ExprValue result() {\n+      return isEmptyCollection ? ExprNullValue.of() : minResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec824fc0edfe49bb885fcde6b9ab2f895fd4c9f"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb3d24b5e817df9c7446ab7d7390e6eeb99ff62", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/fcb3d24b5e817df9c7446ab7d7390e6eeb99ff62", "committedDate": "2020-08-28T18:33:53Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01d6d683da6674e7e61da68238a56a0b8da5ec7", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d01d6d683da6674e7e61da68238a56a0b8da5ec7", "committedDate": "2020-08-28T19:34:39Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2586b00153d8f1663ce5f76767932d49ed8aee3", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a2586b00153d8f1663ce5f76767932d49ed8aee3", "committedDate": "2020-09-24T00:28:37Z", "message": "Merge remote-tracking branch 'upstream/develop' into agg\n\n# Conflicts:\n#\tinteg-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/StatsCommandIT.java\n#\tsql/src/main/antlr/OpenDistroSQLParser.g4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccad2cc1257e0c0efb7e09be20846ff3d6560fa1", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ccad2cc1257e0c0efb7e09be20846ff3d6560fa1", "committedDate": "2020-09-24T00:40:30Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b0b43c8cc7bff59f8d73658b8af841d04c856d", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a3b0b43c8cc7bff59f8d73658b8af841d04c856d", "committedDate": "2020-09-24T00:43:45Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzIyOTQ2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#pullrequestreview-495722946", "createdAt": "2020-09-24T15:58:39Z", "commit": {"oid": "a3b0b43c8cc7bff59f8d73658b8af841d04c856d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ea7ad294ada58f1320d9094f95266c06829cbae", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4ea7ad294ada58f1320d9094f95266c06829cbae", "committedDate": "2020-09-24T18:52:20Z", "message": "add comparison tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec1423b86fd787c1cab4a4b7da44ef2ef9e662be", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ec1423b86fd787c1cab4a4b7da44ef2ef9e662be", "committedDate": "2020-09-28T20:51:03Z", "message": "Merge remote-tracking branch 'upstream/develop' into agg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa0af8ed7c66cfcb83115e83e759cbda27c479b", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2fa0af8ed7c66cfcb83115e83e759cbda27c479b", "committedDate": "2020-09-29T19:24:47Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de4f1461f1945b5c19320a6735377ca8e70d45e", "author": {"user": {"login": "chloe-zh", "name": "Chloe"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4de4f1461f1945b5c19320a6735377ca8e70d45e", "committedDate": "2020-09-30T20:09:49Z", "message": "added doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODAwMTY2", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/541#pullrequestreview-499800166", "createdAt": "2020-09-30T20:49:02Z", "commit": {"oid": "4de4f1461f1945b5c19320a6735377ca8e70d45e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 710, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}