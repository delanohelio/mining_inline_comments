{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTg4Nzgx", "number": 365, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTowMDo0NFrODeHosA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MDoyN1rODhw1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTA4OTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTowMDo0NFrOFnHDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOToxNzoyNFrOFnHfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NDI4OA==", "bodyText": "A reminder: the number operators do not always return DOUBLE, for example, abs(integer) should return INTEGER, and sign(...) should always return an integer type.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r376554288", "createdAt": "2020-02-07T19:00:44Z", "author": {"login": "chloe-zh"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -1023,4 +1015,31 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n                 );\n         }\n     }\n+\n+    public static Schema.Type getOrderByFieldType(Field field) {\n+        String functionName = ((ScriptMethodField) field).getFunctionName().toLowerCase();\n+        if (functionName.equals(\"cast\")) {\n+            String castType = ((SQLCastExpr) field.getExpression()).getDataType().getName();\n+            return getCastFunctionReturnType(castType);\n+        }\n+\n+        if (numberOperators.contains(functionName) || mathConstants.contains(functionName)\n+                || trigFunctions.contains(functionName) || binaryOperators.contains(functionName)) {\n+            return Schema.Type.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MTU5Mg==", "bodyText": "This is just for the ORDER BY clause- the scriptSortType will only return either STRING or NUMBER, so returning DOUBLE for every numeric field in the ORDER BY will not affect the field information of the fields in SELECT", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r376561592", "createdAt": "2020-02-07T19:17:24Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -1023,4 +1015,31 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n                 );\n         }\n     }\n+\n+    public static Schema.Type getOrderByFieldType(Field field) {\n+        String functionName = ((ScriptMethodField) field).getFunctionName().toLowerCase();\n+        if (functionName.equals(\"cast\")) {\n+            String castType = ((SQLCastExpr) field.getExpression()).getDataType().getName();\n+            return getCastFunctionReturnType(castType);\n+        }\n+\n+        if (numberOperators.contains(functionName) || mathConstants.contains(functionName)\n+                || trigFunctions.contains(functionName) || binaryOperators.contains(functionName)) {\n+            return Schema.Type.DOUBLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NDI4OA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzI4NTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjoyNzoxOVrOFnstYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjoyNzoxOVrOFnstYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE3MTI5OQ==", "bodyText": "Is it possible to avoid running performAnalysis two times by build another QueryPlanner around DefaultQueryAction?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377171299", "createdAt": "2020-02-10T16:27:19Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -48,11 +51,14 @@\n     private ResultSet resultSet;\n     private ErrorMessage error;\n     private List<ColumnNode> columnNodeList;\n+    private ColumnTypeProvider scriptColumnType = new ColumnTypeProvider();\n \n     public Protocol(Client client, QueryAction queryAction, Object queryResult, String formatType) {\n         if (queryAction instanceof QueryPlanQueryAction) {\n             this.columnNodeList =\n                     ((QueryPlanRequestBuilder) (((QueryPlanQueryAction) queryAction).explain())).outputColumns();\n+        } else if (queryAction instanceof DefaultQueryAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODExMzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoxMTowMlrOFobCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoxMTowMlrOFobCIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzMDI3Mw==", "bodyText": "np: remove first space", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377930273", "createdAt": "2020-02-11T22:11:02Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -325,7 +328,7 @@ private String getFieldName(Field field) {\n                 if (field.getExpression() instanceof SQLCaseExpr) {\n                     return Schema.Type.TEXT;\n                 }\n-                return SQLFunctions.getScriptFunctionReturnType(field);\n+                 return SQLFunctions.getScriptFunctionReturnType(fieldIndex, field, scriptColumnType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODEzODE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMDowNFrOFobRNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1NTo0MFrOFo4sMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDEzNA==", "bodyText": "In which case fieldIndex is -1?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377934134", "createdAt": "2020-02-11T22:20:04Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,28 +974,19 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, Field field, ColumnTypeProvider scriptColumnType) {\n+        Schema.Type returnType = null;\n+        if (scriptColumnType != null && fieldIndex != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MDIyNQ==", "bodyText": "if fieldName is not found in the fieldNameList", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377950225", "createdAt": "2020-02-11T22:58:12Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,28 +974,19 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, Field field, ColumnTypeProvider scriptColumnType) {\n+        Schema.Type returnType = null;\n+        if (scriptColumnType != null && fieldIndex != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDEzNA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTczMQ==", "bodyText": "if fieldName is not found in the fieldNameList\n\nIs this possible? I'm asking because we're throwing unsupported exception in this case, I wonder if that's expected.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377951731", "createdAt": "2020-02-11T23:02:20Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,28 +974,19 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, Field field, ColumnTypeProvider scriptColumnType) {\n+        Schema.Type returnType = null;\n+        if (scriptColumnType != null && fieldIndex != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDEzNA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNjE3OQ==", "bodyText": "Looks like it's not- think its safe to remove based on for (String fieldName : fieldNameList) in SelectResultSet", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r378416179", "createdAt": "2020-02-12T17:55:40Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,28 +974,19 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, Field field, ColumnTypeProvider scriptColumnType) {\n+        Schema.Type returnType = null;\n+        if (scriptColumnType != null && fieldIndex != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNDEzNA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE0ODI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMzoyOVrOFobXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMzoyOVrOFobXZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTcxNw==", "bodyText": "The 2nd argument should be MethodField?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377935717", "createdAt": "2020-02-11T22:23:29Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -308,7 +311,7 @@ private String getFieldName(Field field) {\n         }\n     }\n \n-    private Schema.Type fetchMethodReturnType(Field field) {\n+    private Schema.Type fetchMethodReturnType(int fieldIndex, Field field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE1NDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyNTozOFrOFobbDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyNTozOFrOFobbDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNjY1NQ==", "bodyText": "2nd argument should be MethodField. Then I think you should reorganize this method like this:\nreturnType\nif (methodField is cast)\n    returnType = ...\nelse\n    returnType = ...\n\nif (returnType == null)\n    throw exception ...\n\nreturn returnType\n\nAfter this, could you add UT for this function because of its importance? Maybe 3 test cases for the if, else and throw exception in SQLFunctionsTest.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377936655", "createdAt": "2020-02-11T22:25:38Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,28 +974,19 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, Field field, ColumnTypeProvider scriptColumnType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE3MjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMjoxNFrOFobl3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowOTozM1rOFodtPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTQyMA==", "bodyText": "Could you add JavaDoc here to clarify that why we stick with hardcoding return type here? Basically I think it's because there are only 2 order by type TEXT and NUMBER in ES so what is returned here is essentially the category of function rather than the actual return type.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377939420", "createdAt": "2020-02-11T22:32:14Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -1023,4 +1015,31 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n                 );\n         }\n     }\n+\n+    public static Schema.Type getOrderByFieldType(Field field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDA3OA==", "bodyText": "good idea- will do", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377974078", "createdAt": "2020-02-12T00:09:33Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -1023,4 +1015,31 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n                 );\n         }\n     }\n+\n+    public static Schema.Type getOrderByFieldType(Field field) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTQyMA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE4MTQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozNToxNFrOFobrOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowOTozOVrOFodtWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDc5NQ==", "bodyText": "I think you're safe to remove all these verifyDataRows() and focus on what this IT want to test (the type in schema). The correctness of data rows should be covered by other IT.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377940795", "createdAt": "2020-02-11T22:35:14Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+\n+public class TypeInformationIT extends SQLIntegTestCase {\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+        loadIndex(Index.ONLINE);\n+    }\n+\n+    /*\n+    numberOperators\n+     */\n+    @Test\n+    public void testAbsWithIntFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT ABS(age) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY age LIMIT 5\");\n+\n+        verifySchema(response, schema(\"ABS(age)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NDEwNg==", "bodyText": "will do", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377974106", "createdAt": "2020-02-12T00:09:39Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+\n+public class TypeInformationIT extends SQLIntegTestCase {\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+        loadIndex(Index.ONLINE);\n+    }\n+\n+    /*\n+    numberOperators\n+     */\n+    @Test\n+    public void testAbsWithIntFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT ABS(age) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY age LIMIT 5\");\n+\n+        verifySchema(response, schema(\"ABS(age)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDc5NQ=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE5ODg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MTo1MFrOFob19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDoxOTozMFrOFod4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzU0MA==", "bodyText": "I think I made this mistake. sin should always return double like log right? Could you help confirm and fix this as well as TAN, ATAN, ATAN2, COS and COSH in ScalarFunction type system?\nFor example, change SIN(func(T(NUMBER)).to(T)), to SIN(func(T(NUMBER)).to(DOUBLE)),.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377943540", "createdAt": "2020-02-11T22:41:50Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+\n+public class TypeInformationIT extends SQLIntegTestCase {\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+        loadIndex(Index.ONLINE);\n+    }\n+\n+    /*\n+    numberOperators\n+     */\n+    @Test\n+    public void testAbsWithIntFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT ABS(age) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY age LIMIT 5\");\n+\n+        verifySchema(response, schema(\"ABS(age)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20));\n+    }\n+\n+    @Test\n+    public void testCeilWithLongFieldReturnsLong() {\n+        JSONObject response = executeJdbcRequest(\"SELECT CEIL(balance) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY balance LIMIT 5\");\n+\n+        verifySchema(response, schema(\"CEIL(balance)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(1011),\n+                rows(1031),\n+                rows(1110),\n+                rows(1133),\n+                rows(1172));\n+    }\n+\n+    /*\n+    mathConstants\n+     */\n+    @Test\n+    public void testPiReturnsDouble() {\n+        JSONObject response = executeJdbcRequest(\"SELECT PI() FROM \" + TestsConstants.TEST_INDEX_ACCOUNT\n+                + \" LIMIT 1\");\n+\n+        verifySchema(response, schema(\"PI()\", null, \"double\"));\n+        verifyDataRows(response,\n+                rows(3.141592653589793));\n+    }\n+\n+    /*\n+    stringOperators\n+     */\n+    @Test\n+    public void testUpperWithStringFieldReturnsString() {\n+        JSONObject response = executeJdbcRequest(\"SELECT UPPER(firstname) AS firstname_alias FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname_alias LIMIT 2\");\n+\n+        verifySchema(response, schema(\"firstname_alias\", null, \"text\"));\n+        verifyDataRows(response,\n+                rows(\"ABBOTT\"),\n+                rows(\"ABIGAIL\"));\n+    }\n+\n+    @Test\n+    public void testLowerWithTextFieldReturnsText() {\n+        JSONObject response = executeJdbcRequest(\"SELECT LOWER(firstname) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"LOWER(firstname)\", null, \"text\"));\n+        verifyDataRows(response,\n+                rows(\"abbott\"),\n+                rows(\"abigail\"));\n+    }\n+\n+    /*\n+    stringFunctions\n+     */\n+    @Test\n+    public void testLengthWithTextFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT length(firstname) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"length(firstname)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(6),\n+                rows(7));\n+    }\n+\n+    /*\n+    trigFunctions\n+     */\n+    @Test\n+    public void testSinWithLongFieldReturnsLong() {\n+        JSONObject response = executeJdbcRequest(\"SELECT sin(balance) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"sin(balance)\", null, \"long\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3NTcxOA==", "bodyText": "Sure- will look into it", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377975718", "createdAt": "2020-02-12T00:15:35Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+\n+public class TypeInformationIT extends SQLIntegTestCase {\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+        loadIndex(Index.ONLINE);\n+    }\n+\n+    /*\n+    numberOperators\n+     */\n+    @Test\n+    public void testAbsWithIntFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT ABS(age) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY age LIMIT 5\");\n+\n+        verifySchema(response, schema(\"ABS(age)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20));\n+    }\n+\n+    @Test\n+    public void testCeilWithLongFieldReturnsLong() {\n+        JSONObject response = executeJdbcRequest(\"SELECT CEIL(balance) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY balance LIMIT 5\");\n+\n+        verifySchema(response, schema(\"CEIL(balance)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(1011),\n+                rows(1031),\n+                rows(1110),\n+                rows(1133),\n+                rows(1172));\n+    }\n+\n+    /*\n+    mathConstants\n+     */\n+    @Test\n+    public void testPiReturnsDouble() {\n+        JSONObject response = executeJdbcRequest(\"SELECT PI() FROM \" + TestsConstants.TEST_INDEX_ACCOUNT\n+                + \" LIMIT 1\");\n+\n+        verifySchema(response, schema(\"PI()\", null, \"double\"));\n+        verifyDataRows(response,\n+                rows(3.141592653589793));\n+    }\n+\n+    /*\n+    stringOperators\n+     */\n+    @Test\n+    public void testUpperWithStringFieldReturnsString() {\n+        JSONObject response = executeJdbcRequest(\"SELECT UPPER(firstname) AS firstname_alias FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname_alias LIMIT 2\");\n+\n+        verifySchema(response, schema(\"firstname_alias\", null, \"text\"));\n+        verifyDataRows(response,\n+                rows(\"ABBOTT\"),\n+                rows(\"ABIGAIL\"));\n+    }\n+\n+    @Test\n+    public void testLowerWithTextFieldReturnsText() {\n+        JSONObject response = executeJdbcRequest(\"SELECT LOWER(firstname) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"LOWER(firstname)\", null, \"text\"));\n+        verifyDataRows(response,\n+                rows(\"abbott\"),\n+                rows(\"abigail\"));\n+    }\n+\n+    /*\n+    stringFunctions\n+     */\n+    @Test\n+    public void testLengthWithTextFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT length(firstname) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"length(firstname)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(6),\n+                rows(7));\n+    }\n+\n+    /*\n+    trigFunctions\n+     */\n+    @Test\n+    public void testSinWithLongFieldReturnsLong() {\n+        JSONObject response = executeJdbcRequest(\"SELECT sin(balance) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"sin(balance)\", null, \"long\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzU0MA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3Njg0Mw==", "bodyText": "Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r377976843", "createdAt": "2020-02-12T00:19:30Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TypeInformationIT.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+\n+public class TypeInformationIT extends SQLIntegTestCase {\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+        loadIndex(Index.ONLINE);\n+    }\n+\n+    /*\n+    numberOperators\n+     */\n+    @Test\n+    public void testAbsWithIntFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT ABS(age) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY age LIMIT 5\");\n+\n+        verifySchema(response, schema(\"ABS(age)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20),\n+                rows(20));\n+    }\n+\n+    @Test\n+    public void testCeilWithLongFieldReturnsLong() {\n+        JSONObject response = executeJdbcRequest(\"SELECT CEIL(balance) FROM \" + TestsConstants.TEST_INDEX_ACCOUNT +\n+                \" ORDER BY balance LIMIT 5\");\n+\n+        verifySchema(response, schema(\"CEIL(balance)\", null, \"long\"));\n+        verifyDataRows(response,\n+                rows(1011),\n+                rows(1031),\n+                rows(1110),\n+                rows(1133),\n+                rows(1172));\n+    }\n+\n+    /*\n+    mathConstants\n+     */\n+    @Test\n+    public void testPiReturnsDouble() {\n+        JSONObject response = executeJdbcRequest(\"SELECT PI() FROM \" + TestsConstants.TEST_INDEX_ACCOUNT\n+                + \" LIMIT 1\");\n+\n+        verifySchema(response, schema(\"PI()\", null, \"double\"));\n+        verifyDataRows(response,\n+                rows(3.141592653589793));\n+    }\n+\n+    /*\n+    stringOperators\n+     */\n+    @Test\n+    public void testUpperWithStringFieldReturnsString() {\n+        JSONObject response = executeJdbcRequest(\"SELECT UPPER(firstname) AS firstname_alias FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname_alias LIMIT 2\");\n+\n+        verifySchema(response, schema(\"firstname_alias\", null, \"text\"));\n+        verifyDataRows(response,\n+                rows(\"ABBOTT\"),\n+                rows(\"ABIGAIL\"));\n+    }\n+\n+    @Test\n+    public void testLowerWithTextFieldReturnsText() {\n+        JSONObject response = executeJdbcRequest(\"SELECT LOWER(firstname) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"LOWER(firstname)\", null, \"text\"));\n+        verifyDataRows(response,\n+                rows(\"abbott\"),\n+                rows(\"abigail\"));\n+    }\n+\n+    /*\n+    stringFunctions\n+     */\n+    @Test\n+    public void testLengthWithTextFieldReturnsInt() {\n+        JSONObject response = executeJdbcRequest(\"SELECT length(firstname) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"length(firstname)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(6),\n+                rows(7));\n+    }\n+\n+    /*\n+    trigFunctions\n+     */\n+    @Test\n+    public void testSinWithLongFieldReturnsLong() {\n+        JSONObject response = executeJdbcRequest(\"SELECT sin(balance) FROM \" +\n+                TestsConstants.TEST_INDEX_ACCOUNT + \" ORDER BY firstname LIMIT 2\");\n+\n+        verifySchema(response, schema(\"sin(balance)\", null, \"long\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzU0MA=="}, "originalCommit": {"oid": "f05894ff645f149c4eb6a27d3b31ec018e78ea28"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDkxMTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyOTozOVrOFrwlzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozMTowOFrOFr7gFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyOTE5OA==", "bodyText": "why change to public?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381429198", "createdAt": "2020-02-19T17:29:39Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java", "diffHunk": "@@ -209,7 +210,7 @@ private boolean isSQLFeatureEnabled() {\n         return allowExplicitIndex && isSqlEnabled;\n     }\n \n-    private static ColumnTypeProvider performAnalysis(String sql) {\n+    public static ColumnTypeProvider performAnalysis(String sql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwNzk1Ng==", "bodyText": "outdated change from when it was called twice- will revert", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381607956", "createdAt": "2020-02-19T23:31:08Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java", "diffHunk": "@@ -209,7 +210,7 @@ private boolean isSQLFeatureEnabled() {\n         return allowExplicitIndex && isSqlEnabled;\n     }\n \n-    private static ColumnTypeProvider performAnalysis(String sql) {\n+    public static ColumnTypeProvider performAnalysis(String sql) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyOTE5OA=="}, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDkyMTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozMjoyOFrOFrwr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzozNzozN1rOFr7oDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMDc1MA==", "bodyText": "why named scriptColumnType? In my understanding, it not limit to script, right?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381430750", "createdAt": "2020-02-19T17:32:28Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -65,17 +66,19 @@\n     private String indexName;\n     private String typeName;\n     private List<Schema.Column> columns = new ArrayList<>();\n+    private ColumnTypeProvider scriptColumnType;\n \n     private List<String> head;\n     private long size;\n     private long totalHits;\n     private List<DataRows.Row> rows;\n \n-    public SelectResultSet(Client client, Query query, Object queryResult) {\n+    public SelectResultSet(Client client, Query query, Object queryResult, ColumnTypeProvider scriptColumnType) {\n         this.client = client;\n         this.query = query;\n         this.queryResult = queryResult;\n         this.selectAll = false;\n+        this.scriptColumnType = scriptColumnType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwOTk5OQ==", "bodyText": "good point - will change to outputColumnType", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381609999", "createdAt": "2020-02-19T23:37:37Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -65,17 +66,19 @@\n     private String indexName;\n     private String typeName;\n     private List<Schema.Column> columns = new ArrayList<>();\n+    private ColumnTypeProvider scriptColumnType;\n \n     private List<String> head;\n     private long size;\n     private long totalHits;\n     private List<DataRows.Row> rows;\n \n-    public SelectResultSet(Client client, Query query, Object queryResult) {\n+    public SelectResultSet(Client client, Query query, Object queryResult, ColumnTypeProvider scriptColumnType) {\n         this.client = client;\n         this.query = query;\n         this.queryResult = queryResult;\n         this.selectAll = false;\n+        this.scriptColumnType = scriptColumnType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMDc1MA=="}, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDkzMDYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozNTowM1rOFrwxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozNTowM1rOFrwxxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMjI2Mg==", "bodyText": "remove the empty line", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381432262", "createdAt": "2020-02-19T17:35:03Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -374,12 +377,14 @@ private String getFieldName(Field field) {\n              * name instead.\n              */\n             if (fieldMap.get(fieldName) instanceof MethodField) {\n-                Field methodField = fieldMap.get(fieldName);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk1MDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0MDo0M1rOFrw9_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjozMjo1MlrOFslfVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTM5MQ==", "bodyText": "Is it possible to handle the unsupported case in SemanticAnalyzer?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381435391", "createdAt": "2020-02-19T17:40:43Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,34 +974,27 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, MethodField field, ColumnTypeProvider scriptColumnType) {\n+        Schema.Type returnType;\n         String functionName = ((ScriptMethodField) field).getFunctionName().toLowerCase();\n+        if (!numberOperators.contains(functionName) && !mathConstants.contains(functionName)\n+                && !trigFunctions.contains(functionName) && !stringOperators.contains(functionName)\n+                && !stringFunctions.contains(functionName) && !binaryOperators.contains(functionName)\n+                && !dateFunctions.contains(functionName) && !conditionalFunctions.contains(functionName)\n+                && !utilityFunctions.contains(functionName)) {\n+            throw new UnsupportedOperationException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5NTg5Mg==", "bodyText": "good catch - looks like SemanticAnalyzer checks for unsupported functions", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r382295892", "createdAt": "2020-02-20T22:32:52Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,34 +974,27 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, MethodField field, ColumnTypeProvider scriptColumnType) {\n+        Schema.Type returnType;\n         String functionName = ((ScriptMethodField) field).getFunctionName().toLowerCase();\n+        if (!numberOperators.contains(functionName) && !mathConstants.contains(functionName)\n+                && !trigFunctions.contains(functionName) && !stringOperators.contains(functionName)\n+                && !stringFunctions.contains(functionName) && !binaryOperators.contains(functionName)\n+                && !dateFunctions.contains(functionName) && !conditionalFunctions.contains(functionName)\n+                && !utilityFunctions.contains(functionName)) {\n+            throw new UnsupportedOperationException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTM5MQ=="}, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk2MDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0MzoyOVrOFrxEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoyMToyN1rOFr8b2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzA4Mg==", "bodyText": "The input argument could be reduced as (MethodFiled field, Schema.Type resolvedType)", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381437082", "createdAt": "2020-02-19T17:43:29Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,34 +974,27 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, MethodField field, ColumnTypeProvider scriptColumnType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMzI1OQ==", "bodyText": "good catch - will change", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r381623259", "createdAt": "2020-02-20T00:21:27Z", "author": {"login": "davidcui1225"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -973,34 +974,27 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(Field field) {\n+    public static Schema.Type getScriptFunctionReturnType(\n+            int fieldIndex, MethodField field, ColumnTypeProvider scriptColumnType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzA4Mg=="}, "originalCommit": {"oid": "65b58e3396470b9c7ee8c35a73f2a25f5ab6bf63"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzI5NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MDoyN1rOFsrfJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MDoyN1rOFsrfJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NDE0OQ==", "bodyText": "could it be simplified as return resolvedType", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/365#discussion_r382394149", "createdAt": "2020-02-21T04:40:27Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/SQLFunctions.java", "diffHunk": "@@ -974,25 +973,14 @@ public String getCastScriptStatement(String name, String castType, List<KVValue>\n      * approach will return type of result column as DOUBLE, although there is enough information to understand that\n      * it might be safely treated as INTEGER.\n      */\n-    public static Schema.Type getScriptFunctionReturnType(\n-            int fieldIndex, MethodField field, ColumnTypeProvider scriptColumnType) {\n+    public static Schema.Type getScriptFunctionReturnType(MethodField field, Schema.Type resolvedType) {\n         Schema.Type returnType;\n         String functionName = ((ScriptMethodField) field).getFunctionName().toLowerCase();\n-        if (!numberOperators.contains(functionName) && !mathConstants.contains(functionName)\n-                && !trigFunctions.contains(functionName) && !stringOperators.contains(functionName)\n-                && !stringFunctions.contains(functionName) && !binaryOperators.contains(functionName)\n-                && !dateFunctions.contains(functionName) && !conditionalFunctions.contains(functionName)\n-                && !utilityFunctions.contains(functionName)) {\n-            throw new UnsupportedOperationException(\n-                    String.format(\n-                            \"The following method is not supported in Schema: %s\",\n-                            functionName));\n-        }\n         if (functionName.equals(\"cast\")) {\n             String castType = ((SQLCastExpr) field.getExpression()).getDataType().getName();\n             return getCastFunctionReturnType(castType);\n         } else {\n-            returnType = scriptColumnType.get(fieldIndex);\n+            returnType = resolvedType;\n         }\n         return returnType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "016795ece0b3c434d9cce0d251e054e03216f5ae"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}