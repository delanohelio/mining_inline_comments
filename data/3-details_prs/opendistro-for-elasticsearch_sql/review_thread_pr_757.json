{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzMyMTcx", "number": 757, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyMDo0MlrOEnl4TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0NTo0MVrOEpMpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUwNTQxOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/DateTimeFunctionIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyMDo0MlrOHYRXPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNjoyOVrOHYRgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjM1MA==", "bodyText": "Nit: Add newline", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r495212350", "createdAt": "2020-09-25T20:20:42Z", "author": {"login": "lyndonb-bq"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/DateTimeFunctionIT.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_DATE;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySome;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+public class DateTimeFunctionIT extends PPLIntegTestCase {\n+\n+  @Override\n+  public void init() throws IOException {\n+    loadIndex(Index.DATE);\n+  }\n+\n+  private void week(String date, int mode, int expectedResult) throws IOException {\n+    JSONObject result = executeQuery(String.format(\n+        \"source=%s | eval f = week(date('%s'), %d) | fields f\", TEST_INDEX_DATE, date, mode));\n+    verifySchema(result, schema(\"f\", null, \"integer\"));\n+    verifySome(result.getJSONArray(\"datarows\"), rows(expectedResult));\n+  }\n+\n+  @Test\n+  public void testWeek() throws IOException {\n+    JSONObject result = executeQuery(String.format(\n+        \"source=%s | eval f = week(date('2008-02-20')) | fields f\", TEST_INDEX_DATE));\n+    verifySchema(result, schema(\"f\", null, \"integer\"));\n+    verifySome(result.getJSONArray(\"datarows\"), rows(7));\n+\n+    week(\"2008-02-20\", 0, 7);\n+    week(\"2008-02-20\", 1, 8);\n+    week(\"2008-12-31\", 1, 53);\n+    week(\"2000-01-01\", 0, 0);\n+    week(\"2000-01-01\", 2, 52);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d19513d22c3fd35840e4f20c73707b6f2c40b95"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxNDc1NA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r495214754", "createdAt": "2020-09-25T20:26:29Z", "author": {"login": "rupal-bq"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/DateTimeFunctionIT.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_DATE;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySome;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+public class DateTimeFunctionIT extends PPLIntegTestCase {\n+\n+  @Override\n+  public void init() throws IOException {\n+    loadIndex(Index.DATE);\n+  }\n+\n+  private void week(String date, int mode, int expectedResult) throws IOException {\n+    JSONObject result = executeQuery(String.format(\n+        \"source=%s | eval f = week(date('%s'), %d) | fields f\", TEST_INDEX_DATE, date, mode));\n+    verifySchema(result, schema(\"f\", null, \"integer\"));\n+    verifySome(result.getJSONArray(\"datarows\"), rows(expectedResult));\n+  }\n+\n+  @Test\n+  public void testWeek() throws IOException {\n+    JSONObject result = executeQuery(String.format(\n+        \"source=%s | eval f = week(date('2008-02-20')) | fields f\", TEST_INDEX_DATE));\n+    verifySchema(result, schema(\"f\", null, \"integer\"));\n+    verifySome(result.getJSONArray(\"datarows\"), rows(7));\n+\n+    week(\"2008-02-20\", 0, 7);\n+    week(\"2008-02-20\", 1, 8);\n+    week(\"2008-12-31\", 1, 53);\n+    week(\"2000-01-01\", 0, 0);\n+    week(\"2000-01-01\", 2, 52);\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjM1MA=="}, "originalCommit": {"oid": "6d19513d22c3fd35840e4f20c73707b6f2c40b95"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUwNTU3OnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/DateTimeFunctionIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyMDo0NVrOHYRXVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNjozNFrOHYRgyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjM3NQ==", "bodyText": "Nit: Add newline", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r495212375", "createdAt": "2020-09-25T20:20:45Z", "author": {"login": "lyndonb-bq"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/DateTimeFunctionIT.java", "diffHunk": "@@ -64,4 +84,4 @@ protected JSONObject executeQuery(String query) throws IOException {\n     Response response = client().performRequest(request);\n     return new JSONObject(getResponseBody(response));\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d19513d22c3fd35840e4f20c73707b6f2c40b95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxNDc5Mg==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r495214792", "createdAt": "2020-09-25T20:26:34Z", "author": {"login": "rupal-bq"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/DateTimeFunctionIT.java", "diffHunk": "@@ -64,4 +84,4 @@ protected JSONObject executeQuery(String query) throws IOException {\n     Response response = client().performRequest(request);\n     return new JSONObject(getResponseBody(response));\n   }\n-}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjM3NQ=="}, "originalCommit": {"oid": "6d19513d22c3fd35840e4f20c73707b6f2c40b95"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTU0MTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/CalenderLookup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozMDoyMlrOHZGc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzowMDowMlrOHZHkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4MjE1OA==", "bodyText": "Sorry for the late nit comment, but this should be CalendarLookup", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r496082158", "createdAt": "2020-09-28T16:30:22Z", "author": {"login": "lyndonb-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/CalenderLookup.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CalenderLookup {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4473b47fc28e7a17de4aeb0f041b1c4751f4cf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMDU1MQ==", "bodyText": "Thanks for noticing. I fixed it.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r496100551", "createdAt": "2020-09-28T17:00:02Z", "author": {"login": "rupal-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/CalenderLookup.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CalenderLookup {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4MjE1OA=="}, "originalCommit": {"oid": "ce4473b47fc28e7a17de4aeb0f041b1c4751f4cf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTMwNTkwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunctionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozMDo0NVrOHZ9_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1NzoxM1rOHaBmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MjE5MQ==", "bodyText": "could you also add the cases with null and missing values of datetime, timestamp, string; and the case where the integer arg of the double arguments is null or missing", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r496992191", "createdAt": "2020-09-29T19:30:45Z", "author": {"login": "chloe-zh"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunctionTest.java", "diffHunk": "@@ -726,6 +728,83 @@ public void timestamp() {\n     assertEquals(\"timestamp(TIMESTAMP '2020-08-17 01:01:01')\", expr.toString());\n   }\n \n+  private void testWeek(String date, int mode, int expectedResult) {\n+    FunctionExpression expression = dsl\n+        .week(DSL.literal(new ExprDateValue(date)), DSL.literal(mode));\n+    assertEquals(INTEGER, expression.type());\n+    assertEquals(String.format(\"week(DATE '%s', %d)\", date, mode), expression.toString());\n+    assertEquals(integerValue(expectedResult), eval(expression));\n+  }\n+\n+  @Test\n+  public void week() {\n+    when(nullRef.type()).thenReturn(DATE);\n+    when(missingRef.type()).thenReturn(DATE);\n+    assertEquals(nullValue(), eval(dsl.week(nullRef)));\n+    assertEquals(missingValue(), eval(dsl.week(missingRef)));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126890ba4ed2519cc5062849dee76cb3c87f5bb7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MTIwNg==", "bodyText": "Thanks. I added these cases.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r497051206", "createdAt": "2020-09-29T20:57:13Z", "author": {"login": "rupal-bq"}, "path": "core/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunctionTest.java", "diffHunk": "@@ -726,6 +728,83 @@ public void timestamp() {\n     assertEquals(\"timestamp(TIMESTAMP '2020-08-17 01:01:01')\", expr.toString());\n   }\n \n+  private void testWeek(String date, int mode, int expectedResult) {\n+    FunctionExpression expression = dsl\n+        .week(DSL.literal(new ExprDateValue(date)), DSL.literal(mode));\n+    assertEquals(INTEGER, expression.type());\n+    assertEquals(String.format(\"week(DATE '%s', %d)\", date, mode), expression.toString());\n+    assertEquals(integerValue(expectedResult), eval(expression));\n+  }\n+\n+  @Test\n+  public void week() {\n+    when(nullRef.type()).thenReturn(DATE);\n+    when(missingRef.type()).thenReturn(DATE);\n+    assertEquals(nullValue(), eval(dsl.week(nullRef)));\n+    assertEquals(missingValue(), eval(dsl.week(missingRef)));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MjE5MQ=="}, "originalCommit": {"oid": "126890ba4ed2519cc5062849dee76cb3c87f5bb7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjM0MTg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/CalendarLookup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0NTo0MVrOHauqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTo0MjoyNVrOHawX8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4OTUzOQ==", "bodyText": "could this function be static to avoid consturct CalendarLookup every time?\ne.g. getWeekNumber(ExprValue date, ExprValue mode)\nthen define getCalendar(int firstDayOfWeek, int minimalDaysInWeek, Supplier dateProvider)", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r497789539", "createdAt": "2020-09-30T20:45:41Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/CalendarLookup.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CalendarLookup {\n+\n+  private Map<Integer, Calendar> map = new HashMap<>();\n+\n+  /**\n+   * Set Calendar in map for all modes.\n+   * @param date ExprValue of Date/Datetime/Timestamp/String type.\n+   */\n+  public CalendarLookup(ExprValue date) {\n+    map.put(0, getCalendar(Calendar.SUNDAY, 7, date));\n+    map.put(1, getCalendar(Calendar.MONDAY, 5, date));\n+    map.put(2, getCalendar(Calendar.SUNDAY, 7, date));\n+    map.put(3, getCalendar(Calendar.MONDAY, 5, date));\n+    map.put(4, getCalendar(Calendar.SUNDAY, 4, date));\n+    map.put(5, getCalendar(Calendar.MONDAY, 7, date));\n+    map.put(6, getCalendar(Calendar.SUNDAY, 4, date));\n+    map.put(7, getCalendar(Calendar.MONDAY, 7, date));\n+  }\n+\n+  /**\n+   * Set first day of week, minimal days in first week and date in calendar.\n+   * @param firstDayOfWeek the given first day of the week.\n+   * @param minimalDaysInWeek the given minimal days required in the first week of the year.\n+   * @param date the ExprValue of Date/Datetime/Timestamp/String type.\n+   */\n+  private Calendar getCalendar(int firstDayOfWeek, int minimalDaysInWeek, ExprValue date) {\n+    Calendar calendar = Calendar.getInstance();\n+    calendar.setFirstDayOfWeek(firstDayOfWeek);\n+    calendar.setMinimalDaysInFirstWeek(minimalDaysInWeek);\n+    calendar.set(date.dateValue().getYear(), date.dateValue().getMonthValue() - 1,\n+        date.dateValue().getDayOfMonth());\n+    return calendar;\n+  }\n+\n+  /**\n+   * Returns week number for date according to mode.\n+   * @param mode Integer for mode. Valid mode values are 0 to 7.\n+   */\n+  public int getWeekNumber(int mode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3eff0bbd256e808be93fecbcf867d19e889944"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNzU4Nw==", "bodyText": "Thanks for the suggestion. added this change.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/757#discussion_r497817587", "createdAt": "2020-09-30T21:42:25Z", "author": {"login": "rupal-bq"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/CalendarLookup.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CalendarLookup {\n+\n+  private Map<Integer, Calendar> map = new HashMap<>();\n+\n+  /**\n+   * Set Calendar in map for all modes.\n+   * @param date ExprValue of Date/Datetime/Timestamp/String type.\n+   */\n+  public CalendarLookup(ExprValue date) {\n+    map.put(0, getCalendar(Calendar.SUNDAY, 7, date));\n+    map.put(1, getCalendar(Calendar.MONDAY, 5, date));\n+    map.put(2, getCalendar(Calendar.SUNDAY, 7, date));\n+    map.put(3, getCalendar(Calendar.MONDAY, 5, date));\n+    map.put(4, getCalendar(Calendar.SUNDAY, 4, date));\n+    map.put(5, getCalendar(Calendar.MONDAY, 7, date));\n+    map.put(6, getCalendar(Calendar.SUNDAY, 4, date));\n+    map.put(7, getCalendar(Calendar.MONDAY, 7, date));\n+  }\n+\n+  /**\n+   * Set first day of week, minimal days in first week and date in calendar.\n+   * @param firstDayOfWeek the given first day of the week.\n+   * @param minimalDaysInWeek the given minimal days required in the first week of the year.\n+   * @param date the ExprValue of Date/Datetime/Timestamp/String type.\n+   */\n+  private Calendar getCalendar(int firstDayOfWeek, int minimalDaysInWeek, ExprValue date) {\n+    Calendar calendar = Calendar.getInstance();\n+    calendar.setFirstDayOfWeek(firstDayOfWeek);\n+    calendar.setMinimalDaysInFirstWeek(minimalDaysInWeek);\n+    calendar.set(date.dateValue().getYear(), date.dateValue().getMonthValue() - 1,\n+        date.dateValue().getDayOfMonth());\n+    return calendar;\n+  }\n+\n+  /**\n+   * Returns week number for date according to mode.\n+   * @param mode Integer for mode. Valid mode values are 0 to 7.\n+   */\n+  public int getWeekNumber(int mode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4OTUzOQ=="}, "originalCommit": {"oid": "4d3eff0bbd256e808be93fecbcf867d19e889944"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1886, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}