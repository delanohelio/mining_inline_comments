{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NTkyMDU1", "number": 748, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODozMjozNFrOEmuisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODozMjozNFrOEmuisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDQzODkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/analysis/AggregationExpressionOptimizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODozMjozNFrOHW7Zfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDowMzowMFrOHW-7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMzkwMg==", "bodyText": "Could we name this more abstract? Because we may need to replace expression with reference elsewhere than aggregation, for example, collect expression in window operator and replace it in project list.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/748#discussion_r493803902", "createdAt": "2020-09-23T18:32:34Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/analysis/AggregationExpressionOptimizer.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.analysis;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.planner.logical.LogicalAggregation;\n+import com.amazon.opendistroforelasticsearch.sql.planner.logical.LogicalPlan;\n+import com.amazon.opendistroforelasticsearch.sql.planner.logical.LogicalPlanNodeVisitor;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The optimizer used to replace the aggregation/group by expression refered in the SelectClause\n+ * e.g. The query SELECT abs(name), sum(age)-avg(age) FROM test GROUP BY abs(name).\n+ * will be translated the AST\n+ * Project[abs(age), sub(sum(age), avg(age))\n+ *  Agg(agg=[sum(age), avg(age)], group=[abs(age)]]\n+ *   Relation\n+ * The sum(age) and avg(age) in the Project could be replace by the analyzed reference, the\n+ * LogicalPlan should be\n+ * LogicalProject[Ref(\"abs(age)\"), sub(Ref(\"sum(age)\"), Ref(\"avg(age)\"))\n+ *  LogicalAgg(agg=[sum(age), avg(age)], group=[abs(age)]]\n+ *   LogicalRelation\n+ */\n+public class AggregationExpressionOptimizer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6362fa34505f7dc3bfe2fabb795268fbe201c9b1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MTc2MA==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/748#discussion_r493861760", "createdAt": "2020-09-23T20:03:00Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/analysis/AggregationExpressionOptimizer.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.analysis;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.aggregation.Aggregator;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.planner.logical.LogicalAggregation;\n+import com.amazon.opendistroforelasticsearch.sql.planner.logical.LogicalPlan;\n+import com.amazon.opendistroforelasticsearch.sql.planner.logical.LogicalPlanNodeVisitor;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The optimizer used to replace the aggregation/group by expression refered in the SelectClause\n+ * e.g. The query SELECT abs(name), sum(age)-avg(age) FROM test GROUP BY abs(name).\n+ * will be translated the AST\n+ * Project[abs(age), sub(sum(age), avg(age))\n+ *  Agg(agg=[sum(age), avg(age)], group=[abs(age)]]\n+ *   Relation\n+ * The sum(age) and avg(age) in the Project could be replace by the analyzed reference, the\n+ * LogicalPlan should be\n+ * LogicalProject[Ref(\"abs(age)\"), sub(Ref(\"sum(age)\"), Ref(\"avg(age)\"))\n+ *  LogicalAgg(agg=[sum(age), avg(age)], group=[abs(age)]]\n+ *   LogicalRelation\n+ */\n+public class AggregationExpressionOptimizer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMzkwMg=="}, "originalCommit": {"oid": "6362fa34505f7dc3bfe2fabb795268fbe201c9b1"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2037, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}