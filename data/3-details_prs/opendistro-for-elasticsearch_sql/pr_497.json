{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDI3MjEz", "number": 497, "title": "[PPL] Add Doctest module", "bodyText": "PPL Doctest\n1. Overview\n1.1 What is doctest?\nDoctest is a way to test code by checking the correctness of embedded interactive examples in documentation\nexample explaining doctest module\nexample.txt\nThis is an example text file in reStructuredText format.  First import\n``factorial`` from the ``example`` module:\n\n    **>>> from example import factorial**\n\nNow use it:\n\n    **>>> factorial(6)\n    120**\n\nRunning doctest.testfile(\"example.txt\") then finds the error\nFile \"./example.txt\", line 14, in example.txt\nFailed example:\n    factorial(6)\nExpected:\n    120\nGot:\n    720\n\n1.2 Why use doctest?\nDoctest can make the code snippet in docs executable, and check its response as well.\nAs mentioned in the python doctest introduction, doctest has grown to have three primary uses:\n\nChecking examples in docstrings.\nRegression testing.\nExecutable documentation / literate testing.\n\n1.3 How does it affect unit/integration testing suite?\nBoth doctest and unit/integration test are valuable. Use doctest for cases where the test is giving an example of usage that is actually useful as documentation. Generally, don't make these tests comprehensive, aiming solely for informative. Use doctest in reverse: not to test the code is correct based on doctest, but to check that documentation is correct based on the code.\nFor actually testing the code, the goal is to thoroughly test every case, rather than illustrate what it does by example. Doctests aren't meant to be a comprehensive testing solution - they're meant to ensure that simple interactive-prompt style examples in your documentation (including docstrings) don't get out of date.\n1.4 Future Plan\nCurrent SQL Documentation will need reconstruction in the future. Ideally, both SQL and PPL doctest will integrate/migrate to a separate Doctest module in the new architecture.\n2. Design\n2.1 Workflow\n\n2.2 ES Test Instance\n2.2.1 Testing framework\nWe have two options here\n\nUse ES integration testing framework, same as SQL Plugin integration test.\nSpin up ES instance with SQL Plugin installed without gradle build the package, simply ./gradlew run\n\nThe reason we are not using ES test framework, is due to the difficulty of integrating Python code to a Java based framework, considering we are using python built-in module doctest for implementation\n2.2.2 Gradle\n\n\nCreate new module/packdage doctest under current opendistro-sql, and integrate to gradle management\n\n\n\n\n\nSet up gradle build script, which enables doctest by ./gradlew doctest\n\n\nGradle tasks:\n\nbootstrap\nStartES\n\n ./gradlew run\nhttps://github.com/elastic/elasticsearch/blob/master/TESTING.asciidoc#running-elasticsearch-from-a-checkout\n\n\ndoctest\nStopES\n\n\n\nAdd doctest dependency to project gradle build\n\n\n2.2.3 Project Structure\nbootstrap.sh   set up virtual environment for python module\ndoctest\n\u251c\u2500\u2500 bin\n\u2502   \u2514\u2500\u2500 test-docs\n\u251c\u2500\u2500 bootstrap.sh\n\u251c\u2500\u2500 build.gradle\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 dql\n\u2502       \u251c\u2500\u2500 basics.rst\n\u2502       \u2514\u2500\u2500 explain.rst\n\u251c\u2500\u2500 doctest.iml\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 test_data\n\u2502   \u2514\u2500\u2500 accounts.json\n\u2514\u2500\u2500 test_docs.py\n\n2.3 Parsers\n\nHow are Docstring Examples Recognized?\nIn most cases, a copy-and-paste of an interactive console session works fine, but doctest isn\u2019t trying to do an exact emulation of any specific Python shell.\n\nDoctest is relying on the console/command line to run code examples in documentation. So we need two parsers here.\n2.3.1 CLI parser\nReference: CrateDB Implementation\n\nTo recognize its own cli and bash, CrateDB customize the doctest parser by a 3rd party libary:  zc.customdoctests\nCrateDB doctest uses it\u2019s own cli crash to run doctests. https://github.com/crate/crash\n\nhttps://github.com/crate/crate/blob/master/docs/general/dql/selects.rst\n\n\n\nSimilar to CarateDB using it\u2019s CLI \u201ccrash\u201d, we can make use of our own SQL-CLI\nTo support PPL, we need to add PPL support to SQL-CLI. Since PPL and SQL expose similar http endpoint for query and share similar response format. The update won\u2019t be much of work.\nThe code example in a doc using CLI should be like this\nodfesql> SELECT firstname, lastname FROM accounts;\nfetched rows / total rows = 4/4\n+-------------+------------+\n| firstname   | lastname   |\n|-------------+------------|\n| Amber       | Duke       |\n| Hattie      | Bond       |\n| Nanette     | Bates      |\n| Dale        | Adams      |\n+-------------+------------+\n\n2.3.2 bash parser\n\nUse python subprocess to run curl command\nNeed to add additional formatter to better display json response\n\nThe code example in a doc using bash should be like this\nsh$ curl -XPOST \"localhost:9200/_opendistro/_ppl/\" \n          -H 'Content-Type: application/json' \n          -d'{  \"query\": \"search source=kibana_sample_data_flights OriginCountry = \"IT\" \n          DestiContry = \"US\" | fields FlightNum, DestCountry, OriginCountry \"}'\n   \n    {\n      {\n        \"FlightNum\": \"ADGH12\",\n        \"OriginCountry\": \"IT\",\n        \"DestCountry\": \"US\"\n      },\n      {\n        \"FlightNum\": \"IRMW49\",\n        \"OriginCountry\": \"IT\",\n        \"DestCountry\": \"US\"\n      },\n      ...\n    }\n\n2.3 Test Data\nUse elasticsearch python library to create connection to ES instance. It can load test data into ES instance, and delete test index after testing.\nSetup: bulk API\nTearDown: delete(index=\"_all\")\n2.3 Test Report\n2.3.1 Print results\nUse python faulthandler from script to print results\nhttps://docs.python.org/3/library/faulthandler.html\n> Task :doctest:doctest\n/Users/szhongna/Desktop/Projects/sql/doctest/docs/dql/basics.rst\nDoctest: basics.rst ... ok\n/Users/szhongna/Desktop/Projects/sql/doctest/docs/dql/explain.rst\nDoctest: explain.rst ... FAIL\n\n======================================================================\nFAIL: /Users/szhongna/Desktop/Projects/sql/doctest/docs/dql/explain.rst\nDoctest: explain.rst\n\n----------------------------------------------------------------------\nFile \"/Users/szhongna/Desktop/Projects/sql/doctest/docs/dql/explain.rst\", line 6, in explain.rst\nFailed example:\n    pretty_print(sh(\"\"\"curl -sS -H 'Content-Type: application/json' \\\n    -X POST localhost:9200/_opendistro/_sql/_explain \\\n    -d '{\"query\" : \"SELECT firstname, lastname FROM accounts WHERE age > 20\"}'\n    \"\"\").stdout.decode(\"utf-8\"))\nExpected:\n    {\n      \"from\": 0,\n      \"size\": 200,\n      \"query\": {\n       \n       ... \n       \n       }\n    }\nGot:\n    {\n      \"from\": 0,\n      \"size\": 10,\n      \"query\": {\n      \n        ... \n      \n      }\n    }\n\n\n----------------------------------------------------------------------\nRan 2 tests in 2.963s\n\nFAILED (failures=1)\n\n> Task :doctest:doctest FAILED\n\nFAILURE: Build failed with an exception.\n\n\n2.3.2 generate report\n\nPython tests can\u2019t be integrated to Jacoco test reporting\nTODO: need to figure out a better solution", "createdAt": "2020-05-27T18:07:15Z", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497", "merged": true, "mergeCommit": {"oid": "d81029da7ceac537d371e5b6e6d7f614d6538627"}, "closed": true, "closedAt": "2020-06-01T16:42:05Z", "author": {"login": "zhongnansu"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclPbmQAH2gAyNDI0MDI3MjEzOjlhOTI0NjFlMGQ3N2VkZTgzNTAxODQyOTkzMTIwYWNlNzMzZjBlZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnC3I_AFqTQyMTk5NzIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a92461e0d77ede83501842993120ace733f0ef0", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9a92461e0d77ede83501842993120ace733f0ef0", "committedDate": "2020-05-27T02:00:00Z", "message": "doctest poc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a611d0346dabd9ee43bb0cf763e3cee8faee44c6", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a611d0346dabd9ee43bb0cf763e3cee8faee44c6", "committedDate": "2020-05-27T02:00:00Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b59d1fb72562c20eb57ea7b14cd102da7fa55e", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d4b59d1fb72562c20eb57ea7b14cd102da7fa55e", "committedDate": "2020-05-27T02:00:00Z", "message": "initial ppl doctest support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e423661fd5f3ef3068adc112b85ad7813be816", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/91e423661fd5f3ef3068adc112b85ad7813be816", "committedDate": "2020-05-27T02:00:00Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f741d7878427914b5a6d1d152f52566aab6be1f0", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f741d7878427914b5a6d1d152f52566aab6be1f0", "committedDate": "2020-05-27T17:10:08Z", "message": "clean code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c9b863f333a13ecb17374c00d39aa9e77e9ba051", "committedDate": "2020-05-27T17:22:25Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTc3MjI3", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#pullrequestreview-419577227", "createdAt": "2020-05-27T20:19:00Z", "commit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoxOTowMVrOGbbqEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyMjozNFrOGbbwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxNzg3Mg==", "bodyText": "Any chance we can pass this from command line? I'm thinking we may want to use this as sanity test in future.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#discussion_r431417872", "createdAt": "2020-05-27T20:19:01Z", "author": {"login": "dai-chen"}, "path": "doctest/test_docs.py", "diffHunk": "@@ -0,0 +1,179 @@\n+# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+\n+import doctest\n+import os\n+import zc.customdoctests\n+import json\n+import re\n+import random\n+import subprocess\n+import unittest\n+import click\n+\n+from functools import partial\n+from odfe_sql_cli.esconnection import ESConnection\n+from odfe_sql_cli.utils import OutputSettings\n+from odfe_sql_cli.formatter import Formatter\n+from elasticsearch import Elasticsearch, helpers\n+\n+ENDPOINT = \"http://localhost:9200\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxOTU2Mw==", "bodyText": "I assume the 3 docs added in this PR (ppl/cli/rst, ppl/curl.rst, sql/basics.rst) are more like samples? Never mind if we plan to change it to real docs exposed to customer. If not, probably we can move them to a sample folder used to show how to add doctest by CLI or curl for PPL/SQL.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#discussion_r431419563", "createdAt": "2020-05-27T20:22:34Z", "author": {"login": "dai-chen"}, "path": "doctest/docs/ppl/curl.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+Example\n+-------\n+\n+Test query::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjY1MDkw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#pullrequestreview-419665090", "createdAt": "2020-05-27T22:55:00Z", "commit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NTowMVrOGbf76Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NTowMVrOGbf76Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Nzk3Nw==", "bodyText": "I think we didn't delete _all now, right?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#discussion_r431487977", "createdAt": "2020-05-27T22:55:01Z", "author": {"login": "penghuo"}, "path": "doctest/test_docs.py", "diffHunk": "@@ -0,0 +1,179 @@\n+# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+\n+import doctest\n+import os\n+import zc.customdoctests\n+import json\n+import re\n+import random\n+import subprocess\n+import unittest\n+import click\n+\n+from functools import partial\n+from odfe_sql_cli.esconnection import ESConnection\n+from odfe_sql_cli.utils import OutputSettings\n+from odfe_sql_cli.formatter import Formatter\n+from elasticsearch import Elasticsearch, helpers\n+\n+ENDPOINT = \"http://localhost:9200\"\n+ACCOUNTS = \"accounts\"\n+EMPLOYEES = \"employees\"\n+\n+\n+class DocTestConnection(ESConnection):\n+\n+    def __init__(self, query_language=\"sql\"):\n+        super(DocTestConnection, self).__init__(endpoint=ENDPOINT, query_language=query_language)\n+        self.set_connection()\n+\n+        settings = OutputSettings(table_format=\"psql\", is_vertical=False)\n+        self.formatter = Formatter(settings)\n+\n+    def process(self, statement):\n+        data = self.execute_query(statement, use_console=False)\n+        output = self.formatter.format_output(data)\n+        output = \"\\n\".join(output)\n+\n+        click.echo(output)\n+\n+\n+def pretty_print(s):\n+    try:\n+        d = json.loads(s)\n+        print(json.dumps(d, indent=2))\n+    except json.decoder.JSONDecodeError:\n+        print(s)\n+\n+\n+sql_cmd = DocTestConnection(query_language=\"sql\")\n+ppl_cmd = DocTestConnection(query_language=\"ppl\")\n+test_data_client = Elasticsearch([ENDPOINT], verify_certs=True)\n+\n+\n+def sql_cli_transform(s):\n+    return u'sql_cmd.process({0})'.format(repr(s.strip().rstrip(';')))\n+\n+\n+def ppl_cli_transform(s):\n+    return u'ppl_cmd.process({0})'.format(repr(s.strip().rstrip(';')))\n+\n+\n+def bash_transform(s):\n+    # TODO: add ppl support, be default cli uses sql\n+    if s.startswith(\"odfesql\"):\n+        s = re.search(r\"odfesql\\s+-q\\s+\\\"(.*?)\\\"\", s).group(1)\n+        return u'cmd.process({0})'.format(repr(s.strip().rstrip(';')))\n+    return (r'pretty_print(sh(\"\"\"%s\"\"\").stdout.decode(\"utf-8\"))' % s) + '\\n'\n+\n+\n+sql_cli_parser = zc.customdoctests.DocTestParser(\n+    ps1='od>', comment_prefix='#', transform=sql_cli_transform)\n+\n+ppl_cli_parser = zc.customdoctests.DocTestParser(\n+    ps1='od>', comment_prefix='#', transform=ppl_cli_transform)\n+\n+bash_parser = zc.customdoctests.DocTestParser(\n+    ps1=r'sh\\$', comment_prefix='#', transform=bash_transform)\n+\n+\n+def set_up_accounts(test):\n+    set_up(test)\n+    load_file(\"accounts.json\", index_name=ACCOUNTS)\n+\n+\n+def load_file(filename, index_name):\n+    filepath = \"./test_data/\" + filename\n+\n+    # generate iterable data\n+    def load_json():\n+        with open(filepath, \"r\") as f:\n+            for line in f:\n+                yield json.loads(line)\n+\n+    # Need to enable refresh, because the load won't be visible to search immediately\n+    # https://stackoverflow.com/questions/57840161/elasticsearch-python-bulk-helper-api-with-refresh\n+    helpers.bulk(test_data_client, load_json(), stats_only=True, index=index_name, refresh='wait_for')\n+\n+\n+def set_up(test):\n+    test.globs['sql_cmd'] = sql_cmd\n+    test.globs['ppl_cmd'] = ppl_cmd\n+\n+\n+def tear_down(test):\n+    # drop leftover tables after each test\n+    # TODO: delete all will potentially also delete AES FGAC metadata index", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjY1OTIw", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#pullrequestreview-419665920", "createdAt": "2020-05-27T22:56:52Z", "commit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1Njo1MlrOGbf-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1Njo1MlrOGbf-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4ODY1NA==", "bodyText": "Does it require the develper change this file every time when they add different rst file?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#discussion_r431488654", "createdAt": "2020-05-27T22:56:52Z", "author": {"login": "penghuo"}, "path": "doctest/test_docs.py", "diffHunk": "@@ -0,0 +1,179 @@\n+# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\").\n+# You may not use this file except in compliance with the License.\n+# A copy of the License is located at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# or in the \"license\" file accompanying this file. This file is distributed\n+# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+# express or implied. See the License for the specific language governing\n+# permissions and limitations under the License.\n+\n+import doctest\n+import os\n+import zc.customdoctests\n+import json\n+import re\n+import random\n+import subprocess\n+import unittest\n+import click\n+\n+from functools import partial\n+from odfe_sql_cli.esconnection import ESConnection\n+from odfe_sql_cli.utils import OutputSettings\n+from odfe_sql_cli.formatter import Formatter\n+from elasticsearch import Elasticsearch, helpers\n+\n+ENDPOINT = \"http://localhost:9200\"\n+ACCOUNTS = \"accounts\"\n+EMPLOYEES = \"employees\"\n+\n+\n+class DocTestConnection(ESConnection):\n+\n+    def __init__(self, query_language=\"sql\"):\n+        super(DocTestConnection, self).__init__(endpoint=ENDPOINT, query_language=query_language)\n+        self.set_connection()\n+\n+        settings = OutputSettings(table_format=\"psql\", is_vertical=False)\n+        self.formatter = Formatter(settings)\n+\n+    def process(self, statement):\n+        data = self.execute_query(statement, use_console=False)\n+        output = self.formatter.format_output(data)\n+        output = \"\\n\".join(output)\n+\n+        click.echo(output)\n+\n+\n+def pretty_print(s):\n+    try:\n+        d = json.loads(s)\n+        print(json.dumps(d, indent=2))\n+    except json.decoder.JSONDecodeError:\n+        print(s)\n+\n+\n+sql_cmd = DocTestConnection(query_language=\"sql\")\n+ppl_cmd = DocTestConnection(query_language=\"ppl\")\n+test_data_client = Elasticsearch([ENDPOINT], verify_certs=True)\n+\n+\n+def sql_cli_transform(s):\n+    return u'sql_cmd.process({0})'.format(repr(s.strip().rstrip(';')))\n+\n+\n+def ppl_cli_transform(s):\n+    return u'ppl_cmd.process({0})'.format(repr(s.strip().rstrip(';')))\n+\n+\n+def bash_transform(s):\n+    # TODO: add ppl support, be default cli uses sql\n+    if s.startswith(\"odfesql\"):\n+        s = re.search(r\"odfesql\\s+-q\\s+\\\"(.*?)\\\"\", s).group(1)\n+        return u'cmd.process({0})'.format(repr(s.strip().rstrip(';')))\n+    return (r'pretty_print(sh(\"\"\"%s\"\"\").stdout.decode(\"utf-8\"))' % s) + '\\n'\n+\n+\n+sql_cli_parser = zc.customdoctests.DocTestParser(\n+    ps1='od>', comment_prefix='#', transform=sql_cli_transform)\n+\n+ppl_cli_parser = zc.customdoctests.DocTestParser(\n+    ps1='od>', comment_prefix='#', transform=ppl_cli_transform)\n+\n+bash_parser = zc.customdoctests.DocTestParser(\n+    ps1=r'sh\\$', comment_prefix='#', transform=bash_transform)\n+\n+\n+def set_up_accounts(test):\n+    set_up(test)\n+    load_file(\"accounts.json\", index_name=ACCOUNTS)\n+\n+\n+def load_file(filename, index_name):\n+    filepath = \"./test_data/\" + filename\n+\n+    # generate iterable data\n+    def load_json():\n+        with open(filepath, \"r\") as f:\n+            for line in f:\n+                yield json.loads(line)\n+\n+    # Need to enable refresh, because the load won't be visible to search immediately\n+    # https://stackoverflow.com/questions/57840161/elasticsearch-python-bulk-helper-api-with-refresh\n+    helpers.bulk(test_data_client, load_json(), stats_only=True, index=index_name, refresh='wait_for')\n+\n+\n+def set_up(test):\n+    test.globs['sql_cmd'] = sql_cmd\n+    test.globs['ppl_cmd'] = ppl_cmd\n+\n+\n+def tear_down(test):\n+    # drop leftover tables after each test\n+    # TODO: delete all will potentially also delete AES FGAC metadata index\n+    test_data_client.indices.delete(index=[ACCOUNTS, EMPLOYEES], ignore_unavailable=True)\n+\n+\n+docsuite = partial(doctest.DocFileSuite,\n+                   tearDown=tear_down,\n+                   parser=sql_cli_parser,\n+                   optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS,\n+                   encoding='utf-8')\n+\n+\n+doctest_file = partial(os.path.join, 'docs')\n+\n+\n+def doctest_files(*items):\n+    return (doctest_file(item) for item in items)\n+\n+\n+class DocTests(unittest.TestSuite):\n+    def run(self, result, debug=False):\n+        super().run(result, debug)\n+\n+\n+def load_tests(loader, suite, ignore):\n+    tests = []\n+    # docs with bash-based examples\n+    for fn in doctest_files('ppl/curl.rst'): # TODO: Add 'sql/explain.rst' after codebase migration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b863f333a13ecb17374c00d39aa9e77e9ba051"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b8b7a8973054427cbbf25b8b1f1c45bb0da94b4", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3b8b7a8973054427cbbf25b8b1f1c45bb0da94b4", "committedDate": "2020-05-28T00:50:47Z", "message": "added design doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82616966a2b0ae23e3ded7c92f346daa7f35aaa0", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/82616966a2b0ae23e3ded7c92f346daa7f35aaa0", "committedDate": "2020-05-28T21:34:23Z", "message": "add category.json to help user setup doctest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e66f2ab316b4f2ca1f0e0fb3250ba70e10f9573", "author": {"user": {"login": "zhongnansu", "name": "Zhongnan Su"}}, "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3e66f2ab316b4f2ca1f0e0fb3250ba70e10f9573", "committedDate": "2020-05-28T21:55:41Z", "message": "move docs to sample folder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTQ4MTky", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#pullrequestreview-421148192", "createdAt": "2020-05-29T17:25:49Z", "commit": {"oid": "3e66f2ab316b4f2ca1f0e0fb3250ba70e10f9573"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTk3MjE4", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/497#pullrequestreview-421997218", "createdAt": "2020-06-01T16:29:10Z", "commit": {"oid": "3e66f2ab316b4f2ca1f0e0fb3250ba70e10f9573"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 691, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}