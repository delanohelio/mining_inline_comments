{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NjY0OTA2", "number": 527, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDozOToxOVrOEJQmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0ODo1MVrOEJQwQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTQ0Njc5OnYy", "diffSide": "RIGHT", "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSqlAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDozOToxOVrOGpuDMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0MjoyNFrOGpuIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5OTI4Mw==", "bodyText": "add some log to tracking the fallback behaviour for debug", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/527#discussion_r446399283", "createdAt": "2020-06-26T20:39:19Z", "author": {"login": "penghuo"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSqlAction.java", "diffHunk": "@@ -135,8 +142,19 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             LOG.info(\"[{}] Incoming request {}: {}\", LogUtils.getRequestId(), request.uri(),\n                     QueryDataAnonymizer.anonymizeData(sqlRequest.getSql()));\n \n-            final QueryAction queryAction =\n-                    explainRequest(client, sqlRequest, SqlRequestParam.getFormat(request.params()));\n+            Format format = SqlRequestParam.getFormat(request.params());\n+\n+            // Route request to new query engine if it's supported already\n+            SQLQueryRequest newSqlRequest = new SQLQueryRequest(sqlRequest.getJsonContent(),\n+                                                                sqlRequest.getSql(),\n+                                                                request.path(),\n+                                                                format.getFormatName());\n+            RestChannelConsumer result = newSqlQueryHandler.prepareRequest(newSqlRequest, client);\n+            if (result != RestSQLQueryAction.NOT_SUPPORTED_YET) {\n+                return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79233cfaecb0eb9630084fce87294534f98efa1d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMDU0OA==", "bodyText": "sure, will do!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/527#discussion_r446400548", "createdAt": "2020-06-26T20:42:24Z", "author": {"login": "dai-chen"}, "path": "legacy/src/main/java/com/amazon/opendistroforelasticsearch/sql/legacy/plugin/RestSqlAction.java", "diffHunk": "@@ -135,8 +142,19 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             LOG.info(\"[{}] Incoming request {}: {}\", LogUtils.getRequestId(), request.uri(),\n                     QueryDataAnonymizer.anonymizeData(sqlRequest.getSql()));\n \n-            final QueryAction queryAction =\n-                    explainRequest(client, sqlRequest, SqlRequestParam.getFormat(request.params()));\n+            Format format = SqlRequestParam.getFormat(request.params());\n+\n+            // Route request to new query engine if it's supported already\n+            SQLQueryRequest newSqlRequest = new SQLQueryRequest(sqlRequest.getJsonContent(),\n+                                                                sqlRequest.getSql(),\n+                                                                request.path(),\n+                                                                format.getFormatName());\n+            RestChannelConsumer result = newSqlQueryHandler.prepareRequest(newSqlRequest, client);\n+            if (result != RestSQLQueryAction.NOT_SUPPORTED_YET) {\n+                return result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5OTI4Mw=="}, "originalCommit": {"oid": "79233cfaecb0eb9630084fce87294534f98efa1d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTQ3MTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo0ODo1MVrOGpuSQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTo0NTowN1rOGpvldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMzEzNw==", "bodyText": "Add some SQL VALUES related doc if possible.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/527#discussion_r446403137", "createdAt": "2020-06-26T20:48:51Z", "author": {"login": "penghuo"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalValues.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.LiteralExpression;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Logical operator which is a sequence of literal list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79233cfaecb0eb9630084fce87294534f98efa1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyNDQzOQ==", "bodyText": "Sure, adding more comments. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/527#discussion_r446424439", "createdAt": "2020-06-26T21:45:07Z", "author": {"login": "dai-chen"}, "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/planner/logical/LogicalValues.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.planner.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.LiteralExpression;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Logical operator which is a sequence of literal list.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMzEzNw=="}, "originalCommit": {"oid": "79233cfaecb0eb9630084fce87294534f98efa1d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2113, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}