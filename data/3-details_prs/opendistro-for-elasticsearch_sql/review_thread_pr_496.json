{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTgwNTc2", "number": 496, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowODozM1rOEAMedw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxMjowNlrOEASvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjM5ODYzOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowODozM1rOGbUzcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowMDo0NFrOGbW5lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTU4NA==", "bodyText": "This is same as executeQuery? Probably we can just call it and discard return value?\n    protected String executeQuery(String query) throws IOException {\n        Response response = client().performRequest(buildRequest(query));\n        Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n        return getResponseBody(response, true);\n    }", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431305584", "createdAt": "2020-05-27T17:08:33Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"can't resolve expression name in type env\");\n+    }\n+\n+\n+    private void queryShouldPassSemanticCheck(String query) {\n+        Request request = buildRequest(query);\n+        try {\n+            Response response = client().performRequest(request);\n+            assertEquals(OK.getStatus(), response.getStatusLine().getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzOTkyNg==", "bodyText": "Done, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431339926", "createdAt": "2020-05-27T18:00:44Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"can't resolve expression name in type env\");\n+    }\n+\n+\n+    private void queryShouldPassSemanticCheck(String query) {\n+        Request request = buildRequest(query);\n+        try {\n+            Response response = client().performRequest(request);\n+            assertEquals(OK.getStatus(), response.getStatusLine().getStatusCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTU4NA=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQwNTUzOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDoyM1rOGbU35g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowNDoxNFrOGbXA3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjcyNg==", "bodyText": "Is count being added in #493?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431306726", "createdAt": "2020-05-27T17:10:23Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzOTcwOQ==", "bodyText": "Thanks for the reminder. Changed the case to range, is that making sense?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431339709", "createdAt": "2020-05-27T18:00:24Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjcyNg=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MTc5MA==", "bodyText": "Sure. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431341790", "createdAt": "2020-05-27T18:04:14Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjcyNg=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjQxMTU3OnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjoxMlrOGbU74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTowMDoxM1rOGbY7hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzc0Nw==", "bodyText": "The test method name should be nonexistent field? But I think we do need another one for index.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431307747", "createdAt": "2020-05-27T17:12:12Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzODM4OQ==", "bodyText": "It should be nonexistent field, corrected it now. It seems we have not set semantic check for index, let's add the index check when the index check is enabled.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431338389", "createdAt": "2020-05-27T17:58:17Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzc0Nw=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MTQ2Mg==", "bodyText": "The ElasticsearchIndex.getFieldTypes() should throw Elasticsearch IndexNotFoundException. Not sure if the exception is caught without re-throw or for other reason.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431341462", "createdAt": "2020-05-27T18:03:37Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzc0Nw=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MTA2MA==", "bodyText": "Yes Elasticsearch throws this exception. I didn't add it here because it's not handled by the semantic check. Maybe we can add this to other test", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431361060", "createdAt": "2020-05-27T18:38:28Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzc0Nw=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MzE5MQ==", "bodyText": "Sounds good!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431373191", "createdAt": "2020-05-27T19:00:13Z", "author": {"login": "dai-chen"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/QueryAnalysisIT.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import com.amazon.opendistroforelasticsearch.sql.exception.SemanticCheckException;\n+import java.io.IOException;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class QueryAnalysisIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    /**\n+     * Valid commands should pass semantic check\n+     */\n+    @Test\n+    public void searchCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void whereCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | where age=20\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void fieldsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields firstname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Ignore(\"Can't resolve target field yet\")\n+    @Test\n+    public void renameCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | rename firstname as first\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void statsCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats avg(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void dedupCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | dedup firstname, lastname\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void sortCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | sort age\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+    @Test\n+    public void evalCommandShouldPassSemanticCheck() {\n+        String query = String.format(\"search source=%s | eval age=abs(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldPassSemanticCheck(query);\n+    }\n+\n+\n+    /**\n+     * Commands that fail semantic analysis should throw {@link SemanticCheckException}\n+     */\n+    @Test\n+    public void unsupportedAggregationShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | stats count(age)\", TEST_INDEX_ACCOUNT);\n+        queryShouldThrowSemanticException(query, \"Unsupported aggregation function count\");\n+    }\n+\n+    @Test\n+    public void nonexistentIndexShouldFailSemanticCheck() {\n+        String query = String.format(\"search source=%s | fields name\", TEST_INDEX_ACCOUNT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzc0Nw=="}, "originalCommit": {"oid": "15f4dc8ba58bdb96198d0693d7332d5a4548bda5"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzQyNTEyOnYy", "diffSide": "RIGHT", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/SearchCommandIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxMjowNlrOGbe-ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoyNDoyNVrOGbfRZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MjI1MQ==", "bodyText": "Is it possible to assert all the response instead of just one field. e.g.\nschema(contains(\"name\", \"string\")))\nor we can assert the full string match.\nActually, we don't need much data for integration test purpose, IMO, the sample data include all the types, null, missing should be enough for IT purpose.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431472251", "createdAt": "2020-05-27T22:12:06Z", "author": {"login": "penghuo"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/SearchCommandIT.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import java.io.IOException;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_BANK;\n+\n+public class SearchCommandIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.BANK);\n+    }\n+\n+    @Test\n+    public void testSearchAllFields() throws IOException {\n+        String result = executeQuery(String.format(\"search source=%s\", TEST_INDEX_BANK));\n+        assertTrue(result.contains(\"\\\"total\\\": 7\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc118b160b1cca5602537b27ad317e677c26d3a1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NzA5NQ==", "bodyText": "I'm considering to add a utils to build result set and schema from the result, so that we can test the behavior by asserting the expected and actual result set rather comparing result strings.\nFor the sample data, what about applying bank_with_null_values (already in our resources) to all tests?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/496#discussion_r431477095", "createdAt": "2020-05-27T22:24:25Z", "author": {"login": "chloe-zh"}, "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/SearchCommandIT.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import java.io.IOException;\n+import org.elasticsearch.client.ResponseException;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_BANK;\n+\n+public class SearchCommandIT extends PPLIntegTestCase {\n+\n+    @Override\n+    public void init() throws IOException {\n+        loadIndex(Index.BANK);\n+    }\n+\n+    @Test\n+    public void testSearchAllFields() throws IOException {\n+        String result = executeQuery(String.format(\"search source=%s\", TEST_INDEX_BANK));\n+        assertTrue(result.contains(\"\\\"total\\\": 7\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MjI1MQ=="}, "originalCommit": {"oid": "fc118b160b1cca5602537b27ad317e677c26d3a1"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2099, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}