{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDA3Njkw", "number": 377, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzozMDoyOFrODm5EqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzozMDoyOFrODm5EqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA3NTYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzozMDoyOFrOF0kknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToxNzowMlrOF1vk_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2OTQ3MQ==", "bodyText": "We should be checking TYPE_NAME to be object, instead of checking its not null.\nAlso can you test how this would impact JDBC driver.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/377#discussion_r390669471", "createdAt": "2020-03-10T23:30:28Z", "author": {"login": "abbashus"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "diffHunk": "@@ -290,6 +290,34 @@ public void describeSingleIndex() throws IOException {\n         assertThat(row.get(5), not(equalTo(JSONObject.NULL)));\n     }\n \n+    @Test\n+    public void describeSingleIndexWithObjectFieldShouldPass() throws IOException {\n+        JSONObject response =\n+                executeQuery(String.format(\"DESCRIBE TABLES LIKE %s\", TestsConstants.TEST_INDEX_GAME_OF_THRONES));\n+\n+        // Schema for DESCRIBE is filled with a lot of fields that aren't used so only the important\n+        // ones are checked for here\n+        String[] fields = {\"TABLE_NAME\", \"COLUMN_NAME\", \"TYPE_NAME\"};\n+        checkContainsColumns(getSchema(response), fields);\n+\n+        JSONArray dataRows = getDataRows(response);\n+        assertThat(dataRows.length(), greaterThan(0));\n+        assertThat(dataRows.getJSONArray(0).length(), equalTo(DESCRIBE_FIELD_LENGTH));\n+\n+        /*\n+         * Assumed indices of fields in dataRows based on \"schema\" output for DESCRIBE given above:\n+         * \"TABLE_NAME\"  : 2\n+         * \"COLUMN_NAME\" : 3\n+         * \"TYPE_NAME\"   : 5\n+         */\n+        for (int i = 0; i < dataRows.length(); i++) {\n+            JSONArray row = dataRows.getJSONArray(i);\n+            assertThat(row.get(2), equalTo(TestsConstants.TEST_INDEX_GAME_OF_THRONES));\n+            assertThat(row.get(3), not(equalTo(JSONObject.NULL)));\n+            assertThat(row.get(5), not(equalTo(JSONObject.NULL)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8310208f14a2b0a541f155151e765741ef14f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNjU1NQ==", "bodyText": "I'm thinking of adding IT with JDBC driver involved later because our JDBC driver is already added as test dependency in Gradle. However, the problem is we don't have nightly build so it's difficult to test with latest changes in JDBC driver. The comparison test has same issue: #339 (comment)", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/377#discussion_r391316555", "createdAt": "2020-03-11T22:56:45Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "diffHunk": "@@ -290,6 +290,34 @@ public void describeSingleIndex() throws IOException {\n         assertThat(row.get(5), not(equalTo(JSONObject.NULL)));\n     }\n \n+    @Test\n+    public void describeSingleIndexWithObjectFieldShouldPass() throws IOException {\n+        JSONObject response =\n+                executeQuery(String.format(\"DESCRIBE TABLES LIKE %s\", TestsConstants.TEST_INDEX_GAME_OF_THRONES));\n+\n+        // Schema for DESCRIBE is filled with a lot of fields that aren't used so only the important\n+        // ones are checked for here\n+        String[] fields = {\"TABLE_NAME\", \"COLUMN_NAME\", \"TYPE_NAME\"};\n+        checkContainsColumns(getSchema(response), fields);\n+\n+        JSONArray dataRows = getDataRows(response);\n+        assertThat(dataRows.length(), greaterThan(0));\n+        assertThat(dataRows.getJSONArray(0).length(), equalTo(DESCRIBE_FIELD_LENGTH));\n+\n+        /*\n+         * Assumed indices of fields in dataRows based on \"schema\" output for DESCRIBE given above:\n+         * \"TABLE_NAME\"  : 2\n+         * \"COLUMN_NAME\" : 3\n+         * \"TYPE_NAME\"   : 5\n+         */\n+        for (int i = 0; i < dataRows.length(); i++) {\n+            JSONArray row = dataRows.getJSONArray(i);\n+            assertThat(row.get(2), equalTo(TestsConstants.TEST_INDEX_GAME_OF_THRONES));\n+            assertThat(row.get(3), not(equalTo(JSONObject.NULL)));\n+            assertThat(row.get(5), not(equalTo(JSONObject.NULL)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2OTQ3MQ=="}, "originalCommit": {"oid": "8e8310208f14a2b0a541f155151e765741ef14f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5ODM2Nw==", "bodyText": "Done. Verify the each row.\nFor testing with JDBC driver, I agree with chen's idea to do integration test based on nightly build pipeline.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/377#discussion_r391898367", "createdAt": "2020-03-12T21:17:02Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/MetaDataQueriesIT.java", "diffHunk": "@@ -290,6 +290,34 @@ public void describeSingleIndex() throws IOException {\n         assertThat(row.get(5), not(equalTo(JSONObject.NULL)));\n     }\n \n+    @Test\n+    public void describeSingleIndexWithObjectFieldShouldPass() throws IOException {\n+        JSONObject response =\n+                executeQuery(String.format(\"DESCRIBE TABLES LIKE %s\", TestsConstants.TEST_INDEX_GAME_OF_THRONES));\n+\n+        // Schema for DESCRIBE is filled with a lot of fields that aren't used so only the important\n+        // ones are checked for here\n+        String[] fields = {\"TABLE_NAME\", \"COLUMN_NAME\", \"TYPE_NAME\"};\n+        checkContainsColumns(getSchema(response), fields);\n+\n+        JSONArray dataRows = getDataRows(response);\n+        assertThat(dataRows.length(), greaterThan(0));\n+        assertThat(dataRows.getJSONArray(0).length(), equalTo(DESCRIBE_FIELD_LENGTH));\n+\n+        /*\n+         * Assumed indices of fields in dataRows based on \"schema\" output for DESCRIBE given above:\n+         * \"TABLE_NAME\"  : 2\n+         * \"COLUMN_NAME\" : 3\n+         * \"TYPE_NAME\"   : 5\n+         */\n+        for (int i = 0; i < dataRows.length(); i++) {\n+            JSONArray row = dataRows.getJSONArray(i);\n+            assertThat(row.get(2), equalTo(TestsConstants.TEST_INDEX_GAME_OF_THRONES));\n+            assertThat(row.get(3), not(equalTo(JSONObject.NULL)));\n+            assertThat(row.get(5), not(equalTo(JSONObject.NULL)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2OTQ3MQ=="}, "originalCommit": {"oid": "8e8310208f14a2b0a541f155151e765741ef14f4"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2186, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}