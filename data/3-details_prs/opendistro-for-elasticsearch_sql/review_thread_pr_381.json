{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTIxOTYx", "number": 381, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxMTozMlrODo9sAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMjo1NFrODo9yfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgwMzIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxMTozMlrOF31yWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxMTozMlrOF31yWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzI0MA==", "bodyText": "private?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394097240", "createdAt": "2020-03-18T04:11:32Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -76,6 +82,19 @@ public boolean visit(MySqlSelectQueryBlock query) {\n         return aggregationParser.getColumnNodes();\n     }\n \n+    public List<String> extractSelectFunctionNames(List<SQLSelectItem> selectItems) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgwNDg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/JdbcTestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxMjozNlrOF31zUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMDo1NFrOF316lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzQ4OA==", "bodyText": "why change to assertTrue?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394097488", "createdAt": "2020-03-18T04:12:36Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/JdbcTestIT.java", "diffHunk": "@@ -118,15 +118,16 @@ public void stringOperatorNameCaseInsensitiveTest() {\n \n     @Test\n     public void dateFunctionNameCaseInsensitiveTest() {\n-        assertEquals(\n+        assertTrue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTM0OA==", "bodyText": "Becase response object comparison does not ignore letter case in schema.name. Thus I used assertTrue together with .equalsIgnoreCase.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099348", "createdAt": "2020-03-18T04:20:54Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/JdbcTestIT.java", "diffHunk": "@@ -118,15 +118,16 @@ public void stringOperatorNameCaseInsensitiveTest() {\n \n     @Test\n     public void dateFunctionNameCaseInsensitiveTest() {\n-        assertEquals(\n+        assertTrue(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzQ4OA=="}, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgwODM5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNToxMFrOF311hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMToyNVrOF3169g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODA1Mg==", "bodyText": "Is it possible to make it as the function to avoid duplicate code in all the test cases?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394098052", "createdAt": "2020-03-18T04:15:10Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "diffHunk": "@@ -55,7 +59,9 @@ public void parseAggWithoutExpressionShouldPass() {\n                      \"FROM kibana_sample_data_flights \" +\n                      \"GROUP BY dayOfWeek\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        parser.parse(mYSqlSelectQueryBlock(sql));\n+        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n+        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n+        parser.parse(query, selectMethodNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTQ0Ng==", "bodyText": "Will take another look.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099446", "createdAt": "2020-03-18T04:21:25Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "diffHunk": "@@ -55,7 +59,9 @@ public void parseAggWithoutExpressionShouldPass() {\n                      \"FROM kibana_sample_data_flights \" +\n                      \"GROUP BY dayOfWeek\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        parser.parse(mYSqlSelectQueryBlock(sql));\n+        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n+        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n+        parser.parse(query, selectMethodNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODA1Mg=="}, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgxMTIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNzowN1rOF313Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyOTozOFrOF32BqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODQ3OA==", "bodyText": "Is it the same function used in SQLToOperatorConverter?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394098478", "createdAt": "2020-03-18T04:17:07Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "diffHunk": "@@ -247,7 +306,28 @@ public void aggregationWithNestedShouldThrowException() {\n                      + \"FROM t \"\n                      + \"GROUP BY nested(projects.name.keyword, 'projects')\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        parser.parse(mYSqlSelectQueryBlock(sql));\n+        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n+        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n+        parser.parse(query, selectMethodNames);\n+    }\n+\n+    private List<String> prepareRawMethodNames(MySqlSelectQueryBlock query, Boolean fillWithNull) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTE2MQ==", "bodyText": "Same logic. Might be duplicate code with the intent to keep parserTest separate from converter.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394101161", "createdAt": "2020-03-18T04:29:38Z", "author": {"login": "chenqi0805"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "diffHunk": "@@ -247,7 +306,28 @@ public void aggregationWithNestedShouldThrowException() {\n                      + \"FROM t \"\n                      + \"GROUP BY nested(projects.name.keyword, 'projects')\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        parser.parse(mYSqlSelectQueryBlock(sql));\n+        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n+        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n+        parser.parse(query, selectMethodNames);\n+    }\n+\n+    private List<String> prepareRawMethodNames(MySqlSelectQueryBlock query, Boolean fillWithNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODQ3OA=="}, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgxODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMjoyNlrOF317xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0ODo0NVrOF4IfMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTY1NA==", "bodyText": "Instead of just extracting the selectMethodNames, Is it possible to generate the final select name list regardless the field is method or not?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099654", "createdAt": "2020-03-18T04:22:26Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -54,11 +57,14 @@ public SQLToOperatorConverter(Client client, ColumnTypeProvider columnTypeProvid\n \n     @Override\n     public boolean visit(MySqlSelectQueryBlock query) {\n+        //1. extract function names in select\n+        List<String> selectMethodNames = extractSelectFunctionNames(query.getSelectList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTkzMw==", "bodyText": "Will take another look.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394101933", "createdAt": "2020-03-18T04:33:26Z", "author": {"login": "chenqi0805"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -54,11 +57,14 @@ public SQLToOperatorConverter(Client client, ColumnTypeProvider columnTypeProvid\n \n     @Override\n     public boolean visit(MySqlSelectQueryBlock query) {\n+        //1. extract function names in select\n+        List<String> selectMethodNames = extractSelectFunctionNames(query.getSelectList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTY1NA=="}, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMzYzNA==", "bodyText": "After putting some extra thought, one way to make the code cleaner is to move the name extraction function and lowercase normalization function into the SQLAggregationParser.parse logic.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394403634", "createdAt": "2020-03-18T14:48:45Z", "author": {"login": "chenqi0805"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -54,11 +57,14 @@ public SQLToOperatorConverter(Client client, ColumnTypeProvider columnTypeProvid\n \n     @Override\n     public boolean visit(MySqlSelectQueryBlock query) {\n+        //1. extract function names in select\n+        List<String> selectMethodNames = extractSelectFunctionNames(query.getSelectList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTY1NA=="}, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgxOTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMjo1NFrOF318Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozMDowNlrOF32B_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTc4Mg==", "bodyText": "Avoid to use null value, Consider to use Optional if it is necessary.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099782", "createdAt": "2020-03-18T04:22:54Z", "author": {"login": "penghuo"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -76,6 +82,19 @@ public boolean visit(MySqlSelectQueryBlock query) {\n         return aggregationParser.getColumnNodes();\n     }\n \n+    public List<String> extractSelectFunctionNames(List<SQLSelectItem> selectItems) {\n+        List<String> methodNames = new ArrayList<>();\n+        for (SQLSelectItem selectItem: selectItems){\n+            SQLExpr selectItemExpr = selectItem.getExpr();\n+            if (selectItemExpr instanceof SQLMethodInvokeExpr) {\n+                methodNames.add(((SQLMethodInvokeExpr) selectItemExpr).getMethodName());\n+            } else {\n+                methodNames.add(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTI0NA==", "bodyText": "Will take another look.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394101244", "createdAt": "2020-03-18T04:30:06Z", "author": {"login": "chenqi0805"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -76,6 +82,19 @@ public boolean visit(MySqlSelectQueryBlock query) {\n         return aggregationParser.getColumnNodes();\n     }\n \n+    public List<String> extractSelectFunctionNames(List<SQLSelectItem> selectItems) {\n+        List<String> methodNames = new ArrayList<>();\n+        for (SQLSelectItem selectItem: selectItems){\n+            SQLExpr selectItemExpr = selectItem.getExpr();\n+            if (selectItemExpr instanceof SQLMethodInvokeExpr) {\n+                methodNames.add(((SQLMethodInvokeExpr) selectItemExpr).getMethodName());\n+            } else {\n+                methodNames.add(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTc4Mg=="}, "originalCommit": {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2188, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}