{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzc4MzAy", "number": 345, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoyOTo0MlrODXs0dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzozNToyMlrODYWHrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc4MTY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoyOTo0MlrOFdI-pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo0Mzo1NFrOFdh5bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA==", "bodyText": "I'm not sure I completely understand the explanation from the comment- are you saying that these tests throw the SqlFeatureNotImplementedException too quickly currently, which is why so many of them are set to @Ignore?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366100134", "createdAt": "2020-01-14T00:29:42Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTQ5Mw==", "bodyText": "@davidcui-amzn Yes, how shall I put it to make it clear?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366101493", "createdAt": "2020-01-14T00:35:28Z", "author": {"login": "chloe-zh"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Njc5Ng==", "bodyText": "I think it is mostly clear- maybe just add something at the beginning such as Test set to ignore due to nested functions blocked by...", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366476796", "createdAt": "2020-01-14T17:36:23Z", "author": {"login": "davidcui1225"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwODM5OQ==", "bodyText": "Great, have changed them. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366508399", "createdAt": "2020-01-14T18:43:54Z", "author": {"login": "chloe-zh"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU4MzEwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerOperatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0NTo1MlrOFdZ9Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0NTo1MlrOFdZ9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODI3OA==", "bodyText": "Could you add the exception expectation?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366378278", "createdAt": "2020-01-14T14:45:52Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerOperatorTest.java", "diffHunk": "@@ -55,9 +55,9 @@ public void compareSubstringFunctionCallEqualsToNumberShouldFail() {\n     }\n \n     @Test\n-    public void compareLogAndAbsFunctionCallWithIntegerSmallerThanStringShouldFail() {\n+    public void compareLogFunctionCallWithIntegerSmallerThanStringShouldFail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU4NTYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0NjozNlrOFdZ-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoxMzoyNVrOFdfS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODY3Mg==", "bodyText": "Why ignore the test cases? Should we add the exception assert?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366378672", "createdAt": "2020-01-14T14:46:36Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -104,21 +106,25 @@ public void substringWithLogFunctionCallWithUnknownFieldShouldPass() {\n                 );\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NTc4Nw==", "bodyText": "That was because these cases are not valid for now since the plugin does not support these features so far, but they are remained here for future implementation.\nUTs and ITs are added in AntlrSqlParseTreeVisitorTest.java and QueryAnalysis.java instead.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366465787", "createdAt": "2020-01-14T17:13:25Z", "author": {"login": "chloe-zh"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -104,21 +106,25 @@ public void substringWithLogFunctionCallWithUnknownFieldShouldPass() {\n                 );\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODY3Mg=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU4ODgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0NzozMVrOFdaArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozOTo1MlrOFdgEzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTE4Mw==", "bodyText": "Could you also add the exception message assert?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366379183", "createdAt": "2020-01-14T14:47:31Z", "author": {"login": "penghuo"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java", "diffHunk": "@@ -74,6 +74,42 @@ public void selectStarShouldReturnEmptyProductAsQueryVisitingResult() {\n         Assert.assertTrue(result.isCompatible(new Product(emptyList())));\n     }\n \n+    @Test(expected = SqlFeatureNotImplementedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3ODU0Mg==", "bodyText": "Will do, thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366478542", "createdAt": "2020-01-14T17:39:52Z", "author": {"login": "chloe-zh"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java", "diffHunk": "@@ -74,6 +74,42 @@ public void selectStarShouldReturnEmptyProductAsQueryVisitingResult() {\n         Assert.assertTrue(result.isCompatible(new Product(emptyList())));\n     }\n \n+    @Test(expected = SqlFeatureNotImplementedException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTE4Mw=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzYzNDIxOnYy", "diffSide": "RIGHT", "path": "src/main/antlr/OpenDistroSqlParser.g4", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo1ODoyOFrOFdabtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozOTozN1rOFdgEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjEwMw==", "bodyText": "COUNT?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366386103", "createdAt": "2020-01-14T14:58:28Z", "author": {"login": "penghuo"}, "path": "src/main/antlr/OpenDistroSqlParser.g4", "diffHunk": "@@ -324,20 +336,29 @@ aggregateWindowedFunction\n     | COUNT '(' aggregator=DISTINCT functionArgs ')'\n     ;\n \n+functionAsAggregatorFunction\n+    : (AVG | MAX | MIN | SUM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3ODQzNQ==", "bodyText": "Added now. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366478435", "createdAt": "2020-01-14T17:39:37Z", "author": {"login": "chloe-zh"}, "path": "src/main/antlr/OpenDistroSqlParser.g4", "diffHunk": "@@ -324,20 +336,29 @@ aggregateWindowedFunction\n     | COUNT '(' aggregator=DISTINCT functionArgs ')'\n     ;\n \n+functionAsAggregatorFunction\n+    : (AVG | MAX | MIN | SUM)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjEwMw=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzcxNzYzOnYy", "diffSide": "RIGHT", "path": "src/main/antlr/OpenDistroSqlParser.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMTowOFrOFdbPvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozMjo0NVrOFdf2-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5OTQyMQ==", "bodyText": "why remove the functionCall from args?", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366399421", "createdAt": "2020-01-14T15:21:08Z", "author": {"login": "penghuo"}, "path": "src/main/antlr/OpenDistroSqlParser.g4", "diffHunk": "@@ -324,20 +336,29 @@ aggregateWindowedFunction\n     | COUNT '(' aggregator=DISTINCT functionArgs ')'\n     ;\n \n+functionAsAggregatorFunction\n+    : (AVG | MAX | MIN | SUM)\n+      '(' aggregator=(ALL | DISTINCT)? functionCall ')'\n+    ;\n+\n scalarFunctionName\n     : functionNameBase\n     ;\n \n functionArgs\n-    : (constant | fullColumnName | functionCall | expression)\n+    : (constant | fullColumnName | expression)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NTAwMg==", "bodyText": "functionCall is moved to nestedFunctionArgs.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366475002", "createdAt": "2020-01-14T17:32:45Z", "author": {"login": "chloe-zh"}, "path": "src/main/antlr/OpenDistroSqlParser.g4", "diffHunk": "@@ -324,20 +336,29 @@ aggregateWindowedFunction\n     | COUNT '(' aggregator=DISTINCT functionArgs ')'\n     ;\n \n+functionAsAggregatorFunction\n+    : (AVG | MAX | MIN | SUM)\n+      '(' aggregator=(ALL | DISTINCT)? functionCall ')'\n+    ;\n+\n scalarFunctionName\n     : functionNameBase\n     ;\n \n functionArgs\n-    : (constant | fullColumnName | functionCall | expression)\n+    : (constant | fullColumnName | expression)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5OTQyMQ=="}, "originalCommit": {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDg1NTc2OnYy", "diffSide": "LEFT", "path": "src/main/antlr/OpenDistroSqlParser.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyNzo0NVrOFdmVjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NzoxM1rOFdnHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MTEzMw==", "bodyText": "As my understanding, the changes are temporary and may be reverted later. Could you comment it out rather than remove it and put new rules you added together (probably better with comments explaining why)? Just in case someone else would make change on top of yours and hard to track only by commit history.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366581133", "createdAt": "2020-01-14T21:27:45Z", "author": {"login": "dai-chen"}, "path": "src/main/antlr/OpenDistroSqlParser.g4", "diffHunk": "@@ -324,20 +336,30 @@ aggregateWindowedFunction\n     | COUNT '(' aggregator=DISTINCT functionArgs ')'\n     ;\n \n+functionAsAggregatorFunction\n+    : (AVG | MAX | MIN | SUM)\n+      '(' aggregator=(ALL | DISTINCT)? functionCall ')'\n+    | COUNT '(' aggregator=(ALL | DISTINCT)? functionCall ')'\n+    ;\n+\n scalarFunctionName\n     : functionNameBase\n     ;\n \n functionArgs\n-    : (constant | fullColumnName | functionCall | expression)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mzg1NA==", "bodyText": "Ok that makes sense, will do. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366593854", "createdAt": "2020-01-14T21:57:13Z", "author": {"login": "chloe-zh"}, "path": "src/main/antlr/OpenDistroSqlParser.g4", "diffHunk": "@@ -324,20 +336,30 @@ aggregateWindowedFunction\n     | COUNT '(' aggregator=DISTINCT functionArgs ')'\n     ;\n \n+functionAsAggregatorFunction\n+    : (AVG | MAX | MIN | SUM)\n+      '(' aggregator=(ALL | DISTINCT)? functionCall ')'\n+    | COUNT '(' aggregator=(ALL | DISTINCT)? functionCall ')'\n+    ;\n+\n scalarFunctionName\n     : functionNameBase\n     ;\n \n functionArgs\n-    : (constant | fullColumnName | functionCall | expression)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MTEzMw=="}, "originalCommit": {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDg3MzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTozNDoyOVrOFdmgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0ODowMlrOFeKDkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA==", "bodyText": "Same suggestion for the new code you're adding here: could you move them to another class, ex. UnsupportedFunction?\nBtw, for another option, could you explore the possibility of intercepting and checking what you're interested in an implementation class of GenericSqlParseTreeVisitor without touching grammar file? I think at least it's doable for unsupported function and operator which can help you minimize the changes.", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366583980", "createdAt": "2020-01-14T21:34:29Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java", "diffHunk": "@@ -217,11 +231,37 @@ public T visitUdfFunctionCall(UdfFunctionCallContext ctx) {\n         return reduce(func, ctx.functionArgs());\n     }\n \n-    // This check should be able to accomplish in grammar\n+    /**\n+     * The scalar function calls are separated into (a)typical function calls; (b)nested function calls with functions\n+     * as arguments, like abs(log(...)); (c)aggregations with functions as aggregators, like max(abs(....)).\n+     * Currently, we do not support nested functions or nested aggregations, aka (b) and (c).\n+     * However, for the special EsFunctions included in the [supportedNestedFunctions] set, we have supported them in\n+     * nested function calls and aggregations (b&c). Besides, the math constants included in the [mathConstants] set\n+     * are regraded as scalar functions, but they are working well in the painless script.\n+     *\n+     * Thus, the types of functions to throw exceptions:\n+     * (I)case (b) except that the arguments are from the [mathConstants] set;\n+     * (II) case (b) except that the arguments are from the [supportedNestedFunctions] set;\n+     * (III) case (c) except that the aggregators are from thet [supportedNestedFunctions] set.\n+     */\n     @Override\n     public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2NjAxOQ==", "bodyText": "Ok will do!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366666019", "createdAt": "2020-01-15T02:09:04Z", "author": {"login": "chloe-zh"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java", "diffHunk": "@@ -217,11 +231,37 @@ public T visitUdfFunctionCall(UdfFunctionCallContext ctx) {\n         return reduce(func, ctx.functionArgs());\n     }\n \n-    // This check should be able to accomplish in grammar\n+    /**\n+     * The scalar function calls are separated into (a)typical function calls; (b)nested function calls with functions\n+     * as arguments, like abs(log(...)); (c)aggregations with functions as aggregators, like max(abs(....)).\n+     * Currently, we do not support nested functions or nested aggregations, aka (b) and (c).\n+     * However, for the special EsFunctions included in the [supportedNestedFunctions] set, we have supported them in\n+     * nested function calls and aggregations (b&c). Besides, the math constants included in the [mathConstants] set\n+     * are regraded as scalar functions, but they are working well in the painless script.\n+     *\n+     * Thus, the types of functions to throw exceptions:\n+     * (I)case (b) except that the arguments are from the [mathConstants] set;\n+     * (II) case (b) except that the arguments are from the [supportedNestedFunctions] set;\n+     * (III) case (c) except that the aggregators are from thet [supportedNestedFunctions] set.\n+     */\n     @Override\n     public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA=="}, "originalCommit": {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5NzE0OA==", "bodyText": "It's done now. Thanks!", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366697148", "createdAt": "2020-01-15T05:04:56Z", "author": {"login": "chloe-zh"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java", "diffHunk": "@@ -217,11 +231,37 @@ public T visitUdfFunctionCall(UdfFunctionCallContext ctx) {\n         return reduce(func, ctx.functionArgs());\n     }\n \n-    // This check should be able to accomplish in grammar\n+    /**\n+     * The scalar function calls are separated into (a)typical function calls; (b)nested function calls with functions\n+     * as arguments, like abs(log(...)); (c)aggregations with functions as aggregators, like max(abs(....)).\n+     * Currently, we do not support nested functions or nested aggregations, aka (b) and (c).\n+     * However, for the special EsFunctions included in the [supportedNestedFunctions] set, we have supported them in\n+     * nested function calls and aggregations (b&c). Besides, the math constants included in the [mathConstants] set\n+     * are regraded as scalar functions, but they are working well in the painless script.\n+     *\n+     * Thus, the types of functions to throw exceptions:\n+     * (I)case (b) except that the arguments are from the [mathConstants] set;\n+     * (II) case (b) except that the arguments are from the [supportedNestedFunctions] set;\n+     * (III) case (c) except that the aggregators are from thet [supportedNestedFunctions] set.\n+     */\n     @Override\n     public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA=="}, "originalCommit": {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjM1NQ==", "bodyText": "Thanks for the changes! And we can make it better. Sorry I didn't make it clear at first.\nclass AntlrSqlParseTreeVisitor {\n    public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {\n        xxx.verify(ctx);\n        T func = visit(ctx.scalarFunctionName());\n        return reduce(func, ctx.functionArgs());\n    }\n\n    public T visitMathOperator(MathOperatorContext ctx) {\n        xxx.verify(ctx);\n        return super.visitMathOperator(ctx);\n    }\n    ...\n}\n\nclass XXX { // Need a good name for this abstraction (semantics that we don't support for now).\n    private static final Set<String> mathConstants, unsupportedFunctions ...\n\n    public void verify(ScalarFunctionCallContext ctx) {\n        ...\n    }\n\n    public void verify(MathOperatorContext ctx) {\n        if (unsupportedOperators.contains(StringUtils.toLower(ctx.getText())))\n            throw new SqlFeatureNotImplementedException(...);\n    }\n\n   ...\n}", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r367166355", "createdAt": "2020-01-15T23:48:02Z", "author": {"login": "dai-chen"}, "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java", "diffHunk": "@@ -217,11 +231,37 @@ public T visitUdfFunctionCall(UdfFunctionCallContext ctx) {\n         return reduce(func, ctx.functionArgs());\n     }\n \n-    // This check should be able to accomplish in grammar\n+    /**\n+     * The scalar function calls are separated into (a)typical function calls; (b)nested function calls with functions\n+     * as arguments, like abs(log(...)); (c)aggregations with functions as aggregators, like max(abs(....)).\n+     * Currently, we do not support nested functions or nested aggregations, aka (b) and (c).\n+     * However, for the special EsFunctions included in the [supportedNestedFunctions] set, we have supported them in\n+     * nested function calls and aggregations (b&c). Besides, the math constants included in the [mathConstants] set\n+     * are regraded as scalar functions, but they are working well in the painless script.\n+     *\n+     * Thus, the types of functions to throw exceptions:\n+     * (I)case (b) except that the arguments are from the [mathConstants] set;\n+     * (II) case (b) except that the arguments are from the [supportedNestedFunctions] set;\n+     * (III) case (c) except that the aggregators are from thet [supportedNestedFunctions] set.\n+     */\n     @Override\n     public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA=="}, "originalCommit": {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODU0ODMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzozNToyMlrOFeJ2JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzozNToyMlrOFeJ2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MjkxNw==", "bodyText": "I think you can put the comment into reason field, ex.@Ignore(\"Test set ...\")", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r367162917", "createdAt": "2020-01-15T23:35:22Z", "author": {"login": "dai-chen"}, "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a00a97e1340be43698d9f30cada3846ea185394"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2152, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}